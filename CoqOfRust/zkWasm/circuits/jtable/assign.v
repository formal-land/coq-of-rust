(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module circuits.
  Module jtable.
    Module assign.
      Module Impl_delphinus_zkwasm_circuits_jtable_JumpTableChip_F.
        Definition Self (F : Ty.t) : Ty.t :=
          Ty.apply (Ty.path "delphinus_zkwasm::circuits::jtable::JumpTableChip") [ F ].
        
        (*
            fn assign_first_rest_jops(
                &self,
                ctx: &mut Context<'_, F>,
                rest_jops: BigUint,
            ) -> Result<AssignedCell<F, F>, Error> {
                let cell = ctx.region.assign_advice(
                    || "jtable rest",
                    self.config.data,
                    JtableOffset::JtableOffsetRest as usize,
                    || Ok(bn_to_field(&rest_jops)),
                )?;
        
                Ok(cell)
            }
        *)
        Definition assign_first_rest_jops (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self F in
          match τ, α with
          | [], [ self; ctx; rest_jops ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              let ctx := M.alloc (| ctx |) in
              let rest_jops := M.alloc (| rest_jops |) in
              M.catch_return (|
                ltac:(M.monadic
                  (M.read (|
                    let cell :=
                      M.copy (|
                        M.match_operator (|
                          M.alloc (|
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::ops::try_trait::Try",
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  [
                                    Ty.apply
                                      (Ty.path "halo2_proofs::circuit::AssignedCell")
                                      [ F; F ];
                                    Ty.path "halo2_proofs::plonk::error::Error"
                                  ],
                                [],
                                "branch",
                                []
                              |),
                              [
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.apply (Ty.path "halo2_proofs::circuit::Region") [ F ],
                                    "assign_advice",
                                    [
                                      Ty.function
                                        [ Ty.tuple [] ]
                                        (Ty.apply
                                          (Ty.path "core::result::Result")
                                          [ F; Ty.path "halo2_proofs::plonk::error::Error" ]);
                                      F;
                                      Ty.function
                                        [ Ty.tuple [] ]
                                        (Ty.apply (Ty.path "&") [ Ty.path "str" ]);
                                      Ty.apply (Ty.path "&") [ Ty.path "str" ]
                                    ]
                                  |),
                                  [
                                    M.read (|
                                      M.SubPointer.get_struct_record_field (|
                                        M.read (| ctx |),
                                        "delphinus_zkwasm::circuits::utils::Context",
                                        "region"
                                      |)
                                    |);
                                    M.closure
                                      (fun γ =>
                                        ltac:(M.monadic
                                          match γ with
                                          | [ α0 ] =>
                                            M.match_operator (|
                                              M.alloc (| α0 |),
                                              [
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (M.read (| Value.String "jtable rest" |)))
                                              ]
                                            |)
                                          | _ => M.impossible (||)
                                          end));
                                    M.read (|
                                      M.SubPointer.get_struct_record_field (|
                                        M.SubPointer.get_struct_record_field (|
                                          M.read (| self |),
                                          "delphinus_zkwasm::circuits::jtable::JumpTableChip",
                                          "config"
                                        |),
                                        "delphinus_zkwasm::circuits::jtable::JumpTableConfig",
                                        "data"
                                      |)
                                    |);
                                    M.rust_cast
                                      (BinOp.Panic.add (|
                                        Integer.Isize,
                                        M.get_constant (|
                                          "delphinus_zkwasm::circuits::jtable::JtableOffset::JtableOffsetRest_discriminant"
                                        |),
                                        Value.Integer 0
                                      |));
                                    M.closure
                                      (fun γ =>
                                        ltac:(M.monadic
                                          match γ with
                                          | [ α0 ] =>
                                            M.match_operator (|
                                              M.alloc (| α0 |),
                                              [
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (Value.StructTuple
                                                      "core::result::Result::Ok"
                                                      [
                                                        M.call_closure (|
                                                          M.get_function (|
                                                            "delphinus_zkwasm::circuits::utils::bn_to_field",
                                                            [ F ]
                                                          |),
                                                          [ rest_jops ]
                                                        |)
                                                      ]))
                                              ]
                                            |)
                                          | _ => M.impossible (||)
                                          end))
                                  ]
                                |)
                              ]
                            |)
                          |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ0_0 :=
                                  M.SubPointer.get_struct_tuple_field (|
                                    γ,
                                    "core::ops::control_flow::ControlFlow::Break",
                                    0
                                  |) in
                                let residual := M.copy (| γ0_0 |) in
                                M.alloc (|
                                  M.never_to_any (|
                                    M.read (|
                                      M.return_ (|
                                        M.call_closure (|
                                          M.get_trait_method (|
                                            "core::ops::try_trait::FromResidual",
                                            Ty.apply
                                              (Ty.path "core::result::Result")
                                              [
                                                Ty.apply
                                                  (Ty.path "halo2_proofs::circuit::AssignedCell")
                                                  [ F; F ];
                                                Ty.path "halo2_proofs::plonk::error::Error"
                                              ],
                                            [
                                              Ty.apply
                                                (Ty.path "core::result::Result")
                                                [
                                                  Ty.path "core::convert::Infallible";
                                                  Ty.path "halo2_proofs::plonk::error::Error"
                                                ]
                                            ],
                                            "from_residual",
                                            []
                                          |),
                                          [ M.read (| residual |) ]
                                        |)
                                      |)
                                    |)
                                  |)
                                |)));
                            fun γ =>
                              ltac:(M.monadic
                                (let γ0_0 :=
                                  M.SubPointer.get_struct_tuple_field (|
                                    γ,
                                    "core::ops::control_flow::ControlFlow::Continue",
                                    0
                                  |) in
                                let val := M.copy (| γ0_0 |) in
                                val))
                          ]
                        |)
                      |) in
                    M.alloc (| Value.StructTuple "core::result::Result::Ok" [ M.read (| cell |) ] |)
                  |)))
              |)))
          | _, _ => M.impossible
          end.
        
        Axiom AssociatedFunction_assign_first_rest_jops :
          forall (F : Ty.t),
          M.IsAssociatedFunction (Self F) "assign_first_rest_jops" (assign_first_rest_jops F).
        
        (*
            fn init(&self, ctx: &mut Context<'_, F>) -> Result<(), Error> {
                let capability = self.max_available_rows / JtableOffset::JtableOffsetMax as usize;
        
                for i in 0..capability {
                    ctx.region.assign_fixed(
                        || "jtable sel",
                        self.config.sel,
                        ctx.offset,
                        || Ok(F::one()),
                    )?;
        
                    if i == capability - 1 {
                        ctx.region.assign_advice_from_constant(
                            || "jtable entry terminate",
                            self.config.data,
                            ctx.offset + JtableOffset::JtableOffsetRest as usize,
                            F::zero(),
                        )?;
                    }
        
                    ctx.step(JtableOffset::JtableOffsetMax as usize);
                }
        
                Ok(())
            }
        *)
        Definition init (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self F in
          match τ, α with
          | [], [ self; ctx ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              let ctx := M.alloc (| ctx |) in
              M.catch_return (|
                ltac:(M.monadic
                  (M.read (|
                    let capability :=
                      M.alloc (|
                        BinOp.Panic.div (|
                          Integer.Usize,
                          M.read (|
                            M.SubPointer.get_struct_record_field (|
                              M.read (| self |),
                              "delphinus_zkwasm::circuits::jtable::JumpTableChip",
                              "max_available_rows"
                            |)
                          |),
                          M.rust_cast
                            (BinOp.Panic.add (|
                              Integer.Isize,
                              M.get_constant (|
                                "delphinus_zkwasm::circuits::jtable::JtableOffset::JtableOffsetMax_discriminant"
                              |),
                              Value.Integer 0
                            |))
                        |)
                      |) in
                    let _ :=
                      M.use
                        (M.match_operator (|
                          M.alloc (|
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::iter::traits::collect::IntoIterator",
                                Ty.apply (Ty.path "core::ops::range::Range") [ Ty.path "usize" ],
                                [],
                                "into_iter",
                                []
                              |),
                              [
                                Value.StructRecord
                                  "core::ops::range::Range"
                                  [ ("start", Value.Integer 0); ("end_", M.read (| capability |)) ]
                              ]
                            |)
                          |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let iter := M.copy (| γ |) in
                                M.loop (|
                                  ltac:(M.monadic
                                    (let _ :=
                                      M.match_operator (|
                                        M.alloc (|
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "core::iter::traits::iterator::Iterator",
                                              Ty.apply
                                                (Ty.path "core::ops::range::Range")
                                                [ Ty.path "usize" ],
                                              [],
                                              "next",
                                              []
                                            |),
                                            [ iter ]
                                          |)
                                        |),
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (M.alloc (|
                                                M.never_to_any (| M.read (| M.break (||) |) |)
                                              |)));
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let γ0_0 :=
                                                M.SubPointer.get_struct_tuple_field (|
                                                  γ,
                                                  "core::option::Option::Some",
                                                  0
                                                |) in
                                              let i := M.copy (| γ0_0 |) in
                                              let _ :=
                                                M.match_operator (|
                                                  M.alloc (|
                                                    M.call_closure (|
                                                      M.get_trait_method (|
                                                        "core::ops::try_trait::Try",
                                                        Ty.apply
                                                          (Ty.path "core::result::Result")
                                                          [
                                                            Ty.apply
                                                              (Ty.path
                                                                "halo2_proofs::circuit::AssignedCell")
                                                              [ F; F ];
                                                            Ty.path
                                                              "halo2_proofs::plonk::error::Error"
                                                          ],
                                                        [],
                                                        "branch",
                                                        []
                                                      |),
                                                      [
                                                        M.call_closure (|
                                                          M.get_associated_function (|
                                                            Ty.apply
                                                              (Ty.path
                                                                "halo2_proofs::circuit::Region")
                                                              [ F ],
                                                            "assign_fixed",
                                                            [
                                                              Ty.function
                                                                [ Ty.tuple [] ]
                                                                (Ty.apply
                                                                  (Ty.path "core::result::Result")
                                                                  [
                                                                    F;
                                                                    Ty.path
                                                                      "halo2_proofs::plonk::error::Error"
                                                                  ]);
                                                              F;
                                                              Ty.function
                                                                [ Ty.tuple [] ]
                                                                (Ty.apply
                                                                  (Ty.path "&")
                                                                  [ Ty.path "str" ]);
                                                              Ty.apply
                                                                (Ty.path "&")
                                                                [ Ty.path "str" ]
                                                            ]
                                                          |),
                                                          [
                                                            M.read (|
                                                              M.SubPointer.get_struct_record_field (|
                                                                M.read (| ctx |),
                                                                "delphinus_zkwasm::circuits::utils::Context",
                                                                "region"
                                                              |)
                                                            |);
                                                            M.closure
                                                              (fun γ =>
                                                                ltac:(M.monadic
                                                                  match γ with
                                                                  | [ α0 ] =>
                                                                    M.match_operator (|
                                                                      M.alloc (| α0 |),
                                                                      [
                                                                        fun γ =>
                                                                          ltac:(M.monadic
                                                                            (M.read (|
                                                                              Value.String
                                                                                "jtable sel"
                                                                            |)))
                                                                      ]
                                                                    |)
                                                                  | _ => M.impossible (||)
                                                                  end));
                                                            M.read (|
                                                              M.SubPointer.get_struct_record_field (|
                                                                M.SubPointer.get_struct_record_field (|
                                                                  M.read (| self |),
                                                                  "delphinus_zkwasm::circuits::jtable::JumpTableChip",
                                                                  "config"
                                                                |),
                                                                "delphinus_zkwasm::circuits::jtable::JumpTableConfig",
                                                                "sel"
                                                              |)
                                                            |);
                                                            M.read (|
                                                              M.SubPointer.get_struct_record_field (|
                                                                M.read (| ctx |),
                                                                "delphinus_zkwasm::circuits::utils::Context",
                                                                "offset"
                                                              |)
                                                            |);
                                                            M.closure
                                                              (fun γ =>
                                                                ltac:(M.monadic
                                                                  match γ with
                                                                  | [ α0 ] =>
                                                                    M.match_operator (|
                                                                      M.alloc (| α0 |),
                                                                      [
                                                                        fun γ =>
                                                                          ltac:(M.monadic
                                                                            (Value.StructTuple
                                                                              "core::result::Result::Ok"
                                                                              [
                                                                                M.call_closure (|
                                                                                  M.get_trait_method (|
                                                                                    "ff::Field",
                                                                                    F,
                                                                                    [],
                                                                                    "one",
                                                                                    []
                                                                                  |),
                                                                                  []
                                                                                |)
                                                                              ]))
                                                                      ]
                                                                    |)
                                                                  | _ => M.impossible (||)
                                                                  end))
                                                          ]
                                                        |)
                                                      ]
                                                    |)
                                                  |),
                                                  [
                                                    fun γ =>
                                                      ltac:(M.monadic
                                                        (let γ0_0 :=
                                                          M.SubPointer.get_struct_tuple_field (|
                                                            γ,
                                                            "core::ops::control_flow::ControlFlow::Break",
                                                            0
                                                          |) in
                                                        let residual := M.copy (| γ0_0 |) in
                                                        M.alloc (|
                                                          M.never_to_any (|
                                                            M.read (|
                                                              M.return_ (|
                                                                M.call_closure (|
                                                                  M.get_trait_method (|
                                                                    "core::ops::try_trait::FromResidual",
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "core::result::Result")
                                                                      [
                                                                        Ty.tuple [];
                                                                        Ty.path
                                                                          "halo2_proofs::plonk::error::Error"
                                                                      ],
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "core::result::Result")
                                                                        [
                                                                          Ty.path
                                                                            "core::convert::Infallible";
                                                                          Ty.path
                                                                            "halo2_proofs::plonk::error::Error"
                                                                        ]
                                                                    ],
                                                                    "from_residual",
                                                                    []
                                                                  |),
                                                                  [ M.read (| residual |) ]
                                                                |)
                                                              |)
                                                            |)
                                                          |)
                                                        |)));
                                                    fun γ =>
                                                      ltac:(M.monadic
                                                        (let γ0_0 :=
                                                          M.SubPointer.get_struct_tuple_field (|
                                                            γ,
                                                            "core::ops::control_flow::ControlFlow::Continue",
                                                            0
                                                          |) in
                                                        let val := M.copy (| γ0_0 |) in
                                                        val))
                                                  ]
                                                |) in
                                              let _ :=
                                                M.match_operator (|
                                                  M.alloc (| Value.Tuple [] |),
                                                  [
                                                    fun γ =>
                                                      ltac:(M.monadic
                                                        (let γ :=
                                                          M.use
                                                            (M.alloc (|
                                                              BinOp.Pure.eq
                                                                (M.read (| i |))
                                                                (BinOp.Panic.sub (|
                                                                  Integer.Usize,
                                                                  M.read (| capability |),
                                                                  Value.Integer 1
                                                                |))
                                                            |)) in
                                                        let _ :=
                                                          M.is_constant_or_break_match (|
                                                            M.read (| γ |),
                                                            Value.Bool true
                                                          |) in
                                                        let _ :=
                                                          M.match_operator (|
                                                            M.alloc (|
                                                              M.call_closure (|
                                                                M.get_trait_method (|
                                                                  "core::ops::try_trait::Try",
                                                                  Ty.apply
                                                                    (Ty.path "core::result::Result")
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "halo2_proofs::circuit::AssignedCell")
                                                                        [ F; F ];
                                                                      Ty.path
                                                                        "halo2_proofs::plonk::error::Error"
                                                                    ],
                                                                  [],
                                                                  "branch",
                                                                  []
                                                                |),
                                                                [
                                                                  M.call_closure (|
                                                                    M.get_associated_function (|
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "halo2_proofs::circuit::Region")
                                                                        [ F ],
                                                                      "assign_advice_from_constant",
                                                                      [
                                                                        F;
                                                                        Ty.function
                                                                          [ Ty.tuple [] ]
                                                                          (Ty.apply
                                                                            (Ty.path "&")
                                                                            [ Ty.path "str" ]);
                                                                        Ty.apply
                                                                          (Ty.path "&")
                                                                          [ Ty.path "str" ]
                                                                      ]
                                                                    |),
                                                                    [
                                                                      M.read (|
                                                                        M.SubPointer.get_struct_record_field (|
                                                                          M.read (| ctx |),
                                                                          "delphinus_zkwasm::circuits::utils::Context",
                                                                          "region"
                                                                        |)
                                                                      |);
                                                                      M.closure
                                                                        (fun γ =>
                                                                          ltac:(M.monadic
                                                                            match γ with
                                                                            | [ α0 ] =>
                                                                              M.match_operator (|
                                                                                M.alloc (| α0 |),
                                                                                [
                                                                                  fun γ =>
                                                                                    ltac:(M.monadic
                                                                                      (M.read (|
                                                                                        Value.String
                                                                                          "jtable entry terminate"
                                                                                      |)))
                                                                                ]
                                                                              |)
                                                                            | _ => M.impossible (||)
                                                                            end));
                                                                      M.read (|
                                                                        M.SubPointer.get_struct_record_field (|
                                                                          M.SubPointer.get_struct_record_field (|
                                                                            M.read (| self |),
                                                                            "delphinus_zkwasm::circuits::jtable::JumpTableChip",
                                                                            "config"
                                                                          |),
                                                                          "delphinus_zkwasm::circuits::jtable::JumpTableConfig",
                                                                          "data"
                                                                        |)
                                                                      |);
                                                                      BinOp.Panic.add (|
                                                                        Integer.Usize,
                                                                        M.read (|
                                                                          M.SubPointer.get_struct_record_field (|
                                                                            M.read (| ctx |),
                                                                            "delphinus_zkwasm::circuits::utils::Context",
                                                                            "offset"
                                                                          |)
                                                                        |),
                                                                        M.rust_cast
                                                                          (BinOp.Panic.add (|
                                                                            Integer.Isize,
                                                                            M.get_constant (|
                                                                              "delphinus_zkwasm::circuits::jtable::JtableOffset::JtableOffsetRest_discriminant"
                                                                            |),
                                                                            Value.Integer 0
                                                                          |))
                                                                      |);
                                                                      M.call_closure (|
                                                                        M.get_trait_method (|
                                                                          "ff::Field",
                                                                          F,
                                                                          [],
                                                                          "zero",
                                                                          []
                                                                        |),
                                                                        []
                                                                      |)
                                                                    ]
                                                                  |)
                                                                ]
                                                              |)
                                                            |),
                                                            [
                                                              fun γ =>
                                                                ltac:(M.monadic
                                                                  (let γ0_0 :=
                                                                    M.SubPointer.get_struct_tuple_field (|
                                                                      γ,
                                                                      "core::ops::control_flow::ControlFlow::Break",
                                                                      0
                                                                    |) in
                                                                  let residual :=
                                                                    M.copy (| γ0_0 |) in
                                                                  M.alloc (|
                                                                    M.never_to_any (|
                                                                      M.read (|
                                                                        M.return_ (|
                                                                          M.call_closure (|
                                                                            M.get_trait_method (|
                                                                              "core::ops::try_trait::FromResidual",
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "core::result::Result")
                                                                                [
                                                                                  Ty.tuple [];
                                                                                  Ty.path
                                                                                    "halo2_proofs::plonk::error::Error"
                                                                                ],
                                                                              [
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "core::result::Result")
                                                                                  [
                                                                                    Ty.path
                                                                                      "core::convert::Infallible";
                                                                                    Ty.path
                                                                                      "halo2_proofs::plonk::error::Error"
                                                                                  ]
                                                                              ],
                                                                              "from_residual",
                                                                              []
                                                                            |),
                                                                            [ M.read (| residual |)
                                                                            ]
                                                                          |)
                                                                        |)
                                                                      |)
                                                                    |)
                                                                  |)));
                                                              fun γ =>
                                                                ltac:(M.monadic
                                                                  (let γ0_0 :=
                                                                    M.SubPointer.get_struct_tuple_field (|
                                                                      γ,
                                                                      "core::ops::control_flow::ControlFlow::Continue",
                                                                      0
                                                                    |) in
                                                                  let val := M.copy (| γ0_0 |) in
                                                                  val))
                                                            ]
                                                          |) in
                                                        M.alloc (| Value.Tuple [] |)));
                                                    fun γ =>
                                                      ltac:(M.monadic
                                                        (M.alloc (| Value.Tuple [] |)))
                                                  ]
                                                |) in
                                              let _ :=
                                                M.alloc (|
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.apply
                                                        (Ty.path
                                                          "delphinus_zkwasm::circuits::utils::Context")
                                                        [ F ],
                                                      "step",
                                                      []
                                                    |),
                                                    [
                                                      M.read (| ctx |);
                                                      M.rust_cast
                                                        (BinOp.Panic.add (|
                                                          Integer.Isize,
                                                          M.get_constant (|
                                                            "delphinus_zkwasm::circuits::jtable::JtableOffset::JtableOffsetMax_discriminant"
                                                          |),
                                                          Value.Integer 0
                                                        |))
                                                    ]
                                                  |)
                                                |) in
                                              M.alloc (| Value.Tuple [] |)))
                                        ]
                                      |) in
                                    M.alloc (| Value.Tuple [] |)))
                                |)))
                          ]
                        |)) in
                    M.alloc (| Value.StructTuple "core::result::Result::Ok" [ Value.Tuple [] ] |)
                  |)))
              |)))
          | _, _ => M.impossible
          end.
        
        Axiom AssociatedFunction_init :
          forall (F : Ty.t),
          M.IsAssociatedFunction (Self F) "init" (init F).
        
        (*
            fn assign_static_entries_and_first_rest_jops(
                &self,
                ctx: &mut Context<'_, F>,
                rest_jops: &mut BigUint,
                static_entries: &[StaticFrameEntry; STATIC_FRAME_ENTRY_NUMBER],
            ) -> Result<[(AssignedCell<F, F>, AssignedCell<F, F>); STATIC_FRAME_ENTRY_NUMBER], Error> {
                let mut cells = vec![];
        
                for entry in static_entries {
                    ctx.region.assign_fixed(
                        || "jtable start entries",
                        self.config.static_bit,
                        ctx.offset,
                        || Ok(F::one()),
                    )?;
        
                    let enable_cell = ctx.region.assign_advice(
                        || "jtable enable",
                        self.config.data,
                        ctx.offset,
                        || Ok(F::from(entry.enable as u64)),
                    )?;
                    ctx.next();
        
                    ctx.region.assign_advice(
                        || "jtable rest",
                        self.config.data,
                        ctx.offset,
                        || Ok(bn_to_field(rest_jops)),
                    )?;
                    ctx.next();
        
                    let entry_cell = ctx.region.assign_advice(
                        || "jtable entry",
                        self.config.data,
                        ctx.offset,
                        || Ok(bn_to_field(&entry.encode())),
                    )?;
                    ctx.next();
        
                    cells.push((enable_cell, entry_cell));
        
                    if entry.enable {
                        *rest_jops -= encode_jops(1, 0);
                    }
                }
        
                Ok(cells.try_into().expect(&format!(
                    "The number of static frame entries should be {}",
                    STATIC_FRAME_ENTRY_NUMBER
                )))
            }
        *)
        Definition assign_static_entries_and_first_rest_jops
            (F : Ty.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self F in
          match τ, α with
          | [], [ self; ctx; rest_jops; static_entries ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              let ctx := M.alloc (| ctx |) in
              let rest_jops := M.alloc (| rest_jops |) in
              let static_entries := M.alloc (| static_entries |) in
              M.catch_return (|
                ltac:(M.monadic
                  (M.read (|
                    let cells :=
                      M.alloc (|
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              [
                                Ty.tuple
                                  [
                                    Ty.apply
                                      (Ty.path "halo2_proofs::circuit::AssignedCell")
                                      [ F; F ];
                                    Ty.apply
                                      (Ty.path "halo2_proofs::circuit::AssignedCell")
                                      [ F; F ]
                                  ];
                                Ty.path "alloc::alloc::Global"
                              ],
                            "new",
                            []
                          |),
                          []
                        |)
                      |) in
                    let _ :=
                      M.use
                        (M.match_operator (|
                          M.alloc (|
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::iter::traits::collect::IntoIterator",
                                Ty.apply
                                  (Ty.path "&")
                                  [
                                    Ty.apply
                                      (Ty.path "array")
                                      [ Ty.path "specs::jtable::StaticFrameEntry" ]
                                  ],
                                [],
                                "into_iter",
                                []
                              |),
                              [ M.read (| static_entries |) ]
                            |)
                          |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let iter := M.copy (| γ |) in
                                M.loop (|
                                  ltac:(M.monadic
                                    (let _ :=
                                      M.match_operator (|
                                        M.alloc (|
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "core::iter::traits::iterator::Iterator",
                                              Ty.apply
                                                (Ty.path "core::slice::iter::Iter")
                                                [ Ty.path "specs::jtable::StaticFrameEntry" ],
                                              [],
                                              "next",
                                              []
                                            |),
                                            [ iter ]
                                          |)
                                        |),
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (M.alloc (|
                                                M.never_to_any (| M.read (| M.break (||) |) |)
                                              |)));
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let γ0_0 :=
                                                M.SubPointer.get_struct_tuple_field (|
                                                  γ,
                                                  "core::option::Option::Some",
                                                  0
                                                |) in
                                              let entry := M.copy (| γ0_0 |) in
                                              let _ :=
                                                M.match_operator (|
                                                  M.alloc (|
                                                    M.call_closure (|
                                                      M.get_trait_method (|
                                                        "core::ops::try_trait::Try",
                                                        Ty.apply
                                                          (Ty.path "core::result::Result")
                                                          [
                                                            Ty.apply
                                                              (Ty.path
                                                                "halo2_proofs::circuit::AssignedCell")
                                                              [ F; F ];
                                                            Ty.path
                                                              "halo2_proofs::plonk::error::Error"
                                                          ],
                                                        [],
                                                        "branch",
                                                        []
                                                      |),
                                                      [
                                                        M.call_closure (|
                                                          M.get_associated_function (|
                                                            Ty.apply
                                                              (Ty.path
                                                                "halo2_proofs::circuit::Region")
                                                              [ F ],
                                                            "assign_fixed",
                                                            [
                                                              Ty.function
                                                                [ Ty.tuple [] ]
                                                                (Ty.apply
                                                                  (Ty.path "core::result::Result")
                                                                  [
                                                                    F;
                                                                    Ty.path
                                                                      "halo2_proofs::plonk::error::Error"
                                                                  ]);
                                                              F;
                                                              Ty.function
                                                                [ Ty.tuple [] ]
                                                                (Ty.apply
                                                                  (Ty.path "&")
                                                                  [ Ty.path "str" ]);
                                                              Ty.apply
                                                                (Ty.path "&")
                                                                [ Ty.path "str" ]
                                                            ]
                                                          |),
                                                          [
                                                            M.read (|
                                                              M.SubPointer.get_struct_record_field (|
                                                                M.read (| ctx |),
                                                                "delphinus_zkwasm::circuits::utils::Context",
                                                                "region"
                                                              |)
                                                            |);
                                                            M.closure
                                                              (fun γ =>
                                                                ltac:(M.monadic
                                                                  match γ with
                                                                  | [ α0 ] =>
                                                                    M.match_operator (|
                                                                      M.alloc (| α0 |),
                                                                      [
                                                                        fun γ =>
                                                                          ltac:(M.monadic
                                                                            (M.read (|
                                                                              Value.String
                                                                                "jtable start entries"
                                                                            |)))
                                                                      ]
                                                                    |)
                                                                  | _ => M.impossible (||)
                                                                  end));
                                                            M.read (|
                                                              M.SubPointer.get_struct_record_field (|
                                                                M.SubPointer.get_struct_record_field (|
                                                                  M.read (| self |),
                                                                  "delphinus_zkwasm::circuits::jtable::JumpTableChip",
                                                                  "config"
                                                                |),
                                                                "delphinus_zkwasm::circuits::jtable::JumpTableConfig",
                                                                "static_bit"
                                                              |)
                                                            |);
                                                            M.read (|
                                                              M.SubPointer.get_struct_record_field (|
                                                                M.read (| ctx |),
                                                                "delphinus_zkwasm::circuits::utils::Context",
                                                                "offset"
                                                              |)
                                                            |);
                                                            M.closure
                                                              (fun γ =>
                                                                ltac:(M.monadic
                                                                  match γ with
                                                                  | [ α0 ] =>
                                                                    M.match_operator (|
                                                                      M.alloc (| α0 |),
                                                                      [
                                                                        fun γ =>
                                                                          ltac:(M.monadic
                                                                            (Value.StructTuple
                                                                              "core::result::Result::Ok"
                                                                              [
                                                                                M.call_closure (|
                                                                                  M.get_trait_method (|
                                                                                    "ff::Field",
                                                                                    F,
                                                                                    [],
                                                                                    "one",
                                                                                    []
                                                                                  |),
                                                                                  []
                                                                                |)
                                                                              ]))
                                                                      ]
                                                                    |)
                                                                  | _ => M.impossible (||)
                                                                  end))
                                                          ]
                                                        |)
                                                      ]
                                                    |)
                                                  |),
                                                  [
                                                    fun γ =>
                                                      ltac:(M.monadic
                                                        (let γ0_0 :=
                                                          M.SubPointer.get_struct_tuple_field (|
                                                            γ,
                                                            "core::ops::control_flow::ControlFlow::Break",
                                                            0
                                                          |) in
                                                        let residual := M.copy (| γ0_0 |) in
                                                        M.alloc (|
                                                          M.never_to_any (|
                                                            M.read (|
                                                              M.return_ (|
                                                                M.call_closure (|
                                                                  M.get_trait_method (|
                                                                    "core::ops::try_trait::FromResidual",
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "core::result::Result")
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path "array")
                                                                          [
                                                                            Ty.tuple
                                                                              [
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "halo2_proofs::circuit::AssignedCell")
                                                                                  [ F; F ];
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "halo2_proofs::circuit::AssignedCell")
                                                                                  [ F; F ]
                                                                              ]
                                                                          ];
                                                                        Ty.path
                                                                          "halo2_proofs::plonk::error::Error"
                                                                      ],
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "core::result::Result")
                                                                        [
                                                                          Ty.path
                                                                            "core::convert::Infallible";
                                                                          Ty.path
                                                                            "halo2_proofs::plonk::error::Error"
                                                                        ]
                                                                    ],
                                                                    "from_residual",
                                                                    []
                                                                  |),
                                                                  [ M.read (| residual |) ]
                                                                |)
                                                              |)
                                                            |)
                                                          |)
                                                        |)));
                                                    fun γ =>
                                                      ltac:(M.monadic
                                                        (let γ0_0 :=
                                                          M.SubPointer.get_struct_tuple_field (|
                                                            γ,
                                                            "core::ops::control_flow::ControlFlow::Continue",
                                                            0
                                                          |) in
                                                        let val := M.copy (| γ0_0 |) in
                                                        val))
                                                  ]
                                                |) in
                                              let enable_cell :=
                                                M.copy (|
                                                  M.match_operator (|
                                                    M.alloc (|
                                                      M.call_closure (|
                                                        M.get_trait_method (|
                                                          "core::ops::try_trait::Try",
                                                          Ty.apply
                                                            (Ty.path "core::result::Result")
                                                            [
                                                              Ty.apply
                                                                (Ty.path
                                                                  "halo2_proofs::circuit::AssignedCell")
                                                                [ F; F ];
                                                              Ty.path
                                                                "halo2_proofs::plonk::error::Error"
                                                            ],
                                                          [],
                                                          "branch",
                                                          []
                                                        |),
                                                        [
                                                          M.call_closure (|
                                                            M.get_associated_function (|
                                                              Ty.apply
                                                                (Ty.path
                                                                  "halo2_proofs::circuit::Region")
                                                                [ F ],
                                                              "assign_advice",
                                                              [
                                                                Ty.function
                                                                  [ Ty.tuple [] ]
                                                                  (Ty.apply
                                                                    (Ty.path "core::result::Result")
                                                                    [
                                                                      F;
                                                                      Ty.path
                                                                        "halo2_proofs::plonk::error::Error"
                                                                    ]);
                                                                F;
                                                                Ty.function
                                                                  [ Ty.tuple [] ]
                                                                  (Ty.apply
                                                                    (Ty.path "&")
                                                                    [ Ty.path "str" ]);
                                                                Ty.apply
                                                                  (Ty.path "&")
                                                                  [ Ty.path "str" ]
                                                              ]
                                                            |),
                                                            [
                                                              M.read (|
                                                                M.SubPointer.get_struct_record_field (|
                                                                  M.read (| ctx |),
                                                                  "delphinus_zkwasm::circuits::utils::Context",
                                                                  "region"
                                                                |)
                                                              |);
                                                              M.closure
                                                                (fun γ =>
                                                                  ltac:(M.monadic
                                                                    match γ with
                                                                    | [ α0 ] =>
                                                                      M.match_operator (|
                                                                        M.alloc (| α0 |),
                                                                        [
                                                                          fun γ =>
                                                                            ltac:(M.monadic
                                                                              (M.read (|
                                                                                Value.String
                                                                                  "jtable enable"
                                                                              |)))
                                                                        ]
                                                                      |)
                                                                    | _ => M.impossible (||)
                                                                    end));
                                                              M.read (|
                                                                M.SubPointer.get_struct_record_field (|
                                                                  M.SubPointer.get_struct_record_field (|
                                                                    M.read (| self |),
                                                                    "delphinus_zkwasm::circuits::jtable::JumpTableChip",
                                                                    "config"
                                                                  |),
                                                                  "delphinus_zkwasm::circuits::jtable::JumpTableConfig",
                                                                  "data"
                                                                |)
                                                              |);
                                                              M.read (|
                                                                M.SubPointer.get_struct_record_field (|
                                                                  M.read (| ctx |),
                                                                  "delphinus_zkwasm::circuits::utils::Context",
                                                                  "offset"
                                                                |)
                                                              |);
                                                              M.closure
                                                                (fun γ =>
                                                                  ltac:(M.monadic
                                                                    match γ with
                                                                    | [ α0 ] =>
                                                                      M.match_operator (|
                                                                        M.alloc (| α0 |),
                                                                        [
                                                                          fun γ =>
                                                                            ltac:(M.monadic
                                                                              (Value.StructTuple
                                                                                "core::result::Result::Ok"
                                                                                [
                                                                                  M.call_closure (|
                                                                                    M.get_trait_method (|
                                                                                      "core::convert::From",
                                                                                      F,
                                                                                      [
                                                                                        Ty.path
                                                                                          "u64"
                                                                                      ],
                                                                                      "from",
                                                                                      []
                                                                                    |),
                                                                                    [
                                                                                      M.rust_cast
                                                                                        (M.read (|
                                                                                          M.SubPointer.get_struct_record_field (|
                                                                                            M.read (|
                                                                                              entry
                                                                                            |),
                                                                                            "specs::jtable::StaticFrameEntry",
                                                                                            "enable"
                                                                                          |)
                                                                                        |))
                                                                                    ]
                                                                                  |)
                                                                                ]))
                                                                        ]
                                                                      |)
                                                                    | _ => M.impossible (||)
                                                                    end))
                                                            ]
                                                          |)
                                                        ]
                                                      |)
                                                    |),
                                                    [
                                                      fun γ =>
                                                        ltac:(M.monadic
                                                          (let γ0_0 :=
                                                            M.SubPointer.get_struct_tuple_field (|
                                                              γ,
                                                              "core::ops::control_flow::ControlFlow::Break",
                                                              0
                                                            |) in
                                                          let residual := M.copy (| γ0_0 |) in
                                                          M.alloc (|
                                                            M.never_to_any (|
                                                              M.read (|
                                                                M.return_ (|
                                                                  M.call_closure (|
                                                                    M.get_trait_method (|
                                                                      "core::ops::try_trait::FromResidual",
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "core::result::Result")
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path "array")
                                                                            [
                                                                              Ty.tuple
                                                                                [
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "halo2_proofs::circuit::AssignedCell")
                                                                                    [ F; F ];
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "halo2_proofs::circuit::AssignedCell")
                                                                                    [ F; F ]
                                                                                ]
                                                                            ];
                                                                          Ty.path
                                                                            "halo2_proofs::plonk::error::Error"
                                                                        ],
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "core::result::Result")
                                                                          [
                                                                            Ty.path
                                                                              "core::convert::Infallible";
                                                                            Ty.path
                                                                              "halo2_proofs::plonk::error::Error"
                                                                          ]
                                                                      ],
                                                                      "from_residual",
                                                                      []
                                                                    |),
                                                                    [ M.read (| residual |) ]
                                                                  |)
                                                                |)
                                                              |)
                                                            |)
                                                          |)));
                                                      fun γ =>
                                                        ltac:(M.monadic
                                                          (let γ0_0 :=
                                                            M.SubPointer.get_struct_tuple_field (|
                                                              γ,
                                                              "core::ops::control_flow::ControlFlow::Continue",
                                                              0
                                                            |) in
                                                          let val := M.copy (| γ0_0 |) in
                                                          val))
                                                    ]
                                                  |)
                                                |) in
                                              let _ :=
                                                M.alloc (|
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.apply
                                                        (Ty.path
                                                          "delphinus_zkwasm::circuits::utils::Context")
                                                        [ F ],
                                                      "next",
                                                      []
                                                    |),
                                                    [ M.read (| ctx |) ]
                                                  |)
                                                |) in
                                              let _ :=
                                                M.match_operator (|
                                                  M.alloc (|
                                                    M.call_closure (|
                                                      M.get_trait_method (|
                                                        "core::ops::try_trait::Try",
                                                        Ty.apply
                                                          (Ty.path "core::result::Result")
                                                          [
                                                            Ty.apply
                                                              (Ty.path
                                                                "halo2_proofs::circuit::AssignedCell")
                                                              [ F; F ];
                                                            Ty.path
                                                              "halo2_proofs::plonk::error::Error"
                                                          ],
                                                        [],
                                                        "branch",
                                                        []
                                                      |),
                                                      [
                                                        M.call_closure (|
                                                          M.get_associated_function (|
                                                            Ty.apply
                                                              (Ty.path
                                                                "halo2_proofs::circuit::Region")
                                                              [ F ],
                                                            "assign_advice",
                                                            [
                                                              Ty.function
                                                                [ Ty.tuple [] ]
                                                                (Ty.apply
                                                                  (Ty.path "core::result::Result")
                                                                  [
                                                                    F;
                                                                    Ty.path
                                                                      "halo2_proofs::plonk::error::Error"
                                                                  ]);
                                                              F;
                                                              Ty.function
                                                                [ Ty.tuple [] ]
                                                                (Ty.apply
                                                                  (Ty.path "&")
                                                                  [ Ty.path "str" ]);
                                                              Ty.apply
                                                                (Ty.path "&")
                                                                [ Ty.path "str" ]
                                                            ]
                                                          |),
                                                          [
                                                            M.read (|
                                                              M.SubPointer.get_struct_record_field (|
                                                                M.read (| ctx |),
                                                                "delphinus_zkwasm::circuits::utils::Context",
                                                                "region"
                                                              |)
                                                            |);
                                                            M.closure
                                                              (fun γ =>
                                                                ltac:(M.monadic
                                                                  match γ with
                                                                  | [ α0 ] =>
                                                                    M.match_operator (|
                                                                      M.alloc (| α0 |),
                                                                      [
                                                                        fun γ =>
                                                                          ltac:(M.monadic
                                                                            (M.read (|
                                                                              Value.String
                                                                                "jtable rest"
                                                                            |)))
                                                                      ]
                                                                    |)
                                                                  | _ => M.impossible (||)
                                                                  end));
                                                            M.read (|
                                                              M.SubPointer.get_struct_record_field (|
                                                                M.SubPointer.get_struct_record_field (|
                                                                  M.read (| self |),
                                                                  "delphinus_zkwasm::circuits::jtable::JumpTableChip",
                                                                  "config"
                                                                |),
                                                                "delphinus_zkwasm::circuits::jtable::JumpTableConfig",
                                                                "data"
                                                              |)
                                                            |);
                                                            M.read (|
                                                              M.SubPointer.get_struct_record_field (|
                                                                M.read (| ctx |),
                                                                "delphinus_zkwasm::circuits::utils::Context",
                                                                "offset"
                                                              |)
                                                            |);
                                                            M.closure
                                                              (fun γ =>
                                                                ltac:(M.monadic
                                                                  match γ with
                                                                  | [ α0 ] =>
                                                                    M.match_operator (|
                                                                      M.alloc (| α0 |),
                                                                      [
                                                                        fun γ =>
                                                                          ltac:(M.monadic
                                                                            (Value.StructTuple
                                                                              "core::result::Result::Ok"
                                                                              [
                                                                                M.call_closure (|
                                                                                  M.get_function (|
                                                                                    "delphinus_zkwasm::circuits::utils::bn_to_field",
                                                                                    [ F ]
                                                                                  |),
                                                                                  [
                                                                                    M.read (|
                                                                                      rest_jops
                                                                                    |)
                                                                                  ]
                                                                                |)
                                                                              ]))
                                                                      ]
                                                                    |)
                                                                  | _ => M.impossible (||)
                                                                  end))
                                                          ]
                                                        |)
                                                      ]
                                                    |)
                                                  |),
                                                  [
                                                    fun γ =>
                                                      ltac:(M.monadic
                                                        (let γ0_0 :=
                                                          M.SubPointer.get_struct_tuple_field (|
                                                            γ,
                                                            "core::ops::control_flow::ControlFlow::Break",
                                                            0
                                                          |) in
                                                        let residual := M.copy (| γ0_0 |) in
                                                        M.alloc (|
                                                          M.never_to_any (|
                                                            M.read (|
                                                              M.return_ (|
                                                                M.call_closure (|
                                                                  M.get_trait_method (|
                                                                    "core::ops::try_trait::FromResidual",
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "core::result::Result")
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path "array")
                                                                          [
                                                                            Ty.tuple
                                                                              [
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "halo2_proofs::circuit::AssignedCell")
                                                                                  [ F; F ];
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "halo2_proofs::circuit::AssignedCell")
                                                                                  [ F; F ]
                                                                              ]
                                                                          ];
                                                                        Ty.path
                                                                          "halo2_proofs::plonk::error::Error"
                                                                      ],
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "core::result::Result")
                                                                        [
                                                                          Ty.path
                                                                            "core::convert::Infallible";
                                                                          Ty.path
                                                                            "halo2_proofs::plonk::error::Error"
                                                                        ]
                                                                    ],
                                                                    "from_residual",
                                                                    []
                                                                  |),
                                                                  [ M.read (| residual |) ]
                                                                |)
                                                              |)
                                                            |)
                                                          |)
                                                        |)));
                                                    fun γ =>
                                                      ltac:(M.monadic
                                                        (let γ0_0 :=
                                                          M.SubPointer.get_struct_tuple_field (|
                                                            γ,
                                                            "core::ops::control_flow::ControlFlow::Continue",
                                                            0
                                                          |) in
                                                        let val := M.copy (| γ0_0 |) in
                                                        val))
                                                  ]
                                                |) in
                                              let _ :=
                                                M.alloc (|
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.apply
                                                        (Ty.path
                                                          "delphinus_zkwasm::circuits::utils::Context")
                                                        [ F ],
                                                      "next",
                                                      []
                                                    |),
                                                    [ M.read (| ctx |) ]
                                                  |)
                                                |) in
                                              let entry_cell :=
                                                M.copy (|
                                                  M.match_operator (|
                                                    M.alloc (|
                                                      M.call_closure (|
                                                        M.get_trait_method (|
                                                          "core::ops::try_trait::Try",
                                                          Ty.apply
                                                            (Ty.path "core::result::Result")
                                                            [
                                                              Ty.apply
                                                                (Ty.path
                                                                  "halo2_proofs::circuit::AssignedCell")
                                                                [ F; F ];
                                                              Ty.path
                                                                "halo2_proofs::plonk::error::Error"
                                                            ],
                                                          [],
                                                          "branch",
                                                          []
                                                        |),
                                                        [
                                                          M.call_closure (|
                                                            M.get_associated_function (|
                                                              Ty.apply
                                                                (Ty.path
                                                                  "halo2_proofs::circuit::Region")
                                                                [ F ],
                                                              "assign_advice",
                                                              [
                                                                Ty.function
                                                                  [ Ty.tuple [] ]
                                                                  (Ty.apply
                                                                    (Ty.path "core::result::Result")
                                                                    [
                                                                      F;
                                                                      Ty.path
                                                                        "halo2_proofs::plonk::error::Error"
                                                                    ]);
                                                                F;
                                                                Ty.function
                                                                  [ Ty.tuple [] ]
                                                                  (Ty.apply
                                                                    (Ty.path "&")
                                                                    [ Ty.path "str" ]);
                                                                Ty.apply
                                                                  (Ty.path "&")
                                                                  [ Ty.path "str" ]
                                                              ]
                                                            |),
                                                            [
                                                              M.read (|
                                                                M.SubPointer.get_struct_record_field (|
                                                                  M.read (| ctx |),
                                                                  "delphinus_zkwasm::circuits::utils::Context",
                                                                  "region"
                                                                |)
                                                              |);
                                                              M.closure
                                                                (fun γ =>
                                                                  ltac:(M.monadic
                                                                    match γ with
                                                                    | [ α0 ] =>
                                                                      M.match_operator (|
                                                                        M.alloc (| α0 |),
                                                                        [
                                                                          fun γ =>
                                                                            ltac:(M.monadic
                                                                              (M.read (|
                                                                                Value.String
                                                                                  "jtable entry"
                                                                              |)))
                                                                        ]
                                                                      |)
                                                                    | _ => M.impossible (||)
                                                                    end));
                                                              M.read (|
                                                                M.SubPointer.get_struct_record_field (|
                                                                  M.SubPointer.get_struct_record_field (|
                                                                    M.read (| self |),
                                                                    "delphinus_zkwasm::circuits::jtable::JumpTableChip",
                                                                    "config"
                                                                  |),
                                                                  "delphinus_zkwasm::circuits::jtable::JumpTableConfig",
                                                                  "data"
                                                                |)
                                                              |);
                                                              M.read (|
                                                                M.SubPointer.get_struct_record_field (|
                                                                  M.read (| ctx |),
                                                                  "delphinus_zkwasm::circuits::utils::Context",
                                                                  "offset"
                                                                |)
                                                              |);
                                                              M.closure
                                                                (fun γ =>
                                                                  ltac:(M.monadic
                                                                    match γ with
                                                                    | [ α0 ] =>
                                                                      M.match_operator (|
                                                                        M.alloc (| α0 |),
                                                                        [
                                                                          fun γ =>
                                                                            ltac:(M.monadic
                                                                              (Value.StructTuple
                                                                                "core::result::Result::Ok"
                                                                                [
                                                                                  M.call_closure (|
                                                                                    M.get_function (|
                                                                                      "delphinus_zkwasm::circuits::utils::bn_to_field",
                                                                                      [ F ]
                                                                                    |),
                                                                                    [
                                                                                      M.alloc (|
                                                                                        M.call_closure (|
                                                                                          M.get_associated_function (|
                                                                                            Ty.path
                                                                                              "specs::jtable::StaticFrameEntry",
                                                                                            "encode",
                                                                                            []
                                                                                          |),
                                                                                          [
                                                                                            M.read (|
                                                                                              entry
                                                                                            |)
                                                                                          ]
                                                                                        |)
                                                                                      |)
                                                                                    ]
                                                                                  |)
                                                                                ]))
                                                                        ]
                                                                      |)
                                                                    | _ => M.impossible (||)
                                                                    end))
                                                            ]
                                                          |)
                                                        ]
                                                      |)
                                                    |),
                                                    [
                                                      fun γ =>
                                                        ltac:(M.monadic
                                                          (let γ0_0 :=
                                                            M.SubPointer.get_struct_tuple_field (|
                                                              γ,
                                                              "core::ops::control_flow::ControlFlow::Break",
                                                              0
                                                            |) in
                                                          let residual := M.copy (| γ0_0 |) in
                                                          M.alloc (|
                                                            M.never_to_any (|
                                                              M.read (|
                                                                M.return_ (|
                                                                  M.call_closure (|
                                                                    M.get_trait_method (|
                                                                      "core::ops::try_trait::FromResidual",
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "core::result::Result")
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path "array")
                                                                            [
                                                                              Ty.tuple
                                                                                [
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "halo2_proofs::circuit::AssignedCell")
                                                                                    [ F; F ];
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "halo2_proofs::circuit::AssignedCell")
                                                                                    [ F; F ]
                                                                                ]
                                                                            ];
                                                                          Ty.path
                                                                            "halo2_proofs::plonk::error::Error"
                                                                        ],
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "core::result::Result")
                                                                          [
                                                                            Ty.path
                                                                              "core::convert::Infallible";
                                                                            Ty.path
                                                                              "halo2_proofs::plonk::error::Error"
                                                                          ]
                                                                      ],
                                                                      "from_residual",
                                                                      []
                                                                    |),
                                                                    [ M.read (| residual |) ]
                                                                  |)
                                                                |)
                                                              |)
                                                            |)
                                                          |)));
                                                      fun γ =>
                                                        ltac:(M.monadic
                                                          (let γ0_0 :=
                                                            M.SubPointer.get_struct_tuple_field (|
                                                              γ,
                                                              "core::ops::control_flow::ControlFlow::Continue",
                                                              0
                                                            |) in
                                                          let val := M.copy (| γ0_0 |) in
                                                          val))
                                                    ]
                                                  |)
                                                |) in
                                              let _ :=
                                                M.alloc (|
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.apply
                                                        (Ty.path
                                                          "delphinus_zkwasm::circuits::utils::Context")
                                                        [ F ],
                                                      "next",
                                                      []
                                                    |),
                                                    [ M.read (| ctx |) ]
                                                  |)
                                                |) in
                                              let _ :=
                                                M.alloc (|
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.apply
                                                        (Ty.path "alloc::vec::Vec")
                                                        [
                                                          Ty.tuple
                                                            [
                                                              Ty.apply
                                                                (Ty.path
                                                                  "halo2_proofs::circuit::AssignedCell")
                                                                [ F; F ];
                                                              Ty.apply
                                                                (Ty.path
                                                                  "halo2_proofs::circuit::AssignedCell")
                                                                [ F; F ]
                                                            ];
                                                          Ty.path "alloc::alloc::Global"
                                                        ],
                                                      "push",
                                                      []
                                                    |),
                                                    [
                                                      cells;
                                                      Value.Tuple
                                                        [
                                                          M.read (| enable_cell |);
                                                          M.read (| entry_cell |)
                                                        ]
                                                    ]
                                                  |)
                                                |) in
                                              M.match_operator (|
                                                M.alloc (| Value.Tuple [] |),
                                                [
                                                  fun γ =>
                                                    ltac:(M.monadic
                                                      (let γ :=
                                                        M.use
                                                          (M.SubPointer.get_struct_record_field (|
                                                            M.read (| entry |),
                                                            "specs::jtable::StaticFrameEntry",
                                                            "enable"
                                                          |)) in
                                                      let _ :=
                                                        M.is_constant_or_break_match (|
                                                          M.read (| γ |),
                                                          Value.Bool true
                                                        |) in
                                                      let _ :=
                                                        M.alloc (|
                                                          M.call_closure (|
                                                            M.get_trait_method (|
                                                              "core::ops::arith::SubAssign",
                                                              Ty.path
                                                                "num_bigint::biguint::BigUint",
                                                              [
                                                                Ty.path
                                                                  "num_bigint::biguint::BigUint"
                                                              ],
                                                              "sub_assign",
                                                              []
                                                            |),
                                                            [
                                                              M.read (| rest_jops |);
                                                              M.call_closure (|
                                                                M.get_function (|
                                                                  "delphinus_zkwasm::circuits::jtable::encode_jops",
                                                                  []
                                                                |),
                                                                [ Value.Integer 1; Value.Integer 0 ]
                                                              |)
                                                            ]
                                                          |)
                                                        |) in
                                                      M.alloc (| Value.Tuple [] |)));
                                                  fun γ =>
                                                    ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                                ]
                                              |)))
                                        ]
                                      |) in
                                    M.alloc (| Value.Tuple [] |)))
                                |)))
                          ]
                        |)) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.apply
                                (Ty.path "core::result::Result")
                                [
                                  Ty.apply
                                    (Ty.path "array")
                                    [
                                      Ty.tuple
                                        [
                                          Ty.apply
                                            (Ty.path "halo2_proofs::circuit::AssignedCell")
                                            [ F; F ];
                                          Ty.apply
                                            (Ty.path "halo2_proofs::circuit::AssignedCell")
                                            [ F; F ]
                                        ]
                                    ];
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    [
                                      Ty.tuple
                                        [
                                          Ty.apply
                                            (Ty.path "halo2_proofs::circuit::AssignedCell")
                                            [ F; F ];
                                          Ty.apply
                                            (Ty.path "halo2_proofs::circuit::AssignedCell")
                                            [ F; F ]
                                        ];
                                      Ty.path "alloc::alloc::Global"
                                    ]
                                ],
                              "expect",
                              []
                            |),
                            [
                              M.call_closure (|
                                M.get_trait_method (|
                                  "core::convert::TryInto",
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    [
                                      Ty.tuple
                                        [
                                          Ty.apply
                                            (Ty.path "halo2_proofs::circuit::AssignedCell")
                                            [ F; F ];
                                          Ty.apply
                                            (Ty.path "halo2_proofs::circuit::AssignedCell")
                                            [ F; F ]
                                        ];
                                      Ty.path "alloc::alloc::Global"
                                    ],
                                  [
                                    Ty.apply
                                      (Ty.path "array")
                                      [
                                        Ty.tuple
                                          [
                                            Ty.apply
                                              (Ty.path "halo2_proofs::circuit::AssignedCell")
                                              [ F; F ];
                                            Ty.apply
                                              (Ty.path "halo2_proofs::circuit::AssignedCell")
                                              [ F; F ]
                                          ]
                                      ]
                                  ],
                                  "try_into",
                                  []
                                |),
                                [ M.read (| cells |) ]
                              |);
                              M.call_closure (|
                                M.get_trait_method (|
                                  "core::ops::deref::Deref",
                                  Ty.path "alloc::string::String",
                                  [],
                                  "deref",
                                  []
                                |),
                                [
                                  let res :=
                                    M.alloc (|
                                      M.call_closure (|
                                        M.get_function (| "alloc::fmt::format", [] |),
                                        [
                                          M.call_closure (|
                                            M.get_associated_function (|
                                              Ty.path "core::fmt::Arguments",
                                              "new_v1",
                                              []
                                            |),
                                            [
                                              (* Unsize *)
                                              M.pointer_coercion
                                                (M.alloc (|
                                                  Value.Array
                                                    [
                                                      M.read (|
                                                        Value.String
                                                          "The number of static frame entries should be "
                                                      |)
                                                    ]
                                                |));
                                              (* Unsize *)
                                              M.pointer_coercion
                                                (M.alloc (|
                                                  Value.Array
                                                    [
                                                      M.call_closure (|
                                                        M.get_associated_function (|
                                                          Ty.path "core::fmt::rt::Argument",
                                                          "new_display",
                                                          [ Ty.path "usize" ]
                                                        |),
                                                        [
                                                          M.get_constant (|
                                                            "specs::jtable::STATIC_FRAME_ENTRY_NUMBER"
                                                          |)
                                                        ]
                                                      |)
                                                    ]
                                                |))
                                            ]
                                          |)
                                        ]
                                      |)
                                    |) in
                                  res
                                ]
                              |)
                            ]
                          |)
                        ]
                    |)
                  |)))
              |)))
          | _, _ => M.impossible
          end.
        
        Axiom AssociatedFunction_assign_static_entries_and_first_rest_jops :
          forall (F : Ty.t),
          M.IsAssociatedFunction
            (Self F)
            "assign_static_entries_and_first_rest_jops"
            (assign_static_entries_and_first_rest_jops F).
        
        (*
            fn assign_jtable_entries(
                &self,
                ctx: &mut Context<'_, F>,
                rest_jops: &mut BigUint,
                jtable: &JumpTable,
            ) -> Result<(), Error> {
                for entry in jtable.entries().iter() {
                    let rest_f = bn_to_field(rest_jops);
                    let entry_f = bn_to_field(&entry.encode());
        
                    ctx.region.assign_advice(
                        || "jtable enable",
                        self.config.data,
                        ctx.offset,
                        || Ok(F::one()),
                    )?;
                    ctx.next();
        
                    ctx.region.assign_advice(
                        || "jtable rest",
                        self.config.data,
                        ctx.offset,
                        || Ok(rest_f),
                    )?;
                    ctx.next();
        
                    ctx.region.assign_advice(
                        || "jtable entry",
                        self.config.data,
                        ctx.offset,
                        || Ok(entry_f),
                    )?;
                    ctx.next();
        
                    *rest_jops -= encode_jops(1, 1);
                }
        
                {
                    ctx.region.assign_advice(
                        || "jtable enable",
                        self.config.data,
                        ctx.offset,
                        || Ok(F::zero()),
                    )?;
                    ctx.next();
        
                    ctx.region.assign_advice(
                        || "jtable rest",
                        self.config.data,
                        ctx.offset,
                        || Ok(F::zero()),
                    )?;
                    ctx.next();
        
                    ctx.region.assign_advice(
                        || "jtable entry",
                        self.config.data,
                        ctx.offset,
                        || Ok(F::zero()),
                    )?;
                    ctx.next();
                }
        
                Ok(())
            }
        *)
        Definition assign_jtable_entries (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self F in
          match τ, α with
          | [], [ self; ctx; rest_jops; jtable ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              let ctx := M.alloc (| ctx |) in
              let rest_jops := M.alloc (| rest_jops |) in
              let jtable := M.alloc (| jtable |) in
              M.catch_return (|
                ltac:(M.monadic
                  (M.read (|
                    let _ :=
                      M.use
                        (M.match_operator (|
                          M.alloc (|
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::iter::traits::collect::IntoIterator",
                                Ty.apply
                                  (Ty.path "core::slice::iter::Iter")
                                  [ Ty.path "specs::jtable::JumpTableEntry" ],
                                [],
                                "into_iter",
                                []
                              |),
                              [
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.apply
                                      (Ty.path "slice")
                                      [ Ty.path "specs::jtable::JumpTableEntry" ],
                                    "iter",
                                    []
                                  |),
                                  [
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::ops::deref::Deref",
                                        Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          [
                                            Ty.path "specs::jtable::JumpTableEntry";
                                            Ty.path "alloc::alloc::Global"
                                          ],
                                        [],
                                        "deref",
                                        []
                                      |),
                                      [
                                        M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.path "specs::jtable::JumpTable",
                                            "entries",
                                            []
                                          |),
                                          [ M.read (| jtable |) ]
                                        |)
                                      ]
                                    |)
                                  ]
                                |)
                              ]
                            |)
                          |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let iter := M.copy (| γ |) in
                                M.loop (|
                                  ltac:(M.monadic
                                    (let _ :=
                                      M.match_operator (|
                                        M.alloc (|
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "core::iter::traits::iterator::Iterator",
                                              Ty.apply
                                                (Ty.path "core::slice::iter::Iter")
                                                [ Ty.path "specs::jtable::JumpTableEntry" ],
                                              [],
                                              "next",
                                              []
                                            |),
                                            [ iter ]
                                          |)
                                        |),
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (M.alloc (|
                                                M.never_to_any (| M.read (| M.break (||) |) |)
                                              |)));
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let γ0_0 :=
                                                M.SubPointer.get_struct_tuple_field (|
                                                  γ,
                                                  "core::option::Option::Some",
                                                  0
                                                |) in
                                              let entry := M.copy (| γ0_0 |) in
                                              let rest_f :=
                                                M.alloc (|
                                                  M.call_closure (|
                                                    M.get_function (|
                                                      "delphinus_zkwasm::circuits::utils::bn_to_field",
                                                      [ F ]
                                                    |),
                                                    [ M.read (| rest_jops |) ]
                                                  |)
                                                |) in
                                              let entry_f :=
                                                M.alloc (|
                                                  M.call_closure (|
                                                    M.get_function (|
                                                      "delphinus_zkwasm::circuits::utils::bn_to_field",
                                                      [ F ]
                                                    |),
                                                    [
                                                      M.alloc (|
                                                        M.call_closure (|
                                                          M.get_associated_function (|
                                                            Ty.path "specs::jtable::JumpTableEntry",
                                                            "encode",
                                                            []
                                                          |),
                                                          [ M.read (| entry |) ]
                                                        |)
                                                      |)
                                                    ]
                                                  |)
                                                |) in
                                              let _ :=
                                                M.match_operator (|
                                                  M.alloc (|
                                                    M.call_closure (|
                                                      M.get_trait_method (|
                                                        "core::ops::try_trait::Try",
                                                        Ty.apply
                                                          (Ty.path "core::result::Result")
                                                          [
                                                            Ty.apply
                                                              (Ty.path
                                                                "halo2_proofs::circuit::AssignedCell")
                                                              [ F; F ];
                                                            Ty.path
                                                              "halo2_proofs::plonk::error::Error"
                                                          ],
                                                        [],
                                                        "branch",
                                                        []
                                                      |),
                                                      [
                                                        M.call_closure (|
                                                          M.get_associated_function (|
                                                            Ty.apply
                                                              (Ty.path
                                                                "halo2_proofs::circuit::Region")
                                                              [ F ],
                                                            "assign_advice",
                                                            [
                                                              Ty.function
                                                                [ Ty.tuple [] ]
                                                                (Ty.apply
                                                                  (Ty.path "core::result::Result")
                                                                  [
                                                                    F;
                                                                    Ty.path
                                                                      "halo2_proofs::plonk::error::Error"
                                                                  ]);
                                                              F;
                                                              Ty.function
                                                                [ Ty.tuple [] ]
                                                                (Ty.apply
                                                                  (Ty.path "&")
                                                                  [ Ty.path "str" ]);
                                                              Ty.apply
                                                                (Ty.path "&")
                                                                [ Ty.path "str" ]
                                                            ]
                                                          |),
                                                          [
                                                            M.read (|
                                                              M.SubPointer.get_struct_record_field (|
                                                                M.read (| ctx |),
                                                                "delphinus_zkwasm::circuits::utils::Context",
                                                                "region"
                                                              |)
                                                            |);
                                                            M.closure
                                                              (fun γ =>
                                                                ltac:(M.monadic
                                                                  match γ with
                                                                  | [ α0 ] =>
                                                                    M.match_operator (|
                                                                      M.alloc (| α0 |),
                                                                      [
                                                                        fun γ =>
                                                                          ltac:(M.monadic
                                                                            (M.read (|
                                                                              Value.String
                                                                                "jtable enable"
                                                                            |)))
                                                                      ]
                                                                    |)
                                                                  | _ => M.impossible (||)
                                                                  end));
                                                            M.read (|
                                                              M.SubPointer.get_struct_record_field (|
                                                                M.SubPointer.get_struct_record_field (|
                                                                  M.read (| self |),
                                                                  "delphinus_zkwasm::circuits::jtable::JumpTableChip",
                                                                  "config"
                                                                |),
                                                                "delphinus_zkwasm::circuits::jtable::JumpTableConfig",
                                                                "data"
                                                              |)
                                                            |);
                                                            M.read (|
                                                              M.SubPointer.get_struct_record_field (|
                                                                M.read (| ctx |),
                                                                "delphinus_zkwasm::circuits::utils::Context",
                                                                "offset"
                                                              |)
                                                            |);
                                                            M.closure
                                                              (fun γ =>
                                                                ltac:(M.monadic
                                                                  match γ with
                                                                  | [ α0 ] =>
                                                                    M.match_operator (|
                                                                      M.alloc (| α0 |),
                                                                      [
                                                                        fun γ =>
                                                                          ltac:(M.monadic
                                                                            (Value.StructTuple
                                                                              "core::result::Result::Ok"
                                                                              [
                                                                                M.call_closure (|
                                                                                  M.get_trait_method (|
                                                                                    "ff::Field",
                                                                                    F,
                                                                                    [],
                                                                                    "one",
                                                                                    []
                                                                                  |),
                                                                                  []
                                                                                |)
                                                                              ]))
                                                                      ]
                                                                    |)
                                                                  | _ => M.impossible (||)
                                                                  end))
                                                          ]
                                                        |)
                                                      ]
                                                    |)
                                                  |),
                                                  [
                                                    fun γ =>
                                                      ltac:(M.monadic
                                                        (let γ0_0 :=
                                                          M.SubPointer.get_struct_tuple_field (|
                                                            γ,
                                                            "core::ops::control_flow::ControlFlow::Break",
                                                            0
                                                          |) in
                                                        let residual := M.copy (| γ0_0 |) in
                                                        M.alloc (|
                                                          M.never_to_any (|
                                                            M.read (|
                                                              M.return_ (|
                                                                M.call_closure (|
                                                                  M.get_trait_method (|
                                                                    "core::ops::try_trait::FromResidual",
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "core::result::Result")
                                                                      [
                                                                        Ty.tuple [];
                                                                        Ty.path
                                                                          "halo2_proofs::plonk::error::Error"
                                                                      ],
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "core::result::Result")
                                                                        [
                                                                          Ty.path
                                                                            "core::convert::Infallible";
                                                                          Ty.path
                                                                            "halo2_proofs::plonk::error::Error"
                                                                        ]
                                                                    ],
                                                                    "from_residual",
                                                                    []
                                                                  |),
                                                                  [ M.read (| residual |) ]
                                                                |)
                                                              |)
                                                            |)
                                                          |)
                                                        |)));
                                                    fun γ =>
                                                      ltac:(M.monadic
                                                        (let γ0_0 :=
                                                          M.SubPointer.get_struct_tuple_field (|
                                                            γ,
                                                            "core::ops::control_flow::ControlFlow::Continue",
                                                            0
                                                          |) in
                                                        let val := M.copy (| γ0_0 |) in
                                                        val))
                                                  ]
                                                |) in
                                              let _ :=
                                                M.alloc (|
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.apply
                                                        (Ty.path
                                                          "delphinus_zkwasm::circuits::utils::Context")
                                                        [ F ],
                                                      "next",
                                                      []
                                                    |),
                                                    [ M.read (| ctx |) ]
                                                  |)
                                                |) in
                                              let _ :=
                                                M.match_operator (|
                                                  M.alloc (|
                                                    M.call_closure (|
                                                      M.get_trait_method (|
                                                        "core::ops::try_trait::Try",
                                                        Ty.apply
                                                          (Ty.path "core::result::Result")
                                                          [
                                                            Ty.apply
                                                              (Ty.path
                                                                "halo2_proofs::circuit::AssignedCell")
                                                              [ F; F ];
                                                            Ty.path
                                                              "halo2_proofs::plonk::error::Error"
                                                          ],
                                                        [],
                                                        "branch",
                                                        []
                                                      |),
                                                      [
                                                        M.call_closure (|
                                                          M.get_associated_function (|
                                                            Ty.apply
                                                              (Ty.path
                                                                "halo2_proofs::circuit::Region")
                                                              [ F ],
                                                            "assign_advice",
                                                            [
                                                              Ty.function
                                                                [ Ty.tuple [] ]
                                                                (Ty.apply
                                                                  (Ty.path "core::result::Result")
                                                                  [
                                                                    F;
                                                                    Ty.path
                                                                      "halo2_proofs::plonk::error::Error"
                                                                  ]);
                                                              F;
                                                              Ty.function
                                                                [ Ty.tuple [] ]
                                                                (Ty.apply
                                                                  (Ty.path "&")
                                                                  [ Ty.path "str" ]);
                                                              Ty.apply
                                                                (Ty.path "&")
                                                                [ Ty.path "str" ]
                                                            ]
                                                          |),
                                                          [
                                                            M.read (|
                                                              M.SubPointer.get_struct_record_field (|
                                                                M.read (| ctx |),
                                                                "delphinus_zkwasm::circuits::utils::Context",
                                                                "region"
                                                              |)
                                                            |);
                                                            M.closure
                                                              (fun γ =>
                                                                ltac:(M.monadic
                                                                  match γ with
                                                                  | [ α0 ] =>
                                                                    M.match_operator (|
                                                                      M.alloc (| α0 |),
                                                                      [
                                                                        fun γ =>
                                                                          ltac:(M.monadic
                                                                            (M.read (|
                                                                              Value.String
                                                                                "jtable rest"
                                                                            |)))
                                                                      ]
                                                                    |)
                                                                  | _ => M.impossible (||)
                                                                  end));
                                                            M.read (|
                                                              M.SubPointer.get_struct_record_field (|
                                                                M.SubPointer.get_struct_record_field (|
                                                                  M.read (| self |),
                                                                  "delphinus_zkwasm::circuits::jtable::JumpTableChip",
                                                                  "config"
                                                                |),
                                                                "delphinus_zkwasm::circuits::jtable::JumpTableConfig",
                                                                "data"
                                                              |)
                                                            |);
                                                            M.read (|
                                                              M.SubPointer.get_struct_record_field (|
                                                                M.read (| ctx |),
                                                                "delphinus_zkwasm::circuits::utils::Context",
                                                                "offset"
                                                              |)
                                                            |);
                                                            M.closure
                                                              (fun γ =>
                                                                ltac:(M.monadic
                                                                  match γ with
                                                                  | [ α0 ] =>
                                                                    M.match_operator (|
                                                                      M.alloc (| α0 |),
                                                                      [
                                                                        fun γ =>
                                                                          ltac:(M.monadic
                                                                            (Value.StructTuple
                                                                              "core::result::Result::Ok"
                                                                              [ M.read (| rest_f |)
                                                                              ]))
                                                                      ]
                                                                    |)
                                                                  | _ => M.impossible (||)
                                                                  end))
                                                          ]
                                                        |)
                                                      ]
                                                    |)
                                                  |),
                                                  [
                                                    fun γ =>
                                                      ltac:(M.monadic
                                                        (let γ0_0 :=
                                                          M.SubPointer.get_struct_tuple_field (|
                                                            γ,
                                                            "core::ops::control_flow::ControlFlow::Break",
                                                            0
                                                          |) in
                                                        let residual := M.copy (| γ0_0 |) in
                                                        M.alloc (|
                                                          M.never_to_any (|
                                                            M.read (|
                                                              M.return_ (|
                                                                M.call_closure (|
                                                                  M.get_trait_method (|
                                                                    "core::ops::try_trait::FromResidual",
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "core::result::Result")
                                                                      [
                                                                        Ty.tuple [];
                                                                        Ty.path
                                                                          "halo2_proofs::plonk::error::Error"
                                                                      ],
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "core::result::Result")
                                                                        [
                                                                          Ty.path
                                                                            "core::convert::Infallible";
                                                                          Ty.path
                                                                            "halo2_proofs::plonk::error::Error"
                                                                        ]
                                                                    ],
                                                                    "from_residual",
                                                                    []
                                                                  |),
                                                                  [ M.read (| residual |) ]
                                                                |)
                                                              |)
                                                            |)
                                                          |)
                                                        |)));
                                                    fun γ =>
                                                      ltac:(M.monadic
                                                        (let γ0_0 :=
                                                          M.SubPointer.get_struct_tuple_field (|
                                                            γ,
                                                            "core::ops::control_flow::ControlFlow::Continue",
                                                            0
                                                          |) in
                                                        let val := M.copy (| γ0_0 |) in
                                                        val))
                                                  ]
                                                |) in
                                              let _ :=
                                                M.alloc (|
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.apply
                                                        (Ty.path
                                                          "delphinus_zkwasm::circuits::utils::Context")
                                                        [ F ],
                                                      "next",
                                                      []
                                                    |),
                                                    [ M.read (| ctx |) ]
                                                  |)
                                                |) in
                                              let _ :=
                                                M.match_operator (|
                                                  M.alloc (|
                                                    M.call_closure (|
                                                      M.get_trait_method (|
                                                        "core::ops::try_trait::Try",
                                                        Ty.apply
                                                          (Ty.path "core::result::Result")
                                                          [
                                                            Ty.apply
                                                              (Ty.path
                                                                "halo2_proofs::circuit::AssignedCell")
                                                              [ F; F ];
                                                            Ty.path
                                                              "halo2_proofs::plonk::error::Error"
                                                          ],
                                                        [],
                                                        "branch",
                                                        []
                                                      |),
                                                      [
                                                        M.call_closure (|
                                                          M.get_associated_function (|
                                                            Ty.apply
                                                              (Ty.path
                                                                "halo2_proofs::circuit::Region")
                                                              [ F ],
                                                            "assign_advice",
                                                            [
                                                              Ty.function
                                                                [ Ty.tuple [] ]
                                                                (Ty.apply
                                                                  (Ty.path "core::result::Result")
                                                                  [
                                                                    F;
                                                                    Ty.path
                                                                      "halo2_proofs::plonk::error::Error"
                                                                  ]);
                                                              F;
                                                              Ty.function
                                                                [ Ty.tuple [] ]
                                                                (Ty.apply
                                                                  (Ty.path "&")
                                                                  [ Ty.path "str" ]);
                                                              Ty.apply
                                                                (Ty.path "&")
                                                                [ Ty.path "str" ]
                                                            ]
                                                          |),
                                                          [
                                                            M.read (|
                                                              M.SubPointer.get_struct_record_field (|
                                                                M.read (| ctx |),
                                                                "delphinus_zkwasm::circuits::utils::Context",
                                                                "region"
                                                              |)
                                                            |);
                                                            M.closure
                                                              (fun γ =>
                                                                ltac:(M.monadic
                                                                  match γ with
                                                                  | [ α0 ] =>
                                                                    M.match_operator (|
                                                                      M.alloc (| α0 |),
                                                                      [
                                                                        fun γ =>
                                                                          ltac:(M.monadic
                                                                            (M.read (|
                                                                              Value.String
                                                                                "jtable entry"
                                                                            |)))
                                                                      ]
                                                                    |)
                                                                  | _ => M.impossible (||)
                                                                  end));
                                                            M.read (|
                                                              M.SubPointer.get_struct_record_field (|
                                                                M.SubPointer.get_struct_record_field (|
                                                                  M.read (| self |),
                                                                  "delphinus_zkwasm::circuits::jtable::JumpTableChip",
                                                                  "config"
                                                                |),
                                                                "delphinus_zkwasm::circuits::jtable::JumpTableConfig",
                                                                "data"
                                                              |)
                                                            |);
                                                            M.read (|
                                                              M.SubPointer.get_struct_record_field (|
                                                                M.read (| ctx |),
                                                                "delphinus_zkwasm::circuits::utils::Context",
                                                                "offset"
                                                              |)
                                                            |);
                                                            M.closure
                                                              (fun γ =>
                                                                ltac:(M.monadic
                                                                  match γ with
                                                                  | [ α0 ] =>
                                                                    M.match_operator (|
                                                                      M.alloc (| α0 |),
                                                                      [
                                                                        fun γ =>
                                                                          ltac:(M.monadic
                                                                            (Value.StructTuple
                                                                              "core::result::Result::Ok"
                                                                              [ M.read (| entry_f |)
                                                                              ]))
                                                                      ]
                                                                    |)
                                                                  | _ => M.impossible (||)
                                                                  end))
                                                          ]
                                                        |)
                                                      ]
                                                    |)
                                                  |),
                                                  [
                                                    fun γ =>
                                                      ltac:(M.monadic
                                                        (let γ0_0 :=
                                                          M.SubPointer.get_struct_tuple_field (|
                                                            γ,
                                                            "core::ops::control_flow::ControlFlow::Break",
                                                            0
                                                          |) in
                                                        let residual := M.copy (| γ0_0 |) in
                                                        M.alloc (|
                                                          M.never_to_any (|
                                                            M.read (|
                                                              M.return_ (|
                                                                M.call_closure (|
                                                                  M.get_trait_method (|
                                                                    "core::ops::try_trait::FromResidual",
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "core::result::Result")
                                                                      [
                                                                        Ty.tuple [];
                                                                        Ty.path
                                                                          "halo2_proofs::plonk::error::Error"
                                                                      ],
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "core::result::Result")
                                                                        [
                                                                          Ty.path
                                                                            "core::convert::Infallible";
                                                                          Ty.path
                                                                            "halo2_proofs::plonk::error::Error"
                                                                        ]
                                                                    ],
                                                                    "from_residual",
                                                                    []
                                                                  |),
                                                                  [ M.read (| residual |) ]
                                                                |)
                                                              |)
                                                            |)
                                                          |)
                                                        |)));
                                                    fun γ =>
                                                      ltac:(M.monadic
                                                        (let γ0_0 :=
                                                          M.SubPointer.get_struct_tuple_field (|
                                                            γ,
                                                            "core::ops::control_flow::ControlFlow::Continue",
                                                            0
                                                          |) in
                                                        let val := M.copy (| γ0_0 |) in
                                                        val))
                                                  ]
                                                |) in
                                              let _ :=
                                                M.alloc (|
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.apply
                                                        (Ty.path
                                                          "delphinus_zkwasm::circuits::utils::Context")
                                                        [ F ],
                                                      "next",
                                                      []
                                                    |),
                                                    [ M.read (| ctx |) ]
                                                  |)
                                                |) in
                                              let _ :=
                                                M.alloc (|
                                                  M.call_closure (|
                                                    M.get_trait_method (|
                                                      "core::ops::arith::SubAssign",
                                                      Ty.path "num_bigint::biguint::BigUint",
                                                      [ Ty.path "num_bigint::biguint::BigUint" ],
                                                      "sub_assign",
                                                      []
                                                    |),
                                                    [
                                                      M.read (| rest_jops |);
                                                      M.call_closure (|
                                                        M.get_function (|
                                                          "delphinus_zkwasm::circuits::jtable::encode_jops",
                                                          []
                                                        |),
                                                        [ Value.Integer 1; Value.Integer 1 ]
                                                      |)
                                                    ]
                                                  |)
                                                |) in
                                              M.alloc (| Value.Tuple [] |)))
                                        ]
                                      |) in
                                    M.alloc (| Value.Tuple [] |)))
                                |)))
                          ]
                        |)) in
                    let _ :=
                      let _ :=
                        M.match_operator (|
                          M.alloc (|
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::ops::try_trait::Try",
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  [
                                    Ty.apply
                                      (Ty.path "halo2_proofs::circuit::AssignedCell")
                                      [ F; F ];
                                    Ty.path "halo2_proofs::plonk::error::Error"
                                  ],
                                [],
                                "branch",
                                []
                              |),
                              [
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.apply (Ty.path "halo2_proofs::circuit::Region") [ F ],
                                    "assign_advice",
                                    [
                                      Ty.function
                                        [ Ty.tuple [] ]
                                        (Ty.apply
                                          (Ty.path "core::result::Result")
                                          [ F; Ty.path "halo2_proofs::plonk::error::Error" ]);
                                      F;
                                      Ty.function
                                        [ Ty.tuple [] ]
                                        (Ty.apply (Ty.path "&") [ Ty.path "str" ]);
                                      Ty.apply (Ty.path "&") [ Ty.path "str" ]
                                    ]
                                  |),
                                  [
                                    M.read (|
                                      M.SubPointer.get_struct_record_field (|
                                        M.read (| ctx |),
                                        "delphinus_zkwasm::circuits::utils::Context",
                                        "region"
                                      |)
                                    |);
                                    M.closure
                                      (fun γ =>
                                        ltac:(M.monadic
                                          match γ with
                                          | [ α0 ] =>
                                            M.match_operator (|
                                              M.alloc (| α0 |),
                                              [
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (M.read (| Value.String "jtable enable" |)))
                                              ]
                                            |)
                                          | _ => M.impossible (||)
                                          end));
                                    M.read (|
                                      M.SubPointer.get_struct_record_field (|
                                        M.SubPointer.get_struct_record_field (|
                                          M.read (| self |),
                                          "delphinus_zkwasm::circuits::jtable::JumpTableChip",
                                          "config"
                                        |),
                                        "delphinus_zkwasm::circuits::jtable::JumpTableConfig",
                                        "data"
                                      |)
                                    |);
                                    M.read (|
                                      M.SubPointer.get_struct_record_field (|
                                        M.read (| ctx |),
                                        "delphinus_zkwasm::circuits::utils::Context",
                                        "offset"
                                      |)
                                    |);
                                    M.closure
                                      (fun γ =>
                                        ltac:(M.monadic
                                          match γ with
                                          | [ α0 ] =>
                                            M.match_operator (|
                                              M.alloc (| α0 |),
                                              [
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (Value.StructTuple
                                                      "core::result::Result::Ok"
                                                      [
                                                        M.call_closure (|
                                                          M.get_trait_method (|
                                                            "ff::Field",
                                                            F,
                                                            [],
                                                            "zero",
                                                            []
                                                          |),
                                                          []
                                                        |)
                                                      ]))
                                              ]
                                            |)
                                          | _ => M.impossible (||)
                                          end))
                                  ]
                                |)
                              ]
                            |)
                          |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ0_0 :=
                                  M.SubPointer.get_struct_tuple_field (|
                                    γ,
                                    "core::ops::control_flow::ControlFlow::Break",
                                    0
                                  |) in
                                let residual := M.copy (| γ0_0 |) in
                                M.alloc (|
                                  M.never_to_any (|
                                    M.read (|
                                      M.return_ (|
                                        M.call_closure (|
                                          M.get_trait_method (|
                                            "core::ops::try_trait::FromResidual",
                                            Ty.apply
                                              (Ty.path "core::result::Result")
                                              [
                                                Ty.tuple [];
                                                Ty.path "halo2_proofs::plonk::error::Error"
                                              ],
                                            [
                                              Ty.apply
                                                (Ty.path "core::result::Result")
                                                [
                                                  Ty.path "core::convert::Infallible";
                                                  Ty.path "halo2_proofs::plonk::error::Error"
                                                ]
                                            ],
                                            "from_residual",
                                            []
                                          |),
                                          [ M.read (| residual |) ]
                                        |)
                                      |)
                                    |)
                                  |)
                                |)));
                            fun γ =>
                              ltac:(M.monadic
                                (let γ0_0 :=
                                  M.SubPointer.get_struct_tuple_field (|
                                    γ,
                                    "core::ops::control_flow::ControlFlow::Continue",
                                    0
                                  |) in
                                let val := M.copy (| γ0_0 |) in
                                val))
                          ]
                        |) in
                      let _ :=
                        M.alloc (|
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.apply (Ty.path "delphinus_zkwasm::circuits::utils::Context") [ F ],
                              "next",
                              []
                            |),
                            [ M.read (| ctx |) ]
                          |)
                        |) in
                      let _ :=
                        M.match_operator (|
                          M.alloc (|
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::ops::try_trait::Try",
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  [
                                    Ty.apply
                                      (Ty.path "halo2_proofs::circuit::AssignedCell")
                                      [ F; F ];
                                    Ty.path "halo2_proofs::plonk::error::Error"
                                  ],
                                [],
                                "branch",
                                []
                              |),
                              [
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.apply (Ty.path "halo2_proofs::circuit::Region") [ F ],
                                    "assign_advice",
                                    [
                                      Ty.function
                                        [ Ty.tuple [] ]
                                        (Ty.apply
                                          (Ty.path "core::result::Result")
                                          [ F; Ty.path "halo2_proofs::plonk::error::Error" ]);
                                      F;
                                      Ty.function
                                        [ Ty.tuple [] ]
                                        (Ty.apply (Ty.path "&") [ Ty.path "str" ]);
                                      Ty.apply (Ty.path "&") [ Ty.path "str" ]
                                    ]
                                  |),
                                  [
                                    M.read (|
                                      M.SubPointer.get_struct_record_field (|
                                        M.read (| ctx |),
                                        "delphinus_zkwasm::circuits::utils::Context",
                                        "region"
                                      |)
                                    |);
                                    M.closure
                                      (fun γ =>
                                        ltac:(M.monadic
                                          match γ with
                                          | [ α0 ] =>
                                            M.match_operator (|
                                              M.alloc (| α0 |),
                                              [
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (M.read (| Value.String "jtable rest" |)))
                                              ]
                                            |)
                                          | _ => M.impossible (||)
                                          end));
                                    M.read (|
                                      M.SubPointer.get_struct_record_field (|
                                        M.SubPointer.get_struct_record_field (|
                                          M.read (| self |),
                                          "delphinus_zkwasm::circuits::jtable::JumpTableChip",
                                          "config"
                                        |),
                                        "delphinus_zkwasm::circuits::jtable::JumpTableConfig",
                                        "data"
                                      |)
                                    |);
                                    M.read (|
                                      M.SubPointer.get_struct_record_field (|
                                        M.read (| ctx |),
                                        "delphinus_zkwasm::circuits::utils::Context",
                                        "offset"
                                      |)
                                    |);
                                    M.closure
                                      (fun γ =>
                                        ltac:(M.monadic
                                          match γ with
                                          | [ α0 ] =>
                                            M.match_operator (|
                                              M.alloc (| α0 |),
                                              [
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (Value.StructTuple
                                                      "core::result::Result::Ok"
                                                      [
                                                        M.call_closure (|
                                                          M.get_trait_method (|
                                                            "ff::Field",
                                                            F,
                                                            [],
                                                            "zero",
                                                            []
                                                          |),
                                                          []
                                                        |)
                                                      ]))
                                              ]
                                            |)
                                          | _ => M.impossible (||)
                                          end))
                                  ]
                                |)
                              ]
                            |)
                          |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ0_0 :=
                                  M.SubPointer.get_struct_tuple_field (|
                                    γ,
                                    "core::ops::control_flow::ControlFlow::Break",
                                    0
                                  |) in
                                let residual := M.copy (| γ0_0 |) in
                                M.alloc (|
                                  M.never_to_any (|
                                    M.read (|
                                      M.return_ (|
                                        M.call_closure (|
                                          M.get_trait_method (|
                                            "core::ops::try_trait::FromResidual",
                                            Ty.apply
                                              (Ty.path "core::result::Result")
                                              [
                                                Ty.tuple [];
                                                Ty.path "halo2_proofs::plonk::error::Error"
                                              ],
                                            [
                                              Ty.apply
                                                (Ty.path "core::result::Result")
                                                [
                                                  Ty.path "core::convert::Infallible";
                                                  Ty.path "halo2_proofs::plonk::error::Error"
                                                ]
                                            ],
                                            "from_residual",
                                            []
                                          |),
                                          [ M.read (| residual |) ]
                                        |)
                                      |)
                                    |)
                                  |)
                                |)));
                            fun γ =>
                              ltac:(M.monadic
                                (let γ0_0 :=
                                  M.SubPointer.get_struct_tuple_field (|
                                    γ,
                                    "core::ops::control_flow::ControlFlow::Continue",
                                    0
                                  |) in
                                let val := M.copy (| γ0_0 |) in
                                val))
                          ]
                        |) in
                      let _ :=
                        M.alloc (|
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.apply (Ty.path "delphinus_zkwasm::circuits::utils::Context") [ F ],
                              "next",
                              []
                            |),
                            [ M.read (| ctx |) ]
                          |)
                        |) in
                      let _ :=
                        M.match_operator (|
                          M.alloc (|
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::ops::try_trait::Try",
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  [
                                    Ty.apply
                                      (Ty.path "halo2_proofs::circuit::AssignedCell")
                                      [ F; F ];
                                    Ty.path "halo2_proofs::plonk::error::Error"
                                  ],
                                [],
                                "branch",
                                []
                              |),
                              [
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.apply (Ty.path "halo2_proofs::circuit::Region") [ F ],
                                    "assign_advice",
                                    [
                                      Ty.function
                                        [ Ty.tuple [] ]
                                        (Ty.apply
                                          (Ty.path "core::result::Result")
                                          [ F; Ty.path "halo2_proofs::plonk::error::Error" ]);
                                      F;
                                      Ty.function
                                        [ Ty.tuple [] ]
                                        (Ty.apply (Ty.path "&") [ Ty.path "str" ]);
                                      Ty.apply (Ty.path "&") [ Ty.path "str" ]
                                    ]
                                  |),
                                  [
                                    M.read (|
                                      M.SubPointer.get_struct_record_field (|
                                        M.read (| ctx |),
                                        "delphinus_zkwasm::circuits::utils::Context",
                                        "region"
                                      |)
                                    |);
                                    M.closure
                                      (fun γ =>
                                        ltac:(M.monadic
                                          match γ with
                                          | [ α0 ] =>
                                            M.match_operator (|
                                              M.alloc (| α0 |),
                                              [
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (M.read (| Value.String "jtable entry" |)))
                                              ]
                                            |)
                                          | _ => M.impossible (||)
                                          end));
                                    M.read (|
                                      M.SubPointer.get_struct_record_field (|
                                        M.SubPointer.get_struct_record_field (|
                                          M.read (| self |),
                                          "delphinus_zkwasm::circuits::jtable::JumpTableChip",
                                          "config"
                                        |),
                                        "delphinus_zkwasm::circuits::jtable::JumpTableConfig",
                                        "data"
                                      |)
                                    |);
                                    M.read (|
                                      M.SubPointer.get_struct_record_field (|
                                        M.read (| ctx |),
                                        "delphinus_zkwasm::circuits::utils::Context",
                                        "offset"
                                      |)
                                    |);
                                    M.closure
                                      (fun γ =>
                                        ltac:(M.monadic
                                          match γ with
                                          | [ α0 ] =>
                                            M.match_operator (|
                                              M.alloc (| α0 |),
                                              [
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (Value.StructTuple
                                                      "core::result::Result::Ok"
                                                      [
                                                        M.call_closure (|
                                                          M.get_trait_method (|
                                                            "ff::Field",
                                                            F,
                                                            [],
                                                            "zero",
                                                            []
                                                          |),
                                                          []
                                                        |)
                                                      ]))
                                              ]
                                            |)
                                          | _ => M.impossible (||)
                                          end))
                                  ]
                                |)
                              ]
                            |)
                          |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ0_0 :=
                                  M.SubPointer.get_struct_tuple_field (|
                                    γ,
                                    "core::ops::control_flow::ControlFlow::Break",
                                    0
                                  |) in
                                let residual := M.copy (| γ0_0 |) in
                                M.alloc (|
                                  M.never_to_any (|
                                    M.read (|
                                      M.return_ (|
                                        M.call_closure (|
                                          M.get_trait_method (|
                                            "core::ops::try_trait::FromResidual",
                                            Ty.apply
                                              (Ty.path "core::result::Result")
                                              [
                                                Ty.tuple [];
                                                Ty.path "halo2_proofs::plonk::error::Error"
                                              ],
                                            [
                                              Ty.apply
                                                (Ty.path "core::result::Result")
                                                [
                                                  Ty.path "core::convert::Infallible";
                                                  Ty.path "halo2_proofs::plonk::error::Error"
                                                ]
                                            ],
                                            "from_residual",
                                            []
                                          |),
                                          [ M.read (| residual |) ]
                                        |)
                                      |)
                                    |)
                                  |)
                                |)));
                            fun γ =>
                              ltac:(M.monadic
                                (let γ0_0 :=
                                  M.SubPointer.get_struct_tuple_field (|
                                    γ,
                                    "core::ops::control_flow::ControlFlow::Continue",
                                    0
                                  |) in
                                let val := M.copy (| γ0_0 |) in
                                val))
                          ]
                        |) in
                      let _ :=
                        M.alloc (|
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.apply (Ty.path "delphinus_zkwasm::circuits::utils::Context") [ F ],
                              "next",
                              []
                            |),
                            [ M.read (| ctx |) ]
                          |)
                        |) in
                      M.alloc (| Value.Tuple [] |) in
                    M.alloc (| Value.StructTuple "core::result::Result::Ok" [ Value.Tuple [] ] |)
                  |)))
              |)))
          | _, _ => M.impossible
          end.
        
        Axiom AssociatedFunction_assign_jtable_entries :
          forall (F : Ty.t),
          M.IsAssociatedFunction (Self F) "assign_jtable_entries" (assign_jtable_entries F).
        
        (*
            pub fn assign(
                &self,
                layouter: impl Layouter<F>,
                static_entries: &[StaticFrameEntry; STATIC_FRAME_ENTRY_NUMBER],
                jtable: &JumpTable,
            ) -> Result<
                (
                    AssignedCell<F, F>,
                    [(AssignedCell<F, F>, AssignedCell<F, F>); STATIC_FRAME_ENTRY_NUMBER],
                ),
                Error,
            > {
                layouter.assign_region(
                    || "frame table",
                    |region| {
                        let mut ctx = Context::new(region);
        
                        self.init(&mut ctx)?;
                        ctx.reset();
        
                        // non-static entry includes `call`` and `return`` op, static entry only includes `return` op
                        let mut rest_jops = encode_jops(
                            jtable.entries().len() as u32
                                + static_entries.iter().filter(|entry| entry.enable).count() as u32,
                            jtable.entries().len() as u32,
                        );
        
                        let rest_jopss = self.assign_first_rest_jops(&mut ctx, rest_jops.clone())?;
                        let cells_to_permutation = self.assign_static_entries_and_first_rest_jops(
                            &mut ctx,
                            &mut rest_jops,
                            static_entries,
                        )?;
                        self.assign_jtable_entries(&mut ctx, &mut rest_jops, jtable)?;
        
                        Ok((rest_jopss, cells_to_permutation))
                    },
                )
            }
        *)
        Definition assign (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self F in
          match τ, α with
          | [ impl_Layouter_F_ ], [ self; layouter; static_entries; jtable ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              let layouter := M.alloc (| layouter |) in
              let static_entries := M.alloc (| static_entries |) in
              let jtable := M.alloc (| jtable |) in
              M.call_closure (|
                M.get_trait_method (|
                  "halo2_proofs::circuit::Layouter",
                  impl_Layouter_F_,
                  [ F ],
                  "assign_region",
                  [
                    Ty.function
                      [
                        Ty.tuple
                          [
                            Ty.apply
                              (Ty.path "&")
                              [ Ty.apply (Ty.path "halo2_proofs::circuit::Region") [ F ] ]
                          ]
                      ]
                      (Ty.apply
                        (Ty.path "core::result::Result")
                        [
                          Ty.tuple
                            [
                              Ty.apply (Ty.path "halo2_proofs::circuit::AssignedCell") [ F; F ];
                              Ty.apply
                                (Ty.path "array")
                                [
                                  Ty.tuple
                                    [
                                      Ty.apply
                                        (Ty.path "halo2_proofs::circuit::AssignedCell")
                                        [ F; F ];
                                      Ty.apply
                                        (Ty.path "halo2_proofs::circuit::AssignedCell")
                                        [ F; F ]
                                    ]
                                ]
                            ];
                          Ty.path "halo2_proofs::plonk::error::Error"
                        ]);
                    Ty.tuple
                      [
                        Ty.apply (Ty.path "halo2_proofs::circuit::AssignedCell") [ F; F ];
                        Ty.apply
                          (Ty.path "array")
                          [
                            Ty.tuple
                              [
                                Ty.apply (Ty.path "halo2_proofs::circuit::AssignedCell") [ F; F ];
                                Ty.apply (Ty.path "halo2_proofs::circuit::AssignedCell") [ F; F ]
                              ]
                          ]
                      ];
                    Ty.function [ Ty.tuple [] ] (Ty.apply (Ty.path "&") [ Ty.path "str" ]);
                    Ty.apply (Ty.path "&") [ Ty.path "str" ]
                  ]
                |),
                [
                  layouter;
                  M.closure
                    (fun γ =>
                      ltac:(M.monadic
                        match γ with
                        | [ α0 ] =>
                          M.match_operator (|
                            M.alloc (| α0 |),
                            [ fun γ => ltac:(M.monadic (M.read (| Value.String "frame table" |))) ]
                          |)
                        | _ => M.impossible (||)
                        end));
                  M.closure
                    (fun γ =>
                      ltac:(M.monadic
                        match γ with
                        | [ α0 ] =>
                          M.match_operator (|
                            M.alloc (| α0 |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let region := M.copy (| γ |) in
                                  M.read (|
                                    let ctx :=
                                      M.alloc (|
                                        M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.apply
                                              (Ty.path "delphinus_zkwasm::circuits::utils::Context")
                                              [ F ],
                                            "new",
                                            []
                                          |),
                                          [ M.read (| region |) ]
                                        |)
                                      |) in
                                    let _ :=
                                      M.match_operator (|
                                        M.alloc (|
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "core::ops::try_trait::Try",
                                              Ty.apply
                                                (Ty.path "core::result::Result")
                                                [
                                                  Ty.tuple [];
                                                  Ty.path "halo2_proofs::plonk::error::Error"
                                                ],
                                              [],
                                              "branch",
                                              []
                                            |),
                                            [
                                              M.call_closure (|
                                                M.get_associated_function (|
                                                  Ty.apply
                                                    (Ty.path
                                                      "delphinus_zkwasm::circuits::jtable::JumpTableChip")
                                                    [ F ],
                                                  "init",
                                                  []
                                                |),
                                                [ M.read (| self |); ctx ]
                                              |)
                                            ]
                                          |)
                                        |),
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let γ0_0 :=
                                                M.SubPointer.get_struct_tuple_field (|
                                                  γ,
                                                  "core::ops::control_flow::ControlFlow::Break",
                                                  0
                                                |) in
                                              let residual := M.copy (| γ0_0 |) in
                                              M.alloc (|
                                                M.never_to_any (|
                                                  M.read (|
                                                    M.return_ (|
                                                      M.call_closure (|
                                                        M.get_trait_method (|
                                                          "core::ops::try_trait::FromResidual",
                                                          Ty.apply
                                                            (Ty.path "core::result::Result")
                                                            [
                                                              Ty.tuple
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "halo2_proofs::circuit::AssignedCell")
                                                                    [ F; F ];
                                                                  Ty.apply
                                                                    (Ty.path "array")
                                                                    [
                                                                      Ty.tuple
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "halo2_proofs::circuit::AssignedCell")
                                                                            [ F; F ];
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "halo2_proofs::circuit::AssignedCell")
                                                                            [ F; F ]
                                                                        ]
                                                                    ]
                                                                ];
                                                              Ty.path
                                                                "halo2_proofs::plonk::error::Error"
                                                            ],
                                                          [
                                                            Ty.apply
                                                              (Ty.path "core::result::Result")
                                                              [
                                                                Ty.path "core::convert::Infallible";
                                                                Ty.path
                                                                  "halo2_proofs::plonk::error::Error"
                                                              ]
                                                          ],
                                                          "from_residual",
                                                          []
                                                        |),
                                                        [ M.read (| residual |) ]
                                                      |)
                                                    |)
                                                  |)
                                                |)
                                              |)));
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let γ0_0 :=
                                                M.SubPointer.get_struct_tuple_field (|
                                                  γ,
                                                  "core::ops::control_flow::ControlFlow::Continue",
                                                  0
                                                |) in
                                              let val := M.copy (| γ0_0 |) in
                                              val))
                                        ]
                                      |) in
                                    let _ :=
                                      M.alloc (|
                                        M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.apply
                                              (Ty.path "delphinus_zkwasm::circuits::utils::Context")
                                              [ F ],
                                            "reset",
                                            []
                                          |),
                                          [ ctx ]
                                        |)
                                      |) in
                                    let rest_jops :=
                                      M.alloc (|
                                        M.call_closure (|
                                          M.get_function (|
                                            "delphinus_zkwasm::circuits::jtable::encode_jops",
                                            []
                                          |),
                                          [
                                            BinOp.Panic.add (|
                                              Integer.U32,
                                              M.rust_cast
                                                (M.call_closure (|
                                                  M.get_associated_function (|
                                                    Ty.apply
                                                      (Ty.path "alloc::vec::Vec")
                                                      [
                                                        Ty.path "specs::jtable::JumpTableEntry";
                                                        Ty.path "alloc::alloc::Global"
                                                      ],
                                                    "len",
                                                    []
                                                  |),
                                                  [
                                                    M.call_closure (|
                                                      M.get_associated_function (|
                                                        Ty.path "specs::jtable::JumpTable",
                                                        "entries",
                                                        []
                                                      |),
                                                      [ M.read (| jtable |) ]
                                                    |)
                                                  ]
                                                |)),
                                              M.rust_cast
                                                (M.call_closure (|
                                                  M.get_trait_method (|
                                                    "core::iter::traits::iterator::Iterator",
                                                    Ty.apply
                                                      (Ty.path
                                                        "core::iter::adapters::filter::Filter")
                                                      [
                                                        Ty.apply
                                                          (Ty.path "core::slice::iter::Iter")
                                                          [
                                                            Ty.path
                                                              "specs::jtable::StaticFrameEntry"
                                                          ];
                                                        Ty.function
                                                          [
                                                            Ty.tuple
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "&")
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path "&")
                                                                      [
                                                                        Ty.path
                                                                          "specs::jtable::StaticFrameEntry"
                                                                      ]
                                                                  ]
                                                              ]
                                                          ]
                                                          (Ty.path "bool")
                                                      ],
                                                    [],
                                                    "count",
                                                    []
                                                  |),
                                                  [
                                                    M.call_closure (|
                                                      M.get_trait_method (|
                                                        "core::iter::traits::iterator::Iterator",
                                                        Ty.apply
                                                          (Ty.path "core::slice::iter::Iter")
                                                          [
                                                            Ty.path
                                                              "specs::jtable::StaticFrameEntry"
                                                          ],
                                                        [],
                                                        "filter",
                                                        [
                                                          Ty.function
                                                            [
                                                              Ty.tuple
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path "&")
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path "&")
                                                                        [
                                                                          Ty.path
                                                                            "specs::jtable::StaticFrameEntry"
                                                                        ]
                                                                    ]
                                                                ]
                                                            ]
                                                            (Ty.path "bool")
                                                        ]
                                                      |),
                                                      [
                                                        M.call_closure (|
                                                          M.get_associated_function (|
                                                            Ty.apply
                                                              (Ty.path "slice")
                                                              [
                                                                Ty.path
                                                                  "specs::jtable::StaticFrameEntry"
                                                              ],
                                                            "iter",
                                                            []
                                                          |),
                                                          [
                                                            (* Unsize *)
                                                            M.pointer_coercion
                                                              (M.read (| static_entries |))
                                                          ]
                                                        |);
                                                        M.closure
                                                          (fun γ =>
                                                            ltac:(M.monadic
                                                              match γ with
                                                              | [ α0 ] =>
                                                                M.match_operator (|
                                                                  M.alloc (| α0 |),
                                                                  [
                                                                    fun γ =>
                                                                      ltac:(M.monadic
                                                                        (let entry :=
                                                                          M.copy (| γ |) in
                                                                        M.read (|
                                                                          M.SubPointer.get_struct_record_field (|
                                                                            M.read (|
                                                                              M.read (| entry |)
                                                                            |),
                                                                            "specs::jtable::StaticFrameEntry",
                                                                            "enable"
                                                                          |)
                                                                        |)))
                                                                  ]
                                                                |)
                                                              | _ => M.impossible (||)
                                                              end))
                                                      ]
                                                    |)
                                                  ]
                                                |))
                                            |);
                                            M.rust_cast
                                              (M.call_closure (|
                                                M.get_associated_function (|
                                                  Ty.apply
                                                    (Ty.path "alloc::vec::Vec")
                                                    [
                                                      Ty.path "specs::jtable::JumpTableEntry";
                                                      Ty.path "alloc::alloc::Global"
                                                    ],
                                                  "len",
                                                  []
                                                |),
                                                [
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.path "specs::jtable::JumpTable",
                                                      "entries",
                                                      []
                                                    |),
                                                    [ M.read (| jtable |) ]
                                                  |)
                                                ]
                                              |))
                                          ]
                                        |)
                                      |) in
                                    let rest_jopss :=
                                      M.copy (|
                                        M.match_operator (|
                                          M.alloc (|
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "core::ops::try_trait::Try",
                                                Ty.apply
                                                  (Ty.path "core::result::Result")
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "halo2_proofs::circuit::AssignedCell")
                                                      [ F; F ];
                                                    Ty.path "halo2_proofs::plonk::error::Error"
                                                  ],
                                                [],
                                                "branch",
                                                []
                                              |),
                                              [
                                                M.call_closure (|
                                                  M.get_associated_function (|
                                                    Ty.apply
                                                      (Ty.path
                                                        "delphinus_zkwasm::circuits::jtable::JumpTableChip")
                                                      [ F ],
                                                    "assign_first_rest_jops",
                                                    []
                                                  |),
                                                  [
                                                    M.read (| self |);
                                                    ctx;
                                                    M.call_closure (|
                                                      M.get_trait_method (|
                                                        "core::clone::Clone",
                                                        Ty.path "num_bigint::biguint::BigUint",
                                                        [],
                                                        "clone",
                                                        []
                                                      |),
                                                      [ rest_jops ]
                                                    |)
                                                  ]
                                                |)
                                              ]
                                            |)
                                          |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let γ0_0 :=
                                                  M.SubPointer.get_struct_tuple_field (|
                                                    γ,
                                                    "core::ops::control_flow::ControlFlow::Break",
                                                    0
                                                  |) in
                                                let residual := M.copy (| γ0_0 |) in
                                                M.alloc (|
                                                  M.never_to_any (|
                                                    M.read (|
                                                      M.return_ (|
                                                        M.call_closure (|
                                                          M.get_trait_method (|
                                                            "core::ops::try_trait::FromResidual",
                                                            Ty.apply
                                                              (Ty.path "core::result::Result")
                                                              [
                                                                Ty.tuple
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "halo2_proofs::circuit::AssignedCell")
                                                                      [ F; F ];
                                                                    Ty.apply
                                                                      (Ty.path "array")
                                                                      [
                                                                        Ty.tuple
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "halo2_proofs::circuit::AssignedCell")
                                                                              [ F; F ];
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "halo2_proofs::circuit::AssignedCell")
                                                                              [ F; F ]
                                                                          ]
                                                                      ]
                                                                  ];
                                                                Ty.path
                                                                  "halo2_proofs::plonk::error::Error"
                                                              ],
                                                            [
                                                              Ty.apply
                                                                (Ty.path "core::result::Result")
                                                                [
                                                                  Ty.path
                                                                    "core::convert::Infallible";
                                                                  Ty.path
                                                                    "halo2_proofs::plonk::error::Error"
                                                                ]
                                                            ],
                                                            "from_residual",
                                                            []
                                                          |),
                                                          [ M.read (| residual |) ]
                                                        |)
                                                      |)
                                                    |)
                                                  |)
                                                |)));
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let γ0_0 :=
                                                  M.SubPointer.get_struct_tuple_field (|
                                                    γ,
                                                    "core::ops::control_flow::ControlFlow::Continue",
                                                    0
                                                  |) in
                                                let val := M.copy (| γ0_0 |) in
                                                val))
                                          ]
                                        |)
                                      |) in
                                    let cells_to_permutation :=
                                      M.copy (|
                                        M.match_operator (|
                                          M.alloc (|
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "core::ops::try_trait::Try",
                                                Ty.apply
                                                  (Ty.path "core::result::Result")
                                                  [
                                                    Ty.apply
                                                      (Ty.path "array")
                                                      [
                                                        Ty.tuple
                                                          [
                                                            Ty.apply
                                                              (Ty.path
                                                                "halo2_proofs::circuit::AssignedCell")
                                                              [ F; F ];
                                                            Ty.apply
                                                              (Ty.path
                                                                "halo2_proofs::circuit::AssignedCell")
                                                              [ F; F ]
                                                          ]
                                                      ];
                                                    Ty.path "halo2_proofs::plonk::error::Error"
                                                  ],
                                                [],
                                                "branch",
                                                []
                                              |),
                                              [
                                                M.call_closure (|
                                                  M.get_associated_function (|
                                                    Ty.apply
                                                      (Ty.path
                                                        "delphinus_zkwasm::circuits::jtable::JumpTableChip")
                                                      [ F ],
                                                    "assign_static_entries_and_first_rest_jops",
                                                    []
                                                  |),
                                                  [
                                                    M.read (| self |);
                                                    ctx;
                                                    rest_jops;
                                                    M.read (| static_entries |)
                                                  ]
                                                |)
                                              ]
                                            |)
                                          |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let γ0_0 :=
                                                  M.SubPointer.get_struct_tuple_field (|
                                                    γ,
                                                    "core::ops::control_flow::ControlFlow::Break",
                                                    0
                                                  |) in
                                                let residual := M.copy (| γ0_0 |) in
                                                M.alloc (|
                                                  M.never_to_any (|
                                                    M.read (|
                                                      M.return_ (|
                                                        M.call_closure (|
                                                          M.get_trait_method (|
                                                            "core::ops::try_trait::FromResidual",
                                                            Ty.apply
                                                              (Ty.path "core::result::Result")
                                                              [
                                                                Ty.tuple
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "halo2_proofs::circuit::AssignedCell")
                                                                      [ F; F ];
                                                                    Ty.apply
                                                                      (Ty.path "array")
                                                                      [
                                                                        Ty.tuple
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "halo2_proofs::circuit::AssignedCell")
                                                                              [ F; F ];
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "halo2_proofs::circuit::AssignedCell")
                                                                              [ F; F ]
                                                                          ]
                                                                      ]
                                                                  ];
                                                                Ty.path
                                                                  "halo2_proofs::plonk::error::Error"
                                                              ],
                                                            [
                                                              Ty.apply
                                                                (Ty.path "core::result::Result")
                                                                [
                                                                  Ty.path
                                                                    "core::convert::Infallible";
                                                                  Ty.path
                                                                    "halo2_proofs::plonk::error::Error"
                                                                ]
                                                            ],
                                                            "from_residual",
                                                            []
                                                          |),
                                                          [ M.read (| residual |) ]
                                                        |)
                                                      |)
                                                    |)
                                                  |)
                                                |)));
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let γ0_0 :=
                                                  M.SubPointer.get_struct_tuple_field (|
                                                    γ,
                                                    "core::ops::control_flow::ControlFlow::Continue",
                                                    0
                                                  |) in
                                                let val := M.copy (| γ0_0 |) in
                                                val))
                                          ]
                                        |)
                                      |) in
                                    let _ :=
                                      M.match_operator (|
                                        M.alloc (|
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "core::ops::try_trait::Try",
                                              Ty.apply
                                                (Ty.path "core::result::Result")
                                                [
                                                  Ty.tuple [];
                                                  Ty.path "halo2_proofs::plonk::error::Error"
                                                ],
                                              [],
                                              "branch",
                                              []
                                            |),
                                            [
                                              M.call_closure (|
                                                M.get_associated_function (|
                                                  Ty.apply
                                                    (Ty.path
                                                      "delphinus_zkwasm::circuits::jtable::JumpTableChip")
                                                    [ F ],
                                                  "assign_jtable_entries",
                                                  []
                                                |),
                                                [
                                                  M.read (| self |);
                                                  ctx;
                                                  rest_jops;
                                                  M.read (| jtable |)
                                                ]
                                              |)
                                            ]
                                          |)
                                        |),
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let γ0_0 :=
                                                M.SubPointer.get_struct_tuple_field (|
                                                  γ,
                                                  "core::ops::control_flow::ControlFlow::Break",
                                                  0
                                                |) in
                                              let residual := M.copy (| γ0_0 |) in
                                              M.alloc (|
                                                M.never_to_any (|
                                                  M.read (|
                                                    M.return_ (|
                                                      M.call_closure (|
                                                        M.get_trait_method (|
                                                          "core::ops::try_trait::FromResidual",
                                                          Ty.apply
                                                            (Ty.path "core::result::Result")
                                                            [
                                                              Ty.tuple
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "halo2_proofs::circuit::AssignedCell")
                                                                    [ F; F ];
                                                                  Ty.apply
                                                                    (Ty.path "array")
                                                                    [
                                                                      Ty.tuple
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "halo2_proofs::circuit::AssignedCell")
                                                                            [ F; F ];
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "halo2_proofs::circuit::AssignedCell")
                                                                            [ F; F ]
                                                                        ]
                                                                    ]
                                                                ];
                                                              Ty.path
                                                                "halo2_proofs::plonk::error::Error"
                                                            ],
                                                          [
                                                            Ty.apply
                                                              (Ty.path "core::result::Result")
                                                              [
                                                                Ty.path "core::convert::Infallible";
                                                                Ty.path
                                                                  "halo2_proofs::plonk::error::Error"
                                                              ]
                                                          ],
                                                          "from_residual",
                                                          []
                                                        |),
                                                        [ M.read (| residual |) ]
                                                      |)
                                                    |)
                                                  |)
                                                |)
                                              |)));
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let γ0_0 :=
                                                M.SubPointer.get_struct_tuple_field (|
                                                  γ,
                                                  "core::ops::control_flow::ControlFlow::Continue",
                                                  0
                                                |) in
                                              let val := M.copy (| γ0_0 |) in
                                              val))
                                        ]
                                      |) in
                                    M.alloc (|
                                      Value.StructTuple
                                        "core::result::Result::Ok"
                                        [
                                          Value.Tuple
                                            [
                                              M.read (| rest_jopss |);
                                              M.read (| cells_to_permutation |)
                                            ]
                                        ]
                                    |)
                                  |)))
                            ]
                          |)
                        | _ => M.impossible (||)
                        end))
                ]
              |)))
          | _, _ => M.impossible
          end.
        
        Axiom AssociatedFunction_assign :
          forall (F : Ty.t),
          M.IsAssociatedFunction (Self F) "assign" (assign F).
      End Impl_delphinus_zkwasm_circuits_jtable_JumpTableChip_F.
    End assign.
  End jtable.
End circuits.
