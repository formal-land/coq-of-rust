(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module circuits.
  Module jtable.
    Module configure.
      (* Trait *)
      Module JTableConstraint.
        Definition configure (F Self : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
          match τ, α with
          | [], [ self; meta ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              let meta := M.alloc (| meta |) in
              M.read (|
                let _ :=
                  M.alloc (|
                    M.call_closure (|
                      M.get_trait_method (|
                        "delphinus_zkwasm::circuits::jtable::configure::JTableConstraint",
                        Self,
                        [ F ],
                        "enable_is_bit",
                        []
                      |),
                      [ M.read (| self |); M.read (| meta |) ]
                    |)
                  |) in
                let _ :=
                  M.alloc (|
                    M.call_closure (|
                      M.get_trait_method (|
                        "delphinus_zkwasm::circuits::jtable::configure::JTableConstraint",
                        Self,
                        [ F ],
                        "enable_rest_jops_permutation",
                        []
                      |),
                      [ M.read (| self |); M.read (| meta |) ]
                    |)
                  |) in
                let _ :=
                  M.alloc (|
                    M.call_closure (|
                      M.get_trait_method (|
                        "delphinus_zkwasm::circuits::jtable::configure::JTableConstraint",
                        Self,
                        [ F ],
                        "configure_rest_jops_decrease",
                        []
                      |),
                      [ M.read (| self |); M.read (| meta |) ]
                    |)
                  |) in
                let _ :=
                  M.alloc (|
                    M.call_closure (|
                      M.get_trait_method (|
                        "delphinus_zkwasm::circuits::jtable::configure::JTableConstraint",
                        Self,
                        [ F ],
                        "disabled_block_should_be_end",
                        []
                      |),
                      [ M.read (| self |); M.read (| meta |) ]
                    |)
                  |) in
                let _ :=
                  M.alloc (|
                    M.call_closure (|
                      M.get_trait_method (|
                        "delphinus_zkwasm::circuits::jtable::configure::JTableConstraint",
                        Self,
                        [ F ],
                        "disabled_block_has_no_entry_value",
                        []
                      |),
                      [ M.read (| self |); M.read (| meta |) ]
                    |)
                  |) in
                M.alloc (| Value.Tuple [] |)
              |)))
          | _, _ => M.impossible
          end.
        
        Axiom ProvidedMethod_configure :
          forall (F : Ty.t),
          M.IsProvidedMethod
            "delphinus_zkwasm::circuits::jtable::configure::JTableConstraint"
            "configure"
            (configure F).
      End JTableConstraint.
      
      Module Impl_delphinus_zkwasm_circuits_jtable_configure_JTableConstraint_where_pairing_bn256_arithmetic_fields_FieldExt_F_F_for_delphinus_zkwasm_circuits_jtable_JumpTableConfig_F.
        Definition Self (F : Ty.t) : Ty.t :=
          Ty.apply (Ty.path "delphinus_zkwasm::circuits::jtable::JumpTableConfig") [ F ].
        
        (*
            fn enable_rest_jops_permutation(&self, meta: &mut ConstraintSystem<F>) {
                meta.enable_equality(self.data);
            }
        *)
        Definition enable_rest_jops_permutation (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self F in
          match τ, α with
          | [], [ self; meta ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              let meta := M.alloc (| meta |) in
              M.read (|
                let _ :=
                  M.alloc (|
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.apply (Ty.path "halo2_proofs::plonk::circuit::ConstraintSystem") [ F ],
                        "enable_equality",
                        [
                          Ty.apply
                            (Ty.path "halo2_proofs::plonk::circuit::Column")
                            [ Ty.path "halo2_proofs::plonk::circuit::Advice" ]
                        ]
                      |),
                      [
                        M.read (| meta |);
                        M.read (|
                          M.SubPointer.get_struct_record_field (|
                            M.read (| self |),
                            "delphinus_zkwasm::circuits::jtable::JumpTableConfig",
                            "data"
                          |)
                        |)
                      ]
                    |)
                  |) in
                M.alloc (| Value.Tuple [] |)
              |)))
          | _, _ => M.impossible
          end.
        
        (*
            fn enable_is_bit(&self, meta: &mut ConstraintSystem<F>) {
                meta.create_gate("enable is bit", |meta| {
                    vec![
                        self.enable(meta)
                            * (self.enable(meta) - constant_from!(1))
                            * fixed_curr!(meta, self.sel),
                    ]
                });
            }
        *)
        Definition enable_is_bit (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self F in
          match τ, α with
          | [], [ self; meta ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              let meta := M.alloc (| meta |) in
              M.read (|
                let _ :=
                  M.alloc (|
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.apply (Ty.path "halo2_proofs::plonk::circuit::ConstraintSystem") [ F ],
                        "create_gate",
                        [
                          Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ];
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            [
                              Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ];
                              Ty.path "alloc::alloc::Global"
                            ];
                          Ty.function
                            [
                              Ty.tuple
                                [
                                  Ty.apply
                                    (Ty.path "&mut")
                                    [
                                      Ty.apply
                                        (Ty.path "halo2_proofs::plonk::circuit::VirtualCells")
                                        [ F ]
                                    ]
                                ]
                            ]
                            (Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              [
                                Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ];
                                Ty.path "alloc::alloc::Global"
                              ])
                        ]
                      |),
                      [
                        M.read (| meta |);
                        M.read (| Value.String "enable is bit" |);
                        M.closure
                          (fun γ =>
                            ltac:(M.monadic
                              match γ with
                              | [ α0 ] =>
                                M.match_operator (|
                                  M.alloc (| α0 |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let meta := M.copy (| γ |) in
                                        M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.apply
                                              (Ty.path "slice")
                                              [
                                                Ty.apply
                                                  (Ty.path
                                                    "halo2_proofs::plonk::circuit::Expression")
                                                  [ F ]
                                              ],
                                            "into_vec",
                                            [ Ty.path "alloc::alloc::Global" ]
                                          |),
                                          [
                                            (* Unsize *)
                                            M.pointer_coercion
                                              (M.read (|
                                                M.call_closure (|
                                                  M.get_associated_function (|
                                                    Ty.apply
                                                      (Ty.path "alloc::boxed::Box")
                                                      [
                                                        Ty.apply
                                                          (Ty.path "array")
                                                          [
                                                            Ty.apply
                                                              (Ty.path
                                                                "halo2_proofs::plonk::circuit::Expression")
                                                              [ F ]
                                                          ];
                                                        Ty.path "alloc::alloc::Global"
                                                      ],
                                                    "new",
                                                    []
                                                  |),
                                                  [
                                                    M.alloc (|
                                                      Value.Array
                                                        [
                                                          M.call_closure (|
                                                            M.get_trait_method (|
                                                              "core::ops::arith::Mul",
                                                              Ty.apply
                                                                (Ty.path
                                                                  "halo2_proofs::plonk::circuit::Expression")
                                                                [ F ],
                                                              [
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "halo2_proofs::plonk::circuit::Expression")
                                                                  [ F ]
                                                              ],
                                                              "mul",
                                                              []
                                                            |),
                                                            [
                                                              M.call_closure (|
                                                                M.get_trait_method (|
                                                                  "core::ops::arith::Mul",
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "halo2_proofs::plonk::circuit::Expression")
                                                                    [ F ],
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "halo2_proofs::plonk::circuit::Expression")
                                                                      [ F ]
                                                                  ],
                                                                  "mul",
                                                                  []
                                                                |),
                                                                [
                                                                  M.call_closure (|
                                                                    M.get_associated_function (|
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "delphinus_zkwasm::circuits::jtable::JumpTableConfig")
                                                                        [ F ],
                                                                      "enable",
                                                                      []
                                                                    |),
                                                                    [
                                                                      M.read (| self |);
                                                                      M.read (| meta |)
                                                                    ]
                                                                  |);
                                                                  M.call_closure (|
                                                                    M.get_trait_method (|
                                                                      "core::ops::arith::Sub",
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "halo2_proofs::plonk::circuit::Expression")
                                                                        [ F ],
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "halo2_proofs::plonk::circuit::Expression")
                                                                          [ F ]
                                                                      ],
                                                                      "sub",
                                                                      []
                                                                    |),
                                                                    [
                                                                      M.call_closure (|
                                                                        M.get_associated_function (|
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "delphinus_zkwasm::circuits::jtable::JumpTableConfig")
                                                                            [ F ],
                                                                          "enable",
                                                                          []
                                                                        |),
                                                                        [
                                                                          M.read (| self |);
                                                                          M.read (| meta |)
                                                                        ]
                                                                      |);
                                                                      Value.StructTuple
                                                                        "halo2_proofs::plonk::circuit::Expression::Constant"
                                                                        [
                                                                          M.call_closure (|
                                                                            M.get_trait_method (|
                                                                              "core::convert::From",
                                                                              F,
                                                                              [ Ty.path "u64" ],
                                                                              "from",
                                                                              []
                                                                            |),
                                                                            [
                                                                              M.read (|
                                                                                M.use
                                                                                  (M.alloc (|
                                                                                    Value.Integer 1
                                                                                  |))
                                                                              |)
                                                                            ]
                                                                          |)
                                                                        ]
                                                                    ]
                                                                  |)
                                                                ]
                                                              |);
                                                              M.call_closure (|
                                                                M.get_associated_function (|
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "halo2_proofs::plonk::circuit::VirtualCells")
                                                                    [ F ],
                                                                  "query_fixed",
                                                                  []
                                                                |),
                                                                [
                                                                  M.read (| meta |);
                                                                  M.read (|
                                                                    M.SubPointer.get_struct_record_field (|
                                                                      M.read (| self |),
                                                                      "delphinus_zkwasm::circuits::jtable::JumpTableConfig",
                                                                      "sel"
                                                                    |)
                                                                  |);
                                                                  M.call_closure (|
                                                                    M.get_associated_function (|
                                                                      Ty.path
                                                                        "halo2_proofs::poly::Rotation",
                                                                      "cur",
                                                                      []
                                                                    |),
                                                                    []
                                                                  |)
                                                                ]
                                                              |)
                                                            ]
                                                          |)
                                                        ]
                                                    |)
                                                  ]
                                                |)
                                              |))
                                          ]
                                        |)))
                                  ]
                                |)
                              | _ => M.impossible (||)
                              end))
                      ]
                    |)
                  |) in
                M.alloc (| Value.Tuple [] |)
              |)))
          | _, _ => M.impossible
          end.
        
        (*
            fn configure_rest_jops_decrease(&self, meta: &mut ConstraintSystem<F>) {
                meta.create_gate("c3. jtable rest decrease", |meta| {
                    vec![
                        (self.rest(meta) - self.next_rest(meta) - constant_from_bn!(&encode_jops(1, 1))
                            + self.static_bit(meta))
                            * self.enable(meta)
                            * fixed_curr!(meta, self.sel),
                        (self.rest(meta) - self.next_rest(meta))
                            * (self.enable(meta) - constant_from!(1))
                            * fixed_curr!(meta, self.sel),
                    ]
                });
            }
        *)
        Definition configure_rest_jops_decrease (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self F in
          match τ, α with
          | [], [ self; meta ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              let meta := M.alloc (| meta |) in
              M.read (|
                let _ :=
                  M.alloc (|
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.apply (Ty.path "halo2_proofs::plonk::circuit::ConstraintSystem") [ F ],
                        "create_gate",
                        [
                          Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ];
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            [
                              Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ];
                              Ty.path "alloc::alloc::Global"
                            ];
                          Ty.function
                            [
                              Ty.tuple
                                [
                                  Ty.apply
                                    (Ty.path "&mut")
                                    [
                                      Ty.apply
                                        (Ty.path "halo2_proofs::plonk::circuit::VirtualCells")
                                        [ F ]
                                    ]
                                ]
                            ]
                            (Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              [
                                Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ];
                                Ty.path "alloc::alloc::Global"
                              ])
                        ]
                      |),
                      [
                        M.read (| meta |);
                        M.read (| Value.String "c3. jtable rest decrease" |);
                        M.closure
                          (fun γ =>
                            ltac:(M.monadic
                              match γ with
                              | [ α0 ] =>
                                M.match_operator (|
                                  M.alloc (| α0 |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let meta := M.copy (| γ |) in
                                        M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.apply
                                              (Ty.path "slice")
                                              [
                                                Ty.apply
                                                  (Ty.path
                                                    "halo2_proofs::plonk::circuit::Expression")
                                                  [ F ]
                                              ],
                                            "into_vec",
                                            [ Ty.path "alloc::alloc::Global" ]
                                          |),
                                          [
                                            (* Unsize *)
                                            M.pointer_coercion
                                              (M.read (|
                                                M.call_closure (|
                                                  M.get_associated_function (|
                                                    Ty.apply
                                                      (Ty.path "alloc::boxed::Box")
                                                      [
                                                        Ty.apply
                                                          (Ty.path "array")
                                                          [
                                                            Ty.apply
                                                              (Ty.path
                                                                "halo2_proofs::plonk::circuit::Expression")
                                                              [ F ]
                                                          ];
                                                        Ty.path "alloc::alloc::Global"
                                                      ],
                                                    "new",
                                                    []
                                                  |),
                                                  [
                                                    M.alloc (|
                                                      Value.Array
                                                        [
                                                          M.call_closure (|
                                                            M.get_trait_method (|
                                                              "core::ops::arith::Mul",
                                                              Ty.apply
                                                                (Ty.path
                                                                  "halo2_proofs::plonk::circuit::Expression")
                                                                [ F ],
                                                              [
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "halo2_proofs::plonk::circuit::Expression")
                                                                  [ F ]
                                                              ],
                                                              "mul",
                                                              []
                                                            |),
                                                            [
                                                              M.call_closure (|
                                                                M.get_trait_method (|
                                                                  "core::ops::arith::Mul",
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "halo2_proofs::plonk::circuit::Expression")
                                                                    [ F ],
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "halo2_proofs::plonk::circuit::Expression")
                                                                      [ F ]
                                                                  ],
                                                                  "mul",
                                                                  []
                                                                |),
                                                                [
                                                                  M.call_closure (|
                                                                    M.get_trait_method (|
                                                                      "core::ops::arith::Add",
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "halo2_proofs::plonk::circuit::Expression")
                                                                        [ F ],
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "halo2_proofs::plonk::circuit::Expression")
                                                                          [ F ]
                                                                      ],
                                                                      "add",
                                                                      []
                                                                    |),
                                                                    [
                                                                      M.call_closure (|
                                                                        M.get_trait_method (|
                                                                          "core::ops::arith::Sub",
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "halo2_proofs::plonk::circuit::Expression")
                                                                            [ F ],
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "halo2_proofs::plonk::circuit::Expression")
                                                                              [ F ]
                                                                          ],
                                                                          "sub",
                                                                          []
                                                                        |),
                                                                        [
                                                                          M.call_closure (|
                                                                            M.get_trait_method (|
                                                                              "core::ops::arith::Sub",
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "halo2_proofs::plonk::circuit::Expression")
                                                                                [ F ],
                                                                              [
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "halo2_proofs::plonk::circuit::Expression")
                                                                                  [ F ]
                                                                              ],
                                                                              "sub",
                                                                              []
                                                                            |),
                                                                            [
                                                                              M.call_closure (|
                                                                                M.get_associated_function (|
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "delphinus_zkwasm::circuits::jtable::JumpTableConfig")
                                                                                    [ F ],
                                                                                  "rest",
                                                                                  []
                                                                                |),
                                                                                [
                                                                                  M.read (| self |);
                                                                                  M.read (| meta |)
                                                                                ]
                                                                              |);
                                                                              M.call_closure (|
                                                                                M.get_associated_function (|
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "delphinus_zkwasm::circuits::jtable::JumpTableConfig")
                                                                                    [ F ],
                                                                                  "next_rest",
                                                                                  []
                                                                                |),
                                                                                [
                                                                                  M.read (| self |);
                                                                                  M.read (| meta |)
                                                                                ]
                                                                              |)
                                                                            ]
                                                                          |);
                                                                          Value.StructTuple
                                                                            "halo2_proofs::plonk::circuit::Expression::Constant"
                                                                            [
                                                                              M.call_closure (|
                                                                                M.get_function (|
                                                                                  "delphinus_zkwasm::circuits::utils::bn_to_field",
                                                                                  [ F ]
                                                                                |),
                                                                                [
                                                                                  M.alloc (|
                                                                                    M.call_closure (|
                                                                                      M.get_function (|
                                                                                        "delphinus_zkwasm::circuits::jtable::encode_jops",
                                                                                        []
                                                                                      |),
                                                                                      [
                                                                                        Value.Integer
                                                                                          1;
                                                                                        Value.Integer
                                                                                          1
                                                                                      ]
                                                                                    |)
                                                                                  |)
                                                                                ]
                                                                              |)
                                                                            ]
                                                                        ]
                                                                      |);
                                                                      M.call_closure (|
                                                                        M.get_associated_function (|
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "delphinus_zkwasm::circuits::jtable::JumpTableConfig")
                                                                            [ F ],
                                                                          "static_bit",
                                                                          []
                                                                        |),
                                                                        [
                                                                          M.read (| self |);
                                                                          M.read (| meta |)
                                                                        ]
                                                                      |)
                                                                    ]
                                                                  |);
                                                                  M.call_closure (|
                                                                    M.get_associated_function (|
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "delphinus_zkwasm::circuits::jtable::JumpTableConfig")
                                                                        [ F ],
                                                                      "enable",
                                                                      []
                                                                    |),
                                                                    [
                                                                      M.read (| self |);
                                                                      M.read (| meta |)
                                                                    ]
                                                                  |)
                                                                ]
                                                              |);
                                                              M.call_closure (|
                                                                M.get_associated_function (|
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "halo2_proofs::plonk::circuit::VirtualCells")
                                                                    [ F ],
                                                                  "query_fixed",
                                                                  []
                                                                |),
                                                                [
                                                                  M.read (| meta |);
                                                                  M.read (|
                                                                    M.SubPointer.get_struct_record_field (|
                                                                      M.read (| self |),
                                                                      "delphinus_zkwasm::circuits::jtable::JumpTableConfig",
                                                                      "sel"
                                                                    |)
                                                                  |);
                                                                  M.call_closure (|
                                                                    M.get_associated_function (|
                                                                      Ty.path
                                                                        "halo2_proofs::poly::Rotation",
                                                                      "cur",
                                                                      []
                                                                    |),
                                                                    []
                                                                  |)
                                                                ]
                                                              |)
                                                            ]
                                                          |);
                                                          M.call_closure (|
                                                            M.get_trait_method (|
                                                              "core::ops::arith::Mul",
                                                              Ty.apply
                                                                (Ty.path
                                                                  "halo2_proofs::plonk::circuit::Expression")
                                                                [ F ],
                                                              [
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "halo2_proofs::plonk::circuit::Expression")
                                                                  [ F ]
                                                              ],
                                                              "mul",
                                                              []
                                                            |),
                                                            [
                                                              M.call_closure (|
                                                                M.get_trait_method (|
                                                                  "core::ops::arith::Mul",
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "halo2_proofs::plonk::circuit::Expression")
                                                                    [ F ],
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "halo2_proofs::plonk::circuit::Expression")
                                                                      [ F ]
                                                                  ],
                                                                  "mul",
                                                                  []
                                                                |),
                                                                [
                                                                  M.call_closure (|
                                                                    M.get_trait_method (|
                                                                      "core::ops::arith::Sub",
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "halo2_proofs::plonk::circuit::Expression")
                                                                        [ F ],
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "halo2_proofs::plonk::circuit::Expression")
                                                                          [ F ]
                                                                      ],
                                                                      "sub",
                                                                      []
                                                                    |),
                                                                    [
                                                                      M.call_closure (|
                                                                        M.get_associated_function (|
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "delphinus_zkwasm::circuits::jtable::JumpTableConfig")
                                                                            [ F ],
                                                                          "rest",
                                                                          []
                                                                        |),
                                                                        [
                                                                          M.read (| self |);
                                                                          M.read (| meta |)
                                                                        ]
                                                                      |);
                                                                      M.call_closure (|
                                                                        M.get_associated_function (|
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "delphinus_zkwasm::circuits::jtable::JumpTableConfig")
                                                                            [ F ],
                                                                          "next_rest",
                                                                          []
                                                                        |),
                                                                        [
                                                                          M.read (| self |);
                                                                          M.read (| meta |)
                                                                        ]
                                                                      |)
                                                                    ]
                                                                  |);
                                                                  M.call_closure (|
                                                                    M.get_trait_method (|
                                                                      "core::ops::arith::Sub",
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "halo2_proofs::plonk::circuit::Expression")
                                                                        [ F ],
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "halo2_proofs::plonk::circuit::Expression")
                                                                          [ F ]
                                                                      ],
                                                                      "sub",
                                                                      []
                                                                    |),
                                                                    [
                                                                      M.call_closure (|
                                                                        M.get_associated_function (|
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "delphinus_zkwasm::circuits::jtable::JumpTableConfig")
                                                                            [ F ],
                                                                          "enable",
                                                                          []
                                                                        |),
                                                                        [
                                                                          M.read (| self |);
                                                                          M.read (| meta |)
                                                                        ]
                                                                      |);
                                                                      Value.StructTuple
                                                                        "halo2_proofs::plonk::circuit::Expression::Constant"
                                                                        [
                                                                          M.call_closure (|
                                                                            M.get_trait_method (|
                                                                              "core::convert::From",
                                                                              F,
                                                                              [ Ty.path "u64" ],
                                                                              "from",
                                                                              []
                                                                            |),
                                                                            [
                                                                              M.read (|
                                                                                M.use
                                                                                  (M.alloc (|
                                                                                    Value.Integer 1
                                                                                  |))
                                                                              |)
                                                                            ]
                                                                          |)
                                                                        ]
                                                                    ]
                                                                  |)
                                                                ]
                                                              |);
                                                              M.call_closure (|
                                                                M.get_associated_function (|
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "halo2_proofs::plonk::circuit::VirtualCells")
                                                                    [ F ],
                                                                  "query_fixed",
                                                                  []
                                                                |),
                                                                [
                                                                  M.read (| meta |);
                                                                  M.read (|
                                                                    M.SubPointer.get_struct_record_field (|
                                                                      M.read (| self |),
                                                                      "delphinus_zkwasm::circuits::jtable::JumpTableConfig",
                                                                      "sel"
                                                                    |)
                                                                  |);
                                                                  M.call_closure (|
                                                                    M.get_associated_function (|
                                                                      Ty.path
                                                                        "halo2_proofs::poly::Rotation",
                                                                      "cur",
                                                                      []
                                                                    |),
                                                                    []
                                                                  |)
                                                                ]
                                                              |)
                                                            ]
                                                          |)
                                                        ]
                                                    |)
                                                  ]
                                                |)
                                              |))
                                          ]
                                        |)))
                                  ]
                                |)
                              | _ => M.impossible (||)
                              end))
                      ]
                    |)
                  |) in
                M.alloc (| Value.Tuple [] |)
              |)))
          | _, _ => M.impossible
          end.
        
        (*
            fn disabled_block_should_be_end(&self, meta: &mut ConstraintSystem<F>) {
                meta.create_gate("c5. jtable ends up", |meta| {
                    vec![
                        (constant_from!(1) - self.enable(meta))
                            * (constant_from!(1) - self.static_bit(meta))
                            * self.rest(meta)
                            * fixed_curr!(meta, self.sel),
                    ]
                });
            }
        *)
        Definition disabled_block_should_be_end (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self F in
          match τ, α with
          | [], [ self; meta ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              let meta := M.alloc (| meta |) in
              M.read (|
                let _ :=
                  M.alloc (|
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.apply (Ty.path "halo2_proofs::plonk::circuit::ConstraintSystem") [ F ],
                        "create_gate",
                        [
                          Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ];
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            [
                              Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ];
                              Ty.path "alloc::alloc::Global"
                            ];
                          Ty.function
                            [
                              Ty.tuple
                                [
                                  Ty.apply
                                    (Ty.path "&mut")
                                    [
                                      Ty.apply
                                        (Ty.path "halo2_proofs::plonk::circuit::VirtualCells")
                                        [ F ]
                                    ]
                                ]
                            ]
                            (Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              [
                                Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ];
                                Ty.path "alloc::alloc::Global"
                              ])
                        ]
                      |),
                      [
                        M.read (| meta |);
                        M.read (| Value.String "c5. jtable ends up" |);
                        M.closure
                          (fun γ =>
                            ltac:(M.monadic
                              match γ with
                              | [ α0 ] =>
                                M.match_operator (|
                                  M.alloc (| α0 |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let meta := M.copy (| γ |) in
                                        M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.apply
                                              (Ty.path "slice")
                                              [
                                                Ty.apply
                                                  (Ty.path
                                                    "halo2_proofs::plonk::circuit::Expression")
                                                  [ F ]
                                              ],
                                            "into_vec",
                                            [ Ty.path "alloc::alloc::Global" ]
                                          |),
                                          [
                                            (* Unsize *)
                                            M.pointer_coercion
                                              (M.read (|
                                                M.call_closure (|
                                                  M.get_associated_function (|
                                                    Ty.apply
                                                      (Ty.path "alloc::boxed::Box")
                                                      [
                                                        Ty.apply
                                                          (Ty.path "array")
                                                          [
                                                            Ty.apply
                                                              (Ty.path
                                                                "halo2_proofs::plonk::circuit::Expression")
                                                              [ F ]
                                                          ];
                                                        Ty.path "alloc::alloc::Global"
                                                      ],
                                                    "new",
                                                    []
                                                  |),
                                                  [
                                                    M.alloc (|
                                                      Value.Array
                                                        [
                                                          M.call_closure (|
                                                            M.get_trait_method (|
                                                              "core::ops::arith::Mul",
                                                              Ty.apply
                                                                (Ty.path
                                                                  "halo2_proofs::plonk::circuit::Expression")
                                                                [ F ],
                                                              [
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "halo2_proofs::plonk::circuit::Expression")
                                                                  [ F ]
                                                              ],
                                                              "mul",
                                                              []
                                                            |),
                                                            [
                                                              M.call_closure (|
                                                                M.get_trait_method (|
                                                                  "core::ops::arith::Mul",
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "halo2_proofs::plonk::circuit::Expression")
                                                                    [ F ],
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "halo2_proofs::plonk::circuit::Expression")
                                                                      [ F ]
                                                                  ],
                                                                  "mul",
                                                                  []
                                                                |),
                                                                [
                                                                  M.call_closure (|
                                                                    M.get_trait_method (|
                                                                      "core::ops::arith::Mul",
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "halo2_proofs::plonk::circuit::Expression")
                                                                        [ F ],
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "halo2_proofs::plonk::circuit::Expression")
                                                                          [ F ]
                                                                      ],
                                                                      "mul",
                                                                      []
                                                                    |),
                                                                    [
                                                                      M.call_closure (|
                                                                        M.get_trait_method (|
                                                                          "core::ops::arith::Sub",
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "halo2_proofs::plonk::circuit::Expression")
                                                                            [ F ],
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "halo2_proofs::plonk::circuit::Expression")
                                                                              [ F ]
                                                                          ],
                                                                          "sub",
                                                                          []
                                                                        |),
                                                                        [
                                                                          Value.StructTuple
                                                                            "halo2_proofs::plonk::circuit::Expression::Constant"
                                                                            [
                                                                              M.call_closure (|
                                                                                M.get_trait_method (|
                                                                                  "core::convert::From",
                                                                                  F,
                                                                                  [ Ty.path "u64" ],
                                                                                  "from",
                                                                                  []
                                                                                |),
                                                                                [
                                                                                  M.read (|
                                                                                    M.use
                                                                                      (M.alloc (|
                                                                                        Value.Integer
                                                                                          1
                                                                                      |))
                                                                                  |)
                                                                                ]
                                                                              |)
                                                                            ];
                                                                          M.call_closure (|
                                                                            M.get_associated_function (|
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "delphinus_zkwasm::circuits::jtable::JumpTableConfig")
                                                                                [ F ],
                                                                              "enable",
                                                                              []
                                                                            |),
                                                                            [
                                                                              M.read (| self |);
                                                                              M.read (| meta |)
                                                                            ]
                                                                          |)
                                                                        ]
                                                                      |);
                                                                      M.call_closure (|
                                                                        M.get_trait_method (|
                                                                          "core::ops::arith::Sub",
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "halo2_proofs::plonk::circuit::Expression")
                                                                            [ F ],
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "halo2_proofs::plonk::circuit::Expression")
                                                                              [ F ]
                                                                          ],
                                                                          "sub",
                                                                          []
                                                                        |),
                                                                        [
                                                                          Value.StructTuple
                                                                            "halo2_proofs::plonk::circuit::Expression::Constant"
                                                                            [
                                                                              M.call_closure (|
                                                                                M.get_trait_method (|
                                                                                  "core::convert::From",
                                                                                  F,
                                                                                  [ Ty.path "u64" ],
                                                                                  "from",
                                                                                  []
                                                                                |),
                                                                                [
                                                                                  M.read (|
                                                                                    M.use
                                                                                      (M.alloc (|
                                                                                        Value.Integer
                                                                                          1
                                                                                      |))
                                                                                  |)
                                                                                ]
                                                                              |)
                                                                            ];
                                                                          M.call_closure (|
                                                                            M.get_associated_function (|
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "delphinus_zkwasm::circuits::jtable::JumpTableConfig")
                                                                                [ F ],
                                                                              "static_bit",
                                                                              []
                                                                            |),
                                                                            [
                                                                              M.read (| self |);
                                                                              M.read (| meta |)
                                                                            ]
                                                                          |)
                                                                        ]
                                                                      |)
                                                                    ]
                                                                  |);
                                                                  M.call_closure (|
                                                                    M.get_associated_function (|
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "delphinus_zkwasm::circuits::jtable::JumpTableConfig")
                                                                        [ F ],
                                                                      "rest",
                                                                      []
                                                                    |),
                                                                    [
                                                                      M.read (| self |);
                                                                      M.read (| meta |)
                                                                    ]
                                                                  |)
                                                                ]
                                                              |);
                                                              M.call_closure (|
                                                                M.get_associated_function (|
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "halo2_proofs::plonk::circuit::VirtualCells")
                                                                    [ F ],
                                                                  "query_fixed",
                                                                  []
                                                                |),
                                                                [
                                                                  M.read (| meta |);
                                                                  M.read (|
                                                                    M.SubPointer.get_struct_record_field (|
                                                                      M.read (| self |),
                                                                      "delphinus_zkwasm::circuits::jtable::JumpTableConfig",
                                                                      "sel"
                                                                    |)
                                                                  |);
                                                                  M.call_closure (|
                                                                    M.get_associated_function (|
                                                                      Ty.path
                                                                        "halo2_proofs::poly::Rotation",
                                                                      "cur",
                                                                      []
                                                                    |),
                                                                    []
                                                                  |)
                                                                ]
                                                              |)
                                                            ]
                                                          |)
                                                        ]
                                                    |)
                                                  ]
                                                |)
                                              |))
                                          ]
                                        |)))
                                  ]
                                |)
                              | _ => M.impossible (||)
                              end))
                      ]
                    |)
                  |) in
                M.alloc (| Value.Tuple [] |)
              |)))
          | _, _ => M.impossible
          end.
        
        (*
            fn disabled_block_has_no_entry_value(&self, meta: &mut ConstraintSystem<F>) {
                meta.create_gate("c6. jtable entry is zero on disabled", |meta| {
                    vec![
                        (constant_from!(1) - self.enable(meta))
                            * self.entry(meta)
                            * fixed_curr!(meta, self.sel),
                    ]
                });
            }
        *)
        Definition disabled_block_has_no_entry_value
            (F : Ty.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self F in
          match τ, α with
          | [], [ self; meta ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              let meta := M.alloc (| meta |) in
              M.read (|
                let _ :=
                  M.alloc (|
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.apply (Ty.path "halo2_proofs::plonk::circuit::ConstraintSystem") [ F ],
                        "create_gate",
                        [
                          Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ];
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            [
                              Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ];
                              Ty.path "alloc::alloc::Global"
                            ];
                          Ty.function
                            [
                              Ty.tuple
                                [
                                  Ty.apply
                                    (Ty.path "&mut")
                                    [
                                      Ty.apply
                                        (Ty.path "halo2_proofs::plonk::circuit::VirtualCells")
                                        [ F ]
                                    ]
                                ]
                            ]
                            (Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              [
                                Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ];
                                Ty.path "alloc::alloc::Global"
                              ])
                        ]
                      |),
                      [
                        M.read (| meta |);
                        M.read (| Value.String "c6. jtable entry is zero on disabled" |);
                        M.closure
                          (fun γ =>
                            ltac:(M.monadic
                              match γ with
                              | [ α0 ] =>
                                M.match_operator (|
                                  M.alloc (| α0 |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let meta := M.copy (| γ |) in
                                        M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.apply
                                              (Ty.path "slice")
                                              [
                                                Ty.apply
                                                  (Ty.path
                                                    "halo2_proofs::plonk::circuit::Expression")
                                                  [ F ]
                                              ],
                                            "into_vec",
                                            [ Ty.path "alloc::alloc::Global" ]
                                          |),
                                          [
                                            (* Unsize *)
                                            M.pointer_coercion
                                              (M.read (|
                                                M.call_closure (|
                                                  M.get_associated_function (|
                                                    Ty.apply
                                                      (Ty.path "alloc::boxed::Box")
                                                      [
                                                        Ty.apply
                                                          (Ty.path "array")
                                                          [
                                                            Ty.apply
                                                              (Ty.path
                                                                "halo2_proofs::plonk::circuit::Expression")
                                                              [ F ]
                                                          ];
                                                        Ty.path "alloc::alloc::Global"
                                                      ],
                                                    "new",
                                                    []
                                                  |),
                                                  [
                                                    M.alloc (|
                                                      Value.Array
                                                        [
                                                          M.call_closure (|
                                                            M.get_trait_method (|
                                                              "core::ops::arith::Mul",
                                                              Ty.apply
                                                                (Ty.path
                                                                  "halo2_proofs::plonk::circuit::Expression")
                                                                [ F ],
                                                              [
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "halo2_proofs::plonk::circuit::Expression")
                                                                  [ F ]
                                                              ],
                                                              "mul",
                                                              []
                                                            |),
                                                            [
                                                              M.call_closure (|
                                                                M.get_trait_method (|
                                                                  "core::ops::arith::Mul",
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "halo2_proofs::plonk::circuit::Expression")
                                                                    [ F ],
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "halo2_proofs::plonk::circuit::Expression")
                                                                      [ F ]
                                                                  ],
                                                                  "mul",
                                                                  []
                                                                |),
                                                                [
                                                                  M.call_closure (|
                                                                    M.get_trait_method (|
                                                                      "core::ops::arith::Sub",
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "halo2_proofs::plonk::circuit::Expression")
                                                                        [ F ],
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "halo2_proofs::plonk::circuit::Expression")
                                                                          [ F ]
                                                                      ],
                                                                      "sub",
                                                                      []
                                                                    |),
                                                                    [
                                                                      Value.StructTuple
                                                                        "halo2_proofs::plonk::circuit::Expression::Constant"
                                                                        [
                                                                          M.call_closure (|
                                                                            M.get_trait_method (|
                                                                              "core::convert::From",
                                                                              F,
                                                                              [ Ty.path "u64" ],
                                                                              "from",
                                                                              []
                                                                            |),
                                                                            [
                                                                              M.read (|
                                                                                M.use
                                                                                  (M.alloc (|
                                                                                    Value.Integer 1
                                                                                  |))
                                                                              |)
                                                                            ]
                                                                          |)
                                                                        ];
                                                                      M.call_closure (|
                                                                        M.get_associated_function (|
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "delphinus_zkwasm::circuits::jtable::JumpTableConfig")
                                                                            [ F ],
                                                                          "enable",
                                                                          []
                                                                        |),
                                                                        [
                                                                          M.read (| self |);
                                                                          M.read (| meta |)
                                                                        ]
                                                                      |)
                                                                    ]
                                                                  |);
                                                                  M.call_closure (|
                                                                    M.get_associated_function (|
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "delphinus_zkwasm::circuits::jtable::JumpTableConfig")
                                                                        [ F ],
                                                                      "entry",
                                                                      []
                                                                    |),
                                                                    [
                                                                      M.read (| self |);
                                                                      M.read (| meta |)
                                                                    ]
                                                                  |)
                                                                ]
                                                              |);
                                                              M.call_closure (|
                                                                M.get_associated_function (|
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "halo2_proofs::plonk::circuit::VirtualCells")
                                                                    [ F ],
                                                                  "query_fixed",
                                                                  []
                                                                |),
                                                                [
                                                                  M.read (| meta |);
                                                                  M.read (|
                                                                    M.SubPointer.get_struct_record_field (|
                                                                      M.read (| self |),
                                                                      "delphinus_zkwasm::circuits::jtable::JumpTableConfig",
                                                                      "sel"
                                                                    |)
                                                                  |);
                                                                  M.call_closure (|
                                                                    M.get_associated_function (|
                                                                      Ty.path
                                                                        "halo2_proofs::poly::Rotation",
                                                                      "cur",
                                                                      []
                                                                    |),
                                                                    []
                                                                  |)
                                                                ]
                                                              |)
                                                            ]
                                                          |)
                                                        ]
                                                    |)
                                                  ]
                                                |)
                                              |))
                                          ]
                                        |)))
                                  ]
                                |)
                              | _ => M.impossible (||)
                              end))
                      ]
                    |)
                  |) in
                M.alloc (| Value.Tuple [] |)
              |)))
          | _, _ => M.impossible
          end.
        
        Axiom Implements :
          forall (F : Ty.t),
          M.IsTraitInstance
            "delphinus_zkwasm::circuits::jtable::configure::JTableConstraint"
            (Self F)
            (* Trait polymorphic types *) [ (* F *) F ]
            (* Instance *)
            [
              ("enable_rest_jops_permutation",
                InstanceField.Method (enable_rest_jops_permutation F));
              ("enable_is_bit", InstanceField.Method (enable_is_bit F));
              ("configure_rest_jops_decrease",
                InstanceField.Method (configure_rest_jops_decrease F));
              ("disabled_block_should_be_end",
                InstanceField.Method (disabled_block_should_be_end F));
              ("disabled_block_has_no_entry_value",
                InstanceField.Method (disabled_block_has_no_entry_value F))
            ].
      End Impl_delphinus_zkwasm_circuits_jtable_configure_JTableConstraint_where_pairing_bn256_arithmetic_fields_FieldExt_F_F_for_delphinus_zkwasm_circuits_jtable_JumpTableConfig_F.
      
      Module Impl_delphinus_zkwasm_circuits_Lookup_where_pairing_bn256_arithmetic_fields_FieldExt_F_F_for_delphinus_zkwasm_circuits_jtable_JumpTableConfig_F.
        Definition Self (F : Ty.t) : Ty.t :=
          Ty.apply (Ty.path "delphinus_zkwasm::circuits::jtable::JumpTableConfig") [ F ].
        
        (*
            fn configure_in_table(
                &self,
                meta: &mut ConstraintSystem<F>,
                key: &'static str,
                expr: impl FnOnce(&mut VirtualCells<'_, F>) -> Expression<F>,
            ) {
                meta.lookup_any(key, |meta| {
                    vec![(expr(meta), self.entry(meta) * fixed_curr!(meta, self.sel))]
                });
            }
        *)
        Definition configure_in_table (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self F in
          match τ, α with
          | [ impl_FnOnce__mut_VirtualCells_'___F___arrow_Expression_F_ ],
              [ self; meta; key; expr ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              let meta := M.alloc (| meta |) in
              let key := M.alloc (| key |) in
              let expr := M.alloc (| expr |) in
              M.read (|
                let _ :=
                  M.alloc (|
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.apply (Ty.path "halo2_proofs::plonk::circuit::ConstraintSystem") [ F ],
                        "lookup_any",
                        [
                          Ty.function
                            [
                              Ty.tuple
                                [
                                  Ty.apply
                                    (Ty.path "&mut")
                                    [
                                      Ty.apply
                                        (Ty.path "halo2_proofs::plonk::circuit::VirtualCells")
                                        [ F ]
                                    ]
                                ]
                            ]
                            (Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              [
                                Ty.tuple
                                  [
                                    Ty.apply
                                      (Ty.path "halo2_proofs::plonk::circuit::Expression")
                                      [ F ];
                                    Ty.apply
                                      (Ty.path "halo2_proofs::plonk::circuit::Expression")
                                      [ F ]
                                  ];
                                Ty.path "alloc::alloc::Global"
                              ])
                        ]
                      |),
                      [
                        M.read (| meta |);
                        M.read (| key |);
                        M.closure
                          (fun γ =>
                            ltac:(M.monadic
                              match γ with
                              | [ α0 ] =>
                                M.match_operator (|
                                  M.alloc (| α0 |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let meta := M.copy (| γ |) in
                                        M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.apply
                                              (Ty.path "slice")
                                              [
                                                Ty.tuple
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "halo2_proofs::plonk::circuit::Expression")
                                                      [ F ];
                                                    Ty.apply
                                                      (Ty.path
                                                        "halo2_proofs::plonk::circuit::Expression")
                                                      [ F ]
                                                  ]
                                              ],
                                            "into_vec",
                                            [ Ty.path "alloc::alloc::Global" ]
                                          |),
                                          [
                                            (* Unsize *)
                                            M.pointer_coercion
                                              (M.read (|
                                                M.call_closure (|
                                                  M.get_associated_function (|
                                                    Ty.apply
                                                      (Ty.path "alloc::boxed::Box")
                                                      [
                                                        Ty.apply
                                                          (Ty.path "array")
                                                          [
                                                            Ty.tuple
                                                              [
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "halo2_proofs::plonk::circuit::Expression")
                                                                  [ F ];
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "halo2_proofs::plonk::circuit::Expression")
                                                                  [ F ]
                                                              ]
                                                          ];
                                                        Ty.path "alloc::alloc::Global"
                                                      ],
                                                    "new",
                                                    []
                                                  |),
                                                  [
                                                    M.alloc (|
                                                      Value.Array
                                                        [
                                                          Value.Tuple
                                                            [
                                                              M.call_closure (|
                                                                M.get_trait_method (|
                                                                  "core::ops::function::FnOnce",
                                                                  impl_FnOnce__mut_VirtualCells_'___F___arrow_Expression_F_,
                                                                  [
                                                                    Ty.tuple
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path "&mut")
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "halo2_proofs::plonk::circuit::VirtualCells")
                                                                              [ F ]
                                                                          ]
                                                                      ]
                                                                  ],
                                                                  "call_once",
                                                                  []
                                                                |),
                                                                [
                                                                  M.read (| expr |);
                                                                  Value.Tuple [ M.read (| meta |) ]
                                                                ]
                                                              |);
                                                              M.call_closure (|
                                                                M.get_trait_method (|
                                                                  "core::ops::arith::Mul",
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "halo2_proofs::plonk::circuit::Expression")
                                                                    [ F ],
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "halo2_proofs::plonk::circuit::Expression")
                                                                      [ F ]
                                                                  ],
                                                                  "mul",
                                                                  []
                                                                |),
                                                                [
                                                                  M.call_closure (|
                                                                    M.get_associated_function (|
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "delphinus_zkwasm::circuits::jtable::JumpTableConfig")
                                                                        [ F ],
                                                                      "entry",
                                                                      []
                                                                    |),
                                                                    [
                                                                      M.read (| self |);
                                                                      M.read (| meta |)
                                                                    ]
                                                                  |);
                                                                  M.call_closure (|
                                                                    M.get_associated_function (|
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "halo2_proofs::plonk::circuit::VirtualCells")
                                                                        [ F ],
                                                                      "query_fixed",
                                                                      []
                                                                    |),
                                                                    [
                                                                      M.read (| meta |);
                                                                      M.read (|
                                                                        M.SubPointer.get_struct_record_field (|
                                                                          M.read (| self |),
                                                                          "delphinus_zkwasm::circuits::jtable::JumpTableConfig",
                                                                          "sel"
                                                                        |)
                                                                      |);
                                                                      M.call_closure (|
                                                                        M.get_associated_function (|
                                                                          Ty.path
                                                                            "halo2_proofs::poly::Rotation",
                                                                          "cur",
                                                                          []
                                                                        |),
                                                                        []
                                                                      |)
                                                                    ]
                                                                  |)
                                                                ]
                                                              |)
                                                            ]
                                                        ]
                                                    |)
                                                  ]
                                                |)
                                              |))
                                          ]
                                        |)))
                                  ]
                                |)
                              | _ => M.impossible (||)
                              end))
                      ]
                    |)
                  |) in
                M.alloc (| Value.Tuple [] |)
              |)))
          | _, _ => M.impossible
          end.
        
        (*
            fn encode(&self, _meta: &mut VirtualCells<'_, F>) -> Expression<F> {
                unimplemented!()
            }
        *)
        Parameter encode : forall (F : Ty.t), (list Ty.t) -> (list Value.t) -> M.
        
        Axiom Implements :
          forall (F : Ty.t),
          M.IsTraitInstance
            "delphinus_zkwasm::circuits::Lookup"
            (Self F)
            (* Trait polymorphic types *) [ (* F *) F ]
            (* Instance *)
            [
              ("configure_in_table", InstanceField.Method (configure_in_table F));
              ("encode", InstanceField.Method (encode F))
            ].
      End Impl_delphinus_zkwasm_circuits_Lookup_where_pairing_bn256_arithmetic_fields_FieldExt_F_F_for_delphinus_zkwasm_circuits_jtable_JumpTableConfig_F.
      
      Module Impl_delphinus_zkwasm_circuits_jtable_JumpTableConfig_F.
        Definition Self (F : Ty.t) : Ty.t :=
          Ty.apply (Ty.path "delphinus_zkwasm::circuits::jtable::JumpTableConfig") [ F ].
        
        (*
            pub(super) fn new(
                meta: &mut ConstraintSystem<F>,
                cols: &mut impl Iterator<Item = Column<Advice>>,
            ) -> Self {
                let sel = meta.fixed_column();
                let static_bit = meta.fixed_column();
                let data = cols.next().unwrap();
        
                JumpTableConfig {
                    sel,
                    static_bit,
                    data,
                    _m: std::marker::PhantomData,
                }
            }
        *)
        Definition new (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self F in
          match τ, α with
          | [ impl_Iterator_Item___Column_Advice__ ], [ meta; cols ] =>
            ltac:(M.monadic
              (let meta := M.alloc (| meta |) in
              let cols := M.alloc (| cols |) in
              M.read (|
                let sel :=
                  M.alloc (|
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.apply (Ty.path "halo2_proofs::plonk::circuit::ConstraintSystem") [ F ],
                        "fixed_column",
                        []
                      |),
                      [ M.read (| meta |) ]
                    |)
                  |) in
                let static_bit :=
                  M.alloc (|
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.apply (Ty.path "halo2_proofs::plonk::circuit::ConstraintSystem") [ F ],
                        "fixed_column",
                        []
                      |),
                      [ M.read (| meta |) ]
                    |)
                  |) in
                let data :=
                  M.alloc (|
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path "core::option::Option")
                          [
                            Ty.apply
                              (Ty.path "halo2_proofs::plonk::circuit::Column")
                              [ Ty.path "halo2_proofs::plonk::circuit::Advice" ]
                          ],
                        "unwrap",
                        []
                      |),
                      [
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::iter::traits::iterator::Iterator",
                            impl_Iterator_Item___Column_Advice__,
                            [],
                            "next",
                            []
                          |),
                          [ M.read (| cols |) ]
                        |)
                      ]
                    |)
                  |) in
                M.alloc (|
                  Value.StructRecord
                    "delphinus_zkwasm::circuits::jtable::JumpTableConfig"
                    [
                      ("sel", M.read (| sel |));
                      ("static_bit", M.read (| static_bit |));
                      ("data", M.read (| data |));
                      ("_m", Value.StructTuple "core::marker::PhantomData" [])
                    ]
                |)
              |)))
          | _, _ => M.impossible
          end.
        
        Axiom AssociatedFunction_new :
          forall (F : Ty.t),
          M.IsAssociatedFunction (Self F) "new" (new F).
      End Impl_delphinus_zkwasm_circuits_jtable_JumpTableConfig_F.
    End configure.
  End jtable.
End circuits.
