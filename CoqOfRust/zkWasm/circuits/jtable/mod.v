(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module circuits.
  Module jtable.
    Definition value_STATIC_FRAME_ENTRY_IMAGE_TABLE_ENTRY : Value.t :=
      M.run
        ltac:(M.monadic
          (M.alloc (|
            BinOp.Panic.mul (|
              Integer.Usize,
              M.read (| M.get_constant (| "specs::jtable::STATIC_FRAME_ENTRY_NUMBER" |) |),
              Value.Integer 2
            |)
          |))).
    
    Definition value_JOPS_SEPARATE : Value.t :=
      M.run ltac:(M.monadic (M.alloc (| Value.Integer 128 |))).
    
    (*
    pub fn encode_jops(return_instructions: u32, call_instructions: u32) -> BigUint {
        return_instructions.to_biguint().unwrap() << JOPS_SEPARATE
            | call_instructions.to_biguint().unwrap()
    }
    *)
    Definition encode_jops (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [ return_instructions; call_instructions ] =>
        ltac:(M.monadic
          (let return_instructions := M.alloc (| return_instructions |) in
          let call_instructions := M.alloc (| call_instructions |) in
          M.call_closure (|
            M.get_trait_method (|
              "core::ops::bit::BitOr",
              Ty.path "num_bigint::biguint::BigUint",
              [ Ty.path "num_bigint::biguint::BigUint" ],
              "bitor",
              []
            |),
            [
              M.call_closure (|
                M.get_trait_method (|
                  "core::ops::bit::Shl",
                  Ty.path "num_bigint::biguint::BigUint",
                  [ Ty.path "usize" ],
                  "shl",
                  []
                |),
                [
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "core::option::Option")
                        [ Ty.path "num_bigint::biguint::BigUint" ],
                      "unwrap",
                      []
                    |),
                    [
                      M.call_closure (|
                        M.get_trait_method (|
                          "num_bigint::biguint::ToBigUint",
                          Ty.path "u32",
                          [],
                          "to_biguint",
                          []
                        |),
                        [ return_instructions ]
                      |)
                    ]
                  |);
                  M.read (|
                    M.get_constant (| "delphinus_zkwasm::circuits::jtable::JOPS_SEPARATE" |)
                  |)
                ]
              |);
              M.call_closure (|
                M.get_associated_function (|
                  Ty.apply
                    (Ty.path "core::option::Option")
                    [ Ty.path "num_bigint::biguint::BigUint" ],
                  "unwrap",
                  []
                |),
                [
                  M.call_closure (|
                    M.get_trait_method (|
                      "num_bigint::biguint::ToBigUint",
                      Ty.path "u32",
                      [],
                      "to_biguint",
                      []
                    |),
                    [ call_instructions ]
                  |)
                ]
              |)
            ]
          |)))
      | _, _ => M.impossible
      end.
    
    (*
    Enum JtableOffset
    {
      ty_params := [];
      variants :=
        [
          {
            name := "JtableOffsetEnable";
            item := StructTuple [];
            discriminant := Some 0;
          };
          {
            name := "JtableOffsetRest";
            item := StructTuple [];
            discriminant := Some 1;
          };
          {
            name := "JtableOffsetEntry";
            item := StructTuple [];
            discriminant := Some 2;
          };
          {
            name := "JtableOffsetMax";
            item := StructTuple [];
            discriminant := Some 3;
          }
        ];
    }
    *)
    
    (* StructRecord
      {
        name := "JumpTableConfig";
        ty_params := [ "F" ];
        fields :=
          [
            ("sel",
              Ty.apply
                (Ty.path "halo2_proofs::plonk::circuit::Column")
                [ Ty.path "halo2_proofs::plonk::circuit::Fixed" ]);
            ("static_bit",
              Ty.apply
                (Ty.path "halo2_proofs::plonk::circuit::Column")
                [ Ty.path "halo2_proofs::plonk::circuit::Fixed" ]);
            ("data",
              Ty.apply
                (Ty.path "halo2_proofs::plonk::circuit::Column")
                [ Ty.path "halo2_proofs::plonk::circuit::Advice" ]);
            ("_m", Ty.apply (Ty.path "core::marker::PhantomData") [ F ])
          ];
      } *)
    
    Module Impl_core_clone_Clone_where_core_clone_Clone_F_where_pairing_bn256_arithmetic_fields_FieldExt_F_for_delphinus_zkwasm_circuits_jtable_JumpTableConfig_F.
      Definition Self (F : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "delphinus_zkwasm::circuits::jtable::JumpTableConfig") [ F ].
      
      (* Clone *)
      Definition clone (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match τ, α with
        | [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            Value.StructRecord
              "delphinus_zkwasm::circuits::jtable::JumpTableConfig"
              [
                ("sel",
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.apply
                        (Ty.path "halo2_proofs::plonk::circuit::Column")
                        [ Ty.path "halo2_proofs::plonk::circuit::Fixed" ],
                      [],
                      "clone",
                      []
                    |),
                    [
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "delphinus_zkwasm::circuits::jtable::JumpTableConfig",
                        "sel"
                      |)
                    ]
                  |));
                ("static_bit",
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.apply
                        (Ty.path "halo2_proofs::plonk::circuit::Column")
                        [ Ty.path "halo2_proofs::plonk::circuit::Fixed" ],
                      [],
                      "clone",
                      []
                    |),
                    [
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "delphinus_zkwasm::circuits::jtable::JumpTableConfig",
                        "static_bit"
                      |)
                    ]
                  |));
                ("data",
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.apply
                        (Ty.path "halo2_proofs::plonk::circuit::Column")
                        [ Ty.path "halo2_proofs::plonk::circuit::Advice" ],
                      [],
                      "clone",
                      []
                    |),
                    [
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "delphinus_zkwasm::circuits::jtable::JumpTableConfig",
                        "data"
                      |)
                    ]
                  |));
                ("_m",
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.apply (Ty.path "core::marker::PhantomData") [ F ],
                      [],
                      "clone",
                      []
                    |),
                    [
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "delphinus_zkwasm::circuits::jtable::JumpTableConfig",
                        "_m"
                      |)
                    ]
                  |))
              ]))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        forall (F : Ty.t),
        M.IsTraitInstance
          "core::clone::Clone"
          (Self F)
          (* Trait polymorphic types *) []
          (* Instance *) [ ("clone", InstanceField.Method (clone F)) ].
    End Impl_core_clone_Clone_where_core_clone_Clone_F_where_pairing_bn256_arithmetic_fields_FieldExt_F_for_delphinus_zkwasm_circuits_jtable_JumpTableConfig_F.
    
    Module Impl_delphinus_zkwasm_circuits_jtable_JumpTableConfig_F.
      Definition Self (F : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "delphinus_zkwasm::circuits::jtable::JumpTableConfig") [ F ].
      
      (*
          pub fn configure(
              meta: &mut ConstraintSystem<F>,
              cols: &mut impl Iterator<Item = Column<Advice>>,
          ) -> Self {
              let jtable = Self::new(meta, cols);
              jtable.configure(meta);
              jtable
          }
      *)
      Definition configure (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match τ, α with
        | [ impl_Iterator_Item___Column_Advice__ ], [ meta; cols ] =>
          ltac:(M.monadic
            (let meta := M.alloc (| meta |) in
            let cols := M.alloc (| cols |) in
            M.read (|
              let jtable :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "delphinus_zkwasm::circuits::jtable::JumpTableConfig")
                        [ F ],
                      "new",
                      [ impl_Iterator_Item___Column_Advice__ ]
                    |),
                    [ M.read (| meta |); M.read (| cols |) ]
                  |)
                |) in
              let _ :=
                M.alloc (|
                  M.call_closure (|
                    M.get_trait_method (|
                      "delphinus_zkwasm::circuits::jtable::configure::JTableConstraint",
                      Ty.apply
                        (Ty.path "delphinus_zkwasm::circuits::jtable::JumpTableConfig")
                        [ F ],
                      [ F ],
                      "configure",
                      []
                    |),
                    [ jtable; M.read (| meta |) ]
                  |)
                |) in
              jtable
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom AssociatedFunction_configure :
        forall (F : Ty.t),
        M.IsAssociatedFunction (Self F) "configure" (configure F).
    End Impl_delphinus_zkwasm_circuits_jtable_JumpTableConfig_F.
    
    (* StructRecord
      {
        name := "JumpTableChip";
        ty_params := [ "F" ];
        fields :=
          [
            ("config",
              Ty.apply (Ty.path "delphinus_zkwasm::circuits::jtable::JumpTableConfig") [ F ]);
            ("max_available_rows", Ty.path "usize")
          ];
      } *)
    
    Module Impl_delphinus_zkwasm_circuits_jtable_JumpTableChip_F.
      Definition Self (F : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "delphinus_zkwasm::circuits::jtable::JumpTableChip") [ F ].
      
      (*
          pub fn new(config: JumpTableConfig<F>, max_available_rows: usize) -> Self {
              JumpTableChip {
                  config,
                  max_available_rows,
              }
          }
      *)
      Definition new (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match τ, α with
        | [], [ config; max_available_rows ] =>
          ltac:(M.monadic
            (let config := M.alloc (| config |) in
            let max_available_rows := M.alloc (| max_available_rows |) in
            Value.StructRecord
              "delphinus_zkwasm::circuits::jtable::JumpTableChip"
              [
                ("config", M.read (| config |));
                ("max_available_rows", M.read (| max_available_rows |))
              ]))
        | _, _ => M.impossible
        end.
      
      Axiom AssociatedFunction_new :
        forall (F : Ty.t),
        M.IsAssociatedFunction (Self F) "new" (new F).
    End Impl_delphinus_zkwasm_circuits_jtable_JumpTableChip_F.
  End jtable.
End circuits.
