(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module circuits.
  Axiom CompilationTable :
    (Ty.path "delphinus_zkwasm::circuits::CompilationTable") = (Ty.path "specs::CompilationTable").
  
  Axiom ExecutionTable :
    (Ty.path "delphinus_zkwasm::circuits::ExecutionTable") = (Ty.path "specs::ExecutionTable").
  
  (*
  pub(crate) fn compute_slice_capability(k: u32) -> u32 {
      ((1 << k) - RESERVE_ROWS as u32 - 1024) / EVENT_TABLE_ENTRY_ROWS as u32
  }
  *)
  Definition compute_slice_capability (τ : list Ty.t) (α : list Value.t) : M :=
    match τ, α with
    | [], [ k ] =>
      ltac:(M.monadic
        (let k := M.alloc (| k |) in
        BinOp.Panic.div (|
          Integer.U32,
          BinOp.Panic.sub (|
            Integer.U32,
            BinOp.Panic.sub (|
              Integer.U32,
              BinOp.Panic.shl (| Value.Integer 1, M.read (| k |) |),
              M.rust_cast
                (M.read (|
                  M.get_constant (| "delphinus_zkwasm::circuits::zkwasm_circuit::RESERVE_ROWS" |)
                |))
            |),
            Value.Integer 1024
          |),
          M.rust_cast
            (M.read (|
              M.get_constant (| "delphinus_zkwasm::circuits::etable::EVENT_TABLE_ENTRY_ROWS" |)
            |))
        |)))
    | _, _ => M.impossible
    end.
  
  (* StructRecord
    {
      name := "ZkWasmCircuit";
      ty_params := [ "F" ];
      fields :=
        [
          ("k", Ty.path "u32");
          ("slice", Ty.path "specs::slice::Slice");
          ("_data", Ty.apply (Ty.path "core::marker::PhantomData") [ F ])
        ];
    } *)
  
  Module Impl_delphinus_zkwasm_circuits_ZkWasmCircuit_F.
    Definition Self (F : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "delphinus_zkwasm::circuits::ZkWasmCircuit") [ F ].
    
    (*
        pub fn new(k: u32, slice: Slice) -> Result<Self, BuildingCircuitError> {
            {
                // entries is empty when called by without_witness
                let allocated_memory_pages = slice
                    .etable
                    .entries()
                    .last()
                    .map(|entry| entry.allocated_memory_pages);
                let maximal_pages = compute_maximal_pages(k);
                if let Some(allocated_memory_pages) = allocated_memory_pages {
                    if allocated_memory_pages > maximal_pages {
                        return Err(BuildingCircuitError::PagesExceedLimit(
                            allocated_memory_pages,
                            maximal_pages,
                            k,
                        ));
                    }
                }
            }
    
            {
                let etable_entires = slice.etable.entries().len() as u32;
                let etable_capacity = compute_slice_capability(k);
    
                if etable_entires > etable_capacity {
                    return Err(BuildingCircuitError::EtableEntriesExceedLimit(
                        etable_entires as u32,
                        etable_capacity as u32,
                        k,
                    ));
                }
            }
    
            Ok(ZkWasmCircuit {
                k,
                slice,
                _data: PhantomData,
            })
        }
    *)
    Definition new (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self F in
      match τ, α with
      | [], [ k; slice ] =>
        ltac:(M.monadic
          (let k := M.alloc (| k |) in
          let slice := M.alloc (| slice |) in
          M.catch_return (|
            ltac:(M.monadic
              (M.read (|
                let _ :=
                  let allocated_memory_pages :=
                    M.alloc (|
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.apply
                            (Ty.path "core::option::Option")
                            [ Ty.apply (Ty.path "&") [ Ty.path "specs::etable::EventTableEntry" ] ],
                          "map",
                          [
                            Ty.path "u32";
                            Ty.function
                              [
                                Ty.tuple
                                  [
                                    Ty.apply
                                      (Ty.path "&")
                                      [ Ty.path "specs::etable::EventTableEntry" ]
                                  ]
                              ]
                              (Ty.path "u32")
                          ]
                        |),
                        [
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.apply
                                (Ty.path "slice")
                                [ Ty.path "specs::etable::EventTableEntry" ],
                              "last",
                              []
                            |),
                            [
                              M.call_closure (|
                                M.get_trait_method (|
                                  "core::ops::deref::Deref",
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    [
                                      Ty.path "specs::etable::EventTableEntry";
                                      Ty.path "alloc::alloc::Global"
                                    ],
                                  [],
                                  "deref",
                                  []
                                |),
                                [
                                  M.call_closure (|
                                    M.get_associated_function (|
                                      Ty.path "specs::etable::EventTable",
                                      "entries",
                                      []
                                    |),
                                    [
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "core::ops::deref::Deref",
                                          Ty.apply
                                            (Ty.path "alloc::sync::Arc")
                                            [
                                              Ty.path "specs::etable::EventTable";
                                              Ty.path "alloc::alloc::Global"
                                            ],
                                          [],
                                          "deref",
                                          []
                                        |),
                                        [
                                          M.SubPointer.get_struct_record_field (|
                                            slice,
                                            "specs::slice::Slice",
                                            "etable"
                                          |)
                                        ]
                                      |)
                                    ]
                                  |)
                                ]
                              |)
                            ]
                          |);
                          M.closure
                            (fun γ =>
                              ltac:(M.monadic
                                match γ with
                                | [ α0 ] =>
                                  M.match_operator (|
                                    M.alloc (| α0 |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let entry := M.copy (| γ |) in
                                          M.read (|
                                            M.SubPointer.get_struct_record_field (|
                                              M.read (| entry |),
                                              "specs::etable::EventTableEntry",
                                              "allocated_memory_pages"
                                            |)
                                          |)))
                                    ]
                                  |)
                                | _ => M.impossible (||)
                                end))
                        ]
                      |)
                    |) in
                  let maximal_pages :=
                    M.alloc (|
                      M.call_closure (|
                        M.get_function (|
                          "delphinus_zkwasm::circuits::image_table::compute_maximal_pages",
                          []
                        |),
                        [ M.read (| k |) ]
                      |)
                    |) in
                  M.match_operator (|
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ := allocated_memory_pages in
                          let γ0_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "core::option::Option::Some",
                              0
                            |) in
                          let allocated_memory_pages := M.copy (| γ0_0 |) in
                          M.match_operator (|
                            M.alloc (| Value.Tuple [] |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ :=
                                    M.use
                                      (M.alloc (|
                                        BinOp.Pure.gt
                                          (M.read (| allocated_memory_pages |))
                                          (M.read (| maximal_pages |))
                                      |)) in
                                  let _ :=
                                    M.is_constant_or_break_match (|
                                      M.read (| γ |),
                                      Value.Bool true
                                    |) in
                                  M.alloc (|
                                    M.never_to_any (|
                                      M.read (|
                                        M.return_ (|
                                          Value.StructTuple
                                            "core::result::Result::Err"
                                            [
                                              Value.StructTuple
                                                "delphinus_zkwasm::error::BuildingCircuitError::PagesExceedLimit"
                                                [
                                                  M.read (| allocated_memory_pages |);
                                                  M.read (| maximal_pages |);
                                                  M.read (| k |)
                                                ]
                                            ]
                                        |)
                                      |)
                                    |)
                                  |)));
                              fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                            ]
                          |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                let _ :=
                  let etable_entires :=
                    M.alloc (|
                      M.rust_cast
                        (M.call_closure (|
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              [
                                Ty.path "specs::etable::EventTableEntry";
                                Ty.path "alloc::alloc::Global"
                              ],
                            "len",
                            []
                          |),
                          [
                            M.call_closure (|
                              M.get_associated_function (|
                                Ty.path "specs::etable::EventTable",
                                "entries",
                                []
                              |),
                              [
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "core::ops::deref::Deref",
                                    Ty.apply
                                      (Ty.path "alloc::sync::Arc")
                                      [
                                        Ty.path "specs::etable::EventTable";
                                        Ty.path "alloc::alloc::Global"
                                      ],
                                    [],
                                    "deref",
                                    []
                                  |),
                                  [
                                    M.SubPointer.get_struct_record_field (|
                                      slice,
                                      "specs::slice::Slice",
                                      "etable"
                                    |)
                                  ]
                                |)
                              ]
                            |)
                          ]
                        |))
                    |) in
                  let etable_capacity :=
                    M.alloc (|
                      M.call_closure (|
                        M.get_function (|
                          "delphinus_zkwasm::circuits::compute_slice_capability",
                          []
                        |),
                        [ M.read (| k |) ]
                      |)
                    |) in
                  M.match_operator (|
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                BinOp.Pure.gt
                                  (M.read (| etable_entires |))
                                  (M.read (| etable_capacity |))
                              |)) in
                          let _ :=
                            M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                M.return_ (|
                                  Value.StructTuple
                                    "core::result::Result::Err"
                                    [
                                      Value.StructTuple
                                        "delphinus_zkwasm::error::BuildingCircuitError::EtableEntriesExceedLimit"
                                        [
                                          M.read (| M.use etable_entires |);
                                          M.read (| M.use etable_capacity |);
                                          M.read (| k |)
                                        ]
                                    ]
                                |)
                              |)
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                M.alloc (|
                  Value.StructTuple
                    "core::result::Result::Ok"
                    [
                      Value.StructRecord
                        "delphinus_zkwasm::circuits::ZkWasmCircuit"
                        [
                          ("k", M.read (| k |));
                          ("slice", M.read (| slice |));
                          ("_data", Value.StructTuple "core::marker::PhantomData" [])
                        ]
                    ]
                |)
              |)))
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom AssociatedFunction_new : forall (F : Ty.t), M.IsAssociatedFunction (Self F) "new" (new F).
    
    (*
        pub fn mock_test(&self, instances: Vec<F>) -> anyhow::Result<()> {
            let prover = MockProver::run(self.k, self, vec![instances])?;
            assert_eq!(prover.verify(), Ok(()));
    
            Ok(())
        }
    *)
    Definition mock_test (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self F in
      match τ, α with
      | [], [ self; instances ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let instances := M.alloc (| instances |) in
          M.catch_return (|
            ltac:(M.monadic
              (M.read (|
                let prover :=
                  M.copy (|
                    M.match_operator (|
                      M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::ops::try_trait::Try",
                            Ty.apply
                              (Ty.path "core::result::Result")
                              [
                                Ty.apply (Ty.path "halo2_proofs::dev::MockVerifier") [ F ];
                                Ty.path "halo2_proofs::plonk::error::Error"
                              ],
                            [],
                            "branch",
                            []
                          |),
                          [
                            M.call_closure (|
                              M.get_associated_function (|
                                Ty.apply (Ty.path "halo2_proofs::dev::MockProver") [ F ],
                                "run",
                                [
                                  Ty.apply
                                    (Ty.path "delphinus_zkwasm::circuits::ZkWasmCircuit")
                                    [ F ]
                                ]
                              |),
                              [
                                M.read (|
                                  M.SubPointer.get_struct_record_field (|
                                    M.read (| self |),
                                    "delphinus_zkwasm::circuits::ZkWasmCircuit",
                                    "k"
                                  |)
                                |);
                                M.read (| self |);
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.apply
                                      (Ty.path "slice")
                                      [
                                        Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          [ F; Ty.path "alloc::alloc::Global" ]
                                      ],
                                    "into_vec",
                                    [ Ty.path "alloc::alloc::Global" ]
                                  |),
                                  [
                                    (* Unsize *)
                                    M.pointer_coercion
                                      (M.read (|
                                        M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.apply
                                              (Ty.path "alloc::boxed::Box")
                                              [
                                                Ty.apply
                                                  (Ty.path "array")
                                                  [
                                                    Ty.apply
                                                      (Ty.path "alloc::vec::Vec")
                                                      [ F; Ty.path "alloc::alloc::Global" ]
                                                  ];
                                                Ty.path "alloc::alloc::Global"
                                              ],
                                            "new",
                                            []
                                          |),
                                          [ M.alloc (| Value.Array [ M.read (| instances |) ] |) ]
                                        |)
                                      |))
                                  ]
                                |)
                              ]
                            |)
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Break",
                                0
                              |) in
                            let residual := M.copy (| γ0_0 |) in
                            M.alloc (|
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::ops::try_trait::FromResidual",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          [ Ty.tuple []; Ty.path "anyhow::Error" ],
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.path "halo2_proofs::plonk::error::Error"
                                            ]
                                        ],
                                        "from_residual",
                                        []
                                      |),
                                      [ M.read (| residual |) ]
                                    |)
                                  |)
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Continue",
                                0
                              |) in
                            let val := M.copy (| γ0_0 |) in
                            val))
                      ]
                    |)
                  |) in
                let _ :=
                  M.match_operator (|
                    M.alloc (|
                      Value.Tuple
                        [
                          M.alloc (|
                            M.call_closure (|
                              M.get_associated_function (|
                                Ty.apply (Ty.path "halo2_proofs::dev::MockVerifier") [ F ],
                                "verify",
                                []
                              |),
                              [ prover ]
                            |)
                          |);
                          M.alloc (|
                            Value.StructTuple "core::result::Result::Ok" [ Value.Tuple [] ]
                          |)
                        ]
                    |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                          let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                          let left_val := M.copy (| γ0_0 |) in
                          let right_val := M.copy (| γ0_1 |) in
                          M.match_operator (|
                            M.alloc (| Value.Tuple [] |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ :=
                                    M.use
                                      (M.alloc (|
                                        UnOp.Pure.not
                                          (M.call_closure (|
                                            M.get_trait_method (|
                                              "core::cmp::PartialEq",
                                              Ty.apply
                                                (Ty.path "core::result::Result")
                                                [
                                                  Ty.tuple [];
                                                  Ty.apply
                                                    (Ty.path "alloc::vec::Vec")
                                                    [
                                                      Ty.path "halo2_proofs::dev::VerifyFailure";
                                                      Ty.path "alloc::alloc::Global"
                                                    ]
                                                ],
                                              [
                                                Ty.apply
                                                  (Ty.path "core::result::Result")
                                                  [
                                                    Ty.tuple [];
                                                    Ty.apply
                                                      (Ty.path "alloc::vec::Vec")
                                                      [
                                                        Ty.path "halo2_proofs::dev::VerifyFailure";
                                                        Ty.path "alloc::alloc::Global"
                                                      ]
                                                  ]
                                              ],
                                              "eq",
                                              []
                                            |),
                                            [ M.read (| left_val |); M.read (| right_val |) ]
                                          |))
                                      |)) in
                                  let _ :=
                                    M.is_constant_or_break_match (|
                                      M.read (| γ |),
                                      Value.Bool true
                                    |) in
                                  M.alloc (|
                                    M.never_to_any (|
                                      M.read (|
                                        let kind :=
                                          M.alloc (|
                                            Value.StructTuple "core::panicking::AssertKind::Eq" []
                                          |) in
                                        M.alloc (|
                                          M.call_closure (|
                                            M.get_function (|
                                              "core::panicking::assert_failed",
                                              [
                                                Ty.apply
                                                  (Ty.path "core::result::Result")
                                                  [
                                                    Ty.tuple [];
                                                    Ty.apply
                                                      (Ty.path "alloc::vec::Vec")
                                                      [
                                                        Ty.path "halo2_proofs::dev::VerifyFailure";
                                                        Ty.path "alloc::alloc::Global"
                                                      ]
                                                  ];
                                                Ty.apply
                                                  (Ty.path "core::result::Result")
                                                  [
                                                    Ty.tuple [];
                                                    Ty.apply
                                                      (Ty.path "alloc::vec::Vec")
                                                      [
                                                        Ty.path "halo2_proofs::dev::VerifyFailure";
                                                        Ty.path "alloc::alloc::Global"
                                                      ]
                                                  ]
                                              ]
                                            |),
                                            [
                                              M.read (| kind |);
                                              M.read (| left_val |);
                                              M.read (| right_val |);
                                              Value.StructTuple "core::option::Option::None" []
                                            ]
                                          |)
                                        |)
                                      |)
                                    |)
                                  |)));
                              fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                            ]
                          |)))
                    ]
                  |) in
                M.alloc (| Value.StructTuple "core::result::Result::Ok" [ Value.Tuple [] ] |)
              |)))
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom AssociatedFunction_mock_test :
      forall (F : Ty.t),
      M.IsAssociatedFunction (Self F) "mock_test" (mock_test F).
  End Impl_delphinus_zkwasm_circuits_ZkWasmCircuit_F.
  
  (* Trait *)
  (* Empty module 'Encode' *)
  
  (* Trait *)
  Module Lookup.
    Definition configure_in_table (F Self : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [ impl_FnOnce__mut_VirtualCells_'___F___arrow_Expression_F_ ], [ self; meta; key; expr ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let meta := M.alloc (| meta |) in
          let key := M.alloc (| key |) in
          let expr := M.alloc (| expr |) in
          M.read (|
            let _ :=
              M.alloc (|
                M.call_closure (|
                  M.get_associated_function (|
                    Ty.apply (Ty.path "halo2_proofs::plonk::circuit::ConstraintSystem") [ F ],
                    "lookup_any",
                    [
                      Ty.function
                        [
                          Ty.tuple
                            [
                              Ty.apply
                                (Ty.path "&mut")
                                [
                                  Ty.apply
                                    (Ty.path "halo2_proofs::plonk::circuit::VirtualCells")
                                    [ F ]
                                ]
                            ]
                        ]
                        (Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          [
                            Ty.tuple
                              [
                                Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ];
                                Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ]
                              ];
                            Ty.path "alloc::alloc::Global"
                          ])
                    ]
                  |),
                  [
                    M.read (| meta |);
                    M.read (| key |);
                    M.closure
                      (fun γ =>
                        ltac:(M.monadic
                          match γ with
                          | [ α0 ] =>
                            M.match_operator (|
                              M.alloc (| α0 |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let meta := M.copy (| γ |) in
                                    M.call_closure (|
                                      M.get_associated_function (|
                                        Ty.apply
                                          (Ty.path "slice")
                                          [
                                            Ty.tuple
                                              [
                                                Ty.apply
                                                  (Ty.path
                                                    "halo2_proofs::plonk::circuit::Expression")
                                                  [ F ];
                                                Ty.apply
                                                  (Ty.path
                                                    "halo2_proofs::plonk::circuit::Expression")
                                                  [ F ]
                                              ]
                                          ],
                                        "into_vec",
                                        [ Ty.path "alloc::alloc::Global" ]
                                      |),
                                      [
                                        (* Unsize *)
                                        M.pointer_coercion
                                          (M.read (|
                                            M.call_closure (|
                                              M.get_associated_function (|
                                                Ty.apply
                                                  (Ty.path "alloc::boxed::Box")
                                                  [
                                                    Ty.apply
                                                      (Ty.path "array")
                                                      [
                                                        Ty.tuple
                                                          [
                                                            Ty.apply
                                                              (Ty.path
                                                                "halo2_proofs::plonk::circuit::Expression")
                                                              [ F ];
                                                            Ty.apply
                                                              (Ty.path
                                                                "halo2_proofs::plonk::circuit::Expression")
                                                              [ F ]
                                                          ]
                                                      ];
                                                    Ty.path "alloc::alloc::Global"
                                                  ],
                                                "new",
                                                []
                                              |),
                                              [
                                                M.alloc (|
                                                  Value.Array
                                                    [
                                                      Value.Tuple
                                                        [
                                                          M.call_closure (|
                                                            M.get_trait_method (|
                                                              "core::ops::function::FnOnce",
                                                              impl_FnOnce__mut_VirtualCells_'___F___arrow_Expression_F_,
                                                              [
                                                                Ty.tuple
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path "&mut")
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "halo2_proofs::plonk::circuit::VirtualCells")
                                                                          [ F ]
                                                                      ]
                                                                  ]
                                                              ],
                                                              "call_once",
                                                              []
                                                            |),
                                                            [
                                                              M.read (| expr |);
                                                              Value.Tuple [ M.read (| meta |) ]
                                                            ]
                                                          |);
                                                          M.call_closure (|
                                                            M.get_trait_method (|
                                                              "delphinus_zkwasm::circuits::Lookup",
                                                              Self,
                                                              [ F ],
                                                              "encode",
                                                              []
                                                            |),
                                                            [ M.read (| self |); M.read (| meta |) ]
                                                          |)
                                                        ]
                                                    ]
                                                |)
                                              ]
                                            |)
                                          |))
                                      ]
                                    |)))
                              ]
                            |)
                          | _ => M.impossible (||)
                          end))
                  ]
                |)
              |) in
            M.alloc (| Value.Tuple [] |)
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom ProvidedMethod_configure_in_table :
      forall (F : Ty.t),
      M.IsProvidedMethod
        "delphinus_zkwasm::circuits::Lookup"
        "configure_in_table"
        (configure_in_table F).
  End Lookup.
End circuits.
