(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module circuits.
  Module mtable.
    Module allocator.
      (* Trait *)
      (* Empty module 'MemoryTableCellExpression' *)
      
      Module Impl_delphinus_zkwasm_circuits_mtable_allocator_MemoryTableCellExpression_where_pairing_bn256_arithmetic_fields_FieldExt_F_F_for_delphinus_zkwasm_circuits_cell_AllocatedCell_F.
        Definition Self (F : Ty.t) : Ty.t :=
          Ty.apply (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedCell") [ F ].
        
        (*
            fn next_expr(&self, meta: &mut VirtualCells<'_, F>) -> Expression<F> {
                nextn!(meta, self.col, self.rot + MEMORY_TABLE_ENTRY_ROWS as i32)
            }
        *)
        Definition next_expr (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self F in
          match τ, α with
          | [], [ self; meta ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              let meta := M.alloc (| meta |) in
              M.call_closure (|
                M.get_associated_function (|
                  Ty.apply (Ty.path "halo2_proofs::plonk::circuit::VirtualCells") [ F ],
                  "query_advice",
                  []
                |),
                [
                  M.read (| meta |);
                  M.read (|
                    M.SubPointer.get_struct_record_field (|
                      M.read (| self |),
                      "delphinus_zkwasm::circuits::cell::AllocatedCell",
                      "col"
                    |)
                  |);
                  Value.StructTuple
                    "halo2_proofs::poly::Rotation"
                    [
                      BinOp.Panic.add (|
                        Integer.I32,
                        M.read (|
                          M.SubPointer.get_struct_record_field (|
                            M.read (| self |),
                            "delphinus_zkwasm::circuits::cell::AllocatedCell",
                            "rot"
                          |)
                        |),
                        M.read (|
                          M.use
                            (M.get_constant (|
                              "delphinus_zkwasm::circuits::mtable::MEMORY_TABLE_ENTRY_ROWS"
                            |))
                        |)
                      |)
                    ]
                ]
              |)))
          | _, _ => M.impossible
          end.
        
        (*
            fn prev_expr(&self, meta: &mut VirtualCells<'_, F>) -> Expression<F> {
                nextn!(meta, self.col, self.rot - MEMORY_TABLE_ENTRY_ROWS as i32)
            }
        *)
        Definition prev_expr (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self F in
          match τ, α with
          | [], [ self; meta ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              let meta := M.alloc (| meta |) in
              M.call_closure (|
                M.get_associated_function (|
                  Ty.apply (Ty.path "halo2_proofs::plonk::circuit::VirtualCells") [ F ],
                  "query_advice",
                  []
                |),
                [
                  M.read (| meta |);
                  M.read (|
                    M.SubPointer.get_struct_record_field (|
                      M.read (| self |),
                      "delphinus_zkwasm::circuits::cell::AllocatedCell",
                      "col"
                    |)
                  |);
                  Value.StructTuple
                    "halo2_proofs::poly::Rotation"
                    [
                      BinOp.Panic.sub (|
                        Integer.I32,
                        M.read (|
                          M.SubPointer.get_struct_record_field (|
                            M.read (| self |),
                            "delphinus_zkwasm::circuits::cell::AllocatedCell",
                            "rot"
                          |)
                        |),
                        M.read (|
                          M.use
                            (M.get_constant (|
                              "delphinus_zkwasm::circuits::mtable::MEMORY_TABLE_ENTRY_ROWS"
                            |))
                        |)
                      |)
                    ]
                ]
              |)))
          | _, _ => M.impossible
          end.
        
        Axiom Implements :
          forall (F : Ty.t),
          M.IsTraitInstance
            "delphinus_zkwasm::circuits::mtable::allocator::MemoryTableCellExpression"
            (Self F)
            (* Trait polymorphic types *) [ (* F *) F ]
            (* Instance *)
            [
              ("next_expr", InstanceField.Method (next_expr F));
              ("prev_expr", InstanceField.Method (prev_expr F))
            ].
      End Impl_delphinus_zkwasm_circuits_mtable_allocator_MemoryTableCellExpression_where_pairing_bn256_arithmetic_fields_FieldExt_F_F_for_delphinus_zkwasm_circuits_cell_AllocatedCell_F.
      
      Module Impl_delphinus_zkwasm_circuits_mtable_allocator_MemoryTableCellExpression_where_pairing_bn256_arithmetic_fields_FieldExt_F_F_for_delphinus_zkwasm_circuits_cell_AllocatedBitCell_F.
        Definition Self (F : Ty.t) : Ty.t :=
          Ty.apply (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedBitCell") [ F ].
        
        (*
                    fn next_expr(&self, meta: &mut VirtualCells<'_, F>) -> Expression<F> {
                        self.cell.next_expr(meta)
                    }
        *)
        Definition next_expr (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self F in
          match τ, α with
          | [], [ self; meta ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              let meta := M.alloc (| meta |) in
              M.call_closure (|
                M.get_trait_method (|
                  "delphinus_zkwasm::circuits::mtable::allocator::MemoryTableCellExpression",
                  Ty.apply (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedCell") [ F ],
                  [ F ],
                  "next_expr",
                  []
                |),
                [
                  M.SubPointer.get_struct_record_field (|
                    M.read (| self |),
                    "delphinus_zkwasm::circuits::cell::AllocatedBitCell",
                    "cell"
                  |);
                  M.read (| meta |)
                ]
              |)))
          | _, _ => M.impossible
          end.
        
        (*
                    fn prev_expr(&self, meta: &mut VirtualCells<'_, F>) -> Expression<F> {
                        self.cell.prev_expr(meta)
                    }
        *)
        Definition prev_expr (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self F in
          match τ, α with
          | [], [ self; meta ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              let meta := M.alloc (| meta |) in
              M.call_closure (|
                M.get_trait_method (|
                  "delphinus_zkwasm::circuits::mtable::allocator::MemoryTableCellExpression",
                  Ty.apply (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedCell") [ F ],
                  [ F ],
                  "prev_expr",
                  []
                |),
                [
                  M.SubPointer.get_struct_record_field (|
                    M.read (| self |),
                    "delphinus_zkwasm::circuits::cell::AllocatedBitCell",
                    "cell"
                  |);
                  M.read (| meta |)
                ]
              |)))
          | _, _ => M.impossible
          end.
        
        Axiom Implements :
          forall (F : Ty.t),
          M.IsTraitInstance
            "delphinus_zkwasm::circuits::mtable::allocator::MemoryTableCellExpression"
            (Self F)
            (* Trait polymorphic types *) [ (* F *) F ]
            (* Instance *)
            [
              ("next_expr", InstanceField.Method (next_expr F));
              ("prev_expr", InstanceField.Method (prev_expr F))
            ].
      End Impl_delphinus_zkwasm_circuits_mtable_allocator_MemoryTableCellExpression_where_pairing_bn256_arithmetic_fields_FieldExt_F_F_for_delphinus_zkwasm_circuits_cell_AllocatedBitCell_F.
      
      Module Impl_delphinus_zkwasm_circuits_mtable_allocator_MemoryTableCellExpression_where_pairing_bn256_arithmetic_fields_FieldExt_F_F_for_delphinus_zkwasm_circuits_cell_AllocatedCommonRangeCell_F.
        Definition Self (F : Ty.t) : Ty.t :=
          Ty.apply (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedCommonRangeCell") [ F ].
        
        (*
                    fn next_expr(&self, meta: &mut VirtualCells<'_, F>) -> Expression<F> {
                        self.cell.next_expr(meta)
                    }
        *)
        Definition next_expr (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self F in
          match τ, α with
          | [], [ self; meta ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              let meta := M.alloc (| meta |) in
              M.call_closure (|
                M.get_trait_method (|
                  "delphinus_zkwasm::circuits::mtable::allocator::MemoryTableCellExpression",
                  Ty.apply (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedCell") [ F ],
                  [ F ],
                  "next_expr",
                  []
                |),
                [
                  M.SubPointer.get_struct_record_field (|
                    M.read (| self |),
                    "delphinus_zkwasm::circuits::cell::AllocatedCommonRangeCell",
                    "cell"
                  |);
                  M.read (| meta |)
                ]
              |)))
          | _, _ => M.impossible
          end.
        
        (*
                    fn prev_expr(&self, meta: &mut VirtualCells<'_, F>) -> Expression<F> {
                        self.cell.prev_expr(meta)
                    }
        *)
        Definition prev_expr (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self F in
          match τ, α with
          | [], [ self; meta ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              let meta := M.alloc (| meta |) in
              M.call_closure (|
                M.get_trait_method (|
                  "delphinus_zkwasm::circuits::mtable::allocator::MemoryTableCellExpression",
                  Ty.apply (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedCell") [ F ],
                  [ F ],
                  "prev_expr",
                  []
                |),
                [
                  M.SubPointer.get_struct_record_field (|
                    M.read (| self |),
                    "delphinus_zkwasm::circuits::cell::AllocatedCommonRangeCell",
                    "cell"
                  |);
                  M.read (| meta |)
                ]
              |)))
          | _, _ => M.impossible
          end.
        
        Axiom Implements :
          forall (F : Ty.t),
          M.IsTraitInstance
            "delphinus_zkwasm::circuits::mtable::allocator::MemoryTableCellExpression"
            (Self F)
            (* Trait polymorphic types *) [ (* F *) F ]
            (* Instance *)
            [
              ("next_expr", InstanceField.Method (next_expr F));
              ("prev_expr", InstanceField.Method (prev_expr F))
            ].
      End Impl_delphinus_zkwasm_circuits_mtable_allocator_MemoryTableCellExpression_where_pairing_bn256_arithmetic_fields_FieldExt_F_F_for_delphinus_zkwasm_circuits_cell_AllocatedCommonRangeCell_F.
      
      Module Impl_delphinus_zkwasm_circuits_mtable_allocator_MemoryTableCellExpression_where_pairing_bn256_arithmetic_fields_FieldExt_F_F_for_delphinus_zkwasm_circuits_cell_AllocatedU16Cell_F.
        Definition Self (F : Ty.t) : Ty.t :=
          Ty.apply (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedU16Cell") [ F ].
        
        (*
                    fn next_expr(&self, meta: &mut VirtualCells<'_, F>) -> Expression<F> {
                        self.cell.next_expr(meta)
                    }
        *)
        Definition next_expr (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self F in
          match τ, α with
          | [], [ self; meta ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              let meta := M.alloc (| meta |) in
              M.call_closure (|
                M.get_trait_method (|
                  "delphinus_zkwasm::circuits::mtable::allocator::MemoryTableCellExpression",
                  Ty.apply (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedCell") [ F ],
                  [ F ],
                  "next_expr",
                  []
                |),
                [
                  M.SubPointer.get_struct_record_field (|
                    M.read (| self |),
                    "delphinus_zkwasm::circuits::cell::AllocatedU16Cell",
                    "cell"
                  |);
                  M.read (| meta |)
                ]
              |)))
          | _, _ => M.impossible
          end.
        
        (*
                    fn prev_expr(&self, meta: &mut VirtualCells<'_, F>) -> Expression<F> {
                        self.cell.prev_expr(meta)
                    }
        *)
        Definition prev_expr (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self F in
          match τ, α with
          | [], [ self; meta ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              let meta := M.alloc (| meta |) in
              M.call_closure (|
                M.get_trait_method (|
                  "delphinus_zkwasm::circuits::mtable::allocator::MemoryTableCellExpression",
                  Ty.apply (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedCell") [ F ],
                  [ F ],
                  "prev_expr",
                  []
                |),
                [
                  M.SubPointer.get_struct_record_field (|
                    M.read (| self |),
                    "delphinus_zkwasm::circuits::cell::AllocatedU16Cell",
                    "cell"
                  |);
                  M.read (| meta |)
                ]
              |)))
          | _, _ => M.impossible
          end.
        
        Axiom Implements :
          forall (F : Ty.t),
          M.IsTraitInstance
            "delphinus_zkwasm::circuits::mtable::allocator::MemoryTableCellExpression"
            (Self F)
            (* Trait polymorphic types *) [ (* F *) F ]
            (* Instance *)
            [
              ("next_expr", InstanceField.Method (next_expr F));
              ("prev_expr", InstanceField.Method (prev_expr F))
            ].
      End Impl_delphinus_zkwasm_circuits_mtable_allocator_MemoryTableCellExpression_where_pairing_bn256_arithmetic_fields_FieldExt_F_F_for_delphinus_zkwasm_circuits_cell_AllocatedU16Cell_F.
      
      Module Impl_delphinus_zkwasm_circuits_mtable_allocator_MemoryTableCellExpression_where_pairing_bn256_arithmetic_fields_FieldExt_F_F_for_delphinus_zkwasm_circuits_cell_AllocatedUnlimitedCell_F.
        Definition Self (F : Ty.t) : Ty.t :=
          Ty.apply (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedUnlimitedCell") [ F ].
        
        (*
                    fn next_expr(&self, meta: &mut VirtualCells<'_, F>) -> Expression<F> {
                        self.cell.next_expr(meta)
                    }
        *)
        Definition next_expr (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self F in
          match τ, α with
          | [], [ self; meta ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              let meta := M.alloc (| meta |) in
              M.call_closure (|
                M.get_trait_method (|
                  "delphinus_zkwasm::circuits::mtable::allocator::MemoryTableCellExpression",
                  Ty.apply (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedCell") [ F ],
                  [ F ],
                  "next_expr",
                  []
                |),
                [
                  M.SubPointer.get_struct_record_field (|
                    M.read (| self |),
                    "delphinus_zkwasm::circuits::cell::AllocatedUnlimitedCell",
                    "cell"
                  |);
                  M.read (| meta |)
                ]
              |)))
          | _, _ => M.impossible
          end.
        
        (*
                    fn prev_expr(&self, meta: &mut VirtualCells<'_, F>) -> Expression<F> {
                        self.cell.prev_expr(meta)
                    }
        *)
        Definition prev_expr (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self F in
          match τ, α with
          | [], [ self; meta ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              let meta := M.alloc (| meta |) in
              M.call_closure (|
                M.get_trait_method (|
                  "delphinus_zkwasm::circuits::mtable::allocator::MemoryTableCellExpression",
                  Ty.apply (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedCell") [ F ],
                  [ F ],
                  "prev_expr",
                  []
                |),
                [
                  M.SubPointer.get_struct_record_field (|
                    M.read (| self |),
                    "delphinus_zkwasm::circuits::cell::AllocatedUnlimitedCell",
                    "cell"
                  |);
                  M.read (| meta |)
                ]
              |)))
          | _, _ => M.impossible
          end.
        
        Axiom Implements :
          forall (F : Ty.t),
          M.IsTraitInstance
            "delphinus_zkwasm::circuits::mtable::allocator::MemoryTableCellExpression"
            (Self F)
            (* Trait polymorphic types *) [ (* F *) F ]
            (* Instance *)
            [
              ("next_expr", InstanceField.Method (next_expr F));
              ("prev_expr", InstanceField.Method (prev_expr F))
            ].
      End Impl_delphinus_zkwasm_circuits_mtable_allocator_MemoryTableCellExpression_where_pairing_bn256_arithmetic_fields_FieldExt_F_F_for_delphinus_zkwasm_circuits_cell_AllocatedUnlimitedCell_F.
      
      Module Impl_delphinus_zkwasm_circuits_mtable_allocator_MemoryTableCellExpression_where_pairing_bn256_arithmetic_fields_FieldExt_F_F_for_delphinus_zkwasm_circuits_cell_AllocatedU32Cell_F.
        Definition Self (F : Ty.t) : Ty.t :=
          Ty.apply (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedU32Cell") [ F ].
        
        (*
            fn next_expr(&self, meta: &mut VirtualCells<'_, F>) -> Expression<F> {
                self.u16_cells_le[0].next_expr(meta)
                    + (self.u16_cells_le[1].next_expr(meta) * constant_from!(1 << 16))
            }
        *)
        Definition next_expr (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self F in
          match τ, α with
          | [], [ self; meta ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              let meta := M.alloc (| meta |) in
              M.call_closure (|
                M.get_trait_method (|
                  "core::ops::arith::Add",
                  Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ],
                  [ Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ] ],
                  "add",
                  []
                |),
                [
                  M.call_closure (|
                    M.get_trait_method (|
                      "delphinus_zkwasm::circuits::mtable::allocator::MemoryTableCellExpression",
                      Ty.apply (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedU16Cell") [ F ],
                      [ F ],
                      "next_expr",
                      []
                    |),
                    [
                      M.SubPointer.get_array_field (|
                        M.SubPointer.get_struct_record_field (|
                          M.read (| self |),
                          "delphinus_zkwasm::circuits::cell::AllocatedU32Cell",
                          "u16_cells_le"
                        |),
                        M.alloc (| Value.Integer 0 |)
                      |);
                      M.read (| meta |)
                    ]
                  |);
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::ops::arith::Mul",
                      Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ],
                      [ Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ] ],
                      "mul",
                      []
                    |),
                    [
                      M.call_closure (|
                        M.get_trait_method (|
                          "delphinus_zkwasm::circuits::mtable::allocator::MemoryTableCellExpression",
                          Ty.apply
                            (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedU16Cell")
                            [ F ],
                          [ F ],
                          "next_expr",
                          []
                        |),
                        [
                          M.SubPointer.get_array_field (|
                            M.SubPointer.get_struct_record_field (|
                              M.read (| self |),
                              "delphinus_zkwasm::circuits::cell::AllocatedU32Cell",
                              "u16_cells_le"
                            |),
                            M.alloc (| Value.Integer 1 |)
                          |);
                          M.read (| meta |)
                        ]
                      |);
                      Value.StructTuple
                        "halo2_proofs::plonk::circuit::Expression::Constant"
                        [
                          M.call_closure (|
                            M.get_trait_method (|
                              "core::convert::From",
                              F,
                              [ Ty.path "u64" ],
                              "from",
                              []
                            |),
                            [ M.rust_cast (BinOp.Panic.shl (| Value.Integer 1, Value.Integer 16 |))
                            ]
                          |)
                        ]
                    ]
                  |)
                ]
              |)))
          | _, _ => M.impossible
          end.
        
        (*
            fn prev_expr(&self, _meta: &mut VirtualCells<'_, F>) -> Expression<F> {
                unimplemented!()
            }
        *)
        Parameter prev_expr : forall (F : Ty.t), (list Ty.t) -> (list Value.t) -> M.
        
        Axiom Implements :
          forall (F : Ty.t),
          M.IsTraitInstance
            "delphinus_zkwasm::circuits::mtable::allocator::MemoryTableCellExpression"
            (Self F)
            (* Trait polymorphic types *) [ (* F *) F ]
            (* Instance *)
            [
              ("next_expr", InstanceField.Method (next_expr F));
              ("prev_expr", InstanceField.Method (prev_expr F))
            ].
      End Impl_delphinus_zkwasm_circuits_mtable_allocator_MemoryTableCellExpression_where_pairing_bn256_arithmetic_fields_FieldExt_F_F_for_delphinus_zkwasm_circuits_cell_AllocatedU32Cell_F.
      
      (*
      Enum MemoryTableCellType
      {
        ty_params := [];
        variants :=
          [
            {
              name := "Bit";
              item := StructTuple [];
              discriminant := Some 1;
            };
            {
              name := "U16";
              item := StructTuple [];
              discriminant := None;
            };
            {
              name := "CommonRange";
              item := StructTuple [];
              discriminant := None;
            };
            {
              name := "Unlimited";
              item := StructTuple [];
              discriminant := None;
            }
          ];
      }
      *)
      
      Module Impl_core_fmt_Debug_for_delphinus_zkwasm_circuits_mtable_allocator_MemoryTableCellType.
        Definition Self : Ty.t :=
          Ty.path "delphinus_zkwasm::circuits::mtable::allocator::MemoryTableCellType".
        
        (* Debug *)
        Definition fmt (τ : list Ty.t) (α : list Value.t) : M :=
          match τ, α with
          | [], [ self; f ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              let f := M.alloc (| f |) in
              M.call_closure (|
                M.get_associated_function (| Ty.path "core::fmt::Formatter", "write_str", [] |),
                [
                  M.read (| f |);
                  M.read (|
                    M.match_operator (|
                      self,
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ := M.read (| γ |) in
                            M.alloc (| M.read (| Value.String "Bit" |) |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ := M.read (| γ |) in
                            M.alloc (| M.read (| Value.String "U16" |) |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ := M.read (| γ |) in
                            M.alloc (| M.read (| Value.String "CommonRange" |) |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ := M.read (| γ |) in
                            M.alloc (| M.read (| Value.String "Unlimited" |) |)))
                      ]
                    |)
                  |)
                ]
              |)))
          | _, _ => M.impossible
          end.
        
        Axiom Implements :
          M.IsTraitInstance
            "core::fmt::Debug"
            Self
            (* Trait polymorphic types *) []
            (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
      End Impl_core_fmt_Debug_for_delphinus_zkwasm_circuits_mtable_allocator_MemoryTableCellType.
      
      Module Impl_core_clone_Clone_for_delphinus_zkwasm_circuits_mtable_allocator_MemoryTableCellType.
        Definition Self : Ty.t :=
          Ty.path "delphinus_zkwasm::circuits::mtable::allocator::MemoryTableCellType".
        
        (* Clone *)
        Definition clone (τ : list Ty.t) (α : list Value.t) : M :=
          match τ, α with
          | [], [ self ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              M.read (| M.read (| self |) |)))
          | _, _ => M.impossible
          end.
        
        Axiom Implements :
          M.IsTraitInstance
            "core::clone::Clone"
            Self
            (* Trait polymorphic types *) []
            (* Instance *) [ ("clone", InstanceField.Method clone) ].
      End Impl_core_clone_Clone_for_delphinus_zkwasm_circuits_mtable_allocator_MemoryTableCellType.
      
      Module Impl_core_marker_Copy_for_delphinus_zkwasm_circuits_mtable_allocator_MemoryTableCellType.
        Definition Self : Ty.t :=
          Ty.path "delphinus_zkwasm::circuits::mtable::allocator::MemoryTableCellType".
        
        Axiom Implements :
          M.IsTraitInstance
            "core::marker::Copy"
            Self
            (* Trait polymorphic types *) []
            (* Instance *) [].
      End Impl_core_marker_Copy_for_delphinus_zkwasm_circuits_mtable_allocator_MemoryTableCellType.
      
      Module Impl_core_marker_StructuralPartialEq_for_delphinus_zkwasm_circuits_mtable_allocator_MemoryTableCellType.
        Definition Self : Ty.t :=
          Ty.path "delphinus_zkwasm::circuits::mtable::allocator::MemoryTableCellType".
        
        Axiom Implements :
          M.IsTraitInstance
            "core::marker::StructuralPartialEq"
            Self
            (* Trait polymorphic types *) []
            (* Instance *) [].
      End Impl_core_marker_StructuralPartialEq_for_delphinus_zkwasm_circuits_mtable_allocator_MemoryTableCellType.
      
      Module Impl_core_cmp_PartialEq_for_delphinus_zkwasm_circuits_mtable_allocator_MemoryTableCellType.
        Definition Self : Ty.t :=
          Ty.path "delphinus_zkwasm::circuits::mtable::allocator::MemoryTableCellType".
        
        (* PartialEq *)
        Definition eq (τ : list Ty.t) (α : list Value.t) : M :=
          match τ, α with
          | [], [ self; other ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              let other := M.alloc (| other |) in
              M.read (|
                let __self_tag :=
                  M.alloc (|
                    M.call_closure (|
                      M.get_function (|
                        "core::intrinsics::discriminant_value",
                        [
                          Ty.path
                            "delphinus_zkwasm::circuits::mtable::allocator::MemoryTableCellType"
                        ]
                      |),
                      [ M.read (| self |) ]
                    |)
                  |) in
                let __arg1_tag :=
                  M.alloc (|
                    M.call_closure (|
                      M.get_function (|
                        "core::intrinsics::discriminant_value",
                        [
                          Ty.path
                            "delphinus_zkwasm::circuits::mtable::allocator::MemoryTableCellType"
                        ]
                      |),
                      [ M.read (| other |) ]
                    |)
                  |) in
                M.alloc (| BinOp.Pure.eq (M.read (| __self_tag |)) (M.read (| __arg1_tag |)) |)
              |)))
          | _, _ => M.impossible
          end.
        
        Axiom Implements :
          M.IsTraitInstance
            "core::cmp::PartialEq"
            Self
            (* Trait polymorphic types *) []
            (* Instance *) [ ("eq", InstanceField.Method eq) ].
      End Impl_core_cmp_PartialEq_for_delphinus_zkwasm_circuits_mtable_allocator_MemoryTableCellType.
      
      Module Impl_core_marker_StructuralEq_for_delphinus_zkwasm_circuits_mtable_allocator_MemoryTableCellType.
        Definition Self : Ty.t :=
          Ty.path "delphinus_zkwasm::circuits::mtable::allocator::MemoryTableCellType".
        
        Axiom Implements :
          M.IsTraitInstance
            "core::marker::StructuralEq"
            Self
            (* Trait polymorphic types *) []
            (* Instance *) [].
      End Impl_core_marker_StructuralEq_for_delphinus_zkwasm_circuits_mtable_allocator_MemoryTableCellType.
      
      Module Impl_core_cmp_Eq_for_delphinus_zkwasm_circuits_mtable_allocator_MemoryTableCellType.
        Definition Self : Ty.t :=
          Ty.path "delphinus_zkwasm::circuits::mtable::allocator::MemoryTableCellType".
        
        (* Eq *)
        Definition assert_receiver_is_total_eq (τ : list Ty.t) (α : list Value.t) : M :=
          match τ, α with
          | [], [ self ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              Value.Tuple []))
          | _, _ => M.impossible
          end.
        
        Axiom Implements :
          M.IsTraitInstance
            "core::cmp::Eq"
            Self
            (* Trait polymorphic types *) []
            (* Instance *)
            [ ("assert_receiver_is_total_eq", InstanceField.Method assert_receiver_is_total_eq) ].
      End Impl_core_cmp_Eq_for_delphinus_zkwasm_circuits_mtable_allocator_MemoryTableCellType.
      
      Module Impl_core_cmp_PartialOrd_for_delphinus_zkwasm_circuits_mtable_allocator_MemoryTableCellType.
        Definition Self : Ty.t :=
          Ty.path "delphinus_zkwasm::circuits::mtable::allocator::MemoryTableCellType".
        
        (* PartialOrd *)
        Definition partial_cmp (τ : list Ty.t) (α : list Value.t) : M :=
          match τ, α with
          | [], [ self; other ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              let other := M.alloc (| other |) in
              M.read (|
                let __self_tag :=
                  M.alloc (|
                    M.call_closure (|
                      M.get_function (|
                        "core::intrinsics::discriminant_value",
                        [
                          Ty.path
                            "delphinus_zkwasm::circuits::mtable::allocator::MemoryTableCellType"
                        ]
                      |),
                      [ M.read (| self |) ]
                    |)
                  |) in
                let __arg1_tag :=
                  M.alloc (|
                    M.call_closure (|
                      M.get_function (|
                        "core::intrinsics::discriminant_value",
                        [
                          Ty.path
                            "delphinus_zkwasm::circuits::mtable::allocator::MemoryTableCellType"
                        ]
                      |),
                      [ M.read (| other |) ]
                    |)
                  |) in
                M.alloc (|
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::cmp::PartialOrd",
                      Ty.path "isize",
                      [ Ty.path "isize" ],
                      "partial_cmp",
                      []
                    |),
                    [ __self_tag; __arg1_tag ]
                  |)
                |)
              |)))
          | _, _ => M.impossible
          end.
        
        Axiom Implements :
          M.IsTraitInstance
            "core::cmp::PartialOrd"
            Self
            (* Trait polymorphic types *) []
            (* Instance *) [ ("partial_cmp", InstanceField.Method partial_cmp) ].
      End Impl_core_cmp_PartialOrd_for_delphinus_zkwasm_circuits_mtable_allocator_MemoryTableCellType.
      
      Module Impl_core_cmp_Ord_for_delphinus_zkwasm_circuits_mtable_allocator_MemoryTableCellType.
        Definition Self : Ty.t :=
          Ty.path "delphinus_zkwasm::circuits::mtable::allocator::MemoryTableCellType".
        
        (* Ord *)
        Definition cmp (τ : list Ty.t) (α : list Value.t) : M :=
          match τ, α with
          | [], [ self; other ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              let other := M.alloc (| other |) in
              M.read (|
                let __self_tag :=
                  M.alloc (|
                    M.call_closure (|
                      M.get_function (|
                        "core::intrinsics::discriminant_value",
                        [
                          Ty.path
                            "delphinus_zkwasm::circuits::mtable::allocator::MemoryTableCellType"
                        ]
                      |),
                      [ M.read (| self |) ]
                    |)
                  |) in
                let __arg1_tag :=
                  M.alloc (|
                    M.call_closure (|
                      M.get_function (|
                        "core::intrinsics::discriminant_value",
                        [
                          Ty.path
                            "delphinus_zkwasm::circuits::mtable::allocator::MemoryTableCellType"
                        ]
                      |),
                      [ M.read (| other |) ]
                    |)
                  |) in
                M.alloc (|
                  M.call_closure (|
                    M.get_trait_method (| "core::cmp::Ord", Ty.path "isize", [], "cmp", [] |),
                    [ __self_tag; __arg1_tag ]
                  |)
                |)
              |)))
          | _, _ => M.impossible
          end.
        
        Axiom Implements :
          M.IsTraitInstance
            "core::cmp::Ord"
            Self
            (* Trait polymorphic types *) []
            (* Instance *) [ ("cmp", InstanceField.Method cmp) ].
      End Impl_core_cmp_Ord_for_delphinus_zkwasm_circuits_mtable_allocator_MemoryTableCellType.
      
      Definition value_BIT_COLUMNS : Value.t :=
        M.run ltac:(M.monadic (M.alloc (| Value.Integer 3 |))).
      
      Definition value_U16_COLUMNS : Value.t :=
        M.run
          ltac:(M.monadic
            (M.alloc (|
              BinOp.Panic.add (|
                Integer.Usize,
                BinOp.Panic.div (|
                  Integer.Usize,
                  M.call_closure (|
                    M.get_associated_function (| Ty.path "usize", "next_multiple_of", [] |),
                    [
                      M.read (|
                        M.get_constant (|
                          "delphinus_zkwasm::circuits::mtable::allocator::U32_CELLS"
                        |)
                      |);
                      Value.Integer 2
                    ]
                  |),
                  Value.Integer 2
                |),
                M.read (|
                  M.get_constant (| "delphinus_zkwasm::circuits::mtable::allocator::U64_CELLS" |)
                |)
              |)
            |))).
      
      Definition value_COMMON_RANGE_COLUMNS : Value.t :=
        M.run ltac:(M.monadic (M.alloc (| Value.Integer 1 |))).
      
      Definition value_UNLIMITED_COLUMNS : Value.t :=
        M.run ltac:(M.monadic (M.alloc (| Value.Integer 2 |))).
      
      Definition value_U32_CELLS : Value.t :=
        M.run
          ltac:(M.monadic
            (M.match_operator (|
              M.alloc (| Value.Tuple [] |),
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.use (M.alloc (| Value.Bool false |)) in
                    let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                    M.alloc (| Value.Integer 5 |)));
                fun γ => ltac:(M.monadic (M.alloc (| Value.Integer 2 |)))
              ]
            |))).
      
      Definition value_U64_CELLS : Value.t :=
        M.run ltac:(M.monadic (M.alloc (| Value.Integer 1 |))).
      
      (* StructRecord
        {
          name := "MemoryTableCellAllocator";
          ty_params := [ "F" ];
          fields :=
            [
              ("k", Ty.path "u32");
              ("all_cols",
                Ty.apply
                  (Ty.path "alloc::collections::btree::map::BTreeMap")
                  [
                    Ty.path "delphinus_zkwasm::circuits::mtable::allocator::MemoryTableCellType";
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      [
                        Ty.apply
                          (Ty.path "halo2_proofs::plonk::circuit::Column")
                          [ Ty.path "halo2_proofs::plonk::circuit::Advice" ];
                        Ty.path "alloc::alloc::Global"
                      ];
                    Ty.path "alloc::alloc::Global"
                  ]);
              ("free_cells",
                Ty.apply
                  (Ty.path "alloc::collections::btree::map::BTreeMap")
                  [
                    Ty.path "delphinus_zkwasm::circuits::mtable::allocator::MemoryTableCellType";
                    Ty.tuple [ Ty.path "usize"; Ty.path "u32" ];
                    Ty.path "alloc::alloc::Global"
                  ]);
              ("free_u32_cells",
                Ty.apply
                  (Ty.path "alloc::vec::Vec")
                  [
                    Ty.apply (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedU32Cell") [ F ];
                    Ty.path "alloc::alloc::Global"
                  ]);
              ("free_u64_cells",
                Ty.apply
                  (Ty.path "alloc::vec::Vec")
                  [
                    Ty.apply (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedU64Cell") [ F ];
                    Ty.path "alloc::alloc::Global"
                  ]);
              ("_mark", Ty.apply (Ty.path "core::marker::PhantomData") [ F ])
            ];
        } *)
      
      Module Impl_core_fmt_Debug_where_core_fmt_Debug_F_where_pairing_bn256_arithmetic_fields_FieldExt_F_for_delphinus_zkwasm_circuits_mtable_allocator_MemoryTableCellAllocator_F.
        Definition Self (F : Ty.t) : Ty.t :=
          Ty.apply
            (Ty.path "delphinus_zkwasm::circuits::mtable::allocator::MemoryTableCellAllocator")
            [ F ].
        
        (* Debug *)
        Definition fmt (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self F in
          match τ, α with
          | [], [ self; f ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              let f := M.alloc (| f |) in
              M.read (|
                let names :=
                  M.alloc (|
                    M.alloc (|
                      Value.Array
                        [
                          M.read (| Value.String "k" |);
                          M.read (| Value.String "all_cols" |);
                          M.read (| Value.String "free_cells" |);
                          M.read (| Value.String "free_u32_cells" |);
                          M.read (| Value.String "free_u64_cells" |);
                          M.read (| Value.String "_mark" |)
                        ]
                    |)
                  |) in
                let values :=
                  M.alloc (|
                    (* Unsize *)
                    M.pointer_coercion
                      (M.alloc (|
                        Value.Array
                          [
                            (* Unsize *)
                            M.pointer_coercion
                              (M.SubPointer.get_struct_record_field (|
                                M.read (| self |),
                                "delphinus_zkwasm::circuits::mtable::allocator::MemoryTableCellAllocator",
                                "k"
                              |));
                            (* Unsize *)
                            M.pointer_coercion
                              (M.SubPointer.get_struct_record_field (|
                                M.read (| self |),
                                "delphinus_zkwasm::circuits::mtable::allocator::MemoryTableCellAllocator",
                                "all_cols"
                              |));
                            (* Unsize *)
                            M.pointer_coercion
                              (M.SubPointer.get_struct_record_field (|
                                M.read (| self |),
                                "delphinus_zkwasm::circuits::mtable::allocator::MemoryTableCellAllocator",
                                "free_cells"
                              |));
                            (* Unsize *)
                            M.pointer_coercion
                              (M.SubPointer.get_struct_record_field (|
                                M.read (| self |),
                                "delphinus_zkwasm::circuits::mtable::allocator::MemoryTableCellAllocator",
                                "free_u32_cells"
                              |));
                            (* Unsize *)
                            M.pointer_coercion
                              (M.SubPointer.get_struct_record_field (|
                                M.read (| self |),
                                "delphinus_zkwasm::circuits::mtable::allocator::MemoryTableCellAllocator",
                                "free_u64_cells"
                              |));
                            (* Unsize *)
                            M.pointer_coercion
                              (M.alloc (|
                                M.SubPointer.get_struct_record_field (|
                                  M.read (| self |),
                                  "delphinus_zkwasm::circuits::mtable::allocator::MemoryTableCellAllocator",
                                  "_mark"
                                |)
                              |))
                          ]
                      |))
                  |) in
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.path "core::fmt::Formatter",
                      "debug_struct_fields_finish",
                      []
                    |),
                    [
                      M.read (| f |);
                      M.read (| Value.String "MemoryTableCellAllocator" |);
                      (* Unsize *) M.pointer_coercion (M.read (| names |));
                      M.read (| values |)
                    ]
                  |)
                |)
              |)))
          | _, _ => M.impossible
          end.
        
        Axiom Implements :
          forall (F : Ty.t),
          M.IsTraitInstance
            "core::fmt::Debug"
            (Self F)
            (* Trait polymorphic types *) []
            (* Instance *) [ ("fmt", InstanceField.Method (fmt F)) ].
      End Impl_core_fmt_Debug_where_core_fmt_Debug_F_where_pairing_bn256_arithmetic_fields_FieldExt_F_for_delphinus_zkwasm_circuits_mtable_allocator_MemoryTableCellAllocator_F.
      
      Module Impl_core_clone_Clone_where_core_clone_Clone_F_where_pairing_bn256_arithmetic_fields_FieldExt_F_for_delphinus_zkwasm_circuits_mtable_allocator_MemoryTableCellAllocator_F.
        Definition Self (F : Ty.t) : Ty.t :=
          Ty.apply
            (Ty.path "delphinus_zkwasm::circuits::mtable::allocator::MemoryTableCellAllocator")
            [ F ].
        
        (* Clone *)
        Definition clone (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self F in
          match τ, α with
          | [], [ self ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              Value.StructRecord
                "delphinus_zkwasm::circuits::mtable::allocator::MemoryTableCellAllocator"
                [
                  ("k",
                    M.call_closure (|
                      M.get_trait_method (| "core::clone::Clone", Ty.path "u32", [], "clone", [] |),
                      [
                        M.SubPointer.get_struct_record_field (|
                          M.read (| self |),
                          "delphinus_zkwasm::circuits::mtable::allocator::MemoryTableCellAllocator",
                          "k"
                        |)
                      ]
                    |));
                  ("all_cols",
                    M.call_closure (|
                      M.get_trait_method (|
                        "core::clone::Clone",
                        Ty.apply
                          (Ty.path "alloc::collections::btree::map::BTreeMap")
                          [
                            Ty.path
                              "delphinus_zkwasm::circuits::mtable::allocator::MemoryTableCellType";
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              [
                                Ty.apply
                                  (Ty.path "halo2_proofs::plonk::circuit::Column")
                                  [ Ty.path "halo2_proofs::plonk::circuit::Advice" ];
                                Ty.path "alloc::alloc::Global"
                              ];
                            Ty.path "alloc::alloc::Global"
                          ],
                        [],
                        "clone",
                        []
                      |),
                      [
                        M.SubPointer.get_struct_record_field (|
                          M.read (| self |),
                          "delphinus_zkwasm::circuits::mtable::allocator::MemoryTableCellAllocator",
                          "all_cols"
                        |)
                      ]
                    |));
                  ("free_cells",
                    M.call_closure (|
                      M.get_trait_method (|
                        "core::clone::Clone",
                        Ty.apply
                          (Ty.path "alloc::collections::btree::map::BTreeMap")
                          [
                            Ty.path
                              "delphinus_zkwasm::circuits::mtable::allocator::MemoryTableCellType";
                            Ty.tuple [ Ty.path "usize"; Ty.path "u32" ];
                            Ty.path "alloc::alloc::Global"
                          ],
                        [],
                        "clone",
                        []
                      |),
                      [
                        M.SubPointer.get_struct_record_field (|
                          M.read (| self |),
                          "delphinus_zkwasm::circuits::mtable::allocator::MemoryTableCellAllocator",
                          "free_cells"
                        |)
                      ]
                    |));
                  ("free_u32_cells",
                    M.call_closure (|
                      M.get_trait_method (|
                        "core::clone::Clone",
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          [
                            Ty.apply
                              (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedU32Cell")
                              [ F ];
                            Ty.path "alloc::alloc::Global"
                          ],
                        [],
                        "clone",
                        []
                      |),
                      [
                        M.SubPointer.get_struct_record_field (|
                          M.read (| self |),
                          "delphinus_zkwasm::circuits::mtable::allocator::MemoryTableCellAllocator",
                          "free_u32_cells"
                        |)
                      ]
                    |));
                  ("free_u64_cells",
                    M.call_closure (|
                      M.get_trait_method (|
                        "core::clone::Clone",
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          [
                            Ty.apply
                              (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedU64Cell")
                              [ F ];
                            Ty.path "alloc::alloc::Global"
                          ],
                        [],
                        "clone",
                        []
                      |),
                      [
                        M.SubPointer.get_struct_record_field (|
                          M.read (| self |),
                          "delphinus_zkwasm::circuits::mtable::allocator::MemoryTableCellAllocator",
                          "free_u64_cells"
                        |)
                      ]
                    |));
                  ("_mark",
                    M.call_closure (|
                      M.get_trait_method (|
                        "core::clone::Clone",
                        Ty.apply (Ty.path "core::marker::PhantomData") [ F ],
                        [],
                        "clone",
                        []
                      |),
                      [
                        M.SubPointer.get_struct_record_field (|
                          M.read (| self |),
                          "delphinus_zkwasm::circuits::mtable::allocator::MemoryTableCellAllocator",
                          "_mark"
                        |)
                      ]
                    |))
                ]))
          | _, _ => M.impossible
          end.
        
        Axiom Implements :
          forall (F : Ty.t),
          M.IsTraitInstance
            "core::clone::Clone"
            (Self F)
            (* Trait polymorphic types *) []
            (* Instance *) [ ("clone", InstanceField.Method (clone F)) ].
      End Impl_core_clone_Clone_where_core_clone_Clone_F_where_pairing_bn256_arithmetic_fields_FieldExt_F_for_delphinus_zkwasm_circuits_mtable_allocator_MemoryTableCellAllocator_F.
      
      Module Impl_delphinus_zkwasm_circuits_mtable_allocator_MemoryTableCellAllocator_F.
        Definition Self (F : Ty.t) : Ty.t :=
          Ty.apply
            (Ty.path "delphinus_zkwasm::circuits::mtable::allocator::MemoryTableCellAllocator")
            [ F ].
        
        (*
            pub fn assert_no_free_cells(&self) {
                for (t, (i, j)) in &self.free_cells {
                    let cols = self.all_cols.get(t).unwrap();
        
                    assert!(
                        *i == cols.len() || ( *i == cols.len() - 1 && *j > 0),
                        "unused {:?} col should be removed: {}.",
                        t,
                        cols.len() - *i - ( *j != 0) as usize
                    );
                }
        
                assert!(
                    self.free_u32_cells.is_empty(),
                    "unused u32 cells should be removed: {:?}.",
                    self.free_u32_cells.len()
                );
                assert!(
                    self.free_u64_cells.is_empty(),
                    "unused u64 cells should be removed: {:?}.",
                    self.free_u64_cells.len()
                );
            }
        *)
        Definition assert_no_free_cells (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self F in
          match τ, α with
          | [], [ self ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              M.read (|
                let _ :=
                  M.use
                    (M.match_operator (|
                      M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::iter::traits::collect::IntoIterator",
                            Ty.apply
                              (Ty.path "&")
                              [
                                Ty.apply
                                  (Ty.path "alloc::collections::btree::map::BTreeMap")
                                  [
                                    Ty.path
                                      "delphinus_zkwasm::circuits::mtable::allocator::MemoryTableCellType";
                                    Ty.tuple [ Ty.path "usize"; Ty.path "u32" ];
                                    Ty.path "alloc::alloc::Global"
                                  ]
                              ],
                            [],
                            "into_iter",
                            []
                          |),
                          [
                            M.SubPointer.get_struct_record_field (|
                              M.read (| self |),
                              "delphinus_zkwasm::circuits::mtable::allocator::MemoryTableCellAllocator",
                              "free_cells"
                            |)
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let iter := M.copy (| γ |) in
                            M.loop (|
                              ltac:(M.monadic
                                (let _ :=
                                  M.match_operator (|
                                    M.alloc (|
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "core::iter::traits::iterator::Iterator",
                                          Ty.apply
                                            (Ty.path "alloc::collections::btree::map::Iter")
                                            [
                                              Ty.path
                                                "delphinus_zkwasm::circuits::mtable::allocator::MemoryTableCellType";
                                              Ty.tuple [ Ty.path "usize"; Ty.path "u32" ]
                                            ],
                                          [],
                                          "next",
                                          []
                                        |),
                                        [ iter ]
                                      |)
                                    |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (M.alloc (|
                                            M.never_to_any (| M.read (| M.break (||) |) |)
                                          |)));
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let γ0_0 :=
                                            M.SubPointer.get_struct_tuple_field (|
                                              γ,
                                              "core::option::Option::Some",
                                              0
                                            |) in
                                          let γ1_0 := M.SubPointer.get_tuple_field (| γ0_0, 0 |) in
                                          let γ1_1 := M.SubPointer.get_tuple_field (| γ0_0, 1 |) in
                                          let t := M.copy (| γ1_0 |) in
                                          let γ1_1 := M.read (| γ1_1 |) in
                                          let γ3_0 := M.SubPointer.get_tuple_field (| γ1_1, 0 |) in
                                          let γ3_1 := M.SubPointer.get_tuple_field (| γ1_1, 1 |) in
                                          let i := M.alloc (| γ3_0 |) in
                                          let j := M.alloc (| γ3_1 |) in
                                          let cols :=
                                            M.alloc (|
                                              M.call_closure (|
                                                M.get_associated_function (|
                                                  Ty.apply
                                                    (Ty.path "core::option::Option")
                                                    [
                                                      Ty.apply
                                                        (Ty.path "&")
                                                        [
                                                          Ty.apply
                                                            (Ty.path "alloc::vec::Vec")
                                                            [
                                                              Ty.apply
                                                                (Ty.path
                                                                  "halo2_proofs::plonk::circuit::Column")
                                                                [
                                                                  Ty.path
                                                                    "halo2_proofs::plonk::circuit::Advice"
                                                                ];
                                                              Ty.path "alloc::alloc::Global"
                                                            ]
                                                        ]
                                                    ],
                                                  "unwrap",
                                                  []
                                                |),
                                                [
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.apply
                                                        (Ty.path
                                                          "alloc::collections::btree::map::BTreeMap")
                                                        [
                                                          Ty.path
                                                            "delphinus_zkwasm::circuits::mtable::allocator::MemoryTableCellType";
                                                          Ty.apply
                                                            (Ty.path "alloc::vec::Vec")
                                                            [
                                                              Ty.apply
                                                                (Ty.path
                                                                  "halo2_proofs::plonk::circuit::Column")
                                                                [
                                                                  Ty.path
                                                                    "halo2_proofs::plonk::circuit::Advice"
                                                                ];
                                                              Ty.path "alloc::alloc::Global"
                                                            ];
                                                          Ty.path "alloc::alloc::Global"
                                                        ],
                                                      "get",
                                                      [
                                                        Ty.path
                                                          "delphinus_zkwasm::circuits::mtable::allocator::MemoryTableCellType"
                                                      ]
                                                    |),
                                                    [
                                                      M.SubPointer.get_struct_record_field (|
                                                        M.read (| self |),
                                                        "delphinus_zkwasm::circuits::mtable::allocator::MemoryTableCellAllocator",
                                                        "all_cols"
                                                      |);
                                                      M.read (| t |)
                                                    ]
                                                  |)
                                                ]
                                              |)
                                            |) in
                                          let _ :=
                                            M.match_operator (|
                                              M.alloc (| Value.Tuple [] |),
                                              [
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (let γ :=
                                                      M.use
                                                        (M.alloc (|
                                                          UnOp.Pure.not
                                                            (LogicalOp.or (|
                                                              BinOp.Pure.eq
                                                                (M.read (| M.read (| i |) |))
                                                                (M.call_closure (|
                                                                  M.get_associated_function (|
                                                                    Ty.apply
                                                                      (Ty.path "alloc::vec::Vec")
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "halo2_proofs::plonk::circuit::Column")
                                                                          [
                                                                            Ty.path
                                                                              "halo2_proofs::plonk::circuit::Advice"
                                                                          ];
                                                                        Ty.path
                                                                          "alloc::alloc::Global"
                                                                      ],
                                                                    "len",
                                                                    []
                                                                  |),
                                                                  [ M.read (| cols |) ]
                                                                |)),
                                                              ltac:(M.monadic
                                                                (LogicalOp.and (|
                                                                  BinOp.Pure.eq
                                                                    (M.read (| M.read (| i |) |))
                                                                    (BinOp.Panic.sub (|
                                                                      Integer.Usize,
                                                                      M.call_closure (|
                                                                        M.get_associated_function (|
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "alloc::vec::Vec")
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "halo2_proofs::plonk::circuit::Column")
                                                                                [
                                                                                  Ty.path
                                                                                    "halo2_proofs::plonk::circuit::Advice"
                                                                                ];
                                                                              Ty.path
                                                                                "alloc::alloc::Global"
                                                                            ],
                                                                          "len",
                                                                          []
                                                                        |),
                                                                        [ M.read (| cols |) ]
                                                                      |),
                                                                      Value.Integer 1
                                                                    |)),
                                                                  ltac:(M.monadic
                                                                    (BinOp.Pure.gt
                                                                      (M.read (| M.read (| j |) |))
                                                                      (Value.Integer 0)))
                                                                |)))
                                                            |))
                                                        |)) in
                                                    let _ :=
                                                      M.is_constant_or_break_match (|
                                                        M.read (| γ |),
                                                        Value.Bool true
                                                      |) in
                                                    M.alloc (|
                                                      M.never_to_any (|
                                                        M.call_closure (|
                                                          M.get_function (|
                                                            "core::panicking::panic_fmt",
                                                            []
                                                          |),
                                                          [
                                                            M.call_closure (|
                                                              M.get_associated_function (|
                                                                Ty.path "core::fmt::Arguments",
                                                                "new_v1",
                                                                []
                                                              |),
                                                              [
                                                                (* Unsize *)
                                                                M.pointer_coercion
                                                                  (M.alloc (|
                                                                    Value.Array
                                                                      [
                                                                        M.read (|
                                                                          Value.String "unused "
                                                                        |);
                                                                        M.read (|
                                                                          Value.String
                                                                            " col should be removed: "
                                                                        |);
                                                                        M.read (|
                                                                          Value.String "."
                                                                        |)
                                                                      ]
                                                                  |));
                                                                (* Unsize *)
                                                                M.pointer_coercion
                                                                  (M.alloc (|
                                                                    Value.Array
                                                                      [
                                                                        M.call_closure (|
                                                                          M.get_associated_function (|
                                                                            Ty.path
                                                                              "core::fmt::rt::Argument",
                                                                            "new_debug",
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path "&")
                                                                                [
                                                                                  Ty.path
                                                                                    "delphinus_zkwasm::circuits::mtable::allocator::MemoryTableCellType"
                                                                                ]
                                                                            ]
                                                                          |),
                                                                          [ t ]
                                                                        |);
                                                                        M.call_closure (|
                                                                          M.get_associated_function (|
                                                                            Ty.path
                                                                              "core::fmt::rt::Argument",
                                                                            "new_display",
                                                                            [ Ty.path "usize" ]
                                                                          |),
                                                                          [
                                                                            M.alloc (|
                                                                              BinOp.Panic.sub (|
                                                                                Integer.Usize,
                                                                                BinOp.Panic.sub (|
                                                                                  Integer.Usize,
                                                                                  M.call_closure (|
                                                                                    M.get_associated_function (|
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "alloc::vec::Vec")
                                                                                        [
                                                                                          Ty.apply
                                                                                            (Ty.path
                                                                                              "halo2_proofs::plonk::circuit::Column")
                                                                                            [
                                                                                              Ty.path
                                                                                                "halo2_proofs::plonk::circuit::Advice"
                                                                                            ];
                                                                                          Ty.path
                                                                                            "alloc::alloc::Global"
                                                                                        ],
                                                                                      "len",
                                                                                      []
                                                                                    |),
                                                                                    [
                                                                                      M.read (|
                                                                                        cols
                                                                                      |)
                                                                                    ]
                                                                                  |),
                                                                                  M.read (|
                                                                                    M.read (| i |)
                                                                                  |)
                                                                                |),
                                                                                M.rust_cast
                                                                                  (BinOp.Pure.ne
                                                                                    (M.read (|
                                                                                      M.read (| j |)
                                                                                    |))
                                                                                    (Value.Integer
                                                                                      0))
                                                                              |)
                                                                            |)
                                                                          ]
                                                                        |)
                                                                      ]
                                                                  |))
                                                              ]
                                                            |)
                                                          ]
                                                        |)
                                                      |)
                                                    |)));
                                                fun γ =>
                                                  ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                              ]
                                            |) in
                                          M.alloc (| Value.Tuple [] |)))
                                    ]
                                  |) in
                                M.alloc (| Value.Tuple [] |)))
                            |)))
                      ]
                    |)) in
                let _ :=
                  M.match_operator (|
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                UnOp.Pure.not
                                  (M.call_closure (|
                                    M.get_associated_function (|
                                      Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "delphinus_zkwasm::circuits::cell::AllocatedU32Cell")
                                            [ F ];
                                          Ty.path "alloc::alloc::Global"
                                        ],
                                      "is_empty",
                                      []
                                    |),
                                    [
                                      M.SubPointer.get_struct_record_field (|
                                        M.read (| self |),
                                        "delphinus_zkwasm::circuits::mtable::allocator::MemoryTableCellAllocator",
                                        "free_u32_cells"
                                      |)
                                    ]
                                  |))
                              |)) in
                          let _ :=
                            M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.call_closure (|
                                M.get_function (| "core::panicking::panic_fmt", [] |),
                                [
                                  M.call_closure (|
                                    M.get_associated_function (|
                                      Ty.path "core::fmt::Arguments",
                                      "new_v1",
                                      []
                                    |),
                                    [
                                      (* Unsize *)
                                      M.pointer_coercion
                                        (M.alloc (|
                                          Value.Array
                                            [
                                              M.read (|
                                                Value.String "unused u32 cells should be removed: "
                                              |);
                                              M.read (| Value.String "." |)
                                            ]
                                        |));
                                      (* Unsize *)
                                      M.pointer_coercion
                                        (M.alloc (|
                                          Value.Array
                                            [
                                              M.call_closure (|
                                                M.get_associated_function (|
                                                  Ty.path "core::fmt::rt::Argument",
                                                  "new_debug",
                                                  [ Ty.path "usize" ]
                                                |),
                                                [
                                                  M.alloc (|
                                                    M.call_closure (|
                                                      M.get_associated_function (|
                                                        Ty.apply
                                                          (Ty.path "alloc::vec::Vec")
                                                          [
                                                            Ty.apply
                                                              (Ty.path
                                                                "delphinus_zkwasm::circuits::cell::AllocatedU32Cell")
                                                              [ F ];
                                                            Ty.path "alloc::alloc::Global"
                                                          ],
                                                        "len",
                                                        []
                                                      |),
                                                      [
                                                        M.SubPointer.get_struct_record_field (|
                                                          M.read (| self |),
                                                          "delphinus_zkwasm::circuits::mtable::allocator::MemoryTableCellAllocator",
                                                          "free_u32_cells"
                                                        |)
                                                      ]
                                                    |)
                                                  |)
                                                ]
                                              |)
                                            ]
                                        |))
                                    ]
                                  |)
                                ]
                              |)
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                let _ :=
                  M.match_operator (|
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                UnOp.Pure.not
                                  (M.call_closure (|
                                    M.get_associated_function (|
                                      Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "delphinus_zkwasm::circuits::cell::AllocatedU64Cell")
                                            [ F ];
                                          Ty.path "alloc::alloc::Global"
                                        ],
                                      "is_empty",
                                      []
                                    |),
                                    [
                                      M.SubPointer.get_struct_record_field (|
                                        M.read (| self |),
                                        "delphinus_zkwasm::circuits::mtable::allocator::MemoryTableCellAllocator",
                                        "free_u64_cells"
                                      |)
                                    ]
                                  |))
                              |)) in
                          let _ :=
                            M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.call_closure (|
                                M.get_function (| "core::panicking::panic_fmt", [] |),
                                [
                                  M.call_closure (|
                                    M.get_associated_function (|
                                      Ty.path "core::fmt::Arguments",
                                      "new_v1",
                                      []
                                    |),
                                    [
                                      (* Unsize *)
                                      M.pointer_coercion
                                        (M.alloc (|
                                          Value.Array
                                            [
                                              M.read (|
                                                Value.String "unused u64 cells should be removed: "
                                              |);
                                              M.read (| Value.String "." |)
                                            ]
                                        |));
                                      (* Unsize *)
                                      M.pointer_coercion
                                        (M.alloc (|
                                          Value.Array
                                            [
                                              M.call_closure (|
                                                M.get_associated_function (|
                                                  Ty.path "core::fmt::rt::Argument",
                                                  "new_debug",
                                                  [ Ty.path "usize" ]
                                                |),
                                                [
                                                  M.alloc (|
                                                    M.call_closure (|
                                                      M.get_associated_function (|
                                                        Ty.apply
                                                          (Ty.path "alloc::vec::Vec")
                                                          [
                                                            Ty.apply
                                                              (Ty.path
                                                                "delphinus_zkwasm::circuits::cell::AllocatedU64Cell")
                                                              [ F ];
                                                            Ty.path "alloc::alloc::Global"
                                                          ],
                                                        "len",
                                                        []
                                                      |),
                                                      [
                                                        M.SubPointer.get_struct_record_field (|
                                                          M.read (| self |),
                                                          "delphinus_zkwasm::circuits::mtable::allocator::MemoryTableCellAllocator",
                                                          "free_u64_cells"
                                                        |)
                                                      ]
                                                    |)
                                                  |)
                                                ]
                                              |)
                                            ]
                                        |))
                                    ]
                                  |)
                                ]
                              |)
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                M.alloc (| Value.Tuple [] |)
              |)))
          | _, _ => M.impossible
          end.
        
        Axiom AssociatedFunction_assert_no_free_cells :
          forall (F : Ty.t),
          M.IsAssociatedFunction (Self F) "assert_no_free_cells" (assert_no_free_cells F).
        
        (*
            pub fn enable_equality(&mut self, meta: &mut ConstraintSystem<F>, t: &MemoryTableCellType) {
                for c in self.all_cols.get(t).unwrap() {
                    meta.enable_equality( *c);
                }
            }
        *)
        Definition enable_equality (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self F in
          match τ, α with
          | [], [ self; meta; t ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              let meta := M.alloc (| meta |) in
              let t := M.alloc (| t |) in
              M.read (|
                M.use
                  (M.match_operator (|
                    M.alloc (|
                      M.call_closure (|
                        M.get_trait_method (|
                          "core::iter::traits::collect::IntoIterator",
                          Ty.apply
                            (Ty.path "&")
                            [
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                [
                                  Ty.apply
                                    (Ty.path "halo2_proofs::plonk::circuit::Column")
                                    [ Ty.path "halo2_proofs::plonk::circuit::Advice" ];
                                  Ty.path "alloc::alloc::Global"
                                ]
                            ],
                          [],
                          "into_iter",
                          []
                        |),
                        [
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.apply
                                (Ty.path "core::option::Option")
                                [
                                  Ty.apply
                                    (Ty.path "&")
                                    [
                                      Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        [
                                          Ty.apply
                                            (Ty.path "halo2_proofs::plonk::circuit::Column")
                                            [ Ty.path "halo2_proofs::plonk::circuit::Advice" ];
                                          Ty.path "alloc::alloc::Global"
                                        ]
                                    ]
                                ],
                              "unwrap",
                              []
                            |),
                            [
                              M.call_closure (|
                                M.get_associated_function (|
                                  Ty.apply
                                    (Ty.path "alloc::collections::btree::map::BTreeMap")
                                    [
                                      Ty.path
                                        "delphinus_zkwasm::circuits::mtable::allocator::MemoryTableCellType";
                                      Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        [
                                          Ty.apply
                                            (Ty.path "halo2_proofs::plonk::circuit::Column")
                                            [ Ty.path "halo2_proofs::plonk::circuit::Advice" ];
                                          Ty.path "alloc::alloc::Global"
                                        ];
                                      Ty.path "alloc::alloc::Global"
                                    ],
                                  "get",
                                  [
                                    Ty.path
                                      "delphinus_zkwasm::circuits::mtable::allocator::MemoryTableCellType"
                                  ]
                                |),
                                [
                                  M.SubPointer.get_struct_record_field (|
                                    M.read (| self |),
                                    "delphinus_zkwasm::circuits::mtable::allocator::MemoryTableCellAllocator",
                                    "all_cols"
                                  |);
                                  M.read (| t |)
                                ]
                              |)
                            ]
                          |)
                        ]
                      |)
                    |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let iter := M.copy (| γ |) in
                          M.loop (|
                            ltac:(M.monadic
                              (let _ :=
                                M.match_operator (|
                                  M.alloc (|
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::iter::traits::iterator::Iterator",
                                        Ty.apply
                                          (Ty.path "core::slice::iter::Iter")
                                          [
                                            Ty.apply
                                              (Ty.path "halo2_proofs::plonk::circuit::Column")
                                              [ Ty.path "halo2_proofs::plonk::circuit::Advice" ]
                                          ],
                                        [],
                                        "next",
                                        []
                                      |),
                                      [ iter ]
                                    |)
                                  |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (M.alloc (|
                                          M.never_to_any (| M.read (| M.break (||) |) |)
                                        |)));
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 :=
                                          M.SubPointer.get_struct_tuple_field (|
                                            γ,
                                            "core::option::Option::Some",
                                            0
                                          |) in
                                        let c := M.copy (| γ0_0 |) in
                                        let _ :=
                                          M.alloc (|
                                            M.call_closure (|
                                              M.get_associated_function (|
                                                Ty.apply
                                                  (Ty.path
                                                    "halo2_proofs::plonk::circuit::ConstraintSystem")
                                                  [ F ],
                                                "enable_equality",
                                                [
                                                  Ty.apply
                                                    (Ty.path "halo2_proofs::plonk::circuit::Column")
                                                    [ Ty.path "halo2_proofs::plonk::circuit::Advice"
                                                    ]
                                                ]
                                              |),
                                              [ M.read (| meta |); M.read (| M.read (| c |) |) ]
                                            |)
                                          |) in
                                        M.alloc (| Value.Tuple [] |)))
                                  ]
                                |) in
                              M.alloc (| Value.Tuple [] |)))
                          |)))
                    ]
                  |))
              |)))
          | _, _ => M.impossible
          end.
        
        Axiom AssociatedFunction_enable_equality :
          forall (F : Ty.t),
          M.IsAssociatedFunction (Self F) "enable_equality" (enable_equality F).
        
        (*
            pub(super) fn prepare_alloc_u32_cell(&mut self) -> AllocatedU32Cell<F> {
                let u16_cells_le = [0; 2].map(|_| self.alloc_u16_cell());
        
                AllocatedU32Cell { u16_cells_le }
            }
        *)
        Definition prepare_alloc_u32_cell (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self F in
          match τ, α with
          | [], [ self ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              M.read (|
                let u16_cells_le :=
                  M.alloc (|
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.apply (Ty.path "array") [ Ty.path "i32" ],
                        "map",
                        [
                          Ty.function
                            [ Ty.tuple [ Ty.path "i32" ] ]
                            (Ty.apply
                              (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedU16Cell")
                              [ F ]);
                          Ty.apply
                            (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedU16Cell")
                            [ F ]
                        ]
                      |),
                      [
                        repeat (Value.Integer 0) 2;
                        M.closure
                          (fun γ =>
                            ltac:(M.monadic
                              match γ with
                              | [ α0 ] =>
                                M.match_operator (|
                                  M.alloc (| α0 |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.apply
                                              (Ty.path
                                                "delphinus_zkwasm::circuits::mtable::allocator::MemoryTableCellAllocator")
                                              [ F ],
                                            "alloc_u16_cell",
                                            []
                                          |),
                                          [ M.read (| self |) ]
                                        |)))
                                  ]
                                |)
                              | _ => M.impossible (||)
                              end))
                      ]
                    |)
                  |) in
                M.alloc (|
                  Value.StructRecord
                    "delphinus_zkwasm::circuits::cell::AllocatedU32Cell"
                    [ ("u16_cells_le", M.read (| u16_cells_le |)) ]
                |)
              |)))
          | _, _ => M.impossible
          end.
        
        Axiom AssociatedFunction_prepare_alloc_u32_cell :
          forall (F : Ty.t),
          M.IsAssociatedFunction (Self F) "prepare_alloc_u32_cell" (prepare_alloc_u32_cell F).
        
        (*
            pub(super) fn prepare_alloc_u64_cell(
                &mut self,
                meta: &mut ConstraintSystem<F>,
                enable: impl Fn(&mut VirtualCells<'_, F>) -> Expression<F>,
            ) -> AllocatedU64Cell<F> {
                let u16_cells_le = [0; 4].map(|_| self.alloc_u16_cell());
                let u64_cell = self.alloc_unlimited_cell();
                meta.create_gate("mc9. value", |meta| {
                    let init = u64_cell.curr_expr(meta);
                    vec![
                        (0..4)
                            .into_iter()
                            .map(|x| u16_cells_le[x].curr_expr(meta) * constant_from!(1u64 << (16 * x)))
                            .fold(init, |acc, x| acc - x)
                            * enable(meta),
                    ]
                });
                AllocatedU64Cell {
                    u16_cells_le,
                    u64_cell,
                }
            }
        *)
        Definition prepare_alloc_u64_cell (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self F in
          match τ, α with
          | [ impl_Fn__mut_VirtualCells_'___F___arrow_Expression_F_ ], [ self; meta; enable ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              let meta := M.alloc (| meta |) in
              let enable := M.alloc (| enable |) in
              M.read (|
                let u16_cells_le :=
                  M.alloc (|
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.apply (Ty.path "array") [ Ty.path "i32" ],
                        "map",
                        [
                          Ty.function
                            [ Ty.tuple [ Ty.path "i32" ] ]
                            (Ty.apply
                              (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedU16Cell")
                              [ F ]);
                          Ty.apply
                            (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedU16Cell")
                            [ F ]
                        ]
                      |),
                      [
                        repeat (Value.Integer 0) 4;
                        M.closure
                          (fun γ =>
                            ltac:(M.monadic
                              match γ with
                              | [ α0 ] =>
                                M.match_operator (|
                                  M.alloc (| α0 |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.apply
                                              (Ty.path
                                                "delphinus_zkwasm::circuits::mtable::allocator::MemoryTableCellAllocator")
                                              [ F ],
                                            "alloc_u16_cell",
                                            []
                                          |),
                                          [ M.read (| self |) ]
                                        |)))
                                  ]
                                |)
                              | _ => M.impossible (||)
                              end))
                      ]
                    |)
                  |) in
                let u64_cell :=
                  M.alloc (|
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path
                            "delphinus_zkwasm::circuits::mtable::allocator::MemoryTableCellAllocator")
                          [ F ],
                        "alloc_unlimited_cell",
                        []
                      |),
                      [ M.read (| self |) ]
                    |)
                  |) in
                let _ :=
                  M.alloc (|
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.apply (Ty.path "halo2_proofs::plonk::circuit::ConstraintSystem") [ F ],
                        "create_gate",
                        [
                          Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ];
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            [
                              Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ];
                              Ty.path "alloc::alloc::Global"
                            ];
                          Ty.function
                            [
                              Ty.tuple
                                [
                                  Ty.apply
                                    (Ty.path "&mut")
                                    [
                                      Ty.apply
                                        (Ty.path "halo2_proofs::plonk::circuit::VirtualCells")
                                        [ F ]
                                    ]
                                ]
                            ]
                            (Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              [
                                Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ];
                                Ty.path "alloc::alloc::Global"
                              ])
                        ]
                      |),
                      [
                        M.read (| meta |);
                        M.read (| Value.String "mc9. value" |);
                        M.closure
                          (fun γ =>
                            ltac:(M.monadic
                              match γ with
                              | [ α0 ] =>
                                M.match_operator (|
                                  M.alloc (| α0 |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let meta := M.copy (| γ |) in
                                        M.read (|
                                          let init :=
                                            M.alloc (|
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "delphinus_zkwasm::circuits::cell::CellExpression",
                                                  Ty.apply
                                                    (Ty.path
                                                      "delphinus_zkwasm::circuits::cell::AllocatedUnlimitedCell")
                                                    [ F ],
                                                  [ F ],
                                                  "curr_expr",
                                                  []
                                                |),
                                                [ u64_cell; M.read (| meta |) ]
                                              |)
                                            |) in
                                          M.alloc (|
                                            M.call_closure (|
                                              M.get_associated_function (|
                                                Ty.apply
                                                  (Ty.path "slice")
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "halo2_proofs::plonk::circuit::Expression")
                                                      [ F ]
                                                  ],
                                                "into_vec",
                                                [ Ty.path "alloc::alloc::Global" ]
                                              |),
                                              [
                                                (* Unsize *)
                                                M.pointer_coercion
                                                  (M.read (|
                                                    M.call_closure (|
                                                      M.get_associated_function (|
                                                        Ty.apply
                                                          (Ty.path "alloc::boxed::Box")
                                                          [
                                                            Ty.apply
                                                              (Ty.path "array")
                                                              [
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "halo2_proofs::plonk::circuit::Expression")
                                                                  [ F ]
                                                              ];
                                                            Ty.path "alloc::alloc::Global"
                                                          ],
                                                        "new",
                                                        []
                                                      |),
                                                      [
                                                        M.alloc (|
                                                          Value.Array
                                                            [
                                                              M.call_closure (|
                                                                M.get_trait_method (|
                                                                  "core::ops::arith::Mul",
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "halo2_proofs::plonk::circuit::Expression")
                                                                    [ F ],
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "halo2_proofs::plonk::circuit::Expression")
                                                                      [ F ]
                                                                  ],
                                                                  "mul",
                                                                  []
                                                                |),
                                                                [
                                                                  M.call_closure (|
                                                                    M.get_trait_method (|
                                                                      "core::iter::traits::iterator::Iterator",
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "core::iter::adapters::map::Map")
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "core::ops::range::Range")
                                                                            [ Ty.path "usize" ];
                                                                          Ty.function
                                                                            [
                                                                              Ty.tuple
                                                                                [ Ty.path "usize" ]
                                                                            ]
                                                                            (Ty.apply
                                                                              (Ty.path
                                                                                "halo2_proofs::plonk::circuit::Expression")
                                                                              [ F ])
                                                                        ],
                                                                      [],
                                                                      "fold",
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "halo2_proofs::plonk::circuit::Expression")
                                                                          [ F ];
                                                                        Ty.function
                                                                          [
                                                                            Ty.tuple
                                                                              [
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "halo2_proofs::plonk::circuit::Expression")
                                                                                  [ F ];
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "halo2_proofs::plonk::circuit::Expression")
                                                                                  [ F ]
                                                                              ]
                                                                          ]
                                                                          (Ty.apply
                                                                            (Ty.path
                                                                              "halo2_proofs::plonk::circuit::Expression")
                                                                            [ F ])
                                                                      ]
                                                                    |),
                                                                    [
                                                                      M.call_closure (|
                                                                        M.get_trait_method (|
                                                                          "core::iter::traits::iterator::Iterator",
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "core::ops::range::Range")
                                                                            [ Ty.path "usize" ],
                                                                          [],
                                                                          "map",
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "halo2_proofs::plonk::circuit::Expression")
                                                                              [ F ];
                                                                            Ty.function
                                                                              [
                                                                                Ty.tuple
                                                                                  [ Ty.path "usize"
                                                                                  ]
                                                                              ]
                                                                              (Ty.apply
                                                                                (Ty.path
                                                                                  "halo2_proofs::plonk::circuit::Expression")
                                                                                [ F ])
                                                                          ]
                                                                        |),
                                                                        [
                                                                          M.call_closure (|
                                                                            M.get_trait_method (|
                                                                              "core::iter::traits::collect::IntoIterator",
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "core::ops::range::Range")
                                                                                [ Ty.path "usize" ],
                                                                              [],
                                                                              "into_iter",
                                                                              []
                                                                            |),
                                                                            [
                                                                              Value.StructRecord
                                                                                "core::ops::range::Range"
                                                                                [
                                                                                  ("start",
                                                                                    Value.Integer
                                                                                      0);
                                                                                  ("end_",
                                                                                    Value.Integer 4)
                                                                                ]
                                                                            ]
                                                                          |);
                                                                          M.closure
                                                                            (fun γ =>
                                                                              ltac:(M.monadic
                                                                                match γ with
                                                                                | [ α0 ] =>
                                                                                  M.match_operator (|
                                                                                    M.alloc (|
                                                                                      α0
                                                                                    |),
                                                                                    [
                                                                                      fun γ =>
                                                                                        ltac:(M.monadic
                                                                                          (let x :=
                                                                                            M.copy (|
                                                                                              γ
                                                                                            |) in
                                                                                          M.call_closure (|
                                                                                            M.get_trait_method (|
                                                                                              "core::ops::arith::Mul",
                                                                                              Ty.apply
                                                                                                (Ty.path
                                                                                                  "halo2_proofs::plonk::circuit::Expression")
                                                                                                [ F
                                                                                                ],
                                                                                              [
                                                                                                Ty.apply
                                                                                                  (Ty.path
                                                                                                    "halo2_proofs::plonk::circuit::Expression")
                                                                                                  [
                                                                                                    F
                                                                                                  ]
                                                                                              ],
                                                                                              "mul",
                                                                                              []
                                                                                            |),
                                                                                            [
                                                                                              M.call_closure (|
                                                                                                M.get_trait_method (|
                                                                                                  "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                                                  Ty.apply
                                                                                                    (Ty.path
                                                                                                      "delphinus_zkwasm::circuits::cell::AllocatedU16Cell")
                                                                                                    [
                                                                                                      F
                                                                                                    ],
                                                                                                  [
                                                                                                    F
                                                                                                  ],
                                                                                                  "curr_expr",
                                                                                                  []
                                                                                                |),
                                                                                                [
                                                                                                  M.SubPointer.get_array_field (|
                                                                                                    u16_cells_le,
                                                                                                    x
                                                                                                  |);
                                                                                                  M.read (|
                                                                                                    meta
                                                                                                  |)
                                                                                                ]
                                                                                              |);
                                                                                              Value.StructTuple
                                                                                                "halo2_proofs::plonk::circuit::Expression::Constant"
                                                                                                [
                                                                                                  M.call_closure (|
                                                                                                    M.get_trait_method (|
                                                                                                      "core::convert::From",
                                                                                                      F,
                                                                                                      [
                                                                                                        Ty.path
                                                                                                          "u64"
                                                                                                      ],
                                                                                                      "from",
                                                                                                      []
                                                                                                    |),
                                                                                                    [
                                                                                                      M.read (|
                                                                                                        M.use
                                                                                                          (M.alloc (|
                                                                                                            BinOp.Panic.shl (|
                                                                                                              Value.Integer
                                                                                                                1,
                                                                                                              BinOp.Panic.mul (|
                                                                                                                Integer.Usize,
                                                                                                                Value.Integer
                                                                                                                  16,
                                                                                                                M.read (|
                                                                                                                  x
                                                                                                                |)
                                                                                                              |)
                                                                                                            |)
                                                                                                          |))
                                                                                                      |)
                                                                                                    ]
                                                                                                  |)
                                                                                                ]
                                                                                            ]
                                                                                          |)))
                                                                                    ]
                                                                                  |)
                                                                                | _ =>
                                                                                  M.impossible (||)
                                                                                end))
                                                                        ]
                                                                      |);
                                                                      M.read (| init |);
                                                                      M.closure
                                                                        (fun γ =>
                                                                          ltac:(M.monadic
                                                                            match γ with
                                                                            | [ α0; α1 ] =>
                                                                              M.match_operator (|
                                                                                M.alloc (| α0 |),
                                                                                [
                                                                                  fun γ =>
                                                                                    ltac:(M.monadic
                                                                                      (let acc :=
                                                                                        M.copy (|
                                                                                          γ
                                                                                        |) in
                                                                                      M.match_operator (|
                                                                                        M.alloc (|
                                                                                          α1
                                                                                        |),
                                                                                        [
                                                                                          fun γ =>
                                                                                            ltac:(M.monadic
                                                                                              (let
                                                                                                    x :=
                                                                                                M.copy (|
                                                                                                  γ
                                                                                                |) in
                                                                                              M.call_closure (|
                                                                                                M.get_trait_method (|
                                                                                                  "core::ops::arith::Sub",
                                                                                                  Ty.apply
                                                                                                    (Ty.path
                                                                                                      "halo2_proofs::plonk::circuit::Expression")
                                                                                                    [
                                                                                                      F
                                                                                                    ],
                                                                                                  [
                                                                                                    Ty.apply
                                                                                                      (Ty.path
                                                                                                        "halo2_proofs::plonk::circuit::Expression")
                                                                                                      [
                                                                                                        F
                                                                                                      ]
                                                                                                  ],
                                                                                                  "sub",
                                                                                                  []
                                                                                                |),
                                                                                                [
                                                                                                  M.read (|
                                                                                                    acc
                                                                                                  |);
                                                                                                  M.read (|
                                                                                                    x
                                                                                                  |)
                                                                                                ]
                                                                                              |)))
                                                                                        ]
                                                                                      |)))
                                                                                ]
                                                                              |)
                                                                            | _ => M.impossible (||)
                                                                            end))
                                                                    ]
                                                                  |);
                                                                  M.call_closure (|
                                                                    M.get_trait_method (|
                                                                      "core::ops::function::Fn",
                                                                      impl_Fn__mut_VirtualCells_'___F___arrow_Expression_F_,
                                                                      [
                                                                        Ty.tuple
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path "&mut")
                                                                              [
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "halo2_proofs::plonk::circuit::VirtualCells")
                                                                                  [ F ]
                                                                              ]
                                                                          ]
                                                                      ],
                                                                      "call",
                                                                      []
                                                                    |),
                                                                    [
                                                                      enable;
                                                                      Value.Tuple
                                                                        [ M.read (| meta |) ]
                                                                    ]
                                                                  |)
                                                                ]
                                                              |)
                                                            ]
                                                        |)
                                                      ]
                                                    |)
                                                  |))
                                              ]
                                            |)
                                          |)
                                        |)))
                                  ]
                                |)
                              | _ => M.impossible (||)
                              end))
                      ]
                    |)
                  |) in
                M.alloc (|
                  Value.StructRecord
                    "delphinus_zkwasm::circuits::cell::AllocatedU64Cell"
                    [
                      ("u16_cells_le", M.read (| u16_cells_le |));
                      ("u64_cell", M.read (| u64_cell |))
                    ]
                |)
              |)))
          | _, _ => M.impossible
          end.
        
        Axiom AssociatedFunction_prepare_alloc_u64_cell :
          forall (F : Ty.t),
          M.IsAssociatedFunction (Self F) "prepare_alloc_u64_cell" (prepare_alloc_u64_cell F).
        
        (*
            pub(super) fn new(
                meta: &mut ConstraintSystem<F>,
                k: u32,
                sel: Column<Fixed>,
                rtable: &RangeTableConfig<F>,
                cols: &mut impl Iterator<Item = Column<Advice>>,
            ) -> Self {
                let mut allocator = Self::_new(meta, k, sel.clone(), rtable, cols);
                for _ in 0..U32_CELLS {
                    let cell = allocator.prepare_alloc_u32_cell();
                    allocator.free_u32_cells.push(cell);
                }
                for _ in 0..U64_CELLS {
                    let cell = allocator.prepare_alloc_u64_cell(meta, |meta| fixed_curr!(meta, sel));
                    allocator.free_u64_cells.push(cell);
                }
                allocator
            }
        *)
        Definition new (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self F in
          match τ, α with
          | [ impl_Iterator_Item___Column_Advice__ ], [ meta; k; sel; rtable; cols ] =>
            ltac:(M.monadic
              (let meta := M.alloc (| meta |) in
              let k := M.alloc (| k |) in
              let sel := M.alloc (| sel |) in
              let rtable := M.alloc (| rtable |) in
              let cols := M.alloc (| cols |) in
              M.read (|
                let allocator :=
                  M.alloc (|
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path
                            "delphinus_zkwasm::circuits::mtable::allocator::MemoryTableCellAllocator")
                          [ F ],
                        "_new",
                        [ impl_Iterator_Item___Column_Advice__ ]
                      |),
                      [
                        M.read (| meta |);
                        M.read (| k |);
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::clone::Clone",
                            Ty.apply
                              (Ty.path "halo2_proofs::plonk::circuit::Column")
                              [ Ty.path "halo2_proofs::plonk::circuit::Fixed" ],
                            [],
                            "clone",
                            []
                          |),
                          [ sel ]
                        |);
                        M.read (| rtable |);
                        M.read (| cols |)
                      ]
                    |)
                  |) in
                let _ :=
                  M.use
                    (M.match_operator (|
                      M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::iter::traits::collect::IntoIterator",
                            Ty.apply (Ty.path "core::ops::range::Range") [ Ty.path "usize" ],
                            [],
                            "into_iter",
                            []
                          |),
                          [
                            Value.StructRecord
                              "core::ops::range::Range"
                              [
                                ("start", Value.Integer 0);
                                ("end_",
                                  M.read (|
                                    M.get_constant (|
                                      "delphinus_zkwasm::circuits::mtable::allocator::U32_CELLS"
                                    |)
                                  |))
                              ]
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let iter := M.copy (| γ |) in
                            M.loop (|
                              ltac:(M.monadic
                                (let _ :=
                                  M.match_operator (|
                                    M.alloc (|
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "core::iter::traits::iterator::Iterator",
                                          Ty.apply
                                            (Ty.path "core::ops::range::Range")
                                            [ Ty.path "usize" ],
                                          [],
                                          "next",
                                          []
                                        |),
                                        [ iter ]
                                      |)
                                    |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (M.alloc (|
                                            M.never_to_any (| M.read (| M.break (||) |) |)
                                          |)));
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let γ0_0 :=
                                            M.SubPointer.get_struct_tuple_field (|
                                              γ,
                                              "core::option::Option::Some",
                                              0
                                            |) in
                                          let cell :=
                                            M.alloc (|
                                              M.call_closure (|
                                                M.get_associated_function (|
                                                  Ty.apply
                                                    (Ty.path
                                                      "delphinus_zkwasm::circuits::mtable::allocator::MemoryTableCellAllocator")
                                                    [ F ],
                                                  "prepare_alloc_u32_cell",
                                                  []
                                                |),
                                                [ allocator ]
                                              |)
                                            |) in
                                          let _ :=
                                            M.alloc (|
                                              M.call_closure (|
                                                M.get_associated_function (|
                                                  Ty.apply
                                                    (Ty.path "alloc::vec::Vec")
                                                    [
                                                      Ty.apply
                                                        (Ty.path
                                                          "delphinus_zkwasm::circuits::cell::AllocatedU32Cell")
                                                        [ F ];
                                                      Ty.path "alloc::alloc::Global"
                                                    ],
                                                  "push",
                                                  []
                                                |),
                                                [
                                                  M.SubPointer.get_struct_record_field (|
                                                    allocator,
                                                    "delphinus_zkwasm::circuits::mtable::allocator::MemoryTableCellAllocator",
                                                    "free_u32_cells"
                                                  |);
                                                  M.read (| cell |)
                                                ]
                                              |)
                                            |) in
                                          M.alloc (| Value.Tuple [] |)))
                                    ]
                                  |) in
                                M.alloc (| Value.Tuple [] |)))
                            |)))
                      ]
                    |)) in
                let _ :=
                  M.use
                    (M.match_operator (|
                      M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::iter::traits::collect::IntoIterator",
                            Ty.apply (Ty.path "core::ops::range::Range") [ Ty.path "usize" ],
                            [],
                            "into_iter",
                            []
                          |),
                          [
                            Value.StructRecord
                              "core::ops::range::Range"
                              [
                                ("start", Value.Integer 0);
                                ("end_",
                                  M.read (|
                                    M.get_constant (|
                                      "delphinus_zkwasm::circuits::mtable::allocator::U64_CELLS"
                                    |)
                                  |))
                              ]
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let iter := M.copy (| γ |) in
                            M.loop (|
                              ltac:(M.monadic
                                (let _ :=
                                  M.match_operator (|
                                    M.alloc (|
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "core::iter::traits::iterator::Iterator",
                                          Ty.apply
                                            (Ty.path "core::ops::range::Range")
                                            [ Ty.path "usize" ],
                                          [],
                                          "next",
                                          []
                                        |),
                                        [ iter ]
                                      |)
                                    |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (M.alloc (|
                                            M.never_to_any (| M.read (| M.break (||) |) |)
                                          |)));
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let γ0_0 :=
                                            M.SubPointer.get_struct_tuple_field (|
                                              γ,
                                              "core::option::Option::Some",
                                              0
                                            |) in
                                          let cell :=
                                            M.alloc (|
                                              M.call_closure (|
                                                M.get_associated_function (|
                                                  Ty.apply
                                                    (Ty.path
                                                      "delphinus_zkwasm::circuits::mtable::allocator::MemoryTableCellAllocator")
                                                    [ F ],
                                                  "prepare_alloc_u64_cell",
                                                  [
                                                    Ty.function
                                                      [
                                                        Ty.tuple
                                                          [
                                                            Ty.apply
                                                              (Ty.path "&mut")
                                                              [
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "halo2_proofs::plonk::circuit::VirtualCells")
                                                                  [ F ]
                                                              ]
                                                          ]
                                                      ]
                                                      (Ty.apply
                                                        (Ty.path
                                                          "halo2_proofs::plonk::circuit::Expression")
                                                        [ F ])
                                                  ]
                                                |),
                                                [
                                                  allocator;
                                                  M.read (| meta |);
                                                  M.closure
                                                    (fun γ =>
                                                      ltac:(M.monadic
                                                        match γ with
                                                        | [ α0 ] =>
                                                          M.match_operator (|
                                                            M.alloc (| α0 |),
                                                            [
                                                              fun γ =>
                                                                ltac:(M.monadic
                                                                  (let meta := M.copy (| γ |) in
                                                                  M.call_closure (|
                                                                    M.get_associated_function (|
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "halo2_proofs::plonk::circuit::VirtualCells")
                                                                        [ F ],
                                                                      "query_fixed",
                                                                      []
                                                                    |),
                                                                    [
                                                                      M.read (| meta |);
                                                                      M.read (| sel |);
                                                                      M.call_closure (|
                                                                        M.get_associated_function (|
                                                                          Ty.path
                                                                            "halo2_proofs::poly::Rotation",
                                                                          "cur",
                                                                          []
                                                                        |),
                                                                        []
                                                                      |)
                                                                    ]
                                                                  |)))
                                                            ]
                                                          |)
                                                        | _ => M.impossible (||)
                                                        end))
                                                ]
                                              |)
                                            |) in
                                          let _ :=
                                            M.alloc (|
                                              M.call_closure (|
                                                M.get_associated_function (|
                                                  Ty.apply
                                                    (Ty.path "alloc::vec::Vec")
                                                    [
                                                      Ty.apply
                                                        (Ty.path
                                                          "delphinus_zkwasm::circuits::cell::AllocatedU64Cell")
                                                        [ F ];
                                                      Ty.path "alloc::alloc::Global"
                                                    ],
                                                  "push",
                                                  []
                                                |),
                                                [
                                                  M.SubPointer.get_struct_record_field (|
                                                    allocator,
                                                    "delphinus_zkwasm::circuits::mtable::allocator::MemoryTableCellAllocator",
                                                    "free_u64_cells"
                                                  |);
                                                  M.read (| cell |)
                                                ]
                                              |)
                                            |) in
                                          M.alloc (| Value.Tuple [] |)))
                                    ]
                                  |) in
                                M.alloc (| Value.Tuple [] |)))
                            |)))
                      ]
                    |)) in
                allocator
              |)))
          | _, _ => M.impossible
          end.
        
        Axiom AssociatedFunction_new :
          forall (F : Ty.t),
          M.IsAssociatedFunction (Self F) "new" (new F).
        
        (*
            fn _new(
                meta: &mut ConstraintSystem<F>,
                k: u32,
                sel: Column<Fixed>,
                rtable: &RangeTableConfig<F>,
                cols: &mut impl Iterator<Item = Column<Advice>>,
            ) -> Self {
                let mut all_cols = BTreeMap::new();
                all_cols.insert(
                    MemoryTableCellType::Bit,
                    [0; BIT_COLUMNS]
                        .map(|_| BitColumn::configure(meta, cols, |meta| fixed_curr!(meta, sel)).col)
                        .into_iter()
                        .collect(),
                );
                all_cols.insert(
                    MemoryTableCellType::U16,
                    [0; U16_COLUMNS]
                        .map(|_| U16Column::configure(meta, cols, rtable, |_| constant_from!(1)).col)
                        .into_iter()
                        .collect(),
                );
                all_cols.insert(
                    MemoryTableCellType::CommonRange,
                    [0; COMMON_RANGE_COLUMNS]
                        .map(|_| {
                            CommonRangeColumn::configure(meta, cols, rtable, |_| constant_from!(1)).col
                        })
                        .into_iter()
                        .collect(),
                );
                all_cols.insert(
                    MemoryTableCellType::Unlimited,
                    [0; UNLIMITED_COLUMNS]
                        .map(|_| cols.next().unwrap())
                        .into_iter()
                        .collect(),
                );
                Self {
                    k,
                    all_cols,
                    free_cells: BTreeMap::from_iter(
                        vec![
                            (MemoryTableCellType::Bit, (0, 0)),
                            (MemoryTableCellType::U16, (0, 0)),
                            (MemoryTableCellType::CommonRange, (0, 0)),
                            (MemoryTableCellType::Unlimited, (0, 0)),
                        ]
                        .into_iter(),
                    ),
                    free_u32_cells: vec![],
                    free_u64_cells: vec![],
                    _mark: PhantomData,
                }
            }
        *)
        Definition _new (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self F in
          match τ, α with
          | [ impl_Iterator_Item___Column_Advice__ ], [ meta; k; sel; rtable; cols ] =>
            ltac:(M.monadic
              (let meta := M.alloc (| meta |) in
              let k := M.alloc (| k |) in
              let sel := M.alloc (| sel |) in
              let rtable := M.alloc (| rtable |) in
              let cols := M.alloc (| cols |) in
              M.read (|
                let all_cols :=
                  M.alloc (|
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path "alloc::collections::btree::map::BTreeMap")
                          [
                            Ty.path
                              "delphinus_zkwasm::circuits::mtable::allocator::MemoryTableCellType";
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              [
                                Ty.apply
                                  (Ty.path "halo2_proofs::plonk::circuit::Column")
                                  [ Ty.path "halo2_proofs::plonk::circuit::Advice" ];
                                Ty.path "alloc::alloc::Global"
                              ];
                            Ty.path "alloc::alloc::Global"
                          ],
                        "new",
                        []
                      |),
                      []
                    |)
                  |) in
                let _ :=
                  M.alloc (|
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path "alloc::collections::btree::map::BTreeMap")
                          [
                            Ty.path
                              "delphinus_zkwasm::circuits::mtable::allocator::MemoryTableCellType";
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              [
                                Ty.apply
                                  (Ty.path "halo2_proofs::plonk::circuit::Column")
                                  [ Ty.path "halo2_proofs::plonk::circuit::Advice" ];
                                Ty.path "alloc::alloc::Global"
                              ];
                            Ty.path "alloc::alloc::Global"
                          ],
                        "insert",
                        []
                      |),
                      [
                        all_cols;
                        Value.StructTuple
                          "delphinus_zkwasm::circuits::mtable::allocator::MemoryTableCellType::Bit"
                          [];
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::iter::traits::iterator::Iterator",
                            Ty.apply
                              (Ty.path "core::array::iter::IntoIter")
                              [
                                Ty.apply
                                  (Ty.path "halo2_proofs::plonk::circuit::Column")
                                  [ Ty.path "halo2_proofs::plonk::circuit::Advice" ]
                              ],
                            [],
                            "collect",
                            [
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                [
                                  Ty.apply
                                    (Ty.path "halo2_proofs::plonk::circuit::Column")
                                    [ Ty.path "halo2_proofs::plonk::circuit::Advice" ];
                                  Ty.path "alloc::alloc::Global"
                                ]
                            ]
                          |),
                          [
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::iter::traits::collect::IntoIterator",
                                Ty.apply
                                  (Ty.path "array")
                                  [
                                    Ty.apply
                                      (Ty.path "halo2_proofs::plonk::circuit::Column")
                                      [ Ty.path "halo2_proofs::plonk::circuit::Advice" ]
                                  ],
                                [],
                                "into_iter",
                                []
                              |),
                              [
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.apply (Ty.path "array") [ Ty.path "i32" ],
                                    "map",
                                    [
                                      Ty.function
                                        [ Ty.tuple [ Ty.path "i32" ] ]
                                        (Ty.apply
                                          (Ty.path "halo2_proofs::plonk::circuit::Column")
                                          [ Ty.path "halo2_proofs::plonk::circuit::Advice" ]);
                                      Ty.apply
                                        (Ty.path "halo2_proofs::plonk::circuit::Column")
                                        [ Ty.path "halo2_proofs::plonk::circuit::Advice" ]
                                    ]
                                  |),
                                  [
                                    repeat (Value.Integer 0) 3;
                                    M.closure
                                      (fun γ =>
                                        ltac:(M.monadic
                                          match γ with
                                          | [ α0 ] =>
                                            M.match_operator (|
                                              M.alloc (| α0 |),
                                              [
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (M.read (|
                                                      M.SubPointer.get_struct_record_field (|
                                                        M.alloc (|
                                                          M.call_closure (|
                                                            M.get_associated_function (|
                                                              Ty.apply
                                                                (Ty.path
                                                                  "delphinus_zkwasm::circuits::utils::bit::BitColumn")
                                                                [ F ],
                                                              "configure",
                                                              [
                                                                impl_Iterator_Item___Column_Advice__;
                                                                Ty.function
                                                                  [
                                                                    Ty.tuple
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path "&mut")
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "halo2_proofs::plonk::circuit::VirtualCells")
                                                                              [ F ]
                                                                          ]
                                                                      ]
                                                                  ]
                                                                  (Ty.apply
                                                                    (Ty.path
                                                                      "halo2_proofs::plonk::circuit::Expression")
                                                                    [ F ])
                                                              ]
                                                            |),
                                                            [
                                                              M.read (| meta |);
                                                              M.read (| cols |);
                                                              M.closure
                                                                (fun γ =>
                                                                  ltac:(M.monadic
                                                                    match γ with
                                                                    | [ α0 ] =>
                                                                      M.match_operator (|
                                                                        M.alloc (| α0 |),
                                                                        [
                                                                          fun γ =>
                                                                            ltac:(M.monadic
                                                                              (let meta :=
                                                                                M.copy (| γ |) in
                                                                              M.call_closure (|
                                                                                M.get_associated_function (|
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "halo2_proofs::plonk::circuit::VirtualCells")
                                                                                    [ F ],
                                                                                  "query_fixed",
                                                                                  []
                                                                                |),
                                                                                [
                                                                                  M.read (| meta |);
                                                                                  M.read (| sel |);
                                                                                  M.call_closure (|
                                                                                    M.get_associated_function (|
                                                                                      Ty.path
                                                                                        "halo2_proofs::poly::Rotation",
                                                                                      "cur",
                                                                                      []
                                                                                    |),
                                                                                    []
                                                                                  |)
                                                                                ]
                                                                              |)))
                                                                        ]
                                                                      |)
                                                                    | _ => M.impossible (||)
                                                                    end))
                                                            ]
                                                          |)
                                                        |),
                                                        "delphinus_zkwasm::circuits::utils::bit::BitColumn",
                                                        "col"
                                                      |)
                                                    |)))
                                              ]
                                            |)
                                          | _ => M.impossible (||)
                                          end))
                                  ]
                                |)
                              ]
                            |)
                          ]
                        |)
                      ]
                    |)
                  |) in
                let _ :=
                  M.alloc (|
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path "alloc::collections::btree::map::BTreeMap")
                          [
                            Ty.path
                              "delphinus_zkwasm::circuits::mtable::allocator::MemoryTableCellType";
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              [
                                Ty.apply
                                  (Ty.path "halo2_proofs::plonk::circuit::Column")
                                  [ Ty.path "halo2_proofs::plonk::circuit::Advice" ];
                                Ty.path "alloc::alloc::Global"
                              ];
                            Ty.path "alloc::alloc::Global"
                          ],
                        "insert",
                        []
                      |),
                      [
                        all_cols;
                        Value.StructTuple
                          "delphinus_zkwasm::circuits::mtable::allocator::MemoryTableCellType::U16"
                          [];
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::iter::traits::iterator::Iterator",
                            Ty.apply
                              (Ty.path "core::array::iter::IntoIter")
                              [
                                Ty.apply
                                  (Ty.path "halo2_proofs::plonk::circuit::Column")
                                  [ Ty.path "halo2_proofs::plonk::circuit::Advice" ]
                              ],
                            [],
                            "collect",
                            [
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                [
                                  Ty.apply
                                    (Ty.path "halo2_proofs::plonk::circuit::Column")
                                    [ Ty.path "halo2_proofs::plonk::circuit::Advice" ];
                                  Ty.path "alloc::alloc::Global"
                                ]
                            ]
                          |),
                          [
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::iter::traits::collect::IntoIterator",
                                Ty.apply
                                  (Ty.path "array")
                                  [
                                    Ty.apply
                                      (Ty.path "halo2_proofs::plonk::circuit::Column")
                                      [ Ty.path "halo2_proofs::plonk::circuit::Advice" ]
                                  ],
                                [],
                                "into_iter",
                                []
                              |),
                              [
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.apply (Ty.path "array") [ Ty.path "i32" ],
                                    "map",
                                    [
                                      Ty.function
                                        [ Ty.tuple [ Ty.path "i32" ] ]
                                        (Ty.apply
                                          (Ty.path "halo2_proofs::plonk::circuit::Column")
                                          [ Ty.path "halo2_proofs::plonk::circuit::Advice" ]);
                                      Ty.apply
                                        (Ty.path "halo2_proofs::plonk::circuit::Column")
                                        [ Ty.path "halo2_proofs::plonk::circuit::Advice" ]
                                    ]
                                  |),
                                  [
                                    repeat (Value.Integer 0) 2;
                                    M.closure
                                      (fun γ =>
                                        ltac:(M.monadic
                                          match γ with
                                          | [ α0 ] =>
                                            M.match_operator (|
                                              M.alloc (| α0 |),
                                              [
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (M.read (|
                                                      M.SubPointer.get_struct_record_field (|
                                                        M.alloc (|
                                                          M.call_closure (|
                                                            M.get_associated_function (|
                                                              Ty.apply
                                                                (Ty.path
                                                                  "delphinus_zkwasm::circuits::utils::u16::U16Column")
                                                                [ F ],
                                                              "configure",
                                                              [
                                                                impl_Iterator_Item___Column_Advice__;
                                                                Ty.function
                                                                  [
                                                                    Ty.tuple
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path "&mut")
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "halo2_proofs::plonk::circuit::VirtualCells")
                                                                              [ F ]
                                                                          ]
                                                                      ]
                                                                  ]
                                                                  (Ty.apply
                                                                    (Ty.path
                                                                      "halo2_proofs::plonk::circuit::Expression")
                                                                    [ F ])
                                                              ]
                                                            |),
                                                            [
                                                              M.read (| meta |);
                                                              M.read (| cols |);
                                                              M.read (| rtable |);
                                                              M.closure
                                                                (fun γ =>
                                                                  ltac:(M.monadic
                                                                    match γ with
                                                                    | [ α0 ] =>
                                                                      M.match_operator (|
                                                                        M.alloc (| α0 |),
                                                                        [
                                                                          fun γ =>
                                                                            ltac:(M.monadic
                                                                              (Value.StructTuple
                                                                                "halo2_proofs::plonk::circuit::Expression::Constant"
                                                                                [
                                                                                  M.call_closure (|
                                                                                    M.get_trait_method (|
                                                                                      "core::convert::From",
                                                                                      F,
                                                                                      [
                                                                                        Ty.path
                                                                                          "u64"
                                                                                      ],
                                                                                      "from",
                                                                                      []
                                                                                    |),
                                                                                    [
                                                                                      M.read (|
                                                                                        M.use
                                                                                          (M.alloc (|
                                                                                            Value.Integer
                                                                                              1
                                                                                          |))
                                                                                      |)
                                                                                    ]
                                                                                  |)
                                                                                ]))
                                                                        ]
                                                                      |)
                                                                    | _ => M.impossible (||)
                                                                    end))
                                                            ]
                                                          |)
                                                        |),
                                                        "delphinus_zkwasm::circuits::utils::u16::U16Column",
                                                        "col"
                                                      |)
                                                    |)))
                                              ]
                                            |)
                                          | _ => M.impossible (||)
                                          end))
                                  ]
                                |)
                              ]
                            |)
                          ]
                        |)
                      ]
                    |)
                  |) in
                let _ :=
                  M.alloc (|
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path "alloc::collections::btree::map::BTreeMap")
                          [
                            Ty.path
                              "delphinus_zkwasm::circuits::mtable::allocator::MemoryTableCellType";
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              [
                                Ty.apply
                                  (Ty.path "halo2_proofs::plonk::circuit::Column")
                                  [ Ty.path "halo2_proofs::plonk::circuit::Advice" ];
                                Ty.path "alloc::alloc::Global"
                              ];
                            Ty.path "alloc::alloc::Global"
                          ],
                        "insert",
                        []
                      |),
                      [
                        all_cols;
                        Value.StructTuple
                          "delphinus_zkwasm::circuits::mtable::allocator::MemoryTableCellType::CommonRange"
                          [];
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::iter::traits::iterator::Iterator",
                            Ty.apply
                              (Ty.path "core::array::iter::IntoIter")
                              [
                                Ty.apply
                                  (Ty.path "halo2_proofs::plonk::circuit::Column")
                                  [ Ty.path "halo2_proofs::plonk::circuit::Advice" ]
                              ],
                            [],
                            "collect",
                            [
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                [
                                  Ty.apply
                                    (Ty.path "halo2_proofs::plonk::circuit::Column")
                                    [ Ty.path "halo2_proofs::plonk::circuit::Advice" ];
                                  Ty.path "alloc::alloc::Global"
                                ]
                            ]
                          |),
                          [
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::iter::traits::collect::IntoIterator",
                                Ty.apply
                                  (Ty.path "array")
                                  [
                                    Ty.apply
                                      (Ty.path "halo2_proofs::plonk::circuit::Column")
                                      [ Ty.path "halo2_proofs::plonk::circuit::Advice" ]
                                  ],
                                [],
                                "into_iter",
                                []
                              |),
                              [
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.apply (Ty.path "array") [ Ty.path "i32" ],
                                    "map",
                                    [
                                      Ty.function
                                        [ Ty.tuple [ Ty.path "i32" ] ]
                                        (Ty.apply
                                          (Ty.path "halo2_proofs::plonk::circuit::Column")
                                          [ Ty.path "halo2_proofs::plonk::circuit::Advice" ]);
                                      Ty.apply
                                        (Ty.path "halo2_proofs::plonk::circuit::Column")
                                        [ Ty.path "halo2_proofs::plonk::circuit::Advice" ]
                                    ]
                                  |),
                                  [
                                    repeat (Value.Integer 0) 1;
                                    M.closure
                                      (fun γ =>
                                        ltac:(M.monadic
                                          match γ with
                                          | [ α0 ] =>
                                            M.match_operator (|
                                              M.alloc (| α0 |),
                                              [
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (M.read (|
                                                      M.SubPointer.get_struct_record_field (|
                                                        M.alloc (|
                                                          M.call_closure (|
                                                            M.get_associated_function (|
                                                              Ty.apply
                                                                (Ty.path
                                                                  "delphinus_zkwasm::circuits::utils::common_range::CommonRangeColumn")
                                                                [ F ],
                                                              "configure",
                                                              [
                                                                impl_Iterator_Item___Column_Advice__;
                                                                Ty.function
                                                                  [
                                                                    Ty.tuple
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path "&mut")
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "halo2_proofs::plonk::circuit::VirtualCells")
                                                                              [ F ]
                                                                          ]
                                                                      ]
                                                                  ]
                                                                  (Ty.apply
                                                                    (Ty.path
                                                                      "halo2_proofs::plonk::circuit::Expression")
                                                                    [ F ])
                                                              ]
                                                            |),
                                                            [
                                                              M.read (| meta |);
                                                              M.read (| cols |);
                                                              M.read (| rtable |);
                                                              M.closure
                                                                (fun γ =>
                                                                  ltac:(M.monadic
                                                                    match γ with
                                                                    | [ α0 ] =>
                                                                      M.match_operator (|
                                                                        M.alloc (| α0 |),
                                                                        [
                                                                          fun γ =>
                                                                            ltac:(M.monadic
                                                                              (Value.StructTuple
                                                                                "halo2_proofs::plonk::circuit::Expression::Constant"
                                                                                [
                                                                                  M.call_closure (|
                                                                                    M.get_trait_method (|
                                                                                      "core::convert::From",
                                                                                      F,
                                                                                      [
                                                                                        Ty.path
                                                                                          "u64"
                                                                                      ],
                                                                                      "from",
                                                                                      []
                                                                                    |),
                                                                                    [
                                                                                      M.read (|
                                                                                        M.use
                                                                                          (M.alloc (|
                                                                                            Value.Integer
                                                                                              1
                                                                                          |))
                                                                                      |)
                                                                                    ]
                                                                                  |)
                                                                                ]))
                                                                        ]
                                                                      |)
                                                                    | _ => M.impossible (||)
                                                                    end))
                                                            ]
                                                          |)
                                                        |),
                                                        "delphinus_zkwasm::circuits::utils::common_range::CommonRangeColumn",
                                                        "col"
                                                      |)
                                                    |)))
                                              ]
                                            |)
                                          | _ => M.impossible (||)
                                          end))
                                  ]
                                |)
                              ]
                            |)
                          ]
                        |)
                      ]
                    |)
                  |) in
                let _ :=
                  M.alloc (|
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path "alloc::collections::btree::map::BTreeMap")
                          [
                            Ty.path
                              "delphinus_zkwasm::circuits::mtable::allocator::MemoryTableCellType";
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              [
                                Ty.apply
                                  (Ty.path "halo2_proofs::plonk::circuit::Column")
                                  [ Ty.path "halo2_proofs::plonk::circuit::Advice" ];
                                Ty.path "alloc::alloc::Global"
                              ];
                            Ty.path "alloc::alloc::Global"
                          ],
                        "insert",
                        []
                      |),
                      [
                        all_cols;
                        Value.StructTuple
                          "delphinus_zkwasm::circuits::mtable::allocator::MemoryTableCellType::Unlimited"
                          [];
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::iter::traits::iterator::Iterator",
                            Ty.apply
                              (Ty.path "core::array::iter::IntoIter")
                              [
                                Ty.apply
                                  (Ty.path "halo2_proofs::plonk::circuit::Column")
                                  [ Ty.path "halo2_proofs::plonk::circuit::Advice" ]
                              ],
                            [],
                            "collect",
                            [
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                [
                                  Ty.apply
                                    (Ty.path "halo2_proofs::plonk::circuit::Column")
                                    [ Ty.path "halo2_proofs::plonk::circuit::Advice" ];
                                  Ty.path "alloc::alloc::Global"
                                ]
                            ]
                          |),
                          [
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::iter::traits::collect::IntoIterator",
                                Ty.apply
                                  (Ty.path "array")
                                  [
                                    Ty.apply
                                      (Ty.path "halo2_proofs::plonk::circuit::Column")
                                      [ Ty.path "halo2_proofs::plonk::circuit::Advice" ]
                                  ],
                                [],
                                "into_iter",
                                []
                              |),
                              [
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.apply (Ty.path "array") [ Ty.path "i32" ],
                                    "map",
                                    [
                                      Ty.function
                                        [ Ty.tuple [ Ty.path "i32" ] ]
                                        (Ty.apply
                                          (Ty.path "halo2_proofs::plonk::circuit::Column")
                                          [ Ty.path "halo2_proofs::plonk::circuit::Advice" ]);
                                      Ty.apply
                                        (Ty.path "halo2_proofs::plonk::circuit::Column")
                                        [ Ty.path "halo2_proofs::plonk::circuit::Advice" ]
                                    ]
                                  |),
                                  [
                                    repeat (Value.Integer 0) 2;
                                    M.closure
                                      (fun γ =>
                                        ltac:(M.monadic
                                          match γ with
                                          | [ α0 ] =>
                                            M.match_operator (|
                                              M.alloc (| α0 |),
                                              [
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (M.call_closure (|
                                                      M.get_associated_function (|
                                                        Ty.apply
                                                          (Ty.path "core::option::Option")
                                                          [
                                                            Ty.apply
                                                              (Ty.path
                                                                "halo2_proofs::plonk::circuit::Column")
                                                              [
                                                                Ty.path
                                                                  "halo2_proofs::plonk::circuit::Advice"
                                                              ]
                                                          ],
                                                        "unwrap",
                                                        []
                                                      |),
                                                      [
                                                        M.call_closure (|
                                                          M.get_trait_method (|
                                                            "core::iter::traits::iterator::Iterator",
                                                            impl_Iterator_Item___Column_Advice__,
                                                            [],
                                                            "next",
                                                            []
                                                          |),
                                                          [ M.read (| cols |) ]
                                                        |)
                                                      ]
                                                    |)))
                                              ]
                                            |)
                                          | _ => M.impossible (||)
                                          end))
                                  ]
                                |)
                              ]
                            |)
                          ]
                        |)
                      ]
                    |)
                  |) in
                M.alloc (|
                  Value.StructRecord
                    "delphinus_zkwasm::circuits::mtable::allocator::MemoryTableCellAllocator"
                    [
                      ("k", M.read (| k |));
                      ("all_cols", M.read (| all_cols |));
                      ("free_cells",
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::iter::traits::collect::FromIterator",
                            Ty.apply
                              (Ty.path "alloc::collections::btree::map::BTreeMap")
                              [
                                Ty.path
                                  "delphinus_zkwasm::circuits::mtable::allocator::MemoryTableCellType";
                                Ty.tuple [ Ty.path "usize"; Ty.path "u32" ];
                                Ty.path "alloc::alloc::Global"
                              ],
                            [
                              Ty.tuple
                                [
                                  Ty.path
                                    "delphinus_zkwasm::circuits::mtable::allocator::MemoryTableCellType";
                                  Ty.tuple [ Ty.path "usize"; Ty.path "u32" ]
                                ]
                            ],
                            "from_iter",
                            [
                              Ty.apply
                                (Ty.path "alloc::vec::into_iter::IntoIter")
                                [
                                  Ty.tuple
                                    [
                                      Ty.path
                                        "delphinus_zkwasm::circuits::mtable::allocator::MemoryTableCellType";
                                      Ty.tuple [ Ty.path "usize"; Ty.path "u32" ]
                                    ];
                                  Ty.path "alloc::alloc::Global"
                                ]
                            ]
                          |),
                          [
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::iter::traits::collect::IntoIterator",
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  [
                                    Ty.tuple
                                      [
                                        Ty.path
                                          "delphinus_zkwasm::circuits::mtable::allocator::MemoryTableCellType";
                                        Ty.tuple [ Ty.path "usize"; Ty.path "u32" ]
                                      ];
                                    Ty.path "alloc::alloc::Global"
                                  ],
                                [],
                                "into_iter",
                                []
                              |),
                              [
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.apply
                                      (Ty.path "slice")
                                      [
                                        Ty.tuple
                                          [
                                            Ty.path
                                              "delphinus_zkwasm::circuits::mtable::allocator::MemoryTableCellType";
                                            Ty.tuple [ Ty.path "usize"; Ty.path "u32" ]
                                          ]
                                      ],
                                    "into_vec",
                                    [ Ty.path "alloc::alloc::Global" ]
                                  |),
                                  [
                                    (* Unsize *)
                                    M.pointer_coercion
                                      (M.read (|
                                        M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.apply
                                              (Ty.path "alloc::boxed::Box")
                                              [
                                                Ty.apply
                                                  (Ty.path "array")
                                                  [
                                                    Ty.tuple
                                                      [
                                                        Ty.path
                                                          "delphinus_zkwasm::circuits::mtable::allocator::MemoryTableCellType";
                                                        Ty.tuple [ Ty.path "usize"; Ty.path "u32" ]
                                                      ]
                                                  ];
                                                Ty.path "alloc::alloc::Global"
                                              ],
                                            "new",
                                            []
                                          |),
                                          [
                                            M.alloc (|
                                              Value.Array
                                                [
                                                  Value.Tuple
                                                    [
                                                      Value.StructTuple
                                                        "delphinus_zkwasm::circuits::mtable::allocator::MemoryTableCellType::Bit"
                                                        [];
                                                      Value.Tuple
                                                        [ Value.Integer 0; Value.Integer 0 ]
                                                    ];
                                                  Value.Tuple
                                                    [
                                                      Value.StructTuple
                                                        "delphinus_zkwasm::circuits::mtable::allocator::MemoryTableCellType::U16"
                                                        [];
                                                      Value.Tuple
                                                        [ Value.Integer 0; Value.Integer 0 ]
                                                    ];
                                                  Value.Tuple
                                                    [
                                                      Value.StructTuple
                                                        "delphinus_zkwasm::circuits::mtable::allocator::MemoryTableCellType::CommonRange"
                                                        [];
                                                      Value.Tuple
                                                        [ Value.Integer 0; Value.Integer 0 ]
                                                    ];
                                                  Value.Tuple
                                                    [
                                                      Value.StructTuple
                                                        "delphinus_zkwasm::circuits::mtable::allocator::MemoryTableCellType::Unlimited"
                                                        [];
                                                      Value.Tuple
                                                        [ Value.Integer 0; Value.Integer 0 ]
                                                    ]
                                                ]
                                            |)
                                          ]
                                        |)
                                      |))
                                  ]
                                |)
                              ]
                            |)
                          ]
                        |));
                      ("free_u32_cells",
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              [
                                Ty.apply
                                  (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedU32Cell")
                                  [ F ];
                                Ty.path "alloc::alloc::Global"
                              ],
                            "new",
                            []
                          |),
                          []
                        |));
                      ("free_u64_cells",
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              [
                                Ty.apply
                                  (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedU64Cell")
                                  [ F ];
                                Ty.path "alloc::alloc::Global"
                              ],
                            "new",
                            []
                          |),
                          []
                        |));
                      ("_mark", Value.StructTuple "core::marker::PhantomData" [])
                    ]
                |)
              |)))
          | _, _ => M.impossible
          end.
        
        Axiom AssociatedFunction__new :
          forall (F : Ty.t),
          M.IsAssociatedFunction (Self F) "_new" (_new F).
        
        (*
            fn alloc(&mut self, t: &MemoryTableCellType) -> AllocatedCell<F> {
                let v = self.free_cells.get_mut(t).unwrap();
                let res = AllocatedCell {
                    col: self.all_cols.get(t).unwrap()[v.0],
                    rot: v.1 as i32,
                    _mark: PhantomData,
                };
        
                v.1 += 1;
                if v.1 == MEMORY_TABLE_ENTRY_ROWS as u32 {
                    v.0 += 1;
                    v.1 = 0;
                }
        
                res
            }
        *)
        Definition alloc (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self F in
          match τ, α with
          | [], [ self; t ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              let t := M.alloc (| t |) in
              M.read (|
                let v :=
                  M.alloc (|
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path "core::option::Option")
                          [
                            Ty.apply
                              (Ty.path "&mut")
                              [ Ty.tuple [ Ty.path "usize"; Ty.path "u32" ] ]
                          ],
                        "unwrap",
                        []
                      |),
                      [
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path "alloc::collections::btree::map::BTreeMap")
                              [
                                Ty.path
                                  "delphinus_zkwasm::circuits::mtable::allocator::MemoryTableCellType";
                                Ty.tuple [ Ty.path "usize"; Ty.path "u32" ];
                                Ty.path "alloc::alloc::Global"
                              ],
                            "get_mut",
                            [
                              Ty.path
                                "delphinus_zkwasm::circuits::mtable::allocator::MemoryTableCellType"
                            ]
                          |),
                          [
                            M.SubPointer.get_struct_record_field (|
                              M.read (| self |),
                              "delphinus_zkwasm::circuits::mtable::allocator::MemoryTableCellAllocator",
                              "free_cells"
                            |);
                            M.read (| t |)
                          ]
                        |)
                      ]
                    |)
                  |) in
                let res :=
                  M.alloc (|
                    Value.StructRecord
                      "delphinus_zkwasm::circuits::cell::AllocatedCell"
                      [
                        ("col",
                          M.read (|
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::ops::index::Index",
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  [
                                    Ty.apply
                                      (Ty.path "halo2_proofs::plonk::circuit::Column")
                                      [ Ty.path "halo2_proofs::plonk::circuit::Advice" ];
                                    Ty.path "alloc::alloc::Global"
                                  ],
                                [ Ty.path "usize" ],
                                "index",
                                []
                              |),
                              [
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.apply
                                      (Ty.path "core::option::Option")
                                      [
                                        Ty.apply
                                          (Ty.path "&")
                                          [
                                            Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              [
                                                Ty.apply
                                                  (Ty.path "halo2_proofs::plonk::circuit::Column")
                                                  [ Ty.path "halo2_proofs::plonk::circuit::Advice"
                                                  ];
                                                Ty.path "alloc::alloc::Global"
                                              ]
                                          ]
                                      ],
                                    "unwrap",
                                    []
                                  |),
                                  [
                                    M.call_closure (|
                                      M.get_associated_function (|
                                        Ty.apply
                                          (Ty.path "alloc::collections::btree::map::BTreeMap")
                                          [
                                            Ty.path
                                              "delphinus_zkwasm::circuits::mtable::allocator::MemoryTableCellType";
                                            Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              [
                                                Ty.apply
                                                  (Ty.path "halo2_proofs::plonk::circuit::Column")
                                                  [ Ty.path "halo2_proofs::plonk::circuit::Advice"
                                                  ];
                                                Ty.path "alloc::alloc::Global"
                                              ];
                                            Ty.path "alloc::alloc::Global"
                                          ],
                                        "get",
                                        [
                                          Ty.path
                                            "delphinus_zkwasm::circuits::mtable::allocator::MemoryTableCellType"
                                        ]
                                      |),
                                      [
                                        M.SubPointer.get_struct_record_field (|
                                          M.read (| self |),
                                          "delphinus_zkwasm::circuits::mtable::allocator::MemoryTableCellAllocator",
                                          "all_cols"
                                        |);
                                        M.read (| t |)
                                      ]
                                    |)
                                  ]
                                |);
                                M.read (| M.SubPointer.get_tuple_field (| M.read (| v |), 0 |) |)
                              ]
                            |)
                          |));
                        ("rot",
                          M.rust_cast
                            (M.read (| M.SubPointer.get_tuple_field (| M.read (| v |), 1 |) |)));
                        ("_mark", Value.StructTuple "core::marker::PhantomData" [])
                      ]
                  |) in
                let _ :=
                  let β := M.SubPointer.get_tuple_field (| M.read (| v |), 1 |) in
                  M.write (|
                    β,
                    BinOp.Panic.add (| Integer.U32, M.read (| β |), Value.Integer 1 |)
                  |) in
                let _ :=
                  M.match_operator (|
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                BinOp.Pure.eq
                                  (M.read (|
                                    M.SubPointer.get_tuple_field (| M.read (| v |), 1 |)
                                  |))
                                  (M.rust_cast
                                    (M.read (|
                                      M.get_constant (|
                                        "delphinus_zkwasm::circuits::mtable::MEMORY_TABLE_ENTRY_ROWS"
                                      |)
                                    |)))
                              |)) in
                          let _ :=
                            M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          let _ :=
                            let β := M.SubPointer.get_tuple_field (| M.read (| v |), 0 |) in
                            M.write (|
                              β,
                              BinOp.Panic.add (| Integer.Usize, M.read (| β |), Value.Integer 1 |)
                            |) in
                          let _ :=
                            M.write (|
                              M.SubPointer.get_tuple_field (| M.read (| v |), 1 |),
                              Value.Integer 0
                            |) in
                          M.alloc (| Value.Tuple [] |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                res
              |)))
          | _, _ => M.impossible
          end.
        
        Axiom AssociatedFunction_alloc :
          forall (F : Ty.t),
          M.IsAssociatedFunction (Self F) "alloc" (alloc F).
        
        (*
            pub(super) fn alloc_bit_cell(&mut self) -> AllocatedBitCell<F> {
                AllocatedBitCell {
                    cell: self.alloc(&MemoryTableCellType::Bit),
                }
            }
        *)
        Definition alloc_bit_cell (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self F in
          match τ, α with
          | [], [ self ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              Value.StructRecord
                "delphinus_zkwasm::circuits::cell::AllocatedBitCell"
                [
                  ("cell",
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path
                            "delphinus_zkwasm::circuits::mtable::allocator::MemoryTableCellAllocator")
                          [ F ],
                        "alloc",
                        []
                      |),
                      [
                        M.read (| self |);
                        M.alloc (|
                          Value.StructTuple
                            "delphinus_zkwasm::circuits::mtable::allocator::MemoryTableCellType::Bit"
                            []
                        |)
                      ]
                    |))
                ]))
          | _, _ => M.impossible
          end.
        
        Axiom AssociatedFunction_alloc_bit_cell :
          forall (F : Ty.t),
          M.IsAssociatedFunction (Self F) "alloc_bit_cell" (alloc_bit_cell F).
        
        (*
            pub(super) fn alloc_common_range_cell(&mut self) -> AllocatedCommonRangeCell<F> {
                AllocatedCommonRangeCell {
                    cell: self.alloc(&MemoryTableCellType::CommonRange),
                    upper_bound: F::from(common_range_max(self.k) as u64),
                }
            }
        *)
        Definition alloc_common_range_cell (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self F in
          match τ, α with
          | [], [ self ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              Value.StructRecord
                "delphinus_zkwasm::circuits::cell::AllocatedCommonRangeCell"
                [
                  ("cell",
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path
                            "delphinus_zkwasm::circuits::mtable::allocator::MemoryTableCellAllocator")
                          [ F ],
                        "alloc",
                        []
                      |),
                      [
                        M.read (| self |);
                        M.alloc (|
                          Value.StructTuple
                            "delphinus_zkwasm::circuits::mtable::allocator::MemoryTableCellType::CommonRange"
                            []
                        |)
                      ]
                    |));
                  ("upper_bound",
                    M.call_closure (|
                      M.get_trait_method (|
                        "core::convert::From",
                        F,
                        [ Ty.path "u64" ],
                        "from",
                        []
                      |),
                      [
                        M.rust_cast
                          (M.call_closure (|
                            M.get_function (|
                              "delphinus_zkwasm::circuits::config::common_range_max",
                              []
                            |),
                            [
                              M.read (|
                                M.SubPointer.get_struct_record_field (|
                                  M.read (| self |),
                                  "delphinus_zkwasm::circuits::mtable::allocator::MemoryTableCellAllocator",
                                  "k"
                                |)
                              |)
                            ]
                          |))
                      ]
                    |))
                ]))
          | _, _ => M.impossible
          end.
        
        Axiom AssociatedFunction_alloc_common_range_cell :
          forall (F : Ty.t),
          M.IsAssociatedFunction (Self F) "alloc_common_range_cell" (alloc_common_range_cell F).
        
        (*
            pub(super) fn alloc_u32_state_cell(&mut self) -> AllocatedCommonRangeCell<F> {
                self.alloc_common_range_cell()
            }
        *)
        Definition alloc_u32_state_cell (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self F in
          match τ, α with
          | [], [ self ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              M.call_closure (|
                M.get_associated_function (|
                  Ty.apply
                    (Ty.path
                      "delphinus_zkwasm::circuits::mtable::allocator::MemoryTableCellAllocator")
                    [ F ],
                  "alloc_common_range_cell",
                  []
                |),
                [ M.read (| self |) ]
              |)))
          | _, _ => M.impossible
          end.
        
        Axiom AssociatedFunction_alloc_u32_state_cell :
          forall (F : Ty.t),
          M.IsAssociatedFunction (Self F) "alloc_u32_state_cell" (alloc_u32_state_cell F).
        
        (*
            pub(super) fn alloc_u16_cell(&mut self) -> AllocatedU16Cell<F> {
                AllocatedU16Cell {
                    cell: self.alloc(&MemoryTableCellType::U16),
                }
            }
        *)
        Definition alloc_u16_cell (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self F in
          match τ, α with
          | [], [ self ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              Value.StructRecord
                "delphinus_zkwasm::circuits::cell::AllocatedU16Cell"
                [
                  ("cell",
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path
                            "delphinus_zkwasm::circuits::mtable::allocator::MemoryTableCellAllocator")
                          [ F ],
                        "alloc",
                        []
                      |),
                      [
                        M.read (| self |);
                        M.alloc (|
                          Value.StructTuple
                            "delphinus_zkwasm::circuits::mtable::allocator::MemoryTableCellType::U16"
                            []
                        |)
                      ]
                    |))
                ]))
          | _, _ => M.impossible
          end.
        
        Axiom AssociatedFunction_alloc_u16_cell :
          forall (F : Ty.t),
          M.IsAssociatedFunction (Self F) "alloc_u16_cell" (alloc_u16_cell F).
        
        (*
            pub(super) fn alloc_unlimited_cell(&mut self) -> AllocatedUnlimitedCell<F> {
                AllocatedUnlimitedCell {
                    cell: self.alloc(&MemoryTableCellType::Unlimited),
                }
            }
        *)
        Definition alloc_unlimited_cell (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self F in
          match τ, α with
          | [], [ self ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              Value.StructRecord
                "delphinus_zkwasm::circuits::cell::AllocatedUnlimitedCell"
                [
                  ("cell",
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path
                            "delphinus_zkwasm::circuits::mtable::allocator::MemoryTableCellAllocator")
                          [ F ],
                        "alloc",
                        []
                      |),
                      [
                        M.read (| self |);
                        M.alloc (|
                          Value.StructTuple
                            "delphinus_zkwasm::circuits::mtable::allocator::MemoryTableCellType::Unlimited"
                            []
                        |)
                      ]
                    |))
                ]))
          | _, _ => M.impossible
          end.
        
        Axiom AssociatedFunction_alloc_unlimited_cell :
          forall (F : Ty.t),
          M.IsAssociatedFunction (Self F) "alloc_unlimited_cell" (alloc_unlimited_cell F).
        
        (*
            pub(super) fn alloc_u32_cell(&mut self) -> AllocatedU32Cell<F> {
                self.free_u32_cells.pop().expect("no more free u32 cells")
            }
        *)
        Definition alloc_u32_cell (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self F in
          match τ, α with
          | [], [ self ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              M.call_closure (|
                M.get_associated_function (|
                  Ty.apply
                    (Ty.path "core::option::Option")
                    [ Ty.apply (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedU32Cell") [ F ]
                    ],
                  "expect",
                  []
                |),
                [
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        [
                          Ty.apply
                            (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedU32Cell")
                            [ F ];
                          Ty.path "alloc::alloc::Global"
                        ],
                      "pop",
                      []
                    |),
                    [
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "delphinus_zkwasm::circuits::mtable::allocator::MemoryTableCellAllocator",
                        "free_u32_cells"
                      |)
                    ]
                  |);
                  M.read (| Value.String "no more free u32 cells" |)
                ]
              |)))
          | _, _ => M.impossible
          end.
        
        Axiom AssociatedFunction_alloc_u32_cell :
          forall (F : Ty.t),
          M.IsAssociatedFunction (Self F) "alloc_u32_cell" (alloc_u32_cell F).
        
        (*
            pub(super) fn alloc_u64_cell(&mut self) -> AllocatedU64Cell<F> {
                self.free_u64_cells.pop().expect("no more free u64 cells")
            }
        *)
        Definition alloc_u64_cell (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self F in
          match τ, α with
          | [], [ self ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              M.call_closure (|
                M.get_associated_function (|
                  Ty.apply
                    (Ty.path "core::option::Option")
                    [ Ty.apply (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedU64Cell") [ F ]
                    ],
                  "expect",
                  []
                |),
                [
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        [
                          Ty.apply
                            (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedU64Cell")
                            [ F ];
                          Ty.path "alloc::alloc::Global"
                        ],
                      "pop",
                      []
                    |),
                    [
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "delphinus_zkwasm::circuits::mtable::allocator::MemoryTableCellAllocator",
                        "free_u64_cells"
                      |)
                    ]
                  |);
                  M.read (| Value.String "no more free u64 cells" |)
                ]
              |)))
          | _, _ => M.impossible
          end.
        
        Axiom AssociatedFunction_alloc_u64_cell :
          forall (F : Ty.t),
          M.IsAssociatedFunction (Self F) "alloc_u64_cell" (alloc_u64_cell F).
      End Impl_delphinus_zkwasm_circuits_mtable_allocator_MemoryTableCellAllocator_F.
    End allocator.
  End mtable.
End circuits.
