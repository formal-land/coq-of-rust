(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module circuits.
  Module mtable.
    Module assign.
      Module Impl_delphinus_zkwasm_circuits_mtable_MemoryTableChip_F.
        Definition Self (F : Ty.t) : Ty.t :=
          Ty.apply (Ty.path "delphinus_zkwasm::circuits::mtable::MemoryTableChip") [ F ].
        
        (*
            fn assign_fixed(&self, ctx: &mut Context<'_, F>) -> Result<(), Error> {
                let capability = self.maximal_available_rows / MEMORY_TABLE_ENTRY_ROWS as usize;
        
                for i in 0..capability {
                    ctx.region.assign_fixed(
                        || "mtable: sel",
                        self.config.entry_sel,
                        ctx.offset,
                        || Ok(F::one()),
                    )?;
        
                    if i == capability - 1 {
                        ctx.region.assign_advice_from_constant(
                            || "rest_mops terminate",
                            self.config.rest_mops_cell.cell.col,
                            ctx.offset + self.config.rest_mops_cell.cell.rot as usize,
                            F::zero(),
                        )?;
        
                        #[cfg(feature = "continuation")]
                        ctx.region.assign_advice_from_constant(
                            || "rest_memory_finalize_ops terminate",
                            self.config.rest_memory_finalize_ops_cell.cell.col,
                            ctx.offset + self.config.rest_memory_finalize_ops_cell.cell.rot as usize,
                            F::zero(),
                        )?;
                    }
        
                    ctx.step(MEMORY_TABLE_ENTRY_ROWS as usize);
                }
        
                Ok(())
            }
        *)
        Definition assign_fixed (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self F in
          match τ, α with
          | [], [ self; ctx ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              let ctx := M.alloc (| ctx |) in
              M.catch_return (|
                ltac:(M.monadic
                  (M.read (|
                    let capability :=
                      M.alloc (|
                        BinOp.Panic.div (|
                          Integer.Usize,
                          M.read (|
                            M.SubPointer.get_struct_record_field (|
                              M.read (| self |),
                              "delphinus_zkwasm::circuits::mtable::MemoryTableChip",
                              "maximal_available_rows"
                            |)
                          |),
                          M.rust_cast
                            (M.read (|
                              M.get_constant (|
                                "delphinus_zkwasm::circuits::mtable::MEMORY_TABLE_ENTRY_ROWS"
                              |)
                            |))
                        |)
                      |) in
                    let _ :=
                      M.use
                        (M.match_operator (|
                          M.alloc (|
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::iter::traits::collect::IntoIterator",
                                Ty.apply (Ty.path "core::ops::range::Range") [ Ty.path "usize" ],
                                [],
                                "into_iter",
                                []
                              |),
                              [
                                Value.StructRecord
                                  "core::ops::range::Range"
                                  [ ("start", Value.Integer 0); ("end_", M.read (| capability |)) ]
                              ]
                            |)
                          |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let iter := M.copy (| γ |) in
                                M.loop (|
                                  ltac:(M.monadic
                                    (let _ :=
                                      M.match_operator (|
                                        M.alloc (|
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "core::iter::traits::iterator::Iterator",
                                              Ty.apply
                                                (Ty.path "core::ops::range::Range")
                                                [ Ty.path "usize" ],
                                              [],
                                              "next",
                                              []
                                            |),
                                            [ iter ]
                                          |)
                                        |),
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (M.alloc (|
                                                M.never_to_any (| M.read (| M.break (||) |) |)
                                              |)));
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let γ0_0 :=
                                                M.SubPointer.get_struct_tuple_field (|
                                                  γ,
                                                  "core::option::Option::Some",
                                                  0
                                                |) in
                                              let i := M.copy (| γ0_0 |) in
                                              let _ :=
                                                M.match_operator (|
                                                  M.alloc (|
                                                    M.call_closure (|
                                                      M.get_trait_method (|
                                                        "core::ops::try_trait::Try",
                                                        Ty.apply
                                                          (Ty.path "core::result::Result")
                                                          [
                                                            Ty.apply
                                                              (Ty.path
                                                                "halo2_proofs::circuit::AssignedCell")
                                                              [ F; F ];
                                                            Ty.path
                                                              "halo2_proofs::plonk::error::Error"
                                                          ],
                                                        [],
                                                        "branch",
                                                        []
                                                      |),
                                                      [
                                                        M.call_closure (|
                                                          M.get_associated_function (|
                                                            Ty.apply
                                                              (Ty.path
                                                                "halo2_proofs::circuit::Region")
                                                              [ F ],
                                                            "assign_fixed",
                                                            [
                                                              Ty.function
                                                                [ Ty.tuple [] ]
                                                                (Ty.apply
                                                                  (Ty.path "core::result::Result")
                                                                  [
                                                                    F;
                                                                    Ty.path
                                                                      "halo2_proofs::plonk::error::Error"
                                                                  ]);
                                                              F;
                                                              Ty.function
                                                                [ Ty.tuple [] ]
                                                                (Ty.apply
                                                                  (Ty.path "&")
                                                                  [ Ty.path "str" ]);
                                                              Ty.apply
                                                                (Ty.path "&")
                                                                [ Ty.path "str" ]
                                                            ]
                                                          |),
                                                          [
                                                            M.read (|
                                                              M.SubPointer.get_struct_record_field (|
                                                                M.read (| ctx |),
                                                                "delphinus_zkwasm::circuits::utils::Context",
                                                                "region"
                                                              |)
                                                            |);
                                                            M.closure
                                                              (fun γ =>
                                                                ltac:(M.monadic
                                                                  match γ with
                                                                  | [ α0 ] =>
                                                                    M.match_operator (|
                                                                      M.alloc (| α0 |),
                                                                      [
                                                                        fun γ =>
                                                                          ltac:(M.monadic
                                                                            (M.read (|
                                                                              Value.String
                                                                                "mtable: sel"
                                                                            |)))
                                                                      ]
                                                                    |)
                                                                  | _ => M.impossible (||)
                                                                  end));
                                                            M.read (|
                                                              M.SubPointer.get_struct_record_field (|
                                                                M.SubPointer.get_struct_record_field (|
                                                                  M.read (| self |),
                                                                  "delphinus_zkwasm::circuits::mtable::MemoryTableChip",
                                                                  "config"
                                                                |),
                                                                "delphinus_zkwasm::circuits::mtable::MemoryTableConfig",
                                                                "entry_sel"
                                                              |)
                                                            |);
                                                            M.read (|
                                                              M.SubPointer.get_struct_record_field (|
                                                                M.read (| ctx |),
                                                                "delphinus_zkwasm::circuits::utils::Context",
                                                                "offset"
                                                              |)
                                                            |);
                                                            M.closure
                                                              (fun γ =>
                                                                ltac:(M.monadic
                                                                  match γ with
                                                                  | [ α0 ] =>
                                                                    M.match_operator (|
                                                                      M.alloc (| α0 |),
                                                                      [
                                                                        fun γ =>
                                                                          ltac:(M.monadic
                                                                            (Value.StructTuple
                                                                              "core::result::Result::Ok"
                                                                              [
                                                                                M.call_closure (|
                                                                                  M.get_trait_method (|
                                                                                    "ff::Field",
                                                                                    F,
                                                                                    [],
                                                                                    "one",
                                                                                    []
                                                                                  |),
                                                                                  []
                                                                                |)
                                                                              ]))
                                                                      ]
                                                                    |)
                                                                  | _ => M.impossible (||)
                                                                  end))
                                                          ]
                                                        |)
                                                      ]
                                                    |)
                                                  |),
                                                  [
                                                    fun γ =>
                                                      ltac:(M.monadic
                                                        (let γ0_0 :=
                                                          M.SubPointer.get_struct_tuple_field (|
                                                            γ,
                                                            "core::ops::control_flow::ControlFlow::Break",
                                                            0
                                                          |) in
                                                        let residual := M.copy (| γ0_0 |) in
                                                        M.alloc (|
                                                          M.never_to_any (|
                                                            M.read (|
                                                              M.return_ (|
                                                                M.call_closure (|
                                                                  M.get_trait_method (|
                                                                    "core::ops::try_trait::FromResidual",
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "core::result::Result")
                                                                      [
                                                                        Ty.tuple [];
                                                                        Ty.path
                                                                          "halo2_proofs::plonk::error::Error"
                                                                      ],
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "core::result::Result")
                                                                        [
                                                                          Ty.path
                                                                            "core::convert::Infallible";
                                                                          Ty.path
                                                                            "halo2_proofs::plonk::error::Error"
                                                                        ]
                                                                    ],
                                                                    "from_residual",
                                                                    []
                                                                  |),
                                                                  [ M.read (| residual |) ]
                                                                |)
                                                              |)
                                                            |)
                                                          |)
                                                        |)));
                                                    fun γ =>
                                                      ltac:(M.monadic
                                                        (let γ0_0 :=
                                                          M.SubPointer.get_struct_tuple_field (|
                                                            γ,
                                                            "core::ops::control_flow::ControlFlow::Continue",
                                                            0
                                                          |) in
                                                        let val := M.copy (| γ0_0 |) in
                                                        val))
                                                  ]
                                                |) in
                                              let _ :=
                                                M.match_operator (|
                                                  M.alloc (| Value.Tuple [] |),
                                                  [
                                                    fun γ =>
                                                      ltac:(M.monadic
                                                        (let γ :=
                                                          M.use
                                                            (M.alloc (|
                                                              BinOp.Pure.eq
                                                                (M.read (| i |))
                                                                (BinOp.Panic.sub (|
                                                                  Integer.Usize,
                                                                  M.read (| capability |),
                                                                  Value.Integer 1
                                                                |))
                                                            |)) in
                                                        let _ :=
                                                          M.is_constant_or_break_match (|
                                                            M.read (| γ |),
                                                            Value.Bool true
                                                          |) in
                                                        let _ :=
                                                          M.match_operator (|
                                                            M.alloc (|
                                                              M.call_closure (|
                                                                M.get_trait_method (|
                                                                  "core::ops::try_trait::Try",
                                                                  Ty.apply
                                                                    (Ty.path "core::result::Result")
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "halo2_proofs::circuit::AssignedCell")
                                                                        [ F; F ];
                                                                      Ty.path
                                                                        "halo2_proofs::plonk::error::Error"
                                                                    ],
                                                                  [],
                                                                  "branch",
                                                                  []
                                                                |),
                                                                [
                                                                  M.call_closure (|
                                                                    M.get_associated_function (|
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "halo2_proofs::circuit::Region")
                                                                        [ F ],
                                                                      "assign_advice_from_constant",
                                                                      [
                                                                        F;
                                                                        Ty.function
                                                                          [ Ty.tuple [] ]
                                                                          (Ty.apply
                                                                            (Ty.path "&")
                                                                            [ Ty.path "str" ]);
                                                                        Ty.apply
                                                                          (Ty.path "&")
                                                                          [ Ty.path "str" ]
                                                                      ]
                                                                    |),
                                                                    [
                                                                      M.read (|
                                                                        M.SubPointer.get_struct_record_field (|
                                                                          M.read (| ctx |),
                                                                          "delphinus_zkwasm::circuits::utils::Context",
                                                                          "region"
                                                                        |)
                                                                      |);
                                                                      M.closure
                                                                        (fun γ =>
                                                                          ltac:(M.monadic
                                                                            match γ with
                                                                            | [ α0 ] =>
                                                                              M.match_operator (|
                                                                                M.alloc (| α0 |),
                                                                                [
                                                                                  fun γ =>
                                                                                    ltac:(M.monadic
                                                                                      (M.read (|
                                                                                        Value.String
                                                                                          "rest_mops terminate"
                                                                                      |)))
                                                                                ]
                                                                              |)
                                                                            | _ => M.impossible (||)
                                                                            end));
                                                                      M.read (|
                                                                        M.SubPointer.get_struct_record_field (|
                                                                          M.SubPointer.get_struct_record_field (|
                                                                            M.SubPointer.get_struct_record_field (|
                                                                              M.SubPointer.get_struct_record_field (|
                                                                                M.read (| self |),
                                                                                "delphinus_zkwasm::circuits::mtable::MemoryTableChip",
                                                                                "config"
                                                                              |),
                                                                              "delphinus_zkwasm::circuits::mtable::MemoryTableConfig",
                                                                              "rest_mops_cell"
                                                                            |),
                                                                            "delphinus_zkwasm::circuits::cell::AllocatedCommonRangeCell",
                                                                            "cell"
                                                                          |),
                                                                          "delphinus_zkwasm::circuits::cell::AllocatedCell",
                                                                          "col"
                                                                        |)
                                                                      |);
                                                                      BinOp.Panic.add (|
                                                                        Integer.Usize,
                                                                        M.read (|
                                                                          M.SubPointer.get_struct_record_field (|
                                                                            M.read (| ctx |),
                                                                            "delphinus_zkwasm::circuits::utils::Context",
                                                                            "offset"
                                                                          |)
                                                                        |),
                                                                        M.rust_cast
                                                                          (M.read (|
                                                                            M.SubPointer.get_struct_record_field (|
                                                                              M.SubPointer.get_struct_record_field (|
                                                                                M.SubPointer.get_struct_record_field (|
                                                                                  M.SubPointer.get_struct_record_field (|
                                                                                    M.read (|
                                                                                      self
                                                                                    |),
                                                                                    "delphinus_zkwasm::circuits::mtable::MemoryTableChip",
                                                                                    "config"
                                                                                  |),
                                                                                  "delphinus_zkwasm::circuits::mtable::MemoryTableConfig",
                                                                                  "rest_mops_cell"
                                                                                |),
                                                                                "delphinus_zkwasm::circuits::cell::AllocatedCommonRangeCell",
                                                                                "cell"
                                                                              |),
                                                                              "delphinus_zkwasm::circuits::cell::AllocatedCell",
                                                                              "rot"
                                                                            |)
                                                                          |))
                                                                      |);
                                                                      M.call_closure (|
                                                                        M.get_trait_method (|
                                                                          "ff::Field",
                                                                          F,
                                                                          [],
                                                                          "zero",
                                                                          []
                                                                        |),
                                                                        []
                                                                      |)
                                                                    ]
                                                                  |)
                                                                ]
                                                              |)
                                                            |),
                                                            [
                                                              fun γ =>
                                                                ltac:(M.monadic
                                                                  (let γ0_0 :=
                                                                    M.SubPointer.get_struct_tuple_field (|
                                                                      γ,
                                                                      "core::ops::control_flow::ControlFlow::Break",
                                                                      0
                                                                    |) in
                                                                  let residual :=
                                                                    M.copy (| γ0_0 |) in
                                                                  M.alloc (|
                                                                    M.never_to_any (|
                                                                      M.read (|
                                                                        M.return_ (|
                                                                          M.call_closure (|
                                                                            M.get_trait_method (|
                                                                              "core::ops::try_trait::FromResidual",
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "core::result::Result")
                                                                                [
                                                                                  Ty.tuple [];
                                                                                  Ty.path
                                                                                    "halo2_proofs::plonk::error::Error"
                                                                                ],
                                                                              [
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "core::result::Result")
                                                                                  [
                                                                                    Ty.path
                                                                                      "core::convert::Infallible";
                                                                                    Ty.path
                                                                                      "halo2_proofs::plonk::error::Error"
                                                                                  ]
                                                                              ],
                                                                              "from_residual",
                                                                              []
                                                                            |),
                                                                            [ M.read (| residual |)
                                                                            ]
                                                                          |)
                                                                        |)
                                                                      |)
                                                                    |)
                                                                  |)));
                                                              fun γ =>
                                                                ltac:(M.monadic
                                                                  (let γ0_0 :=
                                                                    M.SubPointer.get_struct_tuple_field (|
                                                                      γ,
                                                                      "core::ops::control_flow::ControlFlow::Continue",
                                                                      0
                                                                    |) in
                                                                  let val := M.copy (| γ0_0 |) in
                                                                  val))
                                                            ]
                                                          |) in
                                                        M.alloc (| Value.Tuple [] |)));
                                                    fun γ =>
                                                      ltac:(M.monadic
                                                        (M.alloc (| Value.Tuple [] |)))
                                                  ]
                                                |) in
                                              let _ :=
                                                M.alloc (|
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.apply
                                                        (Ty.path
                                                          "delphinus_zkwasm::circuits::utils::Context")
                                                        [ F ],
                                                      "step",
                                                      []
                                                    |),
                                                    [
                                                      M.read (| ctx |);
                                                      M.rust_cast
                                                        (M.read (|
                                                          M.get_constant (|
                                                            "delphinus_zkwasm::circuits::mtable::MEMORY_TABLE_ENTRY_ROWS"
                                                          |)
                                                        |))
                                                    ]
                                                  |)
                                                |) in
                                              M.alloc (| Value.Tuple [] |)))
                                        ]
                                      |) in
                                    M.alloc (| Value.Tuple [] |)))
                                |)))
                          ]
                        |)) in
                    M.alloc (| Value.StructTuple "core::result::Result::Ok" [ Value.Tuple [] ] |)
                  |)))
              |)))
          | _, _ => M.impossible
          end.
        
        Axiom AssociatedFunction_assign_fixed :
          forall (F : Ty.t),
          M.IsAssociatedFunction (Self F) "assign_fixed" (assign_fixed F).
        
        (*
            fn constrain_rest_mops_permutation(
                &self,
                ctx: &mut Context<'_, F>,
                init_rest_mops: u64,
            ) -> Result<AssignedCell<F, F>, Error> {
                let cell = self
                    .config
                    .rest_mops_cell
                    .assign(ctx, F::from(init_rest_mops))?;
        
                Ok(cell)
            }
        *)
        Definition constrain_rest_mops_permutation
            (F : Ty.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self F in
          match τ, α with
          | [], [ self; ctx; init_rest_mops ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              let ctx := M.alloc (| ctx |) in
              let init_rest_mops := M.alloc (| init_rest_mops |) in
              M.catch_return (|
                ltac:(M.monadic
                  (M.read (|
                    let cell :=
                      M.copy (|
                        M.match_operator (|
                          M.alloc (|
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::ops::try_trait::Try",
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  [
                                    Ty.apply
                                      (Ty.path "halo2_proofs::circuit::AssignedCell")
                                      [ F; F ];
                                    Ty.path "halo2_proofs::plonk::error::Error"
                                  ],
                                [],
                                "branch",
                                []
                              |),
                              [
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "delphinus_zkwasm::circuits::cell::CellExpression",
                                    Ty.apply
                                      (Ty.path
                                        "delphinus_zkwasm::circuits::cell::AllocatedCommonRangeCell")
                                      [ F ],
                                    [ F ],
                                    "assign",
                                    []
                                  |),
                                  [
                                    M.SubPointer.get_struct_record_field (|
                                      M.SubPointer.get_struct_record_field (|
                                        M.read (| self |),
                                        "delphinus_zkwasm::circuits::mtable::MemoryTableChip",
                                        "config"
                                      |),
                                      "delphinus_zkwasm::circuits::mtable::MemoryTableConfig",
                                      "rest_mops_cell"
                                    |);
                                    M.read (| ctx |);
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::convert::From",
                                        F,
                                        [ Ty.path "u64" ],
                                        "from",
                                        []
                                      |),
                                      [ M.read (| init_rest_mops |) ]
                                    |)
                                  ]
                                |)
                              ]
                            |)
                          |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ0_0 :=
                                  M.SubPointer.get_struct_tuple_field (|
                                    γ,
                                    "core::ops::control_flow::ControlFlow::Break",
                                    0
                                  |) in
                                let residual := M.copy (| γ0_0 |) in
                                M.alloc (|
                                  M.never_to_any (|
                                    M.read (|
                                      M.return_ (|
                                        M.call_closure (|
                                          M.get_trait_method (|
                                            "core::ops::try_trait::FromResidual",
                                            Ty.apply
                                              (Ty.path "core::result::Result")
                                              [
                                                Ty.apply
                                                  (Ty.path "halo2_proofs::circuit::AssignedCell")
                                                  [ F; F ];
                                                Ty.path "halo2_proofs::plonk::error::Error"
                                              ],
                                            [
                                              Ty.apply
                                                (Ty.path "core::result::Result")
                                                [
                                                  Ty.path "core::convert::Infallible";
                                                  Ty.path "halo2_proofs::plonk::error::Error"
                                                ]
                                            ],
                                            "from_residual",
                                            []
                                          |),
                                          [ M.read (| residual |) ]
                                        |)
                                      |)
                                    |)
                                  |)
                                |)));
                            fun γ =>
                              ltac:(M.monadic
                                (let γ0_0 :=
                                  M.SubPointer.get_struct_tuple_field (|
                                    γ,
                                    "core::ops::control_flow::ControlFlow::Continue",
                                    0
                                  |) in
                                let val := M.copy (| γ0_0 |) in
                                val))
                          ]
                        |)
                      |) in
                    M.alloc (| Value.StructTuple "core::result::Result::Ok" [ M.read (| cell |) ] |)
                  |)))
              |)))
          | _, _ => M.impossible
          end.
        
        Axiom AssociatedFunction_constrain_rest_mops_permutation :
          forall (F : Ty.t),
          M.IsAssociatedFunction
            (Self F)
            "constrain_rest_mops_permutation"
            (constrain_rest_mops_permutation F).
        
        (*
            fn assign_entries(
                &self,
                region: &Region<'_, F>,
                mtable: &MemoryWritingTable,
                init_rest_mops: u64,
                _rest_memory_finalize_ops: u32,
            ) -> Result<(), Error> {
                macro_rules! assign_advice {
                    ($ctx:expr, $cell:ident, $value:expr) => {
                        self.config.$cell.assign($ctx, $value).unwrap()
                    };
                }
        
                cfg_if::cfg_if! {
                    if #[cfg(feature = "continuation")] {
                        macro_rules! assign_u32_state {
                            ($ctx:expr, $cell:ident, $value:expr) => {
                                self.config.$cell.assign($ctx, $value).unwrap()
                            }
                        }
                    } else {
                        macro_rules! assign_u32_state {
                            ($ctx:expr, $cell:ident, $value:expr) => {
                                assign_advice!($ctx, $cell, F::from($value as u64))
                            }
                        }
                    }
                }
        
                macro_rules! assign_bit {
                    ($ctx:expr, $cell:ident) => {
                        assign_advice!($ctx, $cell, F::one())
                    };
                }
        
                macro_rules! assign_bit_if {
                    ($ctx:expr, $cond:expr, $cell:ident) => {
                        if $cond {
                            assign_advice!($ctx, $cell, F::one());
                        }
                    };
                }
        
                struct Status<F: FieldExt> {
                    rest_mops: u64,
        
                    init_encode: F,
        
                    is_next_same_ltype_cell: bool,
                    is_next_same_offset_cell: bool,
                    offset_diff: u32,
        
                    _rest_memory_finalize_ops: u32,
                    _post_init_encode_cell: Option<F>,
                }
        
                let status = {
                    let mut status = Vec::with_capacity(mtable.0.len());
        
                    let mut rest_mops = init_rest_mops;
                    let mut _rest_memory_finalize_ops = _rest_memory_finalize_ops;
                    let mut current_address_init_encode = None;
        
                    let mut iter = mtable.0.iter().peekable();
        
                    let is_finalized_writing_entry =
                        |entry: &MemoryWritingEntry, next_entry: Option<&&MemoryWritingEntry>| {
                            entry.entry.atype == AccessType::Write
                                && (next_entry.is_none()
                                    || !next_entry
                                        .as_ref()
                                        .unwrap()
                                        .entry
                                        .is_same_location(&entry.entry))
                        };
        
                    while let Some(curr) = iter.next() {
                        let next = iter.peek();
        
                        if curr.entry.atype.is_init() {
                            current_address_init_encode =
                                Some(bn_to_field(&encode_init_memory_table_entry(
                                    (curr.entry.ltype as u64).into(),
                                    curr.entry.offset.into(),
                                    (curr.entry.is_mutable as u64).into(),
                                    curr.entry.eid.into(),
                                    curr.entry.value.into(),
                                )));
                        }
        
                        let (is_next_same_ltype_cell, is_next_same_offset_cell, offset_diff) =
                            if let Some(next) = next {
                                if curr.entry.ltype == next.entry.ltype {
                                    let offset_diff = next.entry.offset - curr.entry.offset;
        
                                    (true, curr.entry.offset == next.entry.offset, offset_diff)
                                } else {
                                    (false, false, 0u32)
                                }
                            } else {
                                (false, false, 0u32)
                            };
        
                        status.push(Status {
                            rest_mops,
        
                            init_encode: current_address_init_encode.unwrap_or(F::zero()),
        
                            is_next_same_ltype_cell,
                            is_next_same_offset_cell,
                            offset_diff,
        
                            _rest_memory_finalize_ops,
                            _post_init_encode_cell: if is_finalized_writing_entry(curr, next) {
                                Some(bn_to_field(
                                    &((encode_init_memory_table_address::<BigUint>(
                                        (curr.entry.ltype as u64).into(),
                                        curr.entry.offset.into(),
                                    )) * MEMORY_ADDRESS_OFFSET
                                        + (encode_init_memory_table_entry::<BigUint>(
                                            (curr.entry.ltype as u64).into(),
                                            curr.entry.offset.into(),
                                            (curr.entry.is_mutable as u64).into(),
                                            curr.entry.eid.into(),
                                            curr.entry.value.into(),
                                        ))),
                                ))
                            } else {
                                None
                            },
                        });
        
                        if let Some(next_entry) = next {
                            if !next_entry.entry.is_same_location(&curr.entry) {
                                current_address_init_encode = None;
                            }
                        }
        
                        if is_finalized_writing_entry(curr, next) {
                            _rest_memory_finalize_ops -= 1;
                        }
        
                        if !curr.entry.atype.is_init() {
                            rest_mops -= 1;
                        }
                    }
        
                    status
                };
        
                mtable.0.par_iter().enumerate().for_each(|(index, entry)| {
                    let mut ctx = Context::new(region);
        
                    ctx.step(MEMORY_TABLE_ENTRY_ROWS as usize * index);
        
                    assign_bit!(&mut ctx, enabled_cell);
        
                    match entry.entry.ltype {
                        LocationType::Stack => assign_bit!(&mut ctx, is_stack_cell),
                        LocationType::Heap => assign_bit!(&mut ctx, is_heap_cell),
                        LocationType::Global => assign_bit!(&mut ctx, is_global_cell),
                    };
        
                    assign_bit_if!(&mut ctx, entry.entry.is_mutable, is_mutable);
        
                    match entry.entry.vtype {
                        VarType::I32 => assign_bit!(&mut ctx, is_i32_cell),
                        VarType::I64 => assign_bit!(&mut ctx, is_i64_cell),
                    };
        
                    assign_bit_if!(&mut ctx, entry.entry.atype.is_init(), is_init_cell);
        
                    assign_u32_state!(&mut ctx, start_eid_cell, entry.entry.eid);
                    assign_u32_state!(&mut ctx, end_eid_cell, entry.end_eid);
                    assign_u32_state!(&mut ctx, eid_diff_cell, entry.end_eid - entry.entry.eid - 1);
                    assign_advice!(&mut ctx, init_encode_cell, status[index].init_encode);
                    assign_advice!(&mut ctx, rest_mops_cell, F::from(status[index].rest_mops));
                    assign_advice!(&mut ctx, offset_cell, entry.entry.offset);
                    assign_advice!(&mut ctx, value, entry.entry.value);
        
                    let offset_diff = F::from(status[index].offset_diff as u64);
                    let offset_diff_inv = offset_diff.invert().unwrap_or(F::zero());
                    let offset_diff_inv_helper = offset_diff * offset_diff_inv;
                    assign_bit_if!(
                        &mut ctx,
                        status[index].is_next_same_ltype_cell,
                        is_next_same_ltype_cell
                    );
                    assign_bit_if!(
                        &mut ctx,
                        status[index].is_next_same_offset_cell,
                        is_next_same_offset_cell
                    );
                    assign_advice!(&mut ctx, offset_diff_cell, status[index].offset_diff);
                    assign_advice!(&mut ctx, offset_diff_inv_cell, offset_diff_inv);
                    assign_advice!(
                        &mut ctx,
                        offset_diff_inv_helper_cell,
                        offset_diff_inv_helper
                    );
        
                    #[cfg(feature = "continuation")]
                    {
                        assign_advice!(
                            &mut ctx,
                            rest_memory_finalize_ops_cell,
                            F::from(status[index]._rest_memory_finalize_ops as u64)
                        );
        
                        assign_advice!(
                            &mut ctx,
                            address_encode_cell,
                            bn_to_field(&encode_init_memory_table_address(
                                (entry.entry.ltype as u64).into(),
                                entry.entry.offset.into()
                            ))
                        );
        
                        if let Some(post_init_encode) = status[index]._post_init_encode_cell {
                            assign_advice!(&mut ctx, post_init_encode_cell, post_init_encode);
                        }
                    }
        
                    assign_advice!(
                        &mut ctx,
                        encode_cell,
                        bn_to_field(&encode_memory_table_entry(
                            entry.entry.offset.into(),
                            (entry.entry.ltype as u64).into(),
                            if VarType::I32 == entry.entry.vtype {
                                1u64.into()
                            } else {
                                0u64.into()
                            }
                        ))
                    );
                });
        
                Ok(())
            }
        *)
        Definition assign_entries (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self F in
          match τ, α with
          | [], [ self; region; mtable; init_rest_mops; _rest_memory_finalize_ops ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              let region := M.alloc (| region |) in
              let mtable := M.alloc (| mtable |) in
              let init_rest_mops := M.alloc (| init_rest_mops |) in
              let _rest_memory_finalize_ops := M.alloc (| _rest_memory_finalize_ops |) in
              M.read (|
                let status :=
                  M.copy (|
                    let status :=
                      M.alloc (|
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              [
                                Ty.apply
                                  (Ty.path
                                    "delphinus_zkwasm::circuits::mtable::assign::assign_entries::Status")
                                  [ F ];
                                Ty.path "alloc::alloc::Global"
                              ],
                            "with_capacity",
                            []
                          |),
                          [
                            M.call_closure (|
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  [
                                    Ty.path
                                      "delphinus_zkwasm::circuits::utils::table_entry::MemoryWritingEntry";
                                    Ty.path "alloc::alloc::Global"
                                  ],
                                "len",
                                []
                              |),
                              [
                                M.SubPointer.get_struct_tuple_field (|
                                  M.read (| mtable |),
                                  "delphinus_zkwasm::circuits::utils::table_entry::MemoryWritingTable",
                                  0
                                |)
                              ]
                            |)
                          ]
                        |)
                      |) in
                    let rest_mops := M.copy (| init_rest_mops |) in
                    let _rest_memory_finalize_ops := M.copy (| _rest_memory_finalize_ops |) in
                    let current_address_init_encode :=
                      M.alloc (| Value.StructTuple "core::option::Option::None" [] |) in
                    let iter :=
                      M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::iter::traits::iterator::Iterator",
                            Ty.apply
                              (Ty.path "core::slice::iter::Iter")
                              [
                                Ty.path
                                  "delphinus_zkwasm::circuits::utils::table_entry::MemoryWritingEntry"
                              ],
                            [],
                            "peekable",
                            []
                          |),
                          [
                            M.call_closure (|
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path "slice")
                                  [
                                    Ty.path
                                      "delphinus_zkwasm::circuits::utils::table_entry::MemoryWritingEntry"
                                  ],
                                "iter",
                                []
                              |),
                              [
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "core::ops::deref::Deref",
                                    Ty.apply
                                      (Ty.path "alloc::vec::Vec")
                                      [
                                        Ty.path
                                          "delphinus_zkwasm::circuits::utils::table_entry::MemoryWritingEntry";
                                        Ty.path "alloc::alloc::Global"
                                      ],
                                    [],
                                    "deref",
                                    []
                                  |),
                                  [
                                    M.SubPointer.get_struct_tuple_field (|
                                      M.read (| mtable |),
                                      "delphinus_zkwasm::circuits::utils::table_entry::MemoryWritingTable",
                                      0
                                    |)
                                  ]
                                |)
                              ]
                            |)
                          ]
                        |)
                      |) in
                    let is_finalized_writing_entry :=
                      M.alloc (|
                        M.closure
                          (fun γ =>
                            ltac:(M.monadic
                              match γ with
                              | [ α0; α1 ] =>
                                M.match_operator (|
                                  M.alloc (| α0 |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let entry := M.copy (| γ |) in
                                        M.match_operator (|
                                          M.alloc (| α1 |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let next_entry := M.copy (| γ |) in
                                                LogicalOp.and (|
                                                  M.call_closure (|
                                                    M.get_trait_method (|
                                                      "core::cmp::PartialEq",
                                                      Ty.path "specs::mtable::AccessType",
                                                      [ Ty.path "specs::mtable::AccessType" ],
                                                      "eq",
                                                      []
                                                    |),
                                                    [
                                                      M.SubPointer.get_struct_record_field (|
                                                        M.SubPointer.get_struct_record_field (|
                                                          M.read (| entry |),
                                                          "delphinus_zkwasm::circuits::utils::table_entry::MemoryWritingEntry",
                                                          "entry"
                                                        |),
                                                        "specs::mtable::MemoryTableEntry",
                                                        "atype"
                                                      |);
                                                      M.alloc (|
                                                        Value.StructTuple
                                                          "specs::mtable::AccessType::Write"
                                                          []
                                                      |)
                                                    ]
                                                  |),
                                                  ltac:(M.monadic
                                                    (LogicalOp.or (|
                                                      M.call_closure (|
                                                        M.get_associated_function (|
                                                          Ty.apply
                                                            (Ty.path "core::option::Option")
                                                            [
                                                              Ty.apply
                                                                (Ty.path "&")
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path "&")
                                                                    [
                                                                      Ty.path
                                                                        "delphinus_zkwasm::circuits::utils::table_entry::MemoryWritingEntry"
                                                                    ]
                                                                ]
                                                            ],
                                                          "is_none",
                                                          []
                                                        |),
                                                        [ next_entry ]
                                                      |),
                                                      ltac:(M.monadic
                                                        (UnOp.Pure.not
                                                          (M.call_closure (|
                                                            M.get_associated_function (|
                                                              Ty.path
                                                                "specs::mtable::MemoryTableEntry",
                                                              "is_same_location",
                                                              []
                                                            |),
                                                            [
                                                              M.SubPointer.get_struct_record_field (|
                                                                M.read (|
                                                                  M.read (|
                                                                    M.call_closure (|
                                                                      M.get_associated_function (|
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "core::option::Option")
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path "&")
                                                                              [
                                                                                Ty.apply
                                                                                  (Ty.path "&")
                                                                                  [
                                                                                    Ty.apply
                                                                                      (Ty.path "&")
                                                                                      [
                                                                                        Ty.path
                                                                                          "delphinus_zkwasm::circuits::utils::table_entry::MemoryWritingEntry"
                                                                                      ]
                                                                                  ]
                                                                              ]
                                                                          ],
                                                                        "unwrap",
                                                                        []
                                                                      |),
                                                                      [
                                                                        M.call_closure (|
                                                                          M.get_associated_function (|
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "core::option::Option")
                                                                              [
                                                                                Ty.apply
                                                                                  (Ty.path "&")
                                                                                  [
                                                                                    Ty.apply
                                                                                      (Ty.path "&")
                                                                                      [
                                                                                        Ty.path
                                                                                          "delphinus_zkwasm::circuits::utils::table_entry::MemoryWritingEntry"
                                                                                      ]
                                                                                  ]
                                                                              ],
                                                                            "as_ref",
                                                                            []
                                                                          |),
                                                                          [ next_entry ]
                                                                        |)
                                                                      ]
                                                                    |)
                                                                  |)
                                                                |),
                                                                "delphinus_zkwasm::circuits::utils::table_entry::MemoryWritingEntry",
                                                                "entry"
                                                              |);
                                                              M.SubPointer.get_struct_record_field (|
                                                                M.read (| entry |),
                                                                "delphinus_zkwasm::circuits::utils::table_entry::MemoryWritingEntry",
                                                                "entry"
                                                              |)
                                                            ]
                                                          |))))
                                                    |)))
                                                |)))
                                          ]
                                        |)))
                                  ]
                                |)
                              | _ => M.impossible (||)
                              end))
                      |) in
                    let _ :=
                      M.loop (|
                        ltac:(M.monadic
                          (M.match_operator (|
                            M.alloc (| Value.Tuple [] |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ :=
                                    M.alloc (|
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "core::iter::traits::iterator::Iterator",
                                          Ty.apply
                                            (Ty.path "core::iter::adapters::peekable::Peekable")
                                            [
                                              Ty.apply
                                                (Ty.path "core::slice::iter::Iter")
                                                [
                                                  Ty.path
                                                    "delphinus_zkwasm::circuits::utils::table_entry::MemoryWritingEntry"
                                                ]
                                            ],
                                          [],
                                          "next",
                                          []
                                        |),
                                        [ iter ]
                                      |)
                                    |) in
                                  let γ0_0 :=
                                    M.SubPointer.get_struct_tuple_field (|
                                      γ,
                                      "core::option::Option::Some",
                                      0
                                    |) in
                                  let curr := M.copy (| γ0_0 |) in
                                  let next :=
                                    M.alloc (|
                                      M.call_closure (|
                                        M.get_associated_function (|
                                          Ty.apply
                                            (Ty.path "core::iter::adapters::peekable::Peekable")
                                            [
                                              Ty.apply
                                                (Ty.path "core::slice::iter::Iter")
                                                [
                                                  Ty.path
                                                    "delphinus_zkwasm::circuits::utils::table_entry::MemoryWritingEntry"
                                                ]
                                            ],
                                          "peek",
                                          []
                                        |),
                                        [ iter ]
                                      |)
                                    |) in
                                  let _ :=
                                    M.match_operator (|
                                      M.alloc (| Value.Tuple [] |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let γ :=
                                              M.use
                                                (M.alloc (|
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.path "specs::mtable::AccessType",
                                                      "is_init",
                                                      []
                                                    |),
                                                    [
                                                      M.SubPointer.get_struct_record_field (|
                                                        M.SubPointer.get_struct_record_field (|
                                                          M.read (| curr |),
                                                          "delphinus_zkwasm::circuits::utils::table_entry::MemoryWritingEntry",
                                                          "entry"
                                                        |),
                                                        "specs::mtable::MemoryTableEntry",
                                                        "atype"
                                                      |)
                                                    ]
                                                  |)
                                                |)) in
                                            let _ :=
                                              M.is_constant_or_break_match (|
                                                M.read (| γ |),
                                                Value.Bool true
                                              |) in
                                            let _ :=
                                              M.write (|
                                                current_address_init_encode,
                                                Value.StructTuple
                                                  "core::option::Option::Some"
                                                  [
                                                    M.call_closure (|
                                                      M.get_function (|
                                                        "delphinus_zkwasm::circuits::utils::bn_to_field",
                                                        [ F ]
                                                      |),
                                                      [
                                                        M.alloc (|
                                                          M.call_closure (|
                                                            M.get_function (|
                                                              "specs::encode::init_memory_table::encode_init_memory_table_entry",
                                                              [
                                                                Ty.path
                                                                  "num_bigint::biguint::BigUint"
                                                              ]
                                                            |),
                                                            [
                                                              M.call_closure (|
                                                                M.get_trait_method (|
                                                                  "core::convert::Into",
                                                                  Ty.path "u64",
                                                                  [
                                                                    Ty.path
                                                                      "num_bigint::biguint::BigUint"
                                                                  ],
                                                                  "into",
                                                                  []
                                                                |),
                                                                [
                                                                  M.rust_cast
                                                                    (M.read (|
                                                                      M.SubPointer.get_struct_record_field (|
                                                                        M.SubPointer.get_struct_record_field (|
                                                                          M.read (| curr |),
                                                                          "delphinus_zkwasm::circuits::utils::table_entry::MemoryWritingEntry",
                                                                          "entry"
                                                                        |),
                                                                        "specs::mtable::MemoryTableEntry",
                                                                        "ltype"
                                                                      |)
                                                                    |))
                                                                ]
                                                              |);
                                                              M.call_closure (|
                                                                M.get_trait_method (|
                                                                  "core::convert::Into",
                                                                  Ty.path "u32",
                                                                  [
                                                                    Ty.path
                                                                      "num_bigint::biguint::BigUint"
                                                                  ],
                                                                  "into",
                                                                  []
                                                                |),
                                                                [
                                                                  M.read (|
                                                                    M.SubPointer.get_struct_record_field (|
                                                                      M.SubPointer.get_struct_record_field (|
                                                                        M.read (| curr |),
                                                                        "delphinus_zkwasm::circuits::utils::table_entry::MemoryWritingEntry",
                                                                        "entry"
                                                                      |),
                                                                      "specs::mtable::MemoryTableEntry",
                                                                      "offset"
                                                                    |)
                                                                  |)
                                                                ]
                                                              |);
                                                              M.call_closure (|
                                                                M.get_trait_method (|
                                                                  "core::convert::Into",
                                                                  Ty.path "u64",
                                                                  [
                                                                    Ty.path
                                                                      "num_bigint::biguint::BigUint"
                                                                  ],
                                                                  "into",
                                                                  []
                                                                |),
                                                                [
                                                                  M.rust_cast
                                                                    (M.read (|
                                                                      M.SubPointer.get_struct_record_field (|
                                                                        M.SubPointer.get_struct_record_field (|
                                                                          M.read (| curr |),
                                                                          "delphinus_zkwasm::circuits::utils::table_entry::MemoryWritingEntry",
                                                                          "entry"
                                                                        |),
                                                                        "specs::mtable::MemoryTableEntry",
                                                                        "is_mutable"
                                                                      |)
                                                                    |))
                                                                ]
                                                              |);
                                                              M.call_closure (|
                                                                M.get_trait_method (|
                                                                  "core::convert::Into",
                                                                  Ty.path "u32",
                                                                  [
                                                                    Ty.path
                                                                      "num_bigint::biguint::BigUint"
                                                                  ],
                                                                  "into",
                                                                  []
                                                                |),
                                                                [
                                                                  M.read (|
                                                                    M.SubPointer.get_struct_record_field (|
                                                                      M.SubPointer.get_struct_record_field (|
                                                                        M.read (| curr |),
                                                                        "delphinus_zkwasm::circuits::utils::table_entry::MemoryWritingEntry",
                                                                        "entry"
                                                                      |),
                                                                      "specs::mtable::MemoryTableEntry",
                                                                      "eid"
                                                                    |)
                                                                  |)
                                                                ]
                                                              |);
                                                              M.call_closure (|
                                                                M.get_trait_method (|
                                                                  "core::convert::Into",
                                                                  Ty.path "u64",
                                                                  [
                                                                    Ty.path
                                                                      "num_bigint::biguint::BigUint"
                                                                  ],
                                                                  "into",
                                                                  []
                                                                |),
                                                                [
                                                                  M.read (|
                                                                    M.SubPointer.get_struct_record_field (|
                                                                      M.SubPointer.get_struct_record_field (|
                                                                        M.read (| curr |),
                                                                        "delphinus_zkwasm::circuits::utils::table_entry::MemoryWritingEntry",
                                                                        "entry"
                                                                      |),
                                                                      "specs::mtable::MemoryTableEntry",
                                                                      "value"
                                                                    |)
                                                                  |)
                                                                ]
                                                              |)
                                                            ]
                                                          |)
                                                        |)
                                                      ]
                                                    |)
                                                  ]
                                              |) in
                                            M.alloc (| Value.Tuple [] |)));
                                        fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                      ]
                                    |) in
                                  M.match_operator (|
                                    M.match_operator (|
                                      M.alloc (| Value.Tuple [] |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let γ := next in
                                            let γ0_0 :=
                                              M.SubPointer.get_struct_tuple_field (|
                                                γ,
                                                "core::option::Option::Some",
                                                0
                                              |) in
                                            let next := M.copy (| γ0_0 |) in
                                            M.match_operator (|
                                              M.alloc (| Value.Tuple [] |),
                                              [
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (let γ :=
                                                      M.use
                                                        (M.alloc (|
                                                          M.call_closure (|
                                                            M.get_trait_method (|
                                                              "core::cmp::PartialEq",
                                                              Ty.path "specs::mtable::LocationType",
                                                              [
                                                                Ty.path
                                                                  "specs::mtable::LocationType"
                                                              ],
                                                              "eq",
                                                              []
                                                            |),
                                                            [
                                                              M.SubPointer.get_struct_record_field (|
                                                                M.SubPointer.get_struct_record_field (|
                                                                  M.read (| curr |),
                                                                  "delphinus_zkwasm::circuits::utils::table_entry::MemoryWritingEntry",
                                                                  "entry"
                                                                |),
                                                                "specs::mtable::MemoryTableEntry",
                                                                "ltype"
                                                              |);
                                                              M.SubPointer.get_struct_record_field (|
                                                                M.SubPointer.get_struct_record_field (|
                                                                  M.read (| M.read (| next |) |),
                                                                  "delphinus_zkwasm::circuits::utils::table_entry::MemoryWritingEntry",
                                                                  "entry"
                                                                |),
                                                                "specs::mtable::MemoryTableEntry",
                                                                "ltype"
                                                              |)
                                                            ]
                                                          |)
                                                        |)) in
                                                    let _ :=
                                                      M.is_constant_or_break_match (|
                                                        M.read (| γ |),
                                                        Value.Bool true
                                                      |) in
                                                    let offset_diff :=
                                                      M.alloc (|
                                                        BinOp.Panic.sub (|
                                                          Integer.U32,
                                                          M.read (|
                                                            M.SubPointer.get_struct_record_field (|
                                                              M.SubPointer.get_struct_record_field (|
                                                                M.read (| M.read (| next |) |),
                                                                "delphinus_zkwasm::circuits::utils::table_entry::MemoryWritingEntry",
                                                                "entry"
                                                              |),
                                                              "specs::mtable::MemoryTableEntry",
                                                              "offset"
                                                            |)
                                                          |),
                                                          M.read (|
                                                            M.SubPointer.get_struct_record_field (|
                                                              M.SubPointer.get_struct_record_field (|
                                                                M.read (| curr |),
                                                                "delphinus_zkwasm::circuits::utils::table_entry::MemoryWritingEntry",
                                                                "entry"
                                                              |),
                                                              "specs::mtable::MemoryTableEntry",
                                                              "offset"
                                                            |)
                                                          |)
                                                        |)
                                                      |) in
                                                    M.alloc (|
                                                      Value.Tuple
                                                        [
                                                          Value.Bool true;
                                                          BinOp.Pure.eq
                                                            (M.read (|
                                                              M.SubPointer.get_struct_record_field (|
                                                                M.SubPointer.get_struct_record_field (|
                                                                  M.read (| curr |),
                                                                  "delphinus_zkwasm::circuits::utils::table_entry::MemoryWritingEntry",
                                                                  "entry"
                                                                |),
                                                                "specs::mtable::MemoryTableEntry",
                                                                "offset"
                                                              |)
                                                            |))
                                                            (M.read (|
                                                              M.SubPointer.get_struct_record_field (|
                                                                M.SubPointer.get_struct_record_field (|
                                                                  M.read (| M.read (| next |) |),
                                                                  "delphinus_zkwasm::circuits::utils::table_entry::MemoryWritingEntry",
                                                                  "entry"
                                                                |),
                                                                "specs::mtable::MemoryTableEntry",
                                                                "offset"
                                                              |)
                                                            |));
                                                          M.read (| offset_diff |)
                                                        ]
                                                    |)));
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (M.alloc (|
                                                      Value.Tuple
                                                        [
                                                          Value.Bool false;
                                                          Value.Bool false;
                                                          Value.Integer 0
                                                        ]
                                                    |)))
                                              ]
                                            |)));
                                        fun γ =>
                                          ltac:(M.monadic
                                            (M.alloc (|
                                              Value.Tuple
                                                [
                                                  Value.Bool false;
                                                  Value.Bool false;
                                                  Value.Integer 0
                                                ]
                                            |)))
                                      ]
                                    |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                                          let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                                          let γ0_2 := M.SubPointer.get_tuple_field (| γ, 2 |) in
                                          let is_next_same_ltype_cell := M.copy (| γ0_0 |) in
                                          let is_next_same_offset_cell := M.copy (| γ0_1 |) in
                                          let offset_diff := M.copy (| γ0_2 |) in
                                          let _ :=
                                            M.alloc (|
                                              M.call_closure (|
                                                M.get_associated_function (|
                                                  Ty.apply
                                                    (Ty.path "alloc::vec::Vec")
                                                    [
                                                      Ty.apply
                                                        (Ty.path
                                                          "delphinus_zkwasm::circuits::mtable::assign::assign_entries::Status")
                                                        [ F ];
                                                      Ty.path "alloc::alloc::Global"
                                                    ],
                                                  "push",
                                                  []
                                                |),
                                                [
                                                  status;
                                                  Value.StructRecord
                                                    "delphinus_zkwasm::circuits::mtable::assign::assign_entries::Status"
                                                    [
                                                      ("rest_mops", M.read (| rest_mops |));
                                                      ("init_encode",
                                                        M.call_closure (|
                                                          M.get_associated_function (|
                                                            Ty.apply
                                                              (Ty.path "core::option::Option")
                                                              [ F ],
                                                            "unwrap_or",
                                                            []
                                                          |),
                                                          [
                                                            M.read (|
                                                              current_address_init_encode
                                                            |);
                                                            M.call_closure (|
                                                              M.get_trait_method (|
                                                                "ff::Field",
                                                                F,
                                                                [],
                                                                "zero",
                                                                []
                                                              |),
                                                              []
                                                            |)
                                                          ]
                                                        |));
                                                      ("is_next_same_ltype_cell",
                                                        M.read (| is_next_same_ltype_cell |));
                                                      ("is_next_same_offset_cell",
                                                        M.read (| is_next_same_offset_cell |));
                                                      ("offset_diff", M.read (| offset_diff |));
                                                      ("_rest_memory_finalize_ops",
                                                        M.read (| _rest_memory_finalize_ops |));
                                                      ("_post_init_encode_cell",
                                                        M.read (|
                                                          M.match_operator (|
                                                            M.alloc (| Value.Tuple [] |),
                                                            [
                                                              fun γ =>
                                                                ltac:(M.monadic
                                                                  (let γ :=
                                                                    M.use
                                                                      (M.alloc (|
                                                                        M.call_closure (|
                                                                          M.get_trait_method (|
                                                                            "core::ops::function::Fn",
                                                                            Ty.function
                                                                              [
                                                                                Ty.tuple
                                                                                  [
                                                                                    Ty.apply
                                                                                      (Ty.path "&")
                                                                                      [
                                                                                        Ty.path
                                                                                          "delphinus_zkwasm::circuits::utils::table_entry::MemoryWritingEntry"
                                                                                      ];
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "core::option::Option")
                                                                                      [
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "&")
                                                                                          [
                                                                                            Ty.apply
                                                                                              (Ty.path
                                                                                                "&")
                                                                                              [
                                                                                                Ty.path
                                                                                                  "delphinus_zkwasm::circuits::utils::table_entry::MemoryWritingEntry"
                                                                                              ]
                                                                                          ]
                                                                                      ]
                                                                                  ]
                                                                              ]
                                                                              (Ty.path "bool"),
                                                                            [
                                                                              Ty.tuple
                                                                                [
                                                                                  Ty.apply
                                                                                    (Ty.path "&")
                                                                                    [
                                                                                      Ty.path
                                                                                        "delphinus_zkwasm::circuits::utils::table_entry::MemoryWritingEntry"
                                                                                    ];
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "core::option::Option")
                                                                                    [
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "&")
                                                                                        [
                                                                                          Ty.apply
                                                                                            (Ty.path
                                                                                              "&")
                                                                                            [
                                                                                              Ty.path
                                                                                                "delphinus_zkwasm::circuits::utils::table_entry::MemoryWritingEntry"
                                                                                            ]
                                                                                        ]
                                                                                    ]
                                                                                ]
                                                                            ],
                                                                            "call",
                                                                            []
                                                                          |),
                                                                          [
                                                                            is_finalized_writing_entry;
                                                                            Value.Tuple
                                                                              [
                                                                                M.read (| curr |);
                                                                                M.read (| next |)
                                                                              ]
                                                                          ]
                                                                        |)
                                                                      |)) in
                                                                  let _ :=
                                                                    M.is_constant_or_break_match (|
                                                                      M.read (| γ |),
                                                                      Value.Bool true
                                                                    |) in
                                                                  M.alloc (|
                                                                    Value.StructTuple
                                                                      "core::option::Option::Some"
                                                                      [
                                                                        M.call_closure (|
                                                                          M.get_function (|
                                                                            "delphinus_zkwasm::circuits::utils::bn_to_field",
                                                                            [ F ]
                                                                          |),
                                                                          [
                                                                            M.alloc (|
                                                                              M.call_closure (|
                                                                                M.get_trait_method (|
                                                                                  "core::ops::arith::Add",
                                                                                  Ty.path
                                                                                    "num_bigint::biguint::BigUint",
                                                                                  [
                                                                                    Ty.path
                                                                                      "num_bigint::biguint::BigUint"
                                                                                  ],
                                                                                  "add",
                                                                                  []
                                                                                |),
                                                                                [
                                                                                  M.call_closure (|
                                                                                    M.get_trait_method (|
                                                                                      "core::ops::arith::Mul",
                                                                                      Ty.path
                                                                                        "num_bigint::biguint::BigUint",
                                                                                      [
                                                                                        Ty.path
                                                                                          "u32"
                                                                                      ],
                                                                                      "mul",
                                                                                      []
                                                                                    |),
                                                                                    [
                                                                                      M.call_closure (|
                                                                                        M.get_function (|
                                                                                          "specs::encode::init_memory_table::encode_init_memory_table_address",
                                                                                          [
                                                                                            Ty.path
                                                                                              "num_bigint::biguint::BigUint"
                                                                                          ]
                                                                                        |),
                                                                                        [
                                                                                          M.call_closure (|
                                                                                            M.get_trait_method (|
                                                                                              "core::convert::Into",
                                                                                              Ty.path
                                                                                                "u64",
                                                                                              [
                                                                                                Ty.path
                                                                                                  "num_bigint::biguint::BigUint"
                                                                                              ],
                                                                                              "into",
                                                                                              []
                                                                                            |),
                                                                                            [
                                                                                              M.rust_cast
                                                                                                (M.read (|
                                                                                                  M.SubPointer.get_struct_record_field (|
                                                                                                    M.SubPointer.get_struct_record_field (|
                                                                                                      M.read (|
                                                                                                        curr
                                                                                                      |),
                                                                                                      "delphinus_zkwasm::circuits::utils::table_entry::MemoryWritingEntry",
                                                                                                      "entry"
                                                                                                    |),
                                                                                                    "specs::mtable::MemoryTableEntry",
                                                                                                    "ltype"
                                                                                                  |)
                                                                                                |))
                                                                                            ]
                                                                                          |);
                                                                                          M.call_closure (|
                                                                                            M.get_trait_method (|
                                                                                              "core::convert::Into",
                                                                                              Ty.path
                                                                                                "u32",
                                                                                              [
                                                                                                Ty.path
                                                                                                  "num_bigint::biguint::BigUint"
                                                                                              ],
                                                                                              "into",
                                                                                              []
                                                                                            |),
                                                                                            [
                                                                                              M.read (|
                                                                                                M.SubPointer.get_struct_record_field (|
                                                                                                  M.SubPointer.get_struct_record_field (|
                                                                                                    M.read (|
                                                                                                      curr
                                                                                                    |),
                                                                                                    "delphinus_zkwasm::circuits::utils::table_entry::MemoryWritingEntry",
                                                                                                    "entry"
                                                                                                  |),
                                                                                                  "specs::mtable::MemoryTableEntry",
                                                                                                  "offset"
                                                                                                |)
                                                                                              |)
                                                                                            ]
                                                                                          |)
                                                                                        ]
                                                                                      |);
                                                                                      M.read (|
                                                                                        M.get_constant (|
                                                                                          "specs::encode::init_memory_table::MEMORY_ADDRESS_OFFSET"
                                                                                        |)
                                                                                      |)
                                                                                    ]
                                                                                  |);
                                                                                  M.call_closure (|
                                                                                    M.get_function (|
                                                                                      "specs::encode::init_memory_table::encode_init_memory_table_entry",
                                                                                      [
                                                                                        Ty.path
                                                                                          "num_bigint::biguint::BigUint"
                                                                                      ]
                                                                                    |),
                                                                                    [
                                                                                      M.call_closure (|
                                                                                        M.get_trait_method (|
                                                                                          "core::convert::Into",
                                                                                          Ty.path
                                                                                            "u64",
                                                                                          [
                                                                                            Ty.path
                                                                                              "num_bigint::biguint::BigUint"
                                                                                          ],
                                                                                          "into",
                                                                                          []
                                                                                        |),
                                                                                        [
                                                                                          M.rust_cast
                                                                                            (M.read (|
                                                                                              M.SubPointer.get_struct_record_field (|
                                                                                                M.SubPointer.get_struct_record_field (|
                                                                                                  M.read (|
                                                                                                    curr
                                                                                                  |),
                                                                                                  "delphinus_zkwasm::circuits::utils::table_entry::MemoryWritingEntry",
                                                                                                  "entry"
                                                                                                |),
                                                                                                "specs::mtable::MemoryTableEntry",
                                                                                                "ltype"
                                                                                              |)
                                                                                            |))
                                                                                        ]
                                                                                      |);
                                                                                      M.call_closure (|
                                                                                        M.get_trait_method (|
                                                                                          "core::convert::Into",
                                                                                          Ty.path
                                                                                            "u32",
                                                                                          [
                                                                                            Ty.path
                                                                                              "num_bigint::biguint::BigUint"
                                                                                          ],
                                                                                          "into",
                                                                                          []
                                                                                        |),
                                                                                        [
                                                                                          M.read (|
                                                                                            M.SubPointer.get_struct_record_field (|
                                                                                              M.SubPointer.get_struct_record_field (|
                                                                                                M.read (|
                                                                                                  curr
                                                                                                |),
                                                                                                "delphinus_zkwasm::circuits::utils::table_entry::MemoryWritingEntry",
                                                                                                "entry"
                                                                                              |),
                                                                                              "specs::mtable::MemoryTableEntry",
                                                                                              "offset"
                                                                                            |)
                                                                                          |)
                                                                                        ]
                                                                                      |);
                                                                                      M.call_closure (|
                                                                                        M.get_trait_method (|
                                                                                          "core::convert::Into",
                                                                                          Ty.path
                                                                                            "u64",
                                                                                          [
                                                                                            Ty.path
                                                                                              "num_bigint::biguint::BigUint"
                                                                                          ],
                                                                                          "into",
                                                                                          []
                                                                                        |),
                                                                                        [
                                                                                          M.rust_cast
                                                                                            (M.read (|
                                                                                              M.SubPointer.get_struct_record_field (|
                                                                                                M.SubPointer.get_struct_record_field (|
                                                                                                  M.read (|
                                                                                                    curr
                                                                                                  |),
                                                                                                  "delphinus_zkwasm::circuits::utils::table_entry::MemoryWritingEntry",
                                                                                                  "entry"
                                                                                                |),
                                                                                                "specs::mtable::MemoryTableEntry",
                                                                                                "is_mutable"
                                                                                              |)
                                                                                            |))
                                                                                        ]
                                                                                      |);
                                                                                      M.call_closure (|
                                                                                        M.get_trait_method (|
                                                                                          "core::convert::Into",
                                                                                          Ty.path
                                                                                            "u32",
                                                                                          [
                                                                                            Ty.path
                                                                                              "num_bigint::biguint::BigUint"
                                                                                          ],
                                                                                          "into",
                                                                                          []
                                                                                        |),
                                                                                        [
                                                                                          M.read (|
                                                                                            M.SubPointer.get_struct_record_field (|
                                                                                              M.SubPointer.get_struct_record_field (|
                                                                                                M.read (|
                                                                                                  curr
                                                                                                |),
                                                                                                "delphinus_zkwasm::circuits::utils::table_entry::MemoryWritingEntry",
                                                                                                "entry"
                                                                                              |),
                                                                                              "specs::mtable::MemoryTableEntry",
                                                                                              "eid"
                                                                                            |)
                                                                                          |)
                                                                                        ]
                                                                                      |);
                                                                                      M.call_closure (|
                                                                                        M.get_trait_method (|
                                                                                          "core::convert::Into",
                                                                                          Ty.path
                                                                                            "u64",
                                                                                          [
                                                                                            Ty.path
                                                                                              "num_bigint::biguint::BigUint"
                                                                                          ],
                                                                                          "into",
                                                                                          []
                                                                                        |),
                                                                                        [
                                                                                          M.read (|
                                                                                            M.SubPointer.get_struct_record_field (|
                                                                                              M.SubPointer.get_struct_record_field (|
                                                                                                M.read (|
                                                                                                  curr
                                                                                                |),
                                                                                                "delphinus_zkwasm::circuits::utils::table_entry::MemoryWritingEntry",
                                                                                                "entry"
                                                                                              |),
                                                                                              "specs::mtable::MemoryTableEntry",
                                                                                              "value"
                                                                                            |)
                                                                                          |)
                                                                                        ]
                                                                                      |)
                                                                                    ]
                                                                                  |)
                                                                                ]
                                                                              |)
                                                                            |)
                                                                          ]
                                                                        |)
                                                                      ]
                                                                  |)));
                                                              fun γ =>
                                                                ltac:(M.monadic
                                                                  (M.alloc (|
                                                                    Value.StructTuple
                                                                      "core::option::Option::None"
                                                                      []
                                                                  |)))
                                                            ]
                                                          |)
                                                        |))
                                                    ]
                                                ]
                                              |)
                                            |) in
                                          let _ :=
                                            M.match_operator (|
                                              M.alloc (| Value.Tuple [] |),
                                              [
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (let γ := next in
                                                    let γ0_0 :=
                                                      M.SubPointer.get_struct_tuple_field (|
                                                        γ,
                                                        "core::option::Option::Some",
                                                        0
                                                      |) in
                                                    let next_entry := M.copy (| γ0_0 |) in
                                                    M.match_operator (|
                                                      M.alloc (| Value.Tuple [] |),
                                                      [
                                                        fun γ =>
                                                          ltac:(M.monadic
                                                            (let γ :=
                                                              M.use
                                                                (M.alloc (|
                                                                  UnOp.Pure.not
                                                                    (M.call_closure (|
                                                                      M.get_associated_function (|
                                                                        Ty.path
                                                                          "specs::mtable::MemoryTableEntry",
                                                                        "is_same_location",
                                                                        []
                                                                      |),
                                                                      [
                                                                        M.SubPointer.get_struct_record_field (|
                                                                          M.read (|
                                                                            M.read (| next_entry |)
                                                                          |),
                                                                          "delphinus_zkwasm::circuits::utils::table_entry::MemoryWritingEntry",
                                                                          "entry"
                                                                        |);
                                                                        M.SubPointer.get_struct_record_field (|
                                                                          M.read (| curr |),
                                                                          "delphinus_zkwasm::circuits::utils::table_entry::MemoryWritingEntry",
                                                                          "entry"
                                                                        |)
                                                                      ]
                                                                    |))
                                                                |)) in
                                                            let _ :=
                                                              M.is_constant_or_break_match (|
                                                                M.read (| γ |),
                                                                Value.Bool true
                                                              |) in
                                                            let _ :=
                                                              M.write (|
                                                                current_address_init_encode,
                                                                Value.StructTuple
                                                                  "core::option::Option::None"
                                                                  []
                                                              |) in
                                                            M.alloc (| Value.Tuple [] |)));
                                                        fun γ =>
                                                          ltac:(M.monadic
                                                            (M.alloc (| Value.Tuple [] |)))
                                                      ]
                                                    |)));
                                                fun γ =>
                                                  ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                              ]
                                            |) in
                                          let _ :=
                                            M.match_operator (|
                                              M.alloc (| Value.Tuple [] |),
                                              [
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (let γ :=
                                                      M.use
                                                        (M.alloc (|
                                                          M.call_closure (|
                                                            M.get_trait_method (|
                                                              "core::ops::function::Fn",
                                                              Ty.function
                                                                [
                                                                  Ty.tuple
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path "&")
                                                                        [
                                                                          Ty.path
                                                                            "delphinus_zkwasm::circuits::utils::table_entry::MemoryWritingEntry"
                                                                        ];
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "core::option::Option")
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path "&")
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path "&")
                                                                                [
                                                                                  Ty.path
                                                                                    "delphinus_zkwasm::circuits::utils::table_entry::MemoryWritingEntry"
                                                                                ]
                                                                            ]
                                                                        ]
                                                                    ]
                                                                ]
                                                                (Ty.path "bool"),
                                                              [
                                                                Ty.tuple
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path "&")
                                                                      [
                                                                        Ty.path
                                                                          "delphinus_zkwasm::circuits::utils::table_entry::MemoryWritingEntry"
                                                                      ];
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "core::option::Option")
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path "&")
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path "&")
                                                                              [
                                                                                Ty.path
                                                                                  "delphinus_zkwasm::circuits::utils::table_entry::MemoryWritingEntry"
                                                                              ]
                                                                          ]
                                                                      ]
                                                                  ]
                                                              ],
                                                              "call",
                                                              []
                                                            |),
                                                            [
                                                              is_finalized_writing_entry;
                                                              Value.Tuple
                                                                [
                                                                  M.read (| curr |);
                                                                  M.read (| next |)
                                                                ]
                                                            ]
                                                          |)
                                                        |)) in
                                                    let _ :=
                                                      M.is_constant_or_break_match (|
                                                        M.read (| γ |),
                                                        Value.Bool true
                                                      |) in
                                                    let _ :=
                                                      let β := _rest_memory_finalize_ops in
                                                      M.write (|
                                                        β,
                                                        BinOp.Panic.sub (|
                                                          Integer.U32,
                                                          M.read (| β |),
                                                          Value.Integer 1
                                                        |)
                                                      |) in
                                                    M.alloc (| Value.Tuple [] |)));
                                                fun γ =>
                                                  ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                              ]
                                            |) in
                                          M.match_operator (|
                                            M.alloc (| Value.Tuple [] |),
                                            [
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let γ :=
                                                    M.use
                                                      (M.alloc (|
                                                        UnOp.Pure.not
                                                          (M.call_closure (|
                                                            M.get_associated_function (|
                                                              Ty.path "specs::mtable::AccessType",
                                                              "is_init",
                                                              []
                                                            |),
                                                            [
                                                              M.SubPointer.get_struct_record_field (|
                                                                M.SubPointer.get_struct_record_field (|
                                                                  M.read (| curr |),
                                                                  "delphinus_zkwasm::circuits::utils::table_entry::MemoryWritingEntry",
                                                                  "entry"
                                                                |),
                                                                "specs::mtable::MemoryTableEntry",
                                                                "atype"
                                                              |)
                                                            ]
                                                          |))
                                                      |)) in
                                                  let _ :=
                                                    M.is_constant_or_break_match (|
                                                      M.read (| γ |),
                                                      Value.Bool true
                                                    |) in
                                                  let _ :=
                                                    let β := rest_mops in
                                                    M.write (|
                                                      β,
                                                      BinOp.Panic.sub (|
                                                        Integer.U64,
                                                        M.read (| β |),
                                                        Value.Integer 1
                                                      |)
                                                    |) in
                                                  M.alloc (| Value.Tuple [] |)));
                                              fun γ =>
                                                ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                            ]
                                          |)))
                                    ]
                                  |)));
                              fun γ =>
                                ltac:(M.monadic
                                  (M.alloc (|
                                    M.never_to_any (|
                                      M.read (|
                                        let _ :=
                                          M.alloc (|
                                            M.never_to_any (| M.read (| M.break (||) |) |)
                                          |) in
                                        M.alloc (| Value.Tuple [] |)
                                      |)
                                    |)
                                  |)))
                            ]
                          |)))
                      |) in
                    status
                  |) in
                let _ :=
                  M.alloc (|
                    M.call_closure (|
                      M.get_trait_method (|
                        "rayon::iter::ParallelIterator",
                        Ty.apply
                          (Ty.path "rayon::iter::enumerate::Enumerate")
                          [
                            Ty.apply
                              (Ty.path "rayon::slice::Iter")
                              [
                                Ty.path
                                  "delphinus_zkwasm::circuits::utils::table_entry::MemoryWritingEntry"
                              ]
                          ],
                        [],
                        "for_each",
                        [
                          Ty.function
                            [
                              Ty.tuple
                                [
                                  Ty.tuple
                                    [
                                      Ty.path "usize";
                                      Ty.apply
                                        (Ty.path "&")
                                        [
                                          Ty.path
                                            "delphinus_zkwasm::circuits::utils::table_entry::MemoryWritingEntry"
                                        ]
                                    ]
                                ]
                            ]
                            (Ty.tuple [])
                        ]
                      |),
                      [
                        M.call_closure (|
                          M.get_trait_method (|
                            "rayon::iter::IndexedParallelIterator",
                            Ty.apply
                              (Ty.path "rayon::slice::Iter")
                              [
                                Ty.path
                                  "delphinus_zkwasm::circuits::utils::table_entry::MemoryWritingEntry"
                              ],
                            [],
                            "enumerate",
                            []
                          |),
                          [
                            M.call_closure (|
                              M.get_trait_method (|
                                "rayon::iter::IntoParallelRefIterator",
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  [
                                    Ty.path
                                      "delphinus_zkwasm::circuits::utils::table_entry::MemoryWritingEntry";
                                    Ty.path "alloc::alloc::Global"
                                  ],
                                [],
                                "par_iter",
                                []
                              |),
                              [
                                M.SubPointer.get_struct_tuple_field (|
                                  M.read (| mtable |),
                                  "delphinus_zkwasm::circuits::utils::table_entry::MemoryWritingTable",
                                  0
                                |)
                              ]
                            |)
                          ]
                        |);
                        M.closure
                          (fun γ =>
                            ltac:(M.monadic
                              match γ with
                              | [ α0 ] =>
                                M.match_operator (|
                                  M.alloc (| α0 |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                                        let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                                        let index := M.copy (| γ0_0 |) in
                                        let entry := M.copy (| γ0_1 |) in
                                        M.read (|
                                          let ctx :=
                                            M.alloc (|
                                              M.call_closure (|
                                                M.get_associated_function (|
                                                  Ty.apply
                                                    (Ty.path
                                                      "delphinus_zkwasm::circuits::utils::Context")
                                                    [ F ],
                                                  "new",
                                                  []
                                                |),
                                                [ M.read (| region |) ]
                                              |)
                                            |) in
                                          let _ :=
                                            M.alloc (|
                                              M.call_closure (|
                                                M.get_associated_function (|
                                                  Ty.apply
                                                    (Ty.path
                                                      "delphinus_zkwasm::circuits::utils::Context")
                                                    [ F ],
                                                  "step",
                                                  []
                                                |),
                                                [
                                                  ctx;
                                                  BinOp.Panic.mul (|
                                                    Integer.Usize,
                                                    M.rust_cast
                                                      (M.read (|
                                                        M.get_constant (|
                                                          "delphinus_zkwasm::circuits::mtable::MEMORY_TABLE_ENTRY_ROWS"
                                                        |)
                                                      |)),
                                                    M.read (| index |)
                                                  |)
                                                ]
                                              |)
                                            |) in
                                          let _ :=
                                            M.alloc (|
                                              M.call_closure (|
                                                M.get_associated_function (|
                                                  Ty.apply
                                                    (Ty.path "core::result::Result")
                                                    [
                                                      Ty.apply
                                                        (Ty.path
                                                          "halo2_proofs::circuit::AssignedCell")
                                                        [ F; F ];
                                                      Ty.path "halo2_proofs::plonk::error::Error"
                                                    ],
                                                  "unwrap",
                                                  []
                                                |),
                                                [
                                                  M.call_closure (|
                                                    M.get_trait_method (|
                                                      "delphinus_zkwasm::circuits::cell::CellExpression",
                                                      Ty.apply
                                                        (Ty.path
                                                          "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                                        [ F ],
                                                      [ F ],
                                                      "assign",
                                                      []
                                                    |),
                                                    [
                                                      M.SubPointer.get_struct_record_field (|
                                                        M.SubPointer.get_struct_record_field (|
                                                          M.read (| self |),
                                                          "delphinus_zkwasm::circuits::mtable::MemoryTableChip",
                                                          "config"
                                                        |),
                                                        "delphinus_zkwasm::circuits::mtable::MemoryTableConfig",
                                                        "enabled_cell"
                                                      |);
                                                      ctx;
                                                      M.call_closure (|
                                                        M.get_trait_method (|
                                                          "ff::Field",
                                                          F,
                                                          [],
                                                          "one",
                                                          []
                                                        |),
                                                        []
                                                      |)
                                                    ]
                                                  |)
                                                ]
                                              |)
                                            |) in
                                          let _ :=
                                            M.match_operator (|
                                              M.SubPointer.get_struct_record_field (|
                                                M.SubPointer.get_struct_record_field (|
                                                  M.read (| entry |),
                                                  "delphinus_zkwasm::circuits::utils::table_entry::MemoryWritingEntry",
                                                  "entry"
                                                |),
                                                "specs::mtable::MemoryTableEntry",
                                                "ltype"
                                              |),
                                              [
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (M.alloc (|
                                                      M.call_closure (|
                                                        M.get_associated_function (|
                                                          Ty.apply
                                                            (Ty.path "core::result::Result")
                                                            [
                                                              Ty.apply
                                                                (Ty.path
                                                                  "halo2_proofs::circuit::AssignedCell")
                                                                [ F; F ];
                                                              Ty.path
                                                                "halo2_proofs::plonk::error::Error"
                                                            ],
                                                          "unwrap",
                                                          []
                                                        |),
                                                        [
                                                          M.call_closure (|
                                                            M.get_trait_method (|
                                                              "delphinus_zkwasm::circuits::cell::CellExpression",
                                                              Ty.apply
                                                                (Ty.path
                                                                  "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                                                [ F ],
                                                              [ F ],
                                                              "assign",
                                                              []
                                                            |),
                                                            [
                                                              M.SubPointer.get_struct_record_field (|
                                                                M.SubPointer.get_struct_record_field (|
                                                                  M.read (| self |),
                                                                  "delphinus_zkwasm::circuits::mtable::MemoryTableChip",
                                                                  "config"
                                                                |),
                                                                "delphinus_zkwasm::circuits::mtable::MemoryTableConfig",
                                                                "is_stack_cell"
                                                              |);
                                                              ctx;
                                                              M.call_closure (|
                                                                M.get_trait_method (|
                                                                  "ff::Field",
                                                                  F,
                                                                  [],
                                                                  "one",
                                                                  []
                                                                |),
                                                                []
                                                              |)
                                                            ]
                                                          |)
                                                        ]
                                                      |)
                                                    |)));
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (M.alloc (|
                                                      M.call_closure (|
                                                        M.get_associated_function (|
                                                          Ty.apply
                                                            (Ty.path "core::result::Result")
                                                            [
                                                              Ty.apply
                                                                (Ty.path
                                                                  "halo2_proofs::circuit::AssignedCell")
                                                                [ F; F ];
                                                              Ty.path
                                                                "halo2_proofs::plonk::error::Error"
                                                            ],
                                                          "unwrap",
                                                          []
                                                        |),
                                                        [
                                                          M.call_closure (|
                                                            M.get_trait_method (|
                                                              "delphinus_zkwasm::circuits::cell::CellExpression",
                                                              Ty.apply
                                                                (Ty.path
                                                                  "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                                                [ F ],
                                                              [ F ],
                                                              "assign",
                                                              []
                                                            |),
                                                            [
                                                              M.SubPointer.get_struct_record_field (|
                                                                M.SubPointer.get_struct_record_field (|
                                                                  M.read (| self |),
                                                                  "delphinus_zkwasm::circuits::mtable::MemoryTableChip",
                                                                  "config"
                                                                |),
                                                                "delphinus_zkwasm::circuits::mtable::MemoryTableConfig",
                                                                "is_heap_cell"
                                                              |);
                                                              ctx;
                                                              M.call_closure (|
                                                                M.get_trait_method (|
                                                                  "ff::Field",
                                                                  F,
                                                                  [],
                                                                  "one",
                                                                  []
                                                                |),
                                                                []
                                                              |)
                                                            ]
                                                          |)
                                                        ]
                                                      |)
                                                    |)));
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (M.alloc (|
                                                      M.call_closure (|
                                                        M.get_associated_function (|
                                                          Ty.apply
                                                            (Ty.path "core::result::Result")
                                                            [
                                                              Ty.apply
                                                                (Ty.path
                                                                  "halo2_proofs::circuit::AssignedCell")
                                                                [ F; F ];
                                                              Ty.path
                                                                "halo2_proofs::plonk::error::Error"
                                                            ],
                                                          "unwrap",
                                                          []
                                                        |),
                                                        [
                                                          M.call_closure (|
                                                            M.get_trait_method (|
                                                              "delphinus_zkwasm::circuits::cell::CellExpression",
                                                              Ty.apply
                                                                (Ty.path
                                                                  "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                                                [ F ],
                                                              [ F ],
                                                              "assign",
                                                              []
                                                            |),
                                                            [
                                                              M.SubPointer.get_struct_record_field (|
                                                                M.SubPointer.get_struct_record_field (|
                                                                  M.read (| self |),
                                                                  "delphinus_zkwasm::circuits::mtable::MemoryTableChip",
                                                                  "config"
                                                                |),
                                                                "delphinus_zkwasm::circuits::mtable::MemoryTableConfig",
                                                                "is_global_cell"
                                                              |);
                                                              ctx;
                                                              M.call_closure (|
                                                                M.get_trait_method (|
                                                                  "ff::Field",
                                                                  F,
                                                                  [],
                                                                  "one",
                                                                  []
                                                                |),
                                                                []
                                                              |)
                                                            ]
                                                          |)
                                                        ]
                                                      |)
                                                    |)))
                                              ]
                                            |) in
                                          let _ :=
                                            M.match_operator (|
                                              M.alloc (| Value.Tuple [] |),
                                              [
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (let γ :=
                                                      M.use
                                                        (M.SubPointer.get_struct_record_field (|
                                                          M.SubPointer.get_struct_record_field (|
                                                            M.read (| entry |),
                                                            "delphinus_zkwasm::circuits::utils::table_entry::MemoryWritingEntry",
                                                            "entry"
                                                          |),
                                                          "specs::mtable::MemoryTableEntry",
                                                          "is_mutable"
                                                        |)) in
                                                    let _ :=
                                                      M.is_constant_or_break_match (|
                                                        M.read (| γ |),
                                                        Value.Bool true
                                                      |) in
                                                    let _ :=
                                                      M.alloc (|
                                                        M.call_closure (|
                                                          M.get_associated_function (|
                                                            Ty.apply
                                                              (Ty.path "core::result::Result")
                                                              [
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "halo2_proofs::circuit::AssignedCell")
                                                                  [ F; F ];
                                                                Ty.path
                                                                  "halo2_proofs::plonk::error::Error"
                                                              ],
                                                            "unwrap",
                                                            []
                                                          |),
                                                          [
                                                            M.call_closure (|
                                                              M.get_trait_method (|
                                                                "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                                                  [ F ],
                                                                [ F ],
                                                                "assign",
                                                                []
                                                              |),
                                                              [
                                                                M.SubPointer.get_struct_record_field (|
                                                                  M.SubPointer.get_struct_record_field (|
                                                                    M.read (| self |),
                                                                    "delphinus_zkwasm::circuits::mtable::MemoryTableChip",
                                                                    "config"
                                                                  |),
                                                                  "delphinus_zkwasm::circuits::mtable::MemoryTableConfig",
                                                                  "is_mutable"
                                                                |);
                                                                ctx;
                                                                M.call_closure (|
                                                                  M.get_trait_method (|
                                                                    "ff::Field",
                                                                    F,
                                                                    [],
                                                                    "one",
                                                                    []
                                                                  |),
                                                                  []
                                                                |)
                                                              ]
                                                            |)
                                                          ]
                                                        |)
                                                      |) in
                                                    M.alloc (| Value.Tuple [] |)));
                                                fun γ =>
                                                  ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                              ]
                                            |) in
                                          let _ :=
                                            M.match_operator (|
                                              M.SubPointer.get_struct_record_field (|
                                                M.SubPointer.get_struct_record_field (|
                                                  M.read (| entry |),
                                                  "delphinus_zkwasm::circuits::utils::table_entry::MemoryWritingEntry",
                                                  "entry"
                                                |),
                                                "specs::mtable::MemoryTableEntry",
                                                "vtype"
                                              |),
                                              [
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (M.alloc (|
                                                      M.call_closure (|
                                                        M.get_associated_function (|
                                                          Ty.apply
                                                            (Ty.path "core::result::Result")
                                                            [
                                                              Ty.apply
                                                                (Ty.path
                                                                  "halo2_proofs::circuit::AssignedCell")
                                                                [ F; F ];
                                                              Ty.path
                                                                "halo2_proofs::plonk::error::Error"
                                                            ],
                                                          "unwrap",
                                                          []
                                                        |),
                                                        [
                                                          M.call_closure (|
                                                            M.get_trait_method (|
                                                              "delphinus_zkwasm::circuits::cell::CellExpression",
                                                              Ty.apply
                                                                (Ty.path
                                                                  "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                                                [ F ],
                                                              [ F ],
                                                              "assign",
                                                              []
                                                            |),
                                                            [
                                                              M.SubPointer.get_struct_record_field (|
                                                                M.SubPointer.get_struct_record_field (|
                                                                  M.read (| self |),
                                                                  "delphinus_zkwasm::circuits::mtable::MemoryTableChip",
                                                                  "config"
                                                                |),
                                                                "delphinus_zkwasm::circuits::mtable::MemoryTableConfig",
                                                                "is_i32_cell"
                                                              |);
                                                              ctx;
                                                              M.call_closure (|
                                                                M.get_trait_method (|
                                                                  "ff::Field",
                                                                  F,
                                                                  [],
                                                                  "one",
                                                                  []
                                                                |),
                                                                []
                                                              |)
                                                            ]
                                                          |)
                                                        ]
                                                      |)
                                                    |)));
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (M.alloc (|
                                                      M.call_closure (|
                                                        M.get_associated_function (|
                                                          Ty.apply
                                                            (Ty.path "core::result::Result")
                                                            [
                                                              Ty.apply
                                                                (Ty.path
                                                                  "halo2_proofs::circuit::AssignedCell")
                                                                [ F; F ];
                                                              Ty.path
                                                                "halo2_proofs::plonk::error::Error"
                                                            ],
                                                          "unwrap",
                                                          []
                                                        |),
                                                        [
                                                          M.call_closure (|
                                                            M.get_trait_method (|
                                                              "delphinus_zkwasm::circuits::cell::CellExpression",
                                                              Ty.apply
                                                                (Ty.path
                                                                  "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                                                [ F ],
                                                              [ F ],
                                                              "assign",
                                                              []
                                                            |),
                                                            [
                                                              M.SubPointer.get_struct_record_field (|
                                                                M.SubPointer.get_struct_record_field (|
                                                                  M.read (| self |),
                                                                  "delphinus_zkwasm::circuits::mtable::MemoryTableChip",
                                                                  "config"
                                                                |),
                                                                "delphinus_zkwasm::circuits::mtable::MemoryTableConfig",
                                                                "is_i64_cell"
                                                              |);
                                                              ctx;
                                                              M.call_closure (|
                                                                M.get_trait_method (|
                                                                  "ff::Field",
                                                                  F,
                                                                  [],
                                                                  "one",
                                                                  []
                                                                |),
                                                                []
                                                              |)
                                                            ]
                                                          |)
                                                        ]
                                                      |)
                                                    |)))
                                              ]
                                            |) in
                                          let _ :=
                                            M.match_operator (|
                                              M.alloc (| Value.Tuple [] |),
                                              [
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (let γ :=
                                                      M.use
                                                        (M.alloc (|
                                                          M.call_closure (|
                                                            M.get_associated_function (|
                                                              Ty.path "specs::mtable::AccessType",
                                                              "is_init",
                                                              []
                                                            |),
                                                            [
                                                              M.SubPointer.get_struct_record_field (|
                                                                M.SubPointer.get_struct_record_field (|
                                                                  M.read (| entry |),
                                                                  "delphinus_zkwasm::circuits::utils::table_entry::MemoryWritingEntry",
                                                                  "entry"
                                                                |),
                                                                "specs::mtable::MemoryTableEntry",
                                                                "atype"
                                                              |)
                                                            ]
                                                          |)
                                                        |)) in
                                                    let _ :=
                                                      M.is_constant_or_break_match (|
                                                        M.read (| γ |),
                                                        Value.Bool true
                                                      |) in
                                                    let _ :=
                                                      M.alloc (|
                                                        M.call_closure (|
                                                          M.get_associated_function (|
                                                            Ty.apply
                                                              (Ty.path "core::result::Result")
                                                              [
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "halo2_proofs::circuit::AssignedCell")
                                                                  [ F; F ];
                                                                Ty.path
                                                                  "halo2_proofs::plonk::error::Error"
                                                              ],
                                                            "unwrap",
                                                            []
                                                          |),
                                                          [
                                                            M.call_closure (|
                                                              M.get_trait_method (|
                                                                "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                                                  [ F ],
                                                                [ F ],
                                                                "assign",
                                                                []
                                                              |),
                                                              [
                                                                M.SubPointer.get_struct_record_field (|
                                                                  M.SubPointer.get_struct_record_field (|
                                                                    M.read (| self |),
                                                                    "delphinus_zkwasm::circuits::mtable::MemoryTableChip",
                                                                    "config"
                                                                  |),
                                                                  "delphinus_zkwasm::circuits::mtable::MemoryTableConfig",
                                                                  "is_init_cell"
                                                                |);
                                                                ctx;
                                                                M.call_closure (|
                                                                  M.get_trait_method (|
                                                                    "ff::Field",
                                                                    F,
                                                                    [],
                                                                    "one",
                                                                    []
                                                                  |),
                                                                  []
                                                                |)
                                                              ]
                                                            |)
                                                          ]
                                                        |)
                                                      |) in
                                                    M.alloc (| Value.Tuple [] |)));
                                                fun γ =>
                                                  ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                              ]
                                            |) in
                                          let _ :=
                                            M.alloc (|
                                              M.call_closure (|
                                                M.get_associated_function (|
                                                  Ty.apply
                                                    (Ty.path "core::result::Result")
                                                    [
                                                      Ty.apply
                                                        (Ty.path
                                                          "halo2_proofs::circuit::AssignedCell")
                                                        [ F; F ];
                                                      Ty.path "halo2_proofs::plonk::error::Error"
                                                    ],
                                                  "unwrap",
                                                  []
                                                |),
                                                [
                                                  M.call_closure (|
                                                    M.get_trait_method (|
                                                      "delphinus_zkwasm::circuits::cell::CellExpression",
                                                      Ty.apply
                                                        (Ty.path
                                                          "delphinus_zkwasm::circuits::cell::AllocatedCommonRangeCell")
                                                        [ F ],
                                                      [ F ],
                                                      "assign",
                                                      []
                                                    |),
                                                    [
                                                      M.SubPointer.get_struct_record_field (|
                                                        M.SubPointer.get_struct_record_field (|
                                                          M.read (| self |),
                                                          "delphinus_zkwasm::circuits::mtable::MemoryTableChip",
                                                          "config"
                                                        |),
                                                        "delphinus_zkwasm::circuits::mtable::MemoryTableConfig",
                                                        "start_eid_cell"
                                                      |);
                                                      ctx;
                                                      M.call_closure (|
                                                        M.get_trait_method (|
                                                          "core::convert::From",
                                                          F,
                                                          [ Ty.path "u64" ],
                                                          "from",
                                                          []
                                                        |),
                                                        [
                                                          M.rust_cast
                                                            (M.read (|
                                                              M.SubPointer.get_struct_record_field (|
                                                                M.SubPointer.get_struct_record_field (|
                                                                  M.read (| entry |),
                                                                  "delphinus_zkwasm::circuits::utils::table_entry::MemoryWritingEntry",
                                                                  "entry"
                                                                |),
                                                                "specs::mtable::MemoryTableEntry",
                                                                "eid"
                                                              |)
                                                            |))
                                                        ]
                                                      |)
                                                    ]
                                                  |)
                                                ]
                                              |)
                                            |) in
                                          let _ :=
                                            M.alloc (|
                                              M.call_closure (|
                                                M.get_associated_function (|
                                                  Ty.apply
                                                    (Ty.path "core::result::Result")
                                                    [
                                                      Ty.apply
                                                        (Ty.path
                                                          "halo2_proofs::circuit::AssignedCell")
                                                        [ F; F ];
                                                      Ty.path "halo2_proofs::plonk::error::Error"
                                                    ],
                                                  "unwrap",
                                                  []
                                                |),
                                                [
                                                  M.call_closure (|
                                                    M.get_trait_method (|
                                                      "delphinus_zkwasm::circuits::cell::CellExpression",
                                                      Ty.apply
                                                        (Ty.path
                                                          "delphinus_zkwasm::circuits::cell::AllocatedCommonRangeCell")
                                                        [ F ],
                                                      [ F ],
                                                      "assign",
                                                      []
                                                    |),
                                                    [
                                                      M.SubPointer.get_struct_record_field (|
                                                        M.SubPointer.get_struct_record_field (|
                                                          M.read (| self |),
                                                          "delphinus_zkwasm::circuits::mtable::MemoryTableChip",
                                                          "config"
                                                        |),
                                                        "delphinus_zkwasm::circuits::mtable::MemoryTableConfig",
                                                        "end_eid_cell"
                                                      |);
                                                      ctx;
                                                      M.call_closure (|
                                                        M.get_trait_method (|
                                                          "core::convert::From",
                                                          F,
                                                          [ Ty.path "u64" ],
                                                          "from",
                                                          []
                                                        |),
                                                        [
                                                          M.rust_cast
                                                            (M.read (|
                                                              M.SubPointer.get_struct_record_field (|
                                                                M.read (| entry |),
                                                                "delphinus_zkwasm::circuits::utils::table_entry::MemoryWritingEntry",
                                                                "end_eid"
                                                              |)
                                                            |))
                                                        ]
                                                      |)
                                                    ]
                                                  |)
                                                ]
                                              |)
                                            |) in
                                          let _ :=
                                            M.alloc (|
                                              M.call_closure (|
                                                M.get_associated_function (|
                                                  Ty.apply
                                                    (Ty.path "core::result::Result")
                                                    [
                                                      Ty.apply
                                                        (Ty.path
                                                          "halo2_proofs::circuit::AssignedCell")
                                                        [ F; F ];
                                                      Ty.path "halo2_proofs::plonk::error::Error"
                                                    ],
                                                  "unwrap",
                                                  []
                                                |),
                                                [
                                                  M.call_closure (|
                                                    M.get_trait_method (|
                                                      "delphinus_zkwasm::circuits::cell::CellExpression",
                                                      Ty.apply
                                                        (Ty.path
                                                          "delphinus_zkwasm::circuits::cell::AllocatedCommonRangeCell")
                                                        [ F ],
                                                      [ F ],
                                                      "assign",
                                                      []
                                                    |),
                                                    [
                                                      M.SubPointer.get_struct_record_field (|
                                                        M.SubPointer.get_struct_record_field (|
                                                          M.read (| self |),
                                                          "delphinus_zkwasm::circuits::mtable::MemoryTableChip",
                                                          "config"
                                                        |),
                                                        "delphinus_zkwasm::circuits::mtable::MemoryTableConfig",
                                                        "eid_diff_cell"
                                                      |);
                                                      ctx;
                                                      M.call_closure (|
                                                        M.get_trait_method (|
                                                          "core::convert::From",
                                                          F,
                                                          [ Ty.path "u64" ],
                                                          "from",
                                                          []
                                                        |),
                                                        [
                                                          M.rust_cast
                                                            (BinOp.Panic.sub (|
                                                              Integer.U32,
                                                              BinOp.Panic.sub (|
                                                                Integer.U32,
                                                                M.read (|
                                                                  M.SubPointer.get_struct_record_field (|
                                                                    M.read (| entry |),
                                                                    "delphinus_zkwasm::circuits::utils::table_entry::MemoryWritingEntry",
                                                                    "end_eid"
                                                                  |)
                                                                |),
                                                                M.read (|
                                                                  M.SubPointer.get_struct_record_field (|
                                                                    M.SubPointer.get_struct_record_field (|
                                                                      M.read (| entry |),
                                                                      "delphinus_zkwasm::circuits::utils::table_entry::MemoryWritingEntry",
                                                                      "entry"
                                                                    |),
                                                                    "specs::mtable::MemoryTableEntry",
                                                                    "eid"
                                                                  |)
                                                                |)
                                                              |),
                                                              Value.Integer 1
                                                            |))
                                                        ]
                                                      |)
                                                    ]
                                                  |)
                                                ]
                                              |)
                                            |) in
                                          let _ :=
                                            M.alloc (|
                                              M.call_closure (|
                                                M.get_associated_function (|
                                                  Ty.apply
                                                    (Ty.path "core::result::Result")
                                                    [
                                                      Ty.apply
                                                        (Ty.path
                                                          "halo2_proofs::circuit::AssignedCell")
                                                        [ F; F ];
                                                      Ty.path "halo2_proofs::plonk::error::Error"
                                                    ],
                                                  "unwrap",
                                                  []
                                                |),
                                                [
                                                  M.call_closure (|
                                                    M.get_trait_method (|
                                                      "delphinus_zkwasm::circuits::cell::CellExpression",
                                                      Ty.apply
                                                        (Ty.path
                                                          "delphinus_zkwasm::circuits::cell::AllocatedUnlimitedCell")
                                                        [ F ],
                                                      [ F ],
                                                      "assign",
                                                      []
                                                    |),
                                                    [
                                                      M.SubPointer.get_struct_record_field (|
                                                        M.SubPointer.get_struct_record_field (|
                                                          M.read (| self |),
                                                          "delphinus_zkwasm::circuits::mtable::MemoryTableChip",
                                                          "config"
                                                        |),
                                                        "delphinus_zkwasm::circuits::mtable::MemoryTableConfig",
                                                        "init_encode_cell"
                                                      |);
                                                      ctx;
                                                      M.read (|
                                                        M.SubPointer.get_struct_record_field (|
                                                          M.call_closure (|
                                                            M.get_trait_method (|
                                                              "core::ops::index::Index",
                                                              Ty.apply
                                                                (Ty.path "alloc::vec::Vec")
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "delphinus_zkwasm::circuits::mtable::assign::assign_entries::Status")
                                                                    [ F ];
                                                                  Ty.path "alloc::alloc::Global"
                                                                ],
                                                              [ Ty.path "usize" ],
                                                              "index",
                                                              []
                                                            |),
                                                            [ status; M.read (| index |) ]
                                                          |),
                                                          "delphinus_zkwasm::circuits::mtable::assign::assign_entries::Status",
                                                          "init_encode"
                                                        |)
                                                      |)
                                                    ]
                                                  |)
                                                ]
                                              |)
                                            |) in
                                          let _ :=
                                            M.alloc (|
                                              M.call_closure (|
                                                M.get_associated_function (|
                                                  Ty.apply
                                                    (Ty.path "core::result::Result")
                                                    [
                                                      Ty.apply
                                                        (Ty.path
                                                          "halo2_proofs::circuit::AssignedCell")
                                                        [ F; F ];
                                                      Ty.path "halo2_proofs::plonk::error::Error"
                                                    ],
                                                  "unwrap",
                                                  []
                                                |),
                                                [
                                                  M.call_closure (|
                                                    M.get_trait_method (|
                                                      "delphinus_zkwasm::circuits::cell::CellExpression",
                                                      Ty.apply
                                                        (Ty.path
                                                          "delphinus_zkwasm::circuits::cell::AllocatedCommonRangeCell")
                                                        [ F ],
                                                      [ F ],
                                                      "assign",
                                                      []
                                                    |),
                                                    [
                                                      M.SubPointer.get_struct_record_field (|
                                                        M.SubPointer.get_struct_record_field (|
                                                          M.read (| self |),
                                                          "delphinus_zkwasm::circuits::mtable::MemoryTableChip",
                                                          "config"
                                                        |),
                                                        "delphinus_zkwasm::circuits::mtable::MemoryTableConfig",
                                                        "rest_mops_cell"
                                                      |);
                                                      ctx;
                                                      M.call_closure (|
                                                        M.get_trait_method (|
                                                          "core::convert::From",
                                                          F,
                                                          [ Ty.path "u64" ],
                                                          "from",
                                                          []
                                                        |),
                                                        [
                                                          M.read (|
                                                            M.SubPointer.get_struct_record_field (|
                                                              M.call_closure (|
                                                                M.get_trait_method (|
                                                                  "core::ops::index::Index",
                                                                  Ty.apply
                                                                    (Ty.path "alloc::vec::Vec")
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "delphinus_zkwasm::circuits::mtable::assign::assign_entries::Status")
                                                                        [ F ];
                                                                      Ty.path "alloc::alloc::Global"
                                                                    ],
                                                                  [ Ty.path "usize" ],
                                                                  "index",
                                                                  []
                                                                |),
                                                                [ status; M.read (| index |) ]
                                                              |),
                                                              "delphinus_zkwasm::circuits::mtable::assign::assign_entries::Status",
                                                              "rest_mops"
                                                            |)
                                                          |)
                                                        ]
                                                      |)
                                                    ]
                                                  |)
                                                ]
                                              |)
                                            |) in
                                          let _ :=
                                            M.alloc (|
                                              M.call_closure (|
                                                M.get_associated_function (|
                                                  Ty.apply
                                                    (Ty.path "core::result::Result")
                                                    [
                                                      Ty.tuple [];
                                                      Ty.path "halo2_proofs::plonk::error::Error"
                                                    ],
                                                  "unwrap",
                                                  []
                                                |),
                                                [
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.apply
                                                        (Ty.path
                                                          "delphinus_zkwasm::circuits::cell::AllocatedU32Cell")
                                                        [ F ],
                                                      "assign",
                                                      []
                                                    |),
                                                    [
                                                      M.SubPointer.get_struct_record_field (|
                                                        M.SubPointer.get_struct_record_field (|
                                                          M.read (| self |),
                                                          "delphinus_zkwasm::circuits::mtable::MemoryTableChip",
                                                          "config"
                                                        |),
                                                        "delphinus_zkwasm::circuits::mtable::MemoryTableConfig",
                                                        "offset_cell"
                                                      |);
                                                      ctx;
                                                      M.read (|
                                                        M.SubPointer.get_struct_record_field (|
                                                          M.SubPointer.get_struct_record_field (|
                                                            M.read (| entry |),
                                                            "delphinus_zkwasm::circuits::utils::table_entry::MemoryWritingEntry",
                                                            "entry"
                                                          |),
                                                          "specs::mtable::MemoryTableEntry",
                                                          "offset"
                                                        |)
                                                      |)
                                                    ]
                                                  |)
                                                ]
                                              |)
                                            |) in
                                          let _ :=
                                            M.alloc (|
                                              M.call_closure (|
                                                M.get_associated_function (|
                                                  Ty.apply
                                                    (Ty.path "core::result::Result")
                                                    [
                                                      Ty.tuple [];
                                                      Ty.path "halo2_proofs::plonk::error::Error"
                                                    ],
                                                  "unwrap",
                                                  []
                                                |),
                                                [
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.apply
                                                        (Ty.path
                                                          "delphinus_zkwasm::circuits::cell::AllocatedU64Cell")
                                                        [ F ],
                                                      "assign",
                                                      []
                                                    |),
                                                    [
                                                      M.SubPointer.get_struct_record_field (|
                                                        M.SubPointer.get_struct_record_field (|
                                                          M.read (| self |),
                                                          "delphinus_zkwasm::circuits::mtable::MemoryTableChip",
                                                          "config"
                                                        |),
                                                        "delphinus_zkwasm::circuits::mtable::MemoryTableConfig",
                                                        "value"
                                                      |);
                                                      ctx;
                                                      M.read (|
                                                        M.SubPointer.get_struct_record_field (|
                                                          M.SubPointer.get_struct_record_field (|
                                                            M.read (| entry |),
                                                            "delphinus_zkwasm::circuits::utils::table_entry::MemoryWritingEntry",
                                                            "entry"
                                                          |),
                                                          "specs::mtable::MemoryTableEntry",
                                                          "value"
                                                        |)
                                                      |)
                                                    ]
                                                  |)
                                                ]
                                              |)
                                            |) in
                                          let offset_diff :=
                                            M.alloc (|
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "core::convert::From",
                                                  F,
                                                  [ Ty.path "u64" ],
                                                  "from",
                                                  []
                                                |),
                                                [
                                                  M.rust_cast
                                                    (M.read (|
                                                      M.SubPointer.get_struct_record_field (|
                                                        M.call_closure (|
                                                          M.get_trait_method (|
                                                            "core::ops::index::Index",
                                                            Ty.apply
                                                              (Ty.path "alloc::vec::Vec")
                                                              [
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "delphinus_zkwasm::circuits::mtable::assign::assign_entries::Status")
                                                                  [ F ];
                                                                Ty.path "alloc::alloc::Global"
                                                              ],
                                                            [ Ty.path "usize" ],
                                                            "index",
                                                            []
                                                          |),
                                                          [ status; M.read (| index |) ]
                                                        |),
                                                        "delphinus_zkwasm::circuits::mtable::assign::assign_entries::Status",
                                                        "offset_diff"
                                                      |)
                                                    |))
                                                ]
                                              |)
                                            |) in
                                          let offset_diff_inv :=
                                            M.alloc (|
                                              M.call_closure (|
                                                M.get_associated_function (|
                                                  Ty.apply (Ty.path "subtle::CtOption") [ F ],
                                                  "unwrap_or",
                                                  []
                                                |),
                                                [
                                                  M.call_closure (|
                                                    M.get_trait_method (|
                                                      "ff::Field",
                                                      F,
                                                      [],
                                                      "invert",
                                                      []
                                                    |),
                                                    [ offset_diff ]
                                                  |);
                                                  M.call_closure (|
                                                    M.get_trait_method (|
                                                      "ff::Field",
                                                      F,
                                                      [],
                                                      "zero",
                                                      []
                                                    |),
                                                    []
                                                  |)
                                                ]
                                              |)
                                            |) in
                                          let offset_diff_inv_helper :=
                                            M.alloc (|
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "core::ops::arith::Mul",
                                                  F,
                                                  [ F ],
                                                  "mul",
                                                  []
                                                |),
                                                [
                                                  M.read (| offset_diff |);
                                                  M.read (| offset_diff_inv |)
                                                ]
                                              |)
                                            |) in
                                          let _ :=
                                            M.match_operator (|
                                              M.alloc (| Value.Tuple [] |),
                                              [
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (let γ :=
                                                      M.use
                                                        (M.SubPointer.get_struct_record_field (|
                                                          M.call_closure (|
                                                            M.get_trait_method (|
                                                              "core::ops::index::Index",
                                                              Ty.apply
                                                                (Ty.path "alloc::vec::Vec")
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "delphinus_zkwasm::circuits::mtable::assign::assign_entries::Status")
                                                                    [ F ];
                                                                  Ty.path "alloc::alloc::Global"
                                                                ],
                                                              [ Ty.path "usize" ],
                                                              "index",
                                                              []
                                                            |),
                                                            [ status; M.read (| index |) ]
                                                          |),
                                                          "delphinus_zkwasm::circuits::mtable::assign::assign_entries::Status",
                                                          "is_next_same_ltype_cell"
                                                        |)) in
                                                    let _ :=
                                                      M.is_constant_or_break_match (|
                                                        M.read (| γ |),
                                                        Value.Bool true
                                                      |) in
                                                    let _ :=
                                                      M.alloc (|
                                                        M.call_closure (|
                                                          M.get_associated_function (|
                                                            Ty.apply
                                                              (Ty.path "core::result::Result")
                                                              [
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "halo2_proofs::circuit::AssignedCell")
                                                                  [ F; F ];
                                                                Ty.path
                                                                  "halo2_proofs::plonk::error::Error"
                                                              ],
                                                            "unwrap",
                                                            []
                                                          |),
                                                          [
                                                            M.call_closure (|
                                                              M.get_trait_method (|
                                                                "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                                                  [ F ],
                                                                [ F ],
                                                                "assign",
                                                                []
                                                              |),
                                                              [
                                                                M.SubPointer.get_struct_record_field (|
                                                                  M.SubPointer.get_struct_record_field (|
                                                                    M.read (| self |),
                                                                    "delphinus_zkwasm::circuits::mtable::MemoryTableChip",
                                                                    "config"
                                                                  |),
                                                                  "delphinus_zkwasm::circuits::mtable::MemoryTableConfig",
                                                                  "is_next_same_ltype_cell"
                                                                |);
                                                                ctx;
                                                                M.call_closure (|
                                                                  M.get_trait_method (|
                                                                    "ff::Field",
                                                                    F,
                                                                    [],
                                                                    "one",
                                                                    []
                                                                  |),
                                                                  []
                                                                |)
                                                              ]
                                                            |)
                                                          ]
                                                        |)
                                                      |) in
                                                    M.alloc (| Value.Tuple [] |)));
                                                fun γ =>
                                                  ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                              ]
                                            |) in
                                          let _ :=
                                            M.match_operator (|
                                              M.alloc (| Value.Tuple [] |),
                                              [
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (let γ :=
                                                      M.use
                                                        (M.SubPointer.get_struct_record_field (|
                                                          M.call_closure (|
                                                            M.get_trait_method (|
                                                              "core::ops::index::Index",
                                                              Ty.apply
                                                                (Ty.path "alloc::vec::Vec")
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "delphinus_zkwasm::circuits::mtable::assign::assign_entries::Status")
                                                                    [ F ];
                                                                  Ty.path "alloc::alloc::Global"
                                                                ],
                                                              [ Ty.path "usize" ],
                                                              "index",
                                                              []
                                                            |),
                                                            [ status; M.read (| index |) ]
                                                          |),
                                                          "delphinus_zkwasm::circuits::mtable::assign::assign_entries::Status",
                                                          "is_next_same_offset_cell"
                                                        |)) in
                                                    let _ :=
                                                      M.is_constant_or_break_match (|
                                                        M.read (| γ |),
                                                        Value.Bool true
                                                      |) in
                                                    let _ :=
                                                      M.alloc (|
                                                        M.call_closure (|
                                                          M.get_associated_function (|
                                                            Ty.apply
                                                              (Ty.path "core::result::Result")
                                                              [
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "halo2_proofs::circuit::AssignedCell")
                                                                  [ F; F ];
                                                                Ty.path
                                                                  "halo2_proofs::plonk::error::Error"
                                                              ],
                                                            "unwrap",
                                                            []
                                                          |),
                                                          [
                                                            M.call_closure (|
                                                              M.get_trait_method (|
                                                                "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                                                  [ F ],
                                                                [ F ],
                                                                "assign",
                                                                []
                                                              |),
                                                              [
                                                                M.SubPointer.get_struct_record_field (|
                                                                  M.SubPointer.get_struct_record_field (|
                                                                    M.read (| self |),
                                                                    "delphinus_zkwasm::circuits::mtable::MemoryTableChip",
                                                                    "config"
                                                                  |),
                                                                  "delphinus_zkwasm::circuits::mtable::MemoryTableConfig",
                                                                  "is_next_same_offset_cell"
                                                                |);
                                                                ctx;
                                                                M.call_closure (|
                                                                  M.get_trait_method (|
                                                                    "ff::Field",
                                                                    F,
                                                                    [],
                                                                    "one",
                                                                    []
                                                                  |),
                                                                  []
                                                                |)
                                                              ]
                                                            |)
                                                          ]
                                                        |)
                                                      |) in
                                                    M.alloc (| Value.Tuple [] |)));
                                                fun γ =>
                                                  ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                              ]
                                            |) in
                                          let _ :=
                                            M.alloc (|
                                              M.call_closure (|
                                                M.get_associated_function (|
                                                  Ty.apply
                                                    (Ty.path "core::result::Result")
                                                    [
                                                      Ty.tuple [];
                                                      Ty.path "halo2_proofs::plonk::error::Error"
                                                    ],
                                                  "unwrap",
                                                  []
                                                |),
                                                [
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.apply
                                                        (Ty.path
                                                          "delphinus_zkwasm::circuits::cell::AllocatedU32Cell")
                                                        [ F ],
                                                      "assign",
                                                      []
                                                    |),
                                                    [
                                                      M.SubPointer.get_struct_record_field (|
                                                        M.SubPointer.get_struct_record_field (|
                                                          M.read (| self |),
                                                          "delphinus_zkwasm::circuits::mtable::MemoryTableChip",
                                                          "config"
                                                        |),
                                                        "delphinus_zkwasm::circuits::mtable::MemoryTableConfig",
                                                        "offset_diff_cell"
                                                      |);
                                                      ctx;
                                                      M.read (|
                                                        M.SubPointer.get_struct_record_field (|
                                                          M.call_closure (|
                                                            M.get_trait_method (|
                                                              "core::ops::index::Index",
                                                              Ty.apply
                                                                (Ty.path "alloc::vec::Vec")
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "delphinus_zkwasm::circuits::mtable::assign::assign_entries::Status")
                                                                    [ F ];
                                                                  Ty.path "alloc::alloc::Global"
                                                                ],
                                                              [ Ty.path "usize" ],
                                                              "index",
                                                              []
                                                            |),
                                                            [ status; M.read (| index |) ]
                                                          |),
                                                          "delphinus_zkwasm::circuits::mtable::assign::assign_entries::Status",
                                                          "offset_diff"
                                                        |)
                                                      |)
                                                    ]
                                                  |)
                                                ]
                                              |)
                                            |) in
                                          let _ :=
                                            M.alloc (|
                                              M.call_closure (|
                                                M.get_associated_function (|
                                                  Ty.apply
                                                    (Ty.path "core::result::Result")
                                                    [
                                                      Ty.apply
                                                        (Ty.path
                                                          "halo2_proofs::circuit::AssignedCell")
                                                        [ F; F ];
                                                      Ty.path "halo2_proofs::plonk::error::Error"
                                                    ],
                                                  "unwrap",
                                                  []
                                                |),
                                                [
                                                  M.call_closure (|
                                                    M.get_trait_method (|
                                                      "delphinus_zkwasm::circuits::cell::CellExpression",
                                                      Ty.apply
                                                        (Ty.path
                                                          "delphinus_zkwasm::circuits::cell::AllocatedUnlimitedCell")
                                                        [ F ],
                                                      [ F ],
                                                      "assign",
                                                      []
                                                    |),
                                                    [
                                                      M.SubPointer.get_struct_record_field (|
                                                        M.SubPointer.get_struct_record_field (|
                                                          M.read (| self |),
                                                          "delphinus_zkwasm::circuits::mtable::MemoryTableChip",
                                                          "config"
                                                        |),
                                                        "delphinus_zkwasm::circuits::mtable::MemoryTableConfig",
                                                        "offset_diff_inv_cell"
                                                      |);
                                                      ctx;
                                                      M.read (| offset_diff_inv |)
                                                    ]
                                                  |)
                                                ]
                                              |)
                                            |) in
                                          let _ :=
                                            M.alloc (|
                                              M.call_closure (|
                                                M.get_associated_function (|
                                                  Ty.apply
                                                    (Ty.path "core::result::Result")
                                                    [
                                                      Ty.apply
                                                        (Ty.path
                                                          "halo2_proofs::circuit::AssignedCell")
                                                        [ F; F ];
                                                      Ty.path "halo2_proofs::plonk::error::Error"
                                                    ],
                                                  "unwrap",
                                                  []
                                                |),
                                                [
                                                  M.call_closure (|
                                                    M.get_trait_method (|
                                                      "delphinus_zkwasm::circuits::cell::CellExpression",
                                                      Ty.apply
                                                        (Ty.path
                                                          "delphinus_zkwasm::circuits::cell::AllocatedUnlimitedCell")
                                                        [ F ],
                                                      [ F ],
                                                      "assign",
                                                      []
                                                    |),
                                                    [
                                                      M.SubPointer.get_struct_record_field (|
                                                        M.SubPointer.get_struct_record_field (|
                                                          M.read (| self |),
                                                          "delphinus_zkwasm::circuits::mtable::MemoryTableChip",
                                                          "config"
                                                        |),
                                                        "delphinus_zkwasm::circuits::mtable::MemoryTableConfig",
                                                        "offset_diff_inv_helper_cell"
                                                      |);
                                                      ctx;
                                                      M.read (| offset_diff_inv_helper |)
                                                    ]
                                                  |)
                                                ]
                                              |)
                                            |) in
                                          let _ :=
                                            M.alloc (|
                                              M.call_closure (|
                                                M.get_associated_function (|
                                                  Ty.apply
                                                    (Ty.path "core::result::Result")
                                                    [
                                                      Ty.apply
                                                        (Ty.path
                                                          "halo2_proofs::circuit::AssignedCell")
                                                        [ F; F ];
                                                      Ty.path "halo2_proofs::plonk::error::Error"
                                                    ],
                                                  "unwrap",
                                                  []
                                                |),
                                                [
                                                  M.call_closure (|
                                                    M.get_trait_method (|
                                                      "delphinus_zkwasm::circuits::cell::CellExpression",
                                                      Ty.apply
                                                        (Ty.path
                                                          "delphinus_zkwasm::circuits::cell::AllocatedUnlimitedCell")
                                                        [ F ],
                                                      [ F ],
                                                      "assign",
                                                      []
                                                    |),
                                                    [
                                                      M.SubPointer.get_struct_record_field (|
                                                        M.SubPointer.get_struct_record_field (|
                                                          M.read (| self |),
                                                          "delphinus_zkwasm::circuits::mtable::MemoryTableChip",
                                                          "config"
                                                        |),
                                                        "delphinus_zkwasm::circuits::mtable::MemoryTableConfig",
                                                        "encode_cell"
                                                      |);
                                                      ctx;
                                                      M.call_closure (|
                                                        M.get_function (|
                                                          "delphinus_zkwasm::circuits::utils::bn_to_field",
                                                          [ F ]
                                                        |),
                                                        [
                                                          M.alloc (|
                                                            M.call_closure (|
                                                              M.get_function (|
                                                                "specs::encode::memory_table::encode_memory_table_entry",
                                                                [
                                                                  Ty.path
                                                                    "num_bigint::biguint::BigUint"
                                                                ]
                                                              |),
                                                              [
                                                                M.call_closure (|
                                                                  M.get_trait_method (|
                                                                    "core::convert::Into",
                                                                    Ty.path "u32",
                                                                    [
                                                                      Ty.path
                                                                        "num_bigint::biguint::BigUint"
                                                                    ],
                                                                    "into",
                                                                    []
                                                                  |),
                                                                  [
                                                                    M.read (|
                                                                      M.SubPointer.get_struct_record_field (|
                                                                        M.SubPointer.get_struct_record_field (|
                                                                          M.read (| entry |),
                                                                          "delphinus_zkwasm::circuits::utils::table_entry::MemoryWritingEntry",
                                                                          "entry"
                                                                        |),
                                                                        "specs::mtable::MemoryTableEntry",
                                                                        "offset"
                                                                      |)
                                                                    |)
                                                                  ]
                                                                |);
                                                                M.call_closure (|
                                                                  M.get_trait_method (|
                                                                    "core::convert::Into",
                                                                    Ty.path "u64",
                                                                    [
                                                                      Ty.path
                                                                        "num_bigint::biguint::BigUint"
                                                                    ],
                                                                    "into",
                                                                    []
                                                                  |),
                                                                  [
                                                                    M.rust_cast
                                                                      (M.read (|
                                                                        M.SubPointer.get_struct_record_field (|
                                                                          M.SubPointer.get_struct_record_field (|
                                                                            M.read (| entry |),
                                                                            "delphinus_zkwasm::circuits::utils::table_entry::MemoryWritingEntry",
                                                                            "entry"
                                                                          |),
                                                                          "specs::mtable::MemoryTableEntry",
                                                                          "ltype"
                                                                        |)
                                                                      |))
                                                                  ]
                                                                |);
                                                                M.read (|
                                                                  M.match_operator (|
                                                                    M.alloc (| Value.Tuple [] |),
                                                                    [
                                                                      fun γ =>
                                                                        ltac:(M.monadic
                                                                          (let γ :=
                                                                            M.use
                                                                              (M.alloc (|
                                                                                M.call_closure (|
                                                                                  M.get_trait_method (|
                                                                                    "core::cmp::PartialEq",
                                                                                    Ty.path
                                                                                      "specs::mtable::VarType",
                                                                                    [
                                                                                      Ty.path
                                                                                        "specs::mtable::VarType"
                                                                                    ],
                                                                                    "eq",
                                                                                    []
                                                                                  |),
                                                                                  [
                                                                                    M.alloc (|
                                                                                      Value.StructTuple
                                                                                        "specs::mtable::VarType::I32"
                                                                                        []
                                                                                    |);
                                                                                    M.SubPointer.get_struct_record_field (|
                                                                                      M.SubPointer.get_struct_record_field (|
                                                                                        M.read (|
                                                                                          entry
                                                                                        |),
                                                                                        "delphinus_zkwasm::circuits::utils::table_entry::MemoryWritingEntry",
                                                                                        "entry"
                                                                                      |),
                                                                                      "specs::mtable::MemoryTableEntry",
                                                                                      "vtype"
                                                                                    |)
                                                                                  ]
                                                                                |)
                                                                              |)) in
                                                                          let _ :=
                                                                            M.is_constant_or_break_match (|
                                                                              M.read (| γ |),
                                                                              Value.Bool true
                                                                            |) in
                                                                          M.alloc (|
                                                                            M.call_closure (|
                                                                              M.get_trait_method (|
                                                                                "core::convert::Into",
                                                                                Ty.path "u64",
                                                                                [
                                                                                  Ty.path
                                                                                    "num_bigint::biguint::BigUint"
                                                                                ],
                                                                                "into",
                                                                                []
                                                                              |),
                                                                              [ Value.Integer 1 ]
                                                                            |)
                                                                          |)));
                                                                      fun γ =>
                                                                        ltac:(M.monadic
                                                                          (M.alloc (|
                                                                            M.call_closure (|
                                                                              M.get_trait_method (|
                                                                                "core::convert::Into",
                                                                                Ty.path "u64",
                                                                                [
                                                                                  Ty.path
                                                                                    "num_bigint::biguint::BigUint"
                                                                                ],
                                                                                "into",
                                                                                []
                                                                              |),
                                                                              [ Value.Integer 0 ]
                                                                            |)
                                                                          |)))
                                                                    ]
                                                                  |)
                                                                |)
                                                              ]
                                                            |)
                                                          |)
                                                        ]
                                                      |)
                                                    ]
                                                  |)
                                                ]
                                              |)
                                            |) in
                                          M.alloc (| Value.Tuple [] |)
                                        |)))
                                  ]
                                |)
                              | _ => M.impossible (||)
                              end))
                      ]
                    |)
                  |) in
                M.alloc (| Value.StructTuple "core::result::Result::Ok" [ Value.Tuple [] ] |)
              |)))
          | _, _ => M.impossible
          end.
        
        Axiom AssociatedFunction_assign_entries :
          forall (F : Ty.t),
          M.IsAssociatedFunction (Self F) "assign_entries" (assign_entries F).
        
        (*
            pub(crate) fn assign(
                &self,
                layouter: impl Layouter<F>,
                mtable: &MemoryWritingTable,
            ) -> Result<(AssignedCell<F, F>, Option<AssignedCell<F, F>>), Error> {
                layouter.assign_region(
                    || "mtable",
                    |region| {
                        let mut ctx = Context::new(region);
        
                        debug!("size of memory writing table: {}", mtable.0.len());
                        assert!(
                            mtable.0.len() * (MEMORY_TABLE_ENTRY_ROWS as usize)
                                < self.maximal_available_rows
                        );
        
                        let rest_mops = mtable
                            .0
                            .iter()
                            .fold(0, |acc, entry| acc + (!entry.entry.atype.is_init() as u64));
        
                        self.assign_fixed(&mut ctx)?;
                        ctx.reset();
        
                        let (rest_memory_finalize_ops, _) = mtable.count_rest_memory_finalize_ops();
        
                        #[cfg(feature = "continuation")]
                        let rest_memory_finalize_ops_cell =
                            self.constrain_rest_memory_finalize_ops(&mut ctx, rest_memory_finalize_ops)?;
        
                        let rest_mops_cell = self.constrain_rest_mops_permutation(&mut ctx, rest_mops)?;
        
                        self.assign_entries(region, &mtable, rest_mops, rest_memory_finalize_ops)?;
        
                        cfg_if::cfg_if! {
                            if #[cfg(feature="continuation")] {
                                Ok((rest_mops_cell, Some(rest_memory_finalize_ops_cell)))
                            } else {
                                // Useless rest_memory_finalize_ops if continuation is disabled
                                Ok((rest_mops_cell, None,))
                            }
                        }
                    },
                )
            }
        *)
        Definition assign (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self F in
          match τ, α with
          | [ impl_Layouter_F_ ], [ self; layouter; mtable ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              let layouter := M.alloc (| layouter |) in
              let mtable := M.alloc (| mtable |) in
              M.call_closure (|
                M.get_trait_method (|
                  "halo2_proofs::circuit::Layouter",
                  impl_Layouter_F_,
                  [ F ],
                  "assign_region",
                  [
                    Ty.function
                      [
                        Ty.tuple
                          [
                            Ty.apply
                              (Ty.path "&")
                              [ Ty.apply (Ty.path "halo2_proofs::circuit::Region") [ F ] ]
                          ]
                      ]
                      (Ty.apply
                        (Ty.path "core::result::Result")
                        [
                          Ty.tuple
                            [
                              Ty.apply (Ty.path "halo2_proofs::circuit::AssignedCell") [ F; F ];
                              Ty.apply
                                (Ty.path "core::option::Option")
                                [ Ty.apply (Ty.path "halo2_proofs::circuit::AssignedCell") [ F; F ]
                                ]
                            ];
                          Ty.path "halo2_proofs::plonk::error::Error"
                        ]);
                    Ty.tuple
                      [
                        Ty.apply (Ty.path "halo2_proofs::circuit::AssignedCell") [ F; F ];
                        Ty.apply
                          (Ty.path "core::option::Option")
                          [ Ty.apply (Ty.path "halo2_proofs::circuit::AssignedCell") [ F; F ] ]
                      ];
                    Ty.function [ Ty.tuple [] ] (Ty.apply (Ty.path "&") [ Ty.path "str" ]);
                    Ty.apply (Ty.path "&") [ Ty.path "str" ]
                  ]
                |),
                [
                  layouter;
                  M.closure
                    (fun γ =>
                      ltac:(M.monadic
                        match γ with
                        | [ α0 ] =>
                          M.match_operator (|
                            M.alloc (| α0 |),
                            [ fun γ => ltac:(M.monadic (M.read (| Value.String "mtable" |))) ]
                          |)
                        | _ => M.impossible (||)
                        end));
                  M.closure
                    (fun γ =>
                      ltac:(M.monadic
                        match γ with
                        | [ α0 ] =>
                          M.match_operator (|
                            M.alloc (| α0 |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let region := M.copy (| γ |) in
                                  M.read (|
                                    let ctx :=
                                      M.alloc (|
                                        M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.apply
                                              (Ty.path "delphinus_zkwasm::circuits::utils::Context")
                                              [ F ],
                                            "new",
                                            []
                                          |),
                                          [ M.read (| region |) ]
                                        |)
                                      |) in
                                    let _ :=
                                      let lvl :=
                                        M.alloc (| Value.StructTuple "log::Level::Debug" [] |) in
                                      M.match_operator (|
                                        M.alloc (| Value.Tuple [] |),
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let γ :=
                                                M.use
                                                  (M.alloc (|
                                                    LogicalOp.and (|
                                                      M.call_closure (|
                                                        M.get_trait_method (|
                                                          "core::cmp::PartialOrd",
                                                          Ty.path "log::Level",
                                                          [ Ty.path "log::LevelFilter" ],
                                                          "le",
                                                          []
                                                        |),
                                                        [
                                                          lvl;
                                                          M.get_constant (|
                                                            "log::STATIC_MAX_LEVEL"
                                                          |)
                                                        ]
                                                      |),
                                                      ltac:(M.monadic
                                                        (M.call_closure (|
                                                          M.get_trait_method (|
                                                            "core::cmp::PartialOrd",
                                                            Ty.path "log::Level",
                                                            [ Ty.path "log::LevelFilter" ],
                                                            "le",
                                                            []
                                                          |),
                                                          [
                                                            lvl;
                                                            M.alloc (|
                                                              M.call_closure (|
                                                                M.get_function (|
                                                                  "log::max_level",
                                                                  []
                                                                |),
                                                                []
                                                              |)
                                                            |)
                                                          ]
                                                        |)))
                                                    |)
                                                  |)) in
                                              let _ :=
                                                M.is_constant_or_break_match (|
                                                  M.read (| γ |),
                                                  Value.Bool true
                                                |) in
                                              let _ :=
                                                M.alloc (|
                                                  M.call_closure (|
                                                    M.get_function (|
                                                      "log::__private_api::log",
                                                      [ Ty.tuple [] ]
                                                    |),
                                                    [
                                                      M.call_closure (|
                                                        M.get_associated_function (|
                                                          Ty.path "core::fmt::Arguments",
                                                          "new_v1",
                                                          []
                                                        |),
                                                        [
                                                          (* Unsize *)
                                                          M.pointer_coercion
                                                            (M.alloc (|
                                                              Value.Array
                                                                [
                                                                  M.read (|
                                                                    Value.String
                                                                      "size of memory writing table: "
                                                                  |)
                                                                ]
                                                            |));
                                                          (* Unsize *)
                                                          M.pointer_coercion
                                                            (M.alloc (|
                                                              Value.Array
                                                                [
                                                                  M.call_closure (|
                                                                    M.get_associated_function (|
                                                                      Ty.path
                                                                        "core::fmt::rt::Argument",
                                                                      "new_display",
                                                                      [ Ty.path "usize" ]
                                                                    |),
                                                                    [
                                                                      M.alloc (|
                                                                        M.call_closure (|
                                                                          M.get_associated_function (|
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "alloc::vec::Vec")
                                                                              [
                                                                                Ty.path
                                                                                  "delphinus_zkwasm::circuits::utils::table_entry::MemoryWritingEntry";
                                                                                Ty.path
                                                                                  "alloc::alloc::Global"
                                                                              ],
                                                                            "len",
                                                                            []
                                                                          |),
                                                                          [
                                                                            M.SubPointer.get_struct_tuple_field (|
                                                                              M.read (| mtable |),
                                                                              "delphinus_zkwasm::circuits::utils::table_entry::MemoryWritingTable",
                                                                              0
                                                                            |)
                                                                          ]
                                                                        |)
                                                                      |)
                                                                    ]
                                                                  |)
                                                                ]
                                                            |))
                                                        ]
                                                      |);
                                                      M.read (| lvl |);
                                                      M.alloc (|
                                                        Value.Tuple
                                                          [
                                                            M.read (|
                                                              Value.String
                                                                "delphinus_zkwasm::circuits::mtable::assign"
                                                            |);
                                                            M.read (|
                                                              Value.String
                                                                "delphinus_zkwasm::circuits::mtable::assign"
                                                            |);
                                                            M.read (|
                                                              Value.String
                                                                "crates/zkwasm/src/circuits/mtable/assign.rs"
                                                            |)
                                                          ]
                                                      |);
                                                      Value.Integer 341;
                                                      Value.Tuple []
                                                    ]
                                                  |)
                                                |) in
                                              M.alloc (| Value.Tuple [] |)));
                                          fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                        ]
                                      |) in
                                    let _ :=
                                      M.match_operator (|
                                        M.alloc (| Value.Tuple [] |),
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let γ :=
                                                M.use
                                                  (M.alloc (|
                                                    UnOp.Pure.not
                                                      (BinOp.Pure.lt
                                                        (BinOp.Panic.mul (|
                                                          Integer.Usize,
                                                          M.call_closure (|
                                                            M.get_associated_function (|
                                                              Ty.apply
                                                                (Ty.path "alloc::vec::Vec")
                                                                [
                                                                  Ty.path
                                                                    "delphinus_zkwasm::circuits::utils::table_entry::MemoryWritingEntry";
                                                                  Ty.path "alloc::alloc::Global"
                                                                ],
                                                              "len",
                                                              []
                                                            |),
                                                            [
                                                              M.SubPointer.get_struct_tuple_field (|
                                                                M.read (| mtable |),
                                                                "delphinus_zkwasm::circuits::utils::table_entry::MemoryWritingTable",
                                                                0
                                                              |)
                                                            ]
                                                          |),
                                                          M.rust_cast
                                                            (M.read (|
                                                              M.get_constant (|
                                                                "delphinus_zkwasm::circuits::mtable::MEMORY_TABLE_ENTRY_ROWS"
                                                              |)
                                                            |))
                                                        |))
                                                        (M.read (|
                                                          M.SubPointer.get_struct_record_field (|
                                                            M.read (| self |),
                                                            "delphinus_zkwasm::circuits::mtable::MemoryTableChip",
                                                            "maximal_available_rows"
                                                          |)
                                                        |)))
                                                  |)) in
                                              let _ :=
                                                M.is_constant_or_break_match (|
                                                  M.read (| γ |),
                                                  Value.Bool true
                                                |) in
                                              M.alloc (|
                                                M.never_to_any (|
                                                  M.call_closure (|
                                                    M.get_function (|
                                                      "core::panicking::panic",
                                                      []
                                                    |),
                                                    [
                                                      M.read (|
                                                        Value.String
                                                          "assertion failed: mtable.0.len() * (MEMORY_TABLE_ENTRY_ROWS as usize) <
    self.maximal_available_rows"
                                                      |)
                                                    ]
                                                  |)
                                                |)
                                              |)));
                                          fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                        ]
                                      |) in
                                    let rest_mops :=
                                      M.alloc (|
                                        M.call_closure (|
                                          M.get_trait_method (|
                                            "core::iter::traits::iterator::Iterator",
                                            Ty.apply
                                              (Ty.path "core::slice::iter::Iter")
                                              [
                                                Ty.path
                                                  "delphinus_zkwasm::circuits::utils::table_entry::MemoryWritingEntry"
                                              ],
                                            [],
                                            "fold",
                                            [
                                              Ty.path "u64";
                                              Ty.function
                                                [
                                                  Ty.tuple
                                                    [
                                                      Ty.path "u64";
                                                      Ty.apply
                                                        (Ty.path "&")
                                                        [
                                                          Ty.path
                                                            "delphinus_zkwasm::circuits::utils::table_entry::MemoryWritingEntry"
                                                        ]
                                                    ]
                                                ]
                                                (Ty.path "u64")
                                            ]
                                          |),
                                          [
                                            M.call_closure (|
                                              M.get_associated_function (|
                                                Ty.apply
                                                  (Ty.path "slice")
                                                  [
                                                    Ty.path
                                                      "delphinus_zkwasm::circuits::utils::table_entry::MemoryWritingEntry"
                                                  ],
                                                "iter",
                                                []
                                              |),
                                              [
                                                M.call_closure (|
                                                  M.get_trait_method (|
                                                    "core::ops::deref::Deref",
                                                    Ty.apply
                                                      (Ty.path "alloc::vec::Vec")
                                                      [
                                                        Ty.path
                                                          "delphinus_zkwasm::circuits::utils::table_entry::MemoryWritingEntry";
                                                        Ty.path "alloc::alloc::Global"
                                                      ],
                                                    [],
                                                    "deref",
                                                    []
                                                  |),
                                                  [
                                                    M.SubPointer.get_struct_tuple_field (|
                                                      M.read (| mtable |),
                                                      "delphinus_zkwasm::circuits::utils::table_entry::MemoryWritingTable",
                                                      0
                                                    |)
                                                  ]
                                                |)
                                              ]
                                            |);
                                            Value.Integer 0;
                                            M.closure
                                              (fun γ =>
                                                ltac:(M.monadic
                                                  match γ with
                                                  | [ α0; α1 ] =>
                                                    M.match_operator (|
                                                      M.alloc (| α0 |),
                                                      [
                                                        fun γ =>
                                                          ltac:(M.monadic
                                                            (let acc := M.copy (| γ |) in
                                                            M.match_operator (|
                                                              M.alloc (| α1 |),
                                                              [
                                                                fun γ =>
                                                                  ltac:(M.monadic
                                                                    (let entry := M.copy (| γ |) in
                                                                    BinOp.Panic.add (|
                                                                      Integer.U64,
                                                                      M.read (| acc |),
                                                                      M.rust_cast
                                                                        (UnOp.Pure.not
                                                                          (M.call_closure (|
                                                                            M.get_associated_function (|
                                                                              Ty.path
                                                                                "specs::mtable::AccessType",
                                                                              "is_init",
                                                                              []
                                                                            |),
                                                                            [
                                                                              M.SubPointer.get_struct_record_field (|
                                                                                M.SubPointer.get_struct_record_field (|
                                                                                  M.read (|
                                                                                    entry
                                                                                  |),
                                                                                  "delphinus_zkwasm::circuits::utils::table_entry::MemoryWritingEntry",
                                                                                  "entry"
                                                                                |),
                                                                                "specs::mtable::MemoryTableEntry",
                                                                                "atype"
                                                                              |)
                                                                            ]
                                                                          |)))
                                                                    |)))
                                                              ]
                                                            |)))
                                                      ]
                                                    |)
                                                  | _ => M.impossible (||)
                                                  end))
                                          ]
                                        |)
                                      |) in
                                    let _ :=
                                      M.match_operator (|
                                        M.alloc (|
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "core::ops::try_trait::Try",
                                              Ty.apply
                                                (Ty.path "core::result::Result")
                                                [
                                                  Ty.tuple [];
                                                  Ty.path "halo2_proofs::plonk::error::Error"
                                                ],
                                              [],
                                              "branch",
                                              []
                                            |),
                                            [
                                              M.call_closure (|
                                                M.get_associated_function (|
                                                  Ty.apply
                                                    (Ty.path
                                                      "delphinus_zkwasm::circuits::mtable::MemoryTableChip")
                                                    [ F ],
                                                  "assign_fixed",
                                                  []
                                                |),
                                                [ M.read (| self |); ctx ]
                                              |)
                                            ]
                                          |)
                                        |),
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let γ0_0 :=
                                                M.SubPointer.get_struct_tuple_field (|
                                                  γ,
                                                  "core::ops::control_flow::ControlFlow::Break",
                                                  0
                                                |) in
                                              let residual := M.copy (| γ0_0 |) in
                                              M.alloc (|
                                                M.never_to_any (|
                                                  M.read (|
                                                    M.return_ (|
                                                      M.call_closure (|
                                                        M.get_trait_method (|
                                                          "core::ops::try_trait::FromResidual",
                                                          Ty.apply
                                                            (Ty.path "core::result::Result")
                                                            [
                                                              Ty.tuple
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "halo2_proofs::circuit::AssignedCell")
                                                                    [ F; F ];
                                                                  Ty.apply
                                                                    (Ty.path "core::option::Option")
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "halo2_proofs::circuit::AssignedCell")
                                                                        [ F; F ]
                                                                    ]
                                                                ];
                                                              Ty.path
                                                                "halo2_proofs::plonk::error::Error"
                                                            ],
                                                          [
                                                            Ty.apply
                                                              (Ty.path "core::result::Result")
                                                              [
                                                                Ty.path "core::convert::Infallible";
                                                                Ty.path
                                                                  "halo2_proofs::plonk::error::Error"
                                                              ]
                                                          ],
                                                          "from_residual",
                                                          []
                                                        |),
                                                        [ M.read (| residual |) ]
                                                      |)
                                                    |)
                                                  |)
                                                |)
                                              |)));
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let γ0_0 :=
                                                M.SubPointer.get_struct_tuple_field (|
                                                  γ,
                                                  "core::ops::control_flow::ControlFlow::Continue",
                                                  0
                                                |) in
                                              let val := M.copy (| γ0_0 |) in
                                              val))
                                        ]
                                      |) in
                                    let _ :=
                                      M.alloc (|
                                        M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.apply
                                              (Ty.path "delphinus_zkwasm::circuits::utils::Context")
                                              [ F ],
                                            "reset",
                                            []
                                          |),
                                          [ ctx ]
                                        |)
                                      |) in
                                    M.match_operator (|
                                      M.alloc (|
                                        M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.path
                                              "delphinus_zkwasm::circuits::utils::table_entry::MemoryWritingTable",
                                            "count_rest_memory_finalize_ops",
                                            []
                                          |),
                                          [ M.read (| mtable |) ]
                                        |)
                                      |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                                            let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                                            let rest_memory_finalize_ops := M.copy (| γ0_0 |) in
                                            let rest_mops_cell :=
                                              M.copy (|
                                                M.match_operator (|
                                                  M.alloc (|
                                                    M.call_closure (|
                                                      M.get_trait_method (|
                                                        "core::ops::try_trait::Try",
                                                        Ty.apply
                                                          (Ty.path "core::result::Result")
                                                          [
                                                            Ty.apply
                                                              (Ty.path
                                                                "halo2_proofs::circuit::AssignedCell")
                                                              [ F; F ];
                                                            Ty.path
                                                              "halo2_proofs::plonk::error::Error"
                                                          ],
                                                        [],
                                                        "branch",
                                                        []
                                                      |),
                                                      [
                                                        M.call_closure (|
                                                          M.get_associated_function (|
                                                            Ty.apply
                                                              (Ty.path
                                                                "delphinus_zkwasm::circuits::mtable::MemoryTableChip")
                                                              [ F ],
                                                            "constrain_rest_mops_permutation",
                                                            []
                                                          |),
                                                          [
                                                            M.read (| self |);
                                                            ctx;
                                                            M.read (| rest_mops |)
                                                          ]
                                                        |)
                                                      ]
                                                    |)
                                                  |),
                                                  [
                                                    fun γ =>
                                                      ltac:(M.monadic
                                                        (let γ0_0 :=
                                                          M.SubPointer.get_struct_tuple_field (|
                                                            γ,
                                                            "core::ops::control_flow::ControlFlow::Break",
                                                            0
                                                          |) in
                                                        let residual := M.copy (| γ0_0 |) in
                                                        M.alloc (|
                                                          M.never_to_any (|
                                                            M.read (|
                                                              M.return_ (|
                                                                M.call_closure (|
                                                                  M.get_trait_method (|
                                                                    "core::ops::try_trait::FromResidual",
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "core::result::Result")
                                                                      [
                                                                        Ty.tuple
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "halo2_proofs::circuit::AssignedCell")
                                                                              [ F; F ];
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "core::option::Option")
                                                                              [
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "halo2_proofs::circuit::AssignedCell")
                                                                                  [ F; F ]
                                                                              ]
                                                                          ];
                                                                        Ty.path
                                                                          "halo2_proofs::plonk::error::Error"
                                                                      ],
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "core::result::Result")
                                                                        [
                                                                          Ty.path
                                                                            "core::convert::Infallible";
                                                                          Ty.path
                                                                            "halo2_proofs::plonk::error::Error"
                                                                        ]
                                                                    ],
                                                                    "from_residual",
                                                                    []
                                                                  |),
                                                                  [ M.read (| residual |) ]
                                                                |)
                                                              |)
                                                            |)
                                                          |)
                                                        |)));
                                                    fun γ =>
                                                      ltac:(M.monadic
                                                        (let γ0_0 :=
                                                          M.SubPointer.get_struct_tuple_field (|
                                                            γ,
                                                            "core::ops::control_flow::ControlFlow::Continue",
                                                            0
                                                          |) in
                                                        let val := M.copy (| γ0_0 |) in
                                                        val))
                                                  ]
                                                |)
                                              |) in
                                            let _ :=
                                              M.match_operator (|
                                                M.alloc (|
                                                  M.call_closure (|
                                                    M.get_trait_method (|
                                                      "core::ops::try_trait::Try",
                                                      Ty.apply
                                                        (Ty.path "core::result::Result")
                                                        [
                                                          Ty.tuple [];
                                                          Ty.path
                                                            "halo2_proofs::plonk::error::Error"
                                                        ],
                                                      [],
                                                      "branch",
                                                      []
                                                    |),
                                                    [
                                                      M.call_closure (|
                                                        M.get_associated_function (|
                                                          Ty.apply
                                                            (Ty.path
                                                              "delphinus_zkwasm::circuits::mtable::MemoryTableChip")
                                                            [ F ],
                                                          "assign_entries",
                                                          []
                                                        |),
                                                        [
                                                          M.read (| self |);
                                                          M.read (| region |);
                                                          M.read (| mtable |);
                                                          M.read (| rest_mops |);
                                                          M.read (| rest_memory_finalize_ops |)
                                                        ]
                                                      |)
                                                    ]
                                                  |)
                                                |),
                                                [
                                                  fun γ =>
                                                    ltac:(M.monadic
                                                      (let γ0_0 :=
                                                        M.SubPointer.get_struct_tuple_field (|
                                                          γ,
                                                          "core::ops::control_flow::ControlFlow::Break",
                                                          0
                                                        |) in
                                                      let residual := M.copy (| γ0_0 |) in
                                                      M.alloc (|
                                                        M.never_to_any (|
                                                          M.read (|
                                                            M.return_ (|
                                                              M.call_closure (|
                                                                M.get_trait_method (|
                                                                  "core::ops::try_trait::FromResidual",
                                                                  Ty.apply
                                                                    (Ty.path "core::result::Result")
                                                                    [
                                                                      Ty.tuple
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "halo2_proofs::circuit::AssignedCell")
                                                                            [ F; F ];
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "core::option::Option")
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "halo2_proofs::circuit::AssignedCell")
                                                                                [ F; F ]
                                                                            ]
                                                                        ];
                                                                      Ty.path
                                                                        "halo2_proofs::plonk::error::Error"
                                                                    ],
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "core::result::Result")
                                                                      [
                                                                        Ty.path
                                                                          "core::convert::Infallible";
                                                                        Ty.path
                                                                          "halo2_proofs::plonk::error::Error"
                                                                      ]
                                                                  ],
                                                                  "from_residual",
                                                                  []
                                                                |),
                                                                [ M.read (| residual |) ]
                                                              |)
                                                            |)
                                                          |)
                                                        |)
                                                      |)));
                                                  fun γ =>
                                                    ltac:(M.monadic
                                                      (let γ0_0 :=
                                                        M.SubPointer.get_struct_tuple_field (|
                                                          γ,
                                                          "core::ops::control_flow::ControlFlow::Continue",
                                                          0
                                                        |) in
                                                      let val := M.copy (| γ0_0 |) in
                                                      val))
                                                ]
                                              |) in
                                            M.alloc (|
                                              Value.StructTuple
                                                "core::result::Result::Ok"
                                                [
                                                  Value.Tuple
                                                    [
                                                      M.read (| rest_mops_cell |);
                                                      Value.StructTuple
                                                        "core::option::Option::None"
                                                        []
                                                    ]
                                                ]
                                            |)))
                                      ]
                                    |)
                                  |)))
                            ]
                          |)
                        | _ => M.impossible (||)
                        end))
                ]
              |)))
          | _, _ => M.impossible
          end.
        
        Axiom AssociatedFunction_assign :
          forall (F : Ty.t),
          M.IsAssociatedFunction (Self F) "assign" (assign F).
      End Impl_delphinus_zkwasm_circuits_mtable_MemoryTableChip_F.
    End assign.
  End mtable.
End circuits.
