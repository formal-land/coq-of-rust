(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module circuits.
  Module mtable.
    Definition value_MEMORY_TABLE_ENTRY_ROWS : Value.t :=
      M.run ltac:(M.monadic (M.alloc (| Value.Integer 4 |))).
    
    Axiom AllocatedU32StateCell :
      forall (F : Ty.t),
      (Ty.apply (Ty.path "delphinus_zkwasm::circuits::mtable::AllocatedU32StateCell") [ F ]) =
        (Ty.apply (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedCommonRangeCell") [ F ]).
    
    (* StructRecord
      {
        name := "MemoryTableConfig";
        ty_params := [ "F" ];
        fields :=
          [
            ("entry_sel",
              Ty.apply
                (Ty.path "halo2_proofs::plonk::circuit::Column")
                [ Ty.path "halo2_proofs::plonk::circuit::Fixed" ]);
            ("enabled_cell",
              Ty.apply (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedBitCell") [ F ]);
            ("is_stack_cell",
              Ty.apply (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedBitCell") [ F ]);
            ("is_heap_cell",
              Ty.apply (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedBitCell") [ F ]);
            ("is_global_cell",
              Ty.apply (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedBitCell") [ F ]);
            ("is_next_same_ltype_cell",
              Ty.apply (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedBitCell") [ F ]);
            ("is_next_same_offset_cell",
              Ty.apply (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedBitCell") [ F ]);
            ("is_mutable",
              Ty.apply (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedBitCell") [ F ]);
            ("is_i32_cell",
              Ty.apply (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedBitCell") [ F ]);
            ("is_i64_cell",
              Ty.apply (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedBitCell") [ F ]);
            ("is_init_cell",
              Ty.apply (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedBitCell") [ F ]);
            ("start_eid_cell",
              Ty.apply
                (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedCommonRangeCell")
                [ F ]);
            ("end_eid_cell",
              Ty.apply
                (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedCommonRangeCell")
                [ F ]);
            ("eid_diff_cell",
              Ty.apply
                (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedCommonRangeCell")
                [ F ]);
            ("rest_mops_cell",
              Ty.apply
                (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedCommonRangeCell")
                [ F ]);
            ("offset_cell",
              Ty.apply (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedU32Cell") [ F ]);
            ("offset_diff_cell",
              Ty.apply (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedU32Cell") [ F ]);
            ("offset_diff_inv_cell",
              Ty.apply (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedUnlimitedCell") [ F ]);
            ("offset_diff_inv_helper_cell",
              Ty.apply (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedUnlimitedCell") [ F ]);
            ("encode_cell",
              Ty.apply (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedUnlimitedCell") [ F ]);
            ("init_encode_cell",
              Ty.apply (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedUnlimitedCell") [ F ]);
            ("value", Ty.apply (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedU64Cell") [ F ])
          ];
      } *)
    
    Module Impl_core_clone_Clone_where_core_clone_Clone_F_where_pairing_bn256_arithmetic_fields_FieldExt_F_for_delphinus_zkwasm_circuits_mtable_MemoryTableConfig_F.
      Definition Self (F : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "delphinus_zkwasm::circuits::mtable::MemoryTableConfig") [ F ].
      
      (* Clone *)
      Definition clone (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match τ, α with
        | [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            Value.StructRecord
              "delphinus_zkwasm::circuits::mtable::MemoryTableConfig"
              [
                ("entry_sel",
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.apply
                        (Ty.path "halo2_proofs::plonk::circuit::Column")
                        [ Ty.path "halo2_proofs::plonk::circuit::Fixed" ],
                      [],
                      "clone",
                      []
                    |),
                    [
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "delphinus_zkwasm::circuits::mtable::MemoryTableConfig",
                        "entry_sel"
                      |)
                    ]
                  |));
                ("enabled_cell",
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.apply (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedBitCell") [ F ],
                      [],
                      "clone",
                      []
                    |),
                    [
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "delphinus_zkwasm::circuits::mtable::MemoryTableConfig",
                        "enabled_cell"
                      |)
                    ]
                  |));
                ("is_stack_cell",
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.apply (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedBitCell") [ F ],
                      [],
                      "clone",
                      []
                    |),
                    [
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "delphinus_zkwasm::circuits::mtable::MemoryTableConfig",
                        "is_stack_cell"
                      |)
                    ]
                  |));
                ("is_heap_cell",
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.apply (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedBitCell") [ F ],
                      [],
                      "clone",
                      []
                    |),
                    [
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "delphinus_zkwasm::circuits::mtable::MemoryTableConfig",
                        "is_heap_cell"
                      |)
                    ]
                  |));
                ("is_global_cell",
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.apply (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedBitCell") [ F ],
                      [],
                      "clone",
                      []
                    |),
                    [
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "delphinus_zkwasm::circuits::mtable::MemoryTableConfig",
                        "is_global_cell"
                      |)
                    ]
                  |));
                ("is_next_same_ltype_cell",
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.apply (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedBitCell") [ F ],
                      [],
                      "clone",
                      []
                    |),
                    [
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "delphinus_zkwasm::circuits::mtable::MemoryTableConfig",
                        "is_next_same_ltype_cell"
                      |)
                    ]
                  |));
                ("is_next_same_offset_cell",
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.apply (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedBitCell") [ F ],
                      [],
                      "clone",
                      []
                    |),
                    [
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "delphinus_zkwasm::circuits::mtable::MemoryTableConfig",
                        "is_next_same_offset_cell"
                      |)
                    ]
                  |));
                ("is_mutable",
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.apply (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedBitCell") [ F ],
                      [],
                      "clone",
                      []
                    |),
                    [
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "delphinus_zkwasm::circuits::mtable::MemoryTableConfig",
                        "is_mutable"
                      |)
                    ]
                  |));
                ("is_i32_cell",
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.apply (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedBitCell") [ F ],
                      [],
                      "clone",
                      []
                    |),
                    [
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "delphinus_zkwasm::circuits::mtable::MemoryTableConfig",
                        "is_i32_cell"
                      |)
                    ]
                  |));
                ("is_i64_cell",
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.apply (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedBitCell") [ F ],
                      [],
                      "clone",
                      []
                    |),
                    [
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "delphinus_zkwasm::circuits::mtable::MemoryTableConfig",
                        "is_i64_cell"
                      |)
                    ]
                  |));
                ("is_init_cell",
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.apply (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedBitCell") [ F ],
                      [],
                      "clone",
                      []
                    |),
                    [
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "delphinus_zkwasm::circuits::mtable::MemoryTableConfig",
                        "is_init_cell"
                      |)
                    ]
                  |));
                ("start_eid_cell",
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.apply
                        (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedCommonRangeCell")
                        [ F ],
                      [],
                      "clone",
                      []
                    |),
                    [
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "delphinus_zkwasm::circuits::mtable::MemoryTableConfig",
                        "start_eid_cell"
                      |)
                    ]
                  |));
                ("end_eid_cell",
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.apply
                        (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedCommonRangeCell")
                        [ F ],
                      [],
                      "clone",
                      []
                    |),
                    [
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "delphinus_zkwasm::circuits::mtable::MemoryTableConfig",
                        "end_eid_cell"
                      |)
                    ]
                  |));
                ("eid_diff_cell",
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.apply
                        (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedCommonRangeCell")
                        [ F ],
                      [],
                      "clone",
                      []
                    |),
                    [
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "delphinus_zkwasm::circuits::mtable::MemoryTableConfig",
                        "eid_diff_cell"
                      |)
                    ]
                  |));
                ("rest_mops_cell",
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.apply
                        (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedCommonRangeCell")
                        [ F ],
                      [],
                      "clone",
                      []
                    |),
                    [
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "delphinus_zkwasm::circuits::mtable::MemoryTableConfig",
                        "rest_mops_cell"
                      |)
                    ]
                  |));
                ("offset_cell",
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.apply (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedU32Cell") [ F ],
                      [],
                      "clone",
                      []
                    |),
                    [
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "delphinus_zkwasm::circuits::mtable::MemoryTableConfig",
                        "offset_cell"
                      |)
                    ]
                  |));
                ("offset_diff_cell",
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.apply (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedU32Cell") [ F ],
                      [],
                      "clone",
                      []
                    |),
                    [
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "delphinus_zkwasm::circuits::mtable::MemoryTableConfig",
                        "offset_diff_cell"
                      |)
                    ]
                  |));
                ("offset_diff_inv_cell",
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.apply
                        (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedUnlimitedCell")
                        [ F ],
                      [],
                      "clone",
                      []
                    |),
                    [
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "delphinus_zkwasm::circuits::mtable::MemoryTableConfig",
                        "offset_diff_inv_cell"
                      |)
                    ]
                  |));
                ("offset_diff_inv_helper_cell",
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.apply
                        (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedUnlimitedCell")
                        [ F ],
                      [],
                      "clone",
                      []
                    |),
                    [
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "delphinus_zkwasm::circuits::mtable::MemoryTableConfig",
                        "offset_diff_inv_helper_cell"
                      |)
                    ]
                  |));
                ("encode_cell",
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.apply
                        (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedUnlimitedCell")
                        [ F ],
                      [],
                      "clone",
                      []
                    |),
                    [
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "delphinus_zkwasm::circuits::mtable::MemoryTableConfig",
                        "encode_cell"
                      |)
                    ]
                  |));
                ("init_encode_cell",
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.apply
                        (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedUnlimitedCell")
                        [ F ],
                      [],
                      "clone",
                      []
                    |),
                    [
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "delphinus_zkwasm::circuits::mtable::MemoryTableConfig",
                        "init_encode_cell"
                      |)
                    ]
                  |));
                ("value",
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.apply (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedU64Cell") [ F ],
                      [],
                      "clone",
                      []
                    |),
                    [
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "delphinus_zkwasm::circuits::mtable::MemoryTableConfig",
                        "value"
                      |)
                    ]
                  |))
              ]))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        forall (F : Ty.t),
        M.IsTraitInstance
          "core::clone::Clone"
          (Self F)
          (* Trait polymorphic types *) []
          (* Instance *) [ ("clone", InstanceField.Method (clone F)) ].
    End Impl_core_clone_Clone_where_core_clone_Clone_F_where_pairing_bn256_arithmetic_fields_FieldExt_F_for_delphinus_zkwasm_circuits_mtable_MemoryTableConfig_F.
    
    Module Impl_delphinus_zkwasm_circuits_mtable_MemoryTableConfig_F.
      Definition Self (F : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "delphinus_zkwasm::circuits::mtable::MemoryTableConfig") [ F ].
      
      (*
          pub(crate) fn configure(
              meta: &mut ConstraintSystem<F>,
              k: u32,
              cols: &mut (impl Iterator<Item = Column<Advice>> + Clone),
              rtable: &RangeTableConfig<F>,
              image_table: &ImageTableConfig<F>,
          ) -> Self {
              let entry_sel = meta.fixed_column();
      
              let mut allocator = MemoryTableCellAllocator::new(meta, k, entry_sel, rtable, cols);
              allocator.enable_equality(meta, &MemoryTableCellType::CommonRange);
      
              let enabled_cell = allocator.alloc_bit_cell();
              let is_stack_cell = allocator.alloc_bit_cell();
              let is_heap_cell = allocator.alloc_bit_cell();
              let is_global_cell = allocator.alloc_bit_cell();
              let is_next_same_ltype_cell = allocator.alloc_bit_cell();
              let is_next_same_offset_cell = allocator.alloc_bit_cell();
              let is_mutable = allocator.alloc_bit_cell();
      
              let is_i32_cell = allocator.alloc_bit_cell();
              let is_i64_cell = allocator.alloc_bit_cell();
              let is_init_cell = allocator.alloc_bit_cell();
      
              let start_eid_cell = allocator.alloc_u32_state_cell();
              let end_eid_cell = allocator.alloc_u32_state_cell();
              let eid_diff_cell = allocator.alloc_u32_state_cell();
              let rest_mops_cell = allocator.alloc_common_range_cell();
      
              let offset_cell = allocator.alloc_u32_cell();
      
              let offset_diff_cell = allocator.alloc_u32_cell();
              let offset_diff_inv_cell = allocator.alloc_unlimited_cell();
              let offset_diff_inv_helper_cell = allocator.alloc_unlimited_cell();
              let encode_cell = allocator.alloc_unlimited_cell();
              let init_encode_cell = allocator.alloc_unlimited_cell();
      
              #[cfg(feature = "continuation")]
              let post_init_encode_cell = allocator.alloc_unlimited_cell();
              #[cfg(feature = "continuation")]
              let address_encode_cell = allocator.alloc_unlimited_cell();
      
              #[cfg(feature = "continuation")]
              let rest_memory_finalize_ops_cell = {
                  let cell = allocator.alloc_unlimited_cell();
                  // FIXME: try to avoid this?
                  meta.enable_equality(cell.cell.col);
                  cell
              };
      
              let value = allocator.alloc_u64_cell();
      
              allocator.assert_no_free_cells();
      
              macro_rules! location {
                  ($meta:expr) => {
                      is_stack_cell.curr_expr($meta) * constant_from!(LocationType::Stack as u64)
                          + is_global_cell.curr_expr($meta) * constant_from!(LocationType::Global as u64)
                          + is_heap_cell.curr_expr($meta) * constant_from!(LocationType::Heap)
                  };
              }
              meta.create_gate("mc1. enable seq", |meta| {
                  vec![
                      (enabled_cell.curr_expr(meta) - constant_from!(1))
                          * (enabled_cell.next_expr(meta))
                          * fixed_curr!(meta, entry_sel),
                  ]
              });
      
              meta.create_gate("mc2. ltype unique", |meta| {
                  vec![
                      is_global_cell.curr_expr(meta)
                          + is_heap_cell.curr_expr(meta)
                          + is_stack_cell.curr_expr(meta)
                          - enabled_cell.curr_expr(meta),
                  ]
                  .into_iter()
                  .map(|x| x * fixed_curr!(meta, entry_sel))
                  .collect::<Vec<_>>()
              });
      
              meta.create_gate("mc3. ltype group", |meta| {
                  vec![
                      (is_stack_cell.curr_expr(meta) - constant_from!(1)) * is_stack_cell.next_expr(meta),
                      (is_heap_cell.curr_expr(meta) - constant_from!(1))
                          * is_heap_cell.next_expr(meta)
                          * (is_stack_cell.curr_expr(meta) - constant_from!(1)),
                  ]
                  .into_iter()
                  .map(|x| x * fixed_curr!(meta, entry_sel))
                  .collect::<Vec<_>>()
              });
      
              meta.create_gate("mc4a. is_next_same_ltype", |meta| {
                  vec![
                      is_next_same_ltype_cell.curr_expr(meta)
                          - is_stack_cell.curr_expr(meta) * is_stack_cell.next_expr(meta)
                          - is_global_cell.curr_expr(meta) * is_global_cell.next_expr(meta)
                          - is_heap_cell.curr_expr(meta) * is_heap_cell.next_expr(meta),
                  ]
                  .into_iter()
                  .map(|x| x * fixed_curr!(meta, entry_sel))
                  .collect::<Vec<_>>()
              });
      
              meta.create_gate("mc4b. is_next_same_offset", |meta| {
                  vec![
                      is_next_same_offset_cell.curr_expr(meta)
                          * (is_next_same_ltype_cell.curr_expr(meta) - constant_from!(1)),
                      is_next_same_offset_cell.curr_expr(meta) * offset_diff_cell.curr_expr(meta),
                      offset_diff_cell.curr_expr(meta) * offset_diff_inv_cell.curr_expr(meta)
                          - offset_diff_inv_helper_cell.curr_expr(meta),
                      (is_next_same_offset_cell.curr_expr(meta) - constant_from!(1))
                          * is_next_same_ltype_cell.curr_expr(meta)
                          * (offset_diff_inv_helper_cell.curr_expr(meta) - constant_from!(1)),
                  ]
                  .into_iter()
                  .map(|x| x * fixed_curr!(meta, entry_sel))
                  .collect::<Vec<_>>()
              });
      
              meta.create_gate("mc5. offset sort", |meta| {
                  vec![
                      (offset_cell.curr_expr(meta) + offset_diff_cell.curr_expr(meta)
                          - offset_cell.next_expr(meta))
                          * is_next_same_ltype_cell.curr_expr(meta),
                  ]
                  .into_iter()
                  .map(|x| x * fixed_curr!(meta, entry_sel))
                  .collect::<Vec<_>>()
              });
      
              meta.create_gate("mc6. eid sort", |meta| {
                  vec![
                      (start_eid_cell.curr_expr(meta)
                          + eid_diff_cell.curr_expr(meta)
                          + constant_from!(1)
                          - end_eid_cell.curr_expr(meta)),
                      (end_eid_cell.curr_expr(meta) - start_eid_cell.next_expr(meta))
                          * is_next_same_offset_cell.curr_expr(meta),
                  ]
                  .into_iter()
                  .map(|x| x * enabled_cell.curr_expr(meta) * fixed_curr!(meta, entry_sel))
                  .collect::<Vec<_>>()
              });
      
              meta.create_gate(
                  "mc7a. global must has init (because of mutability check).",
                  |meta| {
                      vec![
                          (is_next_same_offset_cell.expr(meta) - constant_from!(1))
                              * is_global_cell.next_expr(meta)
                              * (is_init_cell.next_expr(meta) - constant_from!(1)),
                      ]
                      .into_iter()
                      .map(|x| x * fixed_curr!(meta, entry_sel))
                      .collect::<Vec<_>>()
                  },
              );
      
              meta.create_gate("mc7b. init encode.", |meta| {
                  vec![
                      (encode_init_memory_table_entry(
                          location!(meta),
                          offset_cell.curr_expr(meta),
                          is_mutable.curr_expr(meta),
                          start_eid_cell.curr_expr(meta),
                          value.u64_cell.curr_expr(meta),
                      ) - init_encode_cell.curr_expr(meta))
                          * is_init_cell.curr_expr(meta),
                  ]
                  .into_iter()
                  .map(|x| x * fixed_curr!(meta, entry_sel))
                  .collect::<Vec<_>>()
              });
      
              image_table.init_memory_lookup(meta, "mc7c. imtable init", |meta| {
                  cfg_if::cfg_if! {
                      if #[cfg(feature = "continuation")] {
                          (
                              address_encode_cell.curr_expr(meta) * fixed_curr!(meta, entry_sel),
                              init_encode_cell.curr_expr(meta) * fixed_curr!(meta, entry_sel),
                          )
                      } else {
                          init_encode_cell.curr_expr(meta) * fixed_curr!(meta, entry_sel)
                      }
                  }
              });
      
              meta.create_gate("mc8. vtype", |meta| {
                  vec![
                      is_i32_cell.curr_expr(meta) + is_i64_cell.curr_expr(meta)
                          - enabled_cell.curr_expr(meta),
                      is_heap_cell.curr_expr(meta) * is_i32_cell.curr_expr(meta),
                      is_i32_cell.curr_expr(meta)
                          * (value.u16_cells_le[2].curr_expr(meta)
                              + value.u16_cells_le[3].curr_expr(meta)),
                      is_global_cell.curr_expr(meta)
                          * is_next_same_offset_cell.curr_expr(meta)
                          * (is_i32_cell.curr_expr(meta) - is_i32_cell.next_expr(meta)),
                  ]
                  .into_iter()
                  .map(|x| x * fixed_curr!(meta, entry_sel))
                  .collect::<Vec<_>>()
              });
      
              /* mc9. value is in allocator */
      
              meta.create_gate("mc10b. rest_mops", |meta| {
                  vec![
                      is_init_cell.curr_expr(meta)
                          * (rest_mops_cell.next_expr(meta) - rest_mops_cell.curr_expr(meta)),
                      (is_init_cell.curr_expr(meta) - constant_from!(1))
                          * (rest_mops_cell.next_expr(meta) + enabled_cell.curr_expr(meta)
                              - rest_mops_cell.curr_expr(meta)),
                  ]
                  .into_iter()
                  .map(|x| x * fixed_curr!(meta, entry_sel))
                  .collect::<Vec<_>>()
              });
      
              meta.create_gate("mc10c. rest_mops decrease to zero", |meta| {
                  vec![
                      (enabled_cell.curr_expr(meta) - constant_from!(1)) * rest_mops_cell.curr_expr(meta),
                  ]
                  .into_iter()
                  .map(|x| x * fixed_curr!(meta, entry_sel))
                  .collect::<Vec<_>>()
              });
      
              meta.create_gate("mc11. mutable", |meta| {
                  vec![
                      (is_init_cell.curr_expr(meta) - constant_from!(1))
                          * (is_mutable.curr_expr(meta) - constant_from!(1)),
                      (is_mutable.curr_expr(meta) - is_mutable.next_expr(meta))
                          * is_next_same_offset_cell.curr_expr(meta),
                  ]
                  .into_iter()
                  .map(|x| x * enabled_cell.curr_expr(meta) * fixed_curr!(meta, entry_sel))
                  .collect::<Vec<_>>()
              });
      
              meta.create_gate("mc12. lookup encode", |meta| {
                  vec![
                      (constant_from!(1) - enabled_cell.curr_expr(meta)) * encode_cell.curr_expr(meta),
                      encode_memory_table_entry(
                          offset_cell.curr_expr(meta),
                          location!(meta),
                          is_i32_cell.curr_expr(meta),
                      ) - encode_cell.curr_expr(meta),
                  ]
                  .into_iter()
                  .map(|x| x * fixed_curr!(meta, entry_sel))
                  .collect::<Vec<_>>()
              });
      
              #[cfg(feature = "continuation")]
              {
                  use specs::encode::init_memory_table::encode_init_memory_table_address;
                  use specs::encode::init_memory_table::MEMORY_ADDRESS_OFFSET;
      
                  meta.create_gate("mc13. post init memory entry", |meta| {
                      let is_writing = constant_from!(1) - is_init_cell.curr_expr(meta);
                      let next_entry_at_different_position =
                          constant_from!(1) - is_next_same_offset_cell.curr_expr(meta);
      
                      let is_memory_finalized_position_bit =
                          is_writing * next_entry_at_different_position;
      
                      vec![
                          // rest_memory_finalize_ops_cell decreases.
                          // `* enabled_cell`: If disabled, rest_memory_finalize_ops_cell should keep the same,
                          // The termination rest_memory_finalize_ops_cell is constant 0 at the last selected(sel=1) step.
                          rest_memory_finalize_ops_cell.curr_expr(meta)
                              - rest_memory_finalize_ops_cell.next_expr(meta)
                              - is_memory_finalized_position_bit.clone() * enabled_cell.curr_expr(meta),
                          // encode address_encode_cell.
                          (encode_init_memory_table_address(
                              location!(meta),
                              offset_cell.curr_expr(meta),
                          ) - address_encode_cell.curr_expr(meta)),
                          // post_init_encode_cell assigned iff at memory finalized position.
                          post_init_encode_cell.curr_expr(meta)
                              * (constant_from!(1) - is_memory_finalized_position_bit.clone()),
                          // encode post_init_encode_cell.
                          (post_init_encode_cell.curr_expr(meta)
                              - address_encode_cell.curr_expr(meta)
                                  * constant_from!(MEMORY_ADDRESS_OFFSET)
                              - encode_init_memory_table_entry(
                                  location!(meta),
                                  offset_cell.curr_expr(meta),
                                  is_mutable.curr_expr(meta),
                                  start_eid_cell.curr_expr(meta),
                                  value.u64_cell.curr_expr(meta),
                              ))
                              * is_memory_finalized_position_bit,
                      ]
                      .into_iter()
                      .map(|x| x * fixed_curr!(meta, entry_sel))
                      .collect::<Vec<_>>()
                  });
              }
      
              Self {
                  entry_sel,
                  enabled_cell,
                  is_stack_cell,
                  is_heap_cell,
                  is_global_cell,
                  is_next_same_ltype_cell,
                  is_next_same_offset_cell,
                  is_mutable,
                  is_i32_cell,
                  is_i64_cell,
                  is_init_cell,
                  start_eid_cell,
                  end_eid_cell,
                  eid_diff_cell,
                  rest_mops_cell,
                  offset_cell,
                  offset_diff_cell,
                  offset_diff_inv_cell,
                  offset_diff_inv_helper_cell,
                  value,
                  init_encode_cell,
                  encode_cell,
      
                  #[cfg(feature = "continuation")]
                  post_init_encode_cell,
                  #[cfg(feature = "continuation")]
                  address_encode_cell,
                  #[cfg(feature = "continuation")]
                  rest_memory_finalize_ops_cell,
              }
          }
      *)
      Definition configure (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match τ, α with
        | [ impl_Iterator_Item___Column_Advice____plus__Clone ],
            [ meta; k; cols; rtable; image_table ] =>
          ltac:(M.monadic
            (let meta := M.alloc (| meta |) in
            let k := M.alloc (| k |) in
            let cols := M.alloc (| cols |) in
            let rtable := M.alloc (| rtable |) in
            let image_table := M.alloc (| image_table |) in
            M.read (|
              let entry_sel :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply (Ty.path "halo2_proofs::plonk::circuit::ConstraintSystem") [ F ],
                      "fixed_column",
                      []
                    |),
                    [ M.read (| meta |) ]
                  |)
                |) in
              let allocator :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path
                          "delphinus_zkwasm::circuits::mtable::allocator::MemoryTableCellAllocator")
                        [ F ],
                      "new",
                      [ impl_Iterator_Item___Column_Advice____plus__Clone ]
                    |),
                    [
                      M.read (| meta |);
                      M.read (| k |);
                      M.read (| entry_sel |);
                      M.read (| rtable |);
                      M.read (| cols |)
                    ]
                  |)
                |) in
              let _ :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path
                          "delphinus_zkwasm::circuits::mtable::allocator::MemoryTableCellAllocator")
                        [ F ],
                      "enable_equality",
                      []
                    |),
                    [
                      allocator;
                      M.read (| meta |);
                      M.alloc (|
                        Value.StructTuple
                          "delphinus_zkwasm::circuits::mtable::allocator::MemoryTableCellType::CommonRange"
                          []
                      |)
                    ]
                  |)
                |) in
              let enabled_cell :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path
                          "delphinus_zkwasm::circuits::mtable::allocator::MemoryTableCellAllocator")
                        [ F ],
                      "alloc_bit_cell",
                      []
                    |),
                    [ allocator ]
                  |)
                |) in
              let is_stack_cell :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path
                          "delphinus_zkwasm::circuits::mtable::allocator::MemoryTableCellAllocator")
                        [ F ],
                      "alloc_bit_cell",
                      []
                    |),
                    [ allocator ]
                  |)
                |) in
              let is_heap_cell :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path
                          "delphinus_zkwasm::circuits::mtable::allocator::MemoryTableCellAllocator")
                        [ F ],
                      "alloc_bit_cell",
                      []
                    |),
                    [ allocator ]
                  |)
                |) in
              let is_global_cell :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path
                          "delphinus_zkwasm::circuits::mtable::allocator::MemoryTableCellAllocator")
                        [ F ],
                      "alloc_bit_cell",
                      []
                    |),
                    [ allocator ]
                  |)
                |) in
              let is_next_same_ltype_cell :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path
                          "delphinus_zkwasm::circuits::mtable::allocator::MemoryTableCellAllocator")
                        [ F ],
                      "alloc_bit_cell",
                      []
                    |),
                    [ allocator ]
                  |)
                |) in
              let is_next_same_offset_cell :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path
                          "delphinus_zkwasm::circuits::mtable::allocator::MemoryTableCellAllocator")
                        [ F ],
                      "alloc_bit_cell",
                      []
                    |),
                    [ allocator ]
                  |)
                |) in
              let is_mutable :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path
                          "delphinus_zkwasm::circuits::mtable::allocator::MemoryTableCellAllocator")
                        [ F ],
                      "alloc_bit_cell",
                      []
                    |),
                    [ allocator ]
                  |)
                |) in
              let is_i32_cell :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path
                          "delphinus_zkwasm::circuits::mtable::allocator::MemoryTableCellAllocator")
                        [ F ],
                      "alloc_bit_cell",
                      []
                    |),
                    [ allocator ]
                  |)
                |) in
              let is_i64_cell :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path
                          "delphinus_zkwasm::circuits::mtable::allocator::MemoryTableCellAllocator")
                        [ F ],
                      "alloc_bit_cell",
                      []
                    |),
                    [ allocator ]
                  |)
                |) in
              let is_init_cell :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path
                          "delphinus_zkwasm::circuits::mtable::allocator::MemoryTableCellAllocator")
                        [ F ],
                      "alloc_bit_cell",
                      []
                    |),
                    [ allocator ]
                  |)
                |) in
              let start_eid_cell :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path
                          "delphinus_zkwasm::circuits::mtable::allocator::MemoryTableCellAllocator")
                        [ F ],
                      "alloc_u32_state_cell",
                      []
                    |),
                    [ allocator ]
                  |)
                |) in
              let end_eid_cell :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path
                          "delphinus_zkwasm::circuits::mtable::allocator::MemoryTableCellAllocator")
                        [ F ],
                      "alloc_u32_state_cell",
                      []
                    |),
                    [ allocator ]
                  |)
                |) in
              let eid_diff_cell :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path
                          "delphinus_zkwasm::circuits::mtable::allocator::MemoryTableCellAllocator")
                        [ F ],
                      "alloc_u32_state_cell",
                      []
                    |),
                    [ allocator ]
                  |)
                |) in
              let rest_mops_cell :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path
                          "delphinus_zkwasm::circuits::mtable::allocator::MemoryTableCellAllocator")
                        [ F ],
                      "alloc_common_range_cell",
                      []
                    |),
                    [ allocator ]
                  |)
                |) in
              let offset_cell :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path
                          "delphinus_zkwasm::circuits::mtable::allocator::MemoryTableCellAllocator")
                        [ F ],
                      "alloc_u32_cell",
                      []
                    |),
                    [ allocator ]
                  |)
                |) in
              let offset_diff_cell :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path
                          "delphinus_zkwasm::circuits::mtable::allocator::MemoryTableCellAllocator")
                        [ F ],
                      "alloc_u32_cell",
                      []
                    |),
                    [ allocator ]
                  |)
                |) in
              let offset_diff_inv_cell :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path
                          "delphinus_zkwasm::circuits::mtable::allocator::MemoryTableCellAllocator")
                        [ F ],
                      "alloc_unlimited_cell",
                      []
                    |),
                    [ allocator ]
                  |)
                |) in
              let offset_diff_inv_helper_cell :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path
                          "delphinus_zkwasm::circuits::mtable::allocator::MemoryTableCellAllocator")
                        [ F ],
                      "alloc_unlimited_cell",
                      []
                    |),
                    [ allocator ]
                  |)
                |) in
              let encode_cell :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path
                          "delphinus_zkwasm::circuits::mtable::allocator::MemoryTableCellAllocator")
                        [ F ],
                      "alloc_unlimited_cell",
                      []
                    |),
                    [ allocator ]
                  |)
                |) in
              let init_encode_cell :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path
                          "delphinus_zkwasm::circuits::mtable::allocator::MemoryTableCellAllocator")
                        [ F ],
                      "alloc_unlimited_cell",
                      []
                    |),
                    [ allocator ]
                  |)
                |) in
              let value :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path
                          "delphinus_zkwasm::circuits::mtable::allocator::MemoryTableCellAllocator")
                        [ F ],
                      "alloc_u64_cell",
                      []
                    |),
                    [ allocator ]
                  |)
                |) in
              let _ :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path
                          "delphinus_zkwasm::circuits::mtable::allocator::MemoryTableCellAllocator")
                        [ F ],
                      "assert_no_free_cells",
                      []
                    |),
                    [ allocator ]
                  |)
                |) in
              let _ :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply (Ty.path "halo2_proofs::plonk::circuit::ConstraintSystem") [ F ],
                      "create_gate",
                      [
                        Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ];
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          [
                            Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ];
                            Ty.path "alloc::alloc::Global"
                          ];
                        Ty.function
                          [
                            Ty.tuple
                              [
                                Ty.apply
                                  (Ty.path "&mut")
                                  [
                                    Ty.apply
                                      (Ty.path "halo2_proofs::plonk::circuit::VirtualCells")
                                      [ F ]
                                  ]
                              ]
                          ]
                          (Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            [
                              Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ];
                              Ty.path "alloc::alloc::Global"
                            ])
                      ]
                    |),
                    [
                      M.read (| meta |);
                      M.read (| Value.String "mc1. enable seq" |);
                      M.closure
                        (fun γ =>
                          ltac:(M.monadic
                            match γ with
                            | [ α0 ] =>
                              M.match_operator (|
                                M.alloc (| α0 |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let meta := M.copy (| γ |) in
                                      M.call_closure (|
                                        M.get_associated_function (|
                                          Ty.apply
                                            (Ty.path "slice")
                                            [
                                              Ty.apply
                                                (Ty.path "halo2_proofs::plonk::circuit::Expression")
                                                [ F ]
                                            ],
                                          "into_vec",
                                          [ Ty.path "alloc::alloc::Global" ]
                                        |),
                                        [
                                          (* Unsize *)
                                          M.pointer_coercion
                                            (M.read (|
                                              M.call_closure (|
                                                M.get_associated_function (|
                                                  Ty.apply
                                                    (Ty.path "alloc::boxed::Box")
                                                    [
                                                      Ty.apply
                                                        (Ty.path "array")
                                                        [
                                                          Ty.apply
                                                            (Ty.path
                                                              "halo2_proofs::plonk::circuit::Expression")
                                                            [ F ]
                                                        ];
                                                      Ty.path "alloc::alloc::Global"
                                                    ],
                                                  "new",
                                                  []
                                                |),
                                                [
                                                  M.alloc (|
                                                    Value.Array
                                                      [
                                                        M.call_closure (|
                                                          M.get_trait_method (|
                                                            "core::ops::arith::Mul",
                                                            Ty.apply
                                                              (Ty.path
                                                                "halo2_proofs::plonk::circuit::Expression")
                                                              [ F ],
                                                            [
                                                              Ty.apply
                                                                (Ty.path
                                                                  "halo2_proofs::plonk::circuit::Expression")
                                                                [ F ]
                                                            ],
                                                            "mul",
                                                            []
                                                          |),
                                                          [
                                                            M.call_closure (|
                                                              M.get_trait_method (|
                                                                "core::ops::arith::Mul",
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "halo2_proofs::plonk::circuit::Expression")
                                                                  [ F ],
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "halo2_proofs::plonk::circuit::Expression")
                                                                    [ F ]
                                                                ],
                                                                "mul",
                                                                []
                                                              |),
                                                              [
                                                                M.call_closure (|
                                                                  M.get_trait_method (|
                                                                    "core::ops::arith::Sub",
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "halo2_proofs::plonk::circuit::Expression")
                                                                      [ F ],
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "halo2_proofs::plonk::circuit::Expression")
                                                                        [ F ]
                                                                    ],
                                                                    "sub",
                                                                    []
                                                                  |),
                                                                  [
                                                                    M.call_closure (|
                                                                      M.get_trait_method (|
                                                                        "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                                                          [ F ],
                                                                        [ F ],
                                                                        "curr_expr",
                                                                        []
                                                                      |),
                                                                      [
                                                                        enabled_cell;
                                                                        M.read (| meta |)
                                                                      ]
                                                                    |);
                                                                    Value.StructTuple
                                                                      "halo2_proofs::plonk::circuit::Expression::Constant"
                                                                      [
                                                                        M.call_closure (|
                                                                          M.get_trait_method (|
                                                                            "core::convert::From",
                                                                            F,
                                                                            [ Ty.path "u64" ],
                                                                            "from",
                                                                            []
                                                                          |),
                                                                          [
                                                                            M.read (|
                                                                              M.use
                                                                                (M.alloc (|
                                                                                  Value.Integer 1
                                                                                |))
                                                                            |)
                                                                          ]
                                                                        |)
                                                                      ]
                                                                  ]
                                                                |);
                                                                M.call_closure (|
                                                                  M.get_trait_method (|
                                                                    "delphinus_zkwasm::circuits::mtable::allocator::MemoryTableCellExpression",
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                                                      [ F ],
                                                                    [ F ],
                                                                    "next_expr",
                                                                    []
                                                                  |),
                                                                  [ enabled_cell; M.read (| meta |)
                                                                  ]
                                                                |)
                                                              ]
                                                            |);
                                                            M.call_closure (|
                                                              M.get_associated_function (|
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "halo2_proofs::plonk::circuit::VirtualCells")
                                                                  [ F ],
                                                                "query_fixed",
                                                                []
                                                              |),
                                                              [
                                                                M.read (| meta |);
                                                                M.read (| entry_sel |);
                                                                M.call_closure (|
                                                                  M.get_associated_function (|
                                                                    Ty.path
                                                                      "halo2_proofs::poly::Rotation",
                                                                    "cur",
                                                                    []
                                                                  |),
                                                                  []
                                                                |)
                                                              ]
                                                            |)
                                                          ]
                                                        |)
                                                      ]
                                                  |)
                                                ]
                                              |)
                                            |))
                                        ]
                                      |)))
                                ]
                              |)
                            | _ => M.impossible (||)
                            end))
                    ]
                  |)
                |) in
              let _ :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply (Ty.path "halo2_proofs::plonk::circuit::ConstraintSystem") [ F ],
                      "create_gate",
                      [
                        Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ];
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          [
                            Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ];
                            Ty.path "alloc::alloc::Global"
                          ];
                        Ty.function
                          [
                            Ty.tuple
                              [
                                Ty.apply
                                  (Ty.path "&mut")
                                  [
                                    Ty.apply
                                      (Ty.path "halo2_proofs::plonk::circuit::VirtualCells")
                                      [ F ]
                                  ]
                              ]
                          ]
                          (Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            [
                              Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ];
                              Ty.path "alloc::alloc::Global"
                            ])
                      ]
                    |),
                    [
                      M.read (| meta |);
                      M.read (| Value.String "mc2. ltype unique" |);
                      M.closure
                        (fun γ =>
                          ltac:(M.monadic
                            match γ with
                            | [ α0 ] =>
                              M.match_operator (|
                                M.alloc (| α0 |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let meta := M.copy (| γ |) in
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "core::iter::traits::iterator::Iterator",
                                          Ty.apply
                                            (Ty.path "core::iter::adapters::map::Map")
                                            [
                                              Ty.apply
                                                (Ty.path "alloc::vec::into_iter::IntoIter")
                                                [
                                                  Ty.apply
                                                    (Ty.path
                                                      "halo2_proofs::plonk::circuit::Expression")
                                                    [ F ];
                                                  Ty.path "alloc::alloc::Global"
                                                ];
                                              Ty.function
                                                [
                                                  Ty.tuple
                                                    [
                                                      Ty.apply
                                                        (Ty.path
                                                          "halo2_proofs::plonk::circuit::Expression")
                                                        [ F ]
                                                    ]
                                                ]
                                                (Ty.apply
                                                  (Ty.path
                                                    "halo2_proofs::plonk::circuit::Expression")
                                                  [ F ])
                                            ],
                                          [],
                                          "collect",
                                          [
                                            Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              [
                                                Ty.apply
                                                  (Ty.path
                                                    "halo2_proofs::plonk::circuit::Expression")
                                                  [ F ];
                                                Ty.path "alloc::alloc::Global"
                                              ]
                                          ]
                                        |),
                                        [
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "core::iter::traits::iterator::Iterator",
                                              Ty.apply
                                                (Ty.path "alloc::vec::into_iter::IntoIter")
                                                [
                                                  Ty.apply
                                                    (Ty.path
                                                      "halo2_proofs::plonk::circuit::Expression")
                                                    [ F ];
                                                  Ty.path "alloc::alloc::Global"
                                                ],
                                              [],
                                              "map",
                                              [
                                                Ty.apply
                                                  (Ty.path
                                                    "halo2_proofs::plonk::circuit::Expression")
                                                  [ F ];
                                                Ty.function
                                                  [
                                                    Ty.tuple
                                                      [
                                                        Ty.apply
                                                          (Ty.path
                                                            "halo2_proofs::plonk::circuit::Expression")
                                                          [ F ]
                                                      ]
                                                  ]
                                                  (Ty.apply
                                                    (Ty.path
                                                      "halo2_proofs::plonk::circuit::Expression")
                                                    [ F ])
                                              ]
                                            |),
                                            [
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "core::iter::traits::collect::IntoIterator",
                                                  Ty.apply
                                                    (Ty.path "alloc::vec::Vec")
                                                    [
                                                      Ty.apply
                                                        (Ty.path
                                                          "halo2_proofs::plonk::circuit::Expression")
                                                        [ F ];
                                                      Ty.path "alloc::alloc::Global"
                                                    ],
                                                  [],
                                                  "into_iter",
                                                  []
                                                |),
                                                [
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.apply
                                                        (Ty.path "slice")
                                                        [
                                                          Ty.apply
                                                            (Ty.path
                                                              "halo2_proofs::plonk::circuit::Expression")
                                                            [ F ]
                                                        ],
                                                      "into_vec",
                                                      [ Ty.path "alloc::alloc::Global" ]
                                                    |),
                                                    [
                                                      (* Unsize *)
                                                      M.pointer_coercion
                                                        (M.read (|
                                                          M.call_closure (|
                                                            M.get_associated_function (|
                                                              Ty.apply
                                                                (Ty.path "alloc::boxed::Box")
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path "array")
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "halo2_proofs::plonk::circuit::Expression")
                                                                        [ F ]
                                                                    ];
                                                                  Ty.path "alloc::alloc::Global"
                                                                ],
                                                              "new",
                                                              []
                                                            |),
                                                            [
                                                              M.alloc (|
                                                                Value.Array
                                                                  [
                                                                    M.call_closure (|
                                                                      M.get_trait_method (|
                                                                        "core::ops::arith::Sub",
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "halo2_proofs::plonk::circuit::Expression")
                                                                          [ F ],
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "halo2_proofs::plonk::circuit::Expression")
                                                                            [ F ]
                                                                        ],
                                                                        "sub",
                                                                        []
                                                                      |),
                                                                      [
                                                                        M.call_closure (|
                                                                          M.get_trait_method (|
                                                                            "core::ops::arith::Add",
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "halo2_proofs::plonk::circuit::Expression")
                                                                              [ F ],
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "halo2_proofs::plonk::circuit::Expression")
                                                                                [ F ]
                                                                            ],
                                                                            "add",
                                                                            []
                                                                          |),
                                                                          [
                                                                            M.call_closure (|
                                                                              M.get_trait_method (|
                                                                                "core::ops::arith::Add",
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "halo2_proofs::plonk::circuit::Expression")
                                                                                  [ F ],
                                                                                [
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "halo2_proofs::plonk::circuit::Expression")
                                                                                    [ F ]
                                                                                ],
                                                                                "add",
                                                                                []
                                                                              |),
                                                                              [
                                                                                M.call_closure (|
                                                                                  M.get_trait_method (|
                                                                                    "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                                                                      [ F ],
                                                                                    [ F ],
                                                                                    "curr_expr",
                                                                                    []
                                                                                  |),
                                                                                  [
                                                                                    is_global_cell;
                                                                                    M.read (|
                                                                                      meta
                                                                                    |)
                                                                                  ]
                                                                                |);
                                                                                M.call_closure (|
                                                                                  M.get_trait_method (|
                                                                                    "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                                                                      [ F ],
                                                                                    [ F ],
                                                                                    "curr_expr",
                                                                                    []
                                                                                  |),
                                                                                  [
                                                                                    is_heap_cell;
                                                                                    M.read (|
                                                                                      meta
                                                                                    |)
                                                                                  ]
                                                                                |)
                                                                              ]
                                                                            |);
                                                                            M.call_closure (|
                                                                              M.get_trait_method (|
                                                                                "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                                                                  [ F ],
                                                                                [ F ],
                                                                                "curr_expr",
                                                                                []
                                                                              |),
                                                                              [
                                                                                is_stack_cell;
                                                                                M.read (| meta |)
                                                                              ]
                                                                            |)
                                                                          ]
                                                                        |);
                                                                        M.call_closure (|
                                                                          M.get_trait_method (|
                                                                            "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                                                              [ F ],
                                                                            [ F ],
                                                                            "curr_expr",
                                                                            []
                                                                          |),
                                                                          [
                                                                            enabled_cell;
                                                                            M.read (| meta |)
                                                                          ]
                                                                        |)
                                                                      ]
                                                                    |)
                                                                  ]
                                                              |)
                                                            ]
                                                          |)
                                                        |))
                                                    ]
                                                  |)
                                                ]
                                              |);
                                              M.closure
                                                (fun γ =>
                                                  ltac:(M.monadic
                                                    match γ with
                                                    | [ α0 ] =>
                                                      M.match_operator (|
                                                        M.alloc (| α0 |),
                                                        [
                                                          fun γ =>
                                                            ltac:(M.monadic
                                                              (let x := M.copy (| γ |) in
                                                              M.call_closure (|
                                                                M.get_trait_method (|
                                                                  "core::ops::arith::Mul",
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "halo2_proofs::plonk::circuit::Expression")
                                                                    [ F ],
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "halo2_proofs::plonk::circuit::Expression")
                                                                      [ F ]
                                                                  ],
                                                                  "mul",
                                                                  []
                                                                |),
                                                                [
                                                                  M.read (| x |);
                                                                  M.call_closure (|
                                                                    M.get_associated_function (|
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "halo2_proofs::plonk::circuit::VirtualCells")
                                                                        [ F ],
                                                                      "query_fixed",
                                                                      []
                                                                    |),
                                                                    [
                                                                      M.read (| meta |);
                                                                      M.read (| entry_sel |);
                                                                      M.call_closure (|
                                                                        M.get_associated_function (|
                                                                          Ty.path
                                                                            "halo2_proofs::poly::Rotation",
                                                                          "cur",
                                                                          []
                                                                        |),
                                                                        []
                                                                      |)
                                                                    ]
                                                                  |)
                                                                ]
                                                              |)))
                                                        ]
                                                      |)
                                                    | _ => M.impossible (||)
                                                    end))
                                            ]
                                          |)
                                        ]
                                      |)))
                                ]
                              |)
                            | _ => M.impossible (||)
                            end))
                    ]
                  |)
                |) in
              let _ :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply (Ty.path "halo2_proofs::plonk::circuit::ConstraintSystem") [ F ],
                      "create_gate",
                      [
                        Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ];
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          [
                            Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ];
                            Ty.path "alloc::alloc::Global"
                          ];
                        Ty.function
                          [
                            Ty.tuple
                              [
                                Ty.apply
                                  (Ty.path "&mut")
                                  [
                                    Ty.apply
                                      (Ty.path "halo2_proofs::plonk::circuit::VirtualCells")
                                      [ F ]
                                  ]
                              ]
                          ]
                          (Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            [
                              Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ];
                              Ty.path "alloc::alloc::Global"
                            ])
                      ]
                    |),
                    [
                      M.read (| meta |);
                      M.read (| Value.String "mc3. ltype group" |);
                      M.closure
                        (fun γ =>
                          ltac:(M.monadic
                            match γ with
                            | [ α0 ] =>
                              M.match_operator (|
                                M.alloc (| α0 |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let meta := M.copy (| γ |) in
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "core::iter::traits::iterator::Iterator",
                                          Ty.apply
                                            (Ty.path "core::iter::adapters::map::Map")
                                            [
                                              Ty.apply
                                                (Ty.path "alloc::vec::into_iter::IntoIter")
                                                [
                                                  Ty.apply
                                                    (Ty.path
                                                      "halo2_proofs::plonk::circuit::Expression")
                                                    [ F ];
                                                  Ty.path "alloc::alloc::Global"
                                                ];
                                              Ty.function
                                                [
                                                  Ty.tuple
                                                    [
                                                      Ty.apply
                                                        (Ty.path
                                                          "halo2_proofs::plonk::circuit::Expression")
                                                        [ F ]
                                                    ]
                                                ]
                                                (Ty.apply
                                                  (Ty.path
                                                    "halo2_proofs::plonk::circuit::Expression")
                                                  [ F ])
                                            ],
                                          [],
                                          "collect",
                                          [
                                            Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              [
                                                Ty.apply
                                                  (Ty.path
                                                    "halo2_proofs::plonk::circuit::Expression")
                                                  [ F ];
                                                Ty.path "alloc::alloc::Global"
                                              ]
                                          ]
                                        |),
                                        [
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "core::iter::traits::iterator::Iterator",
                                              Ty.apply
                                                (Ty.path "alloc::vec::into_iter::IntoIter")
                                                [
                                                  Ty.apply
                                                    (Ty.path
                                                      "halo2_proofs::plonk::circuit::Expression")
                                                    [ F ];
                                                  Ty.path "alloc::alloc::Global"
                                                ],
                                              [],
                                              "map",
                                              [
                                                Ty.apply
                                                  (Ty.path
                                                    "halo2_proofs::plonk::circuit::Expression")
                                                  [ F ];
                                                Ty.function
                                                  [
                                                    Ty.tuple
                                                      [
                                                        Ty.apply
                                                          (Ty.path
                                                            "halo2_proofs::plonk::circuit::Expression")
                                                          [ F ]
                                                      ]
                                                  ]
                                                  (Ty.apply
                                                    (Ty.path
                                                      "halo2_proofs::plonk::circuit::Expression")
                                                    [ F ])
                                              ]
                                            |),
                                            [
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "core::iter::traits::collect::IntoIterator",
                                                  Ty.apply
                                                    (Ty.path "alloc::vec::Vec")
                                                    [
                                                      Ty.apply
                                                        (Ty.path
                                                          "halo2_proofs::plonk::circuit::Expression")
                                                        [ F ];
                                                      Ty.path "alloc::alloc::Global"
                                                    ],
                                                  [],
                                                  "into_iter",
                                                  []
                                                |),
                                                [
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.apply
                                                        (Ty.path "slice")
                                                        [
                                                          Ty.apply
                                                            (Ty.path
                                                              "halo2_proofs::plonk::circuit::Expression")
                                                            [ F ]
                                                        ],
                                                      "into_vec",
                                                      [ Ty.path "alloc::alloc::Global" ]
                                                    |),
                                                    [
                                                      (* Unsize *)
                                                      M.pointer_coercion
                                                        (M.read (|
                                                          M.call_closure (|
                                                            M.get_associated_function (|
                                                              Ty.apply
                                                                (Ty.path "alloc::boxed::Box")
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path "array")
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "halo2_proofs::plonk::circuit::Expression")
                                                                        [ F ]
                                                                    ];
                                                                  Ty.path "alloc::alloc::Global"
                                                                ],
                                                              "new",
                                                              []
                                                            |),
                                                            [
                                                              M.alloc (|
                                                                Value.Array
                                                                  [
                                                                    M.call_closure (|
                                                                      M.get_trait_method (|
                                                                        "core::ops::arith::Mul",
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "halo2_proofs::plonk::circuit::Expression")
                                                                          [ F ],
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "halo2_proofs::plonk::circuit::Expression")
                                                                            [ F ]
                                                                        ],
                                                                        "mul",
                                                                        []
                                                                      |),
                                                                      [
                                                                        M.call_closure (|
                                                                          M.get_trait_method (|
                                                                            "core::ops::arith::Sub",
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "halo2_proofs::plonk::circuit::Expression")
                                                                              [ F ],
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "halo2_proofs::plonk::circuit::Expression")
                                                                                [ F ]
                                                                            ],
                                                                            "sub",
                                                                            []
                                                                          |),
                                                                          [
                                                                            M.call_closure (|
                                                                              M.get_trait_method (|
                                                                                "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                                                                  [ F ],
                                                                                [ F ],
                                                                                "curr_expr",
                                                                                []
                                                                              |),
                                                                              [
                                                                                is_stack_cell;
                                                                                M.read (| meta |)
                                                                              ]
                                                                            |);
                                                                            Value.StructTuple
                                                                              "halo2_proofs::plonk::circuit::Expression::Constant"
                                                                              [
                                                                                M.call_closure (|
                                                                                  M.get_trait_method (|
                                                                                    "core::convert::From",
                                                                                    F,
                                                                                    [ Ty.path "u64"
                                                                                    ],
                                                                                    "from",
                                                                                    []
                                                                                  |),
                                                                                  [
                                                                                    M.read (|
                                                                                      M.use
                                                                                        (M.alloc (|
                                                                                          Value.Integer
                                                                                            1
                                                                                        |))
                                                                                    |)
                                                                                  ]
                                                                                |)
                                                                              ]
                                                                          ]
                                                                        |);
                                                                        M.call_closure (|
                                                                          M.get_trait_method (|
                                                                            "delphinus_zkwasm::circuits::mtable::allocator::MemoryTableCellExpression",
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                                                              [ F ],
                                                                            [ F ],
                                                                            "next_expr",
                                                                            []
                                                                          |),
                                                                          [
                                                                            is_stack_cell;
                                                                            M.read (| meta |)
                                                                          ]
                                                                        |)
                                                                      ]
                                                                    |);
                                                                    M.call_closure (|
                                                                      M.get_trait_method (|
                                                                        "core::ops::arith::Mul",
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "halo2_proofs::plonk::circuit::Expression")
                                                                          [ F ],
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "halo2_proofs::plonk::circuit::Expression")
                                                                            [ F ]
                                                                        ],
                                                                        "mul",
                                                                        []
                                                                      |),
                                                                      [
                                                                        M.call_closure (|
                                                                          M.get_trait_method (|
                                                                            "core::ops::arith::Mul",
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "halo2_proofs::plonk::circuit::Expression")
                                                                              [ F ],
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "halo2_proofs::plonk::circuit::Expression")
                                                                                [ F ]
                                                                            ],
                                                                            "mul",
                                                                            []
                                                                          |),
                                                                          [
                                                                            M.call_closure (|
                                                                              M.get_trait_method (|
                                                                                "core::ops::arith::Sub",
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "halo2_proofs::plonk::circuit::Expression")
                                                                                  [ F ],
                                                                                [
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "halo2_proofs::plonk::circuit::Expression")
                                                                                    [ F ]
                                                                                ],
                                                                                "sub",
                                                                                []
                                                                              |),
                                                                              [
                                                                                M.call_closure (|
                                                                                  M.get_trait_method (|
                                                                                    "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                                                                      [ F ],
                                                                                    [ F ],
                                                                                    "curr_expr",
                                                                                    []
                                                                                  |),
                                                                                  [
                                                                                    is_heap_cell;
                                                                                    M.read (|
                                                                                      meta
                                                                                    |)
                                                                                  ]
                                                                                |);
                                                                                Value.StructTuple
                                                                                  "halo2_proofs::plonk::circuit::Expression::Constant"
                                                                                  [
                                                                                    M.call_closure (|
                                                                                      M.get_trait_method (|
                                                                                        "core::convert::From",
                                                                                        F,
                                                                                        [
                                                                                          Ty.path
                                                                                            "u64"
                                                                                        ],
                                                                                        "from",
                                                                                        []
                                                                                      |),
                                                                                      [
                                                                                        M.read (|
                                                                                          M.use
                                                                                            (M.alloc (|
                                                                                              Value.Integer
                                                                                                1
                                                                                            |))
                                                                                        |)
                                                                                      ]
                                                                                    |)
                                                                                  ]
                                                                              ]
                                                                            |);
                                                                            M.call_closure (|
                                                                              M.get_trait_method (|
                                                                                "delphinus_zkwasm::circuits::mtable::allocator::MemoryTableCellExpression",
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                                                                  [ F ],
                                                                                [ F ],
                                                                                "next_expr",
                                                                                []
                                                                              |),
                                                                              [
                                                                                is_heap_cell;
                                                                                M.read (| meta |)
                                                                              ]
                                                                            |)
                                                                          ]
                                                                        |);
                                                                        M.call_closure (|
                                                                          M.get_trait_method (|
                                                                            "core::ops::arith::Sub",
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "halo2_proofs::plonk::circuit::Expression")
                                                                              [ F ],
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "halo2_proofs::plonk::circuit::Expression")
                                                                                [ F ]
                                                                            ],
                                                                            "sub",
                                                                            []
                                                                          |),
                                                                          [
                                                                            M.call_closure (|
                                                                              M.get_trait_method (|
                                                                                "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                                                                  [ F ],
                                                                                [ F ],
                                                                                "curr_expr",
                                                                                []
                                                                              |),
                                                                              [
                                                                                is_stack_cell;
                                                                                M.read (| meta |)
                                                                              ]
                                                                            |);
                                                                            Value.StructTuple
                                                                              "halo2_proofs::plonk::circuit::Expression::Constant"
                                                                              [
                                                                                M.call_closure (|
                                                                                  M.get_trait_method (|
                                                                                    "core::convert::From",
                                                                                    F,
                                                                                    [ Ty.path "u64"
                                                                                    ],
                                                                                    "from",
                                                                                    []
                                                                                  |),
                                                                                  [
                                                                                    M.read (|
                                                                                      M.use
                                                                                        (M.alloc (|
                                                                                          Value.Integer
                                                                                            1
                                                                                        |))
                                                                                    |)
                                                                                  ]
                                                                                |)
                                                                              ]
                                                                          ]
                                                                        |)
                                                                      ]
                                                                    |)
                                                                  ]
                                                              |)
                                                            ]
                                                          |)
                                                        |))
                                                    ]
                                                  |)
                                                ]
                                              |);
                                              M.closure
                                                (fun γ =>
                                                  ltac:(M.monadic
                                                    match γ with
                                                    | [ α0 ] =>
                                                      M.match_operator (|
                                                        M.alloc (| α0 |),
                                                        [
                                                          fun γ =>
                                                            ltac:(M.monadic
                                                              (let x := M.copy (| γ |) in
                                                              M.call_closure (|
                                                                M.get_trait_method (|
                                                                  "core::ops::arith::Mul",
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "halo2_proofs::plonk::circuit::Expression")
                                                                    [ F ],
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "halo2_proofs::plonk::circuit::Expression")
                                                                      [ F ]
                                                                  ],
                                                                  "mul",
                                                                  []
                                                                |),
                                                                [
                                                                  M.read (| x |);
                                                                  M.call_closure (|
                                                                    M.get_associated_function (|
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "halo2_proofs::plonk::circuit::VirtualCells")
                                                                        [ F ],
                                                                      "query_fixed",
                                                                      []
                                                                    |),
                                                                    [
                                                                      M.read (| meta |);
                                                                      M.read (| entry_sel |);
                                                                      M.call_closure (|
                                                                        M.get_associated_function (|
                                                                          Ty.path
                                                                            "halo2_proofs::poly::Rotation",
                                                                          "cur",
                                                                          []
                                                                        |),
                                                                        []
                                                                      |)
                                                                    ]
                                                                  |)
                                                                ]
                                                              |)))
                                                        ]
                                                      |)
                                                    | _ => M.impossible (||)
                                                    end))
                                            ]
                                          |)
                                        ]
                                      |)))
                                ]
                              |)
                            | _ => M.impossible (||)
                            end))
                    ]
                  |)
                |) in
              let _ :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply (Ty.path "halo2_proofs::plonk::circuit::ConstraintSystem") [ F ],
                      "create_gate",
                      [
                        Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ];
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          [
                            Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ];
                            Ty.path "alloc::alloc::Global"
                          ];
                        Ty.function
                          [
                            Ty.tuple
                              [
                                Ty.apply
                                  (Ty.path "&mut")
                                  [
                                    Ty.apply
                                      (Ty.path "halo2_proofs::plonk::circuit::VirtualCells")
                                      [ F ]
                                  ]
                              ]
                          ]
                          (Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            [
                              Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ];
                              Ty.path "alloc::alloc::Global"
                            ])
                      ]
                    |),
                    [
                      M.read (| meta |);
                      M.read (| Value.String "mc4a. is_next_same_ltype" |);
                      M.closure
                        (fun γ =>
                          ltac:(M.monadic
                            match γ with
                            | [ α0 ] =>
                              M.match_operator (|
                                M.alloc (| α0 |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let meta := M.copy (| γ |) in
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "core::iter::traits::iterator::Iterator",
                                          Ty.apply
                                            (Ty.path "core::iter::adapters::map::Map")
                                            [
                                              Ty.apply
                                                (Ty.path "alloc::vec::into_iter::IntoIter")
                                                [
                                                  Ty.apply
                                                    (Ty.path
                                                      "halo2_proofs::plonk::circuit::Expression")
                                                    [ F ];
                                                  Ty.path "alloc::alloc::Global"
                                                ];
                                              Ty.function
                                                [
                                                  Ty.tuple
                                                    [
                                                      Ty.apply
                                                        (Ty.path
                                                          "halo2_proofs::plonk::circuit::Expression")
                                                        [ F ]
                                                    ]
                                                ]
                                                (Ty.apply
                                                  (Ty.path
                                                    "halo2_proofs::plonk::circuit::Expression")
                                                  [ F ])
                                            ],
                                          [],
                                          "collect",
                                          [
                                            Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              [
                                                Ty.apply
                                                  (Ty.path
                                                    "halo2_proofs::plonk::circuit::Expression")
                                                  [ F ];
                                                Ty.path "alloc::alloc::Global"
                                              ]
                                          ]
                                        |),
                                        [
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "core::iter::traits::iterator::Iterator",
                                              Ty.apply
                                                (Ty.path "alloc::vec::into_iter::IntoIter")
                                                [
                                                  Ty.apply
                                                    (Ty.path
                                                      "halo2_proofs::plonk::circuit::Expression")
                                                    [ F ];
                                                  Ty.path "alloc::alloc::Global"
                                                ],
                                              [],
                                              "map",
                                              [
                                                Ty.apply
                                                  (Ty.path
                                                    "halo2_proofs::plonk::circuit::Expression")
                                                  [ F ];
                                                Ty.function
                                                  [
                                                    Ty.tuple
                                                      [
                                                        Ty.apply
                                                          (Ty.path
                                                            "halo2_proofs::plonk::circuit::Expression")
                                                          [ F ]
                                                      ]
                                                  ]
                                                  (Ty.apply
                                                    (Ty.path
                                                      "halo2_proofs::plonk::circuit::Expression")
                                                    [ F ])
                                              ]
                                            |),
                                            [
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "core::iter::traits::collect::IntoIterator",
                                                  Ty.apply
                                                    (Ty.path "alloc::vec::Vec")
                                                    [
                                                      Ty.apply
                                                        (Ty.path
                                                          "halo2_proofs::plonk::circuit::Expression")
                                                        [ F ];
                                                      Ty.path "alloc::alloc::Global"
                                                    ],
                                                  [],
                                                  "into_iter",
                                                  []
                                                |),
                                                [
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.apply
                                                        (Ty.path "slice")
                                                        [
                                                          Ty.apply
                                                            (Ty.path
                                                              "halo2_proofs::plonk::circuit::Expression")
                                                            [ F ]
                                                        ],
                                                      "into_vec",
                                                      [ Ty.path "alloc::alloc::Global" ]
                                                    |),
                                                    [
                                                      (* Unsize *)
                                                      M.pointer_coercion
                                                        (M.read (|
                                                          M.call_closure (|
                                                            M.get_associated_function (|
                                                              Ty.apply
                                                                (Ty.path "alloc::boxed::Box")
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path "array")
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "halo2_proofs::plonk::circuit::Expression")
                                                                        [ F ]
                                                                    ];
                                                                  Ty.path "alloc::alloc::Global"
                                                                ],
                                                              "new",
                                                              []
                                                            |),
                                                            [
                                                              M.alloc (|
                                                                Value.Array
                                                                  [
                                                                    M.call_closure (|
                                                                      M.get_trait_method (|
                                                                        "core::ops::arith::Sub",
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "halo2_proofs::plonk::circuit::Expression")
                                                                          [ F ],
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "halo2_proofs::plonk::circuit::Expression")
                                                                            [ F ]
                                                                        ],
                                                                        "sub",
                                                                        []
                                                                      |),
                                                                      [
                                                                        M.call_closure (|
                                                                          M.get_trait_method (|
                                                                            "core::ops::arith::Sub",
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "halo2_proofs::plonk::circuit::Expression")
                                                                              [ F ],
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "halo2_proofs::plonk::circuit::Expression")
                                                                                [ F ]
                                                                            ],
                                                                            "sub",
                                                                            []
                                                                          |),
                                                                          [
                                                                            M.call_closure (|
                                                                              M.get_trait_method (|
                                                                                "core::ops::arith::Sub",
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "halo2_proofs::plonk::circuit::Expression")
                                                                                  [ F ],
                                                                                [
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "halo2_proofs::plonk::circuit::Expression")
                                                                                    [ F ]
                                                                                ],
                                                                                "sub",
                                                                                []
                                                                              |),
                                                                              [
                                                                                M.call_closure (|
                                                                                  M.get_trait_method (|
                                                                                    "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                                                                      [ F ],
                                                                                    [ F ],
                                                                                    "curr_expr",
                                                                                    []
                                                                                  |),
                                                                                  [
                                                                                    is_next_same_ltype_cell;
                                                                                    M.read (|
                                                                                      meta
                                                                                    |)
                                                                                  ]
                                                                                |);
                                                                                M.call_closure (|
                                                                                  M.get_trait_method (|
                                                                                    "core::ops::arith::Mul",
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "halo2_proofs::plonk::circuit::Expression")
                                                                                      [ F ],
                                                                                    [
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "halo2_proofs::plonk::circuit::Expression")
                                                                                        [ F ]
                                                                                    ],
                                                                                    "mul",
                                                                                    []
                                                                                  |),
                                                                                  [
                                                                                    M.call_closure (|
                                                                                      M.get_trait_method (|
                                                                                        "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                                                                          [ F ],
                                                                                        [ F ],
                                                                                        "curr_expr",
                                                                                        []
                                                                                      |),
                                                                                      [
                                                                                        is_stack_cell;
                                                                                        M.read (|
                                                                                          meta
                                                                                        |)
                                                                                      ]
                                                                                    |);
                                                                                    M.call_closure (|
                                                                                      M.get_trait_method (|
                                                                                        "delphinus_zkwasm::circuits::mtable::allocator::MemoryTableCellExpression",
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                                                                          [ F ],
                                                                                        [ F ],
                                                                                        "next_expr",
                                                                                        []
                                                                                      |),
                                                                                      [
                                                                                        is_stack_cell;
                                                                                        M.read (|
                                                                                          meta
                                                                                        |)
                                                                                      ]
                                                                                    |)
                                                                                  ]
                                                                                |)
                                                                              ]
                                                                            |);
                                                                            M.call_closure (|
                                                                              M.get_trait_method (|
                                                                                "core::ops::arith::Mul",
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "halo2_proofs::plonk::circuit::Expression")
                                                                                  [ F ],
                                                                                [
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "halo2_proofs::plonk::circuit::Expression")
                                                                                    [ F ]
                                                                                ],
                                                                                "mul",
                                                                                []
                                                                              |),
                                                                              [
                                                                                M.call_closure (|
                                                                                  M.get_trait_method (|
                                                                                    "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                                                                      [ F ],
                                                                                    [ F ],
                                                                                    "curr_expr",
                                                                                    []
                                                                                  |),
                                                                                  [
                                                                                    is_global_cell;
                                                                                    M.read (|
                                                                                      meta
                                                                                    |)
                                                                                  ]
                                                                                |);
                                                                                M.call_closure (|
                                                                                  M.get_trait_method (|
                                                                                    "delphinus_zkwasm::circuits::mtable::allocator::MemoryTableCellExpression",
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                                                                      [ F ],
                                                                                    [ F ],
                                                                                    "next_expr",
                                                                                    []
                                                                                  |),
                                                                                  [
                                                                                    is_global_cell;
                                                                                    M.read (|
                                                                                      meta
                                                                                    |)
                                                                                  ]
                                                                                |)
                                                                              ]
                                                                            |)
                                                                          ]
                                                                        |);
                                                                        M.call_closure (|
                                                                          M.get_trait_method (|
                                                                            "core::ops::arith::Mul",
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "halo2_proofs::plonk::circuit::Expression")
                                                                              [ F ],
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "halo2_proofs::plonk::circuit::Expression")
                                                                                [ F ]
                                                                            ],
                                                                            "mul",
                                                                            []
                                                                          |),
                                                                          [
                                                                            M.call_closure (|
                                                                              M.get_trait_method (|
                                                                                "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                                                                  [ F ],
                                                                                [ F ],
                                                                                "curr_expr",
                                                                                []
                                                                              |),
                                                                              [
                                                                                is_heap_cell;
                                                                                M.read (| meta |)
                                                                              ]
                                                                            |);
                                                                            M.call_closure (|
                                                                              M.get_trait_method (|
                                                                                "delphinus_zkwasm::circuits::mtable::allocator::MemoryTableCellExpression",
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                                                                  [ F ],
                                                                                [ F ],
                                                                                "next_expr",
                                                                                []
                                                                              |),
                                                                              [
                                                                                is_heap_cell;
                                                                                M.read (| meta |)
                                                                              ]
                                                                            |)
                                                                          ]
                                                                        |)
                                                                      ]
                                                                    |)
                                                                  ]
                                                              |)
                                                            ]
                                                          |)
                                                        |))
                                                    ]
                                                  |)
                                                ]
                                              |);
                                              M.closure
                                                (fun γ =>
                                                  ltac:(M.monadic
                                                    match γ with
                                                    | [ α0 ] =>
                                                      M.match_operator (|
                                                        M.alloc (| α0 |),
                                                        [
                                                          fun γ =>
                                                            ltac:(M.monadic
                                                              (let x := M.copy (| γ |) in
                                                              M.call_closure (|
                                                                M.get_trait_method (|
                                                                  "core::ops::arith::Mul",
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "halo2_proofs::plonk::circuit::Expression")
                                                                    [ F ],
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "halo2_proofs::plonk::circuit::Expression")
                                                                      [ F ]
                                                                  ],
                                                                  "mul",
                                                                  []
                                                                |),
                                                                [
                                                                  M.read (| x |);
                                                                  M.call_closure (|
                                                                    M.get_associated_function (|
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "halo2_proofs::plonk::circuit::VirtualCells")
                                                                        [ F ],
                                                                      "query_fixed",
                                                                      []
                                                                    |),
                                                                    [
                                                                      M.read (| meta |);
                                                                      M.read (| entry_sel |);
                                                                      M.call_closure (|
                                                                        M.get_associated_function (|
                                                                          Ty.path
                                                                            "halo2_proofs::poly::Rotation",
                                                                          "cur",
                                                                          []
                                                                        |),
                                                                        []
                                                                      |)
                                                                    ]
                                                                  |)
                                                                ]
                                                              |)))
                                                        ]
                                                      |)
                                                    | _ => M.impossible (||)
                                                    end))
                                            ]
                                          |)
                                        ]
                                      |)))
                                ]
                              |)
                            | _ => M.impossible (||)
                            end))
                    ]
                  |)
                |) in
              let _ :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply (Ty.path "halo2_proofs::plonk::circuit::ConstraintSystem") [ F ],
                      "create_gate",
                      [
                        Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ];
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          [
                            Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ];
                            Ty.path "alloc::alloc::Global"
                          ];
                        Ty.function
                          [
                            Ty.tuple
                              [
                                Ty.apply
                                  (Ty.path "&mut")
                                  [
                                    Ty.apply
                                      (Ty.path "halo2_proofs::plonk::circuit::VirtualCells")
                                      [ F ]
                                  ]
                              ]
                          ]
                          (Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            [
                              Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ];
                              Ty.path "alloc::alloc::Global"
                            ])
                      ]
                    |),
                    [
                      M.read (| meta |);
                      M.read (| Value.String "mc4b. is_next_same_offset" |);
                      M.closure
                        (fun γ =>
                          ltac:(M.monadic
                            match γ with
                            | [ α0 ] =>
                              M.match_operator (|
                                M.alloc (| α0 |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let meta := M.copy (| γ |) in
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "core::iter::traits::iterator::Iterator",
                                          Ty.apply
                                            (Ty.path "core::iter::adapters::map::Map")
                                            [
                                              Ty.apply
                                                (Ty.path "alloc::vec::into_iter::IntoIter")
                                                [
                                                  Ty.apply
                                                    (Ty.path
                                                      "halo2_proofs::plonk::circuit::Expression")
                                                    [ F ];
                                                  Ty.path "alloc::alloc::Global"
                                                ];
                                              Ty.function
                                                [
                                                  Ty.tuple
                                                    [
                                                      Ty.apply
                                                        (Ty.path
                                                          "halo2_proofs::plonk::circuit::Expression")
                                                        [ F ]
                                                    ]
                                                ]
                                                (Ty.apply
                                                  (Ty.path
                                                    "halo2_proofs::plonk::circuit::Expression")
                                                  [ F ])
                                            ],
                                          [],
                                          "collect",
                                          [
                                            Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              [
                                                Ty.apply
                                                  (Ty.path
                                                    "halo2_proofs::plonk::circuit::Expression")
                                                  [ F ];
                                                Ty.path "alloc::alloc::Global"
                                              ]
                                          ]
                                        |),
                                        [
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "core::iter::traits::iterator::Iterator",
                                              Ty.apply
                                                (Ty.path "alloc::vec::into_iter::IntoIter")
                                                [
                                                  Ty.apply
                                                    (Ty.path
                                                      "halo2_proofs::plonk::circuit::Expression")
                                                    [ F ];
                                                  Ty.path "alloc::alloc::Global"
                                                ],
                                              [],
                                              "map",
                                              [
                                                Ty.apply
                                                  (Ty.path
                                                    "halo2_proofs::plonk::circuit::Expression")
                                                  [ F ];
                                                Ty.function
                                                  [
                                                    Ty.tuple
                                                      [
                                                        Ty.apply
                                                          (Ty.path
                                                            "halo2_proofs::plonk::circuit::Expression")
                                                          [ F ]
                                                      ]
                                                  ]
                                                  (Ty.apply
                                                    (Ty.path
                                                      "halo2_proofs::plonk::circuit::Expression")
                                                    [ F ])
                                              ]
                                            |),
                                            [
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "core::iter::traits::collect::IntoIterator",
                                                  Ty.apply
                                                    (Ty.path "alloc::vec::Vec")
                                                    [
                                                      Ty.apply
                                                        (Ty.path
                                                          "halo2_proofs::plonk::circuit::Expression")
                                                        [ F ];
                                                      Ty.path "alloc::alloc::Global"
                                                    ],
                                                  [],
                                                  "into_iter",
                                                  []
                                                |),
                                                [
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.apply
                                                        (Ty.path "slice")
                                                        [
                                                          Ty.apply
                                                            (Ty.path
                                                              "halo2_proofs::plonk::circuit::Expression")
                                                            [ F ]
                                                        ],
                                                      "into_vec",
                                                      [ Ty.path "alloc::alloc::Global" ]
                                                    |),
                                                    [
                                                      (* Unsize *)
                                                      M.pointer_coercion
                                                        (M.read (|
                                                          M.call_closure (|
                                                            M.get_associated_function (|
                                                              Ty.apply
                                                                (Ty.path "alloc::boxed::Box")
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path "array")
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "halo2_proofs::plonk::circuit::Expression")
                                                                        [ F ]
                                                                    ];
                                                                  Ty.path "alloc::alloc::Global"
                                                                ],
                                                              "new",
                                                              []
                                                            |),
                                                            [
                                                              M.alloc (|
                                                                Value.Array
                                                                  [
                                                                    M.call_closure (|
                                                                      M.get_trait_method (|
                                                                        "core::ops::arith::Mul",
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "halo2_proofs::plonk::circuit::Expression")
                                                                          [ F ],
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "halo2_proofs::plonk::circuit::Expression")
                                                                            [ F ]
                                                                        ],
                                                                        "mul",
                                                                        []
                                                                      |),
                                                                      [
                                                                        M.call_closure (|
                                                                          M.get_trait_method (|
                                                                            "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                                                              [ F ],
                                                                            [ F ],
                                                                            "curr_expr",
                                                                            []
                                                                          |),
                                                                          [
                                                                            is_next_same_offset_cell;
                                                                            M.read (| meta |)
                                                                          ]
                                                                        |);
                                                                        M.call_closure (|
                                                                          M.get_trait_method (|
                                                                            "core::ops::arith::Sub",
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "halo2_proofs::plonk::circuit::Expression")
                                                                              [ F ],
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "halo2_proofs::plonk::circuit::Expression")
                                                                                [ F ]
                                                                            ],
                                                                            "sub",
                                                                            []
                                                                          |),
                                                                          [
                                                                            M.call_closure (|
                                                                              M.get_trait_method (|
                                                                                "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                                                                  [ F ],
                                                                                [ F ],
                                                                                "curr_expr",
                                                                                []
                                                                              |),
                                                                              [
                                                                                is_next_same_ltype_cell;
                                                                                M.read (| meta |)
                                                                              ]
                                                                            |);
                                                                            Value.StructTuple
                                                                              "halo2_proofs::plonk::circuit::Expression::Constant"
                                                                              [
                                                                                M.call_closure (|
                                                                                  M.get_trait_method (|
                                                                                    "core::convert::From",
                                                                                    F,
                                                                                    [ Ty.path "u64"
                                                                                    ],
                                                                                    "from",
                                                                                    []
                                                                                  |),
                                                                                  [
                                                                                    M.read (|
                                                                                      M.use
                                                                                        (M.alloc (|
                                                                                          Value.Integer
                                                                                            1
                                                                                        |))
                                                                                    |)
                                                                                  ]
                                                                                |)
                                                                              ]
                                                                          ]
                                                                        |)
                                                                      ]
                                                                    |);
                                                                    M.call_closure (|
                                                                      M.get_trait_method (|
                                                                        "core::ops::arith::Mul",
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "halo2_proofs::plonk::circuit::Expression")
                                                                          [ F ],
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "halo2_proofs::plonk::circuit::Expression")
                                                                            [ F ]
                                                                        ],
                                                                        "mul",
                                                                        []
                                                                      |),
                                                                      [
                                                                        M.call_closure (|
                                                                          M.get_trait_method (|
                                                                            "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                                                              [ F ],
                                                                            [ F ],
                                                                            "curr_expr",
                                                                            []
                                                                          |),
                                                                          [
                                                                            is_next_same_offset_cell;
                                                                            M.read (| meta |)
                                                                          ]
                                                                        |);
                                                                        M.call_closure (|
                                                                          M.get_associated_function (|
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "delphinus_zkwasm::circuits::cell::AllocatedU32Cell")
                                                                              [ F ],
                                                                            "curr_expr",
                                                                            []
                                                                          |),
                                                                          [
                                                                            offset_diff_cell;
                                                                            M.read (| meta |)
                                                                          ]
                                                                        |)
                                                                      ]
                                                                    |);
                                                                    M.call_closure (|
                                                                      M.get_trait_method (|
                                                                        "core::ops::arith::Sub",
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "halo2_proofs::plonk::circuit::Expression")
                                                                          [ F ],
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "halo2_proofs::plonk::circuit::Expression")
                                                                            [ F ]
                                                                        ],
                                                                        "sub",
                                                                        []
                                                                      |),
                                                                      [
                                                                        M.call_closure (|
                                                                          M.get_trait_method (|
                                                                            "core::ops::arith::Mul",
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "halo2_proofs::plonk::circuit::Expression")
                                                                              [ F ],
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "halo2_proofs::plonk::circuit::Expression")
                                                                                [ F ]
                                                                            ],
                                                                            "mul",
                                                                            []
                                                                          |),
                                                                          [
                                                                            M.call_closure (|
                                                                              M.get_associated_function (|
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "delphinus_zkwasm::circuits::cell::AllocatedU32Cell")
                                                                                  [ F ],
                                                                                "curr_expr",
                                                                                []
                                                                              |),
                                                                              [
                                                                                offset_diff_cell;
                                                                                M.read (| meta |)
                                                                              ]
                                                                            |);
                                                                            M.call_closure (|
                                                                              M.get_trait_method (|
                                                                                "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "delphinus_zkwasm::circuits::cell::AllocatedUnlimitedCell")
                                                                                  [ F ],
                                                                                [ F ],
                                                                                "curr_expr",
                                                                                []
                                                                              |),
                                                                              [
                                                                                offset_diff_inv_cell;
                                                                                M.read (| meta |)
                                                                              ]
                                                                            |)
                                                                          ]
                                                                        |);
                                                                        M.call_closure (|
                                                                          M.get_trait_method (|
                                                                            "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "delphinus_zkwasm::circuits::cell::AllocatedUnlimitedCell")
                                                                              [ F ],
                                                                            [ F ],
                                                                            "curr_expr",
                                                                            []
                                                                          |),
                                                                          [
                                                                            offset_diff_inv_helper_cell;
                                                                            M.read (| meta |)
                                                                          ]
                                                                        |)
                                                                      ]
                                                                    |);
                                                                    M.call_closure (|
                                                                      M.get_trait_method (|
                                                                        "core::ops::arith::Mul",
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "halo2_proofs::plonk::circuit::Expression")
                                                                          [ F ],
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "halo2_proofs::plonk::circuit::Expression")
                                                                            [ F ]
                                                                        ],
                                                                        "mul",
                                                                        []
                                                                      |),
                                                                      [
                                                                        M.call_closure (|
                                                                          M.get_trait_method (|
                                                                            "core::ops::arith::Mul",
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "halo2_proofs::plonk::circuit::Expression")
                                                                              [ F ],
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "halo2_proofs::plonk::circuit::Expression")
                                                                                [ F ]
                                                                            ],
                                                                            "mul",
                                                                            []
                                                                          |),
                                                                          [
                                                                            M.call_closure (|
                                                                              M.get_trait_method (|
                                                                                "core::ops::arith::Sub",
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "halo2_proofs::plonk::circuit::Expression")
                                                                                  [ F ],
                                                                                [
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "halo2_proofs::plonk::circuit::Expression")
                                                                                    [ F ]
                                                                                ],
                                                                                "sub",
                                                                                []
                                                                              |),
                                                                              [
                                                                                M.call_closure (|
                                                                                  M.get_trait_method (|
                                                                                    "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                                                                      [ F ],
                                                                                    [ F ],
                                                                                    "curr_expr",
                                                                                    []
                                                                                  |),
                                                                                  [
                                                                                    is_next_same_offset_cell;
                                                                                    M.read (|
                                                                                      meta
                                                                                    |)
                                                                                  ]
                                                                                |);
                                                                                Value.StructTuple
                                                                                  "halo2_proofs::plonk::circuit::Expression::Constant"
                                                                                  [
                                                                                    M.call_closure (|
                                                                                      M.get_trait_method (|
                                                                                        "core::convert::From",
                                                                                        F,
                                                                                        [
                                                                                          Ty.path
                                                                                            "u64"
                                                                                        ],
                                                                                        "from",
                                                                                        []
                                                                                      |),
                                                                                      [
                                                                                        M.read (|
                                                                                          M.use
                                                                                            (M.alloc (|
                                                                                              Value.Integer
                                                                                                1
                                                                                            |))
                                                                                        |)
                                                                                      ]
                                                                                    |)
                                                                                  ]
                                                                              ]
                                                                            |);
                                                                            M.call_closure (|
                                                                              M.get_trait_method (|
                                                                                "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                                                                  [ F ],
                                                                                [ F ],
                                                                                "curr_expr",
                                                                                []
                                                                              |),
                                                                              [
                                                                                is_next_same_ltype_cell;
                                                                                M.read (| meta |)
                                                                              ]
                                                                            |)
                                                                          ]
                                                                        |);
                                                                        M.call_closure (|
                                                                          M.get_trait_method (|
                                                                            "core::ops::arith::Sub",
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "halo2_proofs::plonk::circuit::Expression")
                                                                              [ F ],
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "halo2_proofs::plonk::circuit::Expression")
                                                                                [ F ]
                                                                            ],
                                                                            "sub",
                                                                            []
                                                                          |),
                                                                          [
                                                                            M.call_closure (|
                                                                              M.get_trait_method (|
                                                                                "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "delphinus_zkwasm::circuits::cell::AllocatedUnlimitedCell")
                                                                                  [ F ],
                                                                                [ F ],
                                                                                "curr_expr",
                                                                                []
                                                                              |),
                                                                              [
                                                                                offset_diff_inv_helper_cell;
                                                                                M.read (| meta |)
                                                                              ]
                                                                            |);
                                                                            Value.StructTuple
                                                                              "halo2_proofs::plonk::circuit::Expression::Constant"
                                                                              [
                                                                                M.call_closure (|
                                                                                  M.get_trait_method (|
                                                                                    "core::convert::From",
                                                                                    F,
                                                                                    [ Ty.path "u64"
                                                                                    ],
                                                                                    "from",
                                                                                    []
                                                                                  |),
                                                                                  [
                                                                                    M.read (|
                                                                                      M.use
                                                                                        (M.alloc (|
                                                                                          Value.Integer
                                                                                            1
                                                                                        |))
                                                                                    |)
                                                                                  ]
                                                                                |)
                                                                              ]
                                                                          ]
                                                                        |)
                                                                      ]
                                                                    |)
                                                                  ]
                                                              |)
                                                            ]
                                                          |)
                                                        |))
                                                    ]
                                                  |)
                                                ]
                                              |);
                                              M.closure
                                                (fun γ =>
                                                  ltac:(M.monadic
                                                    match γ with
                                                    | [ α0 ] =>
                                                      M.match_operator (|
                                                        M.alloc (| α0 |),
                                                        [
                                                          fun γ =>
                                                            ltac:(M.monadic
                                                              (let x := M.copy (| γ |) in
                                                              M.call_closure (|
                                                                M.get_trait_method (|
                                                                  "core::ops::arith::Mul",
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "halo2_proofs::plonk::circuit::Expression")
                                                                    [ F ],
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "halo2_proofs::plonk::circuit::Expression")
                                                                      [ F ]
                                                                  ],
                                                                  "mul",
                                                                  []
                                                                |),
                                                                [
                                                                  M.read (| x |);
                                                                  M.call_closure (|
                                                                    M.get_associated_function (|
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "halo2_proofs::plonk::circuit::VirtualCells")
                                                                        [ F ],
                                                                      "query_fixed",
                                                                      []
                                                                    |),
                                                                    [
                                                                      M.read (| meta |);
                                                                      M.read (| entry_sel |);
                                                                      M.call_closure (|
                                                                        M.get_associated_function (|
                                                                          Ty.path
                                                                            "halo2_proofs::poly::Rotation",
                                                                          "cur",
                                                                          []
                                                                        |),
                                                                        []
                                                                      |)
                                                                    ]
                                                                  |)
                                                                ]
                                                              |)))
                                                        ]
                                                      |)
                                                    | _ => M.impossible (||)
                                                    end))
                                            ]
                                          |)
                                        ]
                                      |)))
                                ]
                              |)
                            | _ => M.impossible (||)
                            end))
                    ]
                  |)
                |) in
              let _ :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply (Ty.path "halo2_proofs::plonk::circuit::ConstraintSystem") [ F ],
                      "create_gate",
                      [
                        Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ];
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          [
                            Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ];
                            Ty.path "alloc::alloc::Global"
                          ];
                        Ty.function
                          [
                            Ty.tuple
                              [
                                Ty.apply
                                  (Ty.path "&mut")
                                  [
                                    Ty.apply
                                      (Ty.path "halo2_proofs::plonk::circuit::VirtualCells")
                                      [ F ]
                                  ]
                              ]
                          ]
                          (Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            [
                              Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ];
                              Ty.path "alloc::alloc::Global"
                            ])
                      ]
                    |),
                    [
                      M.read (| meta |);
                      M.read (| Value.String "mc5. offset sort" |);
                      M.closure
                        (fun γ =>
                          ltac:(M.monadic
                            match γ with
                            | [ α0 ] =>
                              M.match_operator (|
                                M.alloc (| α0 |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let meta := M.copy (| γ |) in
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "core::iter::traits::iterator::Iterator",
                                          Ty.apply
                                            (Ty.path "core::iter::adapters::map::Map")
                                            [
                                              Ty.apply
                                                (Ty.path "alloc::vec::into_iter::IntoIter")
                                                [
                                                  Ty.apply
                                                    (Ty.path
                                                      "halo2_proofs::plonk::circuit::Expression")
                                                    [ F ];
                                                  Ty.path "alloc::alloc::Global"
                                                ];
                                              Ty.function
                                                [
                                                  Ty.tuple
                                                    [
                                                      Ty.apply
                                                        (Ty.path
                                                          "halo2_proofs::plonk::circuit::Expression")
                                                        [ F ]
                                                    ]
                                                ]
                                                (Ty.apply
                                                  (Ty.path
                                                    "halo2_proofs::plonk::circuit::Expression")
                                                  [ F ])
                                            ],
                                          [],
                                          "collect",
                                          [
                                            Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              [
                                                Ty.apply
                                                  (Ty.path
                                                    "halo2_proofs::plonk::circuit::Expression")
                                                  [ F ];
                                                Ty.path "alloc::alloc::Global"
                                              ]
                                          ]
                                        |),
                                        [
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "core::iter::traits::iterator::Iterator",
                                              Ty.apply
                                                (Ty.path "alloc::vec::into_iter::IntoIter")
                                                [
                                                  Ty.apply
                                                    (Ty.path
                                                      "halo2_proofs::plonk::circuit::Expression")
                                                    [ F ];
                                                  Ty.path "alloc::alloc::Global"
                                                ],
                                              [],
                                              "map",
                                              [
                                                Ty.apply
                                                  (Ty.path
                                                    "halo2_proofs::plonk::circuit::Expression")
                                                  [ F ];
                                                Ty.function
                                                  [
                                                    Ty.tuple
                                                      [
                                                        Ty.apply
                                                          (Ty.path
                                                            "halo2_proofs::plonk::circuit::Expression")
                                                          [ F ]
                                                      ]
                                                  ]
                                                  (Ty.apply
                                                    (Ty.path
                                                      "halo2_proofs::plonk::circuit::Expression")
                                                    [ F ])
                                              ]
                                            |),
                                            [
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "core::iter::traits::collect::IntoIterator",
                                                  Ty.apply
                                                    (Ty.path "alloc::vec::Vec")
                                                    [
                                                      Ty.apply
                                                        (Ty.path
                                                          "halo2_proofs::plonk::circuit::Expression")
                                                        [ F ];
                                                      Ty.path "alloc::alloc::Global"
                                                    ],
                                                  [],
                                                  "into_iter",
                                                  []
                                                |),
                                                [
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.apply
                                                        (Ty.path "slice")
                                                        [
                                                          Ty.apply
                                                            (Ty.path
                                                              "halo2_proofs::plonk::circuit::Expression")
                                                            [ F ]
                                                        ],
                                                      "into_vec",
                                                      [ Ty.path "alloc::alloc::Global" ]
                                                    |),
                                                    [
                                                      (* Unsize *)
                                                      M.pointer_coercion
                                                        (M.read (|
                                                          M.call_closure (|
                                                            M.get_associated_function (|
                                                              Ty.apply
                                                                (Ty.path "alloc::boxed::Box")
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path "array")
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "halo2_proofs::plonk::circuit::Expression")
                                                                        [ F ]
                                                                    ];
                                                                  Ty.path "alloc::alloc::Global"
                                                                ],
                                                              "new",
                                                              []
                                                            |),
                                                            [
                                                              M.alloc (|
                                                                Value.Array
                                                                  [
                                                                    M.call_closure (|
                                                                      M.get_trait_method (|
                                                                        "core::ops::arith::Mul",
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "halo2_proofs::plonk::circuit::Expression")
                                                                          [ F ],
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "halo2_proofs::plonk::circuit::Expression")
                                                                            [ F ]
                                                                        ],
                                                                        "mul",
                                                                        []
                                                                      |),
                                                                      [
                                                                        M.call_closure (|
                                                                          M.get_trait_method (|
                                                                            "core::ops::arith::Sub",
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "halo2_proofs::plonk::circuit::Expression")
                                                                              [ F ],
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "halo2_proofs::plonk::circuit::Expression")
                                                                                [ F ]
                                                                            ],
                                                                            "sub",
                                                                            []
                                                                          |),
                                                                          [
                                                                            M.call_closure (|
                                                                              M.get_trait_method (|
                                                                                "core::ops::arith::Add",
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "halo2_proofs::plonk::circuit::Expression")
                                                                                  [ F ],
                                                                                [
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "halo2_proofs::plonk::circuit::Expression")
                                                                                    [ F ]
                                                                                ],
                                                                                "add",
                                                                                []
                                                                              |),
                                                                              [
                                                                                M.call_closure (|
                                                                                  M.get_associated_function (|
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "delphinus_zkwasm::circuits::cell::AllocatedU32Cell")
                                                                                      [ F ],
                                                                                    "curr_expr",
                                                                                    []
                                                                                  |),
                                                                                  [
                                                                                    offset_cell;
                                                                                    M.read (|
                                                                                      meta
                                                                                    |)
                                                                                  ]
                                                                                |);
                                                                                M.call_closure (|
                                                                                  M.get_associated_function (|
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "delphinus_zkwasm::circuits::cell::AllocatedU32Cell")
                                                                                      [ F ],
                                                                                    "curr_expr",
                                                                                    []
                                                                                  |),
                                                                                  [
                                                                                    offset_diff_cell;
                                                                                    M.read (|
                                                                                      meta
                                                                                    |)
                                                                                  ]
                                                                                |)
                                                                              ]
                                                                            |);
                                                                            M.call_closure (|
                                                                              M.get_trait_method (|
                                                                                "delphinus_zkwasm::circuits::mtable::allocator::MemoryTableCellExpression",
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "delphinus_zkwasm::circuits::cell::AllocatedU32Cell")
                                                                                  [ F ],
                                                                                [ F ],
                                                                                "next_expr",
                                                                                []
                                                                              |),
                                                                              [
                                                                                offset_cell;
                                                                                M.read (| meta |)
                                                                              ]
                                                                            |)
                                                                          ]
                                                                        |);
                                                                        M.call_closure (|
                                                                          M.get_trait_method (|
                                                                            "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                                                              [ F ],
                                                                            [ F ],
                                                                            "curr_expr",
                                                                            []
                                                                          |),
                                                                          [
                                                                            is_next_same_ltype_cell;
                                                                            M.read (| meta |)
                                                                          ]
                                                                        |)
                                                                      ]
                                                                    |)
                                                                  ]
                                                              |)
                                                            ]
                                                          |)
                                                        |))
                                                    ]
                                                  |)
                                                ]
                                              |);
                                              M.closure
                                                (fun γ =>
                                                  ltac:(M.monadic
                                                    match γ with
                                                    | [ α0 ] =>
                                                      M.match_operator (|
                                                        M.alloc (| α0 |),
                                                        [
                                                          fun γ =>
                                                            ltac:(M.monadic
                                                              (let x := M.copy (| γ |) in
                                                              M.call_closure (|
                                                                M.get_trait_method (|
                                                                  "core::ops::arith::Mul",
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "halo2_proofs::plonk::circuit::Expression")
                                                                    [ F ],
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "halo2_proofs::plonk::circuit::Expression")
                                                                      [ F ]
                                                                  ],
                                                                  "mul",
                                                                  []
                                                                |),
                                                                [
                                                                  M.read (| x |);
                                                                  M.call_closure (|
                                                                    M.get_associated_function (|
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "halo2_proofs::plonk::circuit::VirtualCells")
                                                                        [ F ],
                                                                      "query_fixed",
                                                                      []
                                                                    |),
                                                                    [
                                                                      M.read (| meta |);
                                                                      M.read (| entry_sel |);
                                                                      M.call_closure (|
                                                                        M.get_associated_function (|
                                                                          Ty.path
                                                                            "halo2_proofs::poly::Rotation",
                                                                          "cur",
                                                                          []
                                                                        |),
                                                                        []
                                                                      |)
                                                                    ]
                                                                  |)
                                                                ]
                                                              |)))
                                                        ]
                                                      |)
                                                    | _ => M.impossible (||)
                                                    end))
                                            ]
                                          |)
                                        ]
                                      |)))
                                ]
                              |)
                            | _ => M.impossible (||)
                            end))
                    ]
                  |)
                |) in
              let _ :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply (Ty.path "halo2_proofs::plonk::circuit::ConstraintSystem") [ F ],
                      "create_gate",
                      [
                        Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ];
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          [
                            Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ];
                            Ty.path "alloc::alloc::Global"
                          ];
                        Ty.function
                          [
                            Ty.tuple
                              [
                                Ty.apply
                                  (Ty.path "&mut")
                                  [
                                    Ty.apply
                                      (Ty.path "halo2_proofs::plonk::circuit::VirtualCells")
                                      [ F ]
                                  ]
                              ]
                          ]
                          (Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            [
                              Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ];
                              Ty.path "alloc::alloc::Global"
                            ])
                      ]
                    |),
                    [
                      M.read (| meta |);
                      M.read (| Value.String "mc6. eid sort" |);
                      M.closure
                        (fun γ =>
                          ltac:(M.monadic
                            match γ with
                            | [ α0 ] =>
                              M.match_operator (|
                                M.alloc (| α0 |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let meta := M.copy (| γ |) in
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "core::iter::traits::iterator::Iterator",
                                          Ty.apply
                                            (Ty.path "core::iter::adapters::map::Map")
                                            [
                                              Ty.apply
                                                (Ty.path "alloc::vec::into_iter::IntoIter")
                                                [
                                                  Ty.apply
                                                    (Ty.path
                                                      "halo2_proofs::plonk::circuit::Expression")
                                                    [ F ];
                                                  Ty.path "alloc::alloc::Global"
                                                ];
                                              Ty.function
                                                [
                                                  Ty.tuple
                                                    [
                                                      Ty.apply
                                                        (Ty.path
                                                          "halo2_proofs::plonk::circuit::Expression")
                                                        [ F ]
                                                    ]
                                                ]
                                                (Ty.apply
                                                  (Ty.path
                                                    "halo2_proofs::plonk::circuit::Expression")
                                                  [ F ])
                                            ],
                                          [],
                                          "collect",
                                          [
                                            Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              [
                                                Ty.apply
                                                  (Ty.path
                                                    "halo2_proofs::plonk::circuit::Expression")
                                                  [ F ];
                                                Ty.path "alloc::alloc::Global"
                                              ]
                                          ]
                                        |),
                                        [
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "core::iter::traits::iterator::Iterator",
                                              Ty.apply
                                                (Ty.path "alloc::vec::into_iter::IntoIter")
                                                [
                                                  Ty.apply
                                                    (Ty.path
                                                      "halo2_proofs::plonk::circuit::Expression")
                                                    [ F ];
                                                  Ty.path "alloc::alloc::Global"
                                                ],
                                              [],
                                              "map",
                                              [
                                                Ty.apply
                                                  (Ty.path
                                                    "halo2_proofs::plonk::circuit::Expression")
                                                  [ F ];
                                                Ty.function
                                                  [
                                                    Ty.tuple
                                                      [
                                                        Ty.apply
                                                          (Ty.path
                                                            "halo2_proofs::plonk::circuit::Expression")
                                                          [ F ]
                                                      ]
                                                  ]
                                                  (Ty.apply
                                                    (Ty.path
                                                      "halo2_proofs::plonk::circuit::Expression")
                                                    [ F ])
                                              ]
                                            |),
                                            [
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "core::iter::traits::collect::IntoIterator",
                                                  Ty.apply
                                                    (Ty.path "alloc::vec::Vec")
                                                    [
                                                      Ty.apply
                                                        (Ty.path
                                                          "halo2_proofs::plonk::circuit::Expression")
                                                        [ F ];
                                                      Ty.path "alloc::alloc::Global"
                                                    ],
                                                  [],
                                                  "into_iter",
                                                  []
                                                |),
                                                [
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.apply
                                                        (Ty.path "slice")
                                                        [
                                                          Ty.apply
                                                            (Ty.path
                                                              "halo2_proofs::plonk::circuit::Expression")
                                                            [ F ]
                                                        ],
                                                      "into_vec",
                                                      [ Ty.path "alloc::alloc::Global" ]
                                                    |),
                                                    [
                                                      (* Unsize *)
                                                      M.pointer_coercion
                                                        (M.read (|
                                                          M.call_closure (|
                                                            M.get_associated_function (|
                                                              Ty.apply
                                                                (Ty.path "alloc::boxed::Box")
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path "array")
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "halo2_proofs::plonk::circuit::Expression")
                                                                        [ F ]
                                                                    ];
                                                                  Ty.path "alloc::alloc::Global"
                                                                ],
                                                              "new",
                                                              []
                                                            |),
                                                            [
                                                              M.alloc (|
                                                                Value.Array
                                                                  [
                                                                    M.call_closure (|
                                                                      M.get_trait_method (|
                                                                        "core::ops::arith::Sub",
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "halo2_proofs::plonk::circuit::Expression")
                                                                          [ F ],
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "halo2_proofs::plonk::circuit::Expression")
                                                                            [ F ]
                                                                        ],
                                                                        "sub",
                                                                        []
                                                                      |),
                                                                      [
                                                                        M.call_closure (|
                                                                          M.get_trait_method (|
                                                                            "core::ops::arith::Add",
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "halo2_proofs::plonk::circuit::Expression")
                                                                              [ F ],
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "halo2_proofs::plonk::circuit::Expression")
                                                                                [ F ]
                                                                            ],
                                                                            "add",
                                                                            []
                                                                          |),
                                                                          [
                                                                            M.call_closure (|
                                                                              M.get_trait_method (|
                                                                                "core::ops::arith::Add",
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "halo2_proofs::plonk::circuit::Expression")
                                                                                  [ F ],
                                                                                [
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "halo2_proofs::plonk::circuit::Expression")
                                                                                    [ F ]
                                                                                ],
                                                                                "add",
                                                                                []
                                                                              |),
                                                                              [
                                                                                M.call_closure (|
                                                                                  M.get_trait_method (|
                                                                                    "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "delphinus_zkwasm::circuits::cell::AllocatedCommonRangeCell")
                                                                                      [ F ],
                                                                                    [ F ],
                                                                                    "curr_expr",
                                                                                    []
                                                                                  |),
                                                                                  [
                                                                                    start_eid_cell;
                                                                                    M.read (|
                                                                                      meta
                                                                                    |)
                                                                                  ]
                                                                                |);
                                                                                M.call_closure (|
                                                                                  M.get_trait_method (|
                                                                                    "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "delphinus_zkwasm::circuits::cell::AllocatedCommonRangeCell")
                                                                                      [ F ],
                                                                                    [ F ],
                                                                                    "curr_expr",
                                                                                    []
                                                                                  |),
                                                                                  [
                                                                                    eid_diff_cell;
                                                                                    M.read (|
                                                                                      meta
                                                                                    |)
                                                                                  ]
                                                                                |)
                                                                              ]
                                                                            |);
                                                                            Value.StructTuple
                                                                              "halo2_proofs::plonk::circuit::Expression::Constant"
                                                                              [
                                                                                M.call_closure (|
                                                                                  M.get_trait_method (|
                                                                                    "core::convert::From",
                                                                                    F,
                                                                                    [ Ty.path "u64"
                                                                                    ],
                                                                                    "from",
                                                                                    []
                                                                                  |),
                                                                                  [
                                                                                    M.read (|
                                                                                      M.use
                                                                                        (M.alloc (|
                                                                                          Value.Integer
                                                                                            1
                                                                                        |))
                                                                                    |)
                                                                                  ]
                                                                                |)
                                                                              ]
                                                                          ]
                                                                        |);
                                                                        M.call_closure (|
                                                                          M.get_trait_method (|
                                                                            "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "delphinus_zkwasm::circuits::cell::AllocatedCommonRangeCell")
                                                                              [ F ],
                                                                            [ F ],
                                                                            "curr_expr",
                                                                            []
                                                                          |),
                                                                          [
                                                                            end_eid_cell;
                                                                            M.read (| meta |)
                                                                          ]
                                                                        |)
                                                                      ]
                                                                    |);
                                                                    M.call_closure (|
                                                                      M.get_trait_method (|
                                                                        "core::ops::arith::Mul",
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "halo2_proofs::plonk::circuit::Expression")
                                                                          [ F ],
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "halo2_proofs::plonk::circuit::Expression")
                                                                            [ F ]
                                                                        ],
                                                                        "mul",
                                                                        []
                                                                      |),
                                                                      [
                                                                        M.call_closure (|
                                                                          M.get_trait_method (|
                                                                            "core::ops::arith::Sub",
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "halo2_proofs::plonk::circuit::Expression")
                                                                              [ F ],
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "halo2_proofs::plonk::circuit::Expression")
                                                                                [ F ]
                                                                            ],
                                                                            "sub",
                                                                            []
                                                                          |),
                                                                          [
                                                                            M.call_closure (|
                                                                              M.get_trait_method (|
                                                                                "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "delphinus_zkwasm::circuits::cell::AllocatedCommonRangeCell")
                                                                                  [ F ],
                                                                                [ F ],
                                                                                "curr_expr",
                                                                                []
                                                                              |),
                                                                              [
                                                                                end_eid_cell;
                                                                                M.read (| meta |)
                                                                              ]
                                                                            |);
                                                                            M.call_closure (|
                                                                              M.get_trait_method (|
                                                                                "delphinus_zkwasm::circuits::mtable::allocator::MemoryTableCellExpression",
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "delphinus_zkwasm::circuits::cell::AllocatedCommonRangeCell")
                                                                                  [ F ],
                                                                                [ F ],
                                                                                "next_expr",
                                                                                []
                                                                              |),
                                                                              [
                                                                                start_eid_cell;
                                                                                M.read (| meta |)
                                                                              ]
                                                                            |)
                                                                          ]
                                                                        |);
                                                                        M.call_closure (|
                                                                          M.get_trait_method (|
                                                                            "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                                                              [ F ],
                                                                            [ F ],
                                                                            "curr_expr",
                                                                            []
                                                                          |),
                                                                          [
                                                                            is_next_same_offset_cell;
                                                                            M.read (| meta |)
                                                                          ]
                                                                        |)
                                                                      ]
                                                                    |)
                                                                  ]
                                                              |)
                                                            ]
                                                          |)
                                                        |))
                                                    ]
                                                  |)
                                                ]
                                              |);
                                              M.closure
                                                (fun γ =>
                                                  ltac:(M.monadic
                                                    match γ with
                                                    | [ α0 ] =>
                                                      M.match_operator (|
                                                        M.alloc (| α0 |),
                                                        [
                                                          fun γ =>
                                                            ltac:(M.monadic
                                                              (let x := M.copy (| γ |) in
                                                              M.call_closure (|
                                                                M.get_trait_method (|
                                                                  "core::ops::arith::Mul",
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "halo2_proofs::plonk::circuit::Expression")
                                                                    [ F ],
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "halo2_proofs::plonk::circuit::Expression")
                                                                      [ F ]
                                                                  ],
                                                                  "mul",
                                                                  []
                                                                |),
                                                                [
                                                                  M.call_closure (|
                                                                    M.get_trait_method (|
                                                                      "core::ops::arith::Mul",
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "halo2_proofs::plonk::circuit::Expression")
                                                                        [ F ],
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "halo2_proofs::plonk::circuit::Expression")
                                                                          [ F ]
                                                                      ],
                                                                      "mul",
                                                                      []
                                                                    |),
                                                                    [
                                                                      M.read (| x |);
                                                                      M.call_closure (|
                                                                        M.get_trait_method (|
                                                                          "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                                                            [ F ],
                                                                          [ F ],
                                                                          "curr_expr",
                                                                          []
                                                                        |),
                                                                        [
                                                                          enabled_cell;
                                                                          M.read (| meta |)
                                                                        ]
                                                                      |)
                                                                    ]
                                                                  |);
                                                                  M.call_closure (|
                                                                    M.get_associated_function (|
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "halo2_proofs::plonk::circuit::VirtualCells")
                                                                        [ F ],
                                                                      "query_fixed",
                                                                      []
                                                                    |),
                                                                    [
                                                                      M.read (| meta |);
                                                                      M.read (| entry_sel |);
                                                                      M.call_closure (|
                                                                        M.get_associated_function (|
                                                                          Ty.path
                                                                            "halo2_proofs::poly::Rotation",
                                                                          "cur",
                                                                          []
                                                                        |),
                                                                        []
                                                                      |)
                                                                    ]
                                                                  |)
                                                                ]
                                                              |)))
                                                        ]
                                                      |)
                                                    | _ => M.impossible (||)
                                                    end))
                                            ]
                                          |)
                                        ]
                                      |)))
                                ]
                              |)
                            | _ => M.impossible (||)
                            end))
                    ]
                  |)
                |) in
              let _ :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply (Ty.path "halo2_proofs::plonk::circuit::ConstraintSystem") [ F ],
                      "create_gate",
                      [
                        Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ];
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          [
                            Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ];
                            Ty.path "alloc::alloc::Global"
                          ];
                        Ty.function
                          [
                            Ty.tuple
                              [
                                Ty.apply
                                  (Ty.path "&mut")
                                  [
                                    Ty.apply
                                      (Ty.path "halo2_proofs::plonk::circuit::VirtualCells")
                                      [ F ]
                                  ]
                              ]
                          ]
                          (Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            [
                              Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ];
                              Ty.path "alloc::alloc::Global"
                            ])
                      ]
                    |),
                    [
                      M.read (| meta |);
                      M.read (|
                        Value.String "mc7a. global must has init (because of mutability check)."
                      |);
                      M.closure
                        (fun γ =>
                          ltac:(M.monadic
                            match γ with
                            | [ α0 ] =>
                              M.match_operator (|
                                M.alloc (| α0 |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let meta := M.copy (| γ |) in
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "core::iter::traits::iterator::Iterator",
                                          Ty.apply
                                            (Ty.path "core::iter::adapters::map::Map")
                                            [
                                              Ty.apply
                                                (Ty.path "alloc::vec::into_iter::IntoIter")
                                                [
                                                  Ty.apply
                                                    (Ty.path
                                                      "halo2_proofs::plonk::circuit::Expression")
                                                    [ F ];
                                                  Ty.path "alloc::alloc::Global"
                                                ];
                                              Ty.function
                                                [
                                                  Ty.tuple
                                                    [
                                                      Ty.apply
                                                        (Ty.path
                                                          "halo2_proofs::plonk::circuit::Expression")
                                                        [ F ]
                                                    ]
                                                ]
                                                (Ty.apply
                                                  (Ty.path
                                                    "halo2_proofs::plonk::circuit::Expression")
                                                  [ F ])
                                            ],
                                          [],
                                          "collect",
                                          [
                                            Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              [
                                                Ty.apply
                                                  (Ty.path
                                                    "halo2_proofs::plonk::circuit::Expression")
                                                  [ F ];
                                                Ty.path "alloc::alloc::Global"
                                              ]
                                          ]
                                        |),
                                        [
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "core::iter::traits::iterator::Iterator",
                                              Ty.apply
                                                (Ty.path "alloc::vec::into_iter::IntoIter")
                                                [
                                                  Ty.apply
                                                    (Ty.path
                                                      "halo2_proofs::plonk::circuit::Expression")
                                                    [ F ];
                                                  Ty.path "alloc::alloc::Global"
                                                ],
                                              [],
                                              "map",
                                              [
                                                Ty.apply
                                                  (Ty.path
                                                    "halo2_proofs::plonk::circuit::Expression")
                                                  [ F ];
                                                Ty.function
                                                  [
                                                    Ty.tuple
                                                      [
                                                        Ty.apply
                                                          (Ty.path
                                                            "halo2_proofs::plonk::circuit::Expression")
                                                          [ F ]
                                                      ]
                                                  ]
                                                  (Ty.apply
                                                    (Ty.path
                                                      "halo2_proofs::plonk::circuit::Expression")
                                                    [ F ])
                                              ]
                                            |),
                                            [
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "core::iter::traits::collect::IntoIterator",
                                                  Ty.apply
                                                    (Ty.path "alloc::vec::Vec")
                                                    [
                                                      Ty.apply
                                                        (Ty.path
                                                          "halo2_proofs::plonk::circuit::Expression")
                                                        [ F ];
                                                      Ty.path "alloc::alloc::Global"
                                                    ],
                                                  [],
                                                  "into_iter",
                                                  []
                                                |),
                                                [
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.apply
                                                        (Ty.path "slice")
                                                        [
                                                          Ty.apply
                                                            (Ty.path
                                                              "halo2_proofs::plonk::circuit::Expression")
                                                            [ F ]
                                                        ],
                                                      "into_vec",
                                                      [ Ty.path "alloc::alloc::Global" ]
                                                    |),
                                                    [
                                                      (* Unsize *)
                                                      M.pointer_coercion
                                                        (M.read (|
                                                          M.call_closure (|
                                                            M.get_associated_function (|
                                                              Ty.apply
                                                                (Ty.path "alloc::boxed::Box")
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path "array")
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "halo2_proofs::plonk::circuit::Expression")
                                                                        [ F ]
                                                                    ];
                                                                  Ty.path "alloc::alloc::Global"
                                                                ],
                                                              "new",
                                                              []
                                                            |),
                                                            [
                                                              M.alloc (|
                                                                Value.Array
                                                                  [
                                                                    M.call_closure (|
                                                                      M.get_trait_method (|
                                                                        "core::ops::arith::Mul",
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "halo2_proofs::plonk::circuit::Expression")
                                                                          [ F ],
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "halo2_proofs::plonk::circuit::Expression")
                                                                            [ F ]
                                                                        ],
                                                                        "mul",
                                                                        []
                                                                      |),
                                                                      [
                                                                        M.call_closure (|
                                                                          M.get_trait_method (|
                                                                            "core::ops::arith::Mul",
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "halo2_proofs::plonk::circuit::Expression")
                                                                              [ F ],
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "halo2_proofs::plonk::circuit::Expression")
                                                                                [ F ]
                                                                            ],
                                                                            "mul",
                                                                            []
                                                                          |),
                                                                          [
                                                                            M.call_closure (|
                                                                              M.get_trait_method (|
                                                                                "core::ops::arith::Sub",
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "halo2_proofs::plonk::circuit::Expression")
                                                                                  [ F ],
                                                                                [
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "halo2_proofs::plonk::circuit::Expression")
                                                                                    [ F ]
                                                                                ],
                                                                                "sub",
                                                                                []
                                                                              |),
                                                                              [
                                                                                M.call_closure (|
                                                                                  M.get_trait_method (|
                                                                                    "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                                                                      [ F ],
                                                                                    [ F ],
                                                                                    "expr",
                                                                                    []
                                                                                  |),
                                                                                  [
                                                                                    is_next_same_offset_cell;
                                                                                    M.read (|
                                                                                      meta
                                                                                    |)
                                                                                  ]
                                                                                |);
                                                                                Value.StructTuple
                                                                                  "halo2_proofs::plonk::circuit::Expression::Constant"
                                                                                  [
                                                                                    M.call_closure (|
                                                                                      M.get_trait_method (|
                                                                                        "core::convert::From",
                                                                                        F,
                                                                                        [
                                                                                          Ty.path
                                                                                            "u64"
                                                                                        ],
                                                                                        "from",
                                                                                        []
                                                                                      |),
                                                                                      [
                                                                                        M.read (|
                                                                                          M.use
                                                                                            (M.alloc (|
                                                                                              Value.Integer
                                                                                                1
                                                                                            |))
                                                                                        |)
                                                                                      ]
                                                                                    |)
                                                                                  ]
                                                                              ]
                                                                            |);
                                                                            M.call_closure (|
                                                                              M.get_trait_method (|
                                                                                "delphinus_zkwasm::circuits::mtable::allocator::MemoryTableCellExpression",
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                                                                  [ F ],
                                                                                [ F ],
                                                                                "next_expr",
                                                                                []
                                                                              |),
                                                                              [
                                                                                is_global_cell;
                                                                                M.read (| meta |)
                                                                              ]
                                                                            |)
                                                                          ]
                                                                        |);
                                                                        M.call_closure (|
                                                                          M.get_trait_method (|
                                                                            "core::ops::arith::Sub",
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "halo2_proofs::plonk::circuit::Expression")
                                                                              [ F ],
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "halo2_proofs::plonk::circuit::Expression")
                                                                                [ F ]
                                                                            ],
                                                                            "sub",
                                                                            []
                                                                          |),
                                                                          [
                                                                            M.call_closure (|
                                                                              M.get_trait_method (|
                                                                                "delphinus_zkwasm::circuits::mtable::allocator::MemoryTableCellExpression",
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                                                                  [ F ],
                                                                                [ F ],
                                                                                "next_expr",
                                                                                []
                                                                              |),
                                                                              [
                                                                                is_init_cell;
                                                                                M.read (| meta |)
                                                                              ]
                                                                            |);
                                                                            Value.StructTuple
                                                                              "halo2_proofs::plonk::circuit::Expression::Constant"
                                                                              [
                                                                                M.call_closure (|
                                                                                  M.get_trait_method (|
                                                                                    "core::convert::From",
                                                                                    F,
                                                                                    [ Ty.path "u64"
                                                                                    ],
                                                                                    "from",
                                                                                    []
                                                                                  |),
                                                                                  [
                                                                                    M.read (|
                                                                                      M.use
                                                                                        (M.alloc (|
                                                                                          Value.Integer
                                                                                            1
                                                                                        |))
                                                                                    |)
                                                                                  ]
                                                                                |)
                                                                              ]
                                                                          ]
                                                                        |)
                                                                      ]
                                                                    |)
                                                                  ]
                                                              |)
                                                            ]
                                                          |)
                                                        |))
                                                    ]
                                                  |)
                                                ]
                                              |);
                                              M.closure
                                                (fun γ =>
                                                  ltac:(M.monadic
                                                    match γ with
                                                    | [ α0 ] =>
                                                      M.match_operator (|
                                                        M.alloc (| α0 |),
                                                        [
                                                          fun γ =>
                                                            ltac:(M.monadic
                                                              (let x := M.copy (| γ |) in
                                                              M.call_closure (|
                                                                M.get_trait_method (|
                                                                  "core::ops::arith::Mul",
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "halo2_proofs::plonk::circuit::Expression")
                                                                    [ F ],
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "halo2_proofs::plonk::circuit::Expression")
                                                                      [ F ]
                                                                  ],
                                                                  "mul",
                                                                  []
                                                                |),
                                                                [
                                                                  M.read (| x |);
                                                                  M.call_closure (|
                                                                    M.get_associated_function (|
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "halo2_proofs::plonk::circuit::VirtualCells")
                                                                        [ F ],
                                                                      "query_fixed",
                                                                      []
                                                                    |),
                                                                    [
                                                                      M.read (| meta |);
                                                                      M.read (| entry_sel |);
                                                                      M.call_closure (|
                                                                        M.get_associated_function (|
                                                                          Ty.path
                                                                            "halo2_proofs::poly::Rotation",
                                                                          "cur",
                                                                          []
                                                                        |),
                                                                        []
                                                                      |)
                                                                    ]
                                                                  |)
                                                                ]
                                                              |)))
                                                        ]
                                                      |)
                                                    | _ => M.impossible (||)
                                                    end))
                                            ]
                                          |)
                                        ]
                                      |)))
                                ]
                              |)
                            | _ => M.impossible (||)
                            end))
                    ]
                  |)
                |) in
              let _ :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply (Ty.path "halo2_proofs::plonk::circuit::ConstraintSystem") [ F ],
                      "create_gate",
                      [
                        Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ];
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          [
                            Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ];
                            Ty.path "alloc::alloc::Global"
                          ];
                        Ty.function
                          [
                            Ty.tuple
                              [
                                Ty.apply
                                  (Ty.path "&mut")
                                  [
                                    Ty.apply
                                      (Ty.path "halo2_proofs::plonk::circuit::VirtualCells")
                                      [ F ]
                                  ]
                              ]
                          ]
                          (Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            [
                              Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ];
                              Ty.path "alloc::alloc::Global"
                            ])
                      ]
                    |),
                    [
                      M.read (| meta |);
                      M.read (| Value.String "mc7b. init encode." |);
                      M.closure
                        (fun γ =>
                          ltac:(M.monadic
                            match γ with
                            | [ α0 ] =>
                              M.match_operator (|
                                M.alloc (| α0 |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let meta := M.copy (| γ |) in
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "core::iter::traits::iterator::Iterator",
                                          Ty.apply
                                            (Ty.path "core::iter::adapters::map::Map")
                                            [
                                              Ty.apply
                                                (Ty.path "alloc::vec::into_iter::IntoIter")
                                                [
                                                  Ty.apply
                                                    (Ty.path
                                                      "halo2_proofs::plonk::circuit::Expression")
                                                    [ F ];
                                                  Ty.path "alloc::alloc::Global"
                                                ];
                                              Ty.function
                                                [
                                                  Ty.tuple
                                                    [
                                                      Ty.apply
                                                        (Ty.path
                                                          "halo2_proofs::plonk::circuit::Expression")
                                                        [ F ]
                                                    ]
                                                ]
                                                (Ty.apply
                                                  (Ty.path
                                                    "halo2_proofs::plonk::circuit::Expression")
                                                  [ F ])
                                            ],
                                          [],
                                          "collect",
                                          [
                                            Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              [
                                                Ty.apply
                                                  (Ty.path
                                                    "halo2_proofs::plonk::circuit::Expression")
                                                  [ F ];
                                                Ty.path "alloc::alloc::Global"
                                              ]
                                          ]
                                        |),
                                        [
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "core::iter::traits::iterator::Iterator",
                                              Ty.apply
                                                (Ty.path "alloc::vec::into_iter::IntoIter")
                                                [
                                                  Ty.apply
                                                    (Ty.path
                                                      "halo2_proofs::plonk::circuit::Expression")
                                                    [ F ];
                                                  Ty.path "alloc::alloc::Global"
                                                ],
                                              [],
                                              "map",
                                              [
                                                Ty.apply
                                                  (Ty.path
                                                    "halo2_proofs::plonk::circuit::Expression")
                                                  [ F ];
                                                Ty.function
                                                  [
                                                    Ty.tuple
                                                      [
                                                        Ty.apply
                                                          (Ty.path
                                                            "halo2_proofs::plonk::circuit::Expression")
                                                          [ F ]
                                                      ]
                                                  ]
                                                  (Ty.apply
                                                    (Ty.path
                                                      "halo2_proofs::plonk::circuit::Expression")
                                                    [ F ])
                                              ]
                                            |),
                                            [
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "core::iter::traits::collect::IntoIterator",
                                                  Ty.apply
                                                    (Ty.path "alloc::vec::Vec")
                                                    [
                                                      Ty.apply
                                                        (Ty.path
                                                          "halo2_proofs::plonk::circuit::Expression")
                                                        [ F ];
                                                      Ty.path "alloc::alloc::Global"
                                                    ],
                                                  [],
                                                  "into_iter",
                                                  []
                                                |),
                                                [
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.apply
                                                        (Ty.path "slice")
                                                        [
                                                          Ty.apply
                                                            (Ty.path
                                                              "halo2_proofs::plonk::circuit::Expression")
                                                            [ F ]
                                                        ],
                                                      "into_vec",
                                                      [ Ty.path "alloc::alloc::Global" ]
                                                    |),
                                                    [
                                                      (* Unsize *)
                                                      M.pointer_coercion
                                                        (M.read (|
                                                          M.call_closure (|
                                                            M.get_associated_function (|
                                                              Ty.apply
                                                                (Ty.path "alloc::boxed::Box")
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path "array")
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "halo2_proofs::plonk::circuit::Expression")
                                                                        [ F ]
                                                                    ];
                                                                  Ty.path "alloc::alloc::Global"
                                                                ],
                                                              "new",
                                                              []
                                                            |),
                                                            [
                                                              M.alloc (|
                                                                Value.Array
                                                                  [
                                                                    M.call_closure (|
                                                                      M.get_trait_method (|
                                                                        "core::ops::arith::Mul",
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "halo2_proofs::plonk::circuit::Expression")
                                                                          [ F ],
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "halo2_proofs::plonk::circuit::Expression")
                                                                            [ F ]
                                                                        ],
                                                                        "mul",
                                                                        []
                                                                      |),
                                                                      [
                                                                        M.call_closure (|
                                                                          M.get_trait_method (|
                                                                            "core::ops::arith::Sub",
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "halo2_proofs::plonk::circuit::Expression")
                                                                              [ F ],
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "halo2_proofs::plonk::circuit::Expression")
                                                                                [ F ]
                                                                            ],
                                                                            "sub",
                                                                            []
                                                                          |),
                                                                          [
                                                                            M.call_closure (|
                                                                              M.get_function (|
                                                                                "specs::encode::init_memory_table::encode_init_memory_table_entry",
                                                                                [
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "halo2_proofs::plonk::circuit::Expression")
                                                                                    [ F ]
                                                                                ]
                                                                              |),
                                                                              [
                                                                                M.call_closure (|
                                                                                  M.get_trait_method (|
                                                                                    "core::ops::arith::Add",
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "halo2_proofs::plonk::circuit::Expression")
                                                                                      [ F ],
                                                                                    [
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "halo2_proofs::plonk::circuit::Expression")
                                                                                        [ F ]
                                                                                    ],
                                                                                    "add",
                                                                                    []
                                                                                  |),
                                                                                  [
                                                                                    M.call_closure (|
                                                                                      M.get_trait_method (|
                                                                                        "core::ops::arith::Add",
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "halo2_proofs::plonk::circuit::Expression")
                                                                                          [ F ],
                                                                                        [
                                                                                          Ty.apply
                                                                                            (Ty.path
                                                                                              "halo2_proofs::plonk::circuit::Expression")
                                                                                            [ F ]
                                                                                        ],
                                                                                        "add",
                                                                                        []
                                                                                      |),
                                                                                      [
                                                                                        M.call_closure (|
                                                                                          M.get_trait_method (|
                                                                                            "core::ops::arith::Mul",
                                                                                            Ty.apply
                                                                                              (Ty.path
                                                                                                "halo2_proofs::plonk::circuit::Expression")
                                                                                              [ F ],
                                                                                            [
                                                                                              Ty.apply
                                                                                                (Ty.path
                                                                                                  "halo2_proofs::plonk::circuit::Expression")
                                                                                                [ F
                                                                                                ]
                                                                                            ],
                                                                                            "mul",
                                                                                            []
                                                                                          |),
                                                                                          [
                                                                                            M.call_closure (|
                                                                                              M.get_trait_method (|
                                                                                                "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                                                Ty.apply
                                                                                                  (Ty.path
                                                                                                    "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                                                                                  [
                                                                                                    F
                                                                                                  ],
                                                                                                [ F
                                                                                                ],
                                                                                                "curr_expr",
                                                                                                []
                                                                                              |),
                                                                                              [
                                                                                                is_stack_cell;
                                                                                                M.read (|
                                                                                                  meta
                                                                                                |)
                                                                                              ]
                                                                                            |);
                                                                                            Value.StructTuple
                                                                                              "halo2_proofs::plonk::circuit::Expression::Constant"
                                                                                              [
                                                                                                M.call_closure (|
                                                                                                  M.get_trait_method (|
                                                                                                    "core::convert::From",
                                                                                                    F,
                                                                                                    [
                                                                                                      Ty.path
                                                                                                        "u64"
                                                                                                    ],
                                                                                                    "from",
                                                                                                    []
                                                                                                  |),
                                                                                                  [
                                                                                                    M.read (|
                                                                                                      M.use
                                                                                                        (M.alloc (|
                                                                                                          M.rust_cast
                                                                                                            (BinOp.Panic.add (|
                                                                                                              Integer.Isize,
                                                                                                              M.get_constant (|
                                                                                                                "specs::mtable::LocationType::Stack_discriminant"
                                                                                                              |),
                                                                                                              Value.Integer
                                                                                                                0
                                                                                                            |))
                                                                                                        |))
                                                                                                    |)
                                                                                                  ]
                                                                                                |)
                                                                                              ]
                                                                                          ]
                                                                                        |);
                                                                                        M.call_closure (|
                                                                                          M.get_trait_method (|
                                                                                            "core::ops::arith::Mul",
                                                                                            Ty.apply
                                                                                              (Ty.path
                                                                                                "halo2_proofs::plonk::circuit::Expression")
                                                                                              [ F ],
                                                                                            [
                                                                                              Ty.apply
                                                                                                (Ty.path
                                                                                                  "halo2_proofs::plonk::circuit::Expression")
                                                                                                [ F
                                                                                                ]
                                                                                            ],
                                                                                            "mul",
                                                                                            []
                                                                                          |),
                                                                                          [
                                                                                            M.call_closure (|
                                                                                              M.get_trait_method (|
                                                                                                "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                                                Ty.apply
                                                                                                  (Ty.path
                                                                                                    "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                                                                                  [
                                                                                                    F
                                                                                                  ],
                                                                                                [ F
                                                                                                ],
                                                                                                "curr_expr",
                                                                                                []
                                                                                              |),
                                                                                              [
                                                                                                is_global_cell;
                                                                                                M.read (|
                                                                                                  meta
                                                                                                |)
                                                                                              ]
                                                                                            |);
                                                                                            Value.StructTuple
                                                                                              "halo2_proofs::plonk::circuit::Expression::Constant"
                                                                                              [
                                                                                                M.call_closure (|
                                                                                                  M.get_trait_method (|
                                                                                                    "core::convert::From",
                                                                                                    F,
                                                                                                    [
                                                                                                      Ty.path
                                                                                                        "u64"
                                                                                                    ],
                                                                                                    "from",
                                                                                                    []
                                                                                                  |),
                                                                                                  [
                                                                                                    M.read (|
                                                                                                      M.use
                                                                                                        (M.alloc (|
                                                                                                          M.rust_cast
                                                                                                            (BinOp.Panic.add (|
                                                                                                              Integer.Isize,
                                                                                                              M.get_constant (|
                                                                                                                "specs::mtable::LocationType::Global_discriminant"
                                                                                                              |),
                                                                                                              Value.Integer
                                                                                                                0
                                                                                                            |))
                                                                                                        |))
                                                                                                    |)
                                                                                                  ]
                                                                                                |)
                                                                                              ]
                                                                                          ]
                                                                                        |)
                                                                                      ]
                                                                                    |);
                                                                                    M.call_closure (|
                                                                                      M.get_trait_method (|
                                                                                        "core::ops::arith::Mul",
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "halo2_proofs::plonk::circuit::Expression")
                                                                                          [ F ],
                                                                                        [
                                                                                          Ty.apply
                                                                                            (Ty.path
                                                                                              "halo2_proofs::plonk::circuit::Expression")
                                                                                            [ F ]
                                                                                        ],
                                                                                        "mul",
                                                                                        []
                                                                                      |),
                                                                                      [
                                                                                        M.call_closure (|
                                                                                          M.get_trait_method (|
                                                                                            "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                                            Ty.apply
                                                                                              (Ty.path
                                                                                                "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                                                                              [ F ],
                                                                                            [ F ],
                                                                                            "curr_expr",
                                                                                            []
                                                                                          |),
                                                                                          [
                                                                                            is_heap_cell;
                                                                                            M.read (|
                                                                                              meta
                                                                                            |)
                                                                                          ]
                                                                                        |);
                                                                                        Value.StructTuple
                                                                                          "halo2_proofs::plonk::circuit::Expression::Constant"
                                                                                          [
                                                                                            M.call_closure (|
                                                                                              M.get_trait_method (|
                                                                                                "core::convert::From",
                                                                                                F,
                                                                                                [
                                                                                                  Ty.path
                                                                                                    "u64"
                                                                                                ],
                                                                                                "from",
                                                                                                []
                                                                                              |),
                                                                                              [
                                                                                                M.rust_cast
                                                                                                  (BinOp.Panic.add (|
                                                                                                    Integer.Isize,
                                                                                                    M.get_constant (|
                                                                                                      "specs::mtable::LocationType::Heap_discriminant"
                                                                                                    |),
                                                                                                    Value.Integer
                                                                                                      0
                                                                                                  |))
                                                                                              ]
                                                                                            |)
                                                                                          ]
                                                                                      ]
                                                                                    |)
                                                                                  ]
                                                                                |);
                                                                                M.call_closure (|
                                                                                  M.get_associated_function (|
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "delphinus_zkwasm::circuits::cell::AllocatedU32Cell")
                                                                                      [ F ],
                                                                                    "curr_expr",
                                                                                    []
                                                                                  |),
                                                                                  [
                                                                                    offset_cell;
                                                                                    M.read (|
                                                                                      meta
                                                                                    |)
                                                                                  ]
                                                                                |);
                                                                                M.call_closure (|
                                                                                  M.get_trait_method (|
                                                                                    "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                                                                      [ F ],
                                                                                    [ F ],
                                                                                    "curr_expr",
                                                                                    []
                                                                                  |),
                                                                                  [
                                                                                    is_mutable;
                                                                                    M.read (|
                                                                                      meta
                                                                                    |)
                                                                                  ]
                                                                                |);
                                                                                M.call_closure (|
                                                                                  M.get_trait_method (|
                                                                                    "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "delphinus_zkwasm::circuits::cell::AllocatedCommonRangeCell")
                                                                                      [ F ],
                                                                                    [ F ],
                                                                                    "curr_expr",
                                                                                    []
                                                                                  |),
                                                                                  [
                                                                                    start_eid_cell;
                                                                                    M.read (|
                                                                                      meta
                                                                                    |)
                                                                                  ]
                                                                                |);
                                                                                M.call_closure (|
                                                                                  M.get_trait_method (|
                                                                                    "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "delphinus_zkwasm::circuits::cell::AllocatedUnlimitedCell")
                                                                                      [ F ],
                                                                                    [ F ],
                                                                                    "curr_expr",
                                                                                    []
                                                                                  |),
                                                                                  [
                                                                                    M.SubPointer.get_struct_record_field (|
                                                                                      value,
                                                                                      "delphinus_zkwasm::circuits::cell::AllocatedU64Cell",
                                                                                      "u64_cell"
                                                                                    |);
                                                                                    M.read (|
                                                                                      meta
                                                                                    |)
                                                                                  ]
                                                                                |)
                                                                              ]
                                                                            |);
                                                                            M.call_closure (|
                                                                              M.get_trait_method (|
                                                                                "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "delphinus_zkwasm::circuits::cell::AllocatedUnlimitedCell")
                                                                                  [ F ],
                                                                                [ F ],
                                                                                "curr_expr",
                                                                                []
                                                                              |),
                                                                              [
                                                                                init_encode_cell;
                                                                                M.read (| meta |)
                                                                              ]
                                                                            |)
                                                                          ]
                                                                        |);
                                                                        M.call_closure (|
                                                                          M.get_trait_method (|
                                                                            "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                                                              [ F ],
                                                                            [ F ],
                                                                            "curr_expr",
                                                                            []
                                                                          |),
                                                                          [
                                                                            is_init_cell;
                                                                            M.read (| meta |)
                                                                          ]
                                                                        |)
                                                                      ]
                                                                    |)
                                                                  ]
                                                              |)
                                                            ]
                                                          |)
                                                        |))
                                                    ]
                                                  |)
                                                ]
                                              |);
                                              M.closure
                                                (fun γ =>
                                                  ltac:(M.monadic
                                                    match γ with
                                                    | [ α0 ] =>
                                                      M.match_operator (|
                                                        M.alloc (| α0 |),
                                                        [
                                                          fun γ =>
                                                            ltac:(M.monadic
                                                              (let x := M.copy (| γ |) in
                                                              M.call_closure (|
                                                                M.get_trait_method (|
                                                                  "core::ops::arith::Mul",
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "halo2_proofs::plonk::circuit::Expression")
                                                                    [ F ],
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "halo2_proofs::plonk::circuit::Expression")
                                                                      [ F ]
                                                                  ],
                                                                  "mul",
                                                                  []
                                                                |),
                                                                [
                                                                  M.read (| x |);
                                                                  M.call_closure (|
                                                                    M.get_associated_function (|
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "halo2_proofs::plonk::circuit::VirtualCells")
                                                                        [ F ],
                                                                      "query_fixed",
                                                                      []
                                                                    |),
                                                                    [
                                                                      M.read (| meta |);
                                                                      M.read (| entry_sel |);
                                                                      M.call_closure (|
                                                                        M.get_associated_function (|
                                                                          Ty.path
                                                                            "halo2_proofs::poly::Rotation",
                                                                          "cur",
                                                                          []
                                                                        |),
                                                                        []
                                                                      |)
                                                                    ]
                                                                  |)
                                                                ]
                                                              |)))
                                                        ]
                                                      |)
                                                    | _ => M.impossible (||)
                                                    end))
                                            ]
                                          |)
                                        ]
                                      |)))
                                ]
                              |)
                            | _ => M.impossible (||)
                            end))
                    ]
                  |)
                |) in
              let _ :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "delphinus_zkwasm::circuits::image_table::ImageTableConfig")
                        [ F ],
                      "init_memory_lookup",
                      [
                        Ty.function
                          [
                            Ty.tuple
                              [
                                Ty.apply
                                  (Ty.path "&mut")
                                  [
                                    Ty.apply
                                      (Ty.path "halo2_proofs::plonk::circuit::VirtualCells")
                                      [ F ]
                                  ]
                              ]
                          ]
                          (Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ])
                      ]
                    |),
                    [
                      M.read (| image_table |);
                      M.read (| meta |);
                      M.read (| Value.String "mc7c. imtable init" |);
                      M.closure
                        (fun γ =>
                          ltac:(M.monadic
                            match γ with
                            | [ α0 ] =>
                              M.match_operator (|
                                M.alloc (| α0 |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let meta := M.copy (| γ |) in
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "core::ops::arith::Mul",
                                          Ty.apply
                                            (Ty.path "halo2_proofs::plonk::circuit::Expression")
                                            [ F ],
                                          [
                                            Ty.apply
                                              (Ty.path "halo2_proofs::plonk::circuit::Expression")
                                              [ F ]
                                          ],
                                          "mul",
                                          []
                                        |),
                                        [
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "delphinus_zkwasm::circuits::cell::CellExpression",
                                              Ty.apply
                                                (Ty.path
                                                  "delphinus_zkwasm::circuits::cell::AllocatedUnlimitedCell")
                                                [ F ],
                                              [ F ],
                                              "curr_expr",
                                              []
                                            |),
                                            [ init_encode_cell; M.read (| meta |) ]
                                          |);
                                          M.call_closure (|
                                            M.get_associated_function (|
                                              Ty.apply
                                                (Ty.path
                                                  "halo2_proofs::plonk::circuit::VirtualCells")
                                                [ F ],
                                              "query_fixed",
                                              []
                                            |),
                                            [
                                              M.read (| meta |);
                                              M.read (| entry_sel |);
                                              M.call_closure (|
                                                M.get_associated_function (|
                                                  Ty.path "halo2_proofs::poly::Rotation",
                                                  "cur",
                                                  []
                                                |),
                                                []
                                              |)
                                            ]
                                          |)
                                        ]
                                      |)))
                                ]
                              |)
                            | _ => M.impossible (||)
                            end))
                    ]
                  |)
                |) in
              let _ :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply (Ty.path "halo2_proofs::plonk::circuit::ConstraintSystem") [ F ],
                      "create_gate",
                      [
                        Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ];
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          [
                            Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ];
                            Ty.path "alloc::alloc::Global"
                          ];
                        Ty.function
                          [
                            Ty.tuple
                              [
                                Ty.apply
                                  (Ty.path "&mut")
                                  [
                                    Ty.apply
                                      (Ty.path "halo2_proofs::plonk::circuit::VirtualCells")
                                      [ F ]
                                  ]
                              ]
                          ]
                          (Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            [
                              Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ];
                              Ty.path "alloc::alloc::Global"
                            ])
                      ]
                    |),
                    [
                      M.read (| meta |);
                      M.read (| Value.String "mc8. vtype" |);
                      M.closure
                        (fun γ =>
                          ltac:(M.monadic
                            match γ with
                            | [ α0 ] =>
                              M.match_operator (|
                                M.alloc (| α0 |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let meta := M.copy (| γ |) in
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "core::iter::traits::iterator::Iterator",
                                          Ty.apply
                                            (Ty.path "core::iter::adapters::map::Map")
                                            [
                                              Ty.apply
                                                (Ty.path "alloc::vec::into_iter::IntoIter")
                                                [
                                                  Ty.apply
                                                    (Ty.path
                                                      "halo2_proofs::plonk::circuit::Expression")
                                                    [ F ];
                                                  Ty.path "alloc::alloc::Global"
                                                ];
                                              Ty.function
                                                [
                                                  Ty.tuple
                                                    [
                                                      Ty.apply
                                                        (Ty.path
                                                          "halo2_proofs::plonk::circuit::Expression")
                                                        [ F ]
                                                    ]
                                                ]
                                                (Ty.apply
                                                  (Ty.path
                                                    "halo2_proofs::plonk::circuit::Expression")
                                                  [ F ])
                                            ],
                                          [],
                                          "collect",
                                          [
                                            Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              [
                                                Ty.apply
                                                  (Ty.path
                                                    "halo2_proofs::plonk::circuit::Expression")
                                                  [ F ];
                                                Ty.path "alloc::alloc::Global"
                                              ]
                                          ]
                                        |),
                                        [
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "core::iter::traits::iterator::Iterator",
                                              Ty.apply
                                                (Ty.path "alloc::vec::into_iter::IntoIter")
                                                [
                                                  Ty.apply
                                                    (Ty.path
                                                      "halo2_proofs::plonk::circuit::Expression")
                                                    [ F ];
                                                  Ty.path "alloc::alloc::Global"
                                                ],
                                              [],
                                              "map",
                                              [
                                                Ty.apply
                                                  (Ty.path
                                                    "halo2_proofs::plonk::circuit::Expression")
                                                  [ F ];
                                                Ty.function
                                                  [
                                                    Ty.tuple
                                                      [
                                                        Ty.apply
                                                          (Ty.path
                                                            "halo2_proofs::plonk::circuit::Expression")
                                                          [ F ]
                                                      ]
                                                  ]
                                                  (Ty.apply
                                                    (Ty.path
                                                      "halo2_proofs::plonk::circuit::Expression")
                                                    [ F ])
                                              ]
                                            |),
                                            [
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "core::iter::traits::collect::IntoIterator",
                                                  Ty.apply
                                                    (Ty.path "alloc::vec::Vec")
                                                    [
                                                      Ty.apply
                                                        (Ty.path
                                                          "halo2_proofs::plonk::circuit::Expression")
                                                        [ F ];
                                                      Ty.path "alloc::alloc::Global"
                                                    ],
                                                  [],
                                                  "into_iter",
                                                  []
                                                |),
                                                [
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.apply
                                                        (Ty.path "slice")
                                                        [
                                                          Ty.apply
                                                            (Ty.path
                                                              "halo2_proofs::plonk::circuit::Expression")
                                                            [ F ]
                                                        ],
                                                      "into_vec",
                                                      [ Ty.path "alloc::alloc::Global" ]
                                                    |),
                                                    [
                                                      (* Unsize *)
                                                      M.pointer_coercion
                                                        (M.read (|
                                                          M.call_closure (|
                                                            M.get_associated_function (|
                                                              Ty.apply
                                                                (Ty.path "alloc::boxed::Box")
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path "array")
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "halo2_proofs::plonk::circuit::Expression")
                                                                        [ F ]
                                                                    ];
                                                                  Ty.path "alloc::alloc::Global"
                                                                ],
                                                              "new",
                                                              []
                                                            |),
                                                            [
                                                              M.alloc (|
                                                                Value.Array
                                                                  [
                                                                    M.call_closure (|
                                                                      M.get_trait_method (|
                                                                        "core::ops::arith::Sub",
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "halo2_proofs::plonk::circuit::Expression")
                                                                          [ F ],
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "halo2_proofs::plonk::circuit::Expression")
                                                                            [ F ]
                                                                        ],
                                                                        "sub",
                                                                        []
                                                                      |),
                                                                      [
                                                                        M.call_closure (|
                                                                          M.get_trait_method (|
                                                                            "core::ops::arith::Add",
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "halo2_proofs::plonk::circuit::Expression")
                                                                              [ F ],
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "halo2_proofs::plonk::circuit::Expression")
                                                                                [ F ]
                                                                            ],
                                                                            "add",
                                                                            []
                                                                          |),
                                                                          [
                                                                            M.call_closure (|
                                                                              M.get_trait_method (|
                                                                                "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                                                                  [ F ],
                                                                                [ F ],
                                                                                "curr_expr",
                                                                                []
                                                                              |),
                                                                              [
                                                                                is_i32_cell;
                                                                                M.read (| meta |)
                                                                              ]
                                                                            |);
                                                                            M.call_closure (|
                                                                              M.get_trait_method (|
                                                                                "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                                                                  [ F ],
                                                                                [ F ],
                                                                                "curr_expr",
                                                                                []
                                                                              |),
                                                                              [
                                                                                is_i64_cell;
                                                                                M.read (| meta |)
                                                                              ]
                                                                            |)
                                                                          ]
                                                                        |);
                                                                        M.call_closure (|
                                                                          M.get_trait_method (|
                                                                            "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                                                              [ F ],
                                                                            [ F ],
                                                                            "curr_expr",
                                                                            []
                                                                          |),
                                                                          [
                                                                            enabled_cell;
                                                                            M.read (| meta |)
                                                                          ]
                                                                        |)
                                                                      ]
                                                                    |);
                                                                    M.call_closure (|
                                                                      M.get_trait_method (|
                                                                        "core::ops::arith::Mul",
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "halo2_proofs::plonk::circuit::Expression")
                                                                          [ F ],
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "halo2_proofs::plonk::circuit::Expression")
                                                                            [ F ]
                                                                        ],
                                                                        "mul",
                                                                        []
                                                                      |),
                                                                      [
                                                                        M.call_closure (|
                                                                          M.get_trait_method (|
                                                                            "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                                                              [ F ],
                                                                            [ F ],
                                                                            "curr_expr",
                                                                            []
                                                                          |),
                                                                          [
                                                                            is_heap_cell;
                                                                            M.read (| meta |)
                                                                          ]
                                                                        |);
                                                                        M.call_closure (|
                                                                          M.get_trait_method (|
                                                                            "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                                                              [ F ],
                                                                            [ F ],
                                                                            "curr_expr",
                                                                            []
                                                                          |),
                                                                          [
                                                                            is_i32_cell;
                                                                            M.read (| meta |)
                                                                          ]
                                                                        |)
                                                                      ]
                                                                    |);
                                                                    M.call_closure (|
                                                                      M.get_trait_method (|
                                                                        "core::ops::arith::Mul",
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "halo2_proofs::plonk::circuit::Expression")
                                                                          [ F ],
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "halo2_proofs::plonk::circuit::Expression")
                                                                            [ F ]
                                                                        ],
                                                                        "mul",
                                                                        []
                                                                      |),
                                                                      [
                                                                        M.call_closure (|
                                                                          M.get_trait_method (|
                                                                            "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                                                              [ F ],
                                                                            [ F ],
                                                                            "curr_expr",
                                                                            []
                                                                          |),
                                                                          [
                                                                            is_i32_cell;
                                                                            M.read (| meta |)
                                                                          ]
                                                                        |);
                                                                        M.call_closure (|
                                                                          M.get_trait_method (|
                                                                            "core::ops::arith::Add",
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "halo2_proofs::plonk::circuit::Expression")
                                                                              [ F ],
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "halo2_proofs::plonk::circuit::Expression")
                                                                                [ F ]
                                                                            ],
                                                                            "add",
                                                                            []
                                                                          |),
                                                                          [
                                                                            M.call_closure (|
                                                                              M.get_trait_method (|
                                                                                "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "delphinus_zkwasm::circuits::cell::AllocatedU16Cell")
                                                                                  [ F ],
                                                                                [ F ],
                                                                                "curr_expr",
                                                                                []
                                                                              |),
                                                                              [
                                                                                M.SubPointer.get_array_field (|
                                                                                  M.SubPointer.get_struct_record_field (|
                                                                                    value,
                                                                                    "delphinus_zkwasm::circuits::cell::AllocatedU64Cell",
                                                                                    "u16_cells_le"
                                                                                  |),
                                                                                  M.alloc (|
                                                                                    Value.Integer 2
                                                                                  |)
                                                                                |);
                                                                                M.read (| meta |)
                                                                              ]
                                                                            |);
                                                                            M.call_closure (|
                                                                              M.get_trait_method (|
                                                                                "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "delphinus_zkwasm::circuits::cell::AllocatedU16Cell")
                                                                                  [ F ],
                                                                                [ F ],
                                                                                "curr_expr",
                                                                                []
                                                                              |),
                                                                              [
                                                                                M.SubPointer.get_array_field (|
                                                                                  M.SubPointer.get_struct_record_field (|
                                                                                    value,
                                                                                    "delphinus_zkwasm::circuits::cell::AllocatedU64Cell",
                                                                                    "u16_cells_le"
                                                                                  |),
                                                                                  M.alloc (|
                                                                                    Value.Integer 3
                                                                                  |)
                                                                                |);
                                                                                M.read (| meta |)
                                                                              ]
                                                                            |)
                                                                          ]
                                                                        |)
                                                                      ]
                                                                    |);
                                                                    M.call_closure (|
                                                                      M.get_trait_method (|
                                                                        "core::ops::arith::Mul",
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "halo2_proofs::plonk::circuit::Expression")
                                                                          [ F ],
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "halo2_proofs::plonk::circuit::Expression")
                                                                            [ F ]
                                                                        ],
                                                                        "mul",
                                                                        []
                                                                      |),
                                                                      [
                                                                        M.call_closure (|
                                                                          M.get_trait_method (|
                                                                            "core::ops::arith::Mul",
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "halo2_proofs::plonk::circuit::Expression")
                                                                              [ F ],
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "halo2_proofs::plonk::circuit::Expression")
                                                                                [ F ]
                                                                            ],
                                                                            "mul",
                                                                            []
                                                                          |),
                                                                          [
                                                                            M.call_closure (|
                                                                              M.get_trait_method (|
                                                                                "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                                                                  [ F ],
                                                                                [ F ],
                                                                                "curr_expr",
                                                                                []
                                                                              |),
                                                                              [
                                                                                is_global_cell;
                                                                                M.read (| meta |)
                                                                              ]
                                                                            |);
                                                                            M.call_closure (|
                                                                              M.get_trait_method (|
                                                                                "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                                                                  [ F ],
                                                                                [ F ],
                                                                                "curr_expr",
                                                                                []
                                                                              |),
                                                                              [
                                                                                is_next_same_offset_cell;
                                                                                M.read (| meta |)
                                                                              ]
                                                                            |)
                                                                          ]
                                                                        |);
                                                                        M.call_closure (|
                                                                          M.get_trait_method (|
                                                                            "core::ops::arith::Sub",
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "halo2_proofs::plonk::circuit::Expression")
                                                                              [ F ],
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "halo2_proofs::plonk::circuit::Expression")
                                                                                [ F ]
                                                                            ],
                                                                            "sub",
                                                                            []
                                                                          |),
                                                                          [
                                                                            M.call_closure (|
                                                                              M.get_trait_method (|
                                                                                "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                                                                  [ F ],
                                                                                [ F ],
                                                                                "curr_expr",
                                                                                []
                                                                              |),
                                                                              [
                                                                                is_i32_cell;
                                                                                M.read (| meta |)
                                                                              ]
                                                                            |);
                                                                            M.call_closure (|
                                                                              M.get_trait_method (|
                                                                                "delphinus_zkwasm::circuits::mtable::allocator::MemoryTableCellExpression",
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                                                                  [ F ],
                                                                                [ F ],
                                                                                "next_expr",
                                                                                []
                                                                              |),
                                                                              [
                                                                                is_i32_cell;
                                                                                M.read (| meta |)
                                                                              ]
                                                                            |)
                                                                          ]
                                                                        |)
                                                                      ]
                                                                    |)
                                                                  ]
                                                              |)
                                                            ]
                                                          |)
                                                        |))
                                                    ]
                                                  |)
                                                ]
                                              |);
                                              M.closure
                                                (fun γ =>
                                                  ltac:(M.monadic
                                                    match γ with
                                                    | [ α0 ] =>
                                                      M.match_operator (|
                                                        M.alloc (| α0 |),
                                                        [
                                                          fun γ =>
                                                            ltac:(M.monadic
                                                              (let x := M.copy (| γ |) in
                                                              M.call_closure (|
                                                                M.get_trait_method (|
                                                                  "core::ops::arith::Mul",
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "halo2_proofs::plonk::circuit::Expression")
                                                                    [ F ],
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "halo2_proofs::plonk::circuit::Expression")
                                                                      [ F ]
                                                                  ],
                                                                  "mul",
                                                                  []
                                                                |),
                                                                [
                                                                  M.read (| x |);
                                                                  M.call_closure (|
                                                                    M.get_associated_function (|
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "halo2_proofs::plonk::circuit::VirtualCells")
                                                                        [ F ],
                                                                      "query_fixed",
                                                                      []
                                                                    |),
                                                                    [
                                                                      M.read (| meta |);
                                                                      M.read (| entry_sel |);
                                                                      M.call_closure (|
                                                                        M.get_associated_function (|
                                                                          Ty.path
                                                                            "halo2_proofs::poly::Rotation",
                                                                          "cur",
                                                                          []
                                                                        |),
                                                                        []
                                                                      |)
                                                                    ]
                                                                  |)
                                                                ]
                                                              |)))
                                                        ]
                                                      |)
                                                    | _ => M.impossible (||)
                                                    end))
                                            ]
                                          |)
                                        ]
                                      |)))
                                ]
                              |)
                            | _ => M.impossible (||)
                            end))
                    ]
                  |)
                |) in
              let _ :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply (Ty.path "halo2_proofs::plonk::circuit::ConstraintSystem") [ F ],
                      "create_gate",
                      [
                        Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ];
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          [
                            Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ];
                            Ty.path "alloc::alloc::Global"
                          ];
                        Ty.function
                          [
                            Ty.tuple
                              [
                                Ty.apply
                                  (Ty.path "&mut")
                                  [
                                    Ty.apply
                                      (Ty.path "halo2_proofs::plonk::circuit::VirtualCells")
                                      [ F ]
                                  ]
                              ]
                          ]
                          (Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            [
                              Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ];
                              Ty.path "alloc::alloc::Global"
                            ])
                      ]
                    |),
                    [
                      M.read (| meta |);
                      M.read (| Value.String "mc10b. rest_mops" |);
                      M.closure
                        (fun γ =>
                          ltac:(M.monadic
                            match γ with
                            | [ α0 ] =>
                              M.match_operator (|
                                M.alloc (| α0 |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let meta := M.copy (| γ |) in
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "core::iter::traits::iterator::Iterator",
                                          Ty.apply
                                            (Ty.path "core::iter::adapters::map::Map")
                                            [
                                              Ty.apply
                                                (Ty.path "alloc::vec::into_iter::IntoIter")
                                                [
                                                  Ty.apply
                                                    (Ty.path
                                                      "halo2_proofs::plonk::circuit::Expression")
                                                    [ F ];
                                                  Ty.path "alloc::alloc::Global"
                                                ];
                                              Ty.function
                                                [
                                                  Ty.tuple
                                                    [
                                                      Ty.apply
                                                        (Ty.path
                                                          "halo2_proofs::plonk::circuit::Expression")
                                                        [ F ]
                                                    ]
                                                ]
                                                (Ty.apply
                                                  (Ty.path
                                                    "halo2_proofs::plonk::circuit::Expression")
                                                  [ F ])
                                            ],
                                          [],
                                          "collect",
                                          [
                                            Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              [
                                                Ty.apply
                                                  (Ty.path
                                                    "halo2_proofs::plonk::circuit::Expression")
                                                  [ F ];
                                                Ty.path "alloc::alloc::Global"
                                              ]
                                          ]
                                        |),
                                        [
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "core::iter::traits::iterator::Iterator",
                                              Ty.apply
                                                (Ty.path "alloc::vec::into_iter::IntoIter")
                                                [
                                                  Ty.apply
                                                    (Ty.path
                                                      "halo2_proofs::plonk::circuit::Expression")
                                                    [ F ];
                                                  Ty.path "alloc::alloc::Global"
                                                ],
                                              [],
                                              "map",
                                              [
                                                Ty.apply
                                                  (Ty.path
                                                    "halo2_proofs::plonk::circuit::Expression")
                                                  [ F ];
                                                Ty.function
                                                  [
                                                    Ty.tuple
                                                      [
                                                        Ty.apply
                                                          (Ty.path
                                                            "halo2_proofs::plonk::circuit::Expression")
                                                          [ F ]
                                                      ]
                                                  ]
                                                  (Ty.apply
                                                    (Ty.path
                                                      "halo2_proofs::plonk::circuit::Expression")
                                                    [ F ])
                                              ]
                                            |),
                                            [
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "core::iter::traits::collect::IntoIterator",
                                                  Ty.apply
                                                    (Ty.path "alloc::vec::Vec")
                                                    [
                                                      Ty.apply
                                                        (Ty.path
                                                          "halo2_proofs::plonk::circuit::Expression")
                                                        [ F ];
                                                      Ty.path "alloc::alloc::Global"
                                                    ],
                                                  [],
                                                  "into_iter",
                                                  []
                                                |),
                                                [
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.apply
                                                        (Ty.path "slice")
                                                        [
                                                          Ty.apply
                                                            (Ty.path
                                                              "halo2_proofs::plonk::circuit::Expression")
                                                            [ F ]
                                                        ],
                                                      "into_vec",
                                                      [ Ty.path "alloc::alloc::Global" ]
                                                    |),
                                                    [
                                                      (* Unsize *)
                                                      M.pointer_coercion
                                                        (M.read (|
                                                          M.call_closure (|
                                                            M.get_associated_function (|
                                                              Ty.apply
                                                                (Ty.path "alloc::boxed::Box")
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path "array")
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "halo2_proofs::plonk::circuit::Expression")
                                                                        [ F ]
                                                                    ];
                                                                  Ty.path "alloc::alloc::Global"
                                                                ],
                                                              "new",
                                                              []
                                                            |),
                                                            [
                                                              M.alloc (|
                                                                Value.Array
                                                                  [
                                                                    M.call_closure (|
                                                                      M.get_trait_method (|
                                                                        "core::ops::arith::Mul",
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "halo2_proofs::plonk::circuit::Expression")
                                                                          [ F ],
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "halo2_proofs::plonk::circuit::Expression")
                                                                            [ F ]
                                                                        ],
                                                                        "mul",
                                                                        []
                                                                      |),
                                                                      [
                                                                        M.call_closure (|
                                                                          M.get_trait_method (|
                                                                            "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                                                              [ F ],
                                                                            [ F ],
                                                                            "curr_expr",
                                                                            []
                                                                          |),
                                                                          [
                                                                            is_init_cell;
                                                                            M.read (| meta |)
                                                                          ]
                                                                        |);
                                                                        M.call_closure (|
                                                                          M.get_trait_method (|
                                                                            "core::ops::arith::Sub",
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "halo2_proofs::plonk::circuit::Expression")
                                                                              [ F ],
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "halo2_proofs::plonk::circuit::Expression")
                                                                                [ F ]
                                                                            ],
                                                                            "sub",
                                                                            []
                                                                          |),
                                                                          [
                                                                            M.call_closure (|
                                                                              M.get_trait_method (|
                                                                                "delphinus_zkwasm::circuits::mtable::allocator::MemoryTableCellExpression",
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "delphinus_zkwasm::circuits::cell::AllocatedCommonRangeCell")
                                                                                  [ F ],
                                                                                [ F ],
                                                                                "next_expr",
                                                                                []
                                                                              |),
                                                                              [
                                                                                rest_mops_cell;
                                                                                M.read (| meta |)
                                                                              ]
                                                                            |);
                                                                            M.call_closure (|
                                                                              M.get_trait_method (|
                                                                                "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "delphinus_zkwasm::circuits::cell::AllocatedCommonRangeCell")
                                                                                  [ F ],
                                                                                [ F ],
                                                                                "curr_expr",
                                                                                []
                                                                              |),
                                                                              [
                                                                                rest_mops_cell;
                                                                                M.read (| meta |)
                                                                              ]
                                                                            |)
                                                                          ]
                                                                        |)
                                                                      ]
                                                                    |);
                                                                    M.call_closure (|
                                                                      M.get_trait_method (|
                                                                        "core::ops::arith::Mul",
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "halo2_proofs::plonk::circuit::Expression")
                                                                          [ F ],
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "halo2_proofs::plonk::circuit::Expression")
                                                                            [ F ]
                                                                        ],
                                                                        "mul",
                                                                        []
                                                                      |),
                                                                      [
                                                                        M.call_closure (|
                                                                          M.get_trait_method (|
                                                                            "core::ops::arith::Sub",
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "halo2_proofs::plonk::circuit::Expression")
                                                                              [ F ],
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "halo2_proofs::plonk::circuit::Expression")
                                                                                [ F ]
                                                                            ],
                                                                            "sub",
                                                                            []
                                                                          |),
                                                                          [
                                                                            M.call_closure (|
                                                                              M.get_trait_method (|
                                                                                "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                                                                  [ F ],
                                                                                [ F ],
                                                                                "curr_expr",
                                                                                []
                                                                              |),
                                                                              [
                                                                                is_init_cell;
                                                                                M.read (| meta |)
                                                                              ]
                                                                            |);
                                                                            Value.StructTuple
                                                                              "halo2_proofs::plonk::circuit::Expression::Constant"
                                                                              [
                                                                                M.call_closure (|
                                                                                  M.get_trait_method (|
                                                                                    "core::convert::From",
                                                                                    F,
                                                                                    [ Ty.path "u64"
                                                                                    ],
                                                                                    "from",
                                                                                    []
                                                                                  |),
                                                                                  [
                                                                                    M.read (|
                                                                                      M.use
                                                                                        (M.alloc (|
                                                                                          Value.Integer
                                                                                            1
                                                                                        |))
                                                                                    |)
                                                                                  ]
                                                                                |)
                                                                              ]
                                                                          ]
                                                                        |);
                                                                        M.call_closure (|
                                                                          M.get_trait_method (|
                                                                            "core::ops::arith::Sub",
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "halo2_proofs::plonk::circuit::Expression")
                                                                              [ F ],
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "halo2_proofs::plonk::circuit::Expression")
                                                                                [ F ]
                                                                            ],
                                                                            "sub",
                                                                            []
                                                                          |),
                                                                          [
                                                                            M.call_closure (|
                                                                              M.get_trait_method (|
                                                                                "core::ops::arith::Add",
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "halo2_proofs::plonk::circuit::Expression")
                                                                                  [ F ],
                                                                                [
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "halo2_proofs::plonk::circuit::Expression")
                                                                                    [ F ]
                                                                                ],
                                                                                "add",
                                                                                []
                                                                              |),
                                                                              [
                                                                                M.call_closure (|
                                                                                  M.get_trait_method (|
                                                                                    "delphinus_zkwasm::circuits::mtable::allocator::MemoryTableCellExpression",
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "delphinus_zkwasm::circuits::cell::AllocatedCommonRangeCell")
                                                                                      [ F ],
                                                                                    [ F ],
                                                                                    "next_expr",
                                                                                    []
                                                                                  |),
                                                                                  [
                                                                                    rest_mops_cell;
                                                                                    M.read (|
                                                                                      meta
                                                                                    |)
                                                                                  ]
                                                                                |);
                                                                                M.call_closure (|
                                                                                  M.get_trait_method (|
                                                                                    "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                                                                      [ F ],
                                                                                    [ F ],
                                                                                    "curr_expr",
                                                                                    []
                                                                                  |),
                                                                                  [
                                                                                    enabled_cell;
                                                                                    M.read (|
                                                                                      meta
                                                                                    |)
                                                                                  ]
                                                                                |)
                                                                              ]
                                                                            |);
                                                                            M.call_closure (|
                                                                              M.get_trait_method (|
                                                                                "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "delphinus_zkwasm::circuits::cell::AllocatedCommonRangeCell")
                                                                                  [ F ],
                                                                                [ F ],
                                                                                "curr_expr",
                                                                                []
                                                                              |),
                                                                              [
                                                                                rest_mops_cell;
                                                                                M.read (| meta |)
                                                                              ]
                                                                            |)
                                                                          ]
                                                                        |)
                                                                      ]
                                                                    |)
                                                                  ]
                                                              |)
                                                            ]
                                                          |)
                                                        |))
                                                    ]
                                                  |)
                                                ]
                                              |);
                                              M.closure
                                                (fun γ =>
                                                  ltac:(M.monadic
                                                    match γ with
                                                    | [ α0 ] =>
                                                      M.match_operator (|
                                                        M.alloc (| α0 |),
                                                        [
                                                          fun γ =>
                                                            ltac:(M.monadic
                                                              (let x := M.copy (| γ |) in
                                                              M.call_closure (|
                                                                M.get_trait_method (|
                                                                  "core::ops::arith::Mul",
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "halo2_proofs::plonk::circuit::Expression")
                                                                    [ F ],
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "halo2_proofs::plonk::circuit::Expression")
                                                                      [ F ]
                                                                  ],
                                                                  "mul",
                                                                  []
                                                                |),
                                                                [
                                                                  M.read (| x |);
                                                                  M.call_closure (|
                                                                    M.get_associated_function (|
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "halo2_proofs::plonk::circuit::VirtualCells")
                                                                        [ F ],
                                                                      "query_fixed",
                                                                      []
                                                                    |),
                                                                    [
                                                                      M.read (| meta |);
                                                                      M.read (| entry_sel |);
                                                                      M.call_closure (|
                                                                        M.get_associated_function (|
                                                                          Ty.path
                                                                            "halo2_proofs::poly::Rotation",
                                                                          "cur",
                                                                          []
                                                                        |),
                                                                        []
                                                                      |)
                                                                    ]
                                                                  |)
                                                                ]
                                                              |)))
                                                        ]
                                                      |)
                                                    | _ => M.impossible (||)
                                                    end))
                                            ]
                                          |)
                                        ]
                                      |)))
                                ]
                              |)
                            | _ => M.impossible (||)
                            end))
                    ]
                  |)
                |) in
              let _ :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply (Ty.path "halo2_proofs::plonk::circuit::ConstraintSystem") [ F ],
                      "create_gate",
                      [
                        Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ];
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          [
                            Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ];
                            Ty.path "alloc::alloc::Global"
                          ];
                        Ty.function
                          [
                            Ty.tuple
                              [
                                Ty.apply
                                  (Ty.path "&mut")
                                  [
                                    Ty.apply
                                      (Ty.path "halo2_proofs::plonk::circuit::VirtualCells")
                                      [ F ]
                                  ]
                              ]
                          ]
                          (Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            [
                              Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ];
                              Ty.path "alloc::alloc::Global"
                            ])
                      ]
                    |),
                    [
                      M.read (| meta |);
                      M.read (| Value.String "mc10c. rest_mops decrease to zero" |);
                      M.closure
                        (fun γ =>
                          ltac:(M.monadic
                            match γ with
                            | [ α0 ] =>
                              M.match_operator (|
                                M.alloc (| α0 |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let meta := M.copy (| γ |) in
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "core::iter::traits::iterator::Iterator",
                                          Ty.apply
                                            (Ty.path "core::iter::adapters::map::Map")
                                            [
                                              Ty.apply
                                                (Ty.path "alloc::vec::into_iter::IntoIter")
                                                [
                                                  Ty.apply
                                                    (Ty.path
                                                      "halo2_proofs::plonk::circuit::Expression")
                                                    [ F ];
                                                  Ty.path "alloc::alloc::Global"
                                                ];
                                              Ty.function
                                                [
                                                  Ty.tuple
                                                    [
                                                      Ty.apply
                                                        (Ty.path
                                                          "halo2_proofs::plonk::circuit::Expression")
                                                        [ F ]
                                                    ]
                                                ]
                                                (Ty.apply
                                                  (Ty.path
                                                    "halo2_proofs::plonk::circuit::Expression")
                                                  [ F ])
                                            ],
                                          [],
                                          "collect",
                                          [
                                            Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              [
                                                Ty.apply
                                                  (Ty.path
                                                    "halo2_proofs::plonk::circuit::Expression")
                                                  [ F ];
                                                Ty.path "alloc::alloc::Global"
                                              ]
                                          ]
                                        |),
                                        [
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "core::iter::traits::iterator::Iterator",
                                              Ty.apply
                                                (Ty.path "alloc::vec::into_iter::IntoIter")
                                                [
                                                  Ty.apply
                                                    (Ty.path
                                                      "halo2_proofs::plonk::circuit::Expression")
                                                    [ F ];
                                                  Ty.path "alloc::alloc::Global"
                                                ],
                                              [],
                                              "map",
                                              [
                                                Ty.apply
                                                  (Ty.path
                                                    "halo2_proofs::plonk::circuit::Expression")
                                                  [ F ];
                                                Ty.function
                                                  [
                                                    Ty.tuple
                                                      [
                                                        Ty.apply
                                                          (Ty.path
                                                            "halo2_proofs::plonk::circuit::Expression")
                                                          [ F ]
                                                      ]
                                                  ]
                                                  (Ty.apply
                                                    (Ty.path
                                                      "halo2_proofs::plonk::circuit::Expression")
                                                    [ F ])
                                              ]
                                            |),
                                            [
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "core::iter::traits::collect::IntoIterator",
                                                  Ty.apply
                                                    (Ty.path "alloc::vec::Vec")
                                                    [
                                                      Ty.apply
                                                        (Ty.path
                                                          "halo2_proofs::plonk::circuit::Expression")
                                                        [ F ];
                                                      Ty.path "alloc::alloc::Global"
                                                    ],
                                                  [],
                                                  "into_iter",
                                                  []
                                                |),
                                                [
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.apply
                                                        (Ty.path "slice")
                                                        [
                                                          Ty.apply
                                                            (Ty.path
                                                              "halo2_proofs::plonk::circuit::Expression")
                                                            [ F ]
                                                        ],
                                                      "into_vec",
                                                      [ Ty.path "alloc::alloc::Global" ]
                                                    |),
                                                    [
                                                      (* Unsize *)
                                                      M.pointer_coercion
                                                        (M.read (|
                                                          M.call_closure (|
                                                            M.get_associated_function (|
                                                              Ty.apply
                                                                (Ty.path "alloc::boxed::Box")
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path "array")
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "halo2_proofs::plonk::circuit::Expression")
                                                                        [ F ]
                                                                    ];
                                                                  Ty.path "alloc::alloc::Global"
                                                                ],
                                                              "new",
                                                              []
                                                            |),
                                                            [
                                                              M.alloc (|
                                                                Value.Array
                                                                  [
                                                                    M.call_closure (|
                                                                      M.get_trait_method (|
                                                                        "core::ops::arith::Mul",
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "halo2_proofs::plonk::circuit::Expression")
                                                                          [ F ],
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "halo2_proofs::plonk::circuit::Expression")
                                                                            [ F ]
                                                                        ],
                                                                        "mul",
                                                                        []
                                                                      |),
                                                                      [
                                                                        M.call_closure (|
                                                                          M.get_trait_method (|
                                                                            "core::ops::arith::Sub",
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "halo2_proofs::plonk::circuit::Expression")
                                                                              [ F ],
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "halo2_proofs::plonk::circuit::Expression")
                                                                                [ F ]
                                                                            ],
                                                                            "sub",
                                                                            []
                                                                          |),
                                                                          [
                                                                            M.call_closure (|
                                                                              M.get_trait_method (|
                                                                                "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                                                                  [ F ],
                                                                                [ F ],
                                                                                "curr_expr",
                                                                                []
                                                                              |),
                                                                              [
                                                                                enabled_cell;
                                                                                M.read (| meta |)
                                                                              ]
                                                                            |);
                                                                            Value.StructTuple
                                                                              "halo2_proofs::plonk::circuit::Expression::Constant"
                                                                              [
                                                                                M.call_closure (|
                                                                                  M.get_trait_method (|
                                                                                    "core::convert::From",
                                                                                    F,
                                                                                    [ Ty.path "u64"
                                                                                    ],
                                                                                    "from",
                                                                                    []
                                                                                  |),
                                                                                  [
                                                                                    M.read (|
                                                                                      M.use
                                                                                        (M.alloc (|
                                                                                          Value.Integer
                                                                                            1
                                                                                        |))
                                                                                    |)
                                                                                  ]
                                                                                |)
                                                                              ]
                                                                          ]
                                                                        |);
                                                                        M.call_closure (|
                                                                          M.get_trait_method (|
                                                                            "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "delphinus_zkwasm::circuits::cell::AllocatedCommonRangeCell")
                                                                              [ F ],
                                                                            [ F ],
                                                                            "curr_expr",
                                                                            []
                                                                          |),
                                                                          [
                                                                            rest_mops_cell;
                                                                            M.read (| meta |)
                                                                          ]
                                                                        |)
                                                                      ]
                                                                    |)
                                                                  ]
                                                              |)
                                                            ]
                                                          |)
                                                        |))
                                                    ]
                                                  |)
                                                ]
                                              |);
                                              M.closure
                                                (fun γ =>
                                                  ltac:(M.monadic
                                                    match γ with
                                                    | [ α0 ] =>
                                                      M.match_operator (|
                                                        M.alloc (| α0 |),
                                                        [
                                                          fun γ =>
                                                            ltac:(M.monadic
                                                              (let x := M.copy (| γ |) in
                                                              M.call_closure (|
                                                                M.get_trait_method (|
                                                                  "core::ops::arith::Mul",
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "halo2_proofs::plonk::circuit::Expression")
                                                                    [ F ],
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "halo2_proofs::plonk::circuit::Expression")
                                                                      [ F ]
                                                                  ],
                                                                  "mul",
                                                                  []
                                                                |),
                                                                [
                                                                  M.read (| x |);
                                                                  M.call_closure (|
                                                                    M.get_associated_function (|
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "halo2_proofs::plonk::circuit::VirtualCells")
                                                                        [ F ],
                                                                      "query_fixed",
                                                                      []
                                                                    |),
                                                                    [
                                                                      M.read (| meta |);
                                                                      M.read (| entry_sel |);
                                                                      M.call_closure (|
                                                                        M.get_associated_function (|
                                                                          Ty.path
                                                                            "halo2_proofs::poly::Rotation",
                                                                          "cur",
                                                                          []
                                                                        |),
                                                                        []
                                                                      |)
                                                                    ]
                                                                  |)
                                                                ]
                                                              |)))
                                                        ]
                                                      |)
                                                    | _ => M.impossible (||)
                                                    end))
                                            ]
                                          |)
                                        ]
                                      |)))
                                ]
                              |)
                            | _ => M.impossible (||)
                            end))
                    ]
                  |)
                |) in
              let _ :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply (Ty.path "halo2_proofs::plonk::circuit::ConstraintSystem") [ F ],
                      "create_gate",
                      [
                        Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ];
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          [
                            Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ];
                            Ty.path "alloc::alloc::Global"
                          ];
                        Ty.function
                          [
                            Ty.tuple
                              [
                                Ty.apply
                                  (Ty.path "&mut")
                                  [
                                    Ty.apply
                                      (Ty.path "halo2_proofs::plonk::circuit::VirtualCells")
                                      [ F ]
                                  ]
                              ]
                          ]
                          (Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            [
                              Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ];
                              Ty.path "alloc::alloc::Global"
                            ])
                      ]
                    |),
                    [
                      M.read (| meta |);
                      M.read (| Value.String "mc11. mutable" |);
                      M.closure
                        (fun γ =>
                          ltac:(M.monadic
                            match γ with
                            | [ α0 ] =>
                              M.match_operator (|
                                M.alloc (| α0 |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let meta := M.copy (| γ |) in
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "core::iter::traits::iterator::Iterator",
                                          Ty.apply
                                            (Ty.path "core::iter::adapters::map::Map")
                                            [
                                              Ty.apply
                                                (Ty.path "alloc::vec::into_iter::IntoIter")
                                                [
                                                  Ty.apply
                                                    (Ty.path
                                                      "halo2_proofs::plonk::circuit::Expression")
                                                    [ F ];
                                                  Ty.path "alloc::alloc::Global"
                                                ];
                                              Ty.function
                                                [
                                                  Ty.tuple
                                                    [
                                                      Ty.apply
                                                        (Ty.path
                                                          "halo2_proofs::plonk::circuit::Expression")
                                                        [ F ]
                                                    ]
                                                ]
                                                (Ty.apply
                                                  (Ty.path
                                                    "halo2_proofs::plonk::circuit::Expression")
                                                  [ F ])
                                            ],
                                          [],
                                          "collect",
                                          [
                                            Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              [
                                                Ty.apply
                                                  (Ty.path
                                                    "halo2_proofs::plonk::circuit::Expression")
                                                  [ F ];
                                                Ty.path "alloc::alloc::Global"
                                              ]
                                          ]
                                        |),
                                        [
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "core::iter::traits::iterator::Iterator",
                                              Ty.apply
                                                (Ty.path "alloc::vec::into_iter::IntoIter")
                                                [
                                                  Ty.apply
                                                    (Ty.path
                                                      "halo2_proofs::plonk::circuit::Expression")
                                                    [ F ];
                                                  Ty.path "alloc::alloc::Global"
                                                ],
                                              [],
                                              "map",
                                              [
                                                Ty.apply
                                                  (Ty.path
                                                    "halo2_proofs::plonk::circuit::Expression")
                                                  [ F ];
                                                Ty.function
                                                  [
                                                    Ty.tuple
                                                      [
                                                        Ty.apply
                                                          (Ty.path
                                                            "halo2_proofs::plonk::circuit::Expression")
                                                          [ F ]
                                                      ]
                                                  ]
                                                  (Ty.apply
                                                    (Ty.path
                                                      "halo2_proofs::plonk::circuit::Expression")
                                                    [ F ])
                                              ]
                                            |),
                                            [
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "core::iter::traits::collect::IntoIterator",
                                                  Ty.apply
                                                    (Ty.path "alloc::vec::Vec")
                                                    [
                                                      Ty.apply
                                                        (Ty.path
                                                          "halo2_proofs::plonk::circuit::Expression")
                                                        [ F ];
                                                      Ty.path "alloc::alloc::Global"
                                                    ],
                                                  [],
                                                  "into_iter",
                                                  []
                                                |),
                                                [
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.apply
                                                        (Ty.path "slice")
                                                        [
                                                          Ty.apply
                                                            (Ty.path
                                                              "halo2_proofs::plonk::circuit::Expression")
                                                            [ F ]
                                                        ],
                                                      "into_vec",
                                                      [ Ty.path "alloc::alloc::Global" ]
                                                    |),
                                                    [
                                                      (* Unsize *)
                                                      M.pointer_coercion
                                                        (M.read (|
                                                          M.call_closure (|
                                                            M.get_associated_function (|
                                                              Ty.apply
                                                                (Ty.path "alloc::boxed::Box")
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path "array")
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "halo2_proofs::plonk::circuit::Expression")
                                                                        [ F ]
                                                                    ];
                                                                  Ty.path "alloc::alloc::Global"
                                                                ],
                                                              "new",
                                                              []
                                                            |),
                                                            [
                                                              M.alloc (|
                                                                Value.Array
                                                                  [
                                                                    M.call_closure (|
                                                                      M.get_trait_method (|
                                                                        "core::ops::arith::Mul",
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "halo2_proofs::plonk::circuit::Expression")
                                                                          [ F ],
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "halo2_proofs::plonk::circuit::Expression")
                                                                            [ F ]
                                                                        ],
                                                                        "mul",
                                                                        []
                                                                      |),
                                                                      [
                                                                        M.call_closure (|
                                                                          M.get_trait_method (|
                                                                            "core::ops::arith::Sub",
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "halo2_proofs::plonk::circuit::Expression")
                                                                              [ F ],
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "halo2_proofs::plonk::circuit::Expression")
                                                                                [ F ]
                                                                            ],
                                                                            "sub",
                                                                            []
                                                                          |),
                                                                          [
                                                                            M.call_closure (|
                                                                              M.get_trait_method (|
                                                                                "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                                                                  [ F ],
                                                                                [ F ],
                                                                                "curr_expr",
                                                                                []
                                                                              |),
                                                                              [
                                                                                is_init_cell;
                                                                                M.read (| meta |)
                                                                              ]
                                                                            |);
                                                                            Value.StructTuple
                                                                              "halo2_proofs::plonk::circuit::Expression::Constant"
                                                                              [
                                                                                M.call_closure (|
                                                                                  M.get_trait_method (|
                                                                                    "core::convert::From",
                                                                                    F,
                                                                                    [ Ty.path "u64"
                                                                                    ],
                                                                                    "from",
                                                                                    []
                                                                                  |),
                                                                                  [
                                                                                    M.read (|
                                                                                      M.use
                                                                                        (M.alloc (|
                                                                                          Value.Integer
                                                                                            1
                                                                                        |))
                                                                                    |)
                                                                                  ]
                                                                                |)
                                                                              ]
                                                                          ]
                                                                        |);
                                                                        M.call_closure (|
                                                                          M.get_trait_method (|
                                                                            "core::ops::arith::Sub",
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "halo2_proofs::plonk::circuit::Expression")
                                                                              [ F ],
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "halo2_proofs::plonk::circuit::Expression")
                                                                                [ F ]
                                                                            ],
                                                                            "sub",
                                                                            []
                                                                          |),
                                                                          [
                                                                            M.call_closure (|
                                                                              M.get_trait_method (|
                                                                                "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                                                                  [ F ],
                                                                                [ F ],
                                                                                "curr_expr",
                                                                                []
                                                                              |),
                                                                              [
                                                                                is_mutable;
                                                                                M.read (| meta |)
                                                                              ]
                                                                            |);
                                                                            Value.StructTuple
                                                                              "halo2_proofs::plonk::circuit::Expression::Constant"
                                                                              [
                                                                                M.call_closure (|
                                                                                  M.get_trait_method (|
                                                                                    "core::convert::From",
                                                                                    F,
                                                                                    [ Ty.path "u64"
                                                                                    ],
                                                                                    "from",
                                                                                    []
                                                                                  |),
                                                                                  [
                                                                                    M.read (|
                                                                                      M.use
                                                                                        (M.alloc (|
                                                                                          Value.Integer
                                                                                            1
                                                                                        |))
                                                                                    |)
                                                                                  ]
                                                                                |)
                                                                              ]
                                                                          ]
                                                                        |)
                                                                      ]
                                                                    |);
                                                                    M.call_closure (|
                                                                      M.get_trait_method (|
                                                                        "core::ops::arith::Mul",
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "halo2_proofs::plonk::circuit::Expression")
                                                                          [ F ],
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "halo2_proofs::plonk::circuit::Expression")
                                                                            [ F ]
                                                                        ],
                                                                        "mul",
                                                                        []
                                                                      |),
                                                                      [
                                                                        M.call_closure (|
                                                                          M.get_trait_method (|
                                                                            "core::ops::arith::Sub",
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "halo2_proofs::plonk::circuit::Expression")
                                                                              [ F ],
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "halo2_proofs::plonk::circuit::Expression")
                                                                                [ F ]
                                                                            ],
                                                                            "sub",
                                                                            []
                                                                          |),
                                                                          [
                                                                            M.call_closure (|
                                                                              M.get_trait_method (|
                                                                                "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                                                                  [ F ],
                                                                                [ F ],
                                                                                "curr_expr",
                                                                                []
                                                                              |),
                                                                              [
                                                                                is_mutable;
                                                                                M.read (| meta |)
                                                                              ]
                                                                            |);
                                                                            M.call_closure (|
                                                                              M.get_trait_method (|
                                                                                "delphinus_zkwasm::circuits::mtable::allocator::MemoryTableCellExpression",
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                                                                  [ F ],
                                                                                [ F ],
                                                                                "next_expr",
                                                                                []
                                                                              |),
                                                                              [
                                                                                is_mutable;
                                                                                M.read (| meta |)
                                                                              ]
                                                                            |)
                                                                          ]
                                                                        |);
                                                                        M.call_closure (|
                                                                          M.get_trait_method (|
                                                                            "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                                                              [ F ],
                                                                            [ F ],
                                                                            "curr_expr",
                                                                            []
                                                                          |),
                                                                          [
                                                                            is_next_same_offset_cell;
                                                                            M.read (| meta |)
                                                                          ]
                                                                        |)
                                                                      ]
                                                                    |)
                                                                  ]
                                                              |)
                                                            ]
                                                          |)
                                                        |))
                                                    ]
                                                  |)
                                                ]
                                              |);
                                              M.closure
                                                (fun γ =>
                                                  ltac:(M.monadic
                                                    match γ with
                                                    | [ α0 ] =>
                                                      M.match_operator (|
                                                        M.alloc (| α0 |),
                                                        [
                                                          fun γ =>
                                                            ltac:(M.monadic
                                                              (let x := M.copy (| γ |) in
                                                              M.call_closure (|
                                                                M.get_trait_method (|
                                                                  "core::ops::arith::Mul",
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "halo2_proofs::plonk::circuit::Expression")
                                                                    [ F ],
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "halo2_proofs::plonk::circuit::Expression")
                                                                      [ F ]
                                                                  ],
                                                                  "mul",
                                                                  []
                                                                |),
                                                                [
                                                                  M.call_closure (|
                                                                    M.get_trait_method (|
                                                                      "core::ops::arith::Mul",
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "halo2_proofs::plonk::circuit::Expression")
                                                                        [ F ],
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "halo2_proofs::plonk::circuit::Expression")
                                                                          [ F ]
                                                                      ],
                                                                      "mul",
                                                                      []
                                                                    |),
                                                                    [
                                                                      M.read (| x |);
                                                                      M.call_closure (|
                                                                        M.get_trait_method (|
                                                                          "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                                                            [ F ],
                                                                          [ F ],
                                                                          "curr_expr",
                                                                          []
                                                                        |),
                                                                        [
                                                                          enabled_cell;
                                                                          M.read (| meta |)
                                                                        ]
                                                                      |)
                                                                    ]
                                                                  |);
                                                                  M.call_closure (|
                                                                    M.get_associated_function (|
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "halo2_proofs::plonk::circuit::VirtualCells")
                                                                        [ F ],
                                                                      "query_fixed",
                                                                      []
                                                                    |),
                                                                    [
                                                                      M.read (| meta |);
                                                                      M.read (| entry_sel |);
                                                                      M.call_closure (|
                                                                        M.get_associated_function (|
                                                                          Ty.path
                                                                            "halo2_proofs::poly::Rotation",
                                                                          "cur",
                                                                          []
                                                                        |),
                                                                        []
                                                                      |)
                                                                    ]
                                                                  |)
                                                                ]
                                                              |)))
                                                        ]
                                                      |)
                                                    | _ => M.impossible (||)
                                                    end))
                                            ]
                                          |)
                                        ]
                                      |)))
                                ]
                              |)
                            | _ => M.impossible (||)
                            end))
                    ]
                  |)
                |) in
              let _ :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply (Ty.path "halo2_proofs::plonk::circuit::ConstraintSystem") [ F ],
                      "create_gate",
                      [
                        Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ];
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          [
                            Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ];
                            Ty.path "alloc::alloc::Global"
                          ];
                        Ty.function
                          [
                            Ty.tuple
                              [
                                Ty.apply
                                  (Ty.path "&mut")
                                  [
                                    Ty.apply
                                      (Ty.path "halo2_proofs::plonk::circuit::VirtualCells")
                                      [ F ]
                                  ]
                              ]
                          ]
                          (Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            [
                              Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ];
                              Ty.path "alloc::alloc::Global"
                            ])
                      ]
                    |),
                    [
                      M.read (| meta |);
                      M.read (| Value.String "mc12. lookup encode" |);
                      M.closure
                        (fun γ =>
                          ltac:(M.monadic
                            match γ with
                            | [ α0 ] =>
                              M.match_operator (|
                                M.alloc (| α0 |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let meta := M.copy (| γ |) in
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "core::iter::traits::iterator::Iterator",
                                          Ty.apply
                                            (Ty.path "core::iter::adapters::map::Map")
                                            [
                                              Ty.apply
                                                (Ty.path "alloc::vec::into_iter::IntoIter")
                                                [
                                                  Ty.apply
                                                    (Ty.path
                                                      "halo2_proofs::plonk::circuit::Expression")
                                                    [ F ];
                                                  Ty.path "alloc::alloc::Global"
                                                ];
                                              Ty.function
                                                [
                                                  Ty.tuple
                                                    [
                                                      Ty.apply
                                                        (Ty.path
                                                          "halo2_proofs::plonk::circuit::Expression")
                                                        [ F ]
                                                    ]
                                                ]
                                                (Ty.apply
                                                  (Ty.path
                                                    "halo2_proofs::plonk::circuit::Expression")
                                                  [ F ])
                                            ],
                                          [],
                                          "collect",
                                          [
                                            Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              [
                                                Ty.apply
                                                  (Ty.path
                                                    "halo2_proofs::plonk::circuit::Expression")
                                                  [ F ];
                                                Ty.path "alloc::alloc::Global"
                                              ]
                                          ]
                                        |),
                                        [
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "core::iter::traits::iterator::Iterator",
                                              Ty.apply
                                                (Ty.path "alloc::vec::into_iter::IntoIter")
                                                [
                                                  Ty.apply
                                                    (Ty.path
                                                      "halo2_proofs::plonk::circuit::Expression")
                                                    [ F ];
                                                  Ty.path "alloc::alloc::Global"
                                                ],
                                              [],
                                              "map",
                                              [
                                                Ty.apply
                                                  (Ty.path
                                                    "halo2_proofs::plonk::circuit::Expression")
                                                  [ F ];
                                                Ty.function
                                                  [
                                                    Ty.tuple
                                                      [
                                                        Ty.apply
                                                          (Ty.path
                                                            "halo2_proofs::plonk::circuit::Expression")
                                                          [ F ]
                                                      ]
                                                  ]
                                                  (Ty.apply
                                                    (Ty.path
                                                      "halo2_proofs::plonk::circuit::Expression")
                                                    [ F ])
                                              ]
                                            |),
                                            [
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "core::iter::traits::collect::IntoIterator",
                                                  Ty.apply
                                                    (Ty.path "alloc::vec::Vec")
                                                    [
                                                      Ty.apply
                                                        (Ty.path
                                                          "halo2_proofs::plonk::circuit::Expression")
                                                        [ F ];
                                                      Ty.path "alloc::alloc::Global"
                                                    ],
                                                  [],
                                                  "into_iter",
                                                  []
                                                |),
                                                [
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.apply
                                                        (Ty.path "slice")
                                                        [
                                                          Ty.apply
                                                            (Ty.path
                                                              "halo2_proofs::plonk::circuit::Expression")
                                                            [ F ]
                                                        ],
                                                      "into_vec",
                                                      [ Ty.path "alloc::alloc::Global" ]
                                                    |),
                                                    [
                                                      (* Unsize *)
                                                      M.pointer_coercion
                                                        (M.read (|
                                                          M.call_closure (|
                                                            M.get_associated_function (|
                                                              Ty.apply
                                                                (Ty.path "alloc::boxed::Box")
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path "array")
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "halo2_proofs::plonk::circuit::Expression")
                                                                        [ F ]
                                                                    ];
                                                                  Ty.path "alloc::alloc::Global"
                                                                ],
                                                              "new",
                                                              []
                                                            |),
                                                            [
                                                              M.alloc (|
                                                                Value.Array
                                                                  [
                                                                    M.call_closure (|
                                                                      M.get_trait_method (|
                                                                        "core::ops::arith::Mul",
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "halo2_proofs::plonk::circuit::Expression")
                                                                          [ F ],
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "halo2_proofs::plonk::circuit::Expression")
                                                                            [ F ]
                                                                        ],
                                                                        "mul",
                                                                        []
                                                                      |),
                                                                      [
                                                                        M.call_closure (|
                                                                          M.get_trait_method (|
                                                                            "core::ops::arith::Sub",
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "halo2_proofs::plonk::circuit::Expression")
                                                                              [ F ],
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "halo2_proofs::plonk::circuit::Expression")
                                                                                [ F ]
                                                                            ],
                                                                            "sub",
                                                                            []
                                                                          |),
                                                                          [
                                                                            Value.StructTuple
                                                                              "halo2_proofs::plonk::circuit::Expression::Constant"
                                                                              [
                                                                                M.call_closure (|
                                                                                  M.get_trait_method (|
                                                                                    "core::convert::From",
                                                                                    F,
                                                                                    [ Ty.path "u64"
                                                                                    ],
                                                                                    "from",
                                                                                    []
                                                                                  |),
                                                                                  [
                                                                                    M.read (|
                                                                                      M.use
                                                                                        (M.alloc (|
                                                                                          Value.Integer
                                                                                            1
                                                                                        |))
                                                                                    |)
                                                                                  ]
                                                                                |)
                                                                              ];
                                                                            M.call_closure (|
                                                                              M.get_trait_method (|
                                                                                "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                                                                  [ F ],
                                                                                [ F ],
                                                                                "curr_expr",
                                                                                []
                                                                              |),
                                                                              [
                                                                                enabled_cell;
                                                                                M.read (| meta |)
                                                                              ]
                                                                            |)
                                                                          ]
                                                                        |);
                                                                        M.call_closure (|
                                                                          M.get_trait_method (|
                                                                            "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "delphinus_zkwasm::circuits::cell::AllocatedUnlimitedCell")
                                                                              [ F ],
                                                                            [ F ],
                                                                            "curr_expr",
                                                                            []
                                                                          |),
                                                                          [
                                                                            encode_cell;
                                                                            M.read (| meta |)
                                                                          ]
                                                                        |)
                                                                      ]
                                                                    |);
                                                                    M.call_closure (|
                                                                      M.get_trait_method (|
                                                                        "core::ops::arith::Sub",
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "halo2_proofs::plonk::circuit::Expression")
                                                                          [ F ],
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "halo2_proofs::plonk::circuit::Expression")
                                                                            [ F ]
                                                                        ],
                                                                        "sub",
                                                                        []
                                                                      |),
                                                                      [
                                                                        M.call_closure (|
                                                                          M.get_function (|
                                                                            "specs::encode::memory_table::encode_memory_table_entry",
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "halo2_proofs::plonk::circuit::Expression")
                                                                                [ F ]
                                                                            ]
                                                                          |),
                                                                          [
                                                                            M.call_closure (|
                                                                              M.get_associated_function (|
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "delphinus_zkwasm::circuits::cell::AllocatedU32Cell")
                                                                                  [ F ],
                                                                                "curr_expr",
                                                                                []
                                                                              |),
                                                                              [
                                                                                offset_cell;
                                                                                M.read (| meta |)
                                                                              ]
                                                                            |);
                                                                            M.call_closure (|
                                                                              M.get_trait_method (|
                                                                                "core::ops::arith::Add",
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "halo2_proofs::plonk::circuit::Expression")
                                                                                  [ F ],
                                                                                [
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "halo2_proofs::plonk::circuit::Expression")
                                                                                    [ F ]
                                                                                ],
                                                                                "add",
                                                                                []
                                                                              |),
                                                                              [
                                                                                M.call_closure (|
                                                                                  M.get_trait_method (|
                                                                                    "core::ops::arith::Add",
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "halo2_proofs::plonk::circuit::Expression")
                                                                                      [ F ],
                                                                                    [
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "halo2_proofs::plonk::circuit::Expression")
                                                                                        [ F ]
                                                                                    ],
                                                                                    "add",
                                                                                    []
                                                                                  |),
                                                                                  [
                                                                                    M.call_closure (|
                                                                                      M.get_trait_method (|
                                                                                        "core::ops::arith::Mul",
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "halo2_proofs::plonk::circuit::Expression")
                                                                                          [ F ],
                                                                                        [
                                                                                          Ty.apply
                                                                                            (Ty.path
                                                                                              "halo2_proofs::plonk::circuit::Expression")
                                                                                            [ F ]
                                                                                        ],
                                                                                        "mul",
                                                                                        []
                                                                                      |),
                                                                                      [
                                                                                        M.call_closure (|
                                                                                          M.get_trait_method (|
                                                                                            "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                                            Ty.apply
                                                                                              (Ty.path
                                                                                                "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                                                                              [ F ],
                                                                                            [ F ],
                                                                                            "curr_expr",
                                                                                            []
                                                                                          |),
                                                                                          [
                                                                                            is_stack_cell;
                                                                                            M.read (|
                                                                                              meta
                                                                                            |)
                                                                                          ]
                                                                                        |);
                                                                                        Value.StructTuple
                                                                                          "halo2_proofs::plonk::circuit::Expression::Constant"
                                                                                          [
                                                                                            M.call_closure (|
                                                                                              M.get_trait_method (|
                                                                                                "core::convert::From",
                                                                                                F,
                                                                                                [
                                                                                                  Ty.path
                                                                                                    "u64"
                                                                                                ],
                                                                                                "from",
                                                                                                []
                                                                                              |),
                                                                                              [
                                                                                                M.read (|
                                                                                                  M.use
                                                                                                    (M.alloc (|
                                                                                                      M.rust_cast
                                                                                                        (BinOp.Panic.add (|
                                                                                                          Integer.Isize,
                                                                                                          M.get_constant (|
                                                                                                            "specs::mtable::LocationType::Stack_discriminant"
                                                                                                          |),
                                                                                                          Value.Integer
                                                                                                            0
                                                                                                        |))
                                                                                                    |))
                                                                                                |)
                                                                                              ]
                                                                                            |)
                                                                                          ]
                                                                                      ]
                                                                                    |);
                                                                                    M.call_closure (|
                                                                                      M.get_trait_method (|
                                                                                        "core::ops::arith::Mul",
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "halo2_proofs::plonk::circuit::Expression")
                                                                                          [ F ],
                                                                                        [
                                                                                          Ty.apply
                                                                                            (Ty.path
                                                                                              "halo2_proofs::plonk::circuit::Expression")
                                                                                            [ F ]
                                                                                        ],
                                                                                        "mul",
                                                                                        []
                                                                                      |),
                                                                                      [
                                                                                        M.call_closure (|
                                                                                          M.get_trait_method (|
                                                                                            "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                                            Ty.apply
                                                                                              (Ty.path
                                                                                                "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                                                                              [ F ],
                                                                                            [ F ],
                                                                                            "curr_expr",
                                                                                            []
                                                                                          |),
                                                                                          [
                                                                                            is_global_cell;
                                                                                            M.read (|
                                                                                              meta
                                                                                            |)
                                                                                          ]
                                                                                        |);
                                                                                        Value.StructTuple
                                                                                          "halo2_proofs::plonk::circuit::Expression::Constant"
                                                                                          [
                                                                                            M.call_closure (|
                                                                                              M.get_trait_method (|
                                                                                                "core::convert::From",
                                                                                                F,
                                                                                                [
                                                                                                  Ty.path
                                                                                                    "u64"
                                                                                                ],
                                                                                                "from",
                                                                                                []
                                                                                              |),
                                                                                              [
                                                                                                M.read (|
                                                                                                  M.use
                                                                                                    (M.alloc (|
                                                                                                      M.rust_cast
                                                                                                        (BinOp.Panic.add (|
                                                                                                          Integer.Isize,
                                                                                                          M.get_constant (|
                                                                                                            "specs::mtable::LocationType::Global_discriminant"
                                                                                                          |),
                                                                                                          Value.Integer
                                                                                                            0
                                                                                                        |))
                                                                                                    |))
                                                                                                |)
                                                                                              ]
                                                                                            |)
                                                                                          ]
                                                                                      ]
                                                                                    |)
                                                                                  ]
                                                                                |);
                                                                                M.call_closure (|
                                                                                  M.get_trait_method (|
                                                                                    "core::ops::arith::Mul",
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "halo2_proofs::plonk::circuit::Expression")
                                                                                      [ F ],
                                                                                    [
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "halo2_proofs::plonk::circuit::Expression")
                                                                                        [ F ]
                                                                                    ],
                                                                                    "mul",
                                                                                    []
                                                                                  |),
                                                                                  [
                                                                                    M.call_closure (|
                                                                                      M.get_trait_method (|
                                                                                        "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                                                                          [ F ],
                                                                                        [ F ],
                                                                                        "curr_expr",
                                                                                        []
                                                                                      |),
                                                                                      [
                                                                                        is_heap_cell;
                                                                                        M.read (|
                                                                                          meta
                                                                                        |)
                                                                                      ]
                                                                                    |);
                                                                                    Value.StructTuple
                                                                                      "halo2_proofs::plonk::circuit::Expression::Constant"
                                                                                      [
                                                                                        M.call_closure (|
                                                                                          M.get_trait_method (|
                                                                                            "core::convert::From",
                                                                                            F,
                                                                                            [
                                                                                              Ty.path
                                                                                                "u64"
                                                                                            ],
                                                                                            "from",
                                                                                            []
                                                                                          |),
                                                                                          [
                                                                                            M.rust_cast
                                                                                              (BinOp.Panic.add (|
                                                                                                Integer.Isize,
                                                                                                M.get_constant (|
                                                                                                  "specs::mtable::LocationType::Heap_discriminant"
                                                                                                |),
                                                                                                Value.Integer
                                                                                                  0
                                                                                              |))
                                                                                          ]
                                                                                        |)
                                                                                      ]
                                                                                  ]
                                                                                |)
                                                                              ]
                                                                            |);
                                                                            M.call_closure (|
                                                                              M.get_trait_method (|
                                                                                "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                                                                  [ F ],
                                                                                [ F ],
                                                                                "curr_expr",
                                                                                []
                                                                              |),
                                                                              [
                                                                                is_i32_cell;
                                                                                M.read (| meta |)
                                                                              ]
                                                                            |)
                                                                          ]
                                                                        |);
                                                                        M.call_closure (|
                                                                          M.get_trait_method (|
                                                                            "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "delphinus_zkwasm::circuits::cell::AllocatedUnlimitedCell")
                                                                              [ F ],
                                                                            [ F ],
                                                                            "curr_expr",
                                                                            []
                                                                          |),
                                                                          [
                                                                            encode_cell;
                                                                            M.read (| meta |)
                                                                          ]
                                                                        |)
                                                                      ]
                                                                    |)
                                                                  ]
                                                              |)
                                                            ]
                                                          |)
                                                        |))
                                                    ]
                                                  |)
                                                ]
                                              |);
                                              M.closure
                                                (fun γ =>
                                                  ltac:(M.monadic
                                                    match γ with
                                                    | [ α0 ] =>
                                                      M.match_operator (|
                                                        M.alloc (| α0 |),
                                                        [
                                                          fun γ =>
                                                            ltac:(M.monadic
                                                              (let x := M.copy (| γ |) in
                                                              M.call_closure (|
                                                                M.get_trait_method (|
                                                                  "core::ops::arith::Mul",
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "halo2_proofs::plonk::circuit::Expression")
                                                                    [ F ],
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "halo2_proofs::plonk::circuit::Expression")
                                                                      [ F ]
                                                                  ],
                                                                  "mul",
                                                                  []
                                                                |),
                                                                [
                                                                  M.read (| x |);
                                                                  M.call_closure (|
                                                                    M.get_associated_function (|
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "halo2_proofs::plonk::circuit::VirtualCells")
                                                                        [ F ],
                                                                      "query_fixed",
                                                                      []
                                                                    |),
                                                                    [
                                                                      M.read (| meta |);
                                                                      M.read (| entry_sel |);
                                                                      M.call_closure (|
                                                                        M.get_associated_function (|
                                                                          Ty.path
                                                                            "halo2_proofs::poly::Rotation",
                                                                          "cur",
                                                                          []
                                                                        |),
                                                                        []
                                                                      |)
                                                                    ]
                                                                  |)
                                                                ]
                                                              |)))
                                                        ]
                                                      |)
                                                    | _ => M.impossible (||)
                                                    end))
                                            ]
                                          |)
                                        ]
                                      |)))
                                ]
                              |)
                            | _ => M.impossible (||)
                            end))
                    ]
                  |)
                |) in
              M.alloc (|
                Value.StructRecord
                  "delphinus_zkwasm::circuits::mtable::MemoryTableConfig"
                  [
                    ("entry_sel", M.read (| entry_sel |));
                    ("enabled_cell", M.read (| enabled_cell |));
                    ("is_stack_cell", M.read (| is_stack_cell |));
                    ("is_heap_cell", M.read (| is_heap_cell |));
                    ("is_global_cell", M.read (| is_global_cell |));
                    ("is_next_same_ltype_cell", M.read (| is_next_same_ltype_cell |));
                    ("is_next_same_offset_cell", M.read (| is_next_same_offset_cell |));
                    ("is_mutable", M.read (| is_mutable |));
                    ("is_i32_cell", M.read (| is_i32_cell |));
                    ("is_i64_cell", M.read (| is_i64_cell |));
                    ("is_init_cell", M.read (| is_init_cell |));
                    ("start_eid_cell", M.read (| start_eid_cell |));
                    ("end_eid_cell", M.read (| end_eid_cell |));
                    ("eid_diff_cell", M.read (| eid_diff_cell |));
                    ("rest_mops_cell", M.read (| rest_mops_cell |));
                    ("offset_cell", M.read (| offset_cell |));
                    ("offset_diff_cell", M.read (| offset_diff_cell |));
                    ("offset_diff_inv_cell", M.read (| offset_diff_inv_cell |));
                    ("offset_diff_inv_helper_cell", M.read (| offset_diff_inv_helper_cell |));
                    ("value", M.read (| value |));
                    ("init_encode_cell", M.read (| init_encode_cell |));
                    ("encode_cell", M.read (| encode_cell |))
                  ]
              |)
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom AssociatedFunction_configure :
        forall (F : Ty.t),
        M.IsAssociatedFunction (Self F) "configure" (configure F).
    End Impl_delphinus_zkwasm_circuits_mtable_MemoryTableConfig_F.
    
    Module Impl_delphinus_zkwasm_circuits_traits_ConfigureLookupTable_where_pairing_bn256_arithmetic_fields_FieldExt_F_F_for_delphinus_zkwasm_circuits_mtable_MemoryTableConfig_F.
      Definition Self (F : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "delphinus_zkwasm::circuits::mtable::MemoryTableConfig") [ F ].
      
      (*
          fn configure_in_table(
              &self,
              meta: &mut ConstraintSystem<F>,
              name: &'static str,
              expr: impl FnOnce(&mut VirtualCells<'_, F>) -> Vec<Expression<F>>,
          ) {
              meta.lookup_any(name, |meta| {
                  let mut expr = expr(meta);
                  expr.reverse();
                  vec![
                      (
                          expr.pop().unwrap(),
                          self.start_eid_cell.expr(meta) * fixed_curr!(meta, self.entry_sel),
                      ),
                      (
                          expr.pop().unwrap(),
                          self.end_eid_cell.expr(meta) * fixed_curr!(meta, self.entry_sel),
                      ),
                      (
                          expr.pop().unwrap(),
                          self.encode_cell.expr(meta) * fixed_curr!(meta, self.entry_sel),
                      ),
                      (
                          expr.pop().unwrap(),
                          self.value.expr(meta) * fixed_curr!(meta, self.entry_sel),
                      ),
                  ]
              });
          }
      *)
      Definition configure_in_table (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match τ, α with
        | [ impl_FnOnce__mut_VirtualCells_'___F___arrow_Vec_Expression_F__ ],
            [ self; meta; name; expr ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let meta := M.alloc (| meta |) in
            let name := M.alloc (| name |) in
            let expr := M.alloc (| expr |) in
            M.read (|
              let _ :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply (Ty.path "halo2_proofs::plonk::circuit::ConstraintSystem") [ F ],
                      "lookup_any",
                      [
                        Ty.function
                          [
                            Ty.tuple
                              [
                                Ty.apply
                                  (Ty.path "&mut")
                                  [
                                    Ty.apply
                                      (Ty.path "halo2_proofs::plonk::circuit::VirtualCells")
                                      [ F ]
                                  ]
                              ]
                          ]
                          (Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            [
                              Ty.tuple
                                [
                                  Ty.apply
                                    (Ty.path "halo2_proofs::plonk::circuit::Expression")
                                    [ F ];
                                  Ty.apply
                                    (Ty.path "halo2_proofs::plonk::circuit::Expression")
                                    [ F ]
                                ];
                              Ty.path "alloc::alloc::Global"
                            ])
                      ]
                    |),
                    [
                      M.read (| meta |);
                      M.read (| name |);
                      M.closure
                        (fun γ =>
                          ltac:(M.monadic
                            match γ with
                            | [ α0 ] =>
                              M.match_operator (|
                                M.alloc (| α0 |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let meta := M.copy (| γ |) in
                                      M.read (|
                                        let expr :=
                                          M.alloc (|
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "core::ops::function::FnOnce",
                                                impl_FnOnce__mut_VirtualCells_'___F___arrow_Vec_Expression_F__,
                                                [
                                                  Ty.tuple
                                                    [
                                                      Ty.apply
                                                        (Ty.path "&mut")
                                                        [
                                                          Ty.apply
                                                            (Ty.path
                                                              "halo2_proofs::plonk::circuit::VirtualCells")
                                                            [ F ]
                                                        ]
                                                    ]
                                                ],
                                                "call_once",
                                                []
                                              |),
                                              [ M.read (| expr |); Value.Tuple [ M.read (| meta |) ]
                                              ]
                                            |)
                                          |) in
                                        let _ :=
                                          M.alloc (|
                                            M.call_closure (|
                                              M.get_associated_function (|
                                                Ty.apply
                                                  (Ty.path "slice")
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "halo2_proofs::plonk::circuit::Expression")
                                                      [ F ]
                                                  ],
                                                "reverse",
                                                []
                                              |),
                                              [
                                                M.call_closure (|
                                                  M.get_trait_method (|
                                                    "core::ops::deref::DerefMut",
                                                    Ty.apply
                                                      (Ty.path "alloc::vec::Vec")
                                                      [
                                                        Ty.apply
                                                          (Ty.path
                                                            "halo2_proofs::plonk::circuit::Expression")
                                                          [ F ];
                                                        Ty.path "alloc::alloc::Global"
                                                      ],
                                                    [],
                                                    "deref_mut",
                                                    []
                                                  |),
                                                  [ expr ]
                                                |)
                                              ]
                                            |)
                                          |) in
                                        M.alloc (|
                                          M.call_closure (|
                                            M.get_associated_function (|
                                              Ty.apply
                                                (Ty.path "slice")
                                                [
                                                  Ty.tuple
                                                    [
                                                      Ty.apply
                                                        (Ty.path
                                                          "halo2_proofs::plonk::circuit::Expression")
                                                        [ F ];
                                                      Ty.apply
                                                        (Ty.path
                                                          "halo2_proofs::plonk::circuit::Expression")
                                                        [ F ]
                                                    ]
                                                ],
                                              "into_vec",
                                              [ Ty.path "alloc::alloc::Global" ]
                                            |),
                                            [
                                              (* Unsize *)
                                              M.pointer_coercion
                                                (M.read (|
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.apply
                                                        (Ty.path "alloc::boxed::Box")
                                                        [
                                                          Ty.apply
                                                            (Ty.path "array")
                                                            [
                                                              Ty.tuple
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "halo2_proofs::plonk::circuit::Expression")
                                                                    [ F ];
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "halo2_proofs::plonk::circuit::Expression")
                                                                    [ F ]
                                                                ]
                                                            ];
                                                          Ty.path "alloc::alloc::Global"
                                                        ],
                                                      "new",
                                                      []
                                                    |),
                                                    [
                                                      M.alloc (|
                                                        Value.Array
                                                          [
                                                            Value.Tuple
                                                              [
                                                                M.call_closure (|
                                                                  M.get_associated_function (|
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "core::option::Option")
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "halo2_proofs::plonk::circuit::Expression")
                                                                          [ F ]
                                                                      ],
                                                                    "unwrap",
                                                                    []
                                                                  |),
                                                                  [
                                                                    M.call_closure (|
                                                                      M.get_associated_function (|
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "alloc::vec::Vec")
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "halo2_proofs::plonk::circuit::Expression")
                                                                              [ F ];
                                                                            Ty.path
                                                                              "alloc::alloc::Global"
                                                                          ],
                                                                        "pop",
                                                                        []
                                                                      |),
                                                                      [ expr ]
                                                                    |)
                                                                  ]
                                                                |);
                                                                M.call_closure (|
                                                                  M.get_trait_method (|
                                                                    "core::ops::arith::Mul",
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "halo2_proofs::plonk::circuit::Expression")
                                                                      [ F ],
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "halo2_proofs::plonk::circuit::Expression")
                                                                        [ F ]
                                                                    ],
                                                                    "mul",
                                                                    []
                                                                  |),
                                                                  [
                                                                    M.call_closure (|
                                                                      M.get_trait_method (|
                                                                        "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "delphinus_zkwasm::circuits::cell::AllocatedCommonRangeCell")
                                                                          [ F ],
                                                                        [ F ],
                                                                        "expr",
                                                                        []
                                                                      |),
                                                                      [
                                                                        M.SubPointer.get_struct_record_field (|
                                                                          M.read (| self |),
                                                                          "delphinus_zkwasm::circuits::mtable::MemoryTableConfig",
                                                                          "start_eid_cell"
                                                                        |);
                                                                        M.read (| meta |)
                                                                      ]
                                                                    |);
                                                                    M.call_closure (|
                                                                      M.get_associated_function (|
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "halo2_proofs::plonk::circuit::VirtualCells")
                                                                          [ F ],
                                                                        "query_fixed",
                                                                        []
                                                                      |),
                                                                      [
                                                                        M.read (| meta |);
                                                                        M.read (|
                                                                          M.SubPointer.get_struct_record_field (|
                                                                            M.read (| self |),
                                                                            "delphinus_zkwasm::circuits::mtable::MemoryTableConfig",
                                                                            "entry_sel"
                                                                          |)
                                                                        |);
                                                                        M.call_closure (|
                                                                          M.get_associated_function (|
                                                                            Ty.path
                                                                              "halo2_proofs::poly::Rotation",
                                                                            "cur",
                                                                            []
                                                                          |),
                                                                          []
                                                                        |)
                                                                      ]
                                                                    |)
                                                                  ]
                                                                |)
                                                              ];
                                                            Value.Tuple
                                                              [
                                                                M.call_closure (|
                                                                  M.get_associated_function (|
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "core::option::Option")
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "halo2_proofs::plonk::circuit::Expression")
                                                                          [ F ]
                                                                      ],
                                                                    "unwrap",
                                                                    []
                                                                  |),
                                                                  [
                                                                    M.call_closure (|
                                                                      M.get_associated_function (|
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "alloc::vec::Vec")
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "halo2_proofs::plonk::circuit::Expression")
                                                                              [ F ];
                                                                            Ty.path
                                                                              "alloc::alloc::Global"
                                                                          ],
                                                                        "pop",
                                                                        []
                                                                      |),
                                                                      [ expr ]
                                                                    |)
                                                                  ]
                                                                |);
                                                                M.call_closure (|
                                                                  M.get_trait_method (|
                                                                    "core::ops::arith::Mul",
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "halo2_proofs::plonk::circuit::Expression")
                                                                      [ F ],
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "halo2_proofs::plonk::circuit::Expression")
                                                                        [ F ]
                                                                    ],
                                                                    "mul",
                                                                    []
                                                                  |),
                                                                  [
                                                                    M.call_closure (|
                                                                      M.get_trait_method (|
                                                                        "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "delphinus_zkwasm::circuits::cell::AllocatedCommonRangeCell")
                                                                          [ F ],
                                                                        [ F ],
                                                                        "expr",
                                                                        []
                                                                      |),
                                                                      [
                                                                        M.SubPointer.get_struct_record_field (|
                                                                          M.read (| self |),
                                                                          "delphinus_zkwasm::circuits::mtable::MemoryTableConfig",
                                                                          "end_eid_cell"
                                                                        |);
                                                                        M.read (| meta |)
                                                                      ]
                                                                    |);
                                                                    M.call_closure (|
                                                                      M.get_associated_function (|
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "halo2_proofs::plonk::circuit::VirtualCells")
                                                                          [ F ],
                                                                        "query_fixed",
                                                                        []
                                                                      |),
                                                                      [
                                                                        M.read (| meta |);
                                                                        M.read (|
                                                                          M.SubPointer.get_struct_record_field (|
                                                                            M.read (| self |),
                                                                            "delphinus_zkwasm::circuits::mtable::MemoryTableConfig",
                                                                            "entry_sel"
                                                                          |)
                                                                        |);
                                                                        M.call_closure (|
                                                                          M.get_associated_function (|
                                                                            Ty.path
                                                                              "halo2_proofs::poly::Rotation",
                                                                            "cur",
                                                                            []
                                                                          |),
                                                                          []
                                                                        |)
                                                                      ]
                                                                    |)
                                                                  ]
                                                                |)
                                                              ];
                                                            Value.Tuple
                                                              [
                                                                M.call_closure (|
                                                                  M.get_associated_function (|
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "core::option::Option")
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "halo2_proofs::plonk::circuit::Expression")
                                                                          [ F ]
                                                                      ],
                                                                    "unwrap",
                                                                    []
                                                                  |),
                                                                  [
                                                                    M.call_closure (|
                                                                      M.get_associated_function (|
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "alloc::vec::Vec")
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "halo2_proofs::plonk::circuit::Expression")
                                                                              [ F ];
                                                                            Ty.path
                                                                              "alloc::alloc::Global"
                                                                          ],
                                                                        "pop",
                                                                        []
                                                                      |),
                                                                      [ expr ]
                                                                    |)
                                                                  ]
                                                                |);
                                                                M.call_closure (|
                                                                  M.get_trait_method (|
                                                                    "core::ops::arith::Mul",
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "halo2_proofs::plonk::circuit::Expression")
                                                                      [ F ],
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "halo2_proofs::plonk::circuit::Expression")
                                                                        [ F ]
                                                                    ],
                                                                    "mul",
                                                                    []
                                                                  |),
                                                                  [
                                                                    M.call_closure (|
                                                                      M.get_trait_method (|
                                                                        "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "delphinus_zkwasm::circuits::cell::AllocatedUnlimitedCell")
                                                                          [ F ],
                                                                        [ F ],
                                                                        "expr",
                                                                        []
                                                                      |),
                                                                      [
                                                                        M.SubPointer.get_struct_record_field (|
                                                                          M.read (| self |),
                                                                          "delphinus_zkwasm::circuits::mtable::MemoryTableConfig",
                                                                          "encode_cell"
                                                                        |);
                                                                        M.read (| meta |)
                                                                      ]
                                                                    |);
                                                                    M.call_closure (|
                                                                      M.get_associated_function (|
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "halo2_proofs::plonk::circuit::VirtualCells")
                                                                          [ F ],
                                                                        "query_fixed",
                                                                        []
                                                                      |),
                                                                      [
                                                                        M.read (| meta |);
                                                                        M.read (|
                                                                          M.SubPointer.get_struct_record_field (|
                                                                            M.read (| self |),
                                                                            "delphinus_zkwasm::circuits::mtable::MemoryTableConfig",
                                                                            "entry_sel"
                                                                          |)
                                                                        |);
                                                                        M.call_closure (|
                                                                          M.get_associated_function (|
                                                                            Ty.path
                                                                              "halo2_proofs::poly::Rotation",
                                                                            "cur",
                                                                            []
                                                                          |),
                                                                          []
                                                                        |)
                                                                      ]
                                                                    |)
                                                                  ]
                                                                |)
                                                              ];
                                                            Value.Tuple
                                                              [
                                                                M.call_closure (|
                                                                  M.get_associated_function (|
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "core::option::Option")
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "halo2_proofs::plonk::circuit::Expression")
                                                                          [ F ]
                                                                      ],
                                                                    "unwrap",
                                                                    []
                                                                  |),
                                                                  [
                                                                    M.call_closure (|
                                                                      M.get_associated_function (|
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "alloc::vec::Vec")
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "halo2_proofs::plonk::circuit::Expression")
                                                                              [ F ];
                                                                            Ty.path
                                                                              "alloc::alloc::Global"
                                                                          ],
                                                                        "pop",
                                                                        []
                                                                      |),
                                                                      [ expr ]
                                                                    |)
                                                                  ]
                                                                |);
                                                                M.call_closure (|
                                                                  M.get_trait_method (|
                                                                    "core::ops::arith::Mul",
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "halo2_proofs::plonk::circuit::Expression")
                                                                      [ F ],
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "halo2_proofs::plonk::circuit::Expression")
                                                                        [ F ]
                                                                    ],
                                                                    "mul",
                                                                    []
                                                                  |),
                                                                  [
                                                                    M.call_closure (|
                                                                      M.get_associated_function (|
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "delphinus_zkwasm::circuits::cell::AllocatedU64Cell")
                                                                          [ F ],
                                                                        "expr",
                                                                        []
                                                                      |),
                                                                      [
                                                                        M.SubPointer.get_struct_record_field (|
                                                                          M.read (| self |),
                                                                          "delphinus_zkwasm::circuits::mtable::MemoryTableConfig",
                                                                          "value"
                                                                        |);
                                                                        M.read (| meta |)
                                                                      ]
                                                                    |);
                                                                    M.call_closure (|
                                                                      M.get_associated_function (|
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "halo2_proofs::plonk::circuit::VirtualCells")
                                                                          [ F ],
                                                                        "query_fixed",
                                                                        []
                                                                      |),
                                                                      [
                                                                        M.read (| meta |);
                                                                        M.read (|
                                                                          M.SubPointer.get_struct_record_field (|
                                                                            M.read (| self |),
                                                                            "delphinus_zkwasm::circuits::mtable::MemoryTableConfig",
                                                                            "entry_sel"
                                                                          |)
                                                                        |);
                                                                        M.call_closure (|
                                                                          M.get_associated_function (|
                                                                            Ty.path
                                                                              "halo2_proofs::poly::Rotation",
                                                                            "cur",
                                                                            []
                                                                          |),
                                                                          []
                                                                        |)
                                                                      ]
                                                                    |)
                                                                  ]
                                                                |)
                                                              ]
                                                          ]
                                                      |)
                                                    ]
                                                  |)
                                                |))
                                            ]
                                          |)
                                        |)
                                      |)))
                                ]
                              |)
                            | _ => M.impossible (||)
                            end))
                    ]
                  |)
                |) in
              M.alloc (| Value.Tuple [] |)
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        forall (F : Ty.t),
        M.IsTraitInstance
          "delphinus_zkwasm::circuits::traits::ConfigureLookupTable"
          (Self F)
          (* Trait polymorphic types *) [ (* F *) F ]
          (* Instance *) [ ("configure_in_table", InstanceField.Method (configure_in_table F)) ].
    End Impl_delphinus_zkwasm_circuits_traits_ConfigureLookupTable_where_pairing_bn256_arithmetic_fields_FieldExt_F_F_for_delphinus_zkwasm_circuits_mtable_MemoryTableConfig_F.
    
    (* StructRecord
      {
        name := "MemoryTableChip";
        ty_params := [ "F" ];
        fields :=
          [
            ("config",
              Ty.apply (Ty.path "delphinus_zkwasm::circuits::mtable::MemoryTableConfig") [ F ]);
            ("maximal_available_rows", Ty.path "usize")
          ];
      } *)
    
    Module Impl_delphinus_zkwasm_circuits_mtable_MemoryTableChip_F.
      Definition Self (F : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "delphinus_zkwasm::circuits::mtable::MemoryTableChip") [ F ].
      
      (*
          pub(super) fn new(config: MemoryTableConfig<F>, maximal_available_rows: usize) -> Self {
              Self {
                  config,
                  maximal_available_rows: maximal_available_rows / MEMORY_TABLE_ENTRY_ROWS as usize
                      * MEMORY_TABLE_ENTRY_ROWS as usize,
              }
          }
      *)
      Definition new (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match τ, α with
        | [], [ config; maximal_available_rows ] =>
          ltac:(M.monadic
            (let config := M.alloc (| config |) in
            let maximal_available_rows := M.alloc (| maximal_available_rows |) in
            Value.StructRecord
              "delphinus_zkwasm::circuits::mtable::MemoryTableChip"
              [
                ("config", M.read (| config |));
                ("maximal_available_rows",
                  BinOp.Panic.mul (|
                    Integer.Usize,
                    BinOp.Panic.div (|
                      Integer.Usize,
                      M.read (| maximal_available_rows |),
                      M.rust_cast
                        (M.read (|
                          M.get_constant (|
                            "delphinus_zkwasm::circuits::mtable::MEMORY_TABLE_ENTRY_ROWS"
                          |)
                        |))
                    |),
                    M.rust_cast
                      (M.read (|
                        M.get_constant (|
                          "delphinus_zkwasm::circuits::mtable::MEMORY_TABLE_ENTRY_ROWS"
                        |)
                      |))
                  |))
              ]))
        | _, _ => M.impossible
        end.
      
      Axiom AssociatedFunction_new :
        forall (F : Ty.t),
        M.IsAssociatedFunction (Self F) "new" (new F).
    End Impl_delphinus_zkwasm_circuits_mtable_MemoryTableChip_F.
  End mtable.
End circuits.
