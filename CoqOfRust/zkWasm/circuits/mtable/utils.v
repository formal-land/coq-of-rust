(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module circuits.
  Module mtable.
    Module utils.
      Definition value_WASM_BLOCK_BYTE_SIZE_SHIFT : Value.t :=
        M.run ltac:(M.monadic (M.alloc (| Value.Integer 3 |))).
      
      Definition value_WASM_BLOCK_BYTE_OFFSET_MASK : Value.t :=
        M.run ltac:(M.monadic (M.alloc (| Value.Integer 7 |))).
      
      Definition value_WASM_BLOCKS_PER_PAGE : Value.t :=
        M.run
          ltac:(M.monadic
            (M.alloc (|
              BinOp.Panic.div (|
                Integer.U32,
                M.rust_cast
                  (M.read (| M.get_constant (| "specs::configure_table::WASM_BYTES_PER_PAGE" |) |)),
                M.read (| M.get_constant (| "core::num::BITS" |) |)
              |)
            |))).
      
      Definition value_WASM_BLOCK_BYTE_SIZE : Value.t :=
        M.run
          ltac:(M.monadic
            (M.alloc (|
              BinOp.Panic.shl (|
                Value.Integer 1,
                M.read (|
                  M.get_constant (|
                    "delphinus_zkwasm::circuits::mtable::utils::WASM_BLOCK_BYTE_SIZE_SHIFT"
                  |)
                |)
              |)
            |))).
      
      (*
      pub(crate) fn block_from_address(address: u32) -> u32 {
          address >> WASM_BLOCK_BYTE_SIZE_SHIFT
      }
      *)
      Definition block_from_address (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ address ] =>
          ltac:(M.monadic
            (let address := M.alloc (| address |) in
            BinOp.Panic.shr (|
              M.read (| address |),
              M.read (|
                M.get_constant (|
                  "delphinus_zkwasm::circuits::mtable::utils::WASM_BLOCK_BYTE_SIZE_SHIFT"
                |)
              |)
            |)))
        | _, _ => M.impossible
        end.
      
      (*
      pub(crate) fn byte_offset_from_address(address: u32) -> u32 {
          address & WASM_BLOCK_BYTE_OFFSET_MASK
      }
      *)
      Definition byte_offset_from_address (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ address ] =>
          ltac:(M.monadic
            (let address := M.alloc (| address |) in
            BinOp.Pure.bit_and
              (M.read (| address |))
              (M.read (|
                M.get_constant (|
                  "delphinus_zkwasm::circuits::mtable::utils::WASM_BLOCK_BYTE_OFFSET_MASK"
                |)
              |))))
        | _, _ => M.impossible
        end.
    End utils.
  End mtable.
End circuits.
