(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module circuits.
  Module post_image_table.
    (* StructRecord
      {
        name := "PostImageTableConfig";
        ty_params := [ "F" ];
        fields := [ ("_mark", Ty.apply (Ty.path "core::marker::PhantomData") [ F ]) ];
      } *)
    
    Module Impl_core_clone_Clone_where_core_clone_Clone_F_where_pairing_bn256_arithmetic_fields_FieldExt_F_for_delphinus_zkwasm_circuits_post_image_table_PostImageTableConfig_F.
      Definition Self (F : Ty.t) : Ty.t :=
        Ty.apply
          (Ty.path "delphinus_zkwasm::circuits::post_image_table::PostImageTableConfig")
          [ F ].
      
      (* Clone *)
      Definition clone (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match τ, α with
        | [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            Value.StructRecord
              "delphinus_zkwasm::circuits::post_image_table::PostImageTableConfig"
              [
                ("_mark",
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.apply (Ty.path "core::marker::PhantomData") [ F ],
                      [],
                      "clone",
                      []
                    |),
                    [
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "delphinus_zkwasm::circuits::post_image_table::PostImageTableConfig",
                        "_mark"
                      |)
                    ]
                  |))
              ]))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        forall (F : Ty.t),
        M.IsTraitInstance
          "core::clone::Clone"
          (Self F)
          (* Trait polymorphic types *) []
          (* Instance *) [ ("clone", InstanceField.Method (clone F)) ].
    End Impl_core_clone_Clone_where_core_clone_Clone_F_where_pairing_bn256_arithmetic_fields_FieldExt_F_for_delphinus_zkwasm_circuits_post_image_table_PostImageTableConfig_F.
    
    Module Impl_delphinus_zkwasm_circuits_post_image_table_PostImageTableConfig_F.
      Definition Self (F : Ty.t) : Ty.t :=
        Ty.apply
          (Ty.path "delphinus_zkwasm::circuits::post_image_table::PostImageTableConfig")
          [ F ].
      
      (*
          pub(in crate::circuits) fn configure(
              _meta: &mut ConstraintSystem<F>,
              _memory_addr_sel: Option<Column<Fixed>>,
              _memory_table: &MemoryTableConfig<F>,
              _pre_image_table: &ImageTableConfig<F>,
          ) -> Self {
              Self { _mark: PhantomData }
          }
      *)
      Definition configure (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match τ, α with
        | [], [ _meta; _memory_addr_sel; _memory_table; _pre_image_table ] =>
          ltac:(M.monadic
            (let _meta := M.alloc (| _meta |) in
            let _memory_addr_sel := M.alloc (| _memory_addr_sel |) in
            let _memory_table := M.alloc (| _memory_table |) in
            let _pre_image_table := M.alloc (| _pre_image_table |) in
            Value.StructRecord
              "delphinus_zkwasm::circuits::post_image_table::PostImageTableConfig"
              [ ("_mark", Value.StructTuple "core::marker::PhantomData" []) ]))
        | _, _ => M.impossible
        end.
      
      Axiom AssociatedFunction_configure :
        forall (F : Ty.t),
        M.IsAssociatedFunction (Self F) "configure" (configure F).
    End Impl_delphinus_zkwasm_circuits_post_image_table_PostImageTableConfig_F.
    
    (* StructRecord
      {
        name := "PostImageTableChip";
        ty_params := [ "F" ];
        fields := [ ("_mark", Ty.apply (Ty.path "core::marker::PhantomData") [ F ]) ];
      } *)
    
    Module Impl_delphinus_zkwasm_circuits_post_image_table_PostImageTableChip_F.
      Definition Self (F : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "delphinus_zkwasm::circuits::post_image_table::PostImageTableChip") [ F ].
      
      (*
          pub(in crate::circuits) fn new(_config: PostImageTableConfig<F>) -> Self {
              Self { _mark: PhantomData }
          }
      *)
      Definition new (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match τ, α with
        | [], [ _config ] =>
          ltac:(M.monadic
            (let _config := M.alloc (| _config |) in
            Value.StructRecord
              "delphinus_zkwasm::circuits::post_image_table::PostImageTableChip"
              [ ("_mark", Value.StructTuple "core::marker::PhantomData" []) ]))
        | _, _ => M.impossible
        end.
      
      Axiom AssociatedFunction_new :
        forall (F : Ty.t),
        M.IsAssociatedFunction (Self F) "new" (new F).
      
      (*
          pub(in crate::circuits) fn assign(
              self,
              _layouter: impl Layouter<F>,
              _image_table_assigner: &ImageTableAssigner,
              _post_image_table: ImageTableLayouter<F>,
              _rest_memory_finalized_count: u32,
              _memory_finalized_set: HashSet<(LocationType, u32)>,
          ) -> Result<Option<(ImageTableLayouter<AssignedCell<F, F>>, AssignedCell<F, F>)>, Error> {
              Ok(None)
          }
      *)
      Definition assign (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match τ, α with
        | [ impl_Layouter_F_ ],
            [
              self;
              _layouter;
              _image_table_assigner;
              _post_image_table;
              _rest_memory_finalized_count;
              _memory_finalized_set
            ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let _layouter := M.alloc (| _layouter |) in
            let _image_table_assigner := M.alloc (| _image_table_assigner |) in
            let _post_image_table := M.alloc (| _post_image_table |) in
            let _rest_memory_finalized_count := M.alloc (| _rest_memory_finalized_count |) in
            let _memory_finalized_set := M.alloc (| _memory_finalized_set |) in
            Value.StructTuple
              "core::result::Result::Ok"
              [ Value.StructTuple "core::option::Option::None" [] ]))
        | _, _ => M.impossible
        end.
      
      Axiom AssociatedFunction_assign :
        forall (F : Ty.t),
        M.IsAssociatedFunction (Self F) "assign" (assign F).
    End Impl_delphinus_zkwasm_circuits_post_image_table_PostImageTableChip_F.
  End post_image_table.
End circuits.
