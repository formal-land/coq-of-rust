(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module circuits.
  Module rtable.
    Definition value_POW_OP : Value.t := M.run ltac:(M.monadic (M.alloc (| Value.Integer 4 |))).
    
    (* StructRecord
      {
        name := "OpTable";
        ty_params := [];
        fields :=
          [
            ("op", Ty.path "halo2_proofs::plonk::circuit::TableColumn");
            ("left", Ty.path "halo2_proofs::plonk::circuit::TableColumn");
            ("right", Ty.path "halo2_proofs::plonk::circuit::TableColumn");
            ("result", Ty.path "halo2_proofs::plonk::circuit::TableColumn")
          ];
      } *)
    
    Module Impl_core_clone_Clone_for_delphinus_zkwasm_circuits_rtable_OpTable.
      Definition Self : Ty.t := Ty.path "delphinus_zkwasm::circuits::rtable::OpTable".
      
      (* Clone *)
      Definition clone (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            Value.StructRecord
              "delphinus_zkwasm::circuits::rtable::OpTable"
              [
                ("op",
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.path "halo2_proofs::plonk::circuit::TableColumn",
                      [],
                      "clone",
                      []
                    |),
                    [
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "delphinus_zkwasm::circuits::rtable::OpTable",
                        "op"
                      |)
                    ]
                  |));
                ("left",
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.path "halo2_proofs::plonk::circuit::TableColumn",
                      [],
                      "clone",
                      []
                    |),
                    [
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "delphinus_zkwasm::circuits::rtable::OpTable",
                        "left"
                      |)
                    ]
                  |));
                ("right",
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.path "halo2_proofs::plonk::circuit::TableColumn",
                      [],
                      "clone",
                      []
                    |),
                    [
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "delphinus_zkwasm::circuits::rtable::OpTable",
                        "right"
                      |)
                    ]
                  |));
                ("result",
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.path "halo2_proofs::plonk::circuit::TableColumn",
                      [],
                      "clone",
                      []
                    |),
                    [
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "delphinus_zkwasm::circuits::rtable::OpTable",
                        "result"
                      |)
                    ]
                  |))
              ]))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::clone::Clone"
          Self
          (* Trait polymorphic types *) []
          (* Instance *) [ ("clone", InstanceField.Method clone) ].
    End Impl_core_clone_Clone_for_delphinus_zkwasm_circuits_rtable_OpTable.
    
    (* StructRecord
      {
        name := "RangeTableConfig";
        ty_params := [ "F" ];
        fields :=
          [
            ("common_range_col", Ty.path "halo2_proofs::plonk::circuit::TableColumn");
            ("u16_col", Ty.path "halo2_proofs::plonk::circuit::TableColumn");
            ("u8_col", Ty.path "halo2_proofs::plonk::circuit::TableColumn");
            ("op_table", Ty.path "delphinus_zkwasm::circuits::rtable::OpTable");
            ("_mark", Ty.apply (Ty.path "core::marker::PhantomData") [ F ])
          ];
      } *)
    
    Module Impl_core_clone_Clone_where_core_clone_Clone_F_where_pairing_bn256_arithmetic_fields_FieldExt_F_for_delphinus_zkwasm_circuits_rtable_RangeTableConfig_F.
      Definition Self (F : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "delphinus_zkwasm::circuits::rtable::RangeTableConfig") [ F ].
      
      (* Clone *)
      Definition clone (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match τ, α with
        | [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            Value.StructRecord
              "delphinus_zkwasm::circuits::rtable::RangeTableConfig"
              [
                ("common_range_col",
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.path "halo2_proofs::plonk::circuit::TableColumn",
                      [],
                      "clone",
                      []
                    |),
                    [
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "delphinus_zkwasm::circuits::rtable::RangeTableConfig",
                        "common_range_col"
                      |)
                    ]
                  |));
                ("u16_col",
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.path "halo2_proofs::plonk::circuit::TableColumn",
                      [],
                      "clone",
                      []
                    |),
                    [
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "delphinus_zkwasm::circuits::rtable::RangeTableConfig",
                        "u16_col"
                      |)
                    ]
                  |));
                ("u8_col",
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.path "halo2_proofs::plonk::circuit::TableColumn",
                      [],
                      "clone",
                      []
                    |),
                    [
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "delphinus_zkwasm::circuits::rtable::RangeTableConfig",
                        "u8_col"
                      |)
                    ]
                  |));
                ("op_table",
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.path "delphinus_zkwasm::circuits::rtable::OpTable",
                      [],
                      "clone",
                      []
                    |),
                    [
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "delphinus_zkwasm::circuits::rtable::RangeTableConfig",
                        "op_table"
                      |)
                    ]
                  |));
                ("_mark",
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.apply (Ty.path "core::marker::PhantomData") [ F ],
                      [],
                      "clone",
                      []
                    |),
                    [
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "delphinus_zkwasm::circuits::rtable::RangeTableConfig",
                        "_mark"
                      |)
                    ]
                  |))
              ]))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        forall (F : Ty.t),
        M.IsTraitInstance
          "core::clone::Clone"
          (Self F)
          (* Trait polymorphic types *) []
          (* Instance *) [ ("clone", InstanceField.Method (clone F)) ].
    End Impl_core_clone_Clone_where_core_clone_Clone_F_where_pairing_bn256_arithmetic_fields_FieldExt_F_for_delphinus_zkwasm_circuits_rtable_RangeTableConfig_F.
    
    (*
    pub fn pow_table_power_encode<T: FromBn>(power: T) -> T {
        T::from_bn(&BigUint::from(POW_TABLE_POWER_START)) + power
    }
    *)
    Definition pow_table_power_encode (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [ T ], [ power ] =>
        ltac:(M.monadic
          (let power := M.alloc (| power |) in
          M.call_closure (|
            M.get_trait_method (| "core::ops::arith::Add", T, [ T ], "add", [] |),
            [
              M.call_closure (|
                M.get_trait_method (| "specs::encode::FromBn", T, [], "from_bn", [] |),
                [
                  M.alloc (|
                    M.call_closure (|
                      M.get_trait_method (|
                        "core::convert::From",
                        Ty.path "num_bigint::biguint::BigUint",
                        [ Ty.path "u64" ],
                        "from",
                        []
                      |),
                      [
                        M.read (|
                          M.get_constant (|
                            "delphinus_zkwasm::circuits::config::POW_TABLE_POWER_START"
                          |)
                        |)
                      ]
                    |)
                  |)
                ]
              |);
              M.read (| power |)
            ]
          |)))
      | _, _ => M.impossible
      end.
    
    Module Impl_delphinus_zkwasm_circuits_rtable_RangeTableConfig_F.
      Definition Self (F : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "delphinus_zkwasm::circuits::rtable::RangeTableConfig") [ F ].
      
      (*
          pub fn configure(meta: &mut ConstraintSystem<F>) -> Self {
              // Shared by u8 lookup and bit table lookup
              let u8_col_multiset = meta.lookup_table_column();
      
              RangeTableConfig {
                  common_range_col: meta.lookup_table_column(),
                  u16_col: meta.lookup_table_column(),
                  u8_col: u8_col_multiset,
                  op_table: OpTable {
                      op: meta.lookup_table_column(),
                      left: u8_col_multiset,
                      right: meta.lookup_table_column(),
                      result: meta.lookup_table_column(),
                  },
                  _mark: PhantomData,
              }
          }
      *)
      Definition configure (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match τ, α with
        | [], [ meta ] =>
          ltac:(M.monadic
            (let meta := M.alloc (| meta |) in
            M.read (|
              let u8_col_multiset :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply (Ty.path "halo2_proofs::plonk::circuit::ConstraintSystem") [ F ],
                      "lookup_table_column",
                      []
                    |),
                    [ M.read (| meta |) ]
                  |)
                |) in
              M.alloc (|
                Value.StructRecord
                  "delphinus_zkwasm::circuits::rtable::RangeTableConfig"
                  [
                    ("common_range_col",
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.apply (Ty.path "halo2_proofs::plonk::circuit::ConstraintSystem") [ F ],
                          "lookup_table_column",
                          []
                        |),
                        [ M.read (| meta |) ]
                      |));
                    ("u16_col",
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.apply (Ty.path "halo2_proofs::plonk::circuit::ConstraintSystem") [ F ],
                          "lookup_table_column",
                          []
                        |),
                        [ M.read (| meta |) ]
                      |));
                    ("u8_col", M.read (| u8_col_multiset |));
                    ("op_table",
                      Value.StructRecord
                        "delphinus_zkwasm::circuits::rtable::OpTable"
                        [
                          ("op",
                            M.call_closure (|
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path "halo2_proofs::plonk::circuit::ConstraintSystem")
                                  [ F ],
                                "lookup_table_column",
                                []
                              |),
                              [ M.read (| meta |) ]
                            |));
                          ("left", M.read (| u8_col_multiset |));
                          ("right",
                            M.call_closure (|
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path "halo2_proofs::plonk::circuit::ConstraintSystem")
                                  [ F ],
                                "lookup_table_column",
                                []
                              |),
                              [ M.read (| meta |) ]
                            |));
                          ("result",
                            M.call_closure (|
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path "halo2_proofs::plonk::circuit::ConstraintSystem")
                                  [ F ],
                                "lookup_table_column",
                                []
                              |),
                              [ M.read (| meta |) ]
                            |))
                        ]);
                    ("_mark", Value.StructTuple "core::marker::PhantomData" [])
                  ]
              |)
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom AssociatedFunction_configure :
        forall (F : Ty.t),
        M.IsAssociatedFunction (Self F) "configure" (configure F).
      
      (*
          pub fn configure_in_common_range(
              &self,
              meta: &mut ConstraintSystem<F>,
              key: &'static str,
              expr: impl FnOnce(&mut VirtualCells<'_, F>) -> Expression<F>,
          ) {
              meta.lookup(key, |meta| vec![(expr(meta), self.common_range_col)]);
          }
      *)
      Definition configure_in_common_range (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match τ, α with
        | [ impl_FnOnce__mut_VirtualCells_'___F___arrow_Expression_F_ ],
            [ self; meta; key; expr ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let meta := M.alloc (| meta |) in
            let key := M.alloc (| key |) in
            let expr := M.alloc (| expr |) in
            M.read (|
              let _ :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply (Ty.path "halo2_proofs::plonk::circuit::ConstraintSystem") [ F ],
                      "lookup",
                      [
                        Ty.function
                          [
                            Ty.tuple
                              [
                                Ty.apply
                                  (Ty.path "&mut")
                                  [
                                    Ty.apply
                                      (Ty.path "halo2_proofs::plonk::circuit::VirtualCells")
                                      [ F ]
                                  ]
                              ]
                          ]
                          (Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            [
                              Ty.tuple
                                [
                                  Ty.apply
                                    (Ty.path "halo2_proofs::plonk::circuit::Expression")
                                    [ F ];
                                  Ty.path "halo2_proofs::plonk::circuit::TableColumn"
                                ];
                              Ty.path "alloc::alloc::Global"
                            ])
                      ]
                    |),
                    [
                      M.read (| meta |);
                      M.read (| key |);
                      M.closure
                        (fun γ =>
                          ltac:(M.monadic
                            match γ with
                            | [ α0 ] =>
                              M.match_operator (|
                                M.alloc (| α0 |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let meta := M.copy (| γ |) in
                                      M.call_closure (|
                                        M.get_associated_function (|
                                          Ty.apply
                                            (Ty.path "slice")
                                            [
                                              Ty.tuple
                                                [
                                                  Ty.apply
                                                    (Ty.path
                                                      "halo2_proofs::plonk::circuit::Expression")
                                                    [ F ];
                                                  Ty.path
                                                    "halo2_proofs::plonk::circuit::TableColumn"
                                                ]
                                            ],
                                          "into_vec",
                                          [ Ty.path "alloc::alloc::Global" ]
                                        |),
                                        [
                                          (* Unsize *)
                                          M.pointer_coercion
                                            (M.read (|
                                              M.call_closure (|
                                                M.get_associated_function (|
                                                  Ty.apply
                                                    (Ty.path "alloc::boxed::Box")
                                                    [
                                                      Ty.apply
                                                        (Ty.path "array")
                                                        [
                                                          Ty.tuple
                                                            [
                                                              Ty.apply
                                                                (Ty.path
                                                                  "halo2_proofs::plonk::circuit::Expression")
                                                                [ F ];
                                                              Ty.path
                                                                "halo2_proofs::plonk::circuit::TableColumn"
                                                            ]
                                                        ];
                                                      Ty.path "alloc::alloc::Global"
                                                    ],
                                                  "new",
                                                  []
                                                |),
                                                [
                                                  M.alloc (|
                                                    Value.Array
                                                      [
                                                        Value.Tuple
                                                          [
                                                            M.call_closure (|
                                                              M.get_trait_method (|
                                                                "core::ops::function::FnOnce",
                                                                impl_FnOnce__mut_VirtualCells_'___F___arrow_Expression_F_,
                                                                [
                                                                  Ty.tuple
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path "&mut")
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "halo2_proofs::plonk::circuit::VirtualCells")
                                                                            [ F ]
                                                                        ]
                                                                    ]
                                                                ],
                                                                "call_once",
                                                                []
                                                              |),
                                                              [
                                                                M.read (| expr |);
                                                                Value.Tuple [ M.read (| meta |) ]
                                                              ]
                                                            |);
                                                            M.read (|
                                                              M.SubPointer.get_struct_record_field (|
                                                                M.read (| self |),
                                                                "delphinus_zkwasm::circuits::rtable::RangeTableConfig",
                                                                "common_range_col"
                                                              |)
                                                            |)
                                                          ]
                                                      ]
                                                  |)
                                                ]
                                              |)
                                            |))
                                        ]
                                      |)))
                                ]
                              |)
                            | _ => M.impossible (||)
                            end))
                    ]
                  |)
                |) in
              M.alloc (| Value.Tuple [] |)
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom AssociatedFunction_configure_in_common_range :
        forall (F : Ty.t),
        M.IsAssociatedFunction (Self F) "configure_in_common_range" (configure_in_common_range F).
      
      (*
          pub fn configure_in_u16_range(
              &self,
              meta: &mut ConstraintSystem<F>,
              key: &'static str,
              expr: impl FnOnce(&mut VirtualCells<'_, F>) -> Expression<F>,
          ) {
              meta.lookup(key, |meta| vec![(expr(meta), self.u16_col)]);
          }
      *)
      Definition configure_in_u16_range (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match τ, α with
        | [ impl_FnOnce__mut_VirtualCells_'___F___arrow_Expression_F_ ],
            [ self; meta; key; expr ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let meta := M.alloc (| meta |) in
            let key := M.alloc (| key |) in
            let expr := M.alloc (| expr |) in
            M.read (|
              let _ :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply (Ty.path "halo2_proofs::plonk::circuit::ConstraintSystem") [ F ],
                      "lookup",
                      [
                        Ty.function
                          [
                            Ty.tuple
                              [
                                Ty.apply
                                  (Ty.path "&mut")
                                  [
                                    Ty.apply
                                      (Ty.path "halo2_proofs::plonk::circuit::VirtualCells")
                                      [ F ]
                                  ]
                              ]
                          ]
                          (Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            [
                              Ty.tuple
                                [
                                  Ty.apply
                                    (Ty.path "halo2_proofs::plonk::circuit::Expression")
                                    [ F ];
                                  Ty.path "halo2_proofs::plonk::circuit::TableColumn"
                                ];
                              Ty.path "alloc::alloc::Global"
                            ])
                      ]
                    |),
                    [
                      M.read (| meta |);
                      M.read (| key |);
                      M.closure
                        (fun γ =>
                          ltac:(M.monadic
                            match γ with
                            | [ α0 ] =>
                              M.match_operator (|
                                M.alloc (| α0 |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let meta := M.copy (| γ |) in
                                      M.call_closure (|
                                        M.get_associated_function (|
                                          Ty.apply
                                            (Ty.path "slice")
                                            [
                                              Ty.tuple
                                                [
                                                  Ty.apply
                                                    (Ty.path
                                                      "halo2_proofs::plonk::circuit::Expression")
                                                    [ F ];
                                                  Ty.path
                                                    "halo2_proofs::plonk::circuit::TableColumn"
                                                ]
                                            ],
                                          "into_vec",
                                          [ Ty.path "alloc::alloc::Global" ]
                                        |),
                                        [
                                          (* Unsize *)
                                          M.pointer_coercion
                                            (M.read (|
                                              M.call_closure (|
                                                M.get_associated_function (|
                                                  Ty.apply
                                                    (Ty.path "alloc::boxed::Box")
                                                    [
                                                      Ty.apply
                                                        (Ty.path "array")
                                                        [
                                                          Ty.tuple
                                                            [
                                                              Ty.apply
                                                                (Ty.path
                                                                  "halo2_proofs::plonk::circuit::Expression")
                                                                [ F ];
                                                              Ty.path
                                                                "halo2_proofs::plonk::circuit::TableColumn"
                                                            ]
                                                        ];
                                                      Ty.path "alloc::alloc::Global"
                                                    ],
                                                  "new",
                                                  []
                                                |),
                                                [
                                                  M.alloc (|
                                                    Value.Array
                                                      [
                                                        Value.Tuple
                                                          [
                                                            M.call_closure (|
                                                              M.get_trait_method (|
                                                                "core::ops::function::FnOnce",
                                                                impl_FnOnce__mut_VirtualCells_'___F___arrow_Expression_F_,
                                                                [
                                                                  Ty.tuple
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path "&mut")
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "halo2_proofs::plonk::circuit::VirtualCells")
                                                                            [ F ]
                                                                        ]
                                                                    ]
                                                                ],
                                                                "call_once",
                                                                []
                                                              |),
                                                              [
                                                                M.read (| expr |);
                                                                Value.Tuple [ M.read (| meta |) ]
                                                              ]
                                                            |);
                                                            M.read (|
                                                              M.SubPointer.get_struct_record_field (|
                                                                M.read (| self |),
                                                                "delphinus_zkwasm::circuits::rtable::RangeTableConfig",
                                                                "u16_col"
                                                              |)
                                                            |)
                                                          ]
                                                      ]
                                                  |)
                                                ]
                                              |)
                                            |))
                                        ]
                                      |)))
                                ]
                              |)
                            | _ => M.impossible (||)
                            end))
                    ]
                  |)
                |) in
              M.alloc (| Value.Tuple [] |)
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom AssociatedFunction_configure_in_u16_range :
        forall (F : Ty.t),
        M.IsAssociatedFunction (Self F) "configure_in_u16_range" (configure_in_u16_range F).
      
      (*
          pub fn configure_in_u8_range(
              &self,
              meta: &mut ConstraintSystem<F>,
              key: &'static str,
              expr: impl FnOnce(&mut VirtualCells<'_, F>) -> Expression<F>,
          ) {
              meta.lookup(key, |meta| vec![(expr(meta), self.u8_col)]);
          }
      *)
      Definition configure_in_u8_range (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match τ, α with
        | [ impl_FnOnce__mut_VirtualCells_'___F___arrow_Expression_F_ ],
            [ self; meta; key; expr ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let meta := M.alloc (| meta |) in
            let key := M.alloc (| key |) in
            let expr := M.alloc (| expr |) in
            M.read (|
              let _ :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply (Ty.path "halo2_proofs::plonk::circuit::ConstraintSystem") [ F ],
                      "lookup",
                      [
                        Ty.function
                          [
                            Ty.tuple
                              [
                                Ty.apply
                                  (Ty.path "&mut")
                                  [
                                    Ty.apply
                                      (Ty.path "halo2_proofs::plonk::circuit::VirtualCells")
                                      [ F ]
                                  ]
                              ]
                          ]
                          (Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            [
                              Ty.tuple
                                [
                                  Ty.apply
                                    (Ty.path "halo2_proofs::plonk::circuit::Expression")
                                    [ F ];
                                  Ty.path "halo2_proofs::plonk::circuit::TableColumn"
                                ];
                              Ty.path "alloc::alloc::Global"
                            ])
                      ]
                    |),
                    [
                      M.read (| meta |);
                      M.read (| key |);
                      M.closure
                        (fun γ =>
                          ltac:(M.monadic
                            match γ with
                            | [ α0 ] =>
                              M.match_operator (|
                                M.alloc (| α0 |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let meta := M.copy (| γ |) in
                                      M.call_closure (|
                                        M.get_associated_function (|
                                          Ty.apply
                                            (Ty.path "slice")
                                            [
                                              Ty.tuple
                                                [
                                                  Ty.apply
                                                    (Ty.path
                                                      "halo2_proofs::plonk::circuit::Expression")
                                                    [ F ];
                                                  Ty.path
                                                    "halo2_proofs::plonk::circuit::TableColumn"
                                                ]
                                            ],
                                          "into_vec",
                                          [ Ty.path "alloc::alloc::Global" ]
                                        |),
                                        [
                                          (* Unsize *)
                                          M.pointer_coercion
                                            (M.read (|
                                              M.call_closure (|
                                                M.get_associated_function (|
                                                  Ty.apply
                                                    (Ty.path "alloc::boxed::Box")
                                                    [
                                                      Ty.apply
                                                        (Ty.path "array")
                                                        [
                                                          Ty.tuple
                                                            [
                                                              Ty.apply
                                                                (Ty.path
                                                                  "halo2_proofs::plonk::circuit::Expression")
                                                                [ F ];
                                                              Ty.path
                                                                "halo2_proofs::plonk::circuit::TableColumn"
                                                            ]
                                                        ];
                                                      Ty.path "alloc::alloc::Global"
                                                    ],
                                                  "new",
                                                  []
                                                |),
                                                [
                                                  M.alloc (|
                                                    Value.Array
                                                      [
                                                        Value.Tuple
                                                          [
                                                            M.call_closure (|
                                                              M.get_trait_method (|
                                                                "core::ops::function::FnOnce",
                                                                impl_FnOnce__mut_VirtualCells_'___F___arrow_Expression_F_,
                                                                [
                                                                  Ty.tuple
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path "&mut")
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "halo2_proofs::plonk::circuit::VirtualCells")
                                                                            [ F ]
                                                                        ]
                                                                    ]
                                                                ],
                                                                "call_once",
                                                                []
                                                              |),
                                                              [
                                                                M.read (| expr |);
                                                                Value.Tuple [ M.read (| meta |) ]
                                                              ]
                                                            |);
                                                            M.read (|
                                                              M.SubPointer.get_struct_record_field (|
                                                                M.read (| self |),
                                                                "delphinus_zkwasm::circuits::rtable::RangeTableConfig",
                                                                "u8_col"
                                                              |)
                                                            |)
                                                          ]
                                                      ]
                                                  |)
                                                ]
                                              |)
                                            |))
                                        ]
                                      |)))
                                ]
                              |)
                            | _ => M.impossible (||)
                            end))
                    ]
                  |)
                |) in
              M.alloc (| Value.Tuple [] |)
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom AssociatedFunction_configure_in_u8_range :
        forall (F : Ty.t),
        M.IsAssociatedFunction (Self F) "configure_in_u8_range" (configure_in_u8_range F).
      
      (*
          pub fn configure_in_op_table(
              &self,
              meta: &mut ConstraintSystem<F>,
              key: &'static str,
              op: impl FnOnce(&mut VirtualCells<'_, F>) -> Expression<F>,
              left: impl FnOnce(&mut VirtualCells<'_, F>) -> Expression<F>,
              right: impl FnOnce(&mut VirtualCells<'_, F>) -> Expression<F>,
              result: impl FnOnce(&mut VirtualCells<'_, F>) -> Expression<F>,
              enable: impl Fn(&mut VirtualCells<'_, F>) -> Expression<F>,
          ) {
              meta.lookup(key, |meta| {
                  vec![
                      (enable(meta) * op(meta), self.op_table.op),
                      (enable(meta) * left(meta), self.op_table.left),
                      (enable(meta) * right(meta), self.op_table.right),
                      (enable(meta) * result(meta), self.op_table.result),
                  ]
              });
          }
      *)
      Definition configure_in_op_table (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match τ, α with
        | [
              impl_FnOnce__mut_VirtualCells_'___F___arrow_Expression_F_;
              impl_FnOnce__mut_VirtualCells_'___F___arrow_Expression_F_'1;
              impl_FnOnce__mut_VirtualCells_'___F___arrow_Expression_F_'2;
              impl_FnOnce__mut_VirtualCells_'___F___arrow_Expression_F_'3;
              impl_Fn__mut_VirtualCells_'___F___arrow_Expression_F_
            ],
            [ self; meta; key; op; _ as left; _ as right; result; enable ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let meta := M.alloc (| meta |) in
            let key := M.alloc (| key |) in
            let op := M.alloc (| op |) in
            let left := M.alloc (| left |) in
            let right := M.alloc (| right |) in
            let result := M.alloc (| result |) in
            let enable := M.alloc (| enable |) in
            M.read (|
              let _ :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply (Ty.path "halo2_proofs::plonk::circuit::ConstraintSystem") [ F ],
                      "lookup",
                      [
                        Ty.function
                          [
                            Ty.tuple
                              [
                                Ty.apply
                                  (Ty.path "&mut")
                                  [
                                    Ty.apply
                                      (Ty.path "halo2_proofs::plonk::circuit::VirtualCells")
                                      [ F ]
                                  ]
                              ]
                          ]
                          (Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            [
                              Ty.tuple
                                [
                                  Ty.apply
                                    (Ty.path "halo2_proofs::plonk::circuit::Expression")
                                    [ F ];
                                  Ty.path "halo2_proofs::plonk::circuit::TableColumn"
                                ];
                              Ty.path "alloc::alloc::Global"
                            ])
                      ]
                    |),
                    [
                      M.read (| meta |);
                      M.read (| key |);
                      M.closure
                        (fun γ =>
                          ltac:(M.monadic
                            match γ with
                            | [ α0 ] =>
                              M.match_operator (|
                                M.alloc (| α0 |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let meta := M.copy (| γ |) in
                                      M.call_closure (|
                                        M.get_associated_function (|
                                          Ty.apply
                                            (Ty.path "slice")
                                            [
                                              Ty.tuple
                                                [
                                                  Ty.apply
                                                    (Ty.path
                                                      "halo2_proofs::plonk::circuit::Expression")
                                                    [ F ];
                                                  Ty.path
                                                    "halo2_proofs::plonk::circuit::TableColumn"
                                                ]
                                            ],
                                          "into_vec",
                                          [ Ty.path "alloc::alloc::Global" ]
                                        |),
                                        [
                                          (* Unsize *)
                                          M.pointer_coercion
                                            (M.read (|
                                              M.call_closure (|
                                                M.get_associated_function (|
                                                  Ty.apply
                                                    (Ty.path "alloc::boxed::Box")
                                                    [
                                                      Ty.apply
                                                        (Ty.path "array")
                                                        [
                                                          Ty.tuple
                                                            [
                                                              Ty.apply
                                                                (Ty.path
                                                                  "halo2_proofs::plonk::circuit::Expression")
                                                                [ F ];
                                                              Ty.path
                                                                "halo2_proofs::plonk::circuit::TableColumn"
                                                            ]
                                                        ];
                                                      Ty.path "alloc::alloc::Global"
                                                    ],
                                                  "new",
                                                  []
                                                |),
                                                [
                                                  M.alloc (|
                                                    Value.Array
                                                      [
                                                        Value.Tuple
                                                          [
                                                            M.call_closure (|
                                                              M.get_trait_method (|
                                                                "core::ops::arith::Mul",
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "halo2_proofs::plonk::circuit::Expression")
                                                                  [ F ],
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "halo2_proofs::plonk::circuit::Expression")
                                                                    [ F ]
                                                                ],
                                                                "mul",
                                                                []
                                                              |),
                                                              [
                                                                M.call_closure (|
                                                                  M.get_trait_method (|
                                                                    "core::ops::function::Fn",
                                                                    impl_Fn__mut_VirtualCells_'___F___arrow_Expression_F_,
                                                                    [
                                                                      Ty.tuple
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path "&mut")
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "halo2_proofs::plonk::circuit::VirtualCells")
                                                                                [ F ]
                                                                            ]
                                                                        ]
                                                                    ],
                                                                    "call",
                                                                    []
                                                                  |),
                                                                  [
                                                                    enable;
                                                                    Value.Tuple
                                                                      [ M.read (| meta |) ]
                                                                  ]
                                                                |);
                                                                M.call_closure (|
                                                                  M.get_trait_method (|
                                                                    "core::ops::function::FnOnce",
                                                                    impl_FnOnce__mut_VirtualCells_'___F___arrow_Expression_F_,
                                                                    [
                                                                      Ty.tuple
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path "&mut")
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "halo2_proofs::plonk::circuit::VirtualCells")
                                                                                [ F ]
                                                                            ]
                                                                        ]
                                                                    ],
                                                                    "call_once",
                                                                    []
                                                                  |),
                                                                  [
                                                                    M.read (| op |);
                                                                    Value.Tuple
                                                                      [ M.read (| meta |) ]
                                                                  ]
                                                                |)
                                                              ]
                                                            |);
                                                            M.read (|
                                                              M.SubPointer.get_struct_record_field (|
                                                                M.SubPointer.get_struct_record_field (|
                                                                  M.read (| self |),
                                                                  "delphinus_zkwasm::circuits::rtable::RangeTableConfig",
                                                                  "op_table"
                                                                |),
                                                                "delphinus_zkwasm::circuits::rtable::OpTable",
                                                                "op"
                                                              |)
                                                            |)
                                                          ];
                                                        Value.Tuple
                                                          [
                                                            M.call_closure (|
                                                              M.get_trait_method (|
                                                                "core::ops::arith::Mul",
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "halo2_proofs::plonk::circuit::Expression")
                                                                  [ F ],
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "halo2_proofs::plonk::circuit::Expression")
                                                                    [ F ]
                                                                ],
                                                                "mul",
                                                                []
                                                              |),
                                                              [
                                                                M.call_closure (|
                                                                  M.get_trait_method (|
                                                                    "core::ops::function::Fn",
                                                                    impl_Fn__mut_VirtualCells_'___F___arrow_Expression_F_,
                                                                    [
                                                                      Ty.tuple
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path "&mut")
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "halo2_proofs::plonk::circuit::VirtualCells")
                                                                                [ F ]
                                                                            ]
                                                                        ]
                                                                    ],
                                                                    "call",
                                                                    []
                                                                  |),
                                                                  [
                                                                    enable;
                                                                    Value.Tuple
                                                                      [ M.read (| meta |) ]
                                                                  ]
                                                                |);
                                                                M.call_closure (|
                                                                  M.get_trait_method (|
                                                                    "core::ops::function::FnOnce",
                                                                    impl_FnOnce__mut_VirtualCells_'___F___arrow_Expression_F_'1,
                                                                    [
                                                                      Ty.tuple
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path "&mut")
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "halo2_proofs::plonk::circuit::VirtualCells")
                                                                                [ F ]
                                                                            ]
                                                                        ]
                                                                    ],
                                                                    "call_once",
                                                                    []
                                                                  |),
                                                                  [
                                                                    M.read (| left |);
                                                                    Value.Tuple
                                                                      [ M.read (| meta |) ]
                                                                  ]
                                                                |)
                                                              ]
                                                            |);
                                                            M.read (|
                                                              M.SubPointer.get_struct_record_field (|
                                                                M.SubPointer.get_struct_record_field (|
                                                                  M.read (| self |),
                                                                  "delphinus_zkwasm::circuits::rtable::RangeTableConfig",
                                                                  "op_table"
                                                                |),
                                                                "delphinus_zkwasm::circuits::rtable::OpTable",
                                                                "left"
                                                              |)
                                                            |)
                                                          ];
                                                        Value.Tuple
                                                          [
                                                            M.call_closure (|
                                                              M.get_trait_method (|
                                                                "core::ops::arith::Mul",
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "halo2_proofs::plonk::circuit::Expression")
                                                                  [ F ],
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "halo2_proofs::plonk::circuit::Expression")
                                                                    [ F ]
                                                                ],
                                                                "mul",
                                                                []
                                                              |),
                                                              [
                                                                M.call_closure (|
                                                                  M.get_trait_method (|
                                                                    "core::ops::function::Fn",
                                                                    impl_Fn__mut_VirtualCells_'___F___arrow_Expression_F_,
                                                                    [
                                                                      Ty.tuple
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path "&mut")
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "halo2_proofs::plonk::circuit::VirtualCells")
                                                                                [ F ]
                                                                            ]
                                                                        ]
                                                                    ],
                                                                    "call",
                                                                    []
                                                                  |),
                                                                  [
                                                                    enable;
                                                                    Value.Tuple
                                                                      [ M.read (| meta |) ]
                                                                  ]
                                                                |);
                                                                M.call_closure (|
                                                                  M.get_trait_method (|
                                                                    "core::ops::function::FnOnce",
                                                                    impl_FnOnce__mut_VirtualCells_'___F___arrow_Expression_F_'2,
                                                                    [
                                                                      Ty.tuple
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path "&mut")
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "halo2_proofs::plonk::circuit::VirtualCells")
                                                                                [ F ]
                                                                            ]
                                                                        ]
                                                                    ],
                                                                    "call_once",
                                                                    []
                                                                  |),
                                                                  [
                                                                    M.read (| right |);
                                                                    Value.Tuple
                                                                      [ M.read (| meta |) ]
                                                                  ]
                                                                |)
                                                              ]
                                                            |);
                                                            M.read (|
                                                              M.SubPointer.get_struct_record_field (|
                                                                M.SubPointer.get_struct_record_field (|
                                                                  M.read (| self |),
                                                                  "delphinus_zkwasm::circuits::rtable::RangeTableConfig",
                                                                  "op_table"
                                                                |),
                                                                "delphinus_zkwasm::circuits::rtable::OpTable",
                                                                "right"
                                                              |)
                                                            |)
                                                          ];
                                                        Value.Tuple
                                                          [
                                                            M.call_closure (|
                                                              M.get_trait_method (|
                                                                "core::ops::arith::Mul",
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "halo2_proofs::plonk::circuit::Expression")
                                                                  [ F ],
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "halo2_proofs::plonk::circuit::Expression")
                                                                    [ F ]
                                                                ],
                                                                "mul",
                                                                []
                                                              |),
                                                              [
                                                                M.call_closure (|
                                                                  M.get_trait_method (|
                                                                    "core::ops::function::Fn",
                                                                    impl_Fn__mut_VirtualCells_'___F___arrow_Expression_F_,
                                                                    [
                                                                      Ty.tuple
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path "&mut")
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "halo2_proofs::plonk::circuit::VirtualCells")
                                                                                [ F ]
                                                                            ]
                                                                        ]
                                                                    ],
                                                                    "call",
                                                                    []
                                                                  |),
                                                                  [
                                                                    enable;
                                                                    Value.Tuple
                                                                      [ M.read (| meta |) ]
                                                                  ]
                                                                |);
                                                                M.call_closure (|
                                                                  M.get_trait_method (|
                                                                    "core::ops::function::FnOnce",
                                                                    impl_FnOnce__mut_VirtualCells_'___F___arrow_Expression_F_'3,
                                                                    [
                                                                      Ty.tuple
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path "&mut")
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "halo2_proofs::plonk::circuit::VirtualCells")
                                                                                [ F ]
                                                                            ]
                                                                        ]
                                                                    ],
                                                                    "call_once",
                                                                    []
                                                                  |),
                                                                  [
                                                                    M.read (| result |);
                                                                    Value.Tuple
                                                                      [ M.read (| meta |) ]
                                                                  ]
                                                                |)
                                                              ]
                                                            |);
                                                            M.read (|
                                                              M.SubPointer.get_struct_record_field (|
                                                                M.SubPointer.get_struct_record_field (|
                                                                  M.read (| self |),
                                                                  "delphinus_zkwasm::circuits::rtable::RangeTableConfig",
                                                                  "op_table"
                                                                |),
                                                                "delphinus_zkwasm::circuits::rtable::OpTable",
                                                                "result"
                                                              |)
                                                            |)
                                                          ]
                                                      ]
                                                  |)
                                                ]
                                              |)
                                            |))
                                        ]
                                      |)))
                                ]
                              |)
                            | _ => M.impossible (||)
                            end))
                    ]
                  |)
                |) in
              M.alloc (| Value.Tuple [] |)
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom AssociatedFunction_configure_in_op_table :
        forall (F : Ty.t),
        M.IsAssociatedFunction (Self F) "configure_in_op_table" (configure_in_op_table F).
      
      (*
          pub fn configure_in_pow_set(
              &self,
              meta: &mut ConstraintSystem<F>,
              key: &'static str,
              exp: impl FnOnce(&mut VirtualCells<'_, F>) -> Expression<F>,
              pow: impl FnOnce(&mut VirtualCells<'_, F>) -> Expression<F>,
              enable: impl Fn(&mut VirtualCells<'_, F>) -> Expression<F>,
          ) {
              self.configure_in_op_table(
                  meta,
                  key,
                  |_| constant_from!(POW_OP),
                  |_| constant_from!(0),
                  |meta| exp(meta),
                  |meta| pow(meta),
                  enable,
              );
          }
      *)
      Definition configure_in_pow_set (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match τ, α with
        | [
              impl_FnOnce__mut_VirtualCells_'___F___arrow_Expression_F_;
              impl_FnOnce__mut_VirtualCells_'___F___arrow_Expression_F_'1;
              impl_Fn__mut_VirtualCells_'___F___arrow_Expression_F_
            ],
            [ self; meta; key; exp; pow; enable ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let meta := M.alloc (| meta |) in
            let key := M.alloc (| key |) in
            let exp := M.alloc (| exp |) in
            let pow := M.alloc (| pow |) in
            let enable := M.alloc (| enable |) in
            M.read (|
              let _ :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "delphinus_zkwasm::circuits::rtable::RangeTableConfig")
                        [ F ],
                      "configure_in_op_table",
                      [
                        Ty.function
                          [
                            Ty.tuple
                              [
                                Ty.apply
                                  (Ty.path "&mut")
                                  [
                                    Ty.apply
                                      (Ty.path "halo2_proofs::plonk::circuit::VirtualCells")
                                      [ F ]
                                  ]
                              ]
                          ]
                          (Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ]);
                        Ty.function
                          [
                            Ty.tuple
                              [
                                Ty.apply
                                  (Ty.path "&mut")
                                  [
                                    Ty.apply
                                      (Ty.path "halo2_proofs::plonk::circuit::VirtualCells")
                                      [ F ]
                                  ]
                              ]
                          ]
                          (Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ]);
                        Ty.function
                          [
                            Ty.tuple
                              [
                                Ty.apply
                                  (Ty.path "&mut")
                                  [
                                    Ty.apply
                                      (Ty.path "halo2_proofs::plonk::circuit::VirtualCells")
                                      [ F ]
                                  ]
                              ]
                          ]
                          (Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ]);
                        Ty.function
                          [
                            Ty.tuple
                              [
                                Ty.apply
                                  (Ty.path "&mut")
                                  [
                                    Ty.apply
                                      (Ty.path "halo2_proofs::plonk::circuit::VirtualCells")
                                      [ F ]
                                  ]
                              ]
                          ]
                          (Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ]);
                        impl_Fn__mut_VirtualCells_'___F___arrow_Expression_F_
                      ]
                    |),
                    [
                      M.read (| self |);
                      M.read (| meta |);
                      M.read (| key |);
                      M.closure
                        (fun γ =>
                          ltac:(M.monadic
                            match γ with
                            | [ α0 ] =>
                              M.match_operator (|
                                M.alloc (| α0 |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (Value.StructTuple
                                        "halo2_proofs::plonk::circuit::Expression::Constant"
                                        [
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "core::convert::From",
                                              F,
                                              [ Ty.path "u64" ],
                                              "from",
                                              []
                                            |),
                                            [
                                              M.read (|
                                                M.use
                                                  (M.get_constant (|
                                                    "delphinus_zkwasm::circuits::rtable::POW_OP"
                                                  |))
                                              |)
                                            ]
                                          |)
                                        ]))
                                ]
                              |)
                            | _ => M.impossible (||)
                            end));
                      M.closure
                        (fun γ =>
                          ltac:(M.monadic
                            match γ with
                            | [ α0 ] =>
                              M.match_operator (|
                                M.alloc (| α0 |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (Value.StructTuple
                                        "halo2_proofs::plonk::circuit::Expression::Constant"
                                        [
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "core::convert::From",
                                              F,
                                              [ Ty.path "u64" ],
                                              "from",
                                              []
                                            |),
                                            [ M.read (| M.use (M.alloc (| Value.Integer 0 |)) |) ]
                                          |)
                                        ]))
                                ]
                              |)
                            | _ => M.impossible (||)
                            end));
                      M.closure
                        (fun γ =>
                          ltac:(M.monadic
                            match γ with
                            | [ α0 ] =>
                              M.match_operator (|
                                M.alloc (| α0 |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let meta := M.copy (| γ |) in
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "core::ops::function::FnOnce",
                                          impl_FnOnce__mut_VirtualCells_'___F___arrow_Expression_F_,
                                          [
                                            Ty.tuple
                                              [
                                                Ty.apply
                                                  (Ty.path "&mut")
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "halo2_proofs::plonk::circuit::VirtualCells")
                                                      [ F ]
                                                  ]
                                              ]
                                          ],
                                          "call_once",
                                          []
                                        |),
                                        [ M.read (| exp |); Value.Tuple [ M.read (| meta |) ] ]
                                      |)))
                                ]
                              |)
                            | _ => M.impossible (||)
                            end));
                      M.closure
                        (fun γ =>
                          ltac:(M.monadic
                            match γ with
                            | [ α0 ] =>
                              M.match_operator (|
                                M.alloc (| α0 |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let meta := M.copy (| γ |) in
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "core::ops::function::FnOnce",
                                          impl_FnOnce__mut_VirtualCells_'___F___arrow_Expression_F_'1,
                                          [
                                            Ty.tuple
                                              [
                                                Ty.apply
                                                  (Ty.path "&mut")
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "halo2_proofs::plonk::circuit::VirtualCells")
                                                      [ F ]
                                                  ]
                                              ]
                                          ],
                                          "call_once",
                                          []
                                        |),
                                        [ M.read (| pow |); Value.Tuple [ M.read (| meta |) ] ]
                                      |)))
                                ]
                              |)
                            | _ => M.impossible (||)
                            end));
                      M.read (| enable |)
                    ]
                  |)
                |) in
              M.alloc (| Value.Tuple [] |)
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom AssociatedFunction_configure_in_pow_set :
        forall (F : Ty.t),
        M.IsAssociatedFunction (Self F) "configure_in_pow_set" (configure_in_pow_set F).
    End Impl_delphinus_zkwasm_circuits_rtable_RangeTableConfig_F.
    
    (* StructRecord
      {
        name := "RangeTableChip";
        ty_params := [ "F" ];
        fields :=
          [
            ("config",
              Ty.apply (Ty.path "delphinus_zkwasm::circuits::rtable::RangeTableConfig") [ F ])
          ];
      } *)
    
    Module Impl_delphinus_zkwasm_circuits_rtable_RangeTableChip_F.
      Definition Self (F : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "delphinus_zkwasm::circuits::rtable::RangeTableChip") [ F ].
      
      (*
          pub fn new(config: RangeTableConfig<F>) -> Self {
              RangeTableChip { config }
          }
      *)
      Definition new (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match τ, α with
        | [], [ config ] =>
          ltac:(M.monadic
            (let config := M.alloc (| config |) in
            Value.StructRecord
              "delphinus_zkwasm::circuits::rtable::RangeTableChip"
              [ ("config", M.read (| config |)) ]))
        | _, _ => M.impossible
        end.
      
      Axiom AssociatedFunction_new :
        forall (F : Ty.t),
        M.IsAssociatedFunction (Self F) "new" (new F).
      
      (*
          pub fn init(&self, layouter: impl Layouter<F>, k: u32) -> Result<(), Error> {
              layouter.assign_table(
                  || "common range table",
                  |table| {
                      for i in 0..common_range(k) {
                          table.assign_cell(
                              || "range table",
                              self.config.common_range_col,
                              i as usize,
                              || Ok(F::from(i as u64)),
                          )?;
                      }
                      Ok(())
                  },
              )?;
      
              layouter.assign_table(
                  || "u16 range table",
                  |table| {
                      for i in 0..(1 << 16) {
                          table.assign_cell(
                              || "range table",
                              self.config.u16_col,
                              i,
                              || Ok(F::from(i as u64)),
                          )?;
                      }
                      Ok(())
                  },
              )?;
      
              {
                  layouter.assign_table(
                      || "op lookup table",
                      |table| {
                          let mut offset = 0;
      
                          for op in BitOp::iter() {
                              for left in 0..1u16 << 8 {
                                  for right in 0u16..1 << 8 {
                                      table.assign_cell(
                                          || "range table",
                                          self.config.op_table.op,
                                          offset as usize,
                                          || Ok(F::from(op as u64)),
                                      )?;
      
                                      table.assign_cell(
                                          || "range table",
                                          self.config.op_table.left,
                                          offset as usize,
                                          || Ok(F::from(left as u64)),
                                      )?;
      
                                      table.assign_cell(
                                          || "range table",
                                          self.config.op_table.right,
                                          offset as usize,
                                          || Ok(F::from(right as u64)),
                                      )?;
      
                                      table.assign_cell(
                                          || "range table",
                                          self.config.op_table.result,
                                          offset as usize,
                                          || Ok(F::from(op.eval(left as u64, right as u64))),
                                      )?;
      
                                      offset += 1;
                                  }
                              }
                          }
      
                          for left in 0..1u16 << 8 {
                              table.assign_cell(
                                  || "range table",
                                  self.config.op_table.op,
                                  offset as usize,
                                  || Ok(F::from(BitTableOp::Popcnt.index() as u64)),
                              )?;
      
                              table.assign_cell(
                                  || "range table",
                                  self.config.op_table.left,
                                  offset as usize,
                                  || Ok(F::from(left as u64)),
                              )?;
      
                              table.assign_cell(
                                  || "range table",
                                  self.config.op_table.right,
                                  offset as usize,
                                  || Ok(F::from(0)),
                              )?;
      
                              table.assign_cell(
                                  || "range table",
                                  self.config.op_table.result,
                                  offset as usize,
                                  || Ok(F::from(left.count_ones() as u64)),
                              )?;
      
                              offset += 1;
                          }
      
                          assert_eq!(BitTableOp::Popcnt.index() + 1, POW_OP as usize);
      
                          {
                              table.assign_cell(
                                  || "range table",
                                  self.config.op_table.op,
                                  offset,
                                  || Ok(F::from(POW_OP)),
                              )?;
      
                              table.assign_cell(
                                  || "range table",
                                  self.config.op_table.left,
                                  offset,
                                  || Ok(F::zero()),
                              )?;
      
                              table.assign_cell(
                                  || "range table",
                                  self.config.op_table.right,
                                  offset,
                                  || Ok(F::zero()),
                              )?;
      
                              table.assign_cell(
                                  || "range table",
                                  self.config.op_table.result,
                                  offset,
                                  || Ok(F::zero()),
                              )?;
      
                              offset += 1;
      
                              for i in 0..POW_TABLE_POWER_START {
                                  table.assign_cell(
                                      || "range table",
                                      self.config.op_table.op,
                                      offset,
                                      || Ok(F::from(POW_OP)),
                                  )?;
      
                                  table.assign_cell(
                                      || "range table",
                                      self.config.op_table.left,
                                      offset,
                                      || Ok(F::zero()),
                                  )?;
      
                                  table.assign_cell(
                                      || "range table",
                                      self.config.op_table.right,
                                      offset,
                                      || Ok(F::from(POW_TABLE_POWER_START + i)),
                                  )?;
      
                                  table.assign_cell(
                                      || "range table",
                                      self.config.op_table.result,
                                      offset,
                                      || Ok(bn_to_field::<F>(&(BigUint::from(1u64) << i))),
                                  )?;
      
                                  offset += 1;
                              }
                          }
      
                          Ok(())
                      },
                  )?;
              }
      
              Ok(())
          }
      *)
      Definition init (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match τ, α with
        | [ impl_Layouter_F_ ], [ self; layouter; k ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let layouter := M.alloc (| layouter |) in
            let k := M.alloc (| k |) in
            M.catch_return (|
              ltac:(M.monadic
                (M.read (|
                  let _ :=
                    M.match_operator (|
                      M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::ops::try_trait::Try",
                            Ty.apply
                              (Ty.path "core::result::Result")
                              [ Ty.tuple []; Ty.path "halo2_proofs::plonk::error::Error" ],
                            [],
                            "branch",
                            []
                          |),
                          [
                            M.call_closure (|
                              M.get_trait_method (|
                                "halo2_proofs::circuit::Layouter",
                                impl_Layouter_F_,
                                [ F ],
                                "assign_table",
                                [
                                  Ty.function
                                    [
                                      Ty.tuple
                                        [ Ty.apply (Ty.path "halo2_proofs::circuit::Table") [ F ] ]
                                    ]
                                    (Ty.apply
                                      (Ty.path "core::result::Result")
                                      [ Ty.tuple []; Ty.path "halo2_proofs::plonk::error::Error" ]);
                                  Ty.function
                                    [ Ty.tuple [] ]
                                    (Ty.apply (Ty.path "&") [ Ty.path "str" ]);
                                  Ty.apply (Ty.path "&") [ Ty.path "str" ]
                                ]
                              |),
                              [
                                layouter;
                                M.closure
                                  (fun γ =>
                                    ltac:(M.monadic
                                      match γ with
                                      | [ α0 ] =>
                                        M.match_operator (|
                                          M.alloc (| α0 |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (M.read (| Value.String "common range table" |)))
                                          ]
                                        |)
                                      | _ => M.impossible (||)
                                      end));
                                M.closure
                                  (fun γ =>
                                    ltac:(M.monadic
                                      match γ with
                                      | [ α0 ] =>
                                        M.match_operator (|
                                          M.alloc (| α0 |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let table := M.copy (| γ |) in
                                                M.read (|
                                                  let _ :=
                                                    M.use
                                                      (M.match_operator (|
                                                        M.alloc (|
                                                          M.call_closure (|
                                                            M.get_trait_method (|
                                                              "core::iter::traits::collect::IntoIterator",
                                                              Ty.apply
                                                                (Ty.path "core::ops::range::Range")
                                                                [ Ty.path "u32" ],
                                                              [],
                                                              "into_iter",
                                                              []
                                                            |),
                                                            [
                                                              Value.StructRecord
                                                                "core::ops::range::Range"
                                                                [
                                                                  ("start", Value.Integer 0);
                                                                  ("end_",
                                                                    M.call_closure (|
                                                                      M.get_function (|
                                                                        "delphinus_zkwasm::circuits::config::common_range",
                                                                        []
                                                                      |),
                                                                      [ M.read (| k |) ]
                                                                    |))
                                                                ]
                                                            ]
                                                          |)
                                                        |),
                                                        [
                                                          fun γ =>
                                                            ltac:(M.monadic
                                                              (let iter := M.copy (| γ |) in
                                                              M.loop (|
                                                                ltac:(M.monadic
                                                                  (let _ :=
                                                                    M.match_operator (|
                                                                      M.alloc (|
                                                                        M.call_closure (|
                                                                          M.get_trait_method (|
                                                                            "core::iter::traits::iterator::Iterator",
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "core::ops::range::Range")
                                                                              [ Ty.path "u32" ],
                                                                            [],
                                                                            "next",
                                                                            []
                                                                          |),
                                                                          [ iter ]
                                                                        |)
                                                                      |),
                                                                      [
                                                                        fun γ =>
                                                                          ltac:(M.monadic
                                                                            (M.alloc (|
                                                                              M.never_to_any (|
                                                                                M.read (|
                                                                                  M.break (||)
                                                                                |)
                                                                              |)
                                                                            |)));
                                                                        fun γ =>
                                                                          ltac:(M.monadic
                                                                            (let γ0_0 :=
                                                                              M.SubPointer.get_struct_tuple_field (|
                                                                                γ,
                                                                                "core::option::Option::Some",
                                                                                0
                                                                              |) in
                                                                            let i :=
                                                                              M.copy (| γ0_0 |) in
                                                                            let _ :=
                                                                              M.match_operator (|
                                                                                M.alloc (|
                                                                                  M.call_closure (|
                                                                                    M.get_trait_method (|
                                                                                      "core::ops::try_trait::Try",
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "core::result::Result")
                                                                                        [
                                                                                          Ty.tuple
                                                                                            [];
                                                                                          Ty.path
                                                                                            "halo2_proofs::plonk::error::Error"
                                                                                        ],
                                                                                      [],
                                                                                      "branch",
                                                                                      []
                                                                                    |),
                                                                                    [
                                                                                      M.call_closure (|
                                                                                        M.get_associated_function (|
                                                                                          Ty.apply
                                                                                            (Ty.path
                                                                                              "halo2_proofs::circuit::Table")
                                                                                            [ F ],
                                                                                          "assign_cell",
                                                                                          [
                                                                                            Ty.function
                                                                                              [
                                                                                                Ty.tuple
                                                                                                  []
                                                                                              ]
                                                                                              (Ty.apply
                                                                                                (Ty.path
                                                                                                  "core::result::Result")
                                                                                                [
                                                                                                  F;
                                                                                                  Ty.path
                                                                                                    "halo2_proofs::plonk::error::Error"
                                                                                                ]);
                                                                                            F;
                                                                                            Ty.function
                                                                                              [
                                                                                                Ty.tuple
                                                                                                  []
                                                                                              ]
                                                                                              (Ty.apply
                                                                                                (Ty.path
                                                                                                  "&")
                                                                                                [
                                                                                                  Ty.path
                                                                                                    "str"
                                                                                                ]);
                                                                                            Ty.apply
                                                                                              (Ty.path
                                                                                                "&")
                                                                                              [
                                                                                                Ty.path
                                                                                                  "str"
                                                                                              ]
                                                                                          ]
                                                                                        |),
                                                                                        [
                                                                                          table;
                                                                                          M.closure
                                                                                            (fun
                                                                                                γ =>
                                                                                              ltac:(M.monadic
                                                                                                match
                                                                                                  γ
                                                                                                with
                                                                                                | [
                                                                                                      α0
                                                                                                    ] =>
                                                                                                  M.match_operator (|
                                                                                                    M.alloc (|
                                                                                                      α0
                                                                                                    |),
                                                                                                    [
                                                                                                      fun
                                                                                                          γ =>
                                                                                                        ltac:(M.monadic
                                                                                                          (M.read (|
                                                                                                            Value.String
                                                                                                              "range table"
                                                                                                          |)))
                                                                                                    ]
                                                                                                  |)
                                                                                                | _ =>
                                                                                                  M.impossible (||)
                                                                                                end));
                                                                                          M.read (|
                                                                                            M.SubPointer.get_struct_record_field (|
                                                                                              M.SubPointer.get_struct_record_field (|
                                                                                                M.read (|
                                                                                                  self
                                                                                                |),
                                                                                                "delphinus_zkwasm::circuits::rtable::RangeTableChip",
                                                                                                "config"
                                                                                              |),
                                                                                              "delphinus_zkwasm::circuits::rtable::RangeTableConfig",
                                                                                              "common_range_col"
                                                                                            |)
                                                                                          |);
                                                                                          M.rust_cast
                                                                                            (M.read (|
                                                                                              i
                                                                                            |));
                                                                                          M.closure
                                                                                            (fun
                                                                                                γ =>
                                                                                              ltac:(M.monadic
                                                                                                match
                                                                                                  γ
                                                                                                with
                                                                                                | [
                                                                                                      α0
                                                                                                    ] =>
                                                                                                  M.match_operator (|
                                                                                                    M.alloc (|
                                                                                                      α0
                                                                                                    |),
                                                                                                    [
                                                                                                      fun
                                                                                                          γ =>
                                                                                                        ltac:(M.monadic
                                                                                                          (Value.StructTuple
                                                                                                            "core::result::Result::Ok"
                                                                                                            [
                                                                                                              M.call_closure (|
                                                                                                                M.get_trait_method (|
                                                                                                                  "core::convert::From",
                                                                                                                  F,
                                                                                                                  [
                                                                                                                    Ty.path
                                                                                                                      "u64"
                                                                                                                  ],
                                                                                                                  "from",
                                                                                                                  []
                                                                                                                |),
                                                                                                                [
                                                                                                                  M.rust_cast
                                                                                                                    (M.read (|
                                                                                                                      i
                                                                                                                    |))
                                                                                                                ]
                                                                                                              |)
                                                                                                            ]))
                                                                                                    ]
                                                                                                  |)
                                                                                                | _ =>
                                                                                                  M.impossible (||)
                                                                                                end))
                                                                                        ]
                                                                                      |)
                                                                                    ]
                                                                                  |)
                                                                                |),
                                                                                [
                                                                                  fun γ =>
                                                                                    ltac:(M.monadic
                                                                                      (let γ0_0 :=
                                                                                        M.SubPointer.get_struct_tuple_field (|
                                                                                          γ,
                                                                                          "core::ops::control_flow::ControlFlow::Break",
                                                                                          0
                                                                                        |) in
                                                                                      let
                                                                                            residual :=
                                                                                        M.copy (|
                                                                                          γ0_0
                                                                                        |) in
                                                                                      M.alloc (|
                                                                                        M.never_to_any (|
                                                                                          M.read (|
                                                                                            M.return_ (|
                                                                                              M.call_closure (|
                                                                                                M.get_trait_method (|
                                                                                                  "core::ops::try_trait::FromResidual",
                                                                                                  Ty.apply
                                                                                                    (Ty.path
                                                                                                      "core::result::Result")
                                                                                                    [
                                                                                                      Ty.tuple
                                                                                                        [];
                                                                                                      Ty.path
                                                                                                        "halo2_proofs::plonk::error::Error"
                                                                                                    ],
                                                                                                  [
                                                                                                    Ty.apply
                                                                                                      (Ty.path
                                                                                                        "core::result::Result")
                                                                                                      [
                                                                                                        Ty.path
                                                                                                          "core::convert::Infallible";
                                                                                                        Ty.path
                                                                                                          "halo2_proofs::plonk::error::Error"
                                                                                                      ]
                                                                                                  ],
                                                                                                  "from_residual",
                                                                                                  []
                                                                                                |),
                                                                                                [
                                                                                                  M.read (|
                                                                                                    residual
                                                                                                  |)
                                                                                                ]
                                                                                              |)
                                                                                            |)
                                                                                          |)
                                                                                        |)
                                                                                      |)));
                                                                                  fun γ =>
                                                                                    ltac:(M.monadic
                                                                                      (let γ0_0 :=
                                                                                        M.SubPointer.get_struct_tuple_field (|
                                                                                          γ,
                                                                                          "core::ops::control_flow::ControlFlow::Continue",
                                                                                          0
                                                                                        |) in
                                                                                      let val :=
                                                                                        M.copy (|
                                                                                          γ0_0
                                                                                        |) in
                                                                                      val))
                                                                                ]
                                                                              |) in
                                                                            M.alloc (|
                                                                              Value.Tuple []
                                                                            |)))
                                                                      ]
                                                                    |) in
                                                                  M.alloc (| Value.Tuple [] |)))
                                                              |)))
                                                        ]
                                                      |)) in
                                                  M.alloc (|
                                                    Value.StructTuple
                                                      "core::result::Result::Ok"
                                                      [ Value.Tuple [] ]
                                                  |)
                                                |)))
                                          ]
                                        |)
                                      | _ => M.impossible (||)
                                      end))
                              ]
                            |)
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Break",
                                0
                              |) in
                            let residual := M.copy (| γ0_0 |) in
                            M.alloc (|
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::ops::try_trait::FromResidual",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          [ Ty.tuple []; Ty.path "halo2_proofs::plonk::error::Error"
                                          ],
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.path "halo2_proofs::plonk::error::Error"
                                            ]
                                        ],
                                        "from_residual",
                                        []
                                      |),
                                      [ M.read (| residual |) ]
                                    |)
                                  |)
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Continue",
                                0
                              |) in
                            let val := M.copy (| γ0_0 |) in
                            val))
                      ]
                    |) in
                  let _ :=
                    M.match_operator (|
                      M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::ops::try_trait::Try",
                            Ty.apply
                              (Ty.path "core::result::Result")
                              [ Ty.tuple []; Ty.path "halo2_proofs::plonk::error::Error" ],
                            [],
                            "branch",
                            []
                          |),
                          [
                            M.call_closure (|
                              M.get_trait_method (|
                                "halo2_proofs::circuit::Layouter",
                                impl_Layouter_F_,
                                [ F ],
                                "assign_table",
                                [
                                  Ty.function
                                    [
                                      Ty.tuple
                                        [ Ty.apply (Ty.path "halo2_proofs::circuit::Table") [ F ] ]
                                    ]
                                    (Ty.apply
                                      (Ty.path "core::result::Result")
                                      [ Ty.tuple []; Ty.path "halo2_proofs::plonk::error::Error" ]);
                                  Ty.function
                                    [ Ty.tuple [] ]
                                    (Ty.apply (Ty.path "&") [ Ty.path "str" ]);
                                  Ty.apply (Ty.path "&") [ Ty.path "str" ]
                                ]
                              |),
                              [
                                layouter;
                                M.closure
                                  (fun γ =>
                                    ltac:(M.monadic
                                      match γ with
                                      | [ α0 ] =>
                                        M.match_operator (|
                                          M.alloc (| α0 |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (M.read (| Value.String "u16 range table" |)))
                                          ]
                                        |)
                                      | _ => M.impossible (||)
                                      end));
                                M.closure
                                  (fun γ =>
                                    ltac:(M.monadic
                                      match γ with
                                      | [ α0 ] =>
                                        M.match_operator (|
                                          M.alloc (| α0 |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let table := M.copy (| γ |) in
                                                M.read (|
                                                  let _ :=
                                                    M.use
                                                      (M.match_operator (|
                                                        M.alloc (|
                                                          M.call_closure (|
                                                            M.get_trait_method (|
                                                              "core::iter::traits::collect::IntoIterator",
                                                              Ty.apply
                                                                (Ty.path "core::ops::range::Range")
                                                                [ Ty.path "usize" ],
                                                              [],
                                                              "into_iter",
                                                              []
                                                            |),
                                                            [
                                                              Value.StructRecord
                                                                "core::ops::range::Range"
                                                                [
                                                                  ("start", Value.Integer 0);
                                                                  ("end_",
                                                                    BinOp.Panic.shl (|
                                                                      Value.Integer 1,
                                                                      Value.Integer 16
                                                                    |))
                                                                ]
                                                            ]
                                                          |)
                                                        |),
                                                        [
                                                          fun γ =>
                                                            ltac:(M.monadic
                                                              (let iter := M.copy (| γ |) in
                                                              M.loop (|
                                                                ltac:(M.monadic
                                                                  (let _ :=
                                                                    M.match_operator (|
                                                                      M.alloc (|
                                                                        M.call_closure (|
                                                                          M.get_trait_method (|
                                                                            "core::iter::traits::iterator::Iterator",
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "core::ops::range::Range")
                                                                              [ Ty.path "usize" ],
                                                                            [],
                                                                            "next",
                                                                            []
                                                                          |),
                                                                          [ iter ]
                                                                        |)
                                                                      |),
                                                                      [
                                                                        fun γ =>
                                                                          ltac:(M.monadic
                                                                            (M.alloc (|
                                                                              M.never_to_any (|
                                                                                M.read (|
                                                                                  M.break (||)
                                                                                |)
                                                                              |)
                                                                            |)));
                                                                        fun γ =>
                                                                          ltac:(M.monadic
                                                                            (let γ0_0 :=
                                                                              M.SubPointer.get_struct_tuple_field (|
                                                                                γ,
                                                                                "core::option::Option::Some",
                                                                                0
                                                                              |) in
                                                                            let i :=
                                                                              M.copy (| γ0_0 |) in
                                                                            let _ :=
                                                                              M.match_operator (|
                                                                                M.alloc (|
                                                                                  M.call_closure (|
                                                                                    M.get_trait_method (|
                                                                                      "core::ops::try_trait::Try",
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "core::result::Result")
                                                                                        [
                                                                                          Ty.tuple
                                                                                            [];
                                                                                          Ty.path
                                                                                            "halo2_proofs::plonk::error::Error"
                                                                                        ],
                                                                                      [],
                                                                                      "branch",
                                                                                      []
                                                                                    |),
                                                                                    [
                                                                                      M.call_closure (|
                                                                                        M.get_associated_function (|
                                                                                          Ty.apply
                                                                                            (Ty.path
                                                                                              "halo2_proofs::circuit::Table")
                                                                                            [ F ],
                                                                                          "assign_cell",
                                                                                          [
                                                                                            Ty.function
                                                                                              [
                                                                                                Ty.tuple
                                                                                                  []
                                                                                              ]
                                                                                              (Ty.apply
                                                                                                (Ty.path
                                                                                                  "core::result::Result")
                                                                                                [
                                                                                                  F;
                                                                                                  Ty.path
                                                                                                    "halo2_proofs::plonk::error::Error"
                                                                                                ]);
                                                                                            F;
                                                                                            Ty.function
                                                                                              [
                                                                                                Ty.tuple
                                                                                                  []
                                                                                              ]
                                                                                              (Ty.apply
                                                                                                (Ty.path
                                                                                                  "&")
                                                                                                [
                                                                                                  Ty.path
                                                                                                    "str"
                                                                                                ]);
                                                                                            Ty.apply
                                                                                              (Ty.path
                                                                                                "&")
                                                                                              [
                                                                                                Ty.path
                                                                                                  "str"
                                                                                              ]
                                                                                          ]
                                                                                        |),
                                                                                        [
                                                                                          table;
                                                                                          M.closure
                                                                                            (fun
                                                                                                γ =>
                                                                                              ltac:(M.monadic
                                                                                                match
                                                                                                  γ
                                                                                                with
                                                                                                | [
                                                                                                      α0
                                                                                                    ] =>
                                                                                                  M.match_operator (|
                                                                                                    M.alloc (|
                                                                                                      α0
                                                                                                    |),
                                                                                                    [
                                                                                                      fun
                                                                                                          γ =>
                                                                                                        ltac:(M.monadic
                                                                                                          (M.read (|
                                                                                                            Value.String
                                                                                                              "range table"
                                                                                                          |)))
                                                                                                    ]
                                                                                                  |)
                                                                                                | _ =>
                                                                                                  M.impossible (||)
                                                                                                end));
                                                                                          M.read (|
                                                                                            M.SubPointer.get_struct_record_field (|
                                                                                              M.SubPointer.get_struct_record_field (|
                                                                                                M.read (|
                                                                                                  self
                                                                                                |),
                                                                                                "delphinus_zkwasm::circuits::rtable::RangeTableChip",
                                                                                                "config"
                                                                                              |),
                                                                                              "delphinus_zkwasm::circuits::rtable::RangeTableConfig",
                                                                                              "u16_col"
                                                                                            |)
                                                                                          |);
                                                                                          M.read (|
                                                                                            i
                                                                                          |);
                                                                                          M.closure
                                                                                            (fun
                                                                                                γ =>
                                                                                              ltac:(M.monadic
                                                                                                match
                                                                                                  γ
                                                                                                with
                                                                                                | [
                                                                                                      α0
                                                                                                    ] =>
                                                                                                  M.match_operator (|
                                                                                                    M.alloc (|
                                                                                                      α0
                                                                                                    |),
                                                                                                    [
                                                                                                      fun
                                                                                                          γ =>
                                                                                                        ltac:(M.monadic
                                                                                                          (Value.StructTuple
                                                                                                            "core::result::Result::Ok"
                                                                                                            [
                                                                                                              M.call_closure (|
                                                                                                                M.get_trait_method (|
                                                                                                                  "core::convert::From",
                                                                                                                  F,
                                                                                                                  [
                                                                                                                    Ty.path
                                                                                                                      "u64"
                                                                                                                  ],
                                                                                                                  "from",
                                                                                                                  []
                                                                                                                |),
                                                                                                                [
                                                                                                                  M.rust_cast
                                                                                                                    (M.read (|
                                                                                                                      i
                                                                                                                    |))
                                                                                                                ]
                                                                                                              |)
                                                                                                            ]))
                                                                                                    ]
                                                                                                  |)
                                                                                                | _ =>
                                                                                                  M.impossible (||)
                                                                                                end))
                                                                                        ]
                                                                                      |)
                                                                                    ]
                                                                                  |)
                                                                                |),
                                                                                [
                                                                                  fun γ =>
                                                                                    ltac:(M.monadic
                                                                                      (let γ0_0 :=
                                                                                        M.SubPointer.get_struct_tuple_field (|
                                                                                          γ,
                                                                                          "core::ops::control_flow::ControlFlow::Break",
                                                                                          0
                                                                                        |) in
                                                                                      let
                                                                                            residual :=
                                                                                        M.copy (|
                                                                                          γ0_0
                                                                                        |) in
                                                                                      M.alloc (|
                                                                                        M.never_to_any (|
                                                                                          M.read (|
                                                                                            M.return_ (|
                                                                                              M.call_closure (|
                                                                                                M.get_trait_method (|
                                                                                                  "core::ops::try_trait::FromResidual",
                                                                                                  Ty.apply
                                                                                                    (Ty.path
                                                                                                      "core::result::Result")
                                                                                                    [
                                                                                                      Ty.tuple
                                                                                                        [];
                                                                                                      Ty.path
                                                                                                        "halo2_proofs::plonk::error::Error"
                                                                                                    ],
                                                                                                  [
                                                                                                    Ty.apply
                                                                                                      (Ty.path
                                                                                                        "core::result::Result")
                                                                                                      [
                                                                                                        Ty.path
                                                                                                          "core::convert::Infallible";
                                                                                                        Ty.path
                                                                                                          "halo2_proofs::plonk::error::Error"
                                                                                                      ]
                                                                                                  ],
                                                                                                  "from_residual",
                                                                                                  []
                                                                                                |),
                                                                                                [
                                                                                                  M.read (|
                                                                                                    residual
                                                                                                  |)
                                                                                                ]
                                                                                              |)
                                                                                            |)
                                                                                          |)
                                                                                        |)
                                                                                      |)));
                                                                                  fun γ =>
                                                                                    ltac:(M.monadic
                                                                                      (let γ0_0 :=
                                                                                        M.SubPointer.get_struct_tuple_field (|
                                                                                          γ,
                                                                                          "core::ops::control_flow::ControlFlow::Continue",
                                                                                          0
                                                                                        |) in
                                                                                      let val :=
                                                                                        M.copy (|
                                                                                          γ0_0
                                                                                        |) in
                                                                                      val))
                                                                                ]
                                                                              |) in
                                                                            M.alloc (|
                                                                              Value.Tuple []
                                                                            |)))
                                                                      ]
                                                                    |) in
                                                                  M.alloc (| Value.Tuple [] |)))
                                                              |)))
                                                        ]
                                                      |)) in
                                                  M.alloc (|
                                                    Value.StructTuple
                                                      "core::result::Result::Ok"
                                                      [ Value.Tuple [] ]
                                                  |)
                                                |)))
                                          ]
                                        |)
                                      | _ => M.impossible (||)
                                      end))
                              ]
                            |)
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Break",
                                0
                              |) in
                            let residual := M.copy (| γ0_0 |) in
                            M.alloc (|
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::ops::try_trait::FromResidual",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          [ Ty.tuple []; Ty.path "halo2_proofs::plonk::error::Error"
                                          ],
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.path "halo2_proofs::plonk::error::Error"
                                            ]
                                        ],
                                        "from_residual",
                                        []
                                      |),
                                      [ M.read (| residual |) ]
                                    |)
                                  |)
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Continue",
                                0
                              |) in
                            let val := M.copy (| γ0_0 |) in
                            val))
                      ]
                    |) in
                  let _ :=
                    let _ :=
                      M.match_operator (|
                        M.alloc (|
                          M.call_closure (|
                            M.get_trait_method (|
                              "core::ops::try_trait::Try",
                              Ty.apply
                                (Ty.path "core::result::Result")
                                [ Ty.tuple []; Ty.path "halo2_proofs::plonk::error::Error" ],
                              [],
                              "branch",
                              []
                            |),
                            [
                              M.call_closure (|
                                M.get_trait_method (|
                                  "halo2_proofs::circuit::Layouter",
                                  impl_Layouter_F_,
                                  [ F ],
                                  "assign_table",
                                  [
                                    Ty.function
                                      [
                                        Ty.tuple
                                          [ Ty.apply (Ty.path "halo2_proofs::circuit::Table") [ F ]
                                          ]
                                      ]
                                      (Ty.apply
                                        (Ty.path "core::result::Result")
                                        [ Ty.tuple []; Ty.path "halo2_proofs::plonk::error::Error"
                                        ]);
                                    Ty.function
                                      [ Ty.tuple [] ]
                                      (Ty.apply (Ty.path "&") [ Ty.path "str" ]);
                                    Ty.apply (Ty.path "&") [ Ty.path "str" ]
                                  ]
                                |),
                                [
                                  layouter;
                                  M.closure
                                    (fun γ =>
                                      ltac:(M.monadic
                                        match γ with
                                        | [ α0 ] =>
                                          M.match_operator (|
                                            M.alloc (| α0 |),
                                            [
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (M.read (| Value.String "op lookup table" |)))
                                            ]
                                          |)
                                        | _ => M.impossible (||)
                                        end));
                                  M.closure
                                    (fun γ =>
                                      ltac:(M.monadic
                                        match γ with
                                        | [ α0 ] =>
                                          M.match_operator (|
                                            M.alloc (| α0 |),
                                            [
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let table := M.copy (| γ |) in
                                                  M.read (|
                                                    let offset := M.alloc (| Value.Integer 0 |) in
                                                    let _ :=
                                                      M.use
                                                        (M.match_operator (|
                                                          M.alloc (|
                                                            M.call_closure (|
                                                              M.get_trait_method (|
                                                                "core::iter::traits::collect::IntoIterator",
                                                                Ty.path "specs::itable::BitOpIter",
                                                                [],
                                                                "into_iter",
                                                                []
                                                              |),
                                                              [
                                                                M.call_closure (|
                                                                  M.get_trait_method (|
                                                                    "strum::IntoEnumIterator",
                                                                    Ty.path "specs::itable::BitOp",
                                                                    [],
                                                                    "iter",
                                                                    []
                                                                  |),
                                                                  []
                                                                |)
                                                              ]
                                                            |)
                                                          |),
                                                          [
                                                            fun γ =>
                                                              ltac:(M.monadic
                                                                (let iter := M.copy (| γ |) in
                                                                M.loop (|
                                                                  ltac:(M.monadic
                                                                    (let _ :=
                                                                      M.match_operator (|
                                                                        M.alloc (|
                                                                          M.call_closure (|
                                                                            M.get_trait_method (|
                                                                              "core::iter::traits::iterator::Iterator",
                                                                              Ty.path
                                                                                "specs::itable::BitOpIter",
                                                                              [],
                                                                              "next",
                                                                              []
                                                                            |),
                                                                            [ iter ]
                                                                          |)
                                                                        |),
                                                                        [
                                                                          fun γ =>
                                                                            ltac:(M.monadic
                                                                              (M.alloc (|
                                                                                M.never_to_any (|
                                                                                  M.read (|
                                                                                    M.break (||)
                                                                                  |)
                                                                                |)
                                                                              |)));
                                                                          fun γ =>
                                                                            ltac:(M.monadic
                                                                              (let γ0_0 :=
                                                                                M.SubPointer.get_struct_tuple_field (|
                                                                                  γ,
                                                                                  "core::option::Option::Some",
                                                                                  0
                                                                                |) in
                                                                              let op :=
                                                                                M.copy (| γ0_0 |) in
                                                                              M.use
                                                                                (M.match_operator (|
                                                                                  M.alloc (|
                                                                                    M.call_closure (|
                                                                                      M.get_trait_method (|
                                                                                        "core::iter::traits::collect::IntoIterator",
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "core::ops::range::Range")
                                                                                          [
                                                                                            Ty.path
                                                                                              "u16"
                                                                                          ],
                                                                                        [],
                                                                                        "into_iter",
                                                                                        []
                                                                                      |),
                                                                                      [
                                                                                        Value.StructRecord
                                                                                          "core::ops::range::Range"
                                                                                          [
                                                                                            ("start",
                                                                                              Value.Integer
                                                                                                0);
                                                                                            ("end_",
                                                                                              BinOp.Panic.shl (|
                                                                                                Value.Integer
                                                                                                  1,
                                                                                                Value.Integer
                                                                                                  8
                                                                                              |))
                                                                                          ]
                                                                                      ]
                                                                                    |)
                                                                                  |),
                                                                                  [
                                                                                    fun γ =>
                                                                                      ltac:(M.monadic
                                                                                        (let iter :=
                                                                                          M.copy (|
                                                                                            γ
                                                                                          |) in
                                                                                        M.loop (|
                                                                                          ltac:(M.monadic
                                                                                            (let
                                                                                                  _ :=
                                                                                              M.match_operator (|
                                                                                                M.alloc (|
                                                                                                  M.call_closure (|
                                                                                                    M.get_trait_method (|
                                                                                                      "core::iter::traits::iterator::Iterator",
                                                                                                      Ty.apply
                                                                                                        (Ty.path
                                                                                                          "core::ops::range::Range")
                                                                                                        [
                                                                                                          Ty.path
                                                                                                            "u16"
                                                                                                        ],
                                                                                                      [],
                                                                                                      "next",
                                                                                                      []
                                                                                                    |),
                                                                                                    [
                                                                                                      iter
                                                                                                    ]
                                                                                                  |)
                                                                                                |),
                                                                                                [
                                                                                                  fun
                                                                                                      γ =>
                                                                                                    ltac:(M.monadic
                                                                                                      (M.alloc (|
                                                                                                        M.never_to_any (|
                                                                                                          M.read (|
                                                                                                            M.break (||)
                                                                                                          |)
                                                                                                        |)
                                                                                                      |)));
                                                                                                  fun
                                                                                                      γ =>
                                                                                                    ltac:(M.monadic
                                                                                                      (let
                                                                                                            γ0_0 :=
                                                                                                        M.SubPointer.get_struct_tuple_field (|
                                                                                                          γ,
                                                                                                          "core::option::Option::Some",
                                                                                                          0
                                                                                                        |) in
                                                                                                      let
                                                                                                            left :=
                                                                                                        M.copy (|
                                                                                                          γ0_0
                                                                                                        |) in
                                                                                                      M.use
                                                                                                        (M.match_operator (|
                                                                                                          M.alloc (|
                                                                                                            M.call_closure (|
                                                                                                              M.get_trait_method (|
                                                                                                                "core::iter::traits::collect::IntoIterator",
                                                                                                                Ty.apply
                                                                                                                  (Ty.path
                                                                                                                    "core::ops::range::Range")
                                                                                                                  [
                                                                                                                    Ty.path
                                                                                                                      "u16"
                                                                                                                  ],
                                                                                                                [],
                                                                                                                "into_iter",
                                                                                                                []
                                                                                                              |),
                                                                                                              [
                                                                                                                Value.StructRecord
                                                                                                                  "core::ops::range::Range"
                                                                                                                  [
                                                                                                                    ("start",
                                                                                                                      Value.Integer
                                                                                                                        0);
                                                                                                                    ("end_",
                                                                                                                      BinOp.Panic.shl (|
                                                                                                                        Value.Integer
                                                                                                                          1,
                                                                                                                        Value.Integer
                                                                                                                          8
                                                                                                                      |))
                                                                                                                  ]
                                                                                                              ]
                                                                                                            |)
                                                                                                          |),
                                                                                                          [
                                                                                                            fun
                                                                                                                γ =>
                                                                                                              ltac:(M.monadic
                                                                                                                (let
                                                                                                                      iter :=
                                                                                                                  M.copy (|
                                                                                                                    γ
                                                                                                                  |) in
                                                                                                                M.loop (|
                                                                                                                  ltac:(M.monadic
                                                                                                                    (let
                                                                                                                          _ :=
                                                                                                                      M.match_operator (|
                                                                                                                        M.alloc (|
                                                                                                                          M.call_closure (|
                                                                                                                            M.get_trait_method (|
                                                                                                                              "core::iter::traits::iterator::Iterator",
                                                                                                                              Ty.apply
                                                                                                                                (Ty.path
                                                                                                                                  "core::ops::range::Range")
                                                                                                                                [
                                                                                                                                  Ty.path
                                                                                                                                    "u16"
                                                                                                                                ],
                                                                                                                              [],
                                                                                                                              "next",
                                                                                                                              []
                                                                                                                            |),
                                                                                                                            [
                                                                                                                              iter
                                                                                                                            ]
                                                                                                                          |)
                                                                                                                        |),
                                                                                                                        [
                                                                                                                          fun
                                                                                                                              γ =>
                                                                                                                            ltac:(M.monadic
                                                                                                                              (M.alloc (|
                                                                                                                                M.never_to_any (|
                                                                                                                                  M.read (|
                                                                                                                                    M.break (||)
                                                                                                                                  |)
                                                                                                                                |)
                                                                                                                              |)));
                                                                                                                          fun
                                                                                                                              γ =>
                                                                                                                            ltac:(M.monadic
                                                                                                                              (let
                                                                                                                                    γ0_0 :=
                                                                                                                                M.SubPointer.get_struct_tuple_field (|
                                                                                                                                  γ,
                                                                                                                                  "core::option::Option::Some",
                                                                                                                                  0
                                                                                                                                |) in
                                                                                                                              let
                                                                                                                                    right :=
                                                                                                                                M.copy (|
                                                                                                                                  γ0_0
                                                                                                                                |) in
                                                                                                                              let
                                                                                                                                    _ :=
                                                                                                                                M.match_operator (|
                                                                                                                                  M.alloc (|
                                                                                                                                    M.call_closure (|
                                                                                                                                      M.get_trait_method (|
                                                                                                                                        "core::ops::try_trait::Try",
                                                                                                                                        Ty.apply
                                                                                                                                          (Ty.path
                                                                                                                                            "core::result::Result")
                                                                                                                                          [
                                                                                                                                            Ty.tuple
                                                                                                                                              [];
                                                                                                                                            Ty.path
                                                                                                                                              "halo2_proofs::plonk::error::Error"
                                                                                                                                          ],
                                                                                                                                        [],
                                                                                                                                        "branch",
                                                                                                                                        []
                                                                                                                                      |),
                                                                                                                                      [
                                                                                                                                        M.call_closure (|
                                                                                                                                          M.get_associated_function (|
                                                                                                                                            Ty.apply
                                                                                                                                              (Ty.path
                                                                                                                                                "halo2_proofs::circuit::Table")
                                                                                                                                              [
                                                                                                                                                F
                                                                                                                                              ],
                                                                                                                                            "assign_cell",
                                                                                                                                            [
                                                                                                                                              Ty.function
                                                                                                                                                [
                                                                                                                                                  Ty.tuple
                                                                                                                                                    []
                                                                                                                                                ]
                                                                                                                                                (Ty.apply
                                                                                                                                                  (Ty.path
                                                                                                                                                    "core::result::Result")
                                                                                                                                                  [
                                                                                                                                                    F;
                                                                                                                                                    Ty.path
                                                                                                                                                      "halo2_proofs::plonk::error::Error"
                                                                                                                                                  ]);
                                                                                                                                              F;
                                                                                                                                              Ty.function
                                                                                                                                                [
                                                                                                                                                  Ty.tuple
                                                                                                                                                    []
                                                                                                                                                ]
                                                                                                                                                (Ty.apply
                                                                                                                                                  (Ty.path
                                                                                                                                                    "&")
                                                                                                                                                  [
                                                                                                                                                    Ty.path
                                                                                                                                                      "str"
                                                                                                                                                  ]);
                                                                                                                                              Ty.apply
                                                                                                                                                (Ty.path
                                                                                                                                                  "&")
                                                                                                                                                [
                                                                                                                                                  Ty.path
                                                                                                                                                    "str"
                                                                                                                                                ]
                                                                                                                                            ]
                                                                                                                                          |),
                                                                                                                                          [
                                                                                                                                            table;
                                                                                                                                            M.closure
                                                                                                                                              (fun
                                                                                                                                                  γ =>
                                                                                                                                                ltac:(M.monadic
                                                                                                                                                  match
                                                                                                                                                    γ
                                                                                                                                                  with
                                                                                                                                                  | [
                                                                                                                                                        α0
                                                                                                                                                      ] =>
                                                                                                                                                    M.match_operator (|
                                                                                                                                                      M.alloc (|
                                                                                                                                                        α0
                                                                                                                                                      |),
                                                                                                                                                      [
                                                                                                                                                        fun
                                                                                                                                                            γ =>
                                                                                                                                                          ltac:(M.monadic
                                                                                                                                                            (M.read (|
                                                                                                                                                              Value.String
                                                                                                                                                                "range table"
                                                                                                                                                            |)))
                                                                                                                                                      ]
                                                                                                                                                    |)
                                                                                                                                                  | _ =>
                                                                                                                                                    M.impossible (||)
                                                                                                                                                  end));
                                                                                                                                            M.read (|
                                                                                                                                              M.SubPointer.get_struct_record_field (|
                                                                                                                                                M.SubPointer.get_struct_record_field (|
                                                                                                                                                  M.SubPointer.get_struct_record_field (|
                                                                                                                                                    M.read (|
                                                                                                                                                      self
                                                                                                                                                    |),
                                                                                                                                                    "delphinus_zkwasm::circuits::rtable::RangeTableChip",
                                                                                                                                                    "config"
                                                                                                                                                  |),
                                                                                                                                                  "delphinus_zkwasm::circuits::rtable::RangeTableConfig",
                                                                                                                                                  "op_table"
                                                                                                                                                |),
                                                                                                                                                "delphinus_zkwasm::circuits::rtable::OpTable",
                                                                                                                                                "op"
                                                                                                                                              |)
                                                                                                                                            |);
                                                                                                                                            M.read (|
                                                                                                                                              M.use
                                                                                                                                                offset
                                                                                                                                            |);
                                                                                                                                            M.closure
                                                                                                                                              (fun
                                                                                                                                                  γ =>
                                                                                                                                                ltac:(M.monadic
                                                                                                                                                  match
                                                                                                                                                    γ
                                                                                                                                                  with
                                                                                                                                                  | [
                                                                                                                                                        α0
                                                                                                                                                      ] =>
                                                                                                                                                    M.match_operator (|
                                                                                                                                                      M.alloc (|
                                                                                                                                                        α0
                                                                                                                                                      |),
                                                                                                                                                      [
                                                                                                                                                        fun
                                                                                                                                                            γ =>
                                                                                                                                                          ltac:(M.monadic
                                                                                                                                                            (Value.StructTuple
                                                                                                                                                              "core::result::Result::Ok"
                                                                                                                                                              [
                                                                                                                                                                M.call_closure (|
                                                                                                                                                                  M.get_trait_method (|
                                                                                                                                                                    "core::convert::From",
                                                                                                                                                                    F,
                                                                                                                                                                    [
                                                                                                                                                                      Ty.path
                                                                                                                                                                        "u64"
                                                                                                                                                                    ],
                                                                                                                                                                    "from",
                                                                                                                                                                    []
                                                                                                                                                                  |),
                                                                                                                                                                  [
                                                                                                                                                                    M.rust_cast
                                                                                                                                                                      (M.read (|
                                                                                                                                                                        op
                                                                                                                                                                      |))
                                                                                                                                                                  ]
                                                                                                                                                                |)
                                                                                                                                                              ]))
                                                                                                                                                      ]
                                                                                                                                                    |)
                                                                                                                                                  | _ =>
                                                                                                                                                    M.impossible (||)
                                                                                                                                                  end))
                                                                                                                                          ]
                                                                                                                                        |)
                                                                                                                                      ]
                                                                                                                                    |)
                                                                                                                                  |),
                                                                                                                                  [
                                                                                                                                    fun
                                                                                                                                        γ =>
                                                                                                                                      ltac:(M.monadic
                                                                                                                                        (let
                                                                                                                                              γ0_0 :=
                                                                                                                                          M.SubPointer.get_struct_tuple_field (|
                                                                                                                                            γ,
                                                                                                                                            "core::ops::control_flow::ControlFlow::Break",
                                                                                                                                            0
                                                                                                                                          |) in
                                                                                                                                        let
                                                                                                                                              residual :=
                                                                                                                                          M.copy (|
                                                                                                                                            γ0_0
                                                                                                                                          |) in
                                                                                                                                        M.alloc (|
                                                                                                                                          M.never_to_any (|
                                                                                                                                            M.read (|
                                                                                                                                              M.return_ (|
                                                                                                                                                M.call_closure (|
                                                                                                                                                  M.get_trait_method (|
                                                                                                                                                    "core::ops::try_trait::FromResidual",
                                                                                                                                                    Ty.apply
                                                                                                                                                      (Ty.path
                                                                                                                                                        "core::result::Result")
                                                                                                                                                      [
                                                                                                                                                        Ty.tuple
                                                                                                                                                          [];
                                                                                                                                                        Ty.path
                                                                                                                                                          "halo2_proofs::plonk::error::Error"
                                                                                                                                                      ],
                                                                                                                                                    [
                                                                                                                                                      Ty.apply
                                                                                                                                                        (Ty.path
                                                                                                                                                          "core::result::Result")
                                                                                                                                                        [
                                                                                                                                                          Ty.path
                                                                                                                                                            "core::convert::Infallible";
                                                                                                                                                          Ty.path
                                                                                                                                                            "halo2_proofs::plonk::error::Error"
                                                                                                                                                        ]
                                                                                                                                                    ],
                                                                                                                                                    "from_residual",
                                                                                                                                                    []
                                                                                                                                                  |),
                                                                                                                                                  [
                                                                                                                                                    M.read (|
                                                                                                                                                      residual
                                                                                                                                                    |)
                                                                                                                                                  ]
                                                                                                                                                |)
                                                                                                                                              |)
                                                                                                                                            |)
                                                                                                                                          |)
                                                                                                                                        |)));
                                                                                                                                    fun
                                                                                                                                        γ =>
                                                                                                                                      ltac:(M.monadic
                                                                                                                                        (let
                                                                                                                                              γ0_0 :=
                                                                                                                                          M.SubPointer.get_struct_tuple_field (|
                                                                                                                                            γ,
                                                                                                                                            "core::ops::control_flow::ControlFlow::Continue",
                                                                                                                                            0
                                                                                                                                          |) in
                                                                                                                                        let
                                                                                                                                              val :=
                                                                                                                                          M.copy (|
                                                                                                                                            γ0_0
                                                                                                                                          |) in
                                                                                                                                        val))
                                                                                                                                  ]
                                                                                                                                |) in
                                                                                                                              let
                                                                                                                                    _ :=
                                                                                                                                M.match_operator (|
                                                                                                                                  M.alloc (|
                                                                                                                                    M.call_closure (|
                                                                                                                                      M.get_trait_method (|
                                                                                                                                        "core::ops::try_trait::Try",
                                                                                                                                        Ty.apply
                                                                                                                                          (Ty.path
                                                                                                                                            "core::result::Result")
                                                                                                                                          [
                                                                                                                                            Ty.tuple
                                                                                                                                              [];
                                                                                                                                            Ty.path
                                                                                                                                              "halo2_proofs::plonk::error::Error"
                                                                                                                                          ],
                                                                                                                                        [],
                                                                                                                                        "branch",
                                                                                                                                        []
                                                                                                                                      |),
                                                                                                                                      [
                                                                                                                                        M.call_closure (|
                                                                                                                                          M.get_associated_function (|
                                                                                                                                            Ty.apply
                                                                                                                                              (Ty.path
                                                                                                                                                "halo2_proofs::circuit::Table")
                                                                                                                                              [
                                                                                                                                                F
                                                                                                                                              ],
                                                                                                                                            "assign_cell",
                                                                                                                                            [
                                                                                                                                              Ty.function
                                                                                                                                                [
                                                                                                                                                  Ty.tuple
                                                                                                                                                    []
                                                                                                                                                ]
                                                                                                                                                (Ty.apply
                                                                                                                                                  (Ty.path
                                                                                                                                                    "core::result::Result")
                                                                                                                                                  [
                                                                                                                                                    F;
                                                                                                                                                    Ty.path
                                                                                                                                                      "halo2_proofs::plonk::error::Error"
                                                                                                                                                  ]);
                                                                                                                                              F;
                                                                                                                                              Ty.function
                                                                                                                                                [
                                                                                                                                                  Ty.tuple
                                                                                                                                                    []
                                                                                                                                                ]
                                                                                                                                                (Ty.apply
                                                                                                                                                  (Ty.path
                                                                                                                                                    "&")
                                                                                                                                                  [
                                                                                                                                                    Ty.path
                                                                                                                                                      "str"
                                                                                                                                                  ]);
                                                                                                                                              Ty.apply
                                                                                                                                                (Ty.path
                                                                                                                                                  "&")
                                                                                                                                                [
                                                                                                                                                  Ty.path
                                                                                                                                                    "str"
                                                                                                                                                ]
                                                                                                                                            ]
                                                                                                                                          |),
                                                                                                                                          [
                                                                                                                                            table;
                                                                                                                                            M.closure
                                                                                                                                              (fun
                                                                                                                                                  γ =>
                                                                                                                                                ltac:(M.monadic
                                                                                                                                                  match
                                                                                                                                                    γ
                                                                                                                                                  with
                                                                                                                                                  | [
                                                                                                                                                        α0
                                                                                                                                                      ] =>
                                                                                                                                                    M.match_operator (|
                                                                                                                                                      M.alloc (|
                                                                                                                                                        α0
                                                                                                                                                      |),
                                                                                                                                                      [
                                                                                                                                                        fun
                                                                                                                                                            γ =>
                                                                                                                                                          ltac:(M.monadic
                                                                                                                                                            (M.read (|
                                                                                                                                                              Value.String
                                                                                                                                                                "range table"
                                                                                                                                                            |)))
                                                                                                                                                      ]
                                                                                                                                                    |)
                                                                                                                                                  | _ =>
                                                                                                                                                    M.impossible (||)
                                                                                                                                                  end));
                                                                                                                                            M.read (|
                                                                                                                                              M.SubPointer.get_struct_record_field (|
                                                                                                                                                M.SubPointer.get_struct_record_field (|
                                                                                                                                                  M.SubPointer.get_struct_record_field (|
                                                                                                                                                    M.read (|
                                                                                                                                                      self
                                                                                                                                                    |),
                                                                                                                                                    "delphinus_zkwasm::circuits::rtable::RangeTableChip",
                                                                                                                                                    "config"
                                                                                                                                                  |),
                                                                                                                                                  "delphinus_zkwasm::circuits::rtable::RangeTableConfig",
                                                                                                                                                  "op_table"
                                                                                                                                                |),
                                                                                                                                                "delphinus_zkwasm::circuits::rtable::OpTable",
                                                                                                                                                "left"
                                                                                                                                              |)
                                                                                                                                            |);
                                                                                                                                            M.read (|
                                                                                                                                              M.use
                                                                                                                                                offset
                                                                                                                                            |);
                                                                                                                                            M.closure
                                                                                                                                              (fun
                                                                                                                                                  γ =>
                                                                                                                                                ltac:(M.monadic
                                                                                                                                                  match
                                                                                                                                                    γ
                                                                                                                                                  with
                                                                                                                                                  | [
                                                                                                                                                        α0
                                                                                                                                                      ] =>
                                                                                                                                                    M.match_operator (|
                                                                                                                                                      M.alloc (|
                                                                                                                                                        α0
                                                                                                                                                      |),
                                                                                                                                                      [
                                                                                                                                                        fun
                                                                                                                                                            γ =>
                                                                                                                                                          ltac:(M.monadic
                                                                                                                                                            (Value.StructTuple
                                                                                                                                                              "core::result::Result::Ok"
                                                                                                                                                              [
                                                                                                                                                                M.call_closure (|
                                                                                                                                                                  M.get_trait_method (|
                                                                                                                                                                    "core::convert::From",
                                                                                                                                                                    F,
                                                                                                                                                                    [
                                                                                                                                                                      Ty.path
                                                                                                                                                                        "u64"
                                                                                                                                                                    ],
                                                                                                                                                                    "from",
                                                                                                                                                                    []
                                                                                                                                                                  |),
                                                                                                                                                                  [
                                                                                                                                                                    M.rust_cast
                                                                                                                                                                      (M.read (|
                                                                                                                                                                        left
                                                                                                                                                                      |))
                                                                                                                                                                  ]
                                                                                                                                                                |)
                                                                                                                                                              ]))
                                                                                                                                                      ]
                                                                                                                                                    |)
                                                                                                                                                  | _ =>
                                                                                                                                                    M.impossible (||)
                                                                                                                                                  end))
                                                                                                                                          ]
                                                                                                                                        |)
                                                                                                                                      ]
                                                                                                                                    |)
                                                                                                                                  |),
                                                                                                                                  [
                                                                                                                                    fun
                                                                                                                                        γ =>
                                                                                                                                      ltac:(M.monadic
                                                                                                                                        (let
                                                                                                                                              γ0_0 :=
                                                                                                                                          M.SubPointer.get_struct_tuple_field (|
                                                                                                                                            γ,
                                                                                                                                            "core::ops::control_flow::ControlFlow::Break",
                                                                                                                                            0
                                                                                                                                          |) in
                                                                                                                                        let
                                                                                                                                              residual :=
                                                                                                                                          M.copy (|
                                                                                                                                            γ0_0
                                                                                                                                          |) in
                                                                                                                                        M.alloc (|
                                                                                                                                          M.never_to_any (|
                                                                                                                                            M.read (|
                                                                                                                                              M.return_ (|
                                                                                                                                                M.call_closure (|
                                                                                                                                                  M.get_trait_method (|
                                                                                                                                                    "core::ops::try_trait::FromResidual",
                                                                                                                                                    Ty.apply
                                                                                                                                                      (Ty.path
                                                                                                                                                        "core::result::Result")
                                                                                                                                                      [
                                                                                                                                                        Ty.tuple
                                                                                                                                                          [];
                                                                                                                                                        Ty.path
                                                                                                                                                          "halo2_proofs::plonk::error::Error"
                                                                                                                                                      ],
                                                                                                                                                    [
                                                                                                                                                      Ty.apply
                                                                                                                                                        (Ty.path
                                                                                                                                                          "core::result::Result")
                                                                                                                                                        [
                                                                                                                                                          Ty.path
                                                                                                                                                            "core::convert::Infallible";
                                                                                                                                                          Ty.path
                                                                                                                                                            "halo2_proofs::plonk::error::Error"
                                                                                                                                                        ]
                                                                                                                                                    ],
                                                                                                                                                    "from_residual",
                                                                                                                                                    []
                                                                                                                                                  |),
                                                                                                                                                  [
                                                                                                                                                    M.read (|
                                                                                                                                                      residual
                                                                                                                                                    |)
                                                                                                                                                  ]
                                                                                                                                                |)
                                                                                                                                              |)
                                                                                                                                            |)
                                                                                                                                          |)
                                                                                                                                        |)));
                                                                                                                                    fun
                                                                                                                                        γ =>
                                                                                                                                      ltac:(M.monadic
                                                                                                                                        (let
                                                                                                                                              γ0_0 :=
                                                                                                                                          M.SubPointer.get_struct_tuple_field (|
                                                                                                                                            γ,
                                                                                                                                            "core::ops::control_flow::ControlFlow::Continue",
                                                                                                                                            0
                                                                                                                                          |) in
                                                                                                                                        let
                                                                                                                                              val :=
                                                                                                                                          M.copy (|
                                                                                                                                            γ0_0
                                                                                                                                          |) in
                                                                                                                                        val))
                                                                                                                                  ]
                                                                                                                                |) in
                                                                                                                              let
                                                                                                                                    _ :=
                                                                                                                                M.match_operator (|
                                                                                                                                  M.alloc (|
                                                                                                                                    M.call_closure (|
                                                                                                                                      M.get_trait_method (|
                                                                                                                                        "core::ops::try_trait::Try",
                                                                                                                                        Ty.apply
                                                                                                                                          (Ty.path
                                                                                                                                            "core::result::Result")
                                                                                                                                          [
                                                                                                                                            Ty.tuple
                                                                                                                                              [];
                                                                                                                                            Ty.path
                                                                                                                                              "halo2_proofs::plonk::error::Error"
                                                                                                                                          ],
                                                                                                                                        [],
                                                                                                                                        "branch",
                                                                                                                                        []
                                                                                                                                      |),
                                                                                                                                      [
                                                                                                                                        M.call_closure (|
                                                                                                                                          M.get_associated_function (|
                                                                                                                                            Ty.apply
                                                                                                                                              (Ty.path
                                                                                                                                                "halo2_proofs::circuit::Table")
                                                                                                                                              [
                                                                                                                                                F
                                                                                                                                              ],
                                                                                                                                            "assign_cell",
                                                                                                                                            [
                                                                                                                                              Ty.function
                                                                                                                                                [
                                                                                                                                                  Ty.tuple
                                                                                                                                                    []
                                                                                                                                                ]
                                                                                                                                                (Ty.apply
                                                                                                                                                  (Ty.path
                                                                                                                                                    "core::result::Result")
                                                                                                                                                  [
                                                                                                                                                    F;
                                                                                                                                                    Ty.path
                                                                                                                                                      "halo2_proofs::plonk::error::Error"
                                                                                                                                                  ]);
                                                                                                                                              F;
                                                                                                                                              Ty.function
                                                                                                                                                [
                                                                                                                                                  Ty.tuple
                                                                                                                                                    []
                                                                                                                                                ]
                                                                                                                                                (Ty.apply
                                                                                                                                                  (Ty.path
                                                                                                                                                    "&")
                                                                                                                                                  [
                                                                                                                                                    Ty.path
                                                                                                                                                      "str"
                                                                                                                                                  ]);
                                                                                                                                              Ty.apply
                                                                                                                                                (Ty.path
                                                                                                                                                  "&")
                                                                                                                                                [
                                                                                                                                                  Ty.path
                                                                                                                                                    "str"
                                                                                                                                                ]
                                                                                                                                            ]
                                                                                                                                          |),
                                                                                                                                          [
                                                                                                                                            table;
                                                                                                                                            M.closure
                                                                                                                                              (fun
                                                                                                                                                  γ =>
                                                                                                                                                ltac:(M.monadic
                                                                                                                                                  match
                                                                                                                                                    γ
                                                                                                                                                  with
                                                                                                                                                  | [
                                                                                                                                                        α0
                                                                                                                                                      ] =>
                                                                                                                                                    M.match_operator (|
                                                                                                                                                      M.alloc (|
                                                                                                                                                        α0
                                                                                                                                                      |),
                                                                                                                                                      [
                                                                                                                                                        fun
                                                                                                                                                            γ =>
                                                                                                                                                          ltac:(M.monadic
                                                                                                                                                            (M.read (|
                                                                                                                                                              Value.String
                                                                                                                                                                "range table"
                                                                                                                                                            |)))
                                                                                                                                                      ]
                                                                                                                                                    |)
                                                                                                                                                  | _ =>
                                                                                                                                                    M.impossible (||)
                                                                                                                                                  end));
                                                                                                                                            M.read (|
                                                                                                                                              M.SubPointer.get_struct_record_field (|
                                                                                                                                                M.SubPointer.get_struct_record_field (|
                                                                                                                                                  M.SubPointer.get_struct_record_field (|
                                                                                                                                                    M.read (|
                                                                                                                                                      self
                                                                                                                                                    |),
                                                                                                                                                    "delphinus_zkwasm::circuits::rtable::RangeTableChip",
                                                                                                                                                    "config"
                                                                                                                                                  |),
                                                                                                                                                  "delphinus_zkwasm::circuits::rtable::RangeTableConfig",
                                                                                                                                                  "op_table"
                                                                                                                                                |),
                                                                                                                                                "delphinus_zkwasm::circuits::rtable::OpTable",
                                                                                                                                                "right"
                                                                                                                                              |)
                                                                                                                                            |);
                                                                                                                                            M.read (|
                                                                                                                                              M.use
                                                                                                                                                offset
                                                                                                                                            |);
                                                                                                                                            M.closure
                                                                                                                                              (fun
                                                                                                                                                  γ =>
                                                                                                                                                ltac:(M.monadic
                                                                                                                                                  match
                                                                                                                                                    γ
                                                                                                                                                  with
                                                                                                                                                  | [
                                                                                                                                                        α0
                                                                                                                                                      ] =>
                                                                                                                                                    M.match_operator (|
                                                                                                                                                      M.alloc (|
                                                                                                                                                        α0
                                                                                                                                                      |),
                                                                                                                                                      [
                                                                                                                                                        fun
                                                                                                                                                            γ =>
                                                                                                                                                          ltac:(M.monadic
                                                                                                                                                            (Value.StructTuple
                                                                                                                                                              "core::result::Result::Ok"
                                                                                                                                                              [
                                                                                                                                                                M.call_closure (|
                                                                                                                                                                  M.get_trait_method (|
                                                                                                                                                                    "core::convert::From",
                                                                                                                                                                    F,
                                                                                                                                                                    [
                                                                                                                                                                      Ty.path
                                                                                                                                                                        "u64"
                                                                                                                                                                    ],
                                                                                                                                                                    "from",
                                                                                                                                                                    []
                                                                                                                                                                  |),
                                                                                                                                                                  [
                                                                                                                                                                    M.rust_cast
                                                                                                                                                                      (M.read (|
                                                                                                                                                                        right
                                                                                                                                                                      |))
                                                                                                                                                                  ]
                                                                                                                                                                |)
                                                                                                                                                              ]))
                                                                                                                                                      ]
                                                                                                                                                    |)
                                                                                                                                                  | _ =>
                                                                                                                                                    M.impossible (||)
                                                                                                                                                  end))
                                                                                                                                          ]
                                                                                                                                        |)
                                                                                                                                      ]
                                                                                                                                    |)
                                                                                                                                  |),
                                                                                                                                  [
                                                                                                                                    fun
                                                                                                                                        γ =>
                                                                                                                                      ltac:(M.monadic
                                                                                                                                        (let
                                                                                                                                              γ0_0 :=
                                                                                                                                          M.SubPointer.get_struct_tuple_field (|
                                                                                                                                            γ,
                                                                                                                                            "core::ops::control_flow::ControlFlow::Break",
                                                                                                                                            0
                                                                                                                                          |) in
                                                                                                                                        let
                                                                                                                                              residual :=
                                                                                                                                          M.copy (|
                                                                                                                                            γ0_0
                                                                                                                                          |) in
                                                                                                                                        M.alloc (|
                                                                                                                                          M.never_to_any (|
                                                                                                                                            M.read (|
                                                                                                                                              M.return_ (|
                                                                                                                                                M.call_closure (|
                                                                                                                                                  M.get_trait_method (|
                                                                                                                                                    "core::ops::try_trait::FromResidual",
                                                                                                                                                    Ty.apply
                                                                                                                                                      (Ty.path
                                                                                                                                                        "core::result::Result")
                                                                                                                                                      [
                                                                                                                                                        Ty.tuple
                                                                                                                                                          [];
                                                                                                                                                        Ty.path
                                                                                                                                                          "halo2_proofs::plonk::error::Error"
                                                                                                                                                      ],
                                                                                                                                                    [
                                                                                                                                                      Ty.apply
                                                                                                                                                        (Ty.path
                                                                                                                                                          "core::result::Result")
                                                                                                                                                        [
                                                                                                                                                          Ty.path
                                                                                                                                                            "core::convert::Infallible";
                                                                                                                                                          Ty.path
                                                                                                                                                            "halo2_proofs::plonk::error::Error"
                                                                                                                                                        ]
                                                                                                                                                    ],
                                                                                                                                                    "from_residual",
                                                                                                                                                    []
                                                                                                                                                  |),
                                                                                                                                                  [
                                                                                                                                                    M.read (|
                                                                                                                                                      residual
                                                                                                                                                    |)
                                                                                                                                                  ]
                                                                                                                                                |)
                                                                                                                                              |)
                                                                                                                                            |)
                                                                                                                                          |)
                                                                                                                                        |)));
                                                                                                                                    fun
                                                                                                                                        γ =>
                                                                                                                                      ltac:(M.monadic
                                                                                                                                        (let
                                                                                                                                              γ0_0 :=
                                                                                                                                          M.SubPointer.get_struct_tuple_field (|
                                                                                                                                            γ,
                                                                                                                                            "core::ops::control_flow::ControlFlow::Continue",
                                                                                                                                            0
                                                                                                                                          |) in
                                                                                                                                        let
                                                                                                                                              val :=
                                                                                                                                          M.copy (|
                                                                                                                                            γ0_0
                                                                                                                                          |) in
                                                                                                                                        val))
                                                                                                                                  ]
                                                                                                                                |) in
                                                                                                                              let
                                                                                                                                    _ :=
                                                                                                                                M.match_operator (|
                                                                                                                                  M.alloc (|
                                                                                                                                    M.call_closure (|
                                                                                                                                      M.get_trait_method (|
                                                                                                                                        "core::ops::try_trait::Try",
                                                                                                                                        Ty.apply
                                                                                                                                          (Ty.path
                                                                                                                                            "core::result::Result")
                                                                                                                                          [
                                                                                                                                            Ty.tuple
                                                                                                                                              [];
                                                                                                                                            Ty.path
                                                                                                                                              "halo2_proofs::plonk::error::Error"
                                                                                                                                          ],
                                                                                                                                        [],
                                                                                                                                        "branch",
                                                                                                                                        []
                                                                                                                                      |),
                                                                                                                                      [
                                                                                                                                        M.call_closure (|
                                                                                                                                          M.get_associated_function (|
                                                                                                                                            Ty.apply
                                                                                                                                              (Ty.path
                                                                                                                                                "halo2_proofs::circuit::Table")
                                                                                                                                              [
                                                                                                                                                F
                                                                                                                                              ],
                                                                                                                                            "assign_cell",
                                                                                                                                            [
                                                                                                                                              Ty.function
                                                                                                                                                [
                                                                                                                                                  Ty.tuple
                                                                                                                                                    []
                                                                                                                                                ]
                                                                                                                                                (Ty.apply
                                                                                                                                                  (Ty.path
                                                                                                                                                    "core::result::Result")
                                                                                                                                                  [
                                                                                                                                                    F;
                                                                                                                                                    Ty.path
                                                                                                                                                      "halo2_proofs::plonk::error::Error"
                                                                                                                                                  ]);
                                                                                                                                              F;
                                                                                                                                              Ty.function
                                                                                                                                                [
                                                                                                                                                  Ty.tuple
                                                                                                                                                    []
                                                                                                                                                ]
                                                                                                                                                (Ty.apply
                                                                                                                                                  (Ty.path
                                                                                                                                                    "&")
                                                                                                                                                  [
                                                                                                                                                    Ty.path
                                                                                                                                                      "str"
                                                                                                                                                  ]);
                                                                                                                                              Ty.apply
                                                                                                                                                (Ty.path
                                                                                                                                                  "&")
                                                                                                                                                [
                                                                                                                                                  Ty.path
                                                                                                                                                    "str"
                                                                                                                                                ]
                                                                                                                                            ]
                                                                                                                                          |),
                                                                                                                                          [
                                                                                                                                            table;
                                                                                                                                            M.closure
                                                                                                                                              (fun
                                                                                                                                                  γ =>
                                                                                                                                                ltac:(M.monadic
                                                                                                                                                  match
                                                                                                                                                    γ
                                                                                                                                                  with
                                                                                                                                                  | [
                                                                                                                                                        α0
                                                                                                                                                      ] =>
                                                                                                                                                    M.match_operator (|
                                                                                                                                                      M.alloc (|
                                                                                                                                                        α0
                                                                                                                                                      |),
                                                                                                                                                      [
                                                                                                                                                        fun
                                                                                                                                                            γ =>
                                                                                                                                                          ltac:(M.monadic
                                                                                                                                                            (M.read (|
                                                                                                                                                              Value.String
                                                                                                                                                                "range table"
                                                                                                                                                            |)))
                                                                                                                                                      ]
                                                                                                                                                    |)
                                                                                                                                                  | _ =>
                                                                                                                                                    M.impossible (||)
                                                                                                                                                  end));
                                                                                                                                            M.read (|
                                                                                                                                              M.SubPointer.get_struct_record_field (|
                                                                                                                                                M.SubPointer.get_struct_record_field (|
                                                                                                                                                  M.SubPointer.get_struct_record_field (|
                                                                                                                                                    M.read (|
                                                                                                                                                      self
                                                                                                                                                    |),
                                                                                                                                                    "delphinus_zkwasm::circuits::rtable::RangeTableChip",
                                                                                                                                                    "config"
                                                                                                                                                  |),
                                                                                                                                                  "delphinus_zkwasm::circuits::rtable::RangeTableConfig",
                                                                                                                                                  "op_table"
                                                                                                                                                |),
                                                                                                                                                "delphinus_zkwasm::circuits::rtable::OpTable",
                                                                                                                                                "result"
                                                                                                                                              |)
                                                                                                                                            |);
                                                                                                                                            M.read (|
                                                                                                                                              M.use
                                                                                                                                                offset
                                                                                                                                            |);
                                                                                                                                            M.closure
                                                                                                                                              (fun
                                                                                                                                                  γ =>
                                                                                                                                                ltac:(M.monadic
                                                                                                                                                  match
                                                                                                                                                    γ
                                                                                                                                                  with
                                                                                                                                                  | [
                                                                                                                                                        α0
                                                                                                                                                      ] =>
                                                                                                                                                    M.match_operator (|
                                                                                                                                                      M.alloc (|
                                                                                                                                                        α0
                                                                                                                                                      |),
                                                                                                                                                      [
                                                                                                                                                        fun
                                                                                                                                                            γ =>
                                                                                                                                                          ltac:(M.monadic
                                                                                                                                                            (Value.StructTuple
                                                                                                                                                              "core::result::Result::Ok"
                                                                                                                                                              [
                                                                                                                                                                M.call_closure (|
                                                                                                                                                                  M.get_trait_method (|
                                                                                                                                                                    "core::convert::From",
                                                                                                                                                                    F,
                                                                                                                                                                    [
                                                                                                                                                                      Ty.path
                                                                                                                                                                        "u64"
                                                                                                                                                                    ],
                                                                                                                                                                    "from",
                                                                                                                                                                    []
                                                                                                                                                                  |),
                                                                                                                                                                  [
                                                                                                                                                                    M.call_closure (|
                                                                                                                                                                      M.get_associated_function (|
                                                                                                                                                                        Ty.path
                                                                                                                                                                          "specs::itable::BitOp",
                                                                                                                                                                        "eval",
                                                                                                                                                                        []
                                                                                                                                                                      |),
                                                                                                                                                                      [
                                                                                                                                                                        op;
                                                                                                                                                                        M.rust_cast
                                                                                                                                                                          (M.read (|
                                                                                                                                                                            left
                                                                                                                                                                          |));
                                                                                                                                                                        M.rust_cast
                                                                                                                                                                          (M.read (|
                                                                                                                                                                            right
                                                                                                                                                                          |))
                                                                                                                                                                      ]
                                                                                                                                                                    |)
                                                                                                                                                                  ]
                                                                                                                                                                |)
                                                                                                                                                              ]))
                                                                                                                                                      ]
                                                                                                                                                    |)
                                                                                                                                                  | _ =>
                                                                                                                                                    M.impossible (||)
                                                                                                                                                  end))
                                                                                                                                          ]
                                                                                                                                        |)
                                                                                                                                      ]
                                                                                                                                    |)
                                                                                                                                  |),
                                                                                                                                  [
                                                                                                                                    fun
                                                                                                                                        γ =>
                                                                                                                                      ltac:(M.monadic
                                                                                                                                        (let
                                                                                                                                              γ0_0 :=
                                                                                                                                          M.SubPointer.get_struct_tuple_field (|
                                                                                                                                            γ,
                                                                                                                                            "core::ops::control_flow::ControlFlow::Break",
                                                                                                                                            0
                                                                                                                                          |) in
                                                                                                                                        let
                                                                                                                                              residual :=
                                                                                                                                          M.copy (|
                                                                                                                                            γ0_0
                                                                                                                                          |) in
                                                                                                                                        M.alloc (|
                                                                                                                                          M.never_to_any (|
                                                                                                                                            M.read (|
                                                                                                                                              M.return_ (|
                                                                                                                                                M.call_closure (|
                                                                                                                                                  M.get_trait_method (|
                                                                                                                                                    "core::ops::try_trait::FromResidual",
                                                                                                                                                    Ty.apply
                                                                                                                                                      (Ty.path
                                                                                                                                                        "core::result::Result")
                                                                                                                                                      [
                                                                                                                                                        Ty.tuple
                                                                                                                                                          [];
                                                                                                                                                        Ty.path
                                                                                                                                                          "halo2_proofs::plonk::error::Error"
                                                                                                                                                      ],
                                                                                                                                                    [
                                                                                                                                                      Ty.apply
                                                                                                                                                        (Ty.path
                                                                                                                                                          "core::result::Result")
                                                                                                                                                        [
                                                                                                                                                          Ty.path
                                                                                                                                                            "core::convert::Infallible";
                                                                                                                                                          Ty.path
                                                                                                                                                            "halo2_proofs::plonk::error::Error"
                                                                                                                                                        ]
                                                                                                                                                    ],
                                                                                                                                                    "from_residual",
                                                                                                                                                    []
                                                                                                                                                  |),
                                                                                                                                                  [
                                                                                                                                                    M.read (|
                                                                                                                                                      residual
                                                                                                                                                    |)
                                                                                                                                                  ]
                                                                                                                                                |)
                                                                                                                                              |)
                                                                                                                                            |)
                                                                                                                                          |)
                                                                                                                                        |)));
                                                                                                                                    fun
                                                                                                                                        γ =>
                                                                                                                                      ltac:(M.monadic
                                                                                                                                        (let
                                                                                                                                              γ0_0 :=
                                                                                                                                          M.SubPointer.get_struct_tuple_field (|
                                                                                                                                            γ,
                                                                                                                                            "core::ops::control_flow::ControlFlow::Continue",
                                                                                                                                            0
                                                                                                                                          |) in
                                                                                                                                        let
                                                                                                                                              val :=
                                                                                                                                          M.copy (|
                                                                                                                                            γ0_0
                                                                                                                                          |) in
                                                                                                                                        val))
                                                                                                                                  ]
                                                                                                                                |) in
                                                                                                                              let
                                                                                                                                    _ :=
                                                                                                                                let
                                                                                                                                      β :=
                                                                                                                                  offset in
                                                                                                                                M.write (|
                                                                                                                                  β,
                                                                                                                                  BinOp.Panic.add (|
                                                                                                                                    Integer.Usize,
                                                                                                                                    M.read (|
                                                                                                                                      β
                                                                                                                                    |),
                                                                                                                                    Value.Integer
                                                                                                                                      1
                                                                                                                                  |)
                                                                                                                                |) in
                                                                                                                              M.alloc (|
                                                                                                                                Value.Tuple
                                                                                                                                  []
                                                                                                                              |)))
                                                                                                                        ]
                                                                                                                      |) in
                                                                                                                    M.alloc (|
                                                                                                                      Value.Tuple
                                                                                                                        []
                                                                                                                    |)))
                                                                                                                |)))
                                                                                                          ]
                                                                                                        |))))
                                                                                                ]
                                                                                              |) in
                                                                                            M.alloc (|
                                                                                              Value.Tuple
                                                                                                []
                                                                                            |)))
                                                                                        |)))
                                                                                  ]
                                                                                |))))
                                                                        ]
                                                                      |) in
                                                                    M.alloc (| Value.Tuple [] |)))
                                                                |)))
                                                          ]
                                                        |)) in
                                                    let _ :=
                                                      M.use
                                                        (M.match_operator (|
                                                          M.alloc (|
                                                            M.call_closure (|
                                                              M.get_trait_method (|
                                                                "core::iter::traits::collect::IntoIterator",
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "core::ops::range::Range")
                                                                  [ Ty.path "u16" ],
                                                                [],
                                                                "into_iter",
                                                                []
                                                              |),
                                                              [
                                                                Value.StructRecord
                                                                  "core::ops::range::Range"
                                                                  [
                                                                    ("start", Value.Integer 0);
                                                                    ("end_",
                                                                      BinOp.Panic.shl (|
                                                                        Value.Integer 1,
                                                                        Value.Integer 8
                                                                      |))
                                                                  ]
                                                              ]
                                                            |)
                                                          |),
                                                          [
                                                            fun γ =>
                                                              ltac:(M.monadic
                                                                (let iter := M.copy (| γ |) in
                                                                M.loop (|
                                                                  ltac:(M.monadic
                                                                    (let _ :=
                                                                      M.match_operator (|
                                                                        M.alloc (|
                                                                          M.call_closure (|
                                                                            M.get_trait_method (|
                                                                              "core::iter::traits::iterator::Iterator",
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "core::ops::range::Range")
                                                                                [ Ty.path "u16" ],
                                                                              [],
                                                                              "next",
                                                                              []
                                                                            |),
                                                                            [ iter ]
                                                                          |)
                                                                        |),
                                                                        [
                                                                          fun γ =>
                                                                            ltac:(M.monadic
                                                                              (M.alloc (|
                                                                                M.never_to_any (|
                                                                                  M.read (|
                                                                                    M.break (||)
                                                                                  |)
                                                                                |)
                                                                              |)));
                                                                          fun γ =>
                                                                            ltac:(M.monadic
                                                                              (let γ0_0 :=
                                                                                M.SubPointer.get_struct_tuple_field (|
                                                                                  γ,
                                                                                  "core::option::Option::Some",
                                                                                  0
                                                                                |) in
                                                                              let left :=
                                                                                M.copy (| γ0_0 |) in
                                                                              let _ :=
                                                                                M.match_operator (|
                                                                                  M.alloc (|
                                                                                    M.call_closure (|
                                                                                      M.get_trait_method (|
                                                                                        "core::ops::try_trait::Try",
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "core::result::Result")
                                                                                          [
                                                                                            Ty.tuple
                                                                                              [];
                                                                                            Ty.path
                                                                                              "halo2_proofs::plonk::error::Error"
                                                                                          ],
                                                                                        [],
                                                                                        "branch",
                                                                                        []
                                                                                      |),
                                                                                      [
                                                                                        M.call_closure (|
                                                                                          M.get_associated_function (|
                                                                                            Ty.apply
                                                                                              (Ty.path
                                                                                                "halo2_proofs::circuit::Table")
                                                                                              [ F ],
                                                                                            "assign_cell",
                                                                                            [
                                                                                              Ty.function
                                                                                                [
                                                                                                  Ty.tuple
                                                                                                    []
                                                                                                ]
                                                                                                (Ty.apply
                                                                                                  (Ty.path
                                                                                                    "core::result::Result")
                                                                                                  [
                                                                                                    F;
                                                                                                    Ty.path
                                                                                                      "halo2_proofs::plonk::error::Error"
                                                                                                  ]);
                                                                                              F;
                                                                                              Ty.function
                                                                                                [
                                                                                                  Ty.tuple
                                                                                                    []
                                                                                                ]
                                                                                                (Ty.apply
                                                                                                  (Ty.path
                                                                                                    "&")
                                                                                                  [
                                                                                                    Ty.path
                                                                                                      "str"
                                                                                                  ]);
                                                                                              Ty.apply
                                                                                                (Ty.path
                                                                                                  "&")
                                                                                                [
                                                                                                  Ty.path
                                                                                                    "str"
                                                                                                ]
                                                                                            ]
                                                                                          |),
                                                                                          [
                                                                                            table;
                                                                                            M.closure
                                                                                              (fun
                                                                                                  γ =>
                                                                                                ltac:(M.monadic
                                                                                                  match
                                                                                                    γ
                                                                                                  with
                                                                                                  | [
                                                                                                        α0
                                                                                                      ] =>
                                                                                                    M.match_operator (|
                                                                                                      M.alloc (|
                                                                                                        α0
                                                                                                      |),
                                                                                                      [
                                                                                                        fun
                                                                                                            γ =>
                                                                                                          ltac:(M.monadic
                                                                                                            (M.read (|
                                                                                                              Value.String
                                                                                                                "range table"
                                                                                                            |)))
                                                                                                      ]
                                                                                                    |)
                                                                                                  | _ =>
                                                                                                    M.impossible (||)
                                                                                                  end));
                                                                                            M.read (|
                                                                                              M.SubPointer.get_struct_record_field (|
                                                                                                M.SubPointer.get_struct_record_field (|
                                                                                                  M.SubPointer.get_struct_record_field (|
                                                                                                    M.read (|
                                                                                                      self
                                                                                                    |),
                                                                                                    "delphinus_zkwasm::circuits::rtable::RangeTableChip",
                                                                                                    "config"
                                                                                                  |),
                                                                                                  "delphinus_zkwasm::circuits::rtable::RangeTableConfig",
                                                                                                  "op_table"
                                                                                                |),
                                                                                                "delphinus_zkwasm::circuits::rtable::OpTable",
                                                                                                "op"
                                                                                              |)
                                                                                            |);
                                                                                            M.read (|
                                                                                              M.use
                                                                                                offset
                                                                                            |);
                                                                                            M.closure
                                                                                              (fun
                                                                                                  γ =>
                                                                                                ltac:(M.monadic
                                                                                                  match
                                                                                                    γ
                                                                                                  with
                                                                                                  | [
                                                                                                        α0
                                                                                                      ] =>
                                                                                                    M.match_operator (|
                                                                                                      M.alloc (|
                                                                                                        α0
                                                                                                      |),
                                                                                                      [
                                                                                                        fun
                                                                                                            γ =>
                                                                                                          ltac:(M.monadic
                                                                                                            (Value.StructTuple
                                                                                                              "core::result::Result::Ok"
                                                                                                              [
                                                                                                                M.call_closure (|
                                                                                                                  M.get_trait_method (|
                                                                                                                    "core::convert::From",
                                                                                                                    F,
                                                                                                                    [
                                                                                                                      Ty.path
                                                                                                                        "u64"
                                                                                                                    ],
                                                                                                                    "from",
                                                                                                                    []
                                                                                                                  |),
                                                                                                                  [
                                                                                                                    M.rust_cast
                                                                                                                      (M.call_closure (|
                                                                                                                        M.get_associated_function (|
                                                                                                                          Ty.path
                                                                                                                            "delphinus_zkwasm::circuits::bit_table::BitTableOp",
                                                                                                                          "index",
                                                                                                                          []
                                                                                                                        |),
                                                                                                                        [
                                                                                                                          M.alloc (|
                                                                                                                            Value.StructTuple
                                                                                                                              "delphinus_zkwasm::circuits::bit_table::BitTableOp::Popcnt"
                                                                                                                              []
                                                                                                                          |)
                                                                                                                        ]
                                                                                                                      |))
                                                                                                                  ]
                                                                                                                |)
                                                                                                              ]))
                                                                                                      ]
                                                                                                    |)
                                                                                                  | _ =>
                                                                                                    M.impossible (||)
                                                                                                  end))
                                                                                          ]
                                                                                        |)
                                                                                      ]
                                                                                    |)
                                                                                  |),
                                                                                  [
                                                                                    fun γ =>
                                                                                      ltac:(M.monadic
                                                                                        (let γ0_0 :=
                                                                                          M.SubPointer.get_struct_tuple_field (|
                                                                                            γ,
                                                                                            "core::ops::control_flow::ControlFlow::Break",
                                                                                            0
                                                                                          |) in
                                                                                        let
                                                                                              residual :=
                                                                                          M.copy (|
                                                                                            γ0_0
                                                                                          |) in
                                                                                        M.alloc (|
                                                                                          M.never_to_any (|
                                                                                            M.read (|
                                                                                              M.return_ (|
                                                                                                M.call_closure (|
                                                                                                  M.get_trait_method (|
                                                                                                    "core::ops::try_trait::FromResidual",
                                                                                                    Ty.apply
                                                                                                      (Ty.path
                                                                                                        "core::result::Result")
                                                                                                      [
                                                                                                        Ty.tuple
                                                                                                          [];
                                                                                                        Ty.path
                                                                                                          "halo2_proofs::plonk::error::Error"
                                                                                                      ],
                                                                                                    [
                                                                                                      Ty.apply
                                                                                                        (Ty.path
                                                                                                          "core::result::Result")
                                                                                                        [
                                                                                                          Ty.path
                                                                                                            "core::convert::Infallible";
                                                                                                          Ty.path
                                                                                                            "halo2_proofs::plonk::error::Error"
                                                                                                        ]
                                                                                                    ],
                                                                                                    "from_residual",
                                                                                                    []
                                                                                                  |),
                                                                                                  [
                                                                                                    M.read (|
                                                                                                      residual
                                                                                                    |)
                                                                                                  ]
                                                                                                |)
                                                                                              |)
                                                                                            |)
                                                                                          |)
                                                                                        |)));
                                                                                    fun γ =>
                                                                                      ltac:(M.monadic
                                                                                        (let γ0_0 :=
                                                                                          M.SubPointer.get_struct_tuple_field (|
                                                                                            γ,
                                                                                            "core::ops::control_flow::ControlFlow::Continue",
                                                                                            0
                                                                                          |) in
                                                                                        let val :=
                                                                                          M.copy (|
                                                                                            γ0_0
                                                                                          |) in
                                                                                        val))
                                                                                  ]
                                                                                |) in
                                                                              let _ :=
                                                                                M.match_operator (|
                                                                                  M.alloc (|
                                                                                    M.call_closure (|
                                                                                      M.get_trait_method (|
                                                                                        "core::ops::try_trait::Try",
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "core::result::Result")
                                                                                          [
                                                                                            Ty.tuple
                                                                                              [];
                                                                                            Ty.path
                                                                                              "halo2_proofs::plonk::error::Error"
                                                                                          ],
                                                                                        [],
                                                                                        "branch",
                                                                                        []
                                                                                      |),
                                                                                      [
                                                                                        M.call_closure (|
                                                                                          M.get_associated_function (|
                                                                                            Ty.apply
                                                                                              (Ty.path
                                                                                                "halo2_proofs::circuit::Table")
                                                                                              [ F ],
                                                                                            "assign_cell",
                                                                                            [
                                                                                              Ty.function
                                                                                                [
                                                                                                  Ty.tuple
                                                                                                    []
                                                                                                ]
                                                                                                (Ty.apply
                                                                                                  (Ty.path
                                                                                                    "core::result::Result")
                                                                                                  [
                                                                                                    F;
                                                                                                    Ty.path
                                                                                                      "halo2_proofs::plonk::error::Error"
                                                                                                  ]);
                                                                                              F;
                                                                                              Ty.function
                                                                                                [
                                                                                                  Ty.tuple
                                                                                                    []
                                                                                                ]
                                                                                                (Ty.apply
                                                                                                  (Ty.path
                                                                                                    "&")
                                                                                                  [
                                                                                                    Ty.path
                                                                                                      "str"
                                                                                                  ]);
                                                                                              Ty.apply
                                                                                                (Ty.path
                                                                                                  "&")
                                                                                                [
                                                                                                  Ty.path
                                                                                                    "str"
                                                                                                ]
                                                                                            ]
                                                                                          |),
                                                                                          [
                                                                                            table;
                                                                                            M.closure
                                                                                              (fun
                                                                                                  γ =>
                                                                                                ltac:(M.monadic
                                                                                                  match
                                                                                                    γ
                                                                                                  with
                                                                                                  | [
                                                                                                        α0
                                                                                                      ] =>
                                                                                                    M.match_operator (|
                                                                                                      M.alloc (|
                                                                                                        α0
                                                                                                      |),
                                                                                                      [
                                                                                                        fun
                                                                                                            γ =>
                                                                                                          ltac:(M.monadic
                                                                                                            (M.read (|
                                                                                                              Value.String
                                                                                                                "range table"
                                                                                                            |)))
                                                                                                      ]
                                                                                                    |)
                                                                                                  | _ =>
                                                                                                    M.impossible (||)
                                                                                                  end));
                                                                                            M.read (|
                                                                                              M.SubPointer.get_struct_record_field (|
                                                                                                M.SubPointer.get_struct_record_field (|
                                                                                                  M.SubPointer.get_struct_record_field (|
                                                                                                    M.read (|
                                                                                                      self
                                                                                                    |),
                                                                                                    "delphinus_zkwasm::circuits::rtable::RangeTableChip",
                                                                                                    "config"
                                                                                                  |),
                                                                                                  "delphinus_zkwasm::circuits::rtable::RangeTableConfig",
                                                                                                  "op_table"
                                                                                                |),
                                                                                                "delphinus_zkwasm::circuits::rtable::OpTable",
                                                                                                "left"
                                                                                              |)
                                                                                            |);
                                                                                            M.read (|
                                                                                              M.use
                                                                                                offset
                                                                                            |);
                                                                                            M.closure
                                                                                              (fun
                                                                                                  γ =>
                                                                                                ltac:(M.monadic
                                                                                                  match
                                                                                                    γ
                                                                                                  with
                                                                                                  | [
                                                                                                        α0
                                                                                                      ] =>
                                                                                                    M.match_operator (|
                                                                                                      M.alloc (|
                                                                                                        α0
                                                                                                      |),
                                                                                                      [
                                                                                                        fun
                                                                                                            γ =>
                                                                                                          ltac:(M.monadic
                                                                                                            (Value.StructTuple
                                                                                                              "core::result::Result::Ok"
                                                                                                              [
                                                                                                                M.call_closure (|
                                                                                                                  M.get_trait_method (|
                                                                                                                    "core::convert::From",
                                                                                                                    F,
                                                                                                                    [
                                                                                                                      Ty.path
                                                                                                                        "u64"
                                                                                                                    ],
                                                                                                                    "from",
                                                                                                                    []
                                                                                                                  |),
                                                                                                                  [
                                                                                                                    M.rust_cast
                                                                                                                      (M.read (|
                                                                                                                        left
                                                                                                                      |))
                                                                                                                  ]
                                                                                                                |)
                                                                                                              ]))
                                                                                                      ]
                                                                                                    |)
                                                                                                  | _ =>
                                                                                                    M.impossible (||)
                                                                                                  end))
                                                                                          ]
                                                                                        |)
                                                                                      ]
                                                                                    |)
                                                                                  |),
                                                                                  [
                                                                                    fun γ =>
                                                                                      ltac:(M.monadic
                                                                                        (let γ0_0 :=
                                                                                          M.SubPointer.get_struct_tuple_field (|
                                                                                            γ,
                                                                                            "core::ops::control_flow::ControlFlow::Break",
                                                                                            0
                                                                                          |) in
                                                                                        let
                                                                                              residual :=
                                                                                          M.copy (|
                                                                                            γ0_0
                                                                                          |) in
                                                                                        M.alloc (|
                                                                                          M.never_to_any (|
                                                                                            M.read (|
                                                                                              M.return_ (|
                                                                                                M.call_closure (|
                                                                                                  M.get_trait_method (|
                                                                                                    "core::ops::try_trait::FromResidual",
                                                                                                    Ty.apply
                                                                                                      (Ty.path
                                                                                                        "core::result::Result")
                                                                                                      [
                                                                                                        Ty.tuple
                                                                                                          [];
                                                                                                        Ty.path
                                                                                                          "halo2_proofs::plonk::error::Error"
                                                                                                      ],
                                                                                                    [
                                                                                                      Ty.apply
                                                                                                        (Ty.path
                                                                                                          "core::result::Result")
                                                                                                        [
                                                                                                          Ty.path
                                                                                                            "core::convert::Infallible";
                                                                                                          Ty.path
                                                                                                            "halo2_proofs::plonk::error::Error"
                                                                                                        ]
                                                                                                    ],
                                                                                                    "from_residual",
                                                                                                    []
                                                                                                  |),
                                                                                                  [
                                                                                                    M.read (|
                                                                                                      residual
                                                                                                    |)
                                                                                                  ]
                                                                                                |)
                                                                                              |)
                                                                                            |)
                                                                                          |)
                                                                                        |)));
                                                                                    fun γ =>
                                                                                      ltac:(M.monadic
                                                                                        (let γ0_0 :=
                                                                                          M.SubPointer.get_struct_tuple_field (|
                                                                                            γ,
                                                                                            "core::ops::control_flow::ControlFlow::Continue",
                                                                                            0
                                                                                          |) in
                                                                                        let val :=
                                                                                          M.copy (|
                                                                                            γ0_0
                                                                                          |) in
                                                                                        val))
                                                                                  ]
                                                                                |) in
                                                                              let _ :=
                                                                                M.match_operator (|
                                                                                  M.alloc (|
                                                                                    M.call_closure (|
                                                                                      M.get_trait_method (|
                                                                                        "core::ops::try_trait::Try",
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "core::result::Result")
                                                                                          [
                                                                                            Ty.tuple
                                                                                              [];
                                                                                            Ty.path
                                                                                              "halo2_proofs::plonk::error::Error"
                                                                                          ],
                                                                                        [],
                                                                                        "branch",
                                                                                        []
                                                                                      |),
                                                                                      [
                                                                                        M.call_closure (|
                                                                                          M.get_associated_function (|
                                                                                            Ty.apply
                                                                                              (Ty.path
                                                                                                "halo2_proofs::circuit::Table")
                                                                                              [ F ],
                                                                                            "assign_cell",
                                                                                            [
                                                                                              Ty.function
                                                                                                [
                                                                                                  Ty.tuple
                                                                                                    []
                                                                                                ]
                                                                                                (Ty.apply
                                                                                                  (Ty.path
                                                                                                    "core::result::Result")
                                                                                                  [
                                                                                                    F;
                                                                                                    Ty.path
                                                                                                      "halo2_proofs::plonk::error::Error"
                                                                                                  ]);
                                                                                              F;
                                                                                              Ty.function
                                                                                                [
                                                                                                  Ty.tuple
                                                                                                    []
                                                                                                ]
                                                                                                (Ty.apply
                                                                                                  (Ty.path
                                                                                                    "&")
                                                                                                  [
                                                                                                    Ty.path
                                                                                                      "str"
                                                                                                  ]);
                                                                                              Ty.apply
                                                                                                (Ty.path
                                                                                                  "&")
                                                                                                [
                                                                                                  Ty.path
                                                                                                    "str"
                                                                                                ]
                                                                                            ]
                                                                                          |),
                                                                                          [
                                                                                            table;
                                                                                            M.closure
                                                                                              (fun
                                                                                                  γ =>
                                                                                                ltac:(M.monadic
                                                                                                  match
                                                                                                    γ
                                                                                                  with
                                                                                                  | [
                                                                                                        α0
                                                                                                      ] =>
                                                                                                    M.match_operator (|
                                                                                                      M.alloc (|
                                                                                                        α0
                                                                                                      |),
                                                                                                      [
                                                                                                        fun
                                                                                                            γ =>
                                                                                                          ltac:(M.monadic
                                                                                                            (M.read (|
                                                                                                              Value.String
                                                                                                                "range table"
                                                                                                            |)))
                                                                                                      ]
                                                                                                    |)
                                                                                                  | _ =>
                                                                                                    M.impossible (||)
                                                                                                  end));
                                                                                            M.read (|
                                                                                              M.SubPointer.get_struct_record_field (|
                                                                                                M.SubPointer.get_struct_record_field (|
                                                                                                  M.SubPointer.get_struct_record_field (|
                                                                                                    M.read (|
                                                                                                      self
                                                                                                    |),
                                                                                                    "delphinus_zkwasm::circuits::rtable::RangeTableChip",
                                                                                                    "config"
                                                                                                  |),
                                                                                                  "delphinus_zkwasm::circuits::rtable::RangeTableConfig",
                                                                                                  "op_table"
                                                                                                |),
                                                                                                "delphinus_zkwasm::circuits::rtable::OpTable",
                                                                                                "right"
                                                                                              |)
                                                                                            |);
                                                                                            M.read (|
                                                                                              M.use
                                                                                                offset
                                                                                            |);
                                                                                            M.closure
                                                                                              (fun
                                                                                                  γ =>
                                                                                                ltac:(M.monadic
                                                                                                  match
                                                                                                    γ
                                                                                                  with
                                                                                                  | [
                                                                                                        α0
                                                                                                      ] =>
                                                                                                    M.match_operator (|
                                                                                                      M.alloc (|
                                                                                                        α0
                                                                                                      |),
                                                                                                      [
                                                                                                        fun
                                                                                                            γ =>
                                                                                                          ltac:(M.monadic
                                                                                                            (Value.StructTuple
                                                                                                              "core::result::Result::Ok"
                                                                                                              [
                                                                                                                M.call_closure (|
                                                                                                                  M.get_trait_method (|
                                                                                                                    "core::convert::From",
                                                                                                                    F,
                                                                                                                    [
                                                                                                                      Ty.path
                                                                                                                        "u64"
                                                                                                                    ],
                                                                                                                    "from",
                                                                                                                    []
                                                                                                                  |),
                                                                                                                  [
                                                                                                                    Value.Integer
                                                                                                                      0
                                                                                                                  ]
                                                                                                                |)
                                                                                                              ]))
                                                                                                      ]
                                                                                                    |)
                                                                                                  | _ =>
                                                                                                    M.impossible (||)
                                                                                                  end))
                                                                                          ]
                                                                                        |)
                                                                                      ]
                                                                                    |)
                                                                                  |),
                                                                                  [
                                                                                    fun γ =>
                                                                                      ltac:(M.monadic
                                                                                        (let γ0_0 :=
                                                                                          M.SubPointer.get_struct_tuple_field (|
                                                                                            γ,
                                                                                            "core::ops::control_flow::ControlFlow::Break",
                                                                                            0
                                                                                          |) in
                                                                                        let
                                                                                              residual :=
                                                                                          M.copy (|
                                                                                            γ0_0
                                                                                          |) in
                                                                                        M.alloc (|
                                                                                          M.never_to_any (|
                                                                                            M.read (|
                                                                                              M.return_ (|
                                                                                                M.call_closure (|
                                                                                                  M.get_trait_method (|
                                                                                                    "core::ops::try_trait::FromResidual",
                                                                                                    Ty.apply
                                                                                                      (Ty.path
                                                                                                        "core::result::Result")
                                                                                                      [
                                                                                                        Ty.tuple
                                                                                                          [];
                                                                                                        Ty.path
                                                                                                          "halo2_proofs::plonk::error::Error"
                                                                                                      ],
                                                                                                    [
                                                                                                      Ty.apply
                                                                                                        (Ty.path
                                                                                                          "core::result::Result")
                                                                                                        [
                                                                                                          Ty.path
                                                                                                            "core::convert::Infallible";
                                                                                                          Ty.path
                                                                                                            "halo2_proofs::plonk::error::Error"
                                                                                                        ]
                                                                                                    ],
                                                                                                    "from_residual",
                                                                                                    []
                                                                                                  |),
                                                                                                  [
                                                                                                    M.read (|
                                                                                                      residual
                                                                                                    |)
                                                                                                  ]
                                                                                                |)
                                                                                              |)
                                                                                            |)
                                                                                          |)
                                                                                        |)));
                                                                                    fun γ =>
                                                                                      ltac:(M.monadic
                                                                                        (let γ0_0 :=
                                                                                          M.SubPointer.get_struct_tuple_field (|
                                                                                            γ,
                                                                                            "core::ops::control_flow::ControlFlow::Continue",
                                                                                            0
                                                                                          |) in
                                                                                        let val :=
                                                                                          M.copy (|
                                                                                            γ0_0
                                                                                          |) in
                                                                                        val))
                                                                                  ]
                                                                                |) in
                                                                              let _ :=
                                                                                M.match_operator (|
                                                                                  M.alloc (|
                                                                                    M.call_closure (|
                                                                                      M.get_trait_method (|
                                                                                        "core::ops::try_trait::Try",
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "core::result::Result")
                                                                                          [
                                                                                            Ty.tuple
                                                                                              [];
                                                                                            Ty.path
                                                                                              "halo2_proofs::plonk::error::Error"
                                                                                          ],
                                                                                        [],
                                                                                        "branch",
                                                                                        []
                                                                                      |),
                                                                                      [
                                                                                        M.call_closure (|
                                                                                          M.get_associated_function (|
                                                                                            Ty.apply
                                                                                              (Ty.path
                                                                                                "halo2_proofs::circuit::Table")
                                                                                              [ F ],
                                                                                            "assign_cell",
                                                                                            [
                                                                                              Ty.function
                                                                                                [
                                                                                                  Ty.tuple
                                                                                                    []
                                                                                                ]
                                                                                                (Ty.apply
                                                                                                  (Ty.path
                                                                                                    "core::result::Result")
                                                                                                  [
                                                                                                    F;
                                                                                                    Ty.path
                                                                                                      "halo2_proofs::plonk::error::Error"
                                                                                                  ]);
                                                                                              F;
                                                                                              Ty.function
                                                                                                [
                                                                                                  Ty.tuple
                                                                                                    []
                                                                                                ]
                                                                                                (Ty.apply
                                                                                                  (Ty.path
                                                                                                    "&")
                                                                                                  [
                                                                                                    Ty.path
                                                                                                      "str"
                                                                                                  ]);
                                                                                              Ty.apply
                                                                                                (Ty.path
                                                                                                  "&")
                                                                                                [
                                                                                                  Ty.path
                                                                                                    "str"
                                                                                                ]
                                                                                            ]
                                                                                          |),
                                                                                          [
                                                                                            table;
                                                                                            M.closure
                                                                                              (fun
                                                                                                  γ =>
                                                                                                ltac:(M.monadic
                                                                                                  match
                                                                                                    γ
                                                                                                  with
                                                                                                  | [
                                                                                                        α0
                                                                                                      ] =>
                                                                                                    M.match_operator (|
                                                                                                      M.alloc (|
                                                                                                        α0
                                                                                                      |),
                                                                                                      [
                                                                                                        fun
                                                                                                            γ =>
                                                                                                          ltac:(M.monadic
                                                                                                            (M.read (|
                                                                                                              Value.String
                                                                                                                "range table"
                                                                                                            |)))
                                                                                                      ]
                                                                                                    |)
                                                                                                  | _ =>
                                                                                                    M.impossible (||)
                                                                                                  end));
                                                                                            M.read (|
                                                                                              M.SubPointer.get_struct_record_field (|
                                                                                                M.SubPointer.get_struct_record_field (|
                                                                                                  M.SubPointer.get_struct_record_field (|
                                                                                                    M.read (|
                                                                                                      self
                                                                                                    |),
                                                                                                    "delphinus_zkwasm::circuits::rtable::RangeTableChip",
                                                                                                    "config"
                                                                                                  |),
                                                                                                  "delphinus_zkwasm::circuits::rtable::RangeTableConfig",
                                                                                                  "op_table"
                                                                                                |),
                                                                                                "delphinus_zkwasm::circuits::rtable::OpTable",
                                                                                                "result"
                                                                                              |)
                                                                                            |);
                                                                                            M.read (|
                                                                                              M.use
                                                                                                offset
                                                                                            |);
                                                                                            M.closure
                                                                                              (fun
                                                                                                  γ =>
                                                                                                ltac:(M.monadic
                                                                                                  match
                                                                                                    γ
                                                                                                  with
                                                                                                  | [
                                                                                                        α0
                                                                                                      ] =>
                                                                                                    M.match_operator (|
                                                                                                      M.alloc (|
                                                                                                        α0
                                                                                                      |),
                                                                                                      [
                                                                                                        fun
                                                                                                            γ =>
                                                                                                          ltac:(M.monadic
                                                                                                            (Value.StructTuple
                                                                                                              "core::result::Result::Ok"
                                                                                                              [
                                                                                                                M.call_closure (|
                                                                                                                  M.get_trait_method (|
                                                                                                                    "core::convert::From",
                                                                                                                    F,
                                                                                                                    [
                                                                                                                      Ty.path
                                                                                                                        "u64"
                                                                                                                    ],
                                                                                                                    "from",
                                                                                                                    []
                                                                                                                  |),
                                                                                                                  [
                                                                                                                    M.rust_cast
                                                                                                                      (M.call_closure (|
                                                                                                                        M.get_associated_function (|
                                                                                                                          Ty.path
                                                                                                                            "u16",
                                                                                                                          "count_ones",
                                                                                                                          []
                                                                                                                        |),
                                                                                                                        [
                                                                                                                          M.read (|
                                                                                                                            left
                                                                                                                          |)
                                                                                                                        ]
                                                                                                                      |))
                                                                                                                  ]
                                                                                                                |)
                                                                                                              ]))
                                                                                                      ]
                                                                                                    |)
                                                                                                  | _ =>
                                                                                                    M.impossible (||)
                                                                                                  end))
                                                                                          ]
                                                                                        |)
                                                                                      ]
                                                                                    |)
                                                                                  |),
                                                                                  [
                                                                                    fun γ =>
                                                                                      ltac:(M.monadic
                                                                                        (let γ0_0 :=
                                                                                          M.SubPointer.get_struct_tuple_field (|
                                                                                            γ,
                                                                                            "core::ops::control_flow::ControlFlow::Break",
                                                                                            0
                                                                                          |) in
                                                                                        let
                                                                                              residual :=
                                                                                          M.copy (|
                                                                                            γ0_0
                                                                                          |) in
                                                                                        M.alloc (|
                                                                                          M.never_to_any (|
                                                                                            M.read (|
                                                                                              M.return_ (|
                                                                                                M.call_closure (|
                                                                                                  M.get_trait_method (|
                                                                                                    "core::ops::try_trait::FromResidual",
                                                                                                    Ty.apply
                                                                                                      (Ty.path
                                                                                                        "core::result::Result")
                                                                                                      [
                                                                                                        Ty.tuple
                                                                                                          [];
                                                                                                        Ty.path
                                                                                                          "halo2_proofs::plonk::error::Error"
                                                                                                      ],
                                                                                                    [
                                                                                                      Ty.apply
                                                                                                        (Ty.path
                                                                                                          "core::result::Result")
                                                                                                        [
                                                                                                          Ty.path
                                                                                                            "core::convert::Infallible";
                                                                                                          Ty.path
                                                                                                            "halo2_proofs::plonk::error::Error"
                                                                                                        ]
                                                                                                    ],
                                                                                                    "from_residual",
                                                                                                    []
                                                                                                  |),
                                                                                                  [
                                                                                                    M.read (|
                                                                                                      residual
                                                                                                    |)
                                                                                                  ]
                                                                                                |)
                                                                                              |)
                                                                                            |)
                                                                                          |)
                                                                                        |)));
                                                                                    fun γ =>
                                                                                      ltac:(M.monadic
                                                                                        (let γ0_0 :=
                                                                                          M.SubPointer.get_struct_tuple_field (|
                                                                                            γ,
                                                                                            "core::ops::control_flow::ControlFlow::Continue",
                                                                                            0
                                                                                          |) in
                                                                                        let val :=
                                                                                          M.copy (|
                                                                                            γ0_0
                                                                                          |) in
                                                                                        val))
                                                                                  ]
                                                                                |) in
                                                                              let _ :=
                                                                                let β := offset in
                                                                                M.write (|
                                                                                  β,
                                                                                  BinOp.Panic.add (|
                                                                                    Integer.Usize,
                                                                                    M.read (| β |),
                                                                                    Value.Integer 1
                                                                                  |)
                                                                                |) in
                                                                              M.alloc (|
                                                                                Value.Tuple []
                                                                              |)))
                                                                        ]
                                                                      |) in
                                                                    M.alloc (| Value.Tuple [] |)))
                                                                |)))
                                                          ]
                                                        |)) in
                                                    let _ :=
                                                      M.match_operator (|
                                                        M.alloc (|
                                                          Value.Tuple
                                                            [
                                                              M.alloc (|
                                                                BinOp.Panic.add (|
                                                                  Integer.Usize,
                                                                  M.call_closure (|
                                                                    M.get_associated_function (|
                                                                      Ty.path
                                                                        "delphinus_zkwasm::circuits::bit_table::BitTableOp",
                                                                      "index",
                                                                      []
                                                                    |),
                                                                    [
                                                                      M.alloc (|
                                                                        Value.StructTuple
                                                                          "delphinus_zkwasm::circuits::bit_table::BitTableOp::Popcnt"
                                                                          []
                                                                      |)
                                                                    ]
                                                                  |),
                                                                  Value.Integer 1
                                                                |)
                                                              |);
                                                              M.alloc (|
                                                                M.rust_cast
                                                                  (M.read (|
                                                                    M.get_constant (|
                                                                      "delphinus_zkwasm::circuits::rtable::POW_OP"
                                                                    |)
                                                                  |))
                                                              |)
                                                            ]
                                                        |),
                                                        [
                                                          fun γ =>
                                                            ltac:(M.monadic
                                                              (let γ0_0 :=
                                                                M.SubPointer.get_tuple_field (|
                                                                  γ,
                                                                  0
                                                                |) in
                                                              let γ0_1 :=
                                                                M.SubPointer.get_tuple_field (|
                                                                  γ,
                                                                  1
                                                                |) in
                                                              let left_val := M.copy (| γ0_0 |) in
                                                              let right_val := M.copy (| γ0_1 |) in
                                                              M.match_operator (|
                                                                M.alloc (| Value.Tuple [] |),
                                                                [
                                                                  fun γ =>
                                                                    ltac:(M.monadic
                                                                      (let γ :=
                                                                        M.use
                                                                          (M.alloc (|
                                                                            UnOp.Pure.not
                                                                              (BinOp.Pure.eq
                                                                                (M.read (|
                                                                                  M.read (|
                                                                                    left_val
                                                                                  |)
                                                                                |))
                                                                                (M.read (|
                                                                                  M.read (|
                                                                                    right_val
                                                                                  |)
                                                                                |)))
                                                                          |)) in
                                                                      let _ :=
                                                                        M.is_constant_or_break_match (|
                                                                          M.read (| γ |),
                                                                          Value.Bool true
                                                                        |) in
                                                                      M.alloc (|
                                                                        M.never_to_any (|
                                                                          M.read (|
                                                                            let kind :=
                                                                              M.alloc (|
                                                                                Value.StructTuple
                                                                                  "core::panicking::AssertKind::Eq"
                                                                                  []
                                                                              |) in
                                                                            M.alloc (|
                                                                              M.call_closure (|
                                                                                M.get_function (|
                                                                                  "core::panicking::assert_failed",
                                                                                  [
                                                                                    Ty.path "usize";
                                                                                    Ty.path "usize"
                                                                                  ]
                                                                                |),
                                                                                [
                                                                                  M.read (| kind |);
                                                                                  M.read (|
                                                                                    left_val
                                                                                  |);
                                                                                  M.read (|
                                                                                    right_val
                                                                                  |);
                                                                                  Value.StructTuple
                                                                                    "core::option::Option::None"
                                                                                    []
                                                                                ]
                                                                              |)
                                                                            |)
                                                                          |)
                                                                        |)
                                                                      |)));
                                                                  fun γ =>
                                                                    ltac:(M.monadic
                                                                      (M.alloc (|
                                                                        Value.Tuple []
                                                                      |)))
                                                                ]
                                                              |)))
                                                        ]
                                                      |) in
                                                    let _ :=
                                                      let _ :=
                                                        M.match_operator (|
                                                          M.alloc (|
                                                            M.call_closure (|
                                                              M.get_trait_method (|
                                                                "core::ops::try_trait::Try",
                                                                Ty.apply
                                                                  (Ty.path "core::result::Result")
                                                                  [
                                                                    Ty.tuple [];
                                                                    Ty.path
                                                                      "halo2_proofs::plonk::error::Error"
                                                                  ],
                                                                [],
                                                                "branch",
                                                                []
                                                              |),
                                                              [
                                                                M.call_closure (|
                                                                  M.get_associated_function (|
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "halo2_proofs::circuit::Table")
                                                                      [ F ],
                                                                    "assign_cell",
                                                                    [
                                                                      Ty.function
                                                                        [ Ty.tuple [] ]
                                                                        (Ty.apply
                                                                          (Ty.path
                                                                            "core::result::Result")
                                                                          [
                                                                            F;
                                                                            Ty.path
                                                                              "halo2_proofs::plonk::error::Error"
                                                                          ]);
                                                                      F;
                                                                      Ty.function
                                                                        [ Ty.tuple [] ]
                                                                        (Ty.apply
                                                                          (Ty.path "&")
                                                                          [ Ty.path "str" ]);
                                                                      Ty.apply
                                                                        (Ty.path "&")
                                                                        [ Ty.path "str" ]
                                                                    ]
                                                                  |),
                                                                  [
                                                                    table;
                                                                    M.closure
                                                                      (fun γ =>
                                                                        ltac:(M.monadic
                                                                          match γ with
                                                                          | [ α0 ] =>
                                                                            M.match_operator (|
                                                                              M.alloc (| α0 |),
                                                                              [
                                                                                fun γ =>
                                                                                  ltac:(M.monadic
                                                                                    (M.read (|
                                                                                      Value.String
                                                                                        "range table"
                                                                                    |)))
                                                                              ]
                                                                            |)
                                                                          | _ => M.impossible (||)
                                                                          end));
                                                                    M.read (|
                                                                      M.SubPointer.get_struct_record_field (|
                                                                        M.SubPointer.get_struct_record_field (|
                                                                          M.SubPointer.get_struct_record_field (|
                                                                            M.read (| self |),
                                                                            "delphinus_zkwasm::circuits::rtable::RangeTableChip",
                                                                            "config"
                                                                          |),
                                                                          "delphinus_zkwasm::circuits::rtable::RangeTableConfig",
                                                                          "op_table"
                                                                        |),
                                                                        "delphinus_zkwasm::circuits::rtable::OpTable",
                                                                        "op"
                                                                      |)
                                                                    |);
                                                                    M.read (| offset |);
                                                                    M.closure
                                                                      (fun γ =>
                                                                        ltac:(M.monadic
                                                                          match γ with
                                                                          | [ α0 ] =>
                                                                            M.match_operator (|
                                                                              M.alloc (| α0 |),
                                                                              [
                                                                                fun γ =>
                                                                                  ltac:(M.monadic
                                                                                    (Value.StructTuple
                                                                                      "core::result::Result::Ok"
                                                                                      [
                                                                                        M.call_closure (|
                                                                                          M.get_trait_method (|
                                                                                            "core::convert::From",
                                                                                            F,
                                                                                            [
                                                                                              Ty.path
                                                                                                "u64"
                                                                                            ],
                                                                                            "from",
                                                                                            []
                                                                                          |),
                                                                                          [
                                                                                            M.read (|
                                                                                              M.get_constant (|
                                                                                                "delphinus_zkwasm::circuits::rtable::POW_OP"
                                                                                              |)
                                                                                            |)
                                                                                          ]
                                                                                        |)
                                                                                      ]))
                                                                              ]
                                                                            |)
                                                                          | _ => M.impossible (||)
                                                                          end))
                                                                  ]
                                                                |)
                                                              ]
                                                            |)
                                                          |),
                                                          [
                                                            fun γ =>
                                                              ltac:(M.monadic
                                                                (let γ0_0 :=
                                                                  M.SubPointer.get_struct_tuple_field (|
                                                                    γ,
                                                                    "core::ops::control_flow::ControlFlow::Break",
                                                                    0
                                                                  |) in
                                                                let residual := M.copy (| γ0_0 |) in
                                                                M.alloc (|
                                                                  M.never_to_any (|
                                                                    M.read (|
                                                                      M.return_ (|
                                                                        M.call_closure (|
                                                                          M.get_trait_method (|
                                                                            "core::ops::try_trait::FromResidual",
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "core::result::Result")
                                                                              [
                                                                                Ty.tuple [];
                                                                                Ty.path
                                                                                  "halo2_proofs::plonk::error::Error"
                                                                              ],
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "core::result::Result")
                                                                                [
                                                                                  Ty.path
                                                                                    "core::convert::Infallible";
                                                                                  Ty.path
                                                                                    "halo2_proofs::plonk::error::Error"
                                                                                ]
                                                                            ],
                                                                            "from_residual",
                                                                            []
                                                                          |),
                                                                          [ M.read (| residual |) ]
                                                                        |)
                                                                      |)
                                                                    |)
                                                                  |)
                                                                |)));
                                                            fun γ =>
                                                              ltac:(M.monadic
                                                                (let γ0_0 :=
                                                                  M.SubPointer.get_struct_tuple_field (|
                                                                    γ,
                                                                    "core::ops::control_flow::ControlFlow::Continue",
                                                                    0
                                                                  |) in
                                                                let val := M.copy (| γ0_0 |) in
                                                                val))
                                                          ]
                                                        |) in
                                                      let _ :=
                                                        M.match_operator (|
                                                          M.alloc (|
                                                            M.call_closure (|
                                                              M.get_trait_method (|
                                                                "core::ops::try_trait::Try",
                                                                Ty.apply
                                                                  (Ty.path "core::result::Result")
                                                                  [
                                                                    Ty.tuple [];
                                                                    Ty.path
                                                                      "halo2_proofs::plonk::error::Error"
                                                                  ],
                                                                [],
                                                                "branch",
                                                                []
                                                              |),
                                                              [
                                                                M.call_closure (|
                                                                  M.get_associated_function (|
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "halo2_proofs::circuit::Table")
                                                                      [ F ],
                                                                    "assign_cell",
                                                                    [
                                                                      Ty.function
                                                                        [ Ty.tuple [] ]
                                                                        (Ty.apply
                                                                          (Ty.path
                                                                            "core::result::Result")
                                                                          [
                                                                            F;
                                                                            Ty.path
                                                                              "halo2_proofs::plonk::error::Error"
                                                                          ]);
                                                                      F;
                                                                      Ty.function
                                                                        [ Ty.tuple [] ]
                                                                        (Ty.apply
                                                                          (Ty.path "&")
                                                                          [ Ty.path "str" ]);
                                                                      Ty.apply
                                                                        (Ty.path "&")
                                                                        [ Ty.path "str" ]
                                                                    ]
                                                                  |),
                                                                  [
                                                                    table;
                                                                    M.closure
                                                                      (fun γ =>
                                                                        ltac:(M.monadic
                                                                          match γ with
                                                                          | [ α0 ] =>
                                                                            M.match_operator (|
                                                                              M.alloc (| α0 |),
                                                                              [
                                                                                fun γ =>
                                                                                  ltac:(M.monadic
                                                                                    (M.read (|
                                                                                      Value.String
                                                                                        "range table"
                                                                                    |)))
                                                                              ]
                                                                            |)
                                                                          | _ => M.impossible (||)
                                                                          end));
                                                                    M.read (|
                                                                      M.SubPointer.get_struct_record_field (|
                                                                        M.SubPointer.get_struct_record_field (|
                                                                          M.SubPointer.get_struct_record_field (|
                                                                            M.read (| self |),
                                                                            "delphinus_zkwasm::circuits::rtable::RangeTableChip",
                                                                            "config"
                                                                          |),
                                                                          "delphinus_zkwasm::circuits::rtable::RangeTableConfig",
                                                                          "op_table"
                                                                        |),
                                                                        "delphinus_zkwasm::circuits::rtable::OpTable",
                                                                        "left"
                                                                      |)
                                                                    |);
                                                                    M.read (| offset |);
                                                                    M.closure
                                                                      (fun γ =>
                                                                        ltac:(M.monadic
                                                                          match γ with
                                                                          | [ α0 ] =>
                                                                            M.match_operator (|
                                                                              M.alloc (| α0 |),
                                                                              [
                                                                                fun γ =>
                                                                                  ltac:(M.monadic
                                                                                    (Value.StructTuple
                                                                                      "core::result::Result::Ok"
                                                                                      [
                                                                                        M.call_closure (|
                                                                                          M.get_trait_method (|
                                                                                            "ff::Field",
                                                                                            F,
                                                                                            [],
                                                                                            "zero",
                                                                                            []
                                                                                          |),
                                                                                          []
                                                                                        |)
                                                                                      ]))
                                                                              ]
                                                                            |)
                                                                          | _ => M.impossible (||)
                                                                          end))
                                                                  ]
                                                                |)
                                                              ]
                                                            |)
                                                          |),
                                                          [
                                                            fun γ =>
                                                              ltac:(M.monadic
                                                                (let γ0_0 :=
                                                                  M.SubPointer.get_struct_tuple_field (|
                                                                    γ,
                                                                    "core::ops::control_flow::ControlFlow::Break",
                                                                    0
                                                                  |) in
                                                                let residual := M.copy (| γ0_0 |) in
                                                                M.alloc (|
                                                                  M.never_to_any (|
                                                                    M.read (|
                                                                      M.return_ (|
                                                                        M.call_closure (|
                                                                          M.get_trait_method (|
                                                                            "core::ops::try_trait::FromResidual",
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "core::result::Result")
                                                                              [
                                                                                Ty.tuple [];
                                                                                Ty.path
                                                                                  "halo2_proofs::plonk::error::Error"
                                                                              ],
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "core::result::Result")
                                                                                [
                                                                                  Ty.path
                                                                                    "core::convert::Infallible";
                                                                                  Ty.path
                                                                                    "halo2_proofs::plonk::error::Error"
                                                                                ]
                                                                            ],
                                                                            "from_residual",
                                                                            []
                                                                          |),
                                                                          [ M.read (| residual |) ]
                                                                        |)
                                                                      |)
                                                                    |)
                                                                  |)
                                                                |)));
                                                            fun γ =>
                                                              ltac:(M.monadic
                                                                (let γ0_0 :=
                                                                  M.SubPointer.get_struct_tuple_field (|
                                                                    γ,
                                                                    "core::ops::control_flow::ControlFlow::Continue",
                                                                    0
                                                                  |) in
                                                                let val := M.copy (| γ0_0 |) in
                                                                val))
                                                          ]
                                                        |) in
                                                      let _ :=
                                                        M.match_operator (|
                                                          M.alloc (|
                                                            M.call_closure (|
                                                              M.get_trait_method (|
                                                                "core::ops::try_trait::Try",
                                                                Ty.apply
                                                                  (Ty.path "core::result::Result")
                                                                  [
                                                                    Ty.tuple [];
                                                                    Ty.path
                                                                      "halo2_proofs::plonk::error::Error"
                                                                  ],
                                                                [],
                                                                "branch",
                                                                []
                                                              |),
                                                              [
                                                                M.call_closure (|
                                                                  M.get_associated_function (|
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "halo2_proofs::circuit::Table")
                                                                      [ F ],
                                                                    "assign_cell",
                                                                    [
                                                                      Ty.function
                                                                        [ Ty.tuple [] ]
                                                                        (Ty.apply
                                                                          (Ty.path
                                                                            "core::result::Result")
                                                                          [
                                                                            F;
                                                                            Ty.path
                                                                              "halo2_proofs::plonk::error::Error"
                                                                          ]);
                                                                      F;
                                                                      Ty.function
                                                                        [ Ty.tuple [] ]
                                                                        (Ty.apply
                                                                          (Ty.path "&")
                                                                          [ Ty.path "str" ]);
                                                                      Ty.apply
                                                                        (Ty.path "&")
                                                                        [ Ty.path "str" ]
                                                                    ]
                                                                  |),
                                                                  [
                                                                    table;
                                                                    M.closure
                                                                      (fun γ =>
                                                                        ltac:(M.monadic
                                                                          match γ with
                                                                          | [ α0 ] =>
                                                                            M.match_operator (|
                                                                              M.alloc (| α0 |),
                                                                              [
                                                                                fun γ =>
                                                                                  ltac:(M.monadic
                                                                                    (M.read (|
                                                                                      Value.String
                                                                                        "range table"
                                                                                    |)))
                                                                              ]
                                                                            |)
                                                                          | _ => M.impossible (||)
                                                                          end));
                                                                    M.read (|
                                                                      M.SubPointer.get_struct_record_field (|
                                                                        M.SubPointer.get_struct_record_field (|
                                                                          M.SubPointer.get_struct_record_field (|
                                                                            M.read (| self |),
                                                                            "delphinus_zkwasm::circuits::rtable::RangeTableChip",
                                                                            "config"
                                                                          |),
                                                                          "delphinus_zkwasm::circuits::rtable::RangeTableConfig",
                                                                          "op_table"
                                                                        |),
                                                                        "delphinus_zkwasm::circuits::rtable::OpTable",
                                                                        "right"
                                                                      |)
                                                                    |);
                                                                    M.read (| offset |);
                                                                    M.closure
                                                                      (fun γ =>
                                                                        ltac:(M.monadic
                                                                          match γ with
                                                                          | [ α0 ] =>
                                                                            M.match_operator (|
                                                                              M.alloc (| α0 |),
                                                                              [
                                                                                fun γ =>
                                                                                  ltac:(M.monadic
                                                                                    (Value.StructTuple
                                                                                      "core::result::Result::Ok"
                                                                                      [
                                                                                        M.call_closure (|
                                                                                          M.get_trait_method (|
                                                                                            "ff::Field",
                                                                                            F,
                                                                                            [],
                                                                                            "zero",
                                                                                            []
                                                                                          |),
                                                                                          []
                                                                                        |)
                                                                                      ]))
                                                                              ]
                                                                            |)
                                                                          | _ => M.impossible (||)
                                                                          end))
                                                                  ]
                                                                |)
                                                              ]
                                                            |)
                                                          |),
                                                          [
                                                            fun γ =>
                                                              ltac:(M.monadic
                                                                (let γ0_0 :=
                                                                  M.SubPointer.get_struct_tuple_field (|
                                                                    γ,
                                                                    "core::ops::control_flow::ControlFlow::Break",
                                                                    0
                                                                  |) in
                                                                let residual := M.copy (| γ0_0 |) in
                                                                M.alloc (|
                                                                  M.never_to_any (|
                                                                    M.read (|
                                                                      M.return_ (|
                                                                        M.call_closure (|
                                                                          M.get_trait_method (|
                                                                            "core::ops::try_trait::FromResidual",
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "core::result::Result")
                                                                              [
                                                                                Ty.tuple [];
                                                                                Ty.path
                                                                                  "halo2_proofs::plonk::error::Error"
                                                                              ],
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "core::result::Result")
                                                                                [
                                                                                  Ty.path
                                                                                    "core::convert::Infallible";
                                                                                  Ty.path
                                                                                    "halo2_proofs::plonk::error::Error"
                                                                                ]
                                                                            ],
                                                                            "from_residual",
                                                                            []
                                                                          |),
                                                                          [ M.read (| residual |) ]
                                                                        |)
                                                                      |)
                                                                    |)
                                                                  |)
                                                                |)));
                                                            fun γ =>
                                                              ltac:(M.monadic
                                                                (let γ0_0 :=
                                                                  M.SubPointer.get_struct_tuple_field (|
                                                                    γ,
                                                                    "core::ops::control_flow::ControlFlow::Continue",
                                                                    0
                                                                  |) in
                                                                let val := M.copy (| γ0_0 |) in
                                                                val))
                                                          ]
                                                        |) in
                                                      let _ :=
                                                        M.match_operator (|
                                                          M.alloc (|
                                                            M.call_closure (|
                                                              M.get_trait_method (|
                                                                "core::ops::try_trait::Try",
                                                                Ty.apply
                                                                  (Ty.path "core::result::Result")
                                                                  [
                                                                    Ty.tuple [];
                                                                    Ty.path
                                                                      "halo2_proofs::plonk::error::Error"
                                                                  ],
                                                                [],
                                                                "branch",
                                                                []
                                                              |),
                                                              [
                                                                M.call_closure (|
                                                                  M.get_associated_function (|
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "halo2_proofs::circuit::Table")
                                                                      [ F ],
                                                                    "assign_cell",
                                                                    [
                                                                      Ty.function
                                                                        [ Ty.tuple [] ]
                                                                        (Ty.apply
                                                                          (Ty.path
                                                                            "core::result::Result")
                                                                          [
                                                                            F;
                                                                            Ty.path
                                                                              "halo2_proofs::plonk::error::Error"
                                                                          ]);
                                                                      F;
                                                                      Ty.function
                                                                        [ Ty.tuple [] ]
                                                                        (Ty.apply
                                                                          (Ty.path "&")
                                                                          [ Ty.path "str" ]);
                                                                      Ty.apply
                                                                        (Ty.path "&")
                                                                        [ Ty.path "str" ]
                                                                    ]
                                                                  |),
                                                                  [
                                                                    table;
                                                                    M.closure
                                                                      (fun γ =>
                                                                        ltac:(M.monadic
                                                                          match γ with
                                                                          | [ α0 ] =>
                                                                            M.match_operator (|
                                                                              M.alloc (| α0 |),
                                                                              [
                                                                                fun γ =>
                                                                                  ltac:(M.monadic
                                                                                    (M.read (|
                                                                                      Value.String
                                                                                        "range table"
                                                                                    |)))
                                                                              ]
                                                                            |)
                                                                          | _ => M.impossible (||)
                                                                          end));
                                                                    M.read (|
                                                                      M.SubPointer.get_struct_record_field (|
                                                                        M.SubPointer.get_struct_record_field (|
                                                                          M.SubPointer.get_struct_record_field (|
                                                                            M.read (| self |),
                                                                            "delphinus_zkwasm::circuits::rtable::RangeTableChip",
                                                                            "config"
                                                                          |),
                                                                          "delphinus_zkwasm::circuits::rtable::RangeTableConfig",
                                                                          "op_table"
                                                                        |),
                                                                        "delphinus_zkwasm::circuits::rtable::OpTable",
                                                                        "result"
                                                                      |)
                                                                    |);
                                                                    M.read (| offset |);
                                                                    M.closure
                                                                      (fun γ =>
                                                                        ltac:(M.monadic
                                                                          match γ with
                                                                          | [ α0 ] =>
                                                                            M.match_operator (|
                                                                              M.alloc (| α0 |),
                                                                              [
                                                                                fun γ =>
                                                                                  ltac:(M.monadic
                                                                                    (Value.StructTuple
                                                                                      "core::result::Result::Ok"
                                                                                      [
                                                                                        M.call_closure (|
                                                                                          M.get_trait_method (|
                                                                                            "ff::Field",
                                                                                            F,
                                                                                            [],
                                                                                            "zero",
                                                                                            []
                                                                                          |),
                                                                                          []
                                                                                        |)
                                                                                      ]))
                                                                              ]
                                                                            |)
                                                                          | _ => M.impossible (||)
                                                                          end))
                                                                  ]
                                                                |)
                                                              ]
                                                            |)
                                                          |),
                                                          [
                                                            fun γ =>
                                                              ltac:(M.monadic
                                                                (let γ0_0 :=
                                                                  M.SubPointer.get_struct_tuple_field (|
                                                                    γ,
                                                                    "core::ops::control_flow::ControlFlow::Break",
                                                                    0
                                                                  |) in
                                                                let residual := M.copy (| γ0_0 |) in
                                                                M.alloc (|
                                                                  M.never_to_any (|
                                                                    M.read (|
                                                                      M.return_ (|
                                                                        M.call_closure (|
                                                                          M.get_trait_method (|
                                                                            "core::ops::try_trait::FromResidual",
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "core::result::Result")
                                                                              [
                                                                                Ty.tuple [];
                                                                                Ty.path
                                                                                  "halo2_proofs::plonk::error::Error"
                                                                              ],
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "core::result::Result")
                                                                                [
                                                                                  Ty.path
                                                                                    "core::convert::Infallible";
                                                                                  Ty.path
                                                                                    "halo2_proofs::plonk::error::Error"
                                                                                ]
                                                                            ],
                                                                            "from_residual",
                                                                            []
                                                                          |),
                                                                          [ M.read (| residual |) ]
                                                                        |)
                                                                      |)
                                                                    |)
                                                                  |)
                                                                |)));
                                                            fun γ =>
                                                              ltac:(M.monadic
                                                                (let γ0_0 :=
                                                                  M.SubPointer.get_struct_tuple_field (|
                                                                    γ,
                                                                    "core::ops::control_flow::ControlFlow::Continue",
                                                                    0
                                                                  |) in
                                                                let val := M.copy (| γ0_0 |) in
                                                                val))
                                                          ]
                                                        |) in
                                                      let _ :=
                                                        let β := offset in
                                                        M.write (|
                                                          β,
                                                          BinOp.Panic.add (|
                                                            Integer.Usize,
                                                            M.read (| β |),
                                                            Value.Integer 1
                                                          |)
                                                        |) in
                                                      M.use
                                                        (M.match_operator (|
                                                          M.alloc (|
                                                            M.call_closure (|
                                                              M.get_trait_method (|
                                                                "core::iter::traits::collect::IntoIterator",
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "core::ops::range::Range")
                                                                  [ Ty.path "u64" ],
                                                                [],
                                                                "into_iter",
                                                                []
                                                              |),
                                                              [
                                                                Value.StructRecord
                                                                  "core::ops::range::Range"
                                                                  [
                                                                    ("start", Value.Integer 0);
                                                                    ("end_",
                                                                      M.read (|
                                                                        M.get_constant (|
                                                                          "delphinus_zkwasm::circuits::config::POW_TABLE_POWER_START"
                                                                        |)
                                                                      |))
                                                                  ]
                                                              ]
                                                            |)
                                                          |),
                                                          [
                                                            fun γ =>
                                                              ltac:(M.monadic
                                                                (let iter := M.copy (| γ |) in
                                                                M.loop (|
                                                                  ltac:(M.monadic
                                                                    (let _ :=
                                                                      M.match_operator (|
                                                                        M.alloc (|
                                                                          M.call_closure (|
                                                                            M.get_trait_method (|
                                                                              "core::iter::traits::iterator::Iterator",
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "core::ops::range::Range")
                                                                                [ Ty.path "u64" ],
                                                                              [],
                                                                              "next",
                                                                              []
                                                                            |),
                                                                            [ iter ]
                                                                          |)
                                                                        |),
                                                                        [
                                                                          fun γ =>
                                                                            ltac:(M.monadic
                                                                              (M.alloc (|
                                                                                M.never_to_any (|
                                                                                  M.read (|
                                                                                    M.break (||)
                                                                                  |)
                                                                                |)
                                                                              |)));
                                                                          fun γ =>
                                                                            ltac:(M.monadic
                                                                              (let γ0_0 :=
                                                                                M.SubPointer.get_struct_tuple_field (|
                                                                                  γ,
                                                                                  "core::option::Option::Some",
                                                                                  0
                                                                                |) in
                                                                              let i :=
                                                                                M.copy (| γ0_0 |) in
                                                                              let _ :=
                                                                                M.match_operator (|
                                                                                  M.alloc (|
                                                                                    M.call_closure (|
                                                                                      M.get_trait_method (|
                                                                                        "core::ops::try_trait::Try",
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "core::result::Result")
                                                                                          [
                                                                                            Ty.tuple
                                                                                              [];
                                                                                            Ty.path
                                                                                              "halo2_proofs::plonk::error::Error"
                                                                                          ],
                                                                                        [],
                                                                                        "branch",
                                                                                        []
                                                                                      |),
                                                                                      [
                                                                                        M.call_closure (|
                                                                                          M.get_associated_function (|
                                                                                            Ty.apply
                                                                                              (Ty.path
                                                                                                "halo2_proofs::circuit::Table")
                                                                                              [ F ],
                                                                                            "assign_cell",
                                                                                            [
                                                                                              Ty.function
                                                                                                [
                                                                                                  Ty.tuple
                                                                                                    []
                                                                                                ]
                                                                                                (Ty.apply
                                                                                                  (Ty.path
                                                                                                    "core::result::Result")
                                                                                                  [
                                                                                                    F;
                                                                                                    Ty.path
                                                                                                      "halo2_proofs::plonk::error::Error"
                                                                                                  ]);
                                                                                              F;
                                                                                              Ty.function
                                                                                                [
                                                                                                  Ty.tuple
                                                                                                    []
                                                                                                ]
                                                                                                (Ty.apply
                                                                                                  (Ty.path
                                                                                                    "&")
                                                                                                  [
                                                                                                    Ty.path
                                                                                                      "str"
                                                                                                  ]);
                                                                                              Ty.apply
                                                                                                (Ty.path
                                                                                                  "&")
                                                                                                [
                                                                                                  Ty.path
                                                                                                    "str"
                                                                                                ]
                                                                                            ]
                                                                                          |),
                                                                                          [
                                                                                            table;
                                                                                            M.closure
                                                                                              (fun
                                                                                                  γ =>
                                                                                                ltac:(M.monadic
                                                                                                  match
                                                                                                    γ
                                                                                                  with
                                                                                                  | [
                                                                                                        α0
                                                                                                      ] =>
                                                                                                    M.match_operator (|
                                                                                                      M.alloc (|
                                                                                                        α0
                                                                                                      |),
                                                                                                      [
                                                                                                        fun
                                                                                                            γ =>
                                                                                                          ltac:(M.monadic
                                                                                                            (M.read (|
                                                                                                              Value.String
                                                                                                                "range table"
                                                                                                            |)))
                                                                                                      ]
                                                                                                    |)
                                                                                                  | _ =>
                                                                                                    M.impossible (||)
                                                                                                  end));
                                                                                            M.read (|
                                                                                              M.SubPointer.get_struct_record_field (|
                                                                                                M.SubPointer.get_struct_record_field (|
                                                                                                  M.SubPointer.get_struct_record_field (|
                                                                                                    M.read (|
                                                                                                      self
                                                                                                    |),
                                                                                                    "delphinus_zkwasm::circuits::rtable::RangeTableChip",
                                                                                                    "config"
                                                                                                  |),
                                                                                                  "delphinus_zkwasm::circuits::rtable::RangeTableConfig",
                                                                                                  "op_table"
                                                                                                |),
                                                                                                "delphinus_zkwasm::circuits::rtable::OpTable",
                                                                                                "op"
                                                                                              |)
                                                                                            |);
                                                                                            M.read (|
                                                                                              offset
                                                                                            |);
                                                                                            M.closure
                                                                                              (fun
                                                                                                  γ =>
                                                                                                ltac:(M.monadic
                                                                                                  match
                                                                                                    γ
                                                                                                  with
                                                                                                  | [
                                                                                                        α0
                                                                                                      ] =>
                                                                                                    M.match_operator (|
                                                                                                      M.alloc (|
                                                                                                        α0
                                                                                                      |),
                                                                                                      [
                                                                                                        fun
                                                                                                            γ =>
                                                                                                          ltac:(M.monadic
                                                                                                            (Value.StructTuple
                                                                                                              "core::result::Result::Ok"
                                                                                                              [
                                                                                                                M.call_closure (|
                                                                                                                  M.get_trait_method (|
                                                                                                                    "core::convert::From",
                                                                                                                    F,
                                                                                                                    [
                                                                                                                      Ty.path
                                                                                                                        "u64"
                                                                                                                    ],
                                                                                                                    "from",
                                                                                                                    []
                                                                                                                  |),
                                                                                                                  [
                                                                                                                    M.read (|
                                                                                                                      M.get_constant (|
                                                                                                                        "delphinus_zkwasm::circuits::rtable::POW_OP"
                                                                                                                      |)
                                                                                                                    |)
                                                                                                                  ]
                                                                                                                |)
                                                                                                              ]))
                                                                                                      ]
                                                                                                    |)
                                                                                                  | _ =>
                                                                                                    M.impossible (||)
                                                                                                  end))
                                                                                          ]
                                                                                        |)
                                                                                      ]
                                                                                    |)
                                                                                  |),
                                                                                  [
                                                                                    fun γ =>
                                                                                      ltac:(M.monadic
                                                                                        (let γ0_0 :=
                                                                                          M.SubPointer.get_struct_tuple_field (|
                                                                                            γ,
                                                                                            "core::ops::control_flow::ControlFlow::Break",
                                                                                            0
                                                                                          |) in
                                                                                        let
                                                                                              residual :=
                                                                                          M.copy (|
                                                                                            γ0_0
                                                                                          |) in
                                                                                        M.alloc (|
                                                                                          M.never_to_any (|
                                                                                            M.read (|
                                                                                              M.return_ (|
                                                                                                M.call_closure (|
                                                                                                  M.get_trait_method (|
                                                                                                    "core::ops::try_trait::FromResidual",
                                                                                                    Ty.apply
                                                                                                      (Ty.path
                                                                                                        "core::result::Result")
                                                                                                      [
                                                                                                        Ty.tuple
                                                                                                          [];
                                                                                                        Ty.path
                                                                                                          "halo2_proofs::plonk::error::Error"
                                                                                                      ],
                                                                                                    [
                                                                                                      Ty.apply
                                                                                                        (Ty.path
                                                                                                          "core::result::Result")
                                                                                                        [
                                                                                                          Ty.path
                                                                                                            "core::convert::Infallible";
                                                                                                          Ty.path
                                                                                                            "halo2_proofs::plonk::error::Error"
                                                                                                        ]
                                                                                                    ],
                                                                                                    "from_residual",
                                                                                                    []
                                                                                                  |),
                                                                                                  [
                                                                                                    M.read (|
                                                                                                      residual
                                                                                                    |)
                                                                                                  ]
                                                                                                |)
                                                                                              |)
                                                                                            |)
                                                                                          |)
                                                                                        |)));
                                                                                    fun γ =>
                                                                                      ltac:(M.monadic
                                                                                        (let γ0_0 :=
                                                                                          M.SubPointer.get_struct_tuple_field (|
                                                                                            γ,
                                                                                            "core::ops::control_flow::ControlFlow::Continue",
                                                                                            0
                                                                                          |) in
                                                                                        let val :=
                                                                                          M.copy (|
                                                                                            γ0_0
                                                                                          |) in
                                                                                        val))
                                                                                  ]
                                                                                |) in
                                                                              let _ :=
                                                                                M.match_operator (|
                                                                                  M.alloc (|
                                                                                    M.call_closure (|
                                                                                      M.get_trait_method (|
                                                                                        "core::ops::try_trait::Try",
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "core::result::Result")
                                                                                          [
                                                                                            Ty.tuple
                                                                                              [];
                                                                                            Ty.path
                                                                                              "halo2_proofs::plonk::error::Error"
                                                                                          ],
                                                                                        [],
                                                                                        "branch",
                                                                                        []
                                                                                      |),
                                                                                      [
                                                                                        M.call_closure (|
                                                                                          M.get_associated_function (|
                                                                                            Ty.apply
                                                                                              (Ty.path
                                                                                                "halo2_proofs::circuit::Table")
                                                                                              [ F ],
                                                                                            "assign_cell",
                                                                                            [
                                                                                              Ty.function
                                                                                                [
                                                                                                  Ty.tuple
                                                                                                    []
                                                                                                ]
                                                                                                (Ty.apply
                                                                                                  (Ty.path
                                                                                                    "core::result::Result")
                                                                                                  [
                                                                                                    F;
                                                                                                    Ty.path
                                                                                                      "halo2_proofs::plonk::error::Error"
                                                                                                  ]);
                                                                                              F;
                                                                                              Ty.function
                                                                                                [
                                                                                                  Ty.tuple
                                                                                                    []
                                                                                                ]
                                                                                                (Ty.apply
                                                                                                  (Ty.path
                                                                                                    "&")
                                                                                                  [
                                                                                                    Ty.path
                                                                                                      "str"
                                                                                                  ]);
                                                                                              Ty.apply
                                                                                                (Ty.path
                                                                                                  "&")
                                                                                                [
                                                                                                  Ty.path
                                                                                                    "str"
                                                                                                ]
                                                                                            ]
                                                                                          |),
                                                                                          [
                                                                                            table;
                                                                                            M.closure
                                                                                              (fun
                                                                                                  γ =>
                                                                                                ltac:(M.monadic
                                                                                                  match
                                                                                                    γ
                                                                                                  with
                                                                                                  | [
                                                                                                        α0
                                                                                                      ] =>
                                                                                                    M.match_operator (|
                                                                                                      M.alloc (|
                                                                                                        α0
                                                                                                      |),
                                                                                                      [
                                                                                                        fun
                                                                                                            γ =>
                                                                                                          ltac:(M.monadic
                                                                                                            (M.read (|
                                                                                                              Value.String
                                                                                                                "range table"
                                                                                                            |)))
                                                                                                      ]
                                                                                                    |)
                                                                                                  | _ =>
                                                                                                    M.impossible (||)
                                                                                                  end));
                                                                                            M.read (|
                                                                                              M.SubPointer.get_struct_record_field (|
                                                                                                M.SubPointer.get_struct_record_field (|
                                                                                                  M.SubPointer.get_struct_record_field (|
                                                                                                    M.read (|
                                                                                                      self
                                                                                                    |),
                                                                                                    "delphinus_zkwasm::circuits::rtable::RangeTableChip",
                                                                                                    "config"
                                                                                                  |),
                                                                                                  "delphinus_zkwasm::circuits::rtable::RangeTableConfig",
                                                                                                  "op_table"
                                                                                                |),
                                                                                                "delphinus_zkwasm::circuits::rtable::OpTable",
                                                                                                "left"
                                                                                              |)
                                                                                            |);
                                                                                            M.read (|
                                                                                              offset
                                                                                            |);
                                                                                            M.closure
                                                                                              (fun
                                                                                                  γ =>
                                                                                                ltac:(M.monadic
                                                                                                  match
                                                                                                    γ
                                                                                                  with
                                                                                                  | [
                                                                                                        α0
                                                                                                      ] =>
                                                                                                    M.match_operator (|
                                                                                                      M.alloc (|
                                                                                                        α0
                                                                                                      |),
                                                                                                      [
                                                                                                        fun
                                                                                                            γ =>
                                                                                                          ltac:(M.monadic
                                                                                                            (Value.StructTuple
                                                                                                              "core::result::Result::Ok"
                                                                                                              [
                                                                                                                M.call_closure (|
                                                                                                                  M.get_trait_method (|
                                                                                                                    "ff::Field",
                                                                                                                    F,
                                                                                                                    [],
                                                                                                                    "zero",
                                                                                                                    []
                                                                                                                  |),
                                                                                                                  []
                                                                                                                |)
                                                                                                              ]))
                                                                                                      ]
                                                                                                    |)
                                                                                                  | _ =>
                                                                                                    M.impossible (||)
                                                                                                  end))
                                                                                          ]
                                                                                        |)
                                                                                      ]
                                                                                    |)
                                                                                  |),
                                                                                  [
                                                                                    fun γ =>
                                                                                      ltac:(M.monadic
                                                                                        (let γ0_0 :=
                                                                                          M.SubPointer.get_struct_tuple_field (|
                                                                                            γ,
                                                                                            "core::ops::control_flow::ControlFlow::Break",
                                                                                            0
                                                                                          |) in
                                                                                        let
                                                                                              residual :=
                                                                                          M.copy (|
                                                                                            γ0_0
                                                                                          |) in
                                                                                        M.alloc (|
                                                                                          M.never_to_any (|
                                                                                            M.read (|
                                                                                              M.return_ (|
                                                                                                M.call_closure (|
                                                                                                  M.get_trait_method (|
                                                                                                    "core::ops::try_trait::FromResidual",
                                                                                                    Ty.apply
                                                                                                      (Ty.path
                                                                                                        "core::result::Result")
                                                                                                      [
                                                                                                        Ty.tuple
                                                                                                          [];
                                                                                                        Ty.path
                                                                                                          "halo2_proofs::plonk::error::Error"
                                                                                                      ],
                                                                                                    [
                                                                                                      Ty.apply
                                                                                                        (Ty.path
                                                                                                          "core::result::Result")
                                                                                                        [
                                                                                                          Ty.path
                                                                                                            "core::convert::Infallible";
                                                                                                          Ty.path
                                                                                                            "halo2_proofs::plonk::error::Error"
                                                                                                        ]
                                                                                                    ],
                                                                                                    "from_residual",
                                                                                                    []
                                                                                                  |),
                                                                                                  [
                                                                                                    M.read (|
                                                                                                      residual
                                                                                                    |)
                                                                                                  ]
                                                                                                |)
                                                                                              |)
                                                                                            |)
                                                                                          |)
                                                                                        |)));
                                                                                    fun γ =>
                                                                                      ltac:(M.monadic
                                                                                        (let γ0_0 :=
                                                                                          M.SubPointer.get_struct_tuple_field (|
                                                                                            γ,
                                                                                            "core::ops::control_flow::ControlFlow::Continue",
                                                                                            0
                                                                                          |) in
                                                                                        let val :=
                                                                                          M.copy (|
                                                                                            γ0_0
                                                                                          |) in
                                                                                        val))
                                                                                  ]
                                                                                |) in
                                                                              let _ :=
                                                                                M.match_operator (|
                                                                                  M.alloc (|
                                                                                    M.call_closure (|
                                                                                      M.get_trait_method (|
                                                                                        "core::ops::try_trait::Try",
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "core::result::Result")
                                                                                          [
                                                                                            Ty.tuple
                                                                                              [];
                                                                                            Ty.path
                                                                                              "halo2_proofs::plonk::error::Error"
                                                                                          ],
                                                                                        [],
                                                                                        "branch",
                                                                                        []
                                                                                      |),
                                                                                      [
                                                                                        M.call_closure (|
                                                                                          M.get_associated_function (|
                                                                                            Ty.apply
                                                                                              (Ty.path
                                                                                                "halo2_proofs::circuit::Table")
                                                                                              [ F ],
                                                                                            "assign_cell",
                                                                                            [
                                                                                              Ty.function
                                                                                                [
                                                                                                  Ty.tuple
                                                                                                    []
                                                                                                ]
                                                                                                (Ty.apply
                                                                                                  (Ty.path
                                                                                                    "core::result::Result")
                                                                                                  [
                                                                                                    F;
                                                                                                    Ty.path
                                                                                                      "halo2_proofs::plonk::error::Error"
                                                                                                  ]);
                                                                                              F;
                                                                                              Ty.function
                                                                                                [
                                                                                                  Ty.tuple
                                                                                                    []
                                                                                                ]
                                                                                                (Ty.apply
                                                                                                  (Ty.path
                                                                                                    "&")
                                                                                                  [
                                                                                                    Ty.path
                                                                                                      "str"
                                                                                                  ]);
                                                                                              Ty.apply
                                                                                                (Ty.path
                                                                                                  "&")
                                                                                                [
                                                                                                  Ty.path
                                                                                                    "str"
                                                                                                ]
                                                                                            ]
                                                                                          |),
                                                                                          [
                                                                                            table;
                                                                                            M.closure
                                                                                              (fun
                                                                                                  γ =>
                                                                                                ltac:(M.monadic
                                                                                                  match
                                                                                                    γ
                                                                                                  with
                                                                                                  | [
                                                                                                        α0
                                                                                                      ] =>
                                                                                                    M.match_operator (|
                                                                                                      M.alloc (|
                                                                                                        α0
                                                                                                      |),
                                                                                                      [
                                                                                                        fun
                                                                                                            γ =>
                                                                                                          ltac:(M.monadic
                                                                                                            (M.read (|
                                                                                                              Value.String
                                                                                                                "range table"
                                                                                                            |)))
                                                                                                      ]
                                                                                                    |)
                                                                                                  | _ =>
                                                                                                    M.impossible (||)
                                                                                                  end));
                                                                                            M.read (|
                                                                                              M.SubPointer.get_struct_record_field (|
                                                                                                M.SubPointer.get_struct_record_field (|
                                                                                                  M.SubPointer.get_struct_record_field (|
                                                                                                    M.read (|
                                                                                                      self
                                                                                                    |),
                                                                                                    "delphinus_zkwasm::circuits::rtable::RangeTableChip",
                                                                                                    "config"
                                                                                                  |),
                                                                                                  "delphinus_zkwasm::circuits::rtable::RangeTableConfig",
                                                                                                  "op_table"
                                                                                                |),
                                                                                                "delphinus_zkwasm::circuits::rtable::OpTable",
                                                                                                "right"
                                                                                              |)
                                                                                            |);
                                                                                            M.read (|
                                                                                              offset
                                                                                            |);
                                                                                            M.closure
                                                                                              (fun
                                                                                                  γ =>
                                                                                                ltac:(M.monadic
                                                                                                  match
                                                                                                    γ
                                                                                                  with
                                                                                                  | [
                                                                                                        α0
                                                                                                      ] =>
                                                                                                    M.match_operator (|
                                                                                                      M.alloc (|
                                                                                                        α0
                                                                                                      |),
                                                                                                      [
                                                                                                        fun
                                                                                                            γ =>
                                                                                                          ltac:(M.monadic
                                                                                                            (Value.StructTuple
                                                                                                              "core::result::Result::Ok"
                                                                                                              [
                                                                                                                M.call_closure (|
                                                                                                                  M.get_trait_method (|
                                                                                                                    "core::convert::From",
                                                                                                                    F,
                                                                                                                    [
                                                                                                                      Ty.path
                                                                                                                        "u64"
                                                                                                                    ],
                                                                                                                    "from",
                                                                                                                    []
                                                                                                                  |),
                                                                                                                  [
                                                                                                                    BinOp.Panic.add (|
                                                                                                                      Integer.U64,
                                                                                                                      M.read (|
                                                                                                                        M.get_constant (|
                                                                                                                          "delphinus_zkwasm::circuits::config::POW_TABLE_POWER_START"
                                                                                                                        |)
                                                                                                                      |),
                                                                                                                      M.read (|
                                                                                                                        i
                                                                                                                      |)
                                                                                                                    |)
                                                                                                                  ]
                                                                                                                |)
                                                                                                              ]))
                                                                                                      ]
                                                                                                    |)
                                                                                                  | _ =>
                                                                                                    M.impossible (||)
                                                                                                  end))
                                                                                          ]
                                                                                        |)
                                                                                      ]
                                                                                    |)
                                                                                  |),
                                                                                  [
                                                                                    fun γ =>
                                                                                      ltac:(M.monadic
                                                                                        (let γ0_0 :=
                                                                                          M.SubPointer.get_struct_tuple_field (|
                                                                                            γ,
                                                                                            "core::ops::control_flow::ControlFlow::Break",
                                                                                            0
                                                                                          |) in
                                                                                        let
                                                                                              residual :=
                                                                                          M.copy (|
                                                                                            γ0_0
                                                                                          |) in
                                                                                        M.alloc (|
                                                                                          M.never_to_any (|
                                                                                            M.read (|
                                                                                              M.return_ (|
                                                                                                M.call_closure (|
                                                                                                  M.get_trait_method (|
                                                                                                    "core::ops::try_trait::FromResidual",
                                                                                                    Ty.apply
                                                                                                      (Ty.path
                                                                                                        "core::result::Result")
                                                                                                      [
                                                                                                        Ty.tuple
                                                                                                          [];
                                                                                                        Ty.path
                                                                                                          "halo2_proofs::plonk::error::Error"
                                                                                                      ],
                                                                                                    [
                                                                                                      Ty.apply
                                                                                                        (Ty.path
                                                                                                          "core::result::Result")
                                                                                                        [
                                                                                                          Ty.path
                                                                                                            "core::convert::Infallible";
                                                                                                          Ty.path
                                                                                                            "halo2_proofs::plonk::error::Error"
                                                                                                        ]
                                                                                                    ],
                                                                                                    "from_residual",
                                                                                                    []
                                                                                                  |),
                                                                                                  [
                                                                                                    M.read (|
                                                                                                      residual
                                                                                                    |)
                                                                                                  ]
                                                                                                |)
                                                                                              |)
                                                                                            |)
                                                                                          |)
                                                                                        |)));
                                                                                    fun γ =>
                                                                                      ltac:(M.monadic
                                                                                        (let γ0_0 :=
                                                                                          M.SubPointer.get_struct_tuple_field (|
                                                                                            γ,
                                                                                            "core::ops::control_flow::ControlFlow::Continue",
                                                                                            0
                                                                                          |) in
                                                                                        let val :=
                                                                                          M.copy (|
                                                                                            γ0_0
                                                                                          |) in
                                                                                        val))
                                                                                  ]
                                                                                |) in
                                                                              let _ :=
                                                                                M.match_operator (|
                                                                                  M.alloc (|
                                                                                    M.call_closure (|
                                                                                      M.get_trait_method (|
                                                                                        "core::ops::try_trait::Try",
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "core::result::Result")
                                                                                          [
                                                                                            Ty.tuple
                                                                                              [];
                                                                                            Ty.path
                                                                                              "halo2_proofs::plonk::error::Error"
                                                                                          ],
                                                                                        [],
                                                                                        "branch",
                                                                                        []
                                                                                      |),
                                                                                      [
                                                                                        M.call_closure (|
                                                                                          M.get_associated_function (|
                                                                                            Ty.apply
                                                                                              (Ty.path
                                                                                                "halo2_proofs::circuit::Table")
                                                                                              [ F ],
                                                                                            "assign_cell",
                                                                                            [
                                                                                              Ty.function
                                                                                                [
                                                                                                  Ty.tuple
                                                                                                    []
                                                                                                ]
                                                                                                (Ty.apply
                                                                                                  (Ty.path
                                                                                                    "core::result::Result")
                                                                                                  [
                                                                                                    F;
                                                                                                    Ty.path
                                                                                                      "halo2_proofs::plonk::error::Error"
                                                                                                  ]);
                                                                                              F;
                                                                                              Ty.function
                                                                                                [
                                                                                                  Ty.tuple
                                                                                                    []
                                                                                                ]
                                                                                                (Ty.apply
                                                                                                  (Ty.path
                                                                                                    "&")
                                                                                                  [
                                                                                                    Ty.path
                                                                                                      "str"
                                                                                                  ]);
                                                                                              Ty.apply
                                                                                                (Ty.path
                                                                                                  "&")
                                                                                                [
                                                                                                  Ty.path
                                                                                                    "str"
                                                                                                ]
                                                                                            ]
                                                                                          |),
                                                                                          [
                                                                                            table;
                                                                                            M.closure
                                                                                              (fun
                                                                                                  γ =>
                                                                                                ltac:(M.monadic
                                                                                                  match
                                                                                                    γ
                                                                                                  with
                                                                                                  | [
                                                                                                        α0
                                                                                                      ] =>
                                                                                                    M.match_operator (|
                                                                                                      M.alloc (|
                                                                                                        α0
                                                                                                      |),
                                                                                                      [
                                                                                                        fun
                                                                                                            γ =>
                                                                                                          ltac:(M.monadic
                                                                                                            (M.read (|
                                                                                                              Value.String
                                                                                                                "range table"
                                                                                                            |)))
                                                                                                      ]
                                                                                                    |)
                                                                                                  | _ =>
                                                                                                    M.impossible (||)
                                                                                                  end));
                                                                                            M.read (|
                                                                                              M.SubPointer.get_struct_record_field (|
                                                                                                M.SubPointer.get_struct_record_field (|
                                                                                                  M.SubPointer.get_struct_record_field (|
                                                                                                    M.read (|
                                                                                                      self
                                                                                                    |),
                                                                                                    "delphinus_zkwasm::circuits::rtable::RangeTableChip",
                                                                                                    "config"
                                                                                                  |),
                                                                                                  "delphinus_zkwasm::circuits::rtable::RangeTableConfig",
                                                                                                  "op_table"
                                                                                                |),
                                                                                                "delphinus_zkwasm::circuits::rtable::OpTable",
                                                                                                "result"
                                                                                              |)
                                                                                            |);
                                                                                            M.read (|
                                                                                              offset
                                                                                            |);
                                                                                            M.closure
                                                                                              (fun
                                                                                                  γ =>
                                                                                                ltac:(M.monadic
                                                                                                  match
                                                                                                    γ
                                                                                                  with
                                                                                                  | [
                                                                                                        α0
                                                                                                      ] =>
                                                                                                    M.match_operator (|
                                                                                                      M.alloc (|
                                                                                                        α0
                                                                                                      |),
                                                                                                      [
                                                                                                        fun
                                                                                                            γ =>
                                                                                                          ltac:(M.monadic
                                                                                                            (Value.StructTuple
                                                                                                              "core::result::Result::Ok"
                                                                                                              [
                                                                                                                M.call_closure (|
                                                                                                                  M.get_function (|
                                                                                                                    "delphinus_zkwasm::circuits::utils::bn_to_field",
                                                                                                                    [
                                                                                                                      F
                                                                                                                    ]
                                                                                                                  |),
                                                                                                                  [
                                                                                                                    M.alloc (|
                                                                                                                      M.call_closure (|
                                                                                                                        M.get_trait_method (|
                                                                                                                          "core::ops::bit::Shl",
                                                                                                                          Ty.path
                                                                                                                            "num_bigint::biguint::BigUint",
                                                                                                                          [
                                                                                                                            Ty.path
                                                                                                                              "u64"
                                                                                                                          ],
                                                                                                                          "shl",
                                                                                                                          []
                                                                                                                        |),
                                                                                                                        [
                                                                                                                          M.call_closure (|
                                                                                                                            M.get_trait_method (|
                                                                                                                              "core::convert::From",
                                                                                                                              Ty.path
                                                                                                                                "num_bigint::biguint::BigUint",
                                                                                                                              [
                                                                                                                                Ty.path
                                                                                                                                  "u64"
                                                                                                                              ],
                                                                                                                              "from",
                                                                                                                              []
                                                                                                                            |),
                                                                                                                            [
                                                                                                                              Value.Integer
                                                                                                                                1
                                                                                                                            ]
                                                                                                                          |);
                                                                                                                          M.read (|
                                                                                                                            i
                                                                                                                          |)
                                                                                                                        ]
                                                                                                                      |)
                                                                                                                    |)
                                                                                                                  ]
                                                                                                                |)
                                                                                                              ]))
                                                                                                      ]
                                                                                                    |)
                                                                                                  | _ =>
                                                                                                    M.impossible (||)
                                                                                                  end))
                                                                                          ]
                                                                                        |)
                                                                                      ]
                                                                                    |)
                                                                                  |),
                                                                                  [
                                                                                    fun γ =>
                                                                                      ltac:(M.monadic
                                                                                        (let γ0_0 :=
                                                                                          M.SubPointer.get_struct_tuple_field (|
                                                                                            γ,
                                                                                            "core::ops::control_flow::ControlFlow::Break",
                                                                                            0
                                                                                          |) in
                                                                                        let
                                                                                              residual :=
                                                                                          M.copy (|
                                                                                            γ0_0
                                                                                          |) in
                                                                                        M.alloc (|
                                                                                          M.never_to_any (|
                                                                                            M.read (|
                                                                                              M.return_ (|
                                                                                                M.call_closure (|
                                                                                                  M.get_trait_method (|
                                                                                                    "core::ops::try_trait::FromResidual",
                                                                                                    Ty.apply
                                                                                                      (Ty.path
                                                                                                        "core::result::Result")
                                                                                                      [
                                                                                                        Ty.tuple
                                                                                                          [];
                                                                                                        Ty.path
                                                                                                          "halo2_proofs::plonk::error::Error"
                                                                                                      ],
                                                                                                    [
                                                                                                      Ty.apply
                                                                                                        (Ty.path
                                                                                                          "core::result::Result")
                                                                                                        [
                                                                                                          Ty.path
                                                                                                            "core::convert::Infallible";
                                                                                                          Ty.path
                                                                                                            "halo2_proofs::plonk::error::Error"
                                                                                                        ]
                                                                                                    ],
                                                                                                    "from_residual",
                                                                                                    []
                                                                                                  |),
                                                                                                  [
                                                                                                    M.read (|
                                                                                                      residual
                                                                                                    |)
                                                                                                  ]
                                                                                                |)
                                                                                              |)
                                                                                            |)
                                                                                          |)
                                                                                        |)));
                                                                                    fun γ =>
                                                                                      ltac:(M.monadic
                                                                                        (let γ0_0 :=
                                                                                          M.SubPointer.get_struct_tuple_field (|
                                                                                            γ,
                                                                                            "core::ops::control_flow::ControlFlow::Continue",
                                                                                            0
                                                                                          |) in
                                                                                        let val :=
                                                                                          M.copy (|
                                                                                            γ0_0
                                                                                          |) in
                                                                                        val))
                                                                                  ]
                                                                                |) in
                                                                              let _ :=
                                                                                let β := offset in
                                                                                M.write (|
                                                                                  β,
                                                                                  BinOp.Panic.add (|
                                                                                    Integer.Usize,
                                                                                    M.read (| β |),
                                                                                    Value.Integer 1
                                                                                  |)
                                                                                |) in
                                                                              M.alloc (|
                                                                                Value.Tuple []
                                                                              |)))
                                                                        ]
                                                                      |) in
                                                                    M.alloc (| Value.Tuple [] |)))
                                                                |)))
                                                          ]
                                                        |)) in
                                                    M.alloc (|
                                                      Value.StructTuple
                                                        "core::result::Result::Ok"
                                                        [ Value.Tuple [] ]
                                                    |)
                                                  |)))
                                            ]
                                          |)
                                        | _ => M.impossible (||)
                                        end))
                                ]
                              |)
                            ]
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Break",
                                  0
                                |) in
                              let residual := M.copy (| γ0_0 |) in
                              M.alloc (|
                                M.never_to_any (|
                                  M.read (|
                                    M.return_ (|
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "core::ops::try_trait::FromResidual",
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            [
                                              Ty.tuple [];
                                              Ty.path "halo2_proofs::plonk::error::Error"
                                            ],
                                          [
                                            Ty.apply
                                              (Ty.path "core::result::Result")
                                              [
                                                Ty.path "core::convert::Infallible";
                                                Ty.path "halo2_proofs::plonk::error::Error"
                                              ]
                                          ],
                                          "from_residual",
                                          []
                                        |),
                                        [ M.read (| residual |) ]
                                      |)
                                    |)
                                  |)
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Continue",
                                  0
                                |) in
                              let val := M.copy (| γ0_0 |) in
                              val))
                        ]
                      |) in
                    M.alloc (| Value.Tuple [] |) in
                  M.alloc (| Value.StructTuple "core::result::Result::Ok" [ Value.Tuple [] ] |)
                |)))
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom AssociatedFunction_init :
        forall (F : Ty.t),
        M.IsAssociatedFunction (Self F) "init" (init F).
    End Impl_delphinus_zkwasm_circuits_rtable_RangeTableChip_F.
  End rtable.
End circuits.
