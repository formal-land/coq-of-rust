(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module circuits.
  Module utils.
    Module bit.
      (* StructRecord
        {
          name := "BitColumn";
          ty_params := [ "F" ];
          fields :=
            [
              ("col",
                Ty.apply
                  (Ty.path "halo2_proofs::plonk::circuit::Column")
                  [ Ty.path "halo2_proofs::plonk::circuit::Advice" ]);
              ("_mark", Ty.apply (Ty.path "core::marker::PhantomData") [ F ])
            ];
        } *)
      
      Module Impl_core_clone_Clone_where_core_clone_Clone_F_where_pairing_bn256_arithmetic_fields_FieldExt_F_for_delphinus_zkwasm_circuits_utils_bit_BitColumn_F.
        Definition Self (F : Ty.t) : Ty.t :=
          Ty.apply (Ty.path "delphinus_zkwasm::circuits::utils::bit::BitColumn") [ F ].
        
        (* Clone *)
        Definition clone (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self F in
          match τ, α with
          | [], [ self ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              Value.StructRecord
                "delphinus_zkwasm::circuits::utils::bit::BitColumn"
                [
                  ("col",
                    M.call_closure (|
                      M.get_trait_method (|
                        "core::clone::Clone",
                        Ty.apply
                          (Ty.path "halo2_proofs::plonk::circuit::Column")
                          [ Ty.path "halo2_proofs::plonk::circuit::Advice" ],
                        [],
                        "clone",
                        []
                      |),
                      [
                        M.SubPointer.get_struct_record_field (|
                          M.read (| self |),
                          "delphinus_zkwasm::circuits::utils::bit::BitColumn",
                          "col"
                        |)
                      ]
                    |));
                  ("_mark",
                    M.call_closure (|
                      M.get_trait_method (|
                        "core::clone::Clone",
                        Ty.apply (Ty.path "core::marker::PhantomData") [ F ],
                        [],
                        "clone",
                        []
                      |),
                      [
                        M.SubPointer.get_struct_record_field (|
                          M.read (| self |),
                          "delphinus_zkwasm::circuits::utils::bit::BitColumn",
                          "_mark"
                        |)
                      ]
                    |))
                ]))
          | _, _ => M.impossible
          end.
        
        Axiom Implements :
          forall (F : Ty.t),
          M.IsTraitInstance
            "core::clone::Clone"
            (Self F)
            (* Trait polymorphic types *) []
            (* Instance *) [ ("clone", InstanceField.Method (clone F)) ].
      End Impl_core_clone_Clone_where_core_clone_Clone_F_where_pairing_bn256_arithmetic_fields_FieldExt_F_for_delphinus_zkwasm_circuits_utils_bit_BitColumn_F.
      
      Module Impl_delphinus_zkwasm_circuits_utils_bit_BitColumn_F.
        Definition Self (F : Ty.t) : Ty.t :=
          Ty.apply (Ty.path "delphinus_zkwasm::circuits::utils::bit::BitColumn") [ F ].
        
        (*
            pub fn configure(
                meta: &mut ConstraintSystem<F>,
                cols: &mut impl Iterator<Item = Column<Advice>>,
                enable: impl Fn(&mut VirtualCells<'_, F>) -> Expression<F>,
            ) -> Self {
                let col = cols.next().unwrap();
        
                meta.create_gate("bit column", |meta| {
                    vec![
                        curr!(meta, col.clone())
                            * (constant_from!(1) - curr!(meta, col.clone()))
                            * enable(meta),
                    ]
                });
        
                Self {
                    col,
                    _mark: PhantomData,
                }
            }
        *)
        Definition configure (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self F in
          match τ, α with
          | [
                impl_Iterator_Item___Column_Advice__;
                impl_Fn__mut_VirtualCells_'___F___arrow_Expression_F_
              ],
              [ meta; cols; enable ] =>
            ltac:(M.monadic
              (let meta := M.alloc (| meta |) in
              let cols := M.alloc (| cols |) in
              let enable := M.alloc (| enable |) in
              M.read (|
                let col :=
                  M.alloc (|
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path "core::option::Option")
                          [
                            Ty.apply
                              (Ty.path "halo2_proofs::plonk::circuit::Column")
                              [ Ty.path "halo2_proofs::plonk::circuit::Advice" ]
                          ],
                        "unwrap",
                        []
                      |),
                      [
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::iter::traits::iterator::Iterator",
                            impl_Iterator_Item___Column_Advice__,
                            [],
                            "next",
                            []
                          |),
                          [ M.read (| cols |) ]
                        |)
                      ]
                    |)
                  |) in
                let _ :=
                  M.alloc (|
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.apply (Ty.path "halo2_proofs::plonk::circuit::ConstraintSystem") [ F ],
                        "create_gate",
                        [
                          Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ];
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            [
                              Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ];
                              Ty.path "alloc::alloc::Global"
                            ];
                          Ty.function
                            [
                              Ty.tuple
                                [
                                  Ty.apply
                                    (Ty.path "&mut")
                                    [
                                      Ty.apply
                                        (Ty.path "halo2_proofs::plonk::circuit::VirtualCells")
                                        [ F ]
                                    ]
                                ]
                            ]
                            (Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              [
                                Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ];
                                Ty.path "alloc::alloc::Global"
                              ])
                        ]
                      |),
                      [
                        M.read (| meta |);
                        M.read (| Value.String "bit column" |);
                        M.closure
                          (fun γ =>
                            ltac:(M.monadic
                              match γ with
                              | [ α0 ] =>
                                M.match_operator (|
                                  M.alloc (| α0 |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let meta := M.copy (| γ |) in
                                        M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.apply
                                              (Ty.path "slice")
                                              [
                                                Ty.apply
                                                  (Ty.path
                                                    "halo2_proofs::plonk::circuit::Expression")
                                                  [ F ]
                                              ],
                                            "into_vec",
                                            [ Ty.path "alloc::alloc::Global" ]
                                          |),
                                          [
                                            (* Unsize *)
                                            M.pointer_coercion
                                              (M.read (|
                                                M.call_closure (|
                                                  M.get_associated_function (|
                                                    Ty.apply
                                                      (Ty.path "alloc::boxed::Box")
                                                      [
                                                        Ty.apply
                                                          (Ty.path "array")
                                                          [
                                                            Ty.apply
                                                              (Ty.path
                                                                "halo2_proofs::plonk::circuit::Expression")
                                                              [ F ]
                                                          ];
                                                        Ty.path "alloc::alloc::Global"
                                                      ],
                                                    "new",
                                                    []
                                                  |),
                                                  [
                                                    M.alloc (|
                                                      Value.Array
                                                        [
                                                          M.call_closure (|
                                                            M.get_trait_method (|
                                                              "core::ops::arith::Mul",
                                                              Ty.apply
                                                                (Ty.path
                                                                  "halo2_proofs::plonk::circuit::Expression")
                                                                [ F ],
                                                              [
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "halo2_proofs::plonk::circuit::Expression")
                                                                  [ F ]
                                                              ],
                                                              "mul",
                                                              []
                                                            |),
                                                            [
                                                              M.call_closure (|
                                                                M.get_trait_method (|
                                                                  "core::ops::arith::Mul",
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "halo2_proofs::plonk::circuit::Expression")
                                                                    [ F ],
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "halo2_proofs::plonk::circuit::Expression")
                                                                      [ F ]
                                                                  ],
                                                                  "mul",
                                                                  []
                                                                |),
                                                                [
                                                                  M.call_closure (|
                                                                    M.get_associated_function (|
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "halo2_proofs::plonk::circuit::VirtualCells")
                                                                        [ F ],
                                                                      "query_advice",
                                                                      []
                                                                    |),
                                                                    [
                                                                      M.read (| meta |);
                                                                      M.call_closure (|
                                                                        M.get_trait_method (|
                                                                          "core::clone::Clone",
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "halo2_proofs::plonk::circuit::Column")
                                                                            [
                                                                              Ty.path
                                                                                "halo2_proofs::plonk::circuit::Advice"
                                                                            ],
                                                                          [],
                                                                          "clone",
                                                                          []
                                                                        |),
                                                                        [ col ]
                                                                      |);
                                                                      M.call_closure (|
                                                                        M.get_associated_function (|
                                                                          Ty.path
                                                                            "halo2_proofs::poly::Rotation",
                                                                          "cur",
                                                                          []
                                                                        |),
                                                                        []
                                                                      |)
                                                                    ]
                                                                  |);
                                                                  M.call_closure (|
                                                                    M.get_trait_method (|
                                                                      "core::ops::arith::Sub",
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "halo2_proofs::plonk::circuit::Expression")
                                                                        [ F ],
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "halo2_proofs::plonk::circuit::Expression")
                                                                          [ F ]
                                                                      ],
                                                                      "sub",
                                                                      []
                                                                    |),
                                                                    [
                                                                      Value.StructTuple
                                                                        "halo2_proofs::plonk::circuit::Expression::Constant"
                                                                        [
                                                                          M.call_closure (|
                                                                            M.get_trait_method (|
                                                                              "core::convert::From",
                                                                              F,
                                                                              [ Ty.path "u64" ],
                                                                              "from",
                                                                              []
                                                                            |),
                                                                            [
                                                                              M.read (|
                                                                                M.use
                                                                                  (M.alloc (|
                                                                                    Value.Integer 1
                                                                                  |))
                                                                              |)
                                                                            ]
                                                                          |)
                                                                        ];
                                                                      M.call_closure (|
                                                                        M.get_associated_function (|
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "halo2_proofs::plonk::circuit::VirtualCells")
                                                                            [ F ],
                                                                          "query_advice",
                                                                          []
                                                                        |),
                                                                        [
                                                                          M.read (| meta |);
                                                                          M.call_closure (|
                                                                            M.get_trait_method (|
                                                                              "core::clone::Clone",
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "halo2_proofs::plonk::circuit::Column")
                                                                                [
                                                                                  Ty.path
                                                                                    "halo2_proofs::plonk::circuit::Advice"
                                                                                ],
                                                                              [],
                                                                              "clone",
                                                                              []
                                                                            |),
                                                                            [ col ]
                                                                          |);
                                                                          M.call_closure (|
                                                                            M.get_associated_function (|
                                                                              Ty.path
                                                                                "halo2_proofs::poly::Rotation",
                                                                              "cur",
                                                                              []
                                                                            |),
                                                                            []
                                                                          |)
                                                                        ]
                                                                      |)
                                                                    ]
                                                                  |)
                                                                ]
                                                              |);
                                                              M.call_closure (|
                                                                M.get_trait_method (|
                                                                  "core::ops::function::Fn",
                                                                  impl_Fn__mut_VirtualCells_'___F___arrow_Expression_F_,
                                                                  [
                                                                    Ty.tuple
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path "&mut")
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "halo2_proofs::plonk::circuit::VirtualCells")
                                                                              [ F ]
                                                                          ]
                                                                      ]
                                                                  ],
                                                                  "call",
                                                                  []
                                                                |),
                                                                [
                                                                  enable;
                                                                  Value.Tuple [ M.read (| meta |) ]
                                                                ]
                                                              |)
                                                            ]
                                                          |)
                                                        ]
                                                    |)
                                                  ]
                                                |)
                                              |))
                                          ]
                                        |)))
                                  ]
                                |)
                              | _ => M.impossible (||)
                              end))
                      ]
                    |)
                  |) in
                M.alloc (|
                  Value.StructRecord
                    "delphinus_zkwasm::circuits::utils::bit::BitColumn"
                    [
                      ("col", M.read (| col |));
                      ("_mark", Value.StructTuple "core::marker::PhantomData" [])
                    ]
                |)
              |)))
          | _, _ => M.impossible
          end.
        
        Axiom AssociatedFunction_configure :
          forall (F : Ty.t),
          M.IsAssociatedFunction (Self F) "configure" (configure F).
        
        (*
            pub fn assign(&self, ctx: &mut Context<F>, value: bool) -> Result<(), Error> {
                ctx.region.assign_advice(
                    || "bit value",
                    self.col,
                    ctx.offset,
                    || Ok(if value { F::one() } else { F::zero() }),
                )?;
        
                Ok(())
            }
        *)
        Definition assign (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self F in
          match τ, α with
          | [], [ self; ctx; value ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              let ctx := M.alloc (| ctx |) in
              let value := M.alloc (| value |) in
              M.catch_return (|
                ltac:(M.monadic
                  (M.read (|
                    let _ :=
                      M.match_operator (|
                        M.alloc (|
                          M.call_closure (|
                            M.get_trait_method (|
                              "core::ops::try_trait::Try",
                              Ty.apply
                                (Ty.path "core::result::Result")
                                [
                                  Ty.apply (Ty.path "halo2_proofs::circuit::AssignedCell") [ F; F ];
                                  Ty.path "halo2_proofs::plonk::error::Error"
                                ],
                              [],
                              "branch",
                              []
                            |),
                            [
                              M.call_closure (|
                                M.get_associated_function (|
                                  Ty.apply (Ty.path "halo2_proofs::circuit::Region") [ F ],
                                  "assign_advice",
                                  [
                                    Ty.function
                                      [ Ty.tuple [] ]
                                      (Ty.apply
                                        (Ty.path "core::result::Result")
                                        [ F; Ty.path "halo2_proofs::plonk::error::Error" ]);
                                    F;
                                    Ty.function
                                      [ Ty.tuple [] ]
                                      (Ty.apply (Ty.path "&") [ Ty.path "str" ]);
                                    Ty.apply (Ty.path "&") [ Ty.path "str" ]
                                  ]
                                |),
                                [
                                  M.read (|
                                    M.SubPointer.get_struct_record_field (|
                                      M.read (| ctx |),
                                      "delphinus_zkwasm::circuits::utils::Context",
                                      "region"
                                    |)
                                  |);
                                  M.closure
                                    (fun γ =>
                                      ltac:(M.monadic
                                        match γ with
                                        | [ α0 ] =>
                                          M.match_operator (|
                                            M.alloc (| α0 |),
                                            [
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (M.read (| Value.String "bit value" |)))
                                            ]
                                          |)
                                        | _ => M.impossible (||)
                                        end));
                                  M.read (|
                                    M.SubPointer.get_struct_record_field (|
                                      M.read (| self |),
                                      "delphinus_zkwasm::circuits::utils::bit::BitColumn",
                                      "col"
                                    |)
                                  |);
                                  M.read (|
                                    M.SubPointer.get_struct_record_field (|
                                      M.read (| ctx |),
                                      "delphinus_zkwasm::circuits::utils::Context",
                                      "offset"
                                    |)
                                  |);
                                  M.closure
                                    (fun γ =>
                                      ltac:(M.monadic
                                        match γ with
                                        | [ α0 ] =>
                                          M.match_operator (|
                                            M.alloc (| α0 |),
                                            [
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (Value.StructTuple
                                                    "core::result::Result::Ok"
                                                    [
                                                      M.read (|
                                                        M.match_operator (|
                                                          M.alloc (| Value.Tuple [] |),
                                                          [
                                                            fun γ =>
                                                              ltac:(M.monadic
                                                                (let γ := M.use value in
                                                                let _ :=
                                                                  M.is_constant_or_break_match (|
                                                                    M.read (| γ |),
                                                                    Value.Bool true
                                                                  |) in
                                                                M.alloc (|
                                                                  M.call_closure (|
                                                                    M.get_trait_method (|
                                                                      "ff::Field",
                                                                      F,
                                                                      [],
                                                                      "one",
                                                                      []
                                                                    |),
                                                                    []
                                                                  |)
                                                                |)));
                                                            fun γ =>
                                                              ltac:(M.monadic
                                                                (M.alloc (|
                                                                  M.call_closure (|
                                                                    M.get_trait_method (|
                                                                      "ff::Field",
                                                                      F,
                                                                      [],
                                                                      "zero",
                                                                      []
                                                                    |),
                                                                    []
                                                                  |)
                                                                |)))
                                                          ]
                                                        |)
                                                      |)
                                                    ]))
                                            ]
                                          |)
                                        | _ => M.impossible (||)
                                        end))
                                ]
                              |)
                            ]
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Break",
                                  0
                                |) in
                              let residual := M.copy (| γ0_0 |) in
                              M.alloc (|
                                M.never_to_any (|
                                  M.read (|
                                    M.return_ (|
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "core::ops::try_trait::FromResidual",
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            [
                                              Ty.tuple [];
                                              Ty.path "halo2_proofs::plonk::error::Error"
                                            ],
                                          [
                                            Ty.apply
                                              (Ty.path "core::result::Result")
                                              [
                                                Ty.path "core::convert::Infallible";
                                                Ty.path "halo2_proofs::plonk::error::Error"
                                              ]
                                          ],
                                          "from_residual",
                                          []
                                        |),
                                        [ M.read (| residual |) ]
                                      |)
                                    |)
                                  |)
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Continue",
                                  0
                                |) in
                              let val := M.copy (| γ0_0 |) in
                              val))
                        ]
                      |) in
                    M.alloc (| Value.StructTuple "core::result::Result::Ok" [ Value.Tuple [] ] |)
                  |)))
              |)))
          | _, _ => M.impossible
          end.
        
        Axiom AssociatedFunction_assign :
          forall (F : Ty.t),
          M.IsAssociatedFunction (Self F) "assign" (assign F).
      End Impl_delphinus_zkwasm_circuits_utils_bit_BitColumn_F.
    End bit.
  End utils.
End circuits.
