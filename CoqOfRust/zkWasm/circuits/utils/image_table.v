(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module circuits.
  Module utils.
    Module image_table.
      Definition value_STACK_CAPABILITY : Value.t :=
        M.run ltac:(M.monadic (M.get_constant (| "wasmi::runner::DEFAULT_VALUE_STACK_LIMIT" |))).
      
      Definition value_GLOBAL_CAPABILITY : Value.t :=
        M.run ltac:(M.monadic (M.get_constant (| "wasmi::runner::DEFAULT_VALUE_STACK_LIMIT" |))).
      
      Definition value_INIT_MEMORY_ENTRIES_OFFSET : Value.t :=
        M.run ltac:(M.monadic (M.alloc (| Value.Integer 40960 |))).
      
      (* StructRecord
        {
          name := "InitMemoryLayouter";
          ty_params := [];
          fields := [ ("pages", Ty.path "u32") ];
        } *)
      
      Module Impl_delphinus_zkwasm_circuits_utils_image_table_InitMemoryLayouter.
        Definition Self : Ty.t :=
          Ty.path "delphinus_zkwasm::circuits::utils::image_table::InitMemoryLayouter".
        
        (*
            fn for_each(self, mut f: impl FnMut((LocationType, u32))) {
                for offset in 0..STACK_CAPABILITY {
                    f((LocationType::Stack, offset as u32))
                }
        
                for offset in 0..GLOBAL_CAPABILITY {
                    f((LocationType::Global, offset as u32))
                }
        
                for offset in 0..(self.pages * PAGE_ENTRIES) {
                    f((LocationType::Heap, offset))
                }
            }
        *)
        Definition for_each (τ : list Ty.t) (α : list Value.t) : M :=
          match τ, α with
          | [ impl_FnMut__LocationType__u32__ ], [ self; f ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              let f := M.alloc (| f |) in
              M.read (|
                let _ :=
                  M.use
                    (M.match_operator (|
                      M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::iter::traits::collect::IntoIterator",
                            Ty.apply (Ty.path "core::ops::range::Range") [ Ty.path "usize" ],
                            [],
                            "into_iter",
                            []
                          |),
                          [
                            Value.StructRecord
                              "core::ops::range::Range"
                              [
                                ("start", Value.Integer 0);
                                ("end_",
                                  M.read (|
                                    M.get_constant (|
                                      "delphinus_zkwasm::circuits::utils::image_table::STACK_CAPABILITY"
                                    |)
                                  |))
                              ]
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let iter := M.copy (| γ |) in
                            M.loop (|
                              ltac:(M.monadic
                                (let _ :=
                                  M.match_operator (|
                                    M.alloc (|
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "core::iter::traits::iterator::Iterator",
                                          Ty.apply
                                            (Ty.path "core::ops::range::Range")
                                            [ Ty.path "usize" ],
                                          [],
                                          "next",
                                          []
                                        |),
                                        [ iter ]
                                      |)
                                    |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (M.alloc (|
                                            M.never_to_any (| M.read (| M.break (||) |) |)
                                          |)));
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let γ0_0 :=
                                            M.SubPointer.get_struct_tuple_field (|
                                              γ,
                                              "core::option::Option::Some",
                                              0
                                            |) in
                                          let offset := M.copy (| γ0_0 |) in
                                          M.alloc (|
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "core::ops::function::FnMut",
                                                impl_FnMut__LocationType__u32__,
                                                [
                                                  Ty.tuple
                                                    [
                                                      Ty.tuple
                                                        [
                                                          Ty.path "specs::mtable::LocationType";
                                                          Ty.path "u32"
                                                        ]
                                                    ]
                                                ],
                                                "call_mut",
                                                []
                                              |),
                                              [
                                                f;
                                                Value.Tuple
                                                  [
                                                    Value.Tuple
                                                      [
                                                        Value.StructTuple
                                                          "specs::mtable::LocationType::Stack"
                                                          [];
                                                        M.rust_cast (M.read (| offset |))
                                                      ]
                                                  ]
                                              ]
                                            |)
                                          |)))
                                    ]
                                  |) in
                                M.alloc (| Value.Tuple [] |)))
                            |)))
                      ]
                    |)) in
                let _ :=
                  M.use
                    (M.match_operator (|
                      M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::iter::traits::collect::IntoIterator",
                            Ty.apply (Ty.path "core::ops::range::Range") [ Ty.path "usize" ],
                            [],
                            "into_iter",
                            []
                          |),
                          [
                            Value.StructRecord
                              "core::ops::range::Range"
                              [
                                ("start", Value.Integer 0);
                                ("end_",
                                  M.read (|
                                    M.get_constant (|
                                      "delphinus_zkwasm::circuits::utils::image_table::GLOBAL_CAPABILITY"
                                    |)
                                  |))
                              ]
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let iter := M.copy (| γ |) in
                            M.loop (|
                              ltac:(M.monadic
                                (let _ :=
                                  M.match_operator (|
                                    M.alloc (|
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "core::iter::traits::iterator::Iterator",
                                          Ty.apply
                                            (Ty.path "core::ops::range::Range")
                                            [ Ty.path "usize" ],
                                          [],
                                          "next",
                                          []
                                        |),
                                        [ iter ]
                                      |)
                                    |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (M.alloc (|
                                            M.never_to_any (| M.read (| M.break (||) |) |)
                                          |)));
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let γ0_0 :=
                                            M.SubPointer.get_struct_tuple_field (|
                                              γ,
                                              "core::option::Option::Some",
                                              0
                                            |) in
                                          let offset := M.copy (| γ0_0 |) in
                                          M.alloc (|
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "core::ops::function::FnMut",
                                                impl_FnMut__LocationType__u32__,
                                                [
                                                  Ty.tuple
                                                    [
                                                      Ty.tuple
                                                        [
                                                          Ty.path "specs::mtable::LocationType";
                                                          Ty.path "u32"
                                                        ]
                                                    ]
                                                ],
                                                "call_mut",
                                                []
                                              |),
                                              [
                                                f;
                                                Value.Tuple
                                                  [
                                                    Value.Tuple
                                                      [
                                                        Value.StructTuple
                                                          "specs::mtable::LocationType::Global"
                                                          [];
                                                        M.rust_cast (M.read (| offset |))
                                                      ]
                                                  ]
                                              ]
                                            |)
                                          |)))
                                    ]
                                  |) in
                                M.alloc (| Value.Tuple [] |)))
                            |)))
                      ]
                    |)) in
                M.use
                  (M.match_operator (|
                    M.alloc (|
                      M.call_closure (|
                        M.get_trait_method (|
                          "core::iter::traits::collect::IntoIterator",
                          Ty.apply (Ty.path "core::ops::range::Range") [ Ty.path "u32" ],
                          [],
                          "into_iter",
                          []
                        |),
                        [
                          Value.StructRecord
                            "core::ops::range::Range"
                            [
                              ("start", Value.Integer 0);
                              ("end_",
                                BinOp.Panic.mul (|
                                  Integer.U32,
                                  M.read (|
                                    M.SubPointer.get_struct_record_field (|
                                      self,
                                      "delphinus_zkwasm::circuits::utils::image_table::InitMemoryLayouter",
                                      "pages"
                                    |)
                                  |),
                                  M.read (|
                                    M.get_constant (|
                                      "delphinus_zkwasm::circuits::image_table::PAGE_ENTRIES"
                                    |)
                                  |)
                                |))
                            ]
                        ]
                      |)
                    |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let iter := M.copy (| γ |) in
                          M.loop (|
                            ltac:(M.monadic
                              (let _ :=
                                M.match_operator (|
                                  M.alloc (|
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::iter::traits::iterator::Iterator",
                                        Ty.apply
                                          (Ty.path "core::ops::range::Range")
                                          [ Ty.path "u32" ],
                                        [],
                                        "next",
                                        []
                                      |),
                                      [ iter ]
                                    |)
                                  |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (M.alloc (|
                                          M.never_to_any (| M.read (| M.break (||) |) |)
                                        |)));
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 :=
                                          M.SubPointer.get_struct_tuple_field (|
                                            γ,
                                            "core::option::Option::Some",
                                            0
                                          |) in
                                        let offset := M.copy (| γ0_0 |) in
                                        M.alloc (|
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "core::ops::function::FnMut",
                                              impl_FnMut__LocationType__u32__,
                                              [
                                                Ty.tuple
                                                  [
                                                    Ty.tuple
                                                      [
                                                        Ty.path "specs::mtable::LocationType";
                                                        Ty.path "u32"
                                                      ]
                                                  ]
                                              ],
                                              "call_mut",
                                              []
                                            |),
                                            [
                                              f;
                                              Value.Tuple
                                                [
                                                  Value.Tuple
                                                    [
                                                      Value.StructTuple
                                                        "specs::mtable::LocationType::Heap"
                                                        [];
                                                      M.read (| offset |)
                                                    ]
                                                ]
                                            ]
                                          |)
                                        |)))
                                  ]
                                |) in
                              M.alloc (| Value.Tuple [] |)))
                          |)))
                    ]
                  |))
              |)))
          | _, _ => M.impossible
          end.
        
        Axiom AssociatedFunction_for_each : M.IsAssociatedFunction Self "for_each" for_each.
      End Impl_delphinus_zkwasm_circuits_utils_image_table_InitMemoryLayouter.
      
      (*
      pub fn image_table_offset_to_memory_location(offset: usize) -> (LocationType, u32) {
          // Minus one for default lookup entry.
          let mut offset = offset - INIT_MEMORY_ENTRIES_OFFSET - 1;
      
          if offset < STACK_CAPABILITY {
              return (LocationType::Stack, offset as u32);
          }
      
          offset -= STACK_CAPABILITY;
      
          if offset < GLOBAL_CAPABILITY {
              return (LocationType::Global, offset as u32);
          }
      
          offset -= GLOBAL_CAPABILITY;
          return (LocationType::Heap, offset as u32);
      }
      *)
      Definition image_table_offset_to_memory_location (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ offset ] =>
          ltac:(M.monadic
            (let offset := M.alloc (| offset |) in
            M.catch_return (|
              ltac:(M.monadic
                (M.never_to_any (|
                  M.read (|
                    let offset :=
                      M.alloc (|
                        BinOp.Panic.sub (|
                          Integer.Usize,
                          BinOp.Panic.sub (|
                            Integer.Usize,
                            M.read (| offset |),
                            M.read (|
                              M.get_constant (|
                                "delphinus_zkwasm::circuits::utils::image_table::INIT_MEMORY_ENTRIES_OFFSET"
                              |)
                            |)
                          |),
                          Value.Integer 1
                        |)
                      |) in
                    let _ :=
                      M.match_operator (|
                        M.alloc (| Value.Tuple [] |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ :=
                                M.use
                                  (M.alloc (|
                                    BinOp.Pure.lt
                                      (M.read (| offset |))
                                      (M.read (|
                                        M.get_constant (|
                                          "delphinus_zkwasm::circuits::utils::image_table::STACK_CAPABILITY"
                                        |)
                                      |))
                                  |)) in
                              let _ :=
                                M.is_constant_or_break_match (|
                                  M.read (| γ |),
                                  Value.Bool true
                                |) in
                              M.alloc (|
                                M.never_to_any (|
                                  M.read (|
                                    M.return_ (|
                                      Value.Tuple
                                        [
                                          Value.StructTuple "specs::mtable::LocationType::Stack" [];
                                          M.rust_cast (M.read (| offset |))
                                        ]
                                    |)
                                  |)
                                |)
                              |)));
                          fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                        ]
                      |) in
                    let _ :=
                      let β := offset in
                      M.write (|
                        β,
                        BinOp.Panic.sub (|
                          Integer.Usize,
                          M.read (| β |),
                          M.read (|
                            M.get_constant (|
                              "delphinus_zkwasm::circuits::utils::image_table::STACK_CAPABILITY"
                            |)
                          |)
                        |)
                      |) in
                    let _ :=
                      M.match_operator (|
                        M.alloc (| Value.Tuple [] |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ :=
                                M.use
                                  (M.alloc (|
                                    BinOp.Pure.lt
                                      (M.read (| offset |))
                                      (M.read (|
                                        M.get_constant (|
                                          "delphinus_zkwasm::circuits::utils::image_table::GLOBAL_CAPABILITY"
                                        |)
                                      |))
                                  |)) in
                              let _ :=
                                M.is_constant_or_break_match (|
                                  M.read (| γ |),
                                  Value.Bool true
                                |) in
                              M.alloc (|
                                M.never_to_any (|
                                  M.read (|
                                    M.return_ (|
                                      Value.Tuple
                                        [
                                          Value.StructTuple
                                            "specs::mtable::LocationType::Global"
                                            [];
                                          M.rust_cast (M.read (| offset |))
                                        ]
                                    |)
                                  |)
                                |)
                              |)));
                          fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                        ]
                      |) in
                    let _ :=
                      let β := offset in
                      M.write (|
                        β,
                        BinOp.Panic.sub (|
                          Integer.Usize,
                          M.read (| β |),
                          M.read (|
                            M.get_constant (|
                              "delphinus_zkwasm::circuits::utils::image_table::GLOBAL_CAPABILITY"
                            |)
                          |)
                        |)
                      |) in
                    M.return_ (|
                      Value.Tuple
                        [
                          Value.StructTuple "specs::mtable::LocationType::Heap" [];
                          M.rust_cast (M.read (| offset |))
                        ]
                    |)
                  |)
                |)))
            |)))
        | _, _ => M.impossible
        end.
      
      (* StructRecord
        {
          name := "ImageTableLayouter";
          ty_params := [ "T" ];
          fields :=
            [
              ("initialization_state",
                Ty.apply (Ty.path "specs::state::InitializationState") [ T; T ]);
              ("static_frame_entries", Ty.apply (Ty.path "array") [ Ty.tuple [ T; T ] ]);
              ("instructions",
                Ty.apply (Ty.path "alloc::vec::Vec") [ T; Ty.path "alloc::alloc::Global" ]);
              ("br_table_entires",
                Ty.apply (Ty.path "alloc::vec::Vec") [ T; Ty.path "alloc::alloc::Global" ]);
              ("padding_entires",
                Ty.apply (Ty.path "alloc::vec::Vec") [ T; Ty.path "alloc::alloc::Global" ]);
              ("init_memory_entries",
                Ty.apply (Ty.path "alloc::vec::Vec") [ T; Ty.path "alloc::alloc::Global" ])
            ];
        } *)
      
      Module Impl_core_fmt_Debug_where_core_fmt_Debug_T_for_delphinus_zkwasm_circuits_utils_image_table_ImageTableLayouter_T.
        Definition Self (T : Ty.t) : Ty.t :=
          Ty.apply
            (Ty.path "delphinus_zkwasm::circuits::utils::image_table::ImageTableLayouter")
            [ T ].
        
        (* Debug *)
        Definition fmt (T : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self T in
          match τ, α with
          | [], [ self; f ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              let f := M.alloc (| f |) in
              M.read (|
                let names :=
                  M.alloc (|
                    M.alloc (|
                      Value.Array
                        [
                          M.read (| Value.String "initialization_state" |);
                          M.read (| Value.String "static_frame_entries" |);
                          M.read (| Value.String "instructions" |);
                          M.read (| Value.String "br_table_entires" |);
                          M.read (| Value.String "padding_entires" |);
                          M.read (| Value.String "init_memory_entries" |)
                        ]
                    |)
                  |) in
                let values :=
                  M.alloc (|
                    (* Unsize *)
                    M.pointer_coercion
                      (M.alloc (|
                        Value.Array
                          [
                            (* Unsize *)
                            M.pointer_coercion
                              (M.SubPointer.get_struct_record_field (|
                                M.read (| self |),
                                "delphinus_zkwasm::circuits::utils::image_table::ImageTableLayouter",
                                "initialization_state"
                              |));
                            (* Unsize *)
                            M.pointer_coercion
                              (M.SubPointer.get_struct_record_field (|
                                M.read (| self |),
                                "delphinus_zkwasm::circuits::utils::image_table::ImageTableLayouter",
                                "static_frame_entries"
                              |));
                            (* Unsize *)
                            M.pointer_coercion
                              (M.SubPointer.get_struct_record_field (|
                                M.read (| self |),
                                "delphinus_zkwasm::circuits::utils::image_table::ImageTableLayouter",
                                "instructions"
                              |));
                            (* Unsize *)
                            M.pointer_coercion
                              (M.SubPointer.get_struct_record_field (|
                                M.read (| self |),
                                "delphinus_zkwasm::circuits::utils::image_table::ImageTableLayouter",
                                "br_table_entires"
                              |));
                            (* Unsize *)
                            M.pointer_coercion
                              (M.SubPointer.get_struct_record_field (|
                                M.read (| self |),
                                "delphinus_zkwasm::circuits::utils::image_table::ImageTableLayouter",
                                "padding_entires"
                              |));
                            (* Unsize *)
                            M.pointer_coercion
                              (M.alloc (|
                                M.SubPointer.get_struct_record_field (|
                                  M.read (| self |),
                                  "delphinus_zkwasm::circuits::utils::image_table::ImageTableLayouter",
                                  "init_memory_entries"
                                |)
                              |))
                          ]
                      |))
                  |) in
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.path "core::fmt::Formatter",
                      "debug_struct_fields_finish",
                      []
                    |),
                    [
                      M.read (| f |);
                      M.read (| Value.String "ImageTableLayouter" |);
                      (* Unsize *) M.pointer_coercion (M.read (| names |));
                      M.read (| values |)
                    ]
                  |)
                |)
              |)))
          | _, _ => M.impossible
          end.
        
        Axiom Implements :
          forall (T : Ty.t),
          M.IsTraitInstance
            "core::fmt::Debug"
            (Self T)
            (* Trait polymorphic types *) []
            (* Instance *) [ ("fmt", InstanceField.Method (fmt T)) ].
      End Impl_core_fmt_Debug_where_core_fmt_Debug_T_for_delphinus_zkwasm_circuits_utils_image_table_ImageTableLayouter_T.
      
      (* StructRecord
        {
          name := "ImageTableAssigner";
          ty_params := [];
          fields :=
            [
              ("heap_capability", Ty.path "u32");
              ("initialization_state_offset", Ty.path "usize");
              ("static_frame_entries_offset", Ty.path "usize");
              ("instruction_offset", Ty.path "usize");
              ("br_table_offset", Ty.path "usize");
              ("padding_offset", Ty.path "usize");
              ("init_memory_offset", Ty.path "usize")
            ];
        } *)
      
      Module Impl_core_clone_Clone_for_delphinus_zkwasm_circuits_utils_image_table_ImageTableAssigner.
        Definition Self : Ty.t :=
          Ty.path "delphinus_zkwasm::circuits::utils::image_table::ImageTableAssigner".
        
        (* Clone *)
        Definition clone (τ : list Ty.t) (α : list Value.t) : M :=
          match τ, α with
          | [], [ self ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              M.read (|
                M.match_operator (|
                  Value.DeclaredButUndefined,
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (M.match_operator (|
                          Value.DeclaredButUndefined,
                          [ fun γ => ltac:(M.monadic (M.read (| self |))) ]
                        |)))
                  ]
                |)
              |)))
          | _, _ => M.impossible
          end.
        
        Axiom Implements :
          M.IsTraitInstance
            "core::clone::Clone"
            Self
            (* Trait polymorphic types *) []
            (* Instance *) [ ("clone", InstanceField.Method clone) ].
      End Impl_core_clone_Clone_for_delphinus_zkwasm_circuits_utils_image_table_ImageTableAssigner.
      
      Module Impl_core_marker_Copy_for_delphinus_zkwasm_circuits_utils_image_table_ImageTableAssigner.
        Definition Self : Ty.t :=
          Ty.path "delphinus_zkwasm::circuits::utils::image_table::ImageTableAssigner".
        
        Axiom Implements :
          M.IsTraitInstance
            "core::marker::Copy"
            Self
            (* Trait polymorphic types *) []
            (* Instance *) [].
      End Impl_core_marker_Copy_for_delphinus_zkwasm_circuits_utils_image_table_ImageTableAssigner.
      
      Module Impl_delphinus_zkwasm_circuits_utils_image_table_ImageTableAssigner.
        Definition Self : Ty.t :=
          Ty.path "delphinus_zkwasm::circuits::utils::image_table::ImageTableAssigner".
        
        (*
            pub fn new(instruction_number: usize, br_table_number: usize, pages_capability: u32) -> Self {
                let initialization_state_offset = 0;
                let static_frame_entries_offset =
                    initialization_state_offset + InitializationState::<u32, BigUint>::field_count();
                let instruction_offset = static_frame_entries_offset + STATIC_FRAME_ENTRY_IMAGE_TABLE_ENTRY;
                let br_table_offset = instruction_offset + instruction_number;
                let padding_offset = br_table_offset + br_table_number;
                let init_memory_offset = INIT_MEMORY_ENTRIES_OFFSET;
        
                assert!(
                    padding_offset <= init_memory_offset,
                    "The number of instructions of the image({}) is too large",
                    instruction_number + br_table_number
                );
        
                Self {
                    heap_capability: pages_capability * PAGE_ENTRIES,
        
                    initialization_state_offset,
                    static_frame_entries_offset,
                    instruction_offset,
                    br_table_offset,
                    padding_offset,
                    init_memory_offset,
                }
            }
        *)
        Definition new (τ : list Ty.t) (α : list Value.t) : M :=
          match τ, α with
          | [], [ instruction_number; br_table_number; pages_capability ] =>
            ltac:(M.monadic
              (let instruction_number := M.alloc (| instruction_number |) in
              let br_table_number := M.alloc (| br_table_number |) in
              let pages_capability := M.alloc (| pages_capability |) in
              M.read (|
                let initialization_state_offset := M.alloc (| Value.Integer 0 |) in
                let static_frame_entries_offset :=
                  M.alloc (|
                    BinOp.Panic.add (|
                      Integer.Usize,
                      M.read (| initialization_state_offset |),
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.apply
                            (Ty.path "specs::state::InitializationState")
                            [ Ty.path "u32"; Ty.path "num_bigint::biguint::BigUint" ],
                          "field_count",
                          []
                        |),
                        []
                      |)
                    |)
                  |) in
                let instruction_offset :=
                  M.alloc (|
                    BinOp.Panic.add (|
                      Integer.Usize,
                      M.read (| static_frame_entries_offset |),
                      M.read (|
                        M.get_constant (|
                          "delphinus_zkwasm::circuits::jtable::STATIC_FRAME_ENTRY_IMAGE_TABLE_ENTRY"
                        |)
                      |)
                    |)
                  |) in
                let br_table_offset :=
                  M.alloc (|
                    BinOp.Panic.add (|
                      Integer.Usize,
                      M.read (| instruction_offset |),
                      M.read (| instruction_number |)
                    |)
                  |) in
                let padding_offset :=
                  M.alloc (|
                    BinOp.Panic.add (|
                      Integer.Usize,
                      M.read (| br_table_offset |),
                      M.read (| br_table_number |)
                    |)
                  |) in
                let init_memory_offset :=
                  M.copy (|
                    M.get_constant (|
                      "delphinus_zkwasm::circuits::utils::image_table::INIT_MEMORY_ENTRIES_OFFSET"
                    |)
                  |) in
                let _ :=
                  M.match_operator (|
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                UnOp.Pure.not
                                  (BinOp.Pure.le
                                    (M.read (| padding_offset |))
                                    (M.read (| init_memory_offset |)))
                              |)) in
                          let _ :=
                            M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.call_closure (|
                                M.get_function (| "core::panicking::panic_fmt", [] |),
                                [
                                  M.call_closure (|
                                    M.get_associated_function (|
                                      Ty.path "core::fmt::Arguments",
                                      "new_v1",
                                      []
                                    |),
                                    [
                                      (* Unsize *)
                                      M.pointer_coercion
                                        (M.alloc (|
                                          Value.Array
                                            [
                                              M.read (|
                                                Value.String
                                                  "The number of instructions of the image("
                                              |);
                                              M.read (| Value.String ") is too large" |)
                                            ]
                                        |));
                                      (* Unsize *)
                                      M.pointer_coercion
                                        (M.alloc (|
                                          Value.Array
                                            [
                                              M.call_closure (|
                                                M.get_associated_function (|
                                                  Ty.path "core::fmt::rt::Argument",
                                                  "new_display",
                                                  [ Ty.path "usize" ]
                                                |),
                                                [
                                                  M.alloc (|
                                                    BinOp.Panic.add (|
                                                      Integer.Usize,
                                                      M.read (| instruction_number |),
                                                      M.read (| br_table_number |)
                                                    |)
                                                  |)
                                                ]
                                              |)
                                            ]
                                        |))
                                    ]
                                  |)
                                ]
                              |)
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                M.alloc (|
                  Value.StructRecord
                    "delphinus_zkwasm::circuits::utils::image_table::ImageTableAssigner"
                    [
                      ("heap_capability",
                        BinOp.Panic.mul (|
                          Integer.U32,
                          M.read (| pages_capability |),
                          M.read (|
                            M.get_constant (|
                              "delphinus_zkwasm::circuits::image_table::PAGE_ENTRIES"
                            |)
                          |)
                        |));
                      ("initialization_state_offset", M.read (| initialization_state_offset |));
                      ("static_frame_entries_offset", M.read (| static_frame_entries_offset |));
                      ("instruction_offset", M.read (| instruction_offset |));
                      ("br_table_offset", M.read (| br_table_offset |));
                      ("padding_offset", M.read (| padding_offset |));
                      ("init_memory_offset", M.read (| init_memory_offset |))
                    ]
                |)
              |)))
          | _, _ => M.impossible
          end.
        
        Axiom AssociatedFunction_new : M.IsAssociatedFunction Self "new" new.
        
        (*
            pub fn exec_initialization_state<T, Error>(
                &self,
                mut initialization_state_handler: impl FnMut(usize) -> Result<InitializationState<T, T>, Error>,
            ) -> Result<InitializationState<T, T>, Error> {
                initialization_state_handler(self.initialization_state_offset)
            }
        *)
        Definition exec_initialization_state (τ : list Ty.t) (α : list Value.t) : M :=
          match τ, α with
          | [ T; Error; impl_FnMut_usize__arrow_Result_InitializationState_T__T___Error_ ],
              [ self; initialization_state_handler ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              let initialization_state_handler := M.alloc (| initialization_state_handler |) in
              M.call_closure (|
                M.get_trait_method (|
                  "core::ops::function::FnMut",
                  impl_FnMut_usize__arrow_Result_InitializationState_T__T___Error_,
                  [ Ty.tuple [ Ty.path "usize" ] ],
                  "call_mut",
                  []
                |),
                [
                  initialization_state_handler;
                  Value.Tuple
                    [
                      M.read (|
                        M.SubPointer.get_struct_record_field (|
                          M.read (| self |),
                          "delphinus_zkwasm::circuits::utils::image_table::ImageTableAssigner",
                          "initialization_state_offset"
                        |)
                      |)
                    ]
                ]
              |)))
          | _, _ => M.impossible
          end.
        
        Axiom AssociatedFunction_exec_initialization_state :
          M.IsAssociatedFunction Self "exec_initialization_state" exec_initialization_state.
        
        (*
            pub fn exec_static_frame_entries<T, Error>(
                &self,
                mut static_frame_entries_handler: impl FnMut(
                    usize,
                ) -> Result<
                    [(T, T); STATIC_FRAME_ENTRY_NUMBER],
                    Error,
                >,
            ) -> Result<[(T, T); STATIC_FRAME_ENTRY_NUMBER], Error> {
                static_frame_entries_handler(self.static_frame_entries_offset)
            }
        *)
        Definition exec_static_frame_entries (τ : list Ty.t) (α : list Value.t) : M :=
          match τ, α with
          | [ T; Error; impl_FnMut_usize__arrow_Result___T__T___STATIC_FRAME_ENTRY_NUMBER___Error_
              ],
              [ self; static_frame_entries_handler ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              let static_frame_entries_handler := M.alloc (| static_frame_entries_handler |) in
              M.call_closure (|
                M.get_trait_method (|
                  "core::ops::function::FnMut",
                  impl_FnMut_usize__arrow_Result___T__T___STATIC_FRAME_ENTRY_NUMBER___Error_,
                  [ Ty.tuple [ Ty.path "usize" ] ],
                  "call_mut",
                  []
                |),
                [
                  static_frame_entries_handler;
                  Value.Tuple
                    [
                      M.read (|
                        M.SubPointer.get_struct_record_field (|
                          M.read (| self |),
                          "delphinus_zkwasm::circuits::utils::image_table::ImageTableAssigner",
                          "static_frame_entries_offset"
                        |)
                      |)
                    ]
                ]
              |)))
          | _, _ => M.impossible
          end.
        
        Axiom AssociatedFunction_exec_static_frame_entries :
          M.IsAssociatedFunction Self "exec_static_frame_entries" exec_static_frame_entries.
        
        (*
            pub fn exec_instruction<T, Error>(
                &self,
                mut instruction_handler: impl FnMut(usize) -> Result<Vec<T>, Error>,
            ) -> Result<Vec<T>, Error> {
                instruction_handler(self.instruction_offset)
            }
        *)
        Definition exec_instruction (τ : list Ty.t) (α : list Value.t) : M :=
          match τ, α with
          | [ T; Error; impl_FnMut_usize__arrow_Result_Vec_T___Error_ ],
              [ self; instruction_handler ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              let instruction_handler := M.alloc (| instruction_handler |) in
              M.call_closure (|
                M.get_trait_method (|
                  "core::ops::function::FnMut",
                  impl_FnMut_usize__arrow_Result_Vec_T___Error_,
                  [ Ty.tuple [ Ty.path "usize" ] ],
                  "call_mut",
                  []
                |),
                [
                  instruction_handler;
                  Value.Tuple
                    [
                      M.read (|
                        M.SubPointer.get_struct_record_field (|
                          M.read (| self |),
                          "delphinus_zkwasm::circuits::utils::image_table::ImageTableAssigner",
                          "instruction_offset"
                        |)
                      |)
                    ]
                ]
              |)))
          | _, _ => M.impossible
          end.
        
        Axiom AssociatedFunction_exec_instruction :
          M.IsAssociatedFunction Self "exec_instruction" exec_instruction.
        
        (*
            pub fn exec_br_table_entires<T, Error>(
                &self,
                mut br_table_handler: impl FnMut(usize) -> Result<Vec<T>, Error>,
            ) -> Result<Vec<T>, Error> {
                br_table_handler(self.br_table_offset)
            }
        *)
        Definition exec_br_table_entires (τ : list Ty.t) (α : list Value.t) : M :=
          match τ, α with
          | [ T; Error; impl_FnMut_usize__arrow_Result_Vec_T___Error_ ],
              [ self; br_table_handler ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              let br_table_handler := M.alloc (| br_table_handler |) in
              M.call_closure (|
                M.get_trait_method (|
                  "core::ops::function::FnMut",
                  impl_FnMut_usize__arrow_Result_Vec_T___Error_,
                  [ Ty.tuple [ Ty.path "usize" ] ],
                  "call_mut",
                  []
                |),
                [
                  br_table_handler;
                  Value.Tuple
                    [
                      M.read (|
                        M.SubPointer.get_struct_record_field (|
                          M.read (| self |),
                          "delphinus_zkwasm::circuits::utils::image_table::ImageTableAssigner",
                          "br_table_offset"
                        |)
                      |)
                    ]
                ]
              |)))
          | _, _ => M.impossible
          end.
        
        Axiom AssociatedFunction_exec_br_table_entires :
          M.IsAssociatedFunction Self "exec_br_table_entires" exec_br_table_entires.
        
        (*
            pub fn exec_padding_entires<T, Error>(
                &self,
                mut padding_handler: impl FnMut(usize, usize) -> Result<Vec<T>, Error>,
            ) -> Result<Vec<T>, Error> {
                padding_handler(self.padding_offset, self.init_memory_offset)
            }
        *)
        Definition exec_padding_entires (τ : list Ty.t) (α : list Value.t) : M :=
          match τ, α with
          | [ T; Error; impl_FnMut_usize__usize__arrow_Result_Vec_T___Error_ ],
              [ self; padding_handler ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              let padding_handler := M.alloc (| padding_handler |) in
              M.call_closure (|
                M.get_trait_method (|
                  "core::ops::function::FnMut",
                  impl_FnMut_usize__usize__arrow_Result_Vec_T___Error_,
                  [ Ty.tuple [ Ty.path "usize"; Ty.path "usize" ] ],
                  "call_mut",
                  []
                |),
                [
                  padding_handler;
                  Value.Tuple
                    [
                      M.read (|
                        M.SubPointer.get_struct_record_field (|
                          M.read (| self |),
                          "delphinus_zkwasm::circuits::utils::image_table::ImageTableAssigner",
                          "padding_offset"
                        |)
                      |);
                      M.read (|
                        M.SubPointer.get_struct_record_field (|
                          M.read (| self |),
                          "delphinus_zkwasm::circuits::utils::image_table::ImageTableAssigner",
                          "init_memory_offset"
                        |)
                      |)
                    ]
                ]
              |)))
          | _, _ => M.impossible
          end.
        
        Axiom AssociatedFunction_exec_padding_entires :
          M.IsAssociatedFunction Self "exec_padding_entires" exec_padding_entires.
        
        (*
            pub fn exec_init_memory_entries<T, Error>(
                &self,
                mut init_memory_entries_handler: impl FnMut(usize) -> Result<Vec<T>, Error>,
            ) -> Result<Vec<T>, Error> {
                init_memory_entries_handler(self.init_memory_offset)
            }
        *)
        Definition exec_init_memory_entries (τ : list Ty.t) (α : list Value.t) : M :=
          match τ, α with
          | [ T; Error; impl_FnMut_usize__arrow_Result_Vec_T___Error_ ],
              [ self; init_memory_entries_handler ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              let init_memory_entries_handler := M.alloc (| init_memory_entries_handler |) in
              M.call_closure (|
                M.get_trait_method (|
                  "core::ops::function::FnMut",
                  impl_FnMut_usize__arrow_Result_Vec_T___Error_,
                  [ Ty.tuple [ Ty.path "usize" ] ],
                  "call_mut",
                  []
                |),
                [
                  init_memory_entries_handler;
                  Value.Tuple
                    [
                      M.read (|
                        M.SubPointer.get_struct_record_field (|
                          M.read (| self |),
                          "delphinus_zkwasm::circuits::utils::image_table::ImageTableAssigner",
                          "init_memory_offset"
                        |)
                      |)
                    ]
                ]
              |)))
          | _, _ => M.impossible
          end.
        
        Axiom AssociatedFunction_exec_init_memory_entries :
          M.IsAssociatedFunction Self "exec_init_memory_entries" exec_init_memory_entries.
        
        (*
            pub fn exec<T, Error>(
                &self,
                initialization_state_handler: impl FnMut(usize) -> Result<InitializationState<T, T>, Error>,
                static_frame_entries_handler: impl FnMut(
                    usize,
                )
                    -> Result<[(T, T); STATIC_FRAME_ENTRY_NUMBER], Error>,
                instruction_handler: impl FnMut(usize) -> Result<Vec<T>, Error>,
                br_table_handler: impl FnMut(usize) -> Result<Vec<T>, Error>,
                padding_handler: impl FnMut(usize, usize) -> Result<Vec<T>, Error>,
                init_memory_entries_handler: impl FnMut(usize) -> Result<Vec<T>, Error>,
            ) -> Result<ImageTableLayouter<T>, Error> {
                let initialization_state = self.exec_initialization_state(initialization_state_handler)?;
                let static_frame_entries = self.exec_static_frame_entries(static_frame_entries_handler)?;
                let instructions = self.exec_instruction(instruction_handler)?;
                let br_table_entires = self.exec_br_table_entires(br_table_handler)?;
                let padding_entires = self.exec_padding_entires(padding_handler)?;
                let init_memory_entries = self.exec_init_memory_entries(init_memory_entries_handler)?;
        
                Ok(ImageTableLayouter {
                    initialization_state,
                    static_frame_entries,
                    instructions,
                    br_table_entires,
                    padding_entires,
                    init_memory_entries,
                })
            }
        *)
        Definition exec (τ : list Ty.t) (α : list Value.t) : M :=
          match τ, α with
          | [
                T;
                Error;
                impl_FnMut_usize__arrow_Result_InitializationState_T__T___Error_;
                impl_FnMut_usize__arrow_Result___T__T___STATIC_FRAME_ENTRY_NUMBER___Error_;
                impl_FnMut_usize__arrow_Result_Vec_T___Error_;
                impl_FnMut_usize__arrow_Result_Vec_T___Error_'1;
                impl_FnMut_usize__usize__arrow_Result_Vec_T___Error_;
                impl_FnMut_usize__arrow_Result_Vec_T___Error_'2
              ],
              [
                self;
                initialization_state_handler;
                static_frame_entries_handler;
                instruction_handler;
                br_table_handler;
                padding_handler;
                init_memory_entries_handler
              ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              let initialization_state_handler := M.alloc (| initialization_state_handler |) in
              let static_frame_entries_handler := M.alloc (| static_frame_entries_handler |) in
              let instruction_handler := M.alloc (| instruction_handler |) in
              let br_table_handler := M.alloc (| br_table_handler |) in
              let padding_handler := M.alloc (| padding_handler |) in
              let init_memory_entries_handler := M.alloc (| init_memory_entries_handler |) in
              M.catch_return (|
                ltac:(M.monadic
                  (M.read (|
                    let initialization_state :=
                      M.copy (|
                        M.match_operator (|
                          M.alloc (|
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::ops::try_trait::Try",
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  [
                                    Ty.apply (Ty.path "specs::state::InitializationState") [ T; T ];
                                    Error
                                  ],
                                [],
                                "branch",
                                []
                              |),
                              [
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.path
                                      "delphinus_zkwasm::circuits::utils::image_table::ImageTableAssigner",
                                    "exec_initialization_state",
                                    [
                                      T;
                                      Error;
                                      impl_FnMut_usize__arrow_Result_InitializationState_T__T___Error_
                                    ]
                                  |),
                                  [ M.read (| self |); M.read (| initialization_state_handler |) ]
                                |)
                              ]
                            |)
                          |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ0_0 :=
                                  M.SubPointer.get_struct_tuple_field (|
                                    γ,
                                    "core::ops::control_flow::ControlFlow::Break",
                                    0
                                  |) in
                                let residual := M.copy (| γ0_0 |) in
                                M.alloc (|
                                  M.never_to_any (|
                                    M.read (|
                                      M.return_ (|
                                        M.call_closure (|
                                          M.get_trait_method (|
                                            "core::ops::try_trait::FromResidual",
                                            Ty.apply
                                              (Ty.path "core::result::Result")
                                              [
                                                Ty.apply
                                                  (Ty.path
                                                    "delphinus_zkwasm::circuits::utils::image_table::ImageTableLayouter")
                                                  [ T ];
                                                Error
                                              ],
                                            [
                                              Ty.apply
                                                (Ty.path "core::result::Result")
                                                [ Ty.path "core::convert::Infallible"; Error ]
                                            ],
                                            "from_residual",
                                            []
                                          |),
                                          [ M.read (| residual |) ]
                                        |)
                                      |)
                                    |)
                                  |)
                                |)));
                            fun γ =>
                              ltac:(M.monadic
                                (let γ0_0 :=
                                  M.SubPointer.get_struct_tuple_field (|
                                    γ,
                                    "core::ops::control_flow::ControlFlow::Continue",
                                    0
                                  |) in
                                let val := M.copy (| γ0_0 |) in
                                val))
                          ]
                        |)
                      |) in
                    let static_frame_entries :=
                      M.copy (|
                        M.match_operator (|
                          M.alloc (|
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::ops::try_trait::Try",
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  [ Ty.apply (Ty.path "array") [ Ty.tuple [ T; T ] ]; Error ],
                                [],
                                "branch",
                                []
                              |),
                              [
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.path
                                      "delphinus_zkwasm::circuits::utils::image_table::ImageTableAssigner",
                                    "exec_static_frame_entries",
                                    [
                                      T;
                                      Error;
                                      impl_FnMut_usize__arrow_Result___T__T___STATIC_FRAME_ENTRY_NUMBER___Error_
                                    ]
                                  |),
                                  [ M.read (| self |); M.read (| static_frame_entries_handler |) ]
                                |)
                              ]
                            |)
                          |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ0_0 :=
                                  M.SubPointer.get_struct_tuple_field (|
                                    γ,
                                    "core::ops::control_flow::ControlFlow::Break",
                                    0
                                  |) in
                                let residual := M.copy (| γ0_0 |) in
                                M.alloc (|
                                  M.never_to_any (|
                                    M.read (|
                                      M.return_ (|
                                        M.call_closure (|
                                          M.get_trait_method (|
                                            "core::ops::try_trait::FromResidual",
                                            Ty.apply
                                              (Ty.path "core::result::Result")
                                              [
                                                Ty.apply
                                                  (Ty.path
                                                    "delphinus_zkwasm::circuits::utils::image_table::ImageTableLayouter")
                                                  [ T ];
                                                Error
                                              ],
                                            [
                                              Ty.apply
                                                (Ty.path "core::result::Result")
                                                [ Ty.path "core::convert::Infallible"; Error ]
                                            ],
                                            "from_residual",
                                            []
                                          |),
                                          [ M.read (| residual |) ]
                                        |)
                                      |)
                                    |)
                                  |)
                                |)));
                            fun γ =>
                              ltac:(M.monadic
                                (let γ0_0 :=
                                  M.SubPointer.get_struct_tuple_field (|
                                    γ,
                                    "core::ops::control_flow::ControlFlow::Continue",
                                    0
                                  |) in
                                let val := M.copy (| γ0_0 |) in
                                val))
                          ]
                        |)
                      |) in
                    let instructions :=
                      M.copy (|
                        M.match_operator (|
                          M.alloc (|
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::ops::try_trait::Try",
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  [
                                    Ty.apply
                                      (Ty.path "alloc::vec::Vec")
                                      [ T; Ty.path "alloc::alloc::Global" ];
                                    Error
                                  ],
                                [],
                                "branch",
                                []
                              |),
                              [
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.path
                                      "delphinus_zkwasm::circuits::utils::image_table::ImageTableAssigner",
                                    "exec_instruction",
                                    [ T; Error; impl_FnMut_usize__arrow_Result_Vec_T___Error_ ]
                                  |),
                                  [ M.read (| self |); M.read (| instruction_handler |) ]
                                |)
                              ]
                            |)
                          |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ0_0 :=
                                  M.SubPointer.get_struct_tuple_field (|
                                    γ,
                                    "core::ops::control_flow::ControlFlow::Break",
                                    0
                                  |) in
                                let residual := M.copy (| γ0_0 |) in
                                M.alloc (|
                                  M.never_to_any (|
                                    M.read (|
                                      M.return_ (|
                                        M.call_closure (|
                                          M.get_trait_method (|
                                            "core::ops::try_trait::FromResidual",
                                            Ty.apply
                                              (Ty.path "core::result::Result")
                                              [
                                                Ty.apply
                                                  (Ty.path
                                                    "delphinus_zkwasm::circuits::utils::image_table::ImageTableLayouter")
                                                  [ T ];
                                                Error
                                              ],
                                            [
                                              Ty.apply
                                                (Ty.path "core::result::Result")
                                                [ Ty.path "core::convert::Infallible"; Error ]
                                            ],
                                            "from_residual",
                                            []
                                          |),
                                          [ M.read (| residual |) ]
                                        |)
                                      |)
                                    |)
                                  |)
                                |)));
                            fun γ =>
                              ltac:(M.monadic
                                (let γ0_0 :=
                                  M.SubPointer.get_struct_tuple_field (|
                                    γ,
                                    "core::ops::control_flow::ControlFlow::Continue",
                                    0
                                  |) in
                                let val := M.copy (| γ0_0 |) in
                                val))
                          ]
                        |)
                      |) in
                    let br_table_entires :=
                      M.copy (|
                        M.match_operator (|
                          M.alloc (|
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::ops::try_trait::Try",
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  [
                                    Ty.apply
                                      (Ty.path "alloc::vec::Vec")
                                      [ T; Ty.path "alloc::alloc::Global" ];
                                    Error
                                  ],
                                [],
                                "branch",
                                []
                              |),
                              [
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.path
                                      "delphinus_zkwasm::circuits::utils::image_table::ImageTableAssigner",
                                    "exec_br_table_entires",
                                    [ T; Error; impl_FnMut_usize__arrow_Result_Vec_T___Error_'1 ]
                                  |),
                                  [ M.read (| self |); M.read (| br_table_handler |) ]
                                |)
                              ]
                            |)
                          |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ0_0 :=
                                  M.SubPointer.get_struct_tuple_field (|
                                    γ,
                                    "core::ops::control_flow::ControlFlow::Break",
                                    0
                                  |) in
                                let residual := M.copy (| γ0_0 |) in
                                M.alloc (|
                                  M.never_to_any (|
                                    M.read (|
                                      M.return_ (|
                                        M.call_closure (|
                                          M.get_trait_method (|
                                            "core::ops::try_trait::FromResidual",
                                            Ty.apply
                                              (Ty.path "core::result::Result")
                                              [
                                                Ty.apply
                                                  (Ty.path
                                                    "delphinus_zkwasm::circuits::utils::image_table::ImageTableLayouter")
                                                  [ T ];
                                                Error
                                              ],
                                            [
                                              Ty.apply
                                                (Ty.path "core::result::Result")
                                                [ Ty.path "core::convert::Infallible"; Error ]
                                            ],
                                            "from_residual",
                                            []
                                          |),
                                          [ M.read (| residual |) ]
                                        |)
                                      |)
                                    |)
                                  |)
                                |)));
                            fun γ =>
                              ltac:(M.monadic
                                (let γ0_0 :=
                                  M.SubPointer.get_struct_tuple_field (|
                                    γ,
                                    "core::ops::control_flow::ControlFlow::Continue",
                                    0
                                  |) in
                                let val := M.copy (| γ0_0 |) in
                                val))
                          ]
                        |)
                      |) in
                    let padding_entires :=
                      M.copy (|
                        M.match_operator (|
                          M.alloc (|
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::ops::try_trait::Try",
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  [
                                    Ty.apply
                                      (Ty.path "alloc::vec::Vec")
                                      [ T; Ty.path "alloc::alloc::Global" ];
                                    Error
                                  ],
                                [],
                                "branch",
                                []
                              |),
                              [
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.path
                                      "delphinus_zkwasm::circuits::utils::image_table::ImageTableAssigner",
                                    "exec_padding_entires",
                                    [ T; Error; impl_FnMut_usize__usize__arrow_Result_Vec_T___Error_
                                    ]
                                  |),
                                  [ M.read (| self |); M.read (| padding_handler |) ]
                                |)
                              ]
                            |)
                          |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ0_0 :=
                                  M.SubPointer.get_struct_tuple_field (|
                                    γ,
                                    "core::ops::control_flow::ControlFlow::Break",
                                    0
                                  |) in
                                let residual := M.copy (| γ0_0 |) in
                                M.alloc (|
                                  M.never_to_any (|
                                    M.read (|
                                      M.return_ (|
                                        M.call_closure (|
                                          M.get_trait_method (|
                                            "core::ops::try_trait::FromResidual",
                                            Ty.apply
                                              (Ty.path "core::result::Result")
                                              [
                                                Ty.apply
                                                  (Ty.path
                                                    "delphinus_zkwasm::circuits::utils::image_table::ImageTableLayouter")
                                                  [ T ];
                                                Error
                                              ],
                                            [
                                              Ty.apply
                                                (Ty.path "core::result::Result")
                                                [ Ty.path "core::convert::Infallible"; Error ]
                                            ],
                                            "from_residual",
                                            []
                                          |),
                                          [ M.read (| residual |) ]
                                        |)
                                      |)
                                    |)
                                  |)
                                |)));
                            fun γ =>
                              ltac:(M.monadic
                                (let γ0_0 :=
                                  M.SubPointer.get_struct_tuple_field (|
                                    γ,
                                    "core::ops::control_flow::ControlFlow::Continue",
                                    0
                                  |) in
                                let val := M.copy (| γ0_0 |) in
                                val))
                          ]
                        |)
                      |) in
                    let init_memory_entries :=
                      M.copy (|
                        M.match_operator (|
                          M.alloc (|
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::ops::try_trait::Try",
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  [
                                    Ty.apply
                                      (Ty.path "alloc::vec::Vec")
                                      [ T; Ty.path "alloc::alloc::Global" ];
                                    Error
                                  ],
                                [],
                                "branch",
                                []
                              |),
                              [
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.path
                                      "delphinus_zkwasm::circuits::utils::image_table::ImageTableAssigner",
                                    "exec_init_memory_entries",
                                    [ T; Error; impl_FnMut_usize__arrow_Result_Vec_T___Error_'2 ]
                                  |),
                                  [ M.read (| self |); M.read (| init_memory_entries_handler |) ]
                                |)
                              ]
                            |)
                          |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ0_0 :=
                                  M.SubPointer.get_struct_tuple_field (|
                                    γ,
                                    "core::ops::control_flow::ControlFlow::Break",
                                    0
                                  |) in
                                let residual := M.copy (| γ0_0 |) in
                                M.alloc (|
                                  M.never_to_any (|
                                    M.read (|
                                      M.return_ (|
                                        M.call_closure (|
                                          M.get_trait_method (|
                                            "core::ops::try_trait::FromResidual",
                                            Ty.apply
                                              (Ty.path "core::result::Result")
                                              [
                                                Ty.apply
                                                  (Ty.path
                                                    "delphinus_zkwasm::circuits::utils::image_table::ImageTableLayouter")
                                                  [ T ];
                                                Error
                                              ],
                                            [
                                              Ty.apply
                                                (Ty.path "core::result::Result")
                                                [ Ty.path "core::convert::Infallible"; Error ]
                                            ],
                                            "from_residual",
                                            []
                                          |),
                                          [ M.read (| residual |) ]
                                        |)
                                      |)
                                    |)
                                  |)
                                |)));
                            fun γ =>
                              ltac:(M.monadic
                                (let γ0_0 :=
                                  M.SubPointer.get_struct_tuple_field (|
                                    γ,
                                    "core::ops::control_flow::ControlFlow::Continue",
                                    0
                                  |) in
                                let val := M.copy (| γ0_0 |) in
                                val))
                          ]
                        |)
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [
                          Value.StructRecord
                            "delphinus_zkwasm::circuits::utils::image_table::ImageTableLayouter"
                            [
                              ("initialization_state", M.read (| initialization_state |));
                              ("static_frame_entries", M.read (| static_frame_entries |));
                              ("instructions", M.read (| instructions |));
                              ("br_table_entires", M.read (| br_table_entires |));
                              ("padding_entires", M.read (| padding_entires |));
                              ("init_memory_entries", M.read (| init_memory_entries |))
                            ]
                        ]
                    |)
                  |)))
              |)))
          | _, _ => M.impossible
          end.
        
        Axiom AssociatedFunction_exec : M.IsAssociatedFunction Self "exec" exec.
      End Impl_delphinus_zkwasm_circuits_utils_image_table_ImageTableAssigner.
      
      (*
      pub(crate) fn encode_compilation_table_values<F: FieldExt>(
          k: u32,
          itable: &InstructionTable,
          br_table: &BrTable,
          elem_table: &ElemTable,
          static_frame_entries: &[StaticFrameEntry; STATIC_FRAME_ENTRY_NUMBER],
          initialization_state: &InitializationState<u32, BigUint>,
          init_memory_table: &InitMemoryTable,
      ) -> ImageTableLayouter<F> {
          let page_capability = compute_maximal_pages(k);
      
          let initialization_state_handler =
              |_| Ok(initialization_state.map(|v| F::from(( *v) as u64), |v| bn_to_field(v)));
      
          let static_frame_entries_handler = |_| {
              let mut cells = vec![];
      
              for entry in static_frame_entries.as_ref() {
                  cells.push((F::from(entry.enable as u64), bn_to_field(&entry.encode())));
              }
      
              Ok(cells.try_into().expect(&format!(
                  "The number of static frame entries should be {}",
                  STATIC_FRAME_ENTRY_NUMBER
              )))
          };
      
          let instruction_handler = |_| {
              let mut cells = vec![];
      
              cells.push(bn_to_field(
                  &ImageTableEncoder::Instruction.encode(BigUint::from(0u64)),
              ));
      
              for e in itable.iter() {
                  cells.push(bn_to_field(
                      &ImageTableEncoder::Instruction.encode(e.encode.clone()),
                  ));
              }
      
              Ok(cells)
          };
      
          let br_table_handler = |_| {
              let mut cells = vec![];
      
              cells.push(bn_to_field(
                  &ImageTableEncoder::BrTable.encode(BigUint::from(0u64)),
              ));
      
              for e in br_table.entries() {
                  cells.push(bn_to_field(&ImageTableEncoder::BrTable.encode(e.encode())));
              }
      
              for e in elem_table.entries() {
                  cells.push(bn_to_field(&ImageTableEncoder::BrTable.encode(e.encode())));
              }
      
              Ok(cells)
          };
      
          let padding_handler = |start, end| Ok(vec![F::zero(); end - start]);
      
          let init_memory_entries_handler = |_| {
              let mut cells = vec![];
      
              cells.push(bn_to_field(
                  &ImageTableEncoder::InitMemory.encode(BigUint::from(0u64)),
              ));
      
              let layouter = InitMemoryLayouter {
                  pages: page_capability,
              };
      
              layouter.for_each(|(ltype, offset)| {
                  if let Some(entry) = init_memory_table.try_find(ltype, offset) {
                      cells.push(bn_to_field::<F>(
                          &ImageTableEncoder::InitMemory.encode(entry.encode()),
                      ));
                  } else if ltype == LocationType::Heap {
                      let entry = InitMemoryTableEntry {
                          ltype,
                          is_mutable: true,
                          offset,
                          vtype: VarType::I64,
                          value: 0,
                          eid: 0,
                      };
      
                      cells.push(bn_to_field::<F>(
                          &ImageTableEncoder::InitMemory.encode(entry.encode()),
                      ));
                  } else {
                      cells.push(bn_to_field::<F>(
                          &ImageTableEncoder::InitMemory.encode(BigUint::from(0u64)),
                      ));
                  }
              });
      
              Ok(cells)
          };
      
          let assigner = ImageTableAssigner::new(
              itable.len() + 1,
              br_table.entries().len() + elem_table.entries().len() + 1,
              page_capability,
          );
      
          let layouter = assigner
              .exec::<_, Error>(
                  initialization_state_handler,
                  static_frame_entries_handler,
                  instruction_handler,
                  br_table_handler,
                  padding_handler,
                  init_memory_entries_handler,
              )
              .unwrap();
      
          layouter
      }
      *)
      Definition encode_compilation_table_values (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [ F ],
            [
              k;
              itable;
              br_table;
              elem_table;
              static_frame_entries;
              initialization_state;
              init_memory_table
            ] =>
          ltac:(M.monadic
            (let k := M.alloc (| k |) in
            let itable := M.alloc (| itable |) in
            let br_table := M.alloc (| br_table |) in
            let elem_table := M.alloc (| elem_table |) in
            let static_frame_entries := M.alloc (| static_frame_entries |) in
            let initialization_state := M.alloc (| initialization_state |) in
            let init_memory_table := M.alloc (| init_memory_table |) in
            M.read (|
              let page_capability :=
                M.alloc (|
                  M.call_closure (|
                    M.get_function (|
                      "delphinus_zkwasm::circuits::image_table::compute_maximal_pages",
                      []
                    |),
                    [ M.read (| k |) ]
                  |)
                |) in
              let initialization_state_handler :=
                M.alloc (|
                  M.closure
                    (fun γ =>
                      ltac:(M.monadic
                        match γ with
                        | [ α0 ] =>
                          M.match_operator (|
                            M.alloc (| α0 |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (Value.StructTuple
                                    "core::result::Result::Ok"
                                    [
                                      M.call_closure (|
                                        M.get_associated_function (|
                                          Ty.apply
                                            (Ty.path "specs::state::InitializationState")
                                            [ Ty.path "u32"; Ty.path "num_bigint::biguint::BigUint"
                                            ],
                                          "map",
                                          [
                                            F;
                                            Ty.function
                                              [
                                                Ty.tuple
                                                  [ Ty.apply (Ty.path "&") [ Ty.path "u32" ] ]
                                              ]
                                              F;
                                            Ty.function
                                              [
                                                Ty.tuple
                                                  [
                                                    Ty.apply
                                                      (Ty.path "&")
                                                      [ Ty.path "num_bigint::biguint::BigUint" ]
                                                  ]
                                              ]
                                              F
                                          ]
                                        |),
                                        [
                                          M.read (| initialization_state |);
                                          M.closure
                                            (fun γ =>
                                              ltac:(M.monadic
                                                match γ with
                                                | [ α0 ] =>
                                                  M.match_operator (|
                                                    M.alloc (| α0 |),
                                                    [
                                                      fun γ =>
                                                        ltac:(M.monadic
                                                          (let v := M.copy (| γ |) in
                                                          M.call_closure (|
                                                            M.get_trait_method (|
                                                              "core::convert::From",
                                                              F,
                                                              [ Ty.path "u64" ],
                                                              "from",
                                                              []
                                                            |),
                                                            [
                                                              M.rust_cast
                                                                (M.read (| M.read (| v |) |))
                                                            ]
                                                          |)))
                                                    ]
                                                  |)
                                                | _ => M.impossible (||)
                                                end));
                                          M.closure
                                            (fun γ =>
                                              ltac:(M.monadic
                                                match γ with
                                                | [ α0 ] =>
                                                  M.match_operator (|
                                                    M.alloc (| α0 |),
                                                    [
                                                      fun γ =>
                                                        ltac:(M.monadic
                                                          (let v := M.copy (| γ |) in
                                                          M.call_closure (|
                                                            M.get_function (|
                                                              "delphinus_zkwasm::circuits::utils::bn_to_field",
                                                              [ F ]
                                                            |),
                                                            [ M.read (| v |) ]
                                                          |)))
                                                    ]
                                                  |)
                                                | _ => M.impossible (||)
                                                end))
                                        ]
                                      |)
                                    ]))
                            ]
                          |)
                        | _ => M.impossible (||)
                        end))
                |) in
              let static_frame_entries_handler :=
                M.alloc (|
                  M.closure
                    (fun γ =>
                      ltac:(M.monadic
                        match γ with
                        | [ α0 ] =>
                          M.match_operator (|
                            M.alloc (| α0 |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (M.read (|
                                    let cells :=
                                      M.alloc (|
                                        M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              [ Ty.tuple [ F; F ]; Ty.path "alloc::alloc::Global" ],
                                            "new",
                                            []
                                          |),
                                          []
                                        |)
                                      |) in
                                    let _ :=
                                      M.use
                                        (M.match_operator (|
                                          M.alloc (|
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "core::iter::traits::collect::IntoIterator",
                                                Ty.apply
                                                  (Ty.path "&")
                                                  [
                                                    Ty.apply
                                                      (Ty.path "slice")
                                                      [ Ty.path "specs::jtable::StaticFrameEntry" ]
                                                  ],
                                                [],
                                                "into_iter",
                                                []
                                              |),
                                              [
                                                M.call_closure (|
                                                  M.get_trait_method (|
                                                    "core::convert::AsRef",
                                                    Ty.apply
                                                      (Ty.path "array")
                                                      [ Ty.path "specs::jtable::StaticFrameEntry" ],
                                                    [
                                                      Ty.apply
                                                        (Ty.path "slice")
                                                        [ Ty.path "specs::jtable::StaticFrameEntry"
                                                        ]
                                                    ],
                                                    "as_ref",
                                                    []
                                                  |),
                                                  [ M.read (| static_frame_entries |) ]
                                                |)
                                              ]
                                            |)
                                          |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let iter := M.copy (| γ |) in
                                                M.loop (|
                                                  ltac:(M.monadic
                                                    (let _ :=
                                                      M.match_operator (|
                                                        M.alloc (|
                                                          M.call_closure (|
                                                            M.get_trait_method (|
                                                              "core::iter::traits::iterator::Iterator",
                                                              Ty.apply
                                                                (Ty.path "core::slice::iter::Iter")
                                                                [
                                                                  Ty.path
                                                                    "specs::jtable::StaticFrameEntry"
                                                                ],
                                                              [],
                                                              "next",
                                                              []
                                                            |),
                                                            [ iter ]
                                                          |)
                                                        |),
                                                        [
                                                          fun γ =>
                                                            ltac:(M.monadic
                                                              (M.alloc (|
                                                                M.never_to_any (|
                                                                  M.read (| M.break (||) |)
                                                                |)
                                                              |)));
                                                          fun γ =>
                                                            ltac:(M.monadic
                                                              (let γ0_0 :=
                                                                M.SubPointer.get_struct_tuple_field (|
                                                                  γ,
                                                                  "core::option::Option::Some",
                                                                  0
                                                                |) in
                                                              let entry := M.copy (| γ0_0 |) in
                                                              let _ :=
                                                                M.alloc (|
                                                                  M.call_closure (|
                                                                    M.get_associated_function (|
                                                                      Ty.apply
                                                                        (Ty.path "alloc::vec::Vec")
                                                                        [
                                                                          Ty.tuple [ F; F ];
                                                                          Ty.path
                                                                            "alloc::alloc::Global"
                                                                        ],
                                                                      "push",
                                                                      []
                                                                    |),
                                                                    [
                                                                      cells;
                                                                      Value.Tuple
                                                                        [
                                                                          M.call_closure (|
                                                                            M.get_trait_method (|
                                                                              "core::convert::From",
                                                                              F,
                                                                              [ Ty.path "u64" ],
                                                                              "from",
                                                                              []
                                                                            |),
                                                                            [
                                                                              M.rust_cast
                                                                                (M.read (|
                                                                                  M.SubPointer.get_struct_record_field (|
                                                                                    M.read (|
                                                                                      entry
                                                                                    |),
                                                                                    "specs::jtable::StaticFrameEntry",
                                                                                    "enable"
                                                                                  |)
                                                                                |))
                                                                            ]
                                                                          |);
                                                                          M.call_closure (|
                                                                            M.get_function (|
                                                                              "delphinus_zkwasm::circuits::utils::bn_to_field",
                                                                              [ F ]
                                                                            |),
                                                                            [
                                                                              M.alloc (|
                                                                                M.call_closure (|
                                                                                  M.get_associated_function (|
                                                                                    Ty.path
                                                                                      "specs::jtable::StaticFrameEntry",
                                                                                    "encode",
                                                                                    []
                                                                                  |),
                                                                                  [
                                                                                    M.read (|
                                                                                      entry
                                                                                    |)
                                                                                  ]
                                                                                |)
                                                                              |)
                                                                            ]
                                                                          |)
                                                                        ]
                                                                    ]
                                                                  |)
                                                                |) in
                                                              M.alloc (| Value.Tuple [] |)))
                                                        ]
                                                      |) in
                                                    M.alloc (| Value.Tuple [] |)))
                                                |)))
                                          ]
                                        |)) in
                                    M.alloc (|
                                      Value.StructTuple
                                        "core::result::Result::Ok"
                                        [
                                          M.call_closure (|
                                            M.get_associated_function (|
                                              Ty.apply
                                                (Ty.path "core::result::Result")
                                                [
                                                  Ty.apply (Ty.path "array") [ Ty.tuple [ F; F ] ];
                                                  Ty.apply
                                                    (Ty.path "alloc::vec::Vec")
                                                    [
                                                      Ty.tuple [ F; F ];
                                                      Ty.path "alloc::alloc::Global"
                                                    ]
                                                ],
                                              "expect",
                                              []
                                            |),
                                            [
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "core::convert::TryInto",
                                                  Ty.apply
                                                    (Ty.path "alloc::vec::Vec")
                                                    [
                                                      Ty.tuple [ F; F ];
                                                      Ty.path "alloc::alloc::Global"
                                                    ],
                                                  [ Ty.apply (Ty.path "array") [ Ty.tuple [ F; F ] ]
                                                  ],
                                                  "try_into",
                                                  []
                                                |),
                                                [ M.read (| cells |) ]
                                              |);
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "core::ops::deref::Deref",
                                                  Ty.path "alloc::string::String",
                                                  [],
                                                  "deref",
                                                  []
                                                |),
                                                [
                                                  let res :=
                                                    M.alloc (|
                                                      M.call_closure (|
                                                        M.get_function (|
                                                          "alloc::fmt::format",
                                                          []
                                                        |),
                                                        [
                                                          M.call_closure (|
                                                            M.get_associated_function (|
                                                              Ty.path "core::fmt::Arguments",
                                                              "new_v1",
                                                              []
                                                            |),
                                                            [
                                                              (* Unsize *)
                                                              M.pointer_coercion
                                                                (M.alloc (|
                                                                  Value.Array
                                                                    [
                                                                      M.read (|
                                                                        Value.String
                                                                          "The number of static frame entries should be "
                                                                      |)
                                                                    ]
                                                                |));
                                                              (* Unsize *)
                                                              M.pointer_coercion
                                                                (M.alloc (|
                                                                  Value.Array
                                                                    [
                                                                      M.call_closure (|
                                                                        M.get_associated_function (|
                                                                          Ty.path
                                                                            "core::fmt::rt::Argument",
                                                                          "new_display",
                                                                          [ Ty.path "usize" ]
                                                                        |),
                                                                        [
                                                                          M.get_constant (|
                                                                            "specs::jtable::STATIC_FRAME_ENTRY_NUMBER"
                                                                          |)
                                                                        ]
                                                                      |)
                                                                    ]
                                                                |))
                                                            ]
                                                          |)
                                                        ]
                                                      |)
                                                    |) in
                                                  res
                                                ]
                                              |)
                                            ]
                                          |)
                                        ]
                                    |)
                                  |)))
                            ]
                          |)
                        | _ => M.impossible (||)
                        end))
                |) in
              let instruction_handler :=
                M.alloc (|
                  M.closure
                    (fun γ =>
                      ltac:(M.monadic
                        match γ with
                        | [ α0 ] =>
                          M.match_operator (|
                            M.alloc (| α0 |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (M.read (|
                                    let cells :=
                                      M.alloc (|
                                        M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              [ F; Ty.path "alloc::alloc::Global" ],
                                            "new",
                                            []
                                          |),
                                          []
                                        |)
                                      |) in
                                    let _ :=
                                      M.alloc (|
                                        M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              [ F; Ty.path "alloc::alloc::Global" ],
                                            "push",
                                            []
                                          |),
                                          [
                                            cells;
                                            M.call_closure (|
                                              M.get_function (|
                                                "delphinus_zkwasm::circuits::utils::bn_to_field",
                                                [ F ]
                                              |),
                                              [
                                                M.alloc (|
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.path
                                                        "specs::encode::image_table::ImageTableEncoder",
                                                      "encode",
                                                      [ Ty.path "num_bigint::biguint::BigUint" ]
                                                    |),
                                                    [
                                                      M.alloc (|
                                                        Value.StructTuple
                                                          "specs::encode::image_table::ImageTableEncoder::Instruction"
                                                          []
                                                      |);
                                                      M.call_closure (|
                                                        M.get_trait_method (|
                                                          "core::convert::From",
                                                          Ty.path "num_bigint::biguint::BigUint",
                                                          [ Ty.path "u64" ],
                                                          "from",
                                                          []
                                                        |),
                                                        [ Value.Integer 0 ]
                                                      |)
                                                    ]
                                                  |)
                                                |)
                                              ]
                                            |)
                                          ]
                                        |)
                                      |) in
                                    let _ :=
                                      M.use
                                        (M.match_operator (|
                                          M.alloc (|
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "core::iter::traits::collect::IntoIterator",
                                                Ty.associated,
                                                [],
                                                "into_iter",
                                                []
                                              |),
                                              [
                                                M.call_closure (|
                                                  M.get_associated_function (|
                                                    Ty.path "specs::itable::InstructionTable",
                                                    "iter",
                                                    []
                                                  |),
                                                  [ M.read (| itable |) ]
                                                |)
                                              ]
                                            |)
                                          |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let iter := M.copy (| γ |) in
                                                M.loop (|
                                                  ltac:(M.monadic
                                                    (let _ :=
                                                      M.match_operator (|
                                                        M.alloc (|
                                                          M.call_closure (|
                                                            M.get_trait_method (|
                                                              "core::iter::traits::iterator::Iterator",
                                                              Ty.associated,
                                                              [],
                                                              "next",
                                                              []
                                                            |),
                                                            [ iter ]
                                                          |)
                                                        |),
                                                        [
                                                          fun γ =>
                                                            ltac:(M.monadic
                                                              (M.alloc (|
                                                                M.never_to_any (|
                                                                  M.read (| M.break (||) |)
                                                                |)
                                                              |)));
                                                          fun γ =>
                                                            ltac:(M.monadic
                                                              (let γ0_0 :=
                                                                M.SubPointer.get_struct_tuple_field (|
                                                                  γ,
                                                                  "core::option::Option::Some",
                                                                  0
                                                                |) in
                                                              let e := M.copy (| γ0_0 |) in
                                                              let _ :=
                                                                M.alloc (|
                                                                  M.call_closure (|
                                                                    M.get_associated_function (|
                                                                      Ty.apply
                                                                        (Ty.path "alloc::vec::Vec")
                                                                        [
                                                                          F;
                                                                          Ty.path
                                                                            "alloc::alloc::Global"
                                                                        ],
                                                                      "push",
                                                                      []
                                                                    |),
                                                                    [
                                                                      cells;
                                                                      M.call_closure (|
                                                                        M.get_function (|
                                                                          "delphinus_zkwasm::circuits::utils::bn_to_field",
                                                                          [ F ]
                                                                        |),
                                                                        [
                                                                          M.alloc (|
                                                                            M.call_closure (|
                                                                              M.get_associated_function (|
                                                                                Ty.path
                                                                                  "specs::encode::image_table::ImageTableEncoder",
                                                                                "encode",
                                                                                [
                                                                                  Ty.path
                                                                                    "num_bigint::biguint::BigUint"
                                                                                ]
                                                                              |),
                                                                              [
                                                                                M.alloc (|
                                                                                  Value.StructTuple
                                                                                    "specs::encode::image_table::ImageTableEncoder::Instruction"
                                                                                    []
                                                                                |);
                                                                                M.call_closure (|
                                                                                  M.get_trait_method (|
                                                                                    "core::clone::Clone",
                                                                                    Ty.path
                                                                                      "num_bigint::biguint::BigUint",
                                                                                    [],
                                                                                    "clone",
                                                                                    []
                                                                                  |),
                                                                                  [
                                                                                    M.SubPointer.get_struct_record_field (|
                                                                                      M.read (|
                                                                                        e
                                                                                      |),
                                                                                      "specs::itable::InstructionTableEntry",
                                                                                      "encode"
                                                                                    |)
                                                                                  ]
                                                                                |)
                                                                              ]
                                                                            |)
                                                                          |)
                                                                        ]
                                                                      |)
                                                                    ]
                                                                  |)
                                                                |) in
                                                              M.alloc (| Value.Tuple [] |)))
                                                        ]
                                                      |) in
                                                    M.alloc (| Value.Tuple [] |)))
                                                |)))
                                          ]
                                        |)) in
                                    M.alloc (|
                                      Value.StructTuple
                                        "core::result::Result::Ok"
                                        [ M.read (| cells |) ]
                                    |)
                                  |)))
                            ]
                          |)
                        | _ => M.impossible (||)
                        end))
                |) in
              let br_table_handler :=
                M.alloc (|
                  M.closure
                    (fun γ =>
                      ltac:(M.monadic
                        match γ with
                        | [ α0 ] =>
                          M.match_operator (|
                            M.alloc (| α0 |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (M.read (|
                                    let cells :=
                                      M.alloc (|
                                        M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              [ F; Ty.path "alloc::alloc::Global" ],
                                            "new",
                                            []
                                          |),
                                          []
                                        |)
                                      |) in
                                    let _ :=
                                      M.alloc (|
                                        M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              [ F; Ty.path "alloc::alloc::Global" ],
                                            "push",
                                            []
                                          |),
                                          [
                                            cells;
                                            M.call_closure (|
                                              M.get_function (|
                                                "delphinus_zkwasm::circuits::utils::bn_to_field",
                                                [ F ]
                                              |),
                                              [
                                                M.alloc (|
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.path
                                                        "specs::encode::image_table::ImageTableEncoder",
                                                      "encode",
                                                      [ Ty.path "num_bigint::biguint::BigUint" ]
                                                    |),
                                                    [
                                                      M.alloc (|
                                                        Value.StructTuple
                                                          "specs::encode::image_table::ImageTableEncoder::BrTable"
                                                          []
                                                      |);
                                                      M.call_closure (|
                                                        M.get_trait_method (|
                                                          "core::convert::From",
                                                          Ty.path "num_bigint::biguint::BigUint",
                                                          [ Ty.path "u64" ],
                                                          "from",
                                                          []
                                                        |),
                                                        [ Value.Integer 0 ]
                                                      |)
                                                    ]
                                                  |)
                                                |)
                                              ]
                                            |)
                                          ]
                                        |)
                                      |) in
                                    let _ :=
                                      M.use
                                        (M.match_operator (|
                                          M.alloc (|
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "core::iter::traits::collect::IntoIterator",
                                                Ty.apply
                                                  (Ty.path "&")
                                                  [
                                                    Ty.apply
                                                      (Ty.path "alloc::vec::Vec")
                                                      [
                                                        Ty.path "specs::brtable::BrTableEntry";
                                                        Ty.path "alloc::alloc::Global"
                                                      ]
                                                  ],
                                                [],
                                                "into_iter",
                                                []
                                              |),
                                              [
                                                M.call_closure (|
                                                  M.get_associated_function (|
                                                    Ty.path "specs::brtable::BrTable",
                                                    "entries",
                                                    []
                                                  |),
                                                  [ M.read (| br_table |) ]
                                                |)
                                              ]
                                            |)
                                          |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let iter := M.copy (| γ |) in
                                                M.loop (|
                                                  ltac:(M.monadic
                                                    (let _ :=
                                                      M.match_operator (|
                                                        M.alloc (|
                                                          M.call_closure (|
                                                            M.get_trait_method (|
                                                              "core::iter::traits::iterator::Iterator",
                                                              Ty.apply
                                                                (Ty.path "core::slice::iter::Iter")
                                                                [
                                                                  Ty.path
                                                                    "specs::brtable::BrTableEntry"
                                                                ],
                                                              [],
                                                              "next",
                                                              []
                                                            |),
                                                            [ iter ]
                                                          |)
                                                        |),
                                                        [
                                                          fun γ =>
                                                            ltac:(M.monadic
                                                              (M.alloc (|
                                                                M.never_to_any (|
                                                                  M.read (| M.break (||) |)
                                                                |)
                                                              |)));
                                                          fun γ =>
                                                            ltac:(M.monadic
                                                              (let γ0_0 :=
                                                                M.SubPointer.get_struct_tuple_field (|
                                                                  γ,
                                                                  "core::option::Option::Some",
                                                                  0
                                                                |) in
                                                              let e := M.copy (| γ0_0 |) in
                                                              let _ :=
                                                                M.alloc (|
                                                                  M.call_closure (|
                                                                    M.get_associated_function (|
                                                                      Ty.apply
                                                                        (Ty.path "alloc::vec::Vec")
                                                                        [
                                                                          F;
                                                                          Ty.path
                                                                            "alloc::alloc::Global"
                                                                        ],
                                                                      "push",
                                                                      []
                                                                    |),
                                                                    [
                                                                      cells;
                                                                      M.call_closure (|
                                                                        M.get_function (|
                                                                          "delphinus_zkwasm::circuits::utils::bn_to_field",
                                                                          [ F ]
                                                                        |),
                                                                        [
                                                                          M.alloc (|
                                                                            M.call_closure (|
                                                                              M.get_associated_function (|
                                                                                Ty.path
                                                                                  "specs::encode::image_table::ImageTableEncoder",
                                                                                "encode",
                                                                                [
                                                                                  Ty.path
                                                                                    "num_bigint::biguint::BigUint"
                                                                                ]
                                                                              |),
                                                                              [
                                                                                M.alloc (|
                                                                                  Value.StructTuple
                                                                                    "specs::encode::image_table::ImageTableEncoder::BrTable"
                                                                                    []
                                                                                |);
                                                                                M.call_closure (|
                                                                                  M.get_associated_function (|
                                                                                    Ty.path
                                                                                      "specs::brtable::BrTableEntry",
                                                                                    "encode",
                                                                                    []
                                                                                  |),
                                                                                  [ M.read (| e |) ]
                                                                                |)
                                                                              ]
                                                                            |)
                                                                          |)
                                                                        ]
                                                                      |)
                                                                    ]
                                                                  |)
                                                                |) in
                                                              M.alloc (| Value.Tuple [] |)))
                                                        ]
                                                      |) in
                                                    M.alloc (| Value.Tuple [] |)))
                                                |)))
                                          ]
                                        |)) in
                                    let _ :=
                                      M.use
                                        (M.match_operator (|
                                          M.alloc (|
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "core::iter::traits::collect::IntoIterator",
                                                Ty.apply
                                                  (Ty.path "&")
                                                  [
                                                    Ty.apply
                                                      (Ty.path "alloc::vec::Vec")
                                                      [
                                                        Ty.path "specs::brtable::ElemEntry";
                                                        Ty.path "alloc::alloc::Global"
                                                      ]
                                                  ],
                                                [],
                                                "into_iter",
                                                []
                                              |),
                                              [
                                                M.call_closure (|
                                                  M.get_associated_function (|
                                                    Ty.path "specs::brtable::ElemTable",
                                                    "entries",
                                                    []
                                                  |),
                                                  [ M.read (| elem_table |) ]
                                                |)
                                              ]
                                            |)
                                          |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let iter := M.copy (| γ |) in
                                                M.loop (|
                                                  ltac:(M.monadic
                                                    (let _ :=
                                                      M.match_operator (|
                                                        M.alloc (|
                                                          M.call_closure (|
                                                            M.get_trait_method (|
                                                              "core::iter::traits::iterator::Iterator",
                                                              Ty.apply
                                                                (Ty.path "core::slice::iter::Iter")
                                                                [
                                                                  Ty.path
                                                                    "specs::brtable::ElemEntry"
                                                                ],
                                                              [],
                                                              "next",
                                                              []
                                                            |),
                                                            [ iter ]
                                                          |)
                                                        |),
                                                        [
                                                          fun γ =>
                                                            ltac:(M.monadic
                                                              (M.alloc (|
                                                                M.never_to_any (|
                                                                  M.read (| M.break (||) |)
                                                                |)
                                                              |)));
                                                          fun γ =>
                                                            ltac:(M.monadic
                                                              (let γ0_0 :=
                                                                M.SubPointer.get_struct_tuple_field (|
                                                                  γ,
                                                                  "core::option::Option::Some",
                                                                  0
                                                                |) in
                                                              let e := M.copy (| γ0_0 |) in
                                                              let _ :=
                                                                M.alloc (|
                                                                  M.call_closure (|
                                                                    M.get_associated_function (|
                                                                      Ty.apply
                                                                        (Ty.path "alloc::vec::Vec")
                                                                        [
                                                                          F;
                                                                          Ty.path
                                                                            "alloc::alloc::Global"
                                                                        ],
                                                                      "push",
                                                                      []
                                                                    |),
                                                                    [
                                                                      cells;
                                                                      M.call_closure (|
                                                                        M.get_function (|
                                                                          "delphinus_zkwasm::circuits::utils::bn_to_field",
                                                                          [ F ]
                                                                        |),
                                                                        [
                                                                          M.alloc (|
                                                                            M.call_closure (|
                                                                              M.get_associated_function (|
                                                                                Ty.path
                                                                                  "specs::encode::image_table::ImageTableEncoder",
                                                                                "encode",
                                                                                [
                                                                                  Ty.path
                                                                                    "num_bigint::biguint::BigUint"
                                                                                ]
                                                                              |),
                                                                              [
                                                                                M.alloc (|
                                                                                  Value.StructTuple
                                                                                    "specs::encode::image_table::ImageTableEncoder::BrTable"
                                                                                    []
                                                                                |);
                                                                                M.call_closure (|
                                                                                  M.get_associated_function (|
                                                                                    Ty.path
                                                                                      "specs::brtable::ElemEntry",
                                                                                    "encode",
                                                                                    []
                                                                                  |),
                                                                                  [ M.read (| e |) ]
                                                                                |)
                                                                              ]
                                                                            |)
                                                                          |)
                                                                        ]
                                                                      |)
                                                                    ]
                                                                  |)
                                                                |) in
                                                              M.alloc (| Value.Tuple [] |)))
                                                        ]
                                                      |) in
                                                    M.alloc (| Value.Tuple [] |)))
                                                |)))
                                          ]
                                        |)) in
                                    M.alloc (|
                                      Value.StructTuple
                                        "core::result::Result::Ok"
                                        [ M.read (| cells |) ]
                                    |)
                                  |)))
                            ]
                          |)
                        | _ => M.impossible (||)
                        end))
                |) in
              let padding_handler :=
                M.alloc (|
                  M.closure
                    (fun γ =>
                      ltac:(M.monadic
                        match γ with
                        | [ α0; α1 ] =>
                          M.match_operator (|
                            M.alloc (| α0 |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let start := M.copy (| γ |) in
                                  M.match_operator (|
                                    M.alloc (| α1 |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let end_ := M.copy (| γ |) in
                                          Value.StructTuple
                                            "core::result::Result::Ok"
                                            [
                                              M.call_closure (|
                                                M.get_function (| "alloc::vec::from_elem", [ F ] |),
                                                [
                                                  M.call_closure (|
                                                    M.get_trait_method (|
                                                      "ff::Field",
                                                      F,
                                                      [],
                                                      "zero",
                                                      []
                                                    |),
                                                    []
                                                  |);
                                                  BinOp.Panic.sub (|
                                                    Integer.Usize,
                                                    M.read (| end_ |),
                                                    M.read (| start |)
                                                  |)
                                                ]
                                              |)
                                            ]))
                                    ]
                                  |)))
                            ]
                          |)
                        | _ => M.impossible (||)
                        end))
                |) in
              let init_memory_entries_handler :=
                M.alloc (|
                  M.closure
                    (fun γ =>
                      ltac:(M.monadic
                        match γ with
                        | [ α0 ] =>
                          M.match_operator (|
                            M.alloc (| α0 |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (M.read (|
                                    let cells :=
                                      M.alloc (|
                                        M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              [ F; Ty.path "alloc::alloc::Global" ],
                                            "new",
                                            []
                                          |),
                                          []
                                        |)
                                      |) in
                                    let _ :=
                                      M.alloc (|
                                        M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              [ F; Ty.path "alloc::alloc::Global" ],
                                            "push",
                                            []
                                          |),
                                          [
                                            cells;
                                            M.call_closure (|
                                              M.get_function (|
                                                "delphinus_zkwasm::circuits::utils::bn_to_field",
                                                [ F ]
                                              |),
                                              [
                                                M.alloc (|
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.path
                                                        "specs::encode::image_table::ImageTableEncoder",
                                                      "encode",
                                                      [ Ty.path "num_bigint::biguint::BigUint" ]
                                                    |),
                                                    [
                                                      M.alloc (|
                                                        Value.StructTuple
                                                          "specs::encode::image_table::ImageTableEncoder::InitMemory"
                                                          []
                                                      |);
                                                      M.call_closure (|
                                                        M.get_trait_method (|
                                                          "core::convert::From",
                                                          Ty.path "num_bigint::biguint::BigUint",
                                                          [ Ty.path "u64" ],
                                                          "from",
                                                          []
                                                        |),
                                                        [ Value.Integer 0 ]
                                                      |)
                                                    ]
                                                  |)
                                                |)
                                              ]
                                            |)
                                          ]
                                        |)
                                      |) in
                                    let layouter :=
                                      M.alloc (|
                                        Value.StructRecord
                                          "delphinus_zkwasm::circuits::utils::image_table::InitMemoryLayouter"
                                          [ ("pages", M.read (| page_capability |)) ]
                                      |) in
                                    let _ :=
                                      M.alloc (|
                                        M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.path
                                              "delphinus_zkwasm::circuits::utils::image_table::InitMemoryLayouter",
                                            "for_each",
                                            [
                                              Ty.function
                                                [
                                                  Ty.tuple
                                                    [
                                                      Ty.tuple
                                                        [
                                                          Ty.path "specs::mtable::LocationType";
                                                          Ty.path "u32"
                                                        ]
                                                    ]
                                                ]
                                                (Ty.tuple [])
                                            ]
                                          |),
                                          [
                                            M.read (| layouter |);
                                            M.closure
                                              (fun γ =>
                                                ltac:(M.monadic
                                                  match γ with
                                                  | [ α0 ] =>
                                                    M.match_operator (|
                                                      M.alloc (| α0 |),
                                                      [
                                                        fun γ =>
                                                          ltac:(M.monadic
                                                            (let γ0_0 :=
                                                              M.SubPointer.get_tuple_field (|
                                                                γ,
                                                                0
                                                              |) in
                                                            let γ0_1 :=
                                                              M.SubPointer.get_tuple_field (|
                                                                γ,
                                                                1
                                                              |) in
                                                            let ltype := M.copy (| γ0_0 |) in
                                                            let offset := M.copy (| γ0_1 |) in
                                                            M.read (|
                                                              M.match_operator (|
                                                                M.alloc (| Value.Tuple [] |),
                                                                [
                                                                  fun γ =>
                                                                    ltac:(M.monadic
                                                                      (let γ :=
                                                                        M.alloc (|
                                                                          M.call_closure (|
                                                                            M.get_associated_function (|
                                                                              Ty.path
                                                                                "specs::imtable::InitMemoryTable",
                                                                              "try_find",
                                                                              []
                                                                            |),
                                                                            [
                                                                              M.read (|
                                                                                init_memory_table
                                                                              |);
                                                                              M.read (| ltype |);
                                                                              M.read (| offset |)
                                                                            ]
                                                                          |)
                                                                        |) in
                                                                      let γ0_0 :=
                                                                        M.SubPointer.get_struct_tuple_field (|
                                                                          γ,
                                                                          "core::option::Option::Some",
                                                                          0
                                                                        |) in
                                                                      let entry :=
                                                                        M.copy (| γ0_0 |) in
                                                                      let _ :=
                                                                        M.alloc (|
                                                                          M.call_closure (|
                                                                            M.get_associated_function (|
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "alloc::vec::Vec")
                                                                                [
                                                                                  F;
                                                                                  Ty.path
                                                                                    "alloc::alloc::Global"
                                                                                ],
                                                                              "push",
                                                                              []
                                                                            |),
                                                                            [
                                                                              cells;
                                                                              M.call_closure (|
                                                                                M.get_function (|
                                                                                  "delphinus_zkwasm::circuits::utils::bn_to_field",
                                                                                  [ F ]
                                                                                |),
                                                                                [
                                                                                  M.alloc (|
                                                                                    M.call_closure (|
                                                                                      M.get_associated_function (|
                                                                                        Ty.path
                                                                                          "specs::encode::image_table::ImageTableEncoder",
                                                                                        "encode",
                                                                                        [
                                                                                          Ty.path
                                                                                            "num_bigint::biguint::BigUint"
                                                                                        ]
                                                                                      |),
                                                                                      [
                                                                                        M.alloc (|
                                                                                          Value.StructTuple
                                                                                            "specs::encode::image_table::ImageTableEncoder::InitMemory"
                                                                                            []
                                                                                        |);
                                                                                        M.call_closure (|
                                                                                          M.get_associated_function (|
                                                                                            Ty.path
                                                                                              "specs::imtable::InitMemoryTableEntry",
                                                                                            "encode",
                                                                                            []
                                                                                          |),
                                                                                          [
                                                                                            M.read (|
                                                                                              entry
                                                                                            |)
                                                                                          ]
                                                                                        |)
                                                                                      ]
                                                                                    |)
                                                                                  |)
                                                                                ]
                                                                              |)
                                                                            ]
                                                                          |)
                                                                        |) in
                                                                      M.alloc (|
                                                                        Value.Tuple []
                                                                      |)));
                                                                  fun γ =>
                                                                    ltac:(M.monadic
                                                                      (M.match_operator (|
                                                                        M.alloc (|
                                                                          Value.Tuple []
                                                                        |),
                                                                        [
                                                                          fun γ =>
                                                                            ltac:(M.monadic
                                                                              (let γ :=
                                                                                M.use
                                                                                  (M.alloc (|
                                                                                    M.call_closure (|
                                                                                      M.get_trait_method (|
                                                                                        "core::cmp::PartialEq",
                                                                                        Ty.path
                                                                                          "specs::mtable::LocationType",
                                                                                        [
                                                                                          Ty.path
                                                                                            "specs::mtable::LocationType"
                                                                                        ],
                                                                                        "eq",
                                                                                        []
                                                                                      |),
                                                                                      [
                                                                                        ltype;
                                                                                        M.alloc (|
                                                                                          Value.StructTuple
                                                                                            "specs::mtable::LocationType::Heap"
                                                                                            []
                                                                                        |)
                                                                                      ]
                                                                                    |)
                                                                                  |)) in
                                                                              let _ :=
                                                                                M.is_constant_or_break_match (|
                                                                                  M.read (| γ |),
                                                                                  Value.Bool true
                                                                                |) in
                                                                              let entry :=
                                                                                M.alloc (|
                                                                                  Value.StructRecord
                                                                                    "specs::imtable::InitMemoryTableEntry"
                                                                                    [
                                                                                      ("ltype",
                                                                                        M.read (|
                                                                                          ltype
                                                                                        |));
                                                                                      ("is_mutable",
                                                                                        Value.Bool
                                                                                          true);
                                                                                      ("offset",
                                                                                        M.read (|
                                                                                          offset
                                                                                        |));
                                                                                      ("vtype",
                                                                                        Value.StructTuple
                                                                                          "specs::mtable::VarType::I64"
                                                                                          []);
                                                                                      ("value",
                                                                                        Value.Integer
                                                                                          0);
                                                                                      ("eid",
                                                                                        Value.Integer
                                                                                          0)
                                                                                    ]
                                                                                |) in
                                                                              let _ :=
                                                                                M.alloc (|
                                                                                  M.call_closure (|
                                                                                    M.get_associated_function (|
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "alloc::vec::Vec")
                                                                                        [
                                                                                          F;
                                                                                          Ty.path
                                                                                            "alloc::alloc::Global"
                                                                                        ],
                                                                                      "push",
                                                                                      []
                                                                                    |),
                                                                                    [
                                                                                      cells;
                                                                                      M.call_closure (|
                                                                                        M.get_function (|
                                                                                          "delphinus_zkwasm::circuits::utils::bn_to_field",
                                                                                          [ F ]
                                                                                        |),
                                                                                        [
                                                                                          M.alloc (|
                                                                                            M.call_closure (|
                                                                                              M.get_associated_function (|
                                                                                                Ty.path
                                                                                                  "specs::encode::image_table::ImageTableEncoder",
                                                                                                "encode",
                                                                                                [
                                                                                                  Ty.path
                                                                                                    "num_bigint::biguint::BigUint"
                                                                                                ]
                                                                                              |),
                                                                                              [
                                                                                                M.alloc (|
                                                                                                  Value.StructTuple
                                                                                                    "specs::encode::image_table::ImageTableEncoder::InitMemory"
                                                                                                    []
                                                                                                |);
                                                                                                M.call_closure (|
                                                                                                  M.get_associated_function (|
                                                                                                    Ty.path
                                                                                                      "specs::imtable::InitMemoryTableEntry",
                                                                                                    "encode",
                                                                                                    []
                                                                                                  |),
                                                                                                  [
                                                                                                    entry
                                                                                                  ]
                                                                                                |)
                                                                                              ]
                                                                                            |)
                                                                                          |)
                                                                                        ]
                                                                                      |)
                                                                                    ]
                                                                                  |)
                                                                                |) in
                                                                              M.alloc (|
                                                                                Value.Tuple []
                                                                              |)));
                                                                          fun γ =>
                                                                            ltac:(M.monadic
                                                                              (let _ :=
                                                                                M.alloc (|
                                                                                  M.call_closure (|
                                                                                    M.get_associated_function (|
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "alloc::vec::Vec")
                                                                                        [
                                                                                          F;
                                                                                          Ty.path
                                                                                            "alloc::alloc::Global"
                                                                                        ],
                                                                                      "push",
                                                                                      []
                                                                                    |),
                                                                                    [
                                                                                      cells;
                                                                                      M.call_closure (|
                                                                                        M.get_function (|
                                                                                          "delphinus_zkwasm::circuits::utils::bn_to_field",
                                                                                          [ F ]
                                                                                        |),
                                                                                        [
                                                                                          M.alloc (|
                                                                                            M.call_closure (|
                                                                                              M.get_associated_function (|
                                                                                                Ty.path
                                                                                                  "specs::encode::image_table::ImageTableEncoder",
                                                                                                "encode",
                                                                                                [
                                                                                                  Ty.path
                                                                                                    "num_bigint::biguint::BigUint"
                                                                                                ]
                                                                                              |),
                                                                                              [
                                                                                                M.alloc (|
                                                                                                  Value.StructTuple
                                                                                                    "specs::encode::image_table::ImageTableEncoder::InitMemory"
                                                                                                    []
                                                                                                |);
                                                                                                M.call_closure (|
                                                                                                  M.get_trait_method (|
                                                                                                    "core::convert::From",
                                                                                                    Ty.path
                                                                                                      "num_bigint::biguint::BigUint",
                                                                                                    [
                                                                                                      Ty.path
                                                                                                        "u64"
                                                                                                    ],
                                                                                                    "from",
                                                                                                    []
                                                                                                  |),
                                                                                                  [
                                                                                                    Value.Integer
                                                                                                      0
                                                                                                  ]
                                                                                                |)
                                                                                              ]
                                                                                            |)
                                                                                          |)
                                                                                        ]
                                                                                      |)
                                                                                    ]
                                                                                  |)
                                                                                |) in
                                                                              M.alloc (|
                                                                                Value.Tuple []
                                                                              |)))
                                                                        ]
                                                                      |)))
                                                                ]
                                                              |)
                                                            |)))
                                                      ]
                                                    |)
                                                  | _ => M.impossible (||)
                                                  end))
                                          ]
                                        |)
                                      |) in
                                    M.alloc (|
                                      Value.StructTuple
                                        "core::result::Result::Ok"
                                        [ M.read (| cells |) ]
                                    |)
                                  |)))
                            ]
                          |)
                        | _ => M.impossible (||)
                        end))
                |) in
              let assigner :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.path "delphinus_zkwasm::circuits::utils::image_table::ImageTableAssigner",
                      "new",
                      []
                    |),
                    [
                      BinOp.Panic.add (|
                        Integer.Usize,
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.path "specs::itable::InstructionTable",
                            "len",
                            []
                          |),
                          [ M.read (| itable |) ]
                        |),
                        Value.Integer 1
                      |);
                      BinOp.Panic.add (|
                        Integer.Usize,
                        BinOp.Panic.add (|
                          Integer.Usize,
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                [
                                  Ty.path "specs::brtable::BrTableEntry";
                                  Ty.path "alloc::alloc::Global"
                                ],
                              "len",
                              []
                            |),
                            [
                              M.call_closure (|
                                M.get_associated_function (|
                                  Ty.path "specs::brtable::BrTable",
                                  "entries",
                                  []
                                |),
                                [ M.read (| br_table |) ]
                              |)
                            ]
                          |),
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                [
                                  Ty.path "specs::brtable::ElemEntry";
                                  Ty.path "alloc::alloc::Global"
                                ],
                              "len",
                              []
                            |),
                            [
                              M.call_closure (|
                                M.get_associated_function (|
                                  Ty.path "specs::brtable::ElemTable",
                                  "entries",
                                  []
                                |),
                                [ M.read (| elem_table |) ]
                              |)
                            ]
                          |)
                        |),
                        Value.Integer 1
                      |);
                      M.read (| page_capability |)
                    ]
                  |)
                |) in
              let layouter :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "core::result::Result")
                        [
                          Ty.apply
                            (Ty.path
                              "delphinus_zkwasm::circuits::utils::image_table::ImageTableLayouter")
                            [ F ];
                          Ty.path "anyhow::Error"
                        ],
                      "unwrap",
                      []
                    |),
                    [
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.path
                            "delphinus_zkwasm::circuits::utils::image_table::ImageTableAssigner",
                          "exec",
                          [
                            F;
                            Ty.path "anyhow::Error";
                            Ty.function
                              [ Ty.tuple [ Ty.path "usize" ] ]
                              (Ty.apply
                                (Ty.path "core::result::Result")
                                [
                                  Ty.apply (Ty.path "specs::state::InitializationState") [ F; F ];
                                  Ty.path "anyhow::Error"
                                ]);
                            Ty.function
                              [ Ty.tuple [ Ty.path "usize" ] ]
                              (Ty.apply
                                (Ty.path "core::result::Result")
                                [
                                  Ty.apply (Ty.path "array") [ Ty.tuple [ F; F ] ];
                                  Ty.path "anyhow::Error"
                                ]);
                            Ty.function
                              [ Ty.tuple [ Ty.path "usize" ] ]
                              (Ty.apply
                                (Ty.path "core::result::Result")
                                [
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    [ F; Ty.path "alloc::alloc::Global" ];
                                  Ty.path "anyhow::Error"
                                ]);
                            Ty.function
                              [ Ty.tuple [ Ty.path "usize" ] ]
                              (Ty.apply
                                (Ty.path "core::result::Result")
                                [
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    [ F; Ty.path "alloc::alloc::Global" ];
                                  Ty.path "anyhow::Error"
                                ]);
                            Ty.function
                              [ Ty.tuple [ Ty.path "usize"; Ty.path "usize" ] ]
                              (Ty.apply
                                (Ty.path "core::result::Result")
                                [
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    [ F; Ty.path "alloc::alloc::Global" ];
                                  Ty.path "anyhow::Error"
                                ]);
                            Ty.function
                              [ Ty.tuple [ Ty.path "usize" ] ]
                              (Ty.apply
                                (Ty.path "core::result::Result")
                                [
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    [ F; Ty.path "alloc::alloc::Global" ];
                                  Ty.path "anyhow::Error"
                                ])
                          ]
                        |),
                        [
                          assigner;
                          M.read (| initialization_state_handler |);
                          M.read (| static_frame_entries_handler |);
                          M.read (| instruction_handler |);
                          M.read (| br_table_handler |);
                          M.read (| padding_handler |);
                          M.read (| init_memory_entries_handler |)
                        ]
                      |)
                    ]
                  |)
                |) in
              layouter
            |)))
        | _, _ => M.impossible
        end.
      
      (* Trait *)
      (* Empty module 'EncodeImageTable' *)
      
      Module Impl_delphinus_zkwasm_circuits_utils_image_table_EncodeImageTable_where_pairing_bn256_arithmetic_fields_FieldExt_F_F_for_specs_slice_Slice.
        Definition Self (F : Ty.t) : Ty.t := Ty.path "specs::slice::Slice".
        
        (*
            fn encode_pre_compilation_table_values(&self, k: u32) -> ImageTableLayouter<F> {
                encode_compilation_table_values(
                    k,
                    &self.itable,
                    &self.br_table,
                    &self.elem_table,
                    &self.static_jtable,
                    &self.initialization_state,
                    &self.imtable,
                )
            }
        *)
        Definition encode_pre_compilation_table_values
            (F : Ty.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self F in
          match τ, α with
          | [], [ self; k ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              let k := M.alloc (| k |) in
              M.call_closure (|
                M.get_function (|
                  "delphinus_zkwasm::circuits::utils::image_table::encode_compilation_table_values",
                  [ F ]
                |),
                [
                  M.read (| k |);
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::ops::deref::Deref",
                      Ty.apply
                        (Ty.path "alloc::sync::Arc")
                        [ Ty.path "specs::itable::InstructionTable"; Ty.path "alloc::alloc::Global"
                        ],
                      [],
                      "deref",
                      []
                    |),
                    [
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "specs::slice::Slice",
                        "itable"
                      |)
                    ]
                  |);
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::ops::deref::Deref",
                      Ty.apply
                        (Ty.path "alloc::sync::Arc")
                        [ Ty.path "specs::brtable::BrTable"; Ty.path "alloc::alloc::Global" ],
                      [],
                      "deref",
                      []
                    |),
                    [
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "specs::slice::Slice",
                        "br_table"
                      |)
                    ]
                  |);
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::ops::deref::Deref",
                      Ty.apply
                        (Ty.path "alloc::sync::Arc")
                        [ Ty.path "specs::brtable::ElemTable"; Ty.path "alloc::alloc::Global" ],
                      [],
                      "deref",
                      []
                    |),
                    [
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "specs::slice::Slice",
                        "elem_table"
                      |)
                    ]
                  |);
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::ops::deref::Deref",
                      Ty.apply
                        (Ty.path "alloc::sync::Arc")
                        [
                          Ty.apply (Ty.path "array") [ Ty.path "specs::jtable::StaticFrameEntry" ];
                          Ty.path "alloc::alloc::Global"
                        ],
                      [],
                      "deref",
                      []
                    |),
                    [
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "specs::slice::Slice",
                        "static_jtable"
                      |)
                    ]
                  |);
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::ops::deref::Deref",
                      Ty.apply
                        (Ty.path "alloc::sync::Arc")
                        [
                          Ty.apply
                            (Ty.path "specs::state::InitializationState")
                            [ Ty.path "u32"; Ty.path "num_bigint::biguint::BigUint" ];
                          Ty.path "alloc::alloc::Global"
                        ],
                      [],
                      "deref",
                      []
                    |),
                    [
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "specs::slice::Slice",
                        "initialization_state"
                      |)
                    ]
                  |);
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::ops::deref::Deref",
                      Ty.apply
                        (Ty.path "alloc::sync::Arc")
                        [ Ty.path "specs::imtable::InitMemoryTable"; Ty.path "alloc::alloc::Global"
                        ],
                      [],
                      "deref",
                      []
                    |),
                    [
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "specs::slice::Slice",
                        "imtable"
                      |)
                    ]
                  |)
                ]
              |)))
          | _, _ => M.impossible
          end.
        
        (*
            fn encode_post_compilation_table_values(&self, k: u32) -> ImageTableLayouter<F> {
                encode_compilation_table_values(
                    k,
                    &self.itable,
                    &self.br_table,
                    &self.elem_table,
                    &self.static_jtable,
                    &self.post_initialization_state,
                    &self.post_imtable,
                )
            }
        *)
        Definition encode_post_compilation_table_values
            (F : Ty.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self F in
          match τ, α with
          | [], [ self; k ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              let k := M.alloc (| k |) in
              M.call_closure (|
                M.get_function (|
                  "delphinus_zkwasm::circuits::utils::image_table::encode_compilation_table_values",
                  [ F ]
                |),
                [
                  M.read (| k |);
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::ops::deref::Deref",
                      Ty.apply
                        (Ty.path "alloc::sync::Arc")
                        [ Ty.path "specs::itable::InstructionTable"; Ty.path "alloc::alloc::Global"
                        ],
                      [],
                      "deref",
                      []
                    |),
                    [
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "specs::slice::Slice",
                        "itable"
                      |)
                    ]
                  |);
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::ops::deref::Deref",
                      Ty.apply
                        (Ty.path "alloc::sync::Arc")
                        [ Ty.path "specs::brtable::BrTable"; Ty.path "alloc::alloc::Global" ],
                      [],
                      "deref",
                      []
                    |),
                    [
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "specs::slice::Slice",
                        "br_table"
                      |)
                    ]
                  |);
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::ops::deref::Deref",
                      Ty.apply
                        (Ty.path "alloc::sync::Arc")
                        [ Ty.path "specs::brtable::ElemTable"; Ty.path "alloc::alloc::Global" ],
                      [],
                      "deref",
                      []
                    |),
                    [
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "specs::slice::Slice",
                        "elem_table"
                      |)
                    ]
                  |);
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::ops::deref::Deref",
                      Ty.apply
                        (Ty.path "alloc::sync::Arc")
                        [
                          Ty.apply (Ty.path "array") [ Ty.path "specs::jtable::StaticFrameEntry" ];
                          Ty.path "alloc::alloc::Global"
                        ],
                      [],
                      "deref",
                      []
                    |),
                    [
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "specs::slice::Slice",
                        "static_jtable"
                      |)
                    ]
                  |);
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::ops::deref::Deref",
                      Ty.apply
                        (Ty.path "alloc::sync::Arc")
                        [
                          Ty.apply
                            (Ty.path "specs::state::InitializationState")
                            [ Ty.path "u32"; Ty.path "num_bigint::biguint::BigUint" ];
                          Ty.path "alloc::alloc::Global"
                        ],
                      [],
                      "deref",
                      []
                    |),
                    [
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "specs::slice::Slice",
                        "post_initialization_state"
                      |)
                    ]
                  |);
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::ops::deref::Deref",
                      Ty.apply
                        (Ty.path "alloc::sync::Arc")
                        [ Ty.path "specs::imtable::InitMemoryTable"; Ty.path "alloc::alloc::Global"
                        ],
                      [],
                      "deref",
                      []
                    |),
                    [
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "specs::slice::Slice",
                        "post_imtable"
                      |)
                    ]
                  |)
                ]
              |)))
          | _, _ => M.impossible
          end.
        
        Axiom Implements :
          forall (F : Ty.t),
          M.IsTraitInstance
            "delphinus_zkwasm::circuits::utils::image_table::EncodeImageTable"
            (Self F)
            (* Trait polymorphic types *) [ (* F *) F ]
            (* Instance *)
            [
              ("encode_pre_compilation_table_values",
                InstanceField.Method (encode_pre_compilation_table_values F));
              ("encode_post_compilation_table_values",
                InstanceField.Method (encode_post_compilation_table_values F))
            ].
      End Impl_delphinus_zkwasm_circuits_utils_image_table_EncodeImageTable_where_pairing_bn256_arithmetic_fields_FieldExt_F_F_for_specs_slice_Slice.
      
      Module Impl_delphinus_zkwasm_circuits_utils_image_table_ImageTableLayouter_F.
        Definition Self (F : Ty.t) : Ty.t :=
          Ty.apply
            (Ty.path "delphinus_zkwasm::circuits::utils::image_table::ImageTableLayouter")
            [ F ].
        
        (*
            pub fn plain(&self) -> Vec<F> {
                let mut buf = vec![];
        
                buf.append(&mut self.initialization_state.plain());
                buf.append(
                    &mut self
                        .static_frame_entries
                        .map(|(enable, fid)| vec![enable, fid])
                        .into_iter()
                        .collect::<Vec<Vec<_>>>()
                        .concat(),
                );
                buf.append(&mut self.instructions.clone());
                buf.append(&mut self.br_table_entires.clone());
                buf.append(&mut self.padding_entires.clone());
                buf.append(&mut self.init_memory_entries.clone());
        
                buf
            }
        *)
        Definition plain (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self F in
          match τ, α with
          | [], [ self ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              M.read (|
                let buf :=
                  M.alloc (|
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.apply (Ty.path "alloc::vec::Vec") [ F; Ty.path "alloc::alloc::Global" ],
                        "new",
                        []
                      |),
                      []
                    |)
                  |) in
                let _ :=
                  M.alloc (|
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.apply (Ty.path "alloc::vec::Vec") [ F; Ty.path "alloc::alloc::Global" ],
                        "append",
                        []
                      |),
                      [
                        buf;
                        M.alloc (|
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.apply (Ty.path "specs::state::InitializationState") [ F; F ],
                              "plain",
                              []
                            |),
                            [
                              M.SubPointer.get_struct_record_field (|
                                M.read (| self |),
                                "delphinus_zkwasm::circuits::utils::image_table::ImageTableLayouter",
                                "initialization_state"
                              |)
                            ]
                          |)
                        |)
                      ]
                    |)
                  |) in
                let _ :=
                  M.alloc (|
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.apply (Ty.path "alloc::vec::Vec") [ F; Ty.path "alloc::alloc::Global" ],
                        "append",
                        []
                      |),
                      [
                        buf;
                        M.alloc (|
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.apply
                                (Ty.path "slice")
                                [
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    [ F; Ty.path "alloc::alloc::Global" ]
                                ],
                              "concat",
                              [ F ]
                            |),
                            [
                              M.call_closure (|
                                M.get_trait_method (|
                                  "core::ops::deref::Deref",
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    [
                                      Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        [ F; Ty.path "alloc::alloc::Global" ];
                                      Ty.path "alloc::alloc::Global"
                                    ],
                                  [],
                                  "deref",
                                  []
                                |),
                                [
                                  M.alloc (|
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::iter::traits::iterator::Iterator",
                                        Ty.apply
                                          (Ty.path "core::array::iter::IntoIter")
                                          [
                                            Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              [ F; Ty.path "alloc::alloc::Global" ]
                                          ],
                                        [],
                                        "collect",
                                        [
                                          Ty.apply
                                            (Ty.path "alloc::vec::Vec")
                                            [
                                              Ty.apply
                                                (Ty.path "alloc::vec::Vec")
                                                [ F; Ty.path "alloc::alloc::Global" ];
                                              Ty.path "alloc::alloc::Global"
                                            ]
                                        ]
                                      |),
                                      [
                                        M.call_closure (|
                                          M.get_trait_method (|
                                            "core::iter::traits::collect::IntoIterator",
                                            Ty.apply
                                              (Ty.path "array")
                                              [
                                                Ty.apply
                                                  (Ty.path "alloc::vec::Vec")
                                                  [ F; Ty.path "alloc::alloc::Global" ]
                                              ],
                                            [],
                                            "into_iter",
                                            []
                                          |),
                                          [
                                            M.call_closure (|
                                              M.get_associated_function (|
                                                Ty.apply (Ty.path "array") [ Ty.tuple [ F; F ] ],
                                                "map",
                                                [
                                                  Ty.function
                                                    [ Ty.tuple [ Ty.tuple [ F; F ] ] ]
                                                    (Ty.apply
                                                      (Ty.path "alloc::vec::Vec")
                                                      [ F; Ty.path "alloc::alloc::Global" ]);
                                                  Ty.apply
                                                    (Ty.path "alloc::vec::Vec")
                                                    [ F; Ty.path "alloc::alloc::Global" ]
                                                ]
                                              |),
                                              [
                                                M.read (|
                                                  M.SubPointer.get_struct_record_field (|
                                                    M.read (| self |),
                                                    "delphinus_zkwasm::circuits::utils::image_table::ImageTableLayouter",
                                                    "static_frame_entries"
                                                  |)
                                                |);
                                                M.closure
                                                  (fun γ =>
                                                    ltac:(M.monadic
                                                      match γ with
                                                      | [ α0 ] =>
                                                        M.match_operator (|
                                                          M.alloc (| α0 |),
                                                          [
                                                            fun γ =>
                                                              ltac:(M.monadic
                                                                (let γ0_0 :=
                                                                  M.SubPointer.get_tuple_field (|
                                                                    γ,
                                                                    0
                                                                  |) in
                                                                let γ0_1 :=
                                                                  M.SubPointer.get_tuple_field (|
                                                                    γ,
                                                                    1
                                                                  |) in
                                                                let enable := M.copy (| γ0_0 |) in
                                                                let fid := M.copy (| γ0_1 |) in
                                                                M.call_closure (|
                                                                  M.get_associated_function (|
                                                                    Ty.apply
                                                                      (Ty.path "slice")
                                                                      [ F ],
                                                                    "into_vec",
                                                                    [ Ty.path "alloc::alloc::Global"
                                                                    ]
                                                                  |),
                                                                  [
                                                                    (* Unsize *)
                                                                    M.pointer_coercion
                                                                      (M.read (|
                                                                        M.call_closure (|
                                                                          M.get_associated_function (|
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "alloc::boxed::Box")
                                                                              [
                                                                                Ty.apply
                                                                                  (Ty.path "array")
                                                                                  [ F ];
                                                                                Ty.path
                                                                                  "alloc::alloc::Global"
                                                                              ],
                                                                            "new",
                                                                            []
                                                                          |),
                                                                          [
                                                                            M.alloc (|
                                                                              Value.Array
                                                                                [
                                                                                  M.read (|
                                                                                    enable
                                                                                  |);
                                                                                  M.read (| fid |)
                                                                                ]
                                                                            |)
                                                                          ]
                                                                        |)
                                                                      |))
                                                                  ]
                                                                |)))
                                                          ]
                                                        |)
                                                      | _ => M.impossible (||)
                                                      end))
                                              ]
                                            |)
                                          ]
                                        |)
                                      ]
                                    |)
                                  |)
                                ]
                              |)
                            ]
                          |)
                        |)
                      ]
                    |)
                  |) in
                let _ :=
                  M.alloc (|
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.apply (Ty.path "alloc::vec::Vec") [ F; Ty.path "alloc::alloc::Global" ],
                        "append",
                        []
                      |),
                      [
                        buf;
                        M.alloc (|
                          M.call_closure (|
                            M.get_trait_method (|
                              "core::clone::Clone",
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                [ F; Ty.path "alloc::alloc::Global" ],
                              [],
                              "clone",
                              []
                            |),
                            [
                              M.SubPointer.get_struct_record_field (|
                                M.read (| self |),
                                "delphinus_zkwasm::circuits::utils::image_table::ImageTableLayouter",
                                "instructions"
                              |)
                            ]
                          |)
                        |)
                      ]
                    |)
                  |) in
                let _ :=
                  M.alloc (|
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.apply (Ty.path "alloc::vec::Vec") [ F; Ty.path "alloc::alloc::Global" ],
                        "append",
                        []
                      |),
                      [
                        buf;
                        M.alloc (|
                          M.call_closure (|
                            M.get_trait_method (|
                              "core::clone::Clone",
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                [ F; Ty.path "alloc::alloc::Global" ],
                              [],
                              "clone",
                              []
                            |),
                            [
                              M.SubPointer.get_struct_record_field (|
                                M.read (| self |),
                                "delphinus_zkwasm::circuits::utils::image_table::ImageTableLayouter",
                                "br_table_entires"
                              |)
                            ]
                          |)
                        |)
                      ]
                    |)
                  |) in
                let _ :=
                  M.alloc (|
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.apply (Ty.path "alloc::vec::Vec") [ F; Ty.path "alloc::alloc::Global" ],
                        "append",
                        []
                      |),
                      [
                        buf;
                        M.alloc (|
                          M.call_closure (|
                            M.get_trait_method (|
                              "core::clone::Clone",
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                [ F; Ty.path "alloc::alloc::Global" ],
                              [],
                              "clone",
                              []
                            |),
                            [
                              M.SubPointer.get_struct_record_field (|
                                M.read (| self |),
                                "delphinus_zkwasm::circuits::utils::image_table::ImageTableLayouter",
                                "padding_entires"
                              |)
                            ]
                          |)
                        |)
                      ]
                    |)
                  |) in
                let _ :=
                  M.alloc (|
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.apply (Ty.path "alloc::vec::Vec") [ F; Ty.path "alloc::alloc::Global" ],
                        "append",
                        []
                      |),
                      [
                        buf;
                        M.alloc (|
                          M.call_closure (|
                            M.get_trait_method (|
                              "core::clone::Clone",
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                [ F; Ty.path "alloc::alloc::Global" ],
                              [],
                              "clone",
                              []
                            |),
                            [
                              M.SubPointer.get_struct_record_field (|
                                M.read (| self |),
                                "delphinus_zkwasm::circuits::utils::image_table::ImageTableLayouter",
                                "init_memory_entries"
                              |)
                            ]
                          |)
                        |)
                      ]
                    |)
                  |) in
                buf
              |)))
          | _, _ => M.impossible
          end.
        
        Axiom AssociatedFunction_plain :
          forall (F : Ty.t),
          M.IsAssociatedFunction (Self F) "plain" (plain F).
      End Impl_delphinus_zkwasm_circuits_utils_image_table_ImageTableLayouter_F.
    End image_table.
  End utils.
End circuits.
