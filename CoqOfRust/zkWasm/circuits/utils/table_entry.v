(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module circuits.
  Module utils.
    Module table_entry.
      (* StructRecord
        {
          name := "MemoryWritingEntry";
          ty_params := [];
          fields :=
            [
              ("index", Ty.path "usize");
              ("entry", Ty.path "specs::mtable::MemoryTableEntry");
              ("end_eid", Ty.path "u32")
            ];
        } *)
      
      Module Impl_core_clone_Clone_for_delphinus_zkwasm_circuits_utils_table_entry_MemoryWritingEntry.
        Definition Self : Ty.t :=
          Ty.path "delphinus_zkwasm::circuits::utils::table_entry::MemoryWritingEntry".
        
        (* Clone *)
        Definition clone (τ : list Ty.t) (α : list Value.t) : M :=
          match τ, α with
          | [], [ self ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              Value.StructRecord
                "delphinus_zkwasm::circuits::utils::table_entry::MemoryWritingEntry"
                [
                  ("index",
                    M.call_closure (|
                      M.get_trait_method (|
                        "core::clone::Clone",
                        Ty.path "usize",
                        [],
                        "clone",
                        []
                      |),
                      [
                        M.SubPointer.get_struct_record_field (|
                          M.read (| self |),
                          "delphinus_zkwasm::circuits::utils::table_entry::MemoryWritingEntry",
                          "index"
                        |)
                      ]
                    |));
                  ("entry",
                    M.call_closure (|
                      M.get_trait_method (|
                        "core::clone::Clone",
                        Ty.path "specs::mtable::MemoryTableEntry",
                        [],
                        "clone",
                        []
                      |),
                      [
                        M.SubPointer.get_struct_record_field (|
                          M.read (| self |),
                          "delphinus_zkwasm::circuits::utils::table_entry::MemoryWritingEntry",
                          "entry"
                        |)
                      ]
                    |));
                  ("end_eid",
                    M.call_closure (|
                      M.get_trait_method (| "core::clone::Clone", Ty.path "u32", [], "clone", [] |),
                      [
                        M.SubPointer.get_struct_record_field (|
                          M.read (| self |),
                          "delphinus_zkwasm::circuits::utils::table_entry::MemoryWritingEntry",
                          "end_eid"
                        |)
                      ]
                    |))
                ]))
          | _, _ => M.impossible
          end.
        
        Axiom Implements :
          M.IsTraitInstance
            "core::clone::Clone"
            Self
            (* Trait polymorphic types *) []
            (* Instance *) [ ("clone", InstanceField.Method clone) ].
      End Impl_core_clone_Clone_for_delphinus_zkwasm_circuits_utils_table_entry_MemoryWritingEntry.
      
      Module Impl_core_fmt_Debug_for_delphinus_zkwasm_circuits_utils_table_entry_MemoryWritingEntry.
        Definition Self : Ty.t :=
          Ty.path "delphinus_zkwasm::circuits::utils::table_entry::MemoryWritingEntry".
        
        (* Debug *)
        Definition fmt (τ : list Ty.t) (α : list Value.t) : M :=
          match τ, α with
          | [], [ self; f ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              let f := M.alloc (| f |) in
              M.call_closure (|
                M.get_associated_function (|
                  Ty.path "core::fmt::Formatter",
                  "debug_struct_field3_finish",
                  []
                |),
                [
                  M.read (| f |);
                  M.read (| Value.String "MemoryWritingEntry" |);
                  M.read (| Value.String "index" |);
                  (* Unsize *)
                  M.pointer_coercion
                    (M.SubPointer.get_struct_record_field (|
                      M.read (| self |),
                      "delphinus_zkwasm::circuits::utils::table_entry::MemoryWritingEntry",
                      "index"
                    |));
                  M.read (| Value.String "entry" |);
                  (* Unsize *)
                  M.pointer_coercion
                    (M.SubPointer.get_struct_record_field (|
                      M.read (| self |),
                      "delphinus_zkwasm::circuits::utils::table_entry::MemoryWritingEntry",
                      "entry"
                    |));
                  M.read (| Value.String "end_eid" |);
                  (* Unsize *)
                  M.pointer_coercion
                    (M.alloc (|
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "delphinus_zkwasm::circuits::utils::table_entry::MemoryWritingEntry",
                        "end_eid"
                      |)
                    |))
                ]
              |)))
          | _, _ => M.impossible
          end.
        
        Axiom Implements :
          M.IsTraitInstance
            "core::fmt::Debug"
            Self
            (* Trait polymorphic types *) []
            (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
      End Impl_core_fmt_Debug_for_delphinus_zkwasm_circuits_utils_table_entry_MemoryWritingEntry.
      
      Module underscore.
        Module Impl_serde_ser_Serialize_for_delphinus_zkwasm_circuits_utils_table_entry_MemoryWritingEntry.
          Definition Self : Ty.t :=
            Ty.path "delphinus_zkwasm::circuits::utils::table_entry::MemoryWritingEntry".
          
          (* Serialize *)
          Definition serialize (τ : list Ty.t) (α : list Value.t) : M :=
            match τ, α with
            | [ __S ], [ self; __serializer ] =>
              ltac:(M.monadic
                (let self := M.alloc (| self |) in
                let __serializer := M.alloc (| __serializer |) in
                M.catch_return (|
                  ltac:(M.monadic
                    (M.read (|
                      let __serde_state :=
                        M.copy (|
                          M.match_operator (|
                            M.alloc (|
                              M.call_closure (|
                                M.get_trait_method (|
                                  "core::ops::try_trait::Try",
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    [ Ty.associated; Ty.associated ],
                                  [],
                                  "branch",
                                  []
                                |),
                                [
                                  M.call_closure (|
                                    M.get_trait_method (|
                                      "serde::ser::Serializer",
                                      __S,
                                      [],
                                      "serialize_struct",
                                      []
                                    |),
                                    [
                                      M.read (| __serializer |);
                                      M.read (| Value.String "MemoryWritingEntry" |);
                                      BinOp.Panic.add (|
                                        Integer.Usize,
                                        BinOp.Panic.add (|
                                          Integer.Usize,
                                          BinOp.Panic.add (|
                                            Integer.Usize,
                                            M.rust_cast (Value.Bool false),
                                            Value.Integer 1
                                          |),
                                          Value.Integer 1
                                        |),
                                        Value.Integer 1
                                      |)
                                    ]
                                  |)
                                ]
                              |)
                            |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ0_0 :=
                                    M.SubPointer.get_struct_tuple_field (|
                                      γ,
                                      "core::ops::control_flow::ControlFlow::Break",
                                      0
                                    |) in
                                  let residual := M.copy (| γ0_0 |) in
                                  M.alloc (|
                                    M.never_to_any (|
                                      M.read (|
                                        M.return_ (|
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "core::ops::try_trait::FromResidual",
                                              Ty.apply
                                                (Ty.path "core::result::Result")
                                                [ Ty.associated; Ty.associated ],
                                              [
                                                Ty.apply
                                                  (Ty.path "core::result::Result")
                                                  [
                                                    Ty.path "core::convert::Infallible";
                                                    Ty.associated
                                                  ]
                                              ],
                                              "from_residual",
                                              []
                                            |),
                                            [ M.read (| residual |) ]
                                          |)
                                        |)
                                      |)
                                    |)
                                  |)));
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ0_0 :=
                                    M.SubPointer.get_struct_tuple_field (|
                                      γ,
                                      "core::ops::control_flow::ControlFlow::Continue",
                                      0
                                    |) in
                                  let val := M.copy (| γ0_0 |) in
                                  val))
                            ]
                          |)
                        |) in
                      let _ :=
                        M.match_operator (|
                          M.alloc (|
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::ops::try_trait::Try",
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  [ Ty.tuple []; Ty.associated ],
                                [],
                                "branch",
                                []
                              |),
                              [
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "serde::ser::SerializeStruct",
                                    Ty.associated,
                                    [],
                                    "serialize_field",
                                    [ Ty.path "usize" ]
                                  |),
                                  [
                                    __serde_state;
                                    M.read (| Value.String "index" |);
                                    M.SubPointer.get_struct_record_field (|
                                      M.read (| self |),
                                      "delphinus_zkwasm::circuits::utils::table_entry::MemoryWritingEntry",
                                      "index"
                                    |)
                                  ]
                                |)
                              ]
                            |)
                          |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ0_0 :=
                                  M.SubPointer.get_struct_tuple_field (|
                                    γ,
                                    "core::ops::control_flow::ControlFlow::Break",
                                    0
                                  |) in
                                let residual := M.copy (| γ0_0 |) in
                                M.alloc (|
                                  M.never_to_any (|
                                    M.read (|
                                      M.return_ (|
                                        M.call_closure (|
                                          M.get_trait_method (|
                                            "core::ops::try_trait::FromResidual",
                                            Ty.apply
                                              (Ty.path "core::result::Result")
                                              [ Ty.associated; Ty.associated ],
                                            [
                                              Ty.apply
                                                (Ty.path "core::result::Result")
                                                [ Ty.path "core::convert::Infallible"; Ty.associated
                                                ]
                                            ],
                                            "from_residual",
                                            []
                                          |),
                                          [ M.read (| residual |) ]
                                        |)
                                      |)
                                    |)
                                  |)
                                |)));
                            fun γ =>
                              ltac:(M.monadic
                                (let γ0_0 :=
                                  M.SubPointer.get_struct_tuple_field (|
                                    γ,
                                    "core::ops::control_flow::ControlFlow::Continue",
                                    0
                                  |) in
                                let val := M.copy (| γ0_0 |) in
                                val))
                          ]
                        |) in
                      let _ :=
                        M.match_operator (|
                          M.alloc (|
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::ops::try_trait::Try",
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  [ Ty.tuple []; Ty.associated ],
                                [],
                                "branch",
                                []
                              |),
                              [
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "serde::ser::SerializeStruct",
                                    Ty.associated,
                                    [],
                                    "serialize_field",
                                    [ Ty.path "specs::mtable::MemoryTableEntry" ]
                                  |),
                                  [
                                    __serde_state;
                                    M.read (| Value.String "entry" |);
                                    M.SubPointer.get_struct_record_field (|
                                      M.read (| self |),
                                      "delphinus_zkwasm::circuits::utils::table_entry::MemoryWritingEntry",
                                      "entry"
                                    |)
                                  ]
                                |)
                              ]
                            |)
                          |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ0_0 :=
                                  M.SubPointer.get_struct_tuple_field (|
                                    γ,
                                    "core::ops::control_flow::ControlFlow::Break",
                                    0
                                  |) in
                                let residual := M.copy (| γ0_0 |) in
                                M.alloc (|
                                  M.never_to_any (|
                                    M.read (|
                                      M.return_ (|
                                        M.call_closure (|
                                          M.get_trait_method (|
                                            "core::ops::try_trait::FromResidual",
                                            Ty.apply
                                              (Ty.path "core::result::Result")
                                              [ Ty.associated; Ty.associated ],
                                            [
                                              Ty.apply
                                                (Ty.path "core::result::Result")
                                                [ Ty.path "core::convert::Infallible"; Ty.associated
                                                ]
                                            ],
                                            "from_residual",
                                            []
                                          |),
                                          [ M.read (| residual |) ]
                                        |)
                                      |)
                                    |)
                                  |)
                                |)));
                            fun γ =>
                              ltac:(M.monadic
                                (let γ0_0 :=
                                  M.SubPointer.get_struct_tuple_field (|
                                    γ,
                                    "core::ops::control_flow::ControlFlow::Continue",
                                    0
                                  |) in
                                let val := M.copy (| γ0_0 |) in
                                val))
                          ]
                        |) in
                      let _ :=
                        M.match_operator (|
                          M.alloc (|
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::ops::try_trait::Try",
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  [ Ty.tuple []; Ty.associated ],
                                [],
                                "branch",
                                []
                              |),
                              [
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "serde::ser::SerializeStruct",
                                    Ty.associated,
                                    [],
                                    "serialize_field",
                                    [ Ty.path "u32" ]
                                  |),
                                  [
                                    __serde_state;
                                    M.read (| Value.String "end_eid" |);
                                    M.SubPointer.get_struct_record_field (|
                                      M.read (| self |),
                                      "delphinus_zkwasm::circuits::utils::table_entry::MemoryWritingEntry",
                                      "end_eid"
                                    |)
                                  ]
                                |)
                              ]
                            |)
                          |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ0_0 :=
                                  M.SubPointer.get_struct_tuple_field (|
                                    γ,
                                    "core::ops::control_flow::ControlFlow::Break",
                                    0
                                  |) in
                                let residual := M.copy (| γ0_0 |) in
                                M.alloc (|
                                  M.never_to_any (|
                                    M.read (|
                                      M.return_ (|
                                        M.call_closure (|
                                          M.get_trait_method (|
                                            "core::ops::try_trait::FromResidual",
                                            Ty.apply
                                              (Ty.path "core::result::Result")
                                              [ Ty.associated; Ty.associated ],
                                            [
                                              Ty.apply
                                                (Ty.path "core::result::Result")
                                                [ Ty.path "core::convert::Infallible"; Ty.associated
                                                ]
                                            ],
                                            "from_residual",
                                            []
                                          |),
                                          [ M.read (| residual |) ]
                                        |)
                                      |)
                                    |)
                                  |)
                                |)));
                            fun γ =>
                              ltac:(M.monadic
                                (let γ0_0 :=
                                  M.SubPointer.get_struct_tuple_field (|
                                    γ,
                                    "core::ops::control_flow::ControlFlow::Continue",
                                    0
                                  |) in
                                let val := M.copy (| γ0_0 |) in
                                val))
                          ]
                        |) in
                      M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (|
                            "serde::ser::SerializeStruct",
                            Ty.associated,
                            [],
                            "end",
                            []
                          |),
                          [ M.read (| __serde_state |) ]
                        |)
                      |)
                    |)))
                |)))
            | _, _ => M.impossible
            end.
          
          Axiom Implements :
            M.IsTraitInstance
              "serde::ser::Serialize"
              Self
              (* Trait polymorphic types *) []
              (* Instance *) [ ("serialize", InstanceField.Method serialize) ].
        End Impl_serde_ser_Serialize_for_delphinus_zkwasm_circuits_utils_table_entry_MemoryWritingEntry.
        Module Impl_serde_ser_Serialize_for_delphinus_zkwasm_circuits_utils_table_entry_MemoryWritingTable.
          Definition Self : Ty.t :=
            Ty.path "delphinus_zkwasm::circuits::utils::table_entry::MemoryWritingTable".
          
          (* Serialize *)
          Definition serialize (τ : list Ty.t) (α : list Value.t) : M :=
            match τ, α with
            | [ __S ], [ self; __serializer ] =>
              ltac:(M.monadic
                (let self := M.alloc (| self |) in
                let __serializer := M.alloc (| __serializer |) in
                M.call_closure (|
                  M.get_trait_method (|
                    "serde::ser::Serializer",
                    __S,
                    [],
                    "serialize_newtype_struct",
                    [
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        [
                          Ty.path
                            "delphinus_zkwasm::circuits::utils::table_entry::MemoryWritingEntry";
                          Ty.path "alloc::alloc::Global"
                        ]
                    ]
                  |),
                  [
                    M.read (| __serializer |);
                    M.read (| Value.String "MemoryWritingTable" |);
                    M.SubPointer.get_struct_tuple_field (|
                      M.read (| self |),
                      "delphinus_zkwasm::circuits::utils::table_entry::MemoryWritingTable",
                      0
                    |)
                  ]
                |)))
            | _, _ => M.impossible
            end.
          
          Axiom Implements :
            M.IsTraitInstance
              "serde::ser::Serialize"
              Self
              (* Trait polymorphic types *) []
              (* Instance *) [ ("serialize", InstanceField.Method serialize) ].
        End Impl_serde_ser_Serialize_for_delphinus_zkwasm_circuits_utils_table_entry_MemoryWritingTable.
      End underscore.
      
      Module Impl_delphinus_zkwasm_circuits_utils_table_entry_MemoryWritingEntry.
        Definition Self : Ty.t :=
          Ty.path "delphinus_zkwasm::circuits::utils::table_entry::MemoryWritingEntry".
        
        (*
            fn is_same_memory_address(&self, other: &Self) -> bool {
                self.entry.is_same_location(&other.entry)
            }
        *)
        Definition is_same_memory_address (τ : list Ty.t) (α : list Value.t) : M :=
          match τ, α with
          | [], [ self; other ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              let other := M.alloc (| other |) in
              M.call_closure (|
                M.get_associated_function (|
                  Ty.path "specs::mtable::MemoryTableEntry",
                  "is_same_location",
                  []
                |),
                [
                  M.SubPointer.get_struct_record_field (|
                    M.read (| self |),
                    "delphinus_zkwasm::circuits::utils::table_entry::MemoryWritingEntry",
                    "entry"
                  |);
                  M.SubPointer.get_struct_record_field (|
                    M.read (| other |),
                    "delphinus_zkwasm::circuits::utils::table_entry::MemoryWritingEntry",
                    "entry"
                  |)
                ]
              |)))
          | _, _ => M.impossible
          end.
        
        Axiom AssociatedFunction_is_same_memory_address :
          M.IsAssociatedFunction Self "is_same_memory_address" is_same_memory_address.
      End Impl_delphinus_zkwasm_circuits_utils_table_entry_MemoryWritingEntry.
      
      (* StructTuple
        {
          name := "MemoryWritingTable";
          ty_params := [];
          fields :=
            [
              Ty.apply
                (Ty.path "alloc::vec::Vec")
                [
                  Ty.path "delphinus_zkwasm::circuits::utils::table_entry::MemoryWritingEntry";
                  Ty.path "alloc::alloc::Global"
                ]
            ];
        } *)
      
      Module Impl_core_fmt_Debug_for_delphinus_zkwasm_circuits_utils_table_entry_MemoryWritingTable.
        Definition Self : Ty.t :=
          Ty.path "delphinus_zkwasm::circuits::utils::table_entry::MemoryWritingTable".
        
        (* Debug *)
        Definition fmt (τ : list Ty.t) (α : list Value.t) : M :=
          match τ, α with
          | [], [ self; f ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              let f := M.alloc (| f |) in
              M.call_closure (|
                M.get_associated_function (|
                  Ty.path "core::fmt::Formatter",
                  "debug_tuple_field1_finish",
                  []
                |),
                [
                  M.read (| f |);
                  M.read (| Value.String "MemoryWritingTable" |);
                  (* Unsize *)
                  M.pointer_coercion
                    (M.alloc (|
                      M.SubPointer.get_struct_tuple_field (|
                        M.read (| self |),
                        "delphinus_zkwasm::circuits::utils::table_entry::MemoryWritingTable",
                        0
                      |)
                    |))
                ]
              |)))
          | _, _ => M.impossible
          end.
        
        Axiom Implements :
          M.IsTraitInstance
            "core::fmt::Debug"
            Self
            (* Trait polymorphic types *) []
            (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
      End Impl_core_fmt_Debug_for_delphinus_zkwasm_circuits_utils_table_entry_MemoryWritingTable.
      
      
      Module Impl_delphinus_zkwasm_circuits_utils_table_entry_MemoryWritingTable.
        Definition Self : Ty.t :=
          Ty.path "delphinus_zkwasm::circuits::utils::table_entry::MemoryWritingTable".
        
        (*
            pub(crate) fn count_rest_memory_finalize_ops(&self) -> (u32, HashSet<(LocationType, u32)>) {
                let mut count = 0u32;
                let mut set = HashSet::default();
        
                let mut iter = self.0.iter().peekable();
        
                while let Some(entry) = iter.next() {
                    if entry.entry.atype == AccessType::Write
                        && iter.peek().map_or(true, |next_entry| {
                            !next_entry.entry.is_same_location(&entry.entry)
                        })
                    {
                        set.insert((entry.entry.ltype, entry.entry.offset));
                        count += 1;
                    }
                }
        
                (count, set)
            }
        *)
        Definition count_rest_memory_finalize_ops (τ : list Ty.t) (α : list Value.t) : M :=
          match τ, α with
          | [], [ self ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              M.read (|
                let count := M.alloc (| Value.Integer 0 |) in
                let set :=
                  M.alloc (|
                    M.call_closure (|
                      M.get_trait_method (|
                        "core::default::Default",
                        Ty.apply
                          (Ty.path "std::collections::hash::set::HashSet")
                          [
                            Ty.tuple [ Ty.path "specs::mtable::LocationType"; Ty.path "u32" ];
                            Ty.path "std::hash::random::RandomState"
                          ],
                        [],
                        "default",
                        []
                      |),
                      []
                    |)
                  |) in
                let iter :=
                  M.alloc (|
                    M.call_closure (|
                      M.get_trait_method (|
                        "core::iter::traits::iterator::Iterator",
                        Ty.apply
                          (Ty.path "core::slice::iter::Iter")
                          [
                            Ty.path
                              "delphinus_zkwasm::circuits::utils::table_entry::MemoryWritingEntry"
                          ],
                        [],
                        "peekable",
                        []
                      |),
                      [
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path "slice")
                              [
                                Ty.path
                                  "delphinus_zkwasm::circuits::utils::table_entry::MemoryWritingEntry"
                              ],
                            "iter",
                            []
                          |),
                          [
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::ops::deref::Deref",
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  [
                                    Ty.path
                                      "delphinus_zkwasm::circuits::utils::table_entry::MemoryWritingEntry";
                                    Ty.path "alloc::alloc::Global"
                                  ],
                                [],
                                "deref",
                                []
                              |),
                              [
                                M.SubPointer.get_struct_tuple_field (|
                                  M.read (| self |),
                                  "delphinus_zkwasm::circuits::utils::table_entry::MemoryWritingTable",
                                  0
                                |)
                              ]
                            |)
                          ]
                        |)
                      ]
                    |)
                  |) in
                let _ :=
                  M.loop (|
                    ltac:(M.monadic
                      (M.match_operator (|
                        M.alloc (| Value.Tuple [] |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ :=
                                M.alloc (|
                                  M.call_closure (|
                                    M.get_trait_method (|
                                      "core::iter::traits::iterator::Iterator",
                                      Ty.apply
                                        (Ty.path "core::iter::adapters::peekable::Peekable")
                                        [
                                          Ty.apply
                                            (Ty.path "core::slice::iter::Iter")
                                            [
                                              Ty.path
                                                "delphinus_zkwasm::circuits::utils::table_entry::MemoryWritingEntry"
                                            ]
                                        ],
                                      [],
                                      "next",
                                      []
                                    |),
                                    [ iter ]
                                  |)
                                |) in
                              let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::option::Option::Some",
                                  0
                                |) in
                              let entry := M.copy (| γ0_0 |) in
                              M.match_operator (|
                                M.alloc (| Value.Tuple [] |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ :=
                                        M.use
                                          (M.alloc (|
                                            LogicalOp.and (|
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "core::cmp::PartialEq",
                                                  Ty.path "specs::mtable::AccessType",
                                                  [ Ty.path "specs::mtable::AccessType" ],
                                                  "eq",
                                                  []
                                                |),
                                                [
                                                  M.SubPointer.get_struct_record_field (|
                                                    M.SubPointer.get_struct_record_field (|
                                                      M.read (| entry |),
                                                      "delphinus_zkwasm::circuits::utils::table_entry::MemoryWritingEntry",
                                                      "entry"
                                                    |),
                                                    "specs::mtable::MemoryTableEntry",
                                                    "atype"
                                                  |);
                                                  M.alloc (|
                                                    Value.StructTuple
                                                      "specs::mtable::AccessType::Write"
                                                      []
                                                  |)
                                                ]
                                              |),
                                              ltac:(M.monadic
                                                (M.call_closure (|
                                                  M.get_associated_function (|
                                                    Ty.apply
                                                      (Ty.path "core::option::Option")
                                                      [
                                                        Ty.apply
                                                          (Ty.path "&")
                                                          [
                                                            Ty.apply
                                                              (Ty.path "&")
                                                              [
                                                                Ty.path
                                                                  "delphinus_zkwasm::circuits::utils::table_entry::MemoryWritingEntry"
                                                              ]
                                                          ]
                                                      ],
                                                    "map_or",
                                                    [
                                                      Ty.path "bool";
                                                      Ty.function
                                                        [
                                                          Ty.tuple
                                                            [
                                                              Ty.apply
                                                                (Ty.path "&")
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path "&")
                                                                    [
                                                                      Ty.path
                                                                        "delphinus_zkwasm::circuits::utils::table_entry::MemoryWritingEntry"
                                                                    ]
                                                                ]
                                                            ]
                                                        ]
                                                        (Ty.path "bool")
                                                    ]
                                                  |),
                                                  [
                                                    M.call_closure (|
                                                      M.get_associated_function (|
                                                        Ty.apply
                                                          (Ty.path
                                                            "core::iter::adapters::peekable::Peekable")
                                                          [
                                                            Ty.apply
                                                              (Ty.path "core::slice::iter::Iter")
                                                              [
                                                                Ty.path
                                                                  "delphinus_zkwasm::circuits::utils::table_entry::MemoryWritingEntry"
                                                              ]
                                                          ],
                                                        "peek",
                                                        []
                                                      |),
                                                      [ iter ]
                                                    |);
                                                    Value.Bool true;
                                                    M.closure
                                                      (fun γ =>
                                                        ltac:(M.monadic
                                                          match γ with
                                                          | [ α0 ] =>
                                                            M.match_operator (|
                                                              M.alloc (| α0 |),
                                                              [
                                                                fun γ =>
                                                                  ltac:(M.monadic
                                                                    (let next_entry :=
                                                                      M.copy (| γ |) in
                                                                    UnOp.Pure.not
                                                                      (M.call_closure (|
                                                                        M.get_associated_function (|
                                                                          Ty.path
                                                                            "specs::mtable::MemoryTableEntry",
                                                                          "is_same_location",
                                                                          []
                                                                        |),
                                                                        [
                                                                          M.SubPointer.get_struct_record_field (|
                                                                            M.read (|
                                                                              M.read (|
                                                                                next_entry
                                                                              |)
                                                                            |),
                                                                            "delphinus_zkwasm::circuits::utils::table_entry::MemoryWritingEntry",
                                                                            "entry"
                                                                          |);
                                                                          M.SubPointer.get_struct_record_field (|
                                                                            M.read (| entry |),
                                                                            "delphinus_zkwasm::circuits::utils::table_entry::MemoryWritingEntry",
                                                                            "entry"
                                                                          |)
                                                                        ]
                                                                      |))))
                                                              ]
                                                            |)
                                                          | _ => M.impossible (||)
                                                          end))
                                                  ]
                                                |)))
                                            |)
                                          |)) in
                                      let _ :=
                                        M.is_constant_or_break_match (|
                                          M.read (| γ |),
                                          Value.Bool true
                                        |) in
                                      let _ :=
                                        M.alloc (|
                                          M.call_closure (|
                                            M.get_associated_function (|
                                              Ty.apply
                                                (Ty.path "std::collections::hash::set::HashSet")
                                                [
                                                  Ty.tuple
                                                    [
                                                      Ty.path "specs::mtable::LocationType";
                                                      Ty.path "u32"
                                                    ];
                                                  Ty.path "std::hash::random::RandomState"
                                                ],
                                              "insert",
                                              []
                                            |),
                                            [
                                              set;
                                              Value.Tuple
                                                [
                                                  M.read (|
                                                    M.SubPointer.get_struct_record_field (|
                                                      M.SubPointer.get_struct_record_field (|
                                                        M.read (| entry |),
                                                        "delphinus_zkwasm::circuits::utils::table_entry::MemoryWritingEntry",
                                                        "entry"
                                                      |),
                                                      "specs::mtable::MemoryTableEntry",
                                                      "ltype"
                                                    |)
                                                  |);
                                                  M.read (|
                                                    M.SubPointer.get_struct_record_field (|
                                                      M.SubPointer.get_struct_record_field (|
                                                        M.read (| entry |),
                                                        "delphinus_zkwasm::circuits::utils::table_entry::MemoryWritingEntry",
                                                        "entry"
                                                      |),
                                                      "specs::mtable::MemoryTableEntry",
                                                      "offset"
                                                    |)
                                                  |)
                                                ]
                                            ]
                                          |)
                                        |) in
                                      let _ :=
                                        let β := count in
                                        M.write (|
                                          β,
                                          BinOp.Panic.add (|
                                            Integer.U32,
                                            M.read (| β |),
                                            Value.Integer 1
                                          |)
                                        |) in
                                      M.alloc (| Value.Tuple [] |)));
                                  fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                ]
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (M.alloc (|
                                M.never_to_any (|
                                  M.read (|
                                    let _ :=
                                      M.alloc (|
                                        M.never_to_any (| M.read (| M.break (||) |) |)
                                      |) in
                                    M.alloc (| Value.Tuple [] |)
                                  |)
                                |)
                              |)))
                        ]
                      |)))
                  |) in
                M.alloc (| Value.Tuple [ M.read (| count |); M.read (| set |) ] |)
              |)))
          | _, _ => M.impossible
          end.
        
        Axiom AssociatedFunction_count_rest_memory_finalize_ops :
          M.IsAssociatedFunction
            Self
            "count_rest_memory_finalize_ops"
            count_rest_memory_finalize_ops.
        
        (*
            pub fn from(k: u32, value: MTable) -> Self {
                let maximal_eid = if cfg!(feature = "continuation") {
                    u32::MAX
                } else {
                    common_range_max(k)
                };
                let mut index = 0;
        
                let mut entries: Vec<MemoryWritingEntry> = value
                    .entries()
                    .iter()
                    .filter_map(|entry| {
                        if entry.atype != AccessType::Read {
                            let entry = Some(MemoryWritingEntry {
                                index,
                                entry: entry.clone(),
                                end_eid: maximal_eid,
                            });
        
                            index += 1;
        
                            entry
                        } else {
                            None
                        }
                    })
                    .collect();
        
                let entries_next = entries.clone();
                let next_iter = entries_next.iter().skip(1);
        
                entries.iter_mut().zip(next_iter).for_each(|(curr, next)| {
                    if curr.is_same_memory_address(next) {
                        curr.end_eid = next.entry.eid;
                    }
                });
        
                // FIXME: create_memory_table pushed a lot of meaningless Stack init. Fix it elegantly.
                let entries = entries
                    .into_iter()
                    .filter(|entry| entry.entry.eid != entry.end_eid)
                    .collect();
        
                MemoryWritingTable(entries)
            }
        *)
        Definition from (τ : list Ty.t) (α : list Value.t) : M :=
          match τ, α with
          | [], [ k; value ] =>
            ltac:(M.monadic
              (let k := M.alloc (| k |) in
              let value := M.alloc (| value |) in
              M.read (|
                let maximal_eid :=
                  M.copy (|
                    M.match_operator (|
                      M.alloc (| Value.Tuple [] |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ := M.use (M.alloc (| Value.Bool false |)) in
                            let _ :=
                              M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                            M.get_constant (| "core::num::MAX" |)));
                        fun γ =>
                          ltac:(M.monadic
                            (M.alloc (|
                              M.call_closure (|
                                M.get_function (|
                                  "delphinus_zkwasm::circuits::config::common_range_max",
                                  []
                                |),
                                [ M.read (| k |) ]
                              |)
                            |)))
                      ]
                    |)
                  |) in
                let index := M.alloc (| Value.Integer 0 |) in
                let entries :=
                  M.alloc (|
                    M.call_closure (|
                      M.get_trait_method (|
                        "core::iter::traits::iterator::Iterator",
                        Ty.apply
                          (Ty.path "core::iter::adapters::filter_map::FilterMap")
                          [
                            Ty.apply
                              (Ty.path "core::slice::iter::Iter")
                              [ Ty.path "specs::mtable::MemoryTableEntry" ];
                            Ty.function
                              [
                                Ty.tuple
                                  [
                                    Ty.apply
                                      (Ty.path "&")
                                      [ Ty.path "specs::mtable::MemoryTableEntry" ]
                                  ]
                              ]
                              (Ty.apply
                                (Ty.path "core::option::Option")
                                [
                                  Ty.path
                                    "delphinus_zkwasm::circuits::utils::table_entry::MemoryWritingEntry"
                                ])
                          ],
                        [],
                        "collect",
                        [
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            [
                              Ty.path
                                "delphinus_zkwasm::circuits::utils::table_entry::MemoryWritingEntry";
                              Ty.path "alloc::alloc::Global"
                            ]
                        ]
                      |),
                      [
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::iter::traits::iterator::Iterator",
                            Ty.apply
                              (Ty.path "core::slice::iter::Iter")
                              [ Ty.path "specs::mtable::MemoryTableEntry" ],
                            [],
                            "filter_map",
                            [
                              Ty.path
                                "delphinus_zkwasm::circuits::utils::table_entry::MemoryWritingEntry";
                              Ty.function
                                [
                                  Ty.tuple
                                    [
                                      Ty.apply
                                        (Ty.path "&")
                                        [ Ty.path "specs::mtable::MemoryTableEntry" ]
                                    ]
                                ]
                                (Ty.apply
                                  (Ty.path "core::option::Option")
                                  [
                                    Ty.path
                                      "delphinus_zkwasm::circuits::utils::table_entry::MemoryWritingEntry"
                                  ])
                            ]
                          |),
                          [
                            M.call_closure (|
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path "slice")
                                  [ Ty.path "specs::mtable::MemoryTableEntry" ],
                                "iter",
                                []
                              |),
                              [
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "core::ops::deref::Deref",
                                    Ty.apply
                                      (Ty.path "alloc::vec::Vec")
                                      [
                                        Ty.path "specs::mtable::MemoryTableEntry";
                                        Ty.path "alloc::alloc::Global"
                                      ],
                                    [],
                                    "deref",
                                    []
                                  |),
                                  [
                                    M.call_closure (|
                                      M.get_associated_function (|
                                        Ty.path "specs::mtable::MTable",
                                        "entries",
                                        []
                                      |),
                                      [ value ]
                                    |)
                                  ]
                                |)
                              ]
                            |);
                            M.closure
                              (fun γ =>
                                ltac:(M.monadic
                                  match γ with
                                  | [ α0 ] =>
                                    M.match_operator (|
                                      M.alloc (| α0 |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let entry := M.copy (| γ |) in
                                            M.read (|
                                              M.match_operator (|
                                                M.alloc (| Value.Tuple [] |),
                                                [
                                                  fun γ =>
                                                    ltac:(M.monadic
                                                      (let γ :=
                                                        M.use
                                                          (M.alloc (|
                                                            M.call_closure (|
                                                              M.get_trait_method (|
                                                                "core::cmp::PartialEq",
                                                                Ty.path "specs::mtable::AccessType",
                                                                [
                                                                  Ty.path
                                                                    "specs::mtable::AccessType"
                                                                ],
                                                                "ne",
                                                                []
                                                              |),
                                                              [
                                                                M.SubPointer.get_struct_record_field (|
                                                                  M.read (| entry |),
                                                                  "specs::mtable::MemoryTableEntry",
                                                                  "atype"
                                                                |);
                                                                M.alloc (|
                                                                  Value.StructTuple
                                                                    "specs::mtable::AccessType::Read"
                                                                    []
                                                                |)
                                                              ]
                                                            |)
                                                          |)) in
                                                      let _ :=
                                                        M.is_constant_or_break_match (|
                                                          M.read (| γ |),
                                                          Value.Bool true
                                                        |) in
                                                      let entry :=
                                                        M.alloc (|
                                                          Value.StructTuple
                                                            "core::option::Option::Some"
                                                            [
                                                              Value.StructRecord
                                                                "delphinus_zkwasm::circuits::utils::table_entry::MemoryWritingEntry"
                                                                [
                                                                  ("index", M.read (| index |));
                                                                  ("entry",
                                                                    M.call_closure (|
                                                                      M.get_trait_method (|
                                                                        "core::clone::Clone",
                                                                        Ty.path
                                                                          "specs::mtable::MemoryTableEntry",
                                                                        [],
                                                                        "clone",
                                                                        []
                                                                      |),
                                                                      [ M.read (| entry |) ]
                                                                    |));
                                                                  ("end_eid",
                                                                    M.read (| maximal_eid |))
                                                                ]
                                                            ]
                                                        |) in
                                                      let _ :=
                                                        let β := index in
                                                        M.write (|
                                                          β,
                                                          BinOp.Panic.add (|
                                                            Integer.Usize,
                                                            M.read (| β |),
                                                            Value.Integer 1
                                                          |)
                                                        |) in
                                                      entry));
                                                  fun γ =>
                                                    ltac:(M.monadic
                                                      (M.alloc (|
                                                        Value.StructTuple
                                                          "core::option::Option::None"
                                                          []
                                                      |)))
                                                ]
                                              |)
                                            |)))
                                      ]
                                    |)
                                  | _ => M.impossible (||)
                                  end))
                          ]
                        |)
                      ]
                    |)
                  |) in
                let entries_next :=
                  M.alloc (|
                    M.call_closure (|
                      M.get_trait_method (|
                        "core::clone::Clone",
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          [
                            Ty.path
                              "delphinus_zkwasm::circuits::utils::table_entry::MemoryWritingEntry";
                            Ty.path "alloc::alloc::Global"
                          ],
                        [],
                        "clone",
                        []
                      |),
                      [ entries ]
                    |)
                  |) in
                let next_iter :=
                  M.alloc (|
                    M.call_closure (|
                      M.get_trait_method (|
                        "core::iter::traits::iterator::Iterator",
                        Ty.apply
                          (Ty.path "core::slice::iter::Iter")
                          [
                            Ty.path
                              "delphinus_zkwasm::circuits::utils::table_entry::MemoryWritingEntry"
                          ],
                        [],
                        "skip",
                        []
                      |),
                      [
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path "slice")
                              [
                                Ty.path
                                  "delphinus_zkwasm::circuits::utils::table_entry::MemoryWritingEntry"
                              ],
                            "iter",
                            []
                          |),
                          [
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::ops::deref::Deref",
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  [
                                    Ty.path
                                      "delphinus_zkwasm::circuits::utils::table_entry::MemoryWritingEntry";
                                    Ty.path "alloc::alloc::Global"
                                  ],
                                [],
                                "deref",
                                []
                              |),
                              [ entries_next ]
                            |)
                          ]
                        |);
                        Value.Integer 1
                      ]
                    |)
                  |) in
                let _ :=
                  M.alloc (|
                    M.call_closure (|
                      M.get_trait_method (|
                        "core::iter::traits::iterator::Iterator",
                        Ty.apply
                          (Ty.path "core::iter::adapters::zip::Zip")
                          [
                            Ty.apply
                              (Ty.path "core::slice::iter::IterMut")
                              [
                                Ty.path
                                  "delphinus_zkwasm::circuits::utils::table_entry::MemoryWritingEntry"
                              ];
                            Ty.apply
                              (Ty.path "core::iter::adapters::skip::Skip")
                              [
                                Ty.apply
                                  (Ty.path "core::slice::iter::Iter")
                                  [
                                    Ty.path
                                      "delphinus_zkwasm::circuits::utils::table_entry::MemoryWritingEntry"
                                  ]
                              ]
                          ],
                        [],
                        "for_each",
                        [
                          Ty.function
                            [
                              Ty.tuple
                                [
                                  Ty.tuple
                                    [
                                      Ty.apply
                                        (Ty.path "&mut")
                                        [
                                          Ty.path
                                            "delphinus_zkwasm::circuits::utils::table_entry::MemoryWritingEntry"
                                        ];
                                      Ty.apply
                                        (Ty.path "&")
                                        [
                                          Ty.path
                                            "delphinus_zkwasm::circuits::utils::table_entry::MemoryWritingEntry"
                                        ]
                                    ]
                                ]
                            ]
                            (Ty.tuple [])
                        ]
                      |),
                      [
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::iter::traits::iterator::Iterator",
                            Ty.apply
                              (Ty.path "core::slice::iter::IterMut")
                              [
                                Ty.path
                                  "delphinus_zkwasm::circuits::utils::table_entry::MemoryWritingEntry"
                              ],
                            [],
                            "zip",
                            [
                              Ty.apply
                                (Ty.path "core::iter::adapters::skip::Skip")
                                [
                                  Ty.apply
                                    (Ty.path "core::slice::iter::Iter")
                                    [
                                      Ty.path
                                        "delphinus_zkwasm::circuits::utils::table_entry::MemoryWritingEntry"
                                    ]
                                ]
                            ]
                          |),
                          [
                            M.call_closure (|
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path "slice")
                                  [
                                    Ty.path
                                      "delphinus_zkwasm::circuits::utils::table_entry::MemoryWritingEntry"
                                  ],
                                "iter_mut",
                                []
                              |),
                              [
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "core::ops::deref::DerefMut",
                                    Ty.apply
                                      (Ty.path "alloc::vec::Vec")
                                      [
                                        Ty.path
                                          "delphinus_zkwasm::circuits::utils::table_entry::MemoryWritingEntry";
                                        Ty.path "alloc::alloc::Global"
                                      ],
                                    [],
                                    "deref_mut",
                                    []
                                  |),
                                  [ entries ]
                                |)
                              ]
                            |);
                            M.read (| next_iter |)
                          ]
                        |);
                        M.closure
                          (fun γ =>
                            ltac:(M.monadic
                              match γ with
                              | [ α0 ] =>
                                M.match_operator (|
                                  M.alloc (| α0 |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                                        let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                                        let curr := M.copy (| γ0_0 |) in
                                        let next := M.copy (| γ0_1 |) in
                                        M.read (|
                                          M.match_operator (|
                                            M.alloc (| Value.Tuple [] |),
                                            [
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let γ :=
                                                    M.use
                                                      (M.alloc (|
                                                        M.call_closure (|
                                                          M.get_associated_function (|
                                                            Ty.path
                                                              "delphinus_zkwasm::circuits::utils::table_entry::MemoryWritingEntry",
                                                            "is_same_memory_address",
                                                            []
                                                          |),
                                                          [ M.read (| curr |); M.read (| next |) ]
                                                        |)
                                                      |)) in
                                                  let _ :=
                                                    M.is_constant_or_break_match (|
                                                      M.read (| γ |),
                                                      Value.Bool true
                                                    |) in
                                                  let _ :=
                                                    M.write (|
                                                      M.SubPointer.get_struct_record_field (|
                                                        M.read (| curr |),
                                                        "delphinus_zkwasm::circuits::utils::table_entry::MemoryWritingEntry",
                                                        "end_eid"
                                                      |),
                                                      M.read (|
                                                        M.SubPointer.get_struct_record_field (|
                                                          M.SubPointer.get_struct_record_field (|
                                                            M.read (| next |),
                                                            "delphinus_zkwasm::circuits::utils::table_entry::MemoryWritingEntry",
                                                            "entry"
                                                          |),
                                                          "specs::mtable::MemoryTableEntry",
                                                          "eid"
                                                        |)
                                                      |)
                                                    |) in
                                                  M.alloc (| Value.Tuple [] |)));
                                              fun γ =>
                                                ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                            ]
                                          |)
                                        |)))
                                  ]
                                |)
                              | _ => M.impossible (||)
                              end))
                      ]
                    |)
                  |) in
                let entries :=
                  M.alloc (|
                    M.call_closure (|
                      M.get_trait_method (|
                        "core::iter::traits::iterator::Iterator",
                        Ty.apply
                          (Ty.path "core::iter::adapters::filter::Filter")
                          [
                            Ty.apply
                              (Ty.path "alloc::vec::into_iter::IntoIter")
                              [
                                Ty.path
                                  "delphinus_zkwasm::circuits::utils::table_entry::MemoryWritingEntry";
                                Ty.path "alloc::alloc::Global"
                              ];
                            Ty.function
                              [
                                Ty.tuple
                                  [
                                    Ty.apply
                                      (Ty.path "&")
                                      [
                                        Ty.path
                                          "delphinus_zkwasm::circuits::utils::table_entry::MemoryWritingEntry"
                                      ]
                                  ]
                              ]
                              (Ty.path "bool")
                          ],
                        [],
                        "collect",
                        [
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            [
                              Ty.path
                                "delphinus_zkwasm::circuits::utils::table_entry::MemoryWritingEntry";
                              Ty.path "alloc::alloc::Global"
                            ]
                        ]
                      |),
                      [
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::iter::traits::iterator::Iterator",
                            Ty.apply
                              (Ty.path "alloc::vec::into_iter::IntoIter")
                              [
                                Ty.path
                                  "delphinus_zkwasm::circuits::utils::table_entry::MemoryWritingEntry";
                                Ty.path "alloc::alloc::Global"
                              ],
                            [],
                            "filter",
                            [
                              Ty.function
                                [
                                  Ty.tuple
                                    [
                                      Ty.apply
                                        (Ty.path "&")
                                        [
                                          Ty.path
                                            "delphinus_zkwasm::circuits::utils::table_entry::MemoryWritingEntry"
                                        ]
                                    ]
                                ]
                                (Ty.path "bool")
                            ]
                          |),
                          [
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::iter::traits::collect::IntoIterator",
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  [
                                    Ty.path
                                      "delphinus_zkwasm::circuits::utils::table_entry::MemoryWritingEntry";
                                    Ty.path "alloc::alloc::Global"
                                  ],
                                [],
                                "into_iter",
                                []
                              |),
                              [ M.read (| entries |) ]
                            |);
                            M.closure
                              (fun γ =>
                                ltac:(M.monadic
                                  match γ with
                                  | [ α0 ] =>
                                    M.match_operator (|
                                      M.alloc (| α0 |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let entry := M.copy (| γ |) in
                                            BinOp.Pure.ne
                                              (M.read (|
                                                M.SubPointer.get_struct_record_field (|
                                                  M.SubPointer.get_struct_record_field (|
                                                    M.read (| entry |),
                                                    "delphinus_zkwasm::circuits::utils::table_entry::MemoryWritingEntry",
                                                    "entry"
                                                  |),
                                                  "specs::mtable::MemoryTableEntry",
                                                  "eid"
                                                |)
                                              |))
                                              (M.read (|
                                                M.SubPointer.get_struct_record_field (|
                                                  M.read (| entry |),
                                                  "delphinus_zkwasm::circuits::utils::table_entry::MemoryWritingEntry",
                                                  "end_eid"
                                                |)
                                              |))))
                                      ]
                                    |)
                                  | _ => M.impossible (||)
                                  end))
                          ]
                        |)
                      ]
                    |)
                  |) in
                M.alloc (|
                  Value.StructTuple
                    "delphinus_zkwasm::circuits::utils::table_entry::MemoryWritingTable"
                    [ M.read (| entries |) ]
                |)
              |)))
          | _, _ => M.impossible
          end.
        
        Axiom AssociatedFunction_from : M.IsAssociatedFunction Self "from" from.
        (*
            fn build_lookup_mapping(&self) -> BTreeMap<(LocationType, u32), Vec<(u32, u32)>> {
                let mut mapping = BTreeMap::<_, Vec<(u32, u32)>>::new();
        
                for entry in &self.0 {
                    let ltype = entry.entry.ltype;
                    let offset = entry.entry.offset;
                    let start_eid = entry.entry.eid;
                    let end_eid = entry.end_eid;
        
                    if let Some(entries) = mapping.get_mut(&(ltype, offset)) {
                        entries.push((start_eid, end_eid));
                    } else {
                        mapping.insert((ltype, offset), vec![(start_eid, end_eid)]);
                    }
                }
        
                mapping
            }
        *)
        Definition build_lookup_mapping (τ : list Ty.t) (α : list Value.t) : M :=
          match τ, α with
          | [], [ self ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              M.read (|
                let mapping :=
                  M.alloc (|
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path "alloc::collections::btree::map::BTreeMap")
                          [
                            Ty.tuple [ Ty.path "specs::mtable::LocationType"; Ty.path "u32" ];
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              [
                                Ty.tuple [ Ty.path "u32"; Ty.path "u32" ];
                                Ty.path "alloc::alloc::Global"
                              ];
                            Ty.path "alloc::alloc::Global"
                          ],
                        "new",
                        []
                      |),
                      []
                    |)
                  |) in
                let _ :=
                  M.use
                    (M.match_operator (|
                      M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::iter::traits::collect::IntoIterator",
                            Ty.apply
                              (Ty.path "&")
                              [
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  [
                                    Ty.path
                                      "delphinus_zkwasm::circuits::utils::table_entry::MemoryWritingEntry";
                                    Ty.path "alloc::alloc::Global"
                                  ]
                              ],
                            [],
                            "into_iter",
                            []
                          |),
                          [
                            M.SubPointer.get_struct_tuple_field (|
                              M.read (| self |),
                              "delphinus_zkwasm::circuits::utils::table_entry::MemoryWritingTable",
                              0
                            |)
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let iter := M.copy (| γ |) in
                            M.loop (|
                              ltac:(M.monadic
                                (let _ :=
                                  M.match_operator (|
                                    M.alloc (|
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "core::iter::traits::iterator::Iterator",
                                          Ty.apply
                                            (Ty.path "core::slice::iter::Iter")
                                            [
                                              Ty.path
                                                "delphinus_zkwasm::circuits::utils::table_entry::MemoryWritingEntry"
                                            ],
                                          [],
                                          "next",
                                          []
                                        |),
                                        [ iter ]
                                      |)
                                    |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (M.alloc (|
                                            M.never_to_any (| M.read (| M.break (||) |) |)
                                          |)));
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let γ0_0 :=
                                            M.SubPointer.get_struct_tuple_field (|
                                              γ,
                                              "core::option::Option::Some",
                                              0
                                            |) in
                                          let entry := M.copy (| γ0_0 |) in
                                          let ltype :=
                                            M.copy (|
                                              M.SubPointer.get_struct_record_field (|
                                                M.SubPointer.get_struct_record_field (|
                                                  M.read (| entry |),
                                                  "delphinus_zkwasm::circuits::utils::table_entry::MemoryWritingEntry",
                                                  "entry"
                                                |),
                                                "specs::mtable::MemoryTableEntry",
                                                "ltype"
                                              |)
                                            |) in
                                          let offset :=
                                            M.copy (|
                                              M.SubPointer.get_struct_record_field (|
                                                M.SubPointer.get_struct_record_field (|
                                                  M.read (| entry |),
                                                  "delphinus_zkwasm::circuits::utils::table_entry::MemoryWritingEntry",
                                                  "entry"
                                                |),
                                                "specs::mtable::MemoryTableEntry",
                                                "offset"
                                              |)
                                            |) in
                                          let start_eid :=
                                            M.copy (|
                                              M.SubPointer.get_struct_record_field (|
                                                M.SubPointer.get_struct_record_field (|
                                                  M.read (| entry |),
                                                  "delphinus_zkwasm::circuits::utils::table_entry::MemoryWritingEntry",
                                                  "entry"
                                                |),
                                                "specs::mtable::MemoryTableEntry",
                                                "eid"
                                              |)
                                            |) in
                                          let end_eid :=
                                            M.copy (|
                                              M.SubPointer.get_struct_record_field (|
                                                M.read (| entry |),
                                                "delphinus_zkwasm::circuits::utils::table_entry::MemoryWritingEntry",
                                                "end_eid"
                                              |)
                                            |) in
                                          M.match_operator (|
                                            M.alloc (| Value.Tuple [] |),
                                            [
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let γ :=
                                                    M.alloc (|
                                                      M.call_closure (|
                                                        M.get_associated_function (|
                                                          Ty.apply
                                                            (Ty.path
                                                              "alloc::collections::btree::map::BTreeMap")
                                                            [
                                                              Ty.tuple
                                                                [
                                                                  Ty.path
                                                                    "specs::mtable::LocationType";
                                                                  Ty.path "u32"
                                                                ];
                                                              Ty.apply
                                                                (Ty.path "alloc::vec::Vec")
                                                                [
                                                                  Ty.tuple
                                                                    [ Ty.path "u32"; Ty.path "u32"
                                                                    ];
                                                                  Ty.path "alloc::alloc::Global"
                                                                ];
                                                              Ty.path "alloc::alloc::Global"
                                                            ],
                                                          "get_mut",
                                                          [
                                                            Ty.tuple
                                                              [
                                                                Ty.path
                                                                  "specs::mtable::LocationType";
                                                                Ty.path "u32"
                                                              ]
                                                          ]
                                                        |),
                                                        [
                                                          mapping;
                                                          M.alloc (|
                                                            Value.Tuple
                                                              [
                                                                M.read (| ltype |);
                                                                M.read (| offset |)
                                                              ]
                                                          |)
                                                        ]
                                                      |)
                                                    |) in
                                                  let γ0_0 :=
                                                    M.SubPointer.get_struct_tuple_field (|
                                                      γ,
                                                      "core::option::Option::Some",
                                                      0
                                                    |) in
                                                  let entries := M.copy (| γ0_0 |) in
                                                  let _ :=
                                                    M.alloc (|
                                                      M.call_closure (|
                                                        M.get_associated_function (|
                                                          Ty.apply
                                                            (Ty.path "alloc::vec::Vec")
                                                            [
                                                              Ty.tuple
                                                                [ Ty.path "u32"; Ty.path "u32" ];
                                                              Ty.path "alloc::alloc::Global"
                                                            ],
                                                          "push",
                                                          []
                                                        |),
                                                        [
                                                          M.read (| entries |);
                                                          Value.Tuple
                                                            [
                                                              M.read (| start_eid |);
                                                              M.read (| end_eid |)
                                                            ]
                                                        ]
                                                      |)
                                                    |) in
                                                  M.alloc (| Value.Tuple [] |)));
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let _ :=
                                                    M.alloc (|
                                                      M.call_closure (|
                                                        M.get_associated_function (|
                                                          Ty.apply
                                                            (Ty.path
                                                              "alloc::collections::btree::map::BTreeMap")
                                                            [
                                                              Ty.tuple
                                                                [
                                                                  Ty.path
                                                                    "specs::mtable::LocationType";
                                                                  Ty.path "u32"
                                                                ];
                                                              Ty.apply
                                                                (Ty.path "alloc::vec::Vec")
                                                                [
                                                                  Ty.tuple
                                                                    [ Ty.path "u32"; Ty.path "u32"
                                                                    ];
                                                                  Ty.path "alloc::alloc::Global"
                                                                ];
                                                              Ty.path "alloc::alloc::Global"
                                                            ],
                                                          "insert",
                                                          []
                                                        |),
                                                        [
                                                          mapping;
                                                          Value.Tuple
                                                            [
                                                              M.read (| ltype |);
                                                              M.read (| offset |)
                                                            ];
                                                          M.call_closure (|
                                                            M.get_associated_function (|
                                                              Ty.apply
                                                                (Ty.path "slice")
                                                                [
                                                                  Ty.tuple
                                                                    [ Ty.path "u32"; Ty.path "u32" ]
                                                                ],
                                                              "into_vec",
                                                              [ Ty.path "alloc::alloc::Global" ]
                                                            |),
                                                            [
                                                              (* Unsize *)
                                                              M.pointer_coercion
                                                                (M.read (|
                                                                  M.call_closure (|
                                                                    M.get_associated_function (|
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "alloc::boxed::Box")
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path "array")
                                                                            [
                                                                              Ty.tuple
                                                                                [
                                                                                  Ty.path "u32";
                                                                                  Ty.path "u32"
                                                                                ]
                                                                            ];
                                                                          Ty.path
                                                                            "alloc::alloc::Global"
                                                                        ],
                                                                      "new",
                                                                      []
                                                                    |),
                                                                    [
                                                                      M.alloc (|
                                                                        Value.Array
                                                                          [
                                                                            Value.Tuple
                                                                              [
                                                                                M.read (|
                                                                                  start_eid
                                                                                |);
                                                                                M.read (| end_eid |)
                                                                              ]
                                                                          ]
                                                                      |)
                                                                    ]
                                                                  |)
                                                                |))
                                                            ]
                                                          |)
                                                        ]
                                                      |)
                                                    |) in
                                                  M.alloc (| Value.Tuple [] |)))
                                            ]
                                          |)))
                                    ]
                                  |) in
                                M.alloc (| Value.Tuple [] |)))
                            |)))
                      ]
                    |)) in
                mapping
              |)))
          | _, _ => M.impossible
          end.
        
        Axiom AssociatedFunction_build_lookup_mapping :
          M.IsAssociatedFunction Self "build_lookup_mapping" build_lookup_mapping.
        
        (*
            pub fn write_json(&self, dir: Option<PathBuf>) {
                fn write_file(folder: &PathBuf, filename: &str, buf: &String) {
                    let mut folder = folder.clone();
                    folder.push(filename);
                    let mut fd = std::fs::File::create(folder.as_path()).unwrap();
                    folder.pop();
        
                    fd.write(buf.as_bytes()).unwrap();
                }
        
                let mtable = serde_json::to_string_pretty(self).unwrap();
        
                let dir = dir.unwrap_or(env::current_dir().unwrap());
                write_file(&dir, "memory_writing_table.json", &mtable);
            }
        *)
        Definition write_json (τ : list Ty.t) (α : list Value.t) : M :=
          match τ, α with
          | [], [ self; dir ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              let dir := M.alloc (| dir |) in
              M.read (|
                let mtable :=
                  M.alloc (|
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path "core::result::Result")
                          [ Ty.path "alloc::string::String"; Ty.path "serde_json::error::Error" ],
                        "unwrap",
                        []
                      |),
                      [
                        M.call_closure (|
                          M.get_function (|
                            "serde_json::ser::to_string_pretty",
                            [
                              Ty.path
                                "delphinus_zkwasm::circuits::utils::table_entry::MemoryWritingTable"
                            ]
                          |),
                          [ M.read (| self |) ]
                        |)
                      ]
                    |)
                  |) in
                let dir :=
                  M.alloc (|
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.apply (Ty.path "core::option::Option") [ Ty.path "std::path::PathBuf" ],
                        "unwrap_or",
                        []
                      |),
                      [
                        M.read (| dir |);
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path "core::result::Result")
                              [ Ty.path "std::path::PathBuf"; Ty.path "std::io::error::Error" ],
                            "unwrap",
                            []
                          |),
                          [
                            M.call_closure (|
                              M.get_function (| "std::env::current_dir", [] |),
                              []
                            |)
                          ]
                        |)
                      ]
                    |)
                  |) in
                let _ :=
                  M.alloc (|
                    M.call_closure (|
                      M.get_associated_function (| Self, "write_file.write_json", [] |),
                      [ dir; M.read (| Value.String "memory_writing_table.json" |); mtable ]
                    |)
                  |) in
                M.alloc (| Value.Tuple [] |)
              |)))
          | _, _ => M.impossible
          end.
        
        Axiom AssociatedFunction_write_json : M.IsAssociatedFunction Self "write_json" write_json.
      End Impl_delphinus_zkwasm_circuits_utils_table_entry_MemoryWritingTable.
      
      
      (* StructRecord
        {
          name := "MemoryRWEntry";
          ty_params := [];
          fields :=
            [
              ("entry", Ty.path "specs::mtable::MemoryTableEntry");
              ("start_eid", Ty.path "u32");
              ("end_eid", Ty.path "u32")
            ];
        } *)
      
      Module Impl_core_fmt_Debug_for_delphinus_zkwasm_circuits_utils_table_entry_MemoryRWEntry.
        Definition Self : Ty.t :=
          Ty.path "delphinus_zkwasm::circuits::utils::table_entry::MemoryRWEntry".
        
        (* Debug *)
        Definition fmt (τ : list Ty.t) (α : list Value.t) : M :=
          match τ, α with
          | [], [ self; f ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              let f := M.alloc (| f |) in
              M.call_closure (|
                M.get_associated_function (|
                  Ty.path "core::fmt::Formatter",
                  "debug_struct_field3_finish",
                  []
                |),
                [
                  M.read (| f |);
                  M.read (| Value.String "MemoryRWEntry" |);
                  M.read (| Value.String "entry" |);
                  (* Unsize *)
                  M.pointer_coercion
                    (M.SubPointer.get_struct_record_field (|
                      M.read (| self |),
                      "delphinus_zkwasm::circuits::utils::table_entry::MemoryRWEntry",
                      "entry"
                    |));
                  M.read (| Value.String "start_eid" |);
                  (* Unsize *)
                  M.pointer_coercion
                    (M.SubPointer.get_struct_record_field (|
                      M.read (| self |),
                      "delphinus_zkwasm::circuits::utils::table_entry::MemoryRWEntry",
                      "start_eid"
                    |));
                  M.read (| Value.String "end_eid" |);
                  (* Unsize *)
                  M.pointer_coercion
                    (M.alloc (|
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "delphinus_zkwasm::circuits::utils::table_entry::MemoryRWEntry",
                        "end_eid"
                      |)
                    |))
                ]
              |)))
          | _, _ => M.impossible
          end.
        
        Axiom Implements :
          M.IsTraitInstance
            "core::fmt::Debug"
            Self
            (* Trait polymorphic types *) []
            (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
      End Impl_core_fmt_Debug_for_delphinus_zkwasm_circuits_utils_table_entry_MemoryRWEntry.
      
      (* StructRecord
        {
          name := "EventTableEntryWithMemoryInfo";
          ty_params := [];
          fields :=
            [
              ("eentry", Ty.path "specs::etable::EventTableEntry");
              ("memory_rw_entires",
                Ty.apply
                  (Ty.path "alloc::vec::Vec")
                  [
                    Ty.path "delphinus_zkwasm::circuits::utils::table_entry::MemoryRWEntry";
                    Ty.path "alloc::alloc::Global"
                  ])
            ];
        } *)
      
      Module Impl_core_fmt_Debug_for_delphinus_zkwasm_circuits_utils_table_entry_EventTableEntryWithMemoryInfo.
        Definition Self : Ty.t :=
          Ty.path "delphinus_zkwasm::circuits::utils::table_entry::EventTableEntryWithMemoryInfo".
        
        (* Debug *)
        Definition fmt (τ : list Ty.t) (α : list Value.t) : M :=
          match τ, α with
          | [], [ self; f ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              let f := M.alloc (| f |) in
              M.call_closure (|
                M.get_associated_function (|
                  Ty.path "core::fmt::Formatter",
                  "debug_struct_field2_finish",
                  []
                |),
                [
                  M.read (| f |);
                  M.read (| Value.String "EventTableEntryWithMemoryInfo" |);
                  M.read (| Value.String "eentry" |);
                  (* Unsize *)
                  M.pointer_coercion
                    (M.SubPointer.get_struct_record_field (|
                      M.read (| self |),
                      "delphinus_zkwasm::circuits::utils::table_entry::EventTableEntryWithMemoryInfo",
                      "eentry"
                    |));
                  M.read (| Value.String "memory_rw_entires" |);
                  (* Unsize *)
                  M.pointer_coercion
                    (M.alloc (|
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "delphinus_zkwasm::circuits::utils::table_entry::EventTableEntryWithMemoryInfo",
                        "memory_rw_entires"
                      |)
                    |))
                ]
              |)))
          | _, _ => M.impossible
          end.
        
        Axiom Implements :
          M.IsTraitInstance
            "core::fmt::Debug"
            Self
            (* Trait polymorphic types *) []
            (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
      End Impl_core_fmt_Debug_for_delphinus_zkwasm_circuits_utils_table_entry_EventTableEntryWithMemoryInfo.
      
      (* StructTuple
        {
          name := "EventTableWithMemoryInfo";
          ty_params := [];
          fields :=
            [
              Ty.apply
                (Ty.path "alloc::vec::Vec")
                [
                  Ty.path
                    "delphinus_zkwasm::circuits::utils::table_entry::EventTableEntryWithMemoryInfo";
                  Ty.path "alloc::alloc::Global"
                ]
            ];
        } *)
      
      Module Impl_core_fmt_Debug_for_delphinus_zkwasm_circuits_utils_table_entry_EventTableWithMemoryInfo.
        Definition Self : Ty.t :=
          Ty.path "delphinus_zkwasm::circuits::utils::table_entry::EventTableWithMemoryInfo".
        
        (* Debug *)
        Definition fmt (τ : list Ty.t) (α : list Value.t) : M :=
          match τ, α with
          | [], [ self; f ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              let f := M.alloc (| f |) in
              M.call_closure (|
                M.get_associated_function (|
                  Ty.path "core::fmt::Formatter",
                  "debug_tuple_field1_finish",
                  []
                |),
                [
                  M.read (| f |);
                  M.read (| Value.String "EventTableWithMemoryInfo" |);
                  (* Unsize *)
                  M.pointer_coercion
                    (M.alloc (|
                      M.SubPointer.get_struct_tuple_field (|
                        M.read (| self |),
                        "delphinus_zkwasm::circuits::utils::table_entry::EventTableWithMemoryInfo",
                        0
                      |)
                    |))
                ]
              |)))
          | _, _ => M.impossible
          end.
        
        Axiom Implements :
          M.IsTraitInstance
            "core::fmt::Debug"
            Self
            (* Trait polymorphic types *) []
            (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
      End Impl_core_fmt_Debug_for_delphinus_zkwasm_circuits_utils_table_entry_EventTableWithMemoryInfo.
      
      Module Impl_delphinus_zkwasm_circuits_utils_table_entry_EventTableWithMemoryInfo.
        Definition Self : Ty.t :=
          Ty.path "delphinus_zkwasm::circuits::utils::table_entry::EventTableWithMemoryInfo".
        
        (*
            pub(in crate::circuits) fn new(
                event_table: &EventTable,
                memory_writing_table: &MemoryWritingTable,
            ) -> Self {
                let lookup = memory_writing_table.build_lookup_mapping();
        
                let lookup_mtable_eid = |(eid, ltype, offset, is_writing)| {
                    let records = lookup.get(&(ltype, offset)).unwrap();
        
                    if is_writing {
                        let idx = records
                            .binary_search_by(|(start_eid, _)| start_eid.cmp(eid))
                            .unwrap();
                        records[idx]
                    } else {
                        let idx = records
                            .binary_search_by(|(start_eid, end_eid)| {
                                if eid <= start_eid {
                                    Ordering::Greater
                                } else if eid > end_eid {
                                    Ordering::Less
                                } else {
                                    Ordering::Equal
                                }
                            })
                            .unwrap();
        
                        records[idx]
                    }
                };
        
                EventTableWithMemoryInfo(
                    event_table
                        .entries()
                        .iter()
                        .map(|eentry| EventTableEntryWithMemoryInfo {
                            eentry: eentry.clone(),
                            memory_rw_entires: memory_event_of_step(eentry)
                                .iter()
                                .map(|mentry| {
                                    let (start_eid, end_eid) = lookup_mtable_eid((
                                        &eentry.eid,
                                        mentry.ltype,
                                        mentry.offset,
                                        mentry.atype == AccessType::Write,
                                    ));
        
                                    MemoryRWEntry {
                                        entry: mentry.clone(),
                                        start_eid,
                                        end_eid,
                                    }
                                })
                                .collect(),
                        })
                        .collect(),
                )
            }
        *)
        Definition new (τ : list Ty.t) (α : list Value.t) : M :=
          match τ, α with
          | [], [ event_table; memory_writing_table ] =>
            ltac:(M.monadic
              (let event_table := M.alloc (| event_table |) in
              let memory_writing_table := M.alloc (| memory_writing_table |) in
              M.read (|
                let lookup :=
                  M.alloc (|
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.path
                          "delphinus_zkwasm::circuits::utils::table_entry::MemoryWritingTable",
                        "build_lookup_mapping",
                        []
                      |),
                      [ M.read (| memory_writing_table |) ]
                    |)
                  |) in
                let lookup_mtable_eid :=
                  M.alloc (|
                    M.closure
                      (fun γ =>
                        ltac:(M.monadic
                          match γ with
                          | [ α0 ] =>
                            M.match_operator (|
                              M.alloc (| α0 |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                                    let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                                    let γ0_2 := M.SubPointer.get_tuple_field (| γ, 2 |) in
                                    let γ0_3 := M.SubPointer.get_tuple_field (| γ, 3 |) in
                                    let eid := M.copy (| γ0_0 |) in
                                    let ltype := M.copy (| γ0_1 |) in
                                    let offset := M.copy (| γ0_2 |) in
                                    let is_writing := M.copy (| γ0_3 |) in
                                    M.read (|
                                      let records :=
                                        M.alloc (|
                                          M.call_closure (|
                                            M.get_associated_function (|
                                              Ty.apply
                                                (Ty.path "core::option::Option")
                                                [
                                                  Ty.apply
                                                    (Ty.path "&")
                                                    [
                                                      Ty.apply
                                                        (Ty.path "alloc::vec::Vec")
                                                        [
                                                          Ty.tuple [ Ty.path "u32"; Ty.path "u32" ];
                                                          Ty.path "alloc::alloc::Global"
                                                        ]
                                                    ]
                                                ],
                                              "unwrap",
                                              []
                                            |),
                                            [
                                              M.call_closure (|
                                                M.get_associated_function (|
                                                  Ty.apply
                                                    (Ty.path
                                                      "alloc::collections::btree::map::BTreeMap")
                                                    [
                                                      Ty.tuple
                                                        [
                                                          Ty.path "specs::mtable::LocationType";
                                                          Ty.path "u32"
                                                        ];
                                                      Ty.apply
                                                        (Ty.path "alloc::vec::Vec")
                                                        [
                                                          Ty.tuple [ Ty.path "u32"; Ty.path "u32" ];
                                                          Ty.path "alloc::alloc::Global"
                                                        ];
                                                      Ty.path "alloc::alloc::Global"
                                                    ],
                                                  "get",
                                                  [
                                                    Ty.tuple
                                                      [
                                                        Ty.path "specs::mtable::LocationType";
                                                        Ty.path "u32"
                                                      ]
                                                  ]
                                                |),
                                                [
                                                  lookup;
                                                  M.alloc (|
                                                    Value.Tuple
                                                      [ M.read (| ltype |); M.read (| offset |) ]
                                                  |)
                                                ]
                                              |)
                                            ]
                                          |)
                                        |) in
                                      M.match_operator (|
                                        M.alloc (| Value.Tuple [] |),
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let γ := M.use is_writing in
                                              let _ :=
                                                M.is_constant_or_break_match (|
                                                  M.read (| γ |),
                                                  Value.Bool true
                                                |) in
                                              let idx :=
                                                M.alloc (|
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.apply
                                                        (Ty.path "core::result::Result")
                                                        [ Ty.path "usize"; Ty.path "usize" ],
                                                      "unwrap",
                                                      []
                                                    |),
                                                    [
                                                      M.call_closure (|
                                                        M.get_associated_function (|
                                                          Ty.apply
                                                            (Ty.path "slice")
                                                            [
                                                              Ty.tuple
                                                                [ Ty.path "u32"; Ty.path "u32" ]
                                                            ],
                                                          "binary_search_by",
                                                          [
                                                            Ty.function
                                                              [
                                                                Ty.tuple
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path "&")
                                                                      [
                                                                        Ty.tuple
                                                                          [
                                                                            Ty.path "u32";
                                                                            Ty.path "u32"
                                                                          ]
                                                                      ]
                                                                  ]
                                                              ]
                                                              (Ty.path "core::cmp::Ordering")
                                                          ]
                                                        |),
                                                        [
                                                          M.call_closure (|
                                                            M.get_trait_method (|
                                                              "core::ops::deref::Deref",
                                                              Ty.apply
                                                                (Ty.path "alloc::vec::Vec")
                                                                [
                                                                  Ty.tuple
                                                                    [ Ty.path "u32"; Ty.path "u32"
                                                                    ];
                                                                  Ty.path "alloc::alloc::Global"
                                                                ],
                                                              [],
                                                              "deref",
                                                              []
                                                            |),
                                                            [ M.read (| records |) ]
                                                          |);
                                                          M.closure
                                                            (fun γ =>
                                                              ltac:(M.monadic
                                                                match γ with
                                                                | [ α0 ] =>
                                                                  M.match_operator (|
                                                                    M.alloc (| α0 |),
                                                                    [
                                                                      fun γ =>
                                                                        ltac:(M.monadic
                                                                          (let γ :=
                                                                            M.read (| γ |) in
                                                                          let γ1_0 :=
                                                                            M.SubPointer.get_tuple_field (|
                                                                              γ,
                                                                              0
                                                                            |) in
                                                                          let γ1_1 :=
                                                                            M.SubPointer.get_tuple_field (|
                                                                              γ,
                                                                              1
                                                                            |) in
                                                                          let start_eid :=
                                                                            M.alloc (| γ1_0 |) in
                                                                          M.call_closure (|
                                                                            M.get_trait_method (|
                                                                              "core::cmp::Ord",
                                                                              Ty.path "u32",
                                                                              [],
                                                                              "cmp",
                                                                              []
                                                                            |),
                                                                            [
                                                                              M.read (|
                                                                                start_eid
                                                                              |);
                                                                              M.read (| eid |)
                                                                            ]
                                                                          |)))
                                                                    ]
                                                                  |)
                                                                | _ => M.impossible (||)
                                                                end))
                                                        ]
                                                      |)
                                                    ]
                                                  |)
                                                |) in
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "core::ops::index::Index",
                                                  Ty.apply
                                                    (Ty.path "alloc::vec::Vec")
                                                    [
                                                      Ty.tuple [ Ty.path "u32"; Ty.path "u32" ];
                                                      Ty.path "alloc::alloc::Global"
                                                    ],
                                                  [ Ty.path "usize" ],
                                                  "index",
                                                  []
                                                |),
                                                [ M.read (| records |); M.read (| idx |) ]
                                              |)));
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let idx :=
                                                M.alloc (|
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.apply
                                                        (Ty.path "core::result::Result")
                                                        [ Ty.path "usize"; Ty.path "usize" ],
                                                      "unwrap",
                                                      []
                                                    |),
                                                    [
                                                      M.call_closure (|
                                                        M.get_associated_function (|
                                                          Ty.apply
                                                            (Ty.path "slice")
                                                            [
                                                              Ty.tuple
                                                                [ Ty.path "u32"; Ty.path "u32" ]
                                                            ],
                                                          "binary_search_by",
                                                          [
                                                            Ty.function
                                                              [
                                                                Ty.tuple
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path "&")
                                                                      [
                                                                        Ty.tuple
                                                                          [
                                                                            Ty.path "u32";
                                                                            Ty.path "u32"
                                                                          ]
                                                                      ]
                                                                  ]
                                                              ]
                                                              (Ty.path "core::cmp::Ordering")
                                                          ]
                                                        |),
                                                        [
                                                          M.call_closure (|
                                                            M.get_trait_method (|
                                                              "core::ops::deref::Deref",
                                                              Ty.apply
                                                                (Ty.path "alloc::vec::Vec")
                                                                [
                                                                  Ty.tuple
                                                                    [ Ty.path "u32"; Ty.path "u32"
                                                                    ];
                                                                  Ty.path "alloc::alloc::Global"
                                                                ],
                                                              [],
                                                              "deref",
                                                              []
                                                            |),
                                                            [ M.read (| records |) ]
                                                          |);
                                                          M.closure
                                                            (fun γ =>
                                                              ltac:(M.monadic
                                                                match γ with
                                                                | [ α0 ] =>
                                                                  M.match_operator (|
                                                                    M.alloc (| α0 |),
                                                                    [
                                                                      fun γ =>
                                                                        ltac:(M.monadic
                                                                          (let γ :=
                                                                            M.read (| γ |) in
                                                                          let γ1_0 :=
                                                                            M.SubPointer.get_tuple_field (|
                                                                              γ,
                                                                              0
                                                                            |) in
                                                                          let γ1_1 :=
                                                                            M.SubPointer.get_tuple_field (|
                                                                              γ,
                                                                              1
                                                                            |) in
                                                                          let start_eid :=
                                                                            M.alloc (| γ1_0 |) in
                                                                          let end_eid :=
                                                                            M.alloc (| γ1_1 |) in
                                                                          M.read (|
                                                                            M.match_operator (|
                                                                              M.alloc (|
                                                                                Value.Tuple []
                                                                              |),
                                                                              [
                                                                                fun γ =>
                                                                                  ltac:(M.monadic
                                                                                    (let γ :=
                                                                                      M.use
                                                                                        (M.alloc (|
                                                                                          M.call_closure (|
                                                                                            M.get_trait_method (|
                                                                                              "core::cmp::PartialOrd",
                                                                                              Ty.apply
                                                                                                (Ty.path
                                                                                                  "&")
                                                                                                [
                                                                                                  Ty.path
                                                                                                    "u32"
                                                                                                ],
                                                                                              [
                                                                                                Ty.apply
                                                                                                  (Ty.path
                                                                                                    "&")
                                                                                                  [
                                                                                                    Ty.path
                                                                                                      "u32"
                                                                                                  ]
                                                                                              ],
                                                                                              "le",
                                                                                              []
                                                                                            |),
                                                                                            [
                                                                                              eid;
                                                                                              M.alloc (|
                                                                                                M.read (|
                                                                                                  start_eid
                                                                                                |)
                                                                                              |)
                                                                                            ]
                                                                                          |)
                                                                                        |)) in
                                                                                    let _ :=
                                                                                      M.is_constant_or_break_match (|
                                                                                        M.read (|
                                                                                          γ
                                                                                        |),
                                                                                        Value.Bool
                                                                                          true
                                                                                      |) in
                                                                                    M.alloc (|
                                                                                      Value.StructTuple
                                                                                        "core::cmp::Ordering::Greater"
                                                                                        []
                                                                                    |)));
                                                                                fun γ =>
                                                                                  ltac:(M.monadic
                                                                                    (M.match_operator (|
                                                                                      M.alloc (|
                                                                                        Value.Tuple
                                                                                          []
                                                                                      |),
                                                                                      [
                                                                                        fun γ =>
                                                                                          ltac:(M.monadic
                                                                                            (let
                                                                                                  γ :=
                                                                                              M.use
                                                                                                (M.alloc (|
                                                                                                  M.call_closure (|
                                                                                                    M.get_trait_method (|
                                                                                                      "core::cmp::PartialOrd",
                                                                                                      Ty.apply
                                                                                                        (Ty.path
                                                                                                          "&")
                                                                                                        [
                                                                                                          Ty.path
                                                                                                            "u32"
                                                                                                        ],
                                                                                                      [
                                                                                                        Ty.apply
                                                                                                          (Ty.path
                                                                                                            "&")
                                                                                                          [
                                                                                                            Ty.path
                                                                                                              "u32"
                                                                                                          ]
                                                                                                      ],
                                                                                                      "gt",
                                                                                                      []
                                                                                                    |),
                                                                                                    [
                                                                                                      eid;
                                                                                                      M.alloc (|
                                                                                                        M.read (|
                                                                                                          end_eid
                                                                                                        |)
                                                                                                      |)
                                                                                                    ]
                                                                                                  |)
                                                                                                |)) in
                                                                                            let _ :=
                                                                                              M.is_constant_or_break_match (|
                                                                                                M.read (|
                                                                                                  γ
                                                                                                |),
                                                                                                Value.Bool
                                                                                                  true
                                                                                              |) in
                                                                                            M.alloc (|
                                                                                              Value.StructTuple
                                                                                                "core::cmp::Ordering::Less"
                                                                                                []
                                                                                            |)));
                                                                                        fun γ =>
                                                                                          ltac:(M.monadic
                                                                                            (M.alloc (|
                                                                                              Value.StructTuple
                                                                                                "core::cmp::Ordering::Equal"
                                                                                                []
                                                                                            |)))
                                                                                      ]
                                                                                    |)))
                                                                              ]
                                                                            |)
                                                                          |)))
                                                                    ]
                                                                  |)
                                                                | _ => M.impossible (||)
                                                                end))
                                                        ]
                                                      |)
                                                    ]
                                                  |)
                                                |) in
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "core::ops::index::Index",
                                                  Ty.apply
                                                    (Ty.path "alloc::vec::Vec")
                                                    [
                                                      Ty.tuple [ Ty.path "u32"; Ty.path "u32" ];
                                                      Ty.path "alloc::alloc::Global"
                                                    ],
                                                  [ Ty.path "usize" ],
                                                  "index",
                                                  []
                                                |),
                                                [ M.read (| records |); M.read (| idx |) ]
                                              |)))
                                        ]
                                      |)
                                    |)))
                              ]
                            |)
                          | _ => M.impossible (||)
                          end))
                  |) in
                M.alloc (|
                  Value.StructTuple
                    "delphinus_zkwasm::circuits::utils::table_entry::EventTableWithMemoryInfo"
                    [
                      M.call_closure (|
                        M.get_trait_method (|
                          "core::iter::traits::iterator::Iterator",
                          Ty.apply
                            (Ty.path "core::iter::adapters::map::Map")
                            [
                              Ty.apply
                                (Ty.path "core::slice::iter::Iter")
                                [ Ty.path "specs::etable::EventTableEntry" ];
                              Ty.function
                                [
                                  Ty.tuple
                                    [
                                      Ty.apply
                                        (Ty.path "&")
                                        [ Ty.path "specs::etable::EventTableEntry" ]
                                    ]
                                ]
                                (Ty.path
                                  "delphinus_zkwasm::circuits::utils::table_entry::EventTableEntryWithMemoryInfo")
                            ],
                          [],
                          "collect",
                          [
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              [
                                Ty.path
                                  "delphinus_zkwasm::circuits::utils::table_entry::EventTableEntryWithMemoryInfo";
                                Ty.path "alloc::alloc::Global"
                              ]
                          ]
                        |),
                        [
                          M.call_closure (|
                            M.get_trait_method (|
                              "core::iter::traits::iterator::Iterator",
                              Ty.apply
                                (Ty.path "core::slice::iter::Iter")
                                [ Ty.path "specs::etable::EventTableEntry" ],
                              [],
                              "map",
                              [
                                Ty.path
                                  "delphinus_zkwasm::circuits::utils::table_entry::EventTableEntryWithMemoryInfo";
                                Ty.function
                                  [
                                    Ty.tuple
                                      [
                                        Ty.apply
                                          (Ty.path "&")
                                          [ Ty.path "specs::etable::EventTableEntry" ]
                                      ]
                                  ]
                                  (Ty.path
                                    "delphinus_zkwasm::circuits::utils::table_entry::EventTableEntryWithMemoryInfo")
                              ]
                            |),
                            [
                              M.call_closure (|
                                M.get_associated_function (|
                                  Ty.apply
                                    (Ty.path "slice")
                                    [ Ty.path "specs::etable::EventTableEntry" ],
                                  "iter",
                                  []
                                |),
                                [
                                  M.call_closure (|
                                    M.get_trait_method (|
                                      "core::ops::deref::Deref",
                                      Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        [
                                          Ty.path "specs::etable::EventTableEntry";
                                          Ty.path "alloc::alloc::Global"
                                        ],
                                      [],
                                      "deref",
                                      []
                                    |),
                                    [
                                      M.call_closure (|
                                        M.get_associated_function (|
                                          Ty.path "specs::etable::EventTable",
                                          "entries",
                                          []
                                        |),
                                        [ M.read (| event_table |) ]
                                      |)
                                    ]
                                  |)
                                ]
                              |);
                              M.closure
                                (fun γ =>
                                  ltac:(M.monadic
                                    match γ with
                                    | [ α0 ] =>
                                      M.match_operator (|
                                        M.alloc (| α0 |),
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let eentry := M.copy (| γ |) in
                                              Value.StructRecord
                                                "delphinus_zkwasm::circuits::utils::table_entry::EventTableEntryWithMemoryInfo"
                                                [
                                                  ("eentry",
                                                    M.call_closure (|
                                                      M.get_trait_method (|
                                                        "core::clone::Clone",
                                                        Ty.path "specs::etable::EventTableEntry",
                                                        [],
                                                        "clone",
                                                        []
                                                      |),
                                                      [ M.read (| eentry |) ]
                                                    |));
                                                  ("memory_rw_entires",
                                                    M.call_closure (|
                                                      M.get_trait_method (|
                                                        "core::iter::traits::iterator::Iterator",
                                                        Ty.apply
                                                          (Ty.path "core::iter::adapters::map::Map")
                                                          [
                                                            Ty.apply
                                                              (Ty.path "core::slice::iter::Iter")
                                                              [
                                                                Ty.path
                                                                  "specs::mtable::MemoryTableEntry"
                                                              ];
                                                            Ty.function
                                                              [
                                                                Ty.tuple
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path "&")
                                                                      [
                                                                        Ty.path
                                                                          "specs::mtable::MemoryTableEntry"
                                                                      ]
                                                                  ]
                                                              ]
                                                              (Ty.path
                                                                "delphinus_zkwasm::circuits::utils::table_entry::MemoryRWEntry")
                                                          ],
                                                        [],
                                                        "collect",
                                                        [
                                                          Ty.apply
                                                            (Ty.path "alloc::vec::Vec")
                                                            [
                                                              Ty.path
                                                                "delphinus_zkwasm::circuits::utils::table_entry::MemoryRWEntry";
                                                              Ty.path "alloc::alloc::Global"
                                                            ]
                                                        ]
                                                      |),
                                                      [
                                                        M.call_closure (|
                                                          M.get_trait_method (|
                                                            "core::iter::traits::iterator::Iterator",
                                                            Ty.apply
                                                              (Ty.path "core::slice::iter::Iter")
                                                              [
                                                                Ty.path
                                                                  "specs::mtable::MemoryTableEntry"
                                                              ],
                                                            [],
                                                            "map",
                                                            [
                                                              Ty.path
                                                                "delphinus_zkwasm::circuits::utils::table_entry::MemoryRWEntry";
                                                              Ty.function
                                                                [
                                                                  Ty.tuple
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path "&")
                                                                        [
                                                                          Ty.path
                                                                            "specs::mtable::MemoryTableEntry"
                                                                        ]
                                                                    ]
                                                                ]
                                                                (Ty.path
                                                                  "delphinus_zkwasm::circuits::utils::table_entry::MemoryRWEntry")
                                                            ]
                                                          |),
                                                          [
                                                            M.call_closure (|
                                                              M.get_associated_function (|
                                                                Ty.apply
                                                                  (Ty.path "slice")
                                                                  [
                                                                    Ty.path
                                                                      "specs::mtable::MemoryTableEntry"
                                                                  ],
                                                                "iter",
                                                                []
                                                              |),
                                                              [
                                                                M.call_closure (|
                                                                  M.get_trait_method (|
                                                                    "core::ops::deref::Deref",
                                                                    Ty.apply
                                                                      (Ty.path "alloc::vec::Vec")
                                                                      [
                                                                        Ty.path
                                                                          "specs::mtable::MemoryTableEntry";
                                                                        Ty.path
                                                                          "alloc::alloc::Global"
                                                                      ],
                                                                    [],
                                                                    "deref",
                                                                    []
                                                                  |),
                                                                  [
                                                                    M.alloc (|
                                                                      M.call_closure (|
                                                                        M.get_function (|
                                                                          "delphinus_zkwasm::runtime::memory_event_of_step",
                                                                          []
                                                                        |),
                                                                        [ M.read (| eentry |) ]
                                                                      |)
                                                                    |)
                                                                  ]
                                                                |)
                                                              ]
                                                            |);
                                                            M.closure
                                                              (fun γ =>
                                                                ltac:(M.monadic
                                                                  match γ with
                                                                  | [ α0 ] =>
                                                                    M.match_operator (|
                                                                      M.alloc (| α0 |),
                                                                      [
                                                                        fun γ =>
                                                                          ltac:(M.monadic
                                                                            (let mentry :=
                                                                              M.copy (| γ |) in
                                                                            M.read (|
                                                                              M.match_operator (|
                                                                                M.alloc (|
                                                                                  M.call_closure (|
                                                                                    M.get_trait_method (|
                                                                                      "core::ops::function::Fn",
                                                                                      Ty.function
                                                                                        [
                                                                                          Ty.tuple
                                                                                            [
                                                                                              Ty.tuple
                                                                                                [
                                                                                                  Ty.apply
                                                                                                    (Ty.path
                                                                                                      "&")
                                                                                                    [
                                                                                                      Ty.path
                                                                                                        "u32"
                                                                                                    ];
                                                                                                  Ty.path
                                                                                                    "specs::mtable::LocationType";
                                                                                                  Ty.path
                                                                                                    "u32";
                                                                                                  Ty.path
                                                                                                    "bool"
                                                                                                ]
                                                                                            ]
                                                                                        ]
                                                                                        (Ty.tuple
                                                                                          [
                                                                                            Ty.path
                                                                                              "u32";
                                                                                            Ty.path
                                                                                              "u32"
                                                                                          ]),
                                                                                      [
                                                                                        Ty.tuple
                                                                                          [
                                                                                            Ty.tuple
                                                                                              [
                                                                                                Ty.apply
                                                                                                  (Ty.path
                                                                                                    "&")
                                                                                                  [
                                                                                                    Ty.path
                                                                                                      "u32"
                                                                                                  ];
                                                                                                Ty.path
                                                                                                  "specs::mtable::LocationType";
                                                                                                Ty.path
                                                                                                  "u32";
                                                                                                Ty.path
                                                                                                  "bool"
                                                                                              ]
                                                                                          ]
                                                                                      ],
                                                                                      "call",
                                                                                      []
                                                                                    |),
                                                                                    [
                                                                                      lookup_mtable_eid;
                                                                                      Value.Tuple
                                                                                        [
                                                                                          Value.Tuple
                                                                                            [
                                                                                              M.SubPointer.get_struct_record_field (|
                                                                                                M.read (|
                                                                                                  eentry
                                                                                                |),
                                                                                                "specs::etable::EventTableEntry",
                                                                                                "eid"
                                                                                              |);
                                                                                              M.read (|
                                                                                                M.SubPointer.get_struct_record_field (|
                                                                                                  M.read (|
                                                                                                    mentry
                                                                                                  |),
                                                                                                  "specs::mtable::MemoryTableEntry",
                                                                                                  "ltype"
                                                                                                |)
                                                                                              |);
                                                                                              M.read (|
                                                                                                M.SubPointer.get_struct_record_field (|
                                                                                                  M.read (|
                                                                                                    mentry
                                                                                                  |),
                                                                                                  "specs::mtable::MemoryTableEntry",
                                                                                                  "offset"
                                                                                                |)
                                                                                              |);
                                                                                              M.call_closure (|
                                                                                                M.get_trait_method (|
                                                                                                  "core::cmp::PartialEq",
                                                                                                  Ty.path
                                                                                                    "specs::mtable::AccessType",
                                                                                                  [
                                                                                                    Ty.path
                                                                                                      "specs::mtable::AccessType"
                                                                                                  ],
                                                                                                  "eq",
                                                                                                  []
                                                                                                |),
                                                                                                [
                                                                                                  M.SubPointer.get_struct_record_field (|
                                                                                                    M.read (|
                                                                                                      mentry
                                                                                                    |),
                                                                                                    "specs::mtable::MemoryTableEntry",
                                                                                                    "atype"
                                                                                                  |);
                                                                                                  M.alloc (|
                                                                                                    Value.StructTuple
                                                                                                      "specs::mtable::AccessType::Write"
                                                                                                      []
                                                                                                  |)
                                                                                                ]
                                                                                              |)
                                                                                            ]
                                                                                        ]
                                                                                    ]
                                                                                  |)
                                                                                |),
                                                                                [
                                                                                  fun γ =>
                                                                                    ltac:(M.monadic
                                                                                      (let γ0_0 :=
                                                                                        M.SubPointer.get_tuple_field (|
                                                                                          γ,
                                                                                          0
                                                                                        |) in
                                                                                      let γ0_1 :=
                                                                                        M.SubPointer.get_tuple_field (|
                                                                                          γ,
                                                                                          1
                                                                                        |) in
                                                                                      let
                                                                                            start_eid :=
                                                                                        M.copy (|
                                                                                          γ0_0
                                                                                        |) in
                                                                                      let end_eid :=
                                                                                        M.copy (|
                                                                                          γ0_1
                                                                                        |) in
                                                                                      M.alloc (|
                                                                                        Value.StructRecord
                                                                                          "delphinus_zkwasm::circuits::utils::table_entry::MemoryRWEntry"
                                                                                          [
                                                                                            ("entry",
                                                                                              M.call_closure (|
                                                                                                M.get_trait_method (|
                                                                                                  "core::clone::Clone",
                                                                                                  Ty.path
                                                                                                    "specs::mtable::MemoryTableEntry",
                                                                                                  [],
                                                                                                  "clone",
                                                                                                  []
                                                                                                |),
                                                                                                [
                                                                                                  M.read (|
                                                                                                    mentry
                                                                                                  |)
                                                                                                ]
                                                                                              |));
                                                                                            ("start_eid",
                                                                                              M.read (|
                                                                                                start_eid
                                                                                              |));
                                                                                            ("end_eid",
                                                                                              M.read (|
                                                                                                end_eid
                                                                                              |))
                                                                                          ]
                                                                                      |)))
                                                                                ]
                                                                              |)
                                                                            |)))
                                                                      ]
                                                                    |)
                                                                  | _ => M.impossible (||)
                                                                  end))
                                                          ]
                                                        |)
                                                      ]
                                                    |))
                                                ]))
                                        ]
                                      |)
                                    | _ => M.impossible (||)
                                    end))
                            ]
                          |)
                        ]
                      |)
                    ]
                |)
              |)))
          | _, _ => M.impossible
          end.
        
        Axiom AssociatedFunction_new : M.IsAssociatedFunction Self "new" new.
      End Impl_delphinus_zkwasm_circuits_utils_table_entry_EventTableWithMemoryInfo.
    End table_entry.
  End utils.
End circuits.
