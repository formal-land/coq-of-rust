(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module error.
  (*
  Enum CompilationError
  {
    ty_params := [];
    variants := [];
  }
  *)
  
  Module Impl_core_fmt_Debug_for_delphinus_zkwasm_error_CompilationError.
    Definition Self : Ty.t := Ty.path "delphinus_zkwasm::error::CompilationError".
    
    (* Debug *)
    Definition fmt (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [ self; f ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let f := M.alloc (| f |) in
          M.never_to_any (| M.read (| M.match_operator (| M.read (| self |), [] |) |) |)))
      | _, _ => M.impossible
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::fmt::Debug"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
  End Impl_core_fmt_Debug_for_delphinus_zkwasm_error_CompilationError.
  
  Module Impl_core_error_Error_for_delphinus_zkwasm_error_CompilationError.
    Definition Self : Ty.t := Ty.path "delphinus_zkwasm::error::CompilationError".
    
    Axiom Implements :
      M.IsTraitInstance
        "core::error::Error"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [].
  End Impl_core_error_Error_for_delphinus_zkwasm_error_CompilationError.
  
  Module Impl_core_fmt_Display_for_delphinus_zkwasm_error_CompilationError.
    Definition Self : Ty.t := Ty.path "delphinus_zkwasm::error::CompilationError".
    
    (* Error *)
    Definition fmt (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [ self; __formatter ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let __formatter := M.alloc (| __formatter |) in
          M.never_to_any (| M.read (| M.match_operator (| M.read (| self |), [] |) |) |)))
      | _, _ => M.impossible
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::fmt::Display"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
  End Impl_core_fmt_Display_for_delphinus_zkwasm_error_CompilationError.
  
  (*
  Enum ExecutionError
  {
    ty_params := [];
    variants := [];
  }
  *)
  
  Module Impl_core_fmt_Debug_for_delphinus_zkwasm_error_ExecutionError.
    Definition Self : Ty.t := Ty.path "delphinus_zkwasm::error::ExecutionError".
    
    (* Debug *)
    Definition fmt (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [ self; f ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let f := M.alloc (| f |) in
          M.never_to_any (| M.read (| M.match_operator (| M.read (| self |), [] |) |) |)))
      | _, _ => M.impossible
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::fmt::Debug"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
  End Impl_core_fmt_Debug_for_delphinus_zkwasm_error_ExecutionError.
  
  Module Impl_core_error_Error_for_delphinus_zkwasm_error_ExecutionError.
    Definition Self : Ty.t := Ty.path "delphinus_zkwasm::error::ExecutionError".
    
    Axiom Implements :
      M.IsTraitInstance
        "core::error::Error"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [].
  End Impl_core_error_Error_for_delphinus_zkwasm_error_ExecutionError.
  
  Module Impl_core_fmt_Display_for_delphinus_zkwasm_error_ExecutionError.
    Definition Self : Ty.t := Ty.path "delphinus_zkwasm::error::ExecutionError".
    
    (* Error *)
    Definition fmt (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [ self; __formatter ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let __formatter := M.alloc (| __formatter |) in
          M.never_to_any (| M.read (| M.match_operator (| M.read (| self |), [] |) |) |)))
      | _, _ => M.impossible
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::fmt::Display"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
  End Impl_core_fmt_Display_for_delphinus_zkwasm_error_ExecutionError.
  
  (*
  Enum BuildingCircuitError
  {
    ty_params := [];
    variants :=
      [
        {
          name := "MultiSlicesNotSupport";
          item := StructTuple [ Ty.path "usize" ];
          discriminant := None;
        };
        {
          name := "PagesExceedLimit";
          item := StructTuple [ Ty.path "u32"; Ty.path "u32"; Ty.path "u32" ];
          discriminant := None;
        };
        {
          name := "EtableEntriesExceedLimit";
          item := StructTuple [ Ty.path "u32"; Ty.path "u32"; Ty.path "u32" ];
          discriminant := None;
        }
      ];
  }
  *)
  
  Module Impl_core_fmt_Debug_for_delphinus_zkwasm_error_BuildingCircuitError.
    Definition Self : Ty.t := Ty.path "delphinus_zkwasm::error::BuildingCircuitError".
    
    (* Debug *)
    Definition fmt (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [ self; f ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let f := M.alloc (| f |) in
          M.read (|
            M.match_operator (|
              self,
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.read (| γ |) in
                    let γ1_0 :=
                      M.SubPointer.get_struct_tuple_field (|
                        γ,
                        "delphinus_zkwasm::error::BuildingCircuitError::MultiSlicesNotSupport",
                        0
                      |) in
                    let __self_0 := M.alloc (| γ1_0 |) in
                    M.alloc (|
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.path "core::fmt::Formatter",
                          "debug_tuple_field1_finish",
                          []
                        |),
                        [
                          M.read (| f |);
                          M.read (| Value.String "MultiSlicesNotSupport" |);
                          (* Unsize *) M.pointer_coercion __self_0
                        ]
                      |)
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.read (| γ |) in
                    let γ1_0 :=
                      M.SubPointer.get_struct_tuple_field (|
                        γ,
                        "delphinus_zkwasm::error::BuildingCircuitError::PagesExceedLimit",
                        0
                      |) in
                    let γ1_1 :=
                      M.SubPointer.get_struct_tuple_field (|
                        γ,
                        "delphinus_zkwasm::error::BuildingCircuitError::PagesExceedLimit",
                        1
                      |) in
                    let γ1_2 :=
                      M.SubPointer.get_struct_tuple_field (|
                        γ,
                        "delphinus_zkwasm::error::BuildingCircuitError::PagesExceedLimit",
                        2
                      |) in
                    let __self_0 := M.alloc (| γ1_0 |) in
                    let __self_1 := M.alloc (| γ1_1 |) in
                    let __self_2 := M.alloc (| γ1_2 |) in
                    M.alloc (|
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.path "core::fmt::Formatter",
                          "debug_tuple_field3_finish",
                          []
                        |),
                        [
                          M.read (| f |);
                          M.read (| Value.String "PagesExceedLimit" |);
                          (* Unsize *) M.pointer_coercion (M.read (| __self_0 |));
                          (* Unsize *) M.pointer_coercion (M.read (| __self_1 |));
                          (* Unsize *) M.pointer_coercion __self_2
                        ]
                      |)
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.read (| γ |) in
                    let γ1_0 :=
                      M.SubPointer.get_struct_tuple_field (|
                        γ,
                        "delphinus_zkwasm::error::BuildingCircuitError::EtableEntriesExceedLimit",
                        0
                      |) in
                    let γ1_1 :=
                      M.SubPointer.get_struct_tuple_field (|
                        γ,
                        "delphinus_zkwasm::error::BuildingCircuitError::EtableEntriesExceedLimit",
                        1
                      |) in
                    let γ1_2 :=
                      M.SubPointer.get_struct_tuple_field (|
                        γ,
                        "delphinus_zkwasm::error::BuildingCircuitError::EtableEntriesExceedLimit",
                        2
                      |) in
                    let __self_0 := M.alloc (| γ1_0 |) in
                    let __self_1 := M.alloc (| γ1_1 |) in
                    let __self_2 := M.alloc (| γ1_2 |) in
                    M.alloc (|
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.path "core::fmt::Formatter",
                          "debug_tuple_field3_finish",
                          []
                        |),
                        [
                          M.read (| f |);
                          M.read (| Value.String "EtableEntriesExceedLimit" |);
                          (* Unsize *) M.pointer_coercion (M.read (| __self_0 |));
                          (* Unsize *) M.pointer_coercion (M.read (| __self_1 |));
                          (* Unsize *) M.pointer_coercion __self_2
                        ]
                      |)
                    |)))
              ]
            |)
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::fmt::Debug"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
  End Impl_core_fmt_Debug_for_delphinus_zkwasm_error_BuildingCircuitError.
  
  Module Impl_core_error_Error_for_delphinus_zkwasm_error_BuildingCircuitError.
    Definition Self : Ty.t := Ty.path "delphinus_zkwasm::error::BuildingCircuitError".
    
    Axiom Implements :
      M.IsTraitInstance
        "core::error::Error"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [].
  End Impl_core_error_Error_for_delphinus_zkwasm_error_BuildingCircuitError.
  
  Module Impl_core_fmt_Display_for_delphinus_zkwasm_error_BuildingCircuitError.
    Definition Self : Ty.t := Ty.path "delphinus_zkwasm::error::BuildingCircuitError".
    
    (* Error *)
    Definition fmt (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [ self; __formatter ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let __formatter := M.alloc (| __formatter |) in
          M.read (|
            M.match_operator (|
              self,
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.read (| γ |) in
                    let γ1_0 :=
                      M.SubPointer.get_struct_tuple_field (|
                        γ,
                        "delphinus_zkwasm::error::BuildingCircuitError::MultiSlicesNotSupport",
                        0
                      |) in
                    let _0 := M.alloc (| γ1_0 |) in
                    M.alloc (|
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.path "core::fmt::Formatter",
                          "write_fmt",
                          []
                        |),
                        [
                          M.read (| __formatter |);
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.path "core::fmt::Arguments",
                              "new_v1",
                              []
                            |),
                            [
                              (* Unsize *)
                              M.pointer_coercion
                                (M.alloc (|
                                  Value.Array
                                    [
                                      M.read (|
                                        Value.String
                                          "Only support single slice for non-continuation mode but "
                                      |);
                                      M.read (|
                                        Value.String
                                          " provided. You could increase K or enable continuation feature."
                                      |)
                                    ]
                                |));
                              (* Unsize *)
                              M.pointer_coercion
                                (M.alloc (|
                                  Value.Array
                                    [
                                      M.call_closure (|
                                        M.get_associated_function (|
                                          Ty.path "core::fmt::rt::Argument",
                                          "new_display",
                                          [ Ty.apply (Ty.path "&") [ Ty.path "usize" ] ]
                                        |),
                                        [
                                          M.alloc (|
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "thiserror::display::AsDisplay",
                                                Ty.apply (Ty.path "&") [ Ty.path "usize" ],
                                                [],
                                                "as_display",
                                                []
                                              |),
                                              [ _0 ]
                                            |)
                                          |)
                                        ]
                                      |)
                                    ]
                                |))
                            ]
                          |)
                        ]
                      |)
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.read (| γ |) in
                    let γ1_0 :=
                      M.SubPointer.get_struct_tuple_field (|
                        γ,
                        "delphinus_zkwasm::error::BuildingCircuitError::PagesExceedLimit",
                        0
                      |) in
                    let γ1_1 :=
                      M.SubPointer.get_struct_tuple_field (|
                        γ,
                        "delphinus_zkwasm::error::BuildingCircuitError::PagesExceedLimit",
                        1
                      |) in
                    let γ1_2 :=
                      M.SubPointer.get_struct_tuple_field (|
                        γ,
                        "delphinus_zkwasm::error::BuildingCircuitError::PagesExceedLimit",
                        2
                      |) in
                    let _0 := M.alloc (| γ1_0 |) in
                    let _1 := M.alloc (| γ1_1 |) in
                    let _2 := M.alloc (| γ1_2 |) in
                    M.alloc (|
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.path "core::fmt::Formatter",
                          "write_fmt",
                          []
                        |),
                        [
                          M.read (| __formatter |);
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.path "core::fmt::Arguments",
                              "new_v1",
                              []
                            |),
                            [
                              (* Unsize *)
                              M.pointer_coercion
                                (M.alloc (|
                                  Value.Array
                                    [
                                      M.read (| Value.String "Allocated pages(" |);
                                      M.read (| Value.String ") exceed the limit(" |);
                                      M.read (| Value.String "). Current K is " |);
                                      M.read (|
                                        Value.String ", consider increasing the circuit size K."
                                      |)
                                    ]
                                |));
                              (* Unsize *)
                              M.pointer_coercion
                                (M.alloc (|
                                  Value.Array
                                    [
                                      M.call_closure (|
                                        M.get_associated_function (|
                                          Ty.path "core::fmt::rt::Argument",
                                          "new_display",
                                          [ Ty.apply (Ty.path "&") [ Ty.path "u32" ] ]
                                        |),
                                        [
                                          M.alloc (|
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "thiserror::display::AsDisplay",
                                                Ty.apply (Ty.path "&") [ Ty.path "u32" ],
                                                [],
                                                "as_display",
                                                []
                                              |),
                                              [ _0 ]
                                            |)
                                          |)
                                        ]
                                      |);
                                      M.call_closure (|
                                        M.get_associated_function (|
                                          Ty.path "core::fmt::rt::Argument",
                                          "new_display",
                                          [ Ty.apply (Ty.path "&") [ Ty.path "u32" ] ]
                                        |),
                                        [
                                          M.alloc (|
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "thiserror::display::AsDisplay",
                                                Ty.apply (Ty.path "&") [ Ty.path "u32" ],
                                                [],
                                                "as_display",
                                                []
                                              |),
                                              [ _1 ]
                                            |)
                                          |)
                                        ]
                                      |);
                                      M.call_closure (|
                                        M.get_associated_function (|
                                          Ty.path "core::fmt::rt::Argument",
                                          "new_display",
                                          [ Ty.apply (Ty.path "&") [ Ty.path "u32" ] ]
                                        |),
                                        [
                                          M.alloc (|
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "thiserror::display::AsDisplay",
                                                Ty.apply (Ty.path "&") [ Ty.path "u32" ],
                                                [],
                                                "as_display",
                                                []
                                              |),
                                              [ _2 ]
                                            |)
                                          |)
                                        ]
                                      |)
                                    ]
                                |))
                            ]
                          |)
                        ]
                      |)
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.read (| γ |) in
                    let γ1_0 :=
                      M.SubPointer.get_struct_tuple_field (|
                        γ,
                        "delphinus_zkwasm::error::BuildingCircuitError::EtableEntriesExceedLimit",
                        0
                      |) in
                    let γ1_1 :=
                      M.SubPointer.get_struct_tuple_field (|
                        γ,
                        "delphinus_zkwasm::error::BuildingCircuitError::EtableEntriesExceedLimit",
                        1
                      |) in
                    let γ1_2 :=
                      M.SubPointer.get_struct_tuple_field (|
                        γ,
                        "delphinus_zkwasm::error::BuildingCircuitError::EtableEntriesExceedLimit",
                        2
                      |) in
                    let _0 := M.alloc (| γ1_0 |) in
                    let _1 := M.alloc (| γ1_1 |) in
                    let _2 := M.alloc (| γ1_2 |) in
                    M.alloc (|
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.path "core::fmt::Formatter",
                          "write_fmt",
                          []
                        |),
                        [
                          M.read (| __formatter |);
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.path "core::fmt::Arguments",
                              "new_v1",
                              []
                            |),
                            [
                              (* Unsize *)
                              M.pointer_coercion
                                (M.alloc (|
                                  Value.Array
                                    [
                                      M.read (| Value.String "Etable entries(" |);
                                      M.read (| Value.String ") exceed the limit(" |);
                                      M.read (| Value.String "). Current K is " |);
                                      M.read (|
                                        Value.String ", consider increasing the circuit size K."
                                      |)
                                    ]
                                |));
                              (* Unsize *)
                              M.pointer_coercion
                                (M.alloc (|
                                  Value.Array
                                    [
                                      M.call_closure (|
                                        M.get_associated_function (|
                                          Ty.path "core::fmt::rt::Argument",
                                          "new_display",
                                          [ Ty.apply (Ty.path "&") [ Ty.path "u32" ] ]
                                        |),
                                        [
                                          M.alloc (|
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "thiserror::display::AsDisplay",
                                                Ty.apply (Ty.path "&") [ Ty.path "u32" ],
                                                [],
                                                "as_display",
                                                []
                                              |),
                                              [ _0 ]
                                            |)
                                          |)
                                        ]
                                      |);
                                      M.call_closure (|
                                        M.get_associated_function (|
                                          Ty.path "core::fmt::rt::Argument",
                                          "new_display",
                                          [ Ty.apply (Ty.path "&") [ Ty.path "u32" ] ]
                                        |),
                                        [
                                          M.alloc (|
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "thiserror::display::AsDisplay",
                                                Ty.apply (Ty.path "&") [ Ty.path "u32" ],
                                                [],
                                                "as_display",
                                                []
                                              |),
                                              [ _1 ]
                                            |)
                                          |)
                                        ]
                                      |);
                                      M.call_closure (|
                                        M.get_associated_function (|
                                          Ty.path "core::fmt::rt::Argument",
                                          "new_display",
                                          [ Ty.apply (Ty.path "&") [ Ty.path "u32" ] ]
                                        |),
                                        [
                                          M.alloc (|
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "thiserror::display::AsDisplay",
                                                Ty.apply (Ty.path "&") [ Ty.path "u32" ],
                                                [],
                                                "as_display",
                                                []
                                              |),
                                              [ _2 ]
                                            |)
                                          |)
                                        ]
                                      |)
                                    ]
                                |))
                            ]
                          |)
                        ]
                      |)
                    |)))
              ]
            |)
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::fmt::Display"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
  End Impl_core_fmt_Display_for_delphinus_zkwasm_error_BuildingCircuitError.
End error.
