(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module foreign.
  Module context.
    Module circuits.
      Module assign.
        (* StructRecord
          {
            name := "ContextContHelperTableChip";
            ty_params := [ "F" ];
            fields :=
              [
                ("config",
                  Ty.apply
                    (Ty.path
                      "delphinus_zkwasm::foreign::context::circuits::ContextContHelperTableConfig")
                    [ F ])
              ];
          } *)
        
        Module Impl_delphinus_zkwasm_foreign_context_circuits_assign_ContextContHelperTableChip_F.
          Definition Self (F : Ty.t) : Ty.t :=
            Ty.apply
              (Ty.path
                "delphinus_zkwasm::foreign::context::circuits::assign::ContextContHelperTableChip")
              [ F ].
          
          (*
              pub fn new(config: ContextContHelperTableConfig<F>) -> Self {
                  Self { config }
              }
          *)
          Definition new (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
            let Self : Ty.t := Self F in
            match τ, α with
            | [], [ config ] =>
              ltac:(M.monadic
                (let config := M.alloc (| config |) in
                Value.StructRecord
                  "delphinus_zkwasm::foreign::context::circuits::assign::ContextContHelperTableChip"
                  [ ("config", M.read (| config |)) ]))
            | _, _ => M.impossible
            end.
          
          Axiom AssociatedFunction_new :
            forall (F : Ty.t),
            M.IsAssociatedFunction (Self F) "new" (new F).
          
          (*
              pub fn assign(
                  &self,
                  layouter: impl Layouter<F>,
                  inputs: &Vec<u64>,
                  outputs: &Vec<u64>,
              ) -> Result<(), Error> {
                  layouter.assign_region(
                      || "context cont helper assign",
                      |region| {
                          for (offset, input) in inputs.iter().enumerate() {
                              region.assign_advice(
                                  || "context cont input index",
                                  self.config.input,
                                  offset + 1, // The first fixed index should be 1.
                                  || Ok(F::from( *input)),
                              )?;
                          }
          
                          for (offset, output) in outputs.iter().enumerate() {
                              region.assign_advice(
                                  || "context cont output index",
                                  self.config.output,
                                  offset + 1, // The first fixed index should be 1.
                                  || Ok(F::from( *output)),
                              )?;
                          }
          
                          Ok(())
                      },
                  )?;
          
                  Ok(())
              }
          *)
          Definition assign (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
            let Self : Ty.t := Self F in
            match τ, α with
            | [ impl_Layouter_F_ ], [ self; layouter; inputs; outputs ] =>
              ltac:(M.monadic
                (let self := M.alloc (| self |) in
                let layouter := M.alloc (| layouter |) in
                let inputs := M.alloc (| inputs |) in
                let outputs := M.alloc (| outputs |) in
                M.catch_return (|
                  ltac:(M.monadic
                    (M.read (|
                      let _ :=
                        M.match_operator (|
                          M.alloc (|
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::ops::try_trait::Try",
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  [ Ty.tuple []; Ty.path "halo2_proofs::plonk::error::Error" ],
                                [],
                                "branch",
                                []
                              |),
                              [
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "halo2_proofs::circuit::Layouter",
                                    impl_Layouter_F_,
                                    [ F ],
                                    "assign_region",
                                    [
                                      Ty.function
                                        [
                                          Ty.tuple
                                            [
                                              Ty.apply
                                                (Ty.path "&")
                                                [
                                                  Ty.apply
                                                    (Ty.path "halo2_proofs::circuit::Region")
                                                    [ F ]
                                                ]
                                            ]
                                        ]
                                        (Ty.apply
                                          (Ty.path "core::result::Result")
                                          [ Ty.tuple []; Ty.path "halo2_proofs::plonk::error::Error"
                                          ]);
                                      Ty.tuple [];
                                      Ty.function
                                        [ Ty.tuple [] ]
                                        (Ty.apply (Ty.path "&") [ Ty.path "str" ]);
                                      Ty.apply (Ty.path "&") [ Ty.path "str" ]
                                    ]
                                  |),
                                  [
                                    layouter;
                                    M.closure
                                      (fun γ =>
                                        ltac:(M.monadic
                                          match γ with
                                          | [ α0 ] =>
                                            M.match_operator (|
                                              M.alloc (| α0 |),
                                              [
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (M.read (|
                                                      Value.String "context cont helper assign"
                                                    |)))
                                              ]
                                            |)
                                          | _ => M.impossible (||)
                                          end));
                                    M.closure
                                      (fun γ =>
                                        ltac:(M.monadic
                                          match γ with
                                          | [ α0 ] =>
                                            M.match_operator (|
                                              M.alloc (| α0 |),
                                              [
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (let region := M.copy (| γ |) in
                                                    M.read (|
                                                      let _ :=
                                                        M.use
                                                          (M.match_operator (|
                                                            M.alloc (|
                                                              M.call_closure (|
                                                                M.get_trait_method (|
                                                                  "core::iter::traits::collect::IntoIterator",
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "core::iter::adapters::enumerate::Enumerate")
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "core::slice::iter::Iter")
                                                                        [ Ty.path "u64" ]
                                                                    ],
                                                                  [],
                                                                  "into_iter",
                                                                  []
                                                                |),
                                                                [
                                                                  M.call_closure (|
                                                                    M.get_trait_method (|
                                                                      "core::iter::traits::iterator::Iterator",
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "core::slice::iter::Iter")
                                                                        [ Ty.path "u64" ],
                                                                      [],
                                                                      "enumerate",
                                                                      []
                                                                    |),
                                                                    [
                                                                      M.call_closure (|
                                                                        M.get_associated_function (|
                                                                          Ty.apply
                                                                            (Ty.path "slice")
                                                                            [ Ty.path "u64" ],
                                                                          "iter",
                                                                          []
                                                                        |),
                                                                        [
                                                                          M.call_closure (|
                                                                            M.get_trait_method (|
                                                                              "core::ops::deref::Deref",
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "alloc::vec::Vec")
                                                                                [
                                                                                  Ty.path "u64";
                                                                                  Ty.path
                                                                                    "alloc::alloc::Global"
                                                                                ],
                                                                              [],
                                                                              "deref",
                                                                              []
                                                                            |),
                                                                            [ M.read (| inputs |) ]
                                                                          |)
                                                                        ]
                                                                      |)
                                                                    ]
                                                                  |)
                                                                ]
                                                              |)
                                                            |),
                                                            [
                                                              fun γ =>
                                                                ltac:(M.monadic
                                                                  (let iter := M.copy (| γ |) in
                                                                  M.loop (|
                                                                    ltac:(M.monadic
                                                                      (let _ :=
                                                                        M.match_operator (|
                                                                          M.alloc (|
                                                                            M.call_closure (|
                                                                              M.get_trait_method (|
                                                                                "core::iter::traits::iterator::Iterator",
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "core::iter::adapters::enumerate::Enumerate")
                                                                                  [
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "core::slice::iter::Iter")
                                                                                      [
                                                                                        Ty.path
                                                                                          "u64"
                                                                                      ]
                                                                                  ],
                                                                                [],
                                                                                "next",
                                                                                []
                                                                              |),
                                                                              [ iter ]
                                                                            |)
                                                                          |),
                                                                          [
                                                                            fun γ =>
                                                                              ltac:(M.monadic
                                                                                (M.alloc (|
                                                                                  M.never_to_any (|
                                                                                    M.read (|
                                                                                      M.break (||)
                                                                                    |)
                                                                                  |)
                                                                                |)));
                                                                            fun γ =>
                                                                              ltac:(M.monadic
                                                                                (let γ0_0 :=
                                                                                  M.SubPointer.get_struct_tuple_field (|
                                                                                    γ,
                                                                                    "core::option::Option::Some",
                                                                                    0
                                                                                  |) in
                                                                                let γ1_0 :=
                                                                                  M.SubPointer.get_tuple_field (|
                                                                                    γ0_0,
                                                                                    0
                                                                                  |) in
                                                                                let γ1_1 :=
                                                                                  M.SubPointer.get_tuple_field (|
                                                                                    γ0_0,
                                                                                    1
                                                                                  |) in
                                                                                let offset :=
                                                                                  M.copy (|
                                                                                    γ1_0
                                                                                  |) in
                                                                                let input :=
                                                                                  M.copy (|
                                                                                    γ1_1
                                                                                  |) in
                                                                                let _ :=
                                                                                  M.match_operator (|
                                                                                    M.alloc (|
                                                                                      M.call_closure (|
                                                                                        M.get_trait_method (|
                                                                                          "core::ops::try_trait::Try",
                                                                                          Ty.apply
                                                                                            (Ty.path
                                                                                              "core::result::Result")
                                                                                            [
                                                                                              Ty.apply
                                                                                                (Ty.path
                                                                                                  "halo2_proofs::circuit::AssignedCell")
                                                                                                [
                                                                                                  F;
                                                                                                  F
                                                                                                ];
                                                                                              Ty.path
                                                                                                "halo2_proofs::plonk::error::Error"
                                                                                            ],
                                                                                          [],
                                                                                          "branch",
                                                                                          []
                                                                                        |),
                                                                                        [
                                                                                          M.call_closure (|
                                                                                            M.get_associated_function (|
                                                                                              Ty.apply
                                                                                                (Ty.path
                                                                                                  "halo2_proofs::circuit::Region")
                                                                                                [ F
                                                                                                ],
                                                                                              "assign_advice",
                                                                                              [
                                                                                                Ty.function
                                                                                                  [
                                                                                                    Ty.tuple
                                                                                                      []
                                                                                                  ]
                                                                                                  (Ty.apply
                                                                                                    (Ty.path
                                                                                                      "core::result::Result")
                                                                                                    [
                                                                                                      F;
                                                                                                      Ty.path
                                                                                                        "halo2_proofs::plonk::error::Error"
                                                                                                    ]);
                                                                                                F;
                                                                                                Ty.function
                                                                                                  [
                                                                                                    Ty.tuple
                                                                                                      []
                                                                                                  ]
                                                                                                  (Ty.apply
                                                                                                    (Ty.path
                                                                                                      "&")
                                                                                                    [
                                                                                                      Ty.path
                                                                                                        "str"
                                                                                                    ]);
                                                                                                Ty.apply
                                                                                                  (Ty.path
                                                                                                    "&")
                                                                                                  [
                                                                                                    Ty.path
                                                                                                      "str"
                                                                                                  ]
                                                                                              ]
                                                                                            |),
                                                                                            [
                                                                                              M.read (|
                                                                                                region
                                                                                              |);
                                                                                              M.closure
                                                                                                (fun
                                                                                                    γ =>
                                                                                                  ltac:(M.monadic
                                                                                                    match
                                                                                                      γ
                                                                                                    with
                                                                                                    | [
                                                                                                          α0
                                                                                                        ] =>
                                                                                                      M.match_operator (|
                                                                                                        M.alloc (|
                                                                                                          α0
                                                                                                        |),
                                                                                                        [
                                                                                                          fun
                                                                                                              γ =>
                                                                                                            ltac:(M.monadic
                                                                                                              (M.read (|
                                                                                                                Value.String
                                                                                                                  "context cont input index"
                                                                                                              |)))
                                                                                                        ]
                                                                                                      |)
                                                                                                    | _ =>
                                                                                                      M.impossible (||)
                                                                                                    end));
                                                                                              M.read (|
                                                                                                M.SubPointer.get_struct_record_field (|
                                                                                                  M.SubPointer.get_struct_record_field (|
                                                                                                    M.read (|
                                                                                                      self
                                                                                                    |),
                                                                                                    "delphinus_zkwasm::foreign::context::circuits::assign::ContextContHelperTableChip",
                                                                                                    "config"
                                                                                                  |),
                                                                                                  "delphinus_zkwasm::foreign::context::circuits::ContextContHelperTableConfig",
                                                                                                  "input"
                                                                                                |)
                                                                                              |);
                                                                                              BinOp.Panic.add (|
                                                                                                Integer.Usize,
                                                                                                M.read (|
                                                                                                  offset
                                                                                                |),
                                                                                                Value.Integer
                                                                                                  1
                                                                                              |);
                                                                                              M.closure
                                                                                                (fun
                                                                                                    γ =>
                                                                                                  ltac:(M.monadic
                                                                                                    match
                                                                                                      γ
                                                                                                    with
                                                                                                    | [
                                                                                                          α0
                                                                                                        ] =>
                                                                                                      M.match_operator (|
                                                                                                        M.alloc (|
                                                                                                          α0
                                                                                                        |),
                                                                                                        [
                                                                                                          fun
                                                                                                              γ =>
                                                                                                            ltac:(M.monadic
                                                                                                              (Value.StructTuple
                                                                                                                "core::result::Result::Ok"
                                                                                                                [
                                                                                                                  M.call_closure (|
                                                                                                                    M.get_trait_method (|
                                                                                                                      "core::convert::From",
                                                                                                                      F,
                                                                                                                      [
                                                                                                                        Ty.path
                                                                                                                          "u64"
                                                                                                                      ],
                                                                                                                      "from",
                                                                                                                      []
                                                                                                                    |),
                                                                                                                    [
                                                                                                                      M.read (|
                                                                                                                        M.read (|
                                                                                                                          input
                                                                                                                        |)
                                                                                                                      |)
                                                                                                                    ]
                                                                                                                  |)
                                                                                                                ]))
                                                                                                        ]
                                                                                                      |)
                                                                                                    | _ =>
                                                                                                      M.impossible (||)
                                                                                                    end))
                                                                                            ]
                                                                                          |)
                                                                                        ]
                                                                                      |)
                                                                                    |),
                                                                                    [
                                                                                      fun γ =>
                                                                                        ltac:(M.monadic
                                                                                          (let
                                                                                                γ0_0 :=
                                                                                            M.SubPointer.get_struct_tuple_field (|
                                                                                              γ,
                                                                                              "core::ops::control_flow::ControlFlow::Break",
                                                                                              0
                                                                                            |) in
                                                                                          let
                                                                                                residual :=
                                                                                            M.copy (|
                                                                                              γ0_0
                                                                                            |) in
                                                                                          M.alloc (|
                                                                                            M.never_to_any (|
                                                                                              M.read (|
                                                                                                M.return_ (|
                                                                                                  M.call_closure (|
                                                                                                    M.get_trait_method (|
                                                                                                      "core::ops::try_trait::FromResidual",
                                                                                                      Ty.apply
                                                                                                        (Ty.path
                                                                                                          "core::result::Result")
                                                                                                        [
                                                                                                          Ty.tuple
                                                                                                            [];
                                                                                                          Ty.path
                                                                                                            "halo2_proofs::plonk::error::Error"
                                                                                                        ],
                                                                                                      [
                                                                                                        Ty.apply
                                                                                                          (Ty.path
                                                                                                            "core::result::Result")
                                                                                                          [
                                                                                                            Ty.path
                                                                                                              "core::convert::Infallible";
                                                                                                            Ty.path
                                                                                                              "halo2_proofs::plonk::error::Error"
                                                                                                          ]
                                                                                                      ],
                                                                                                      "from_residual",
                                                                                                      []
                                                                                                    |),
                                                                                                    [
                                                                                                      M.read (|
                                                                                                        residual
                                                                                                      |)
                                                                                                    ]
                                                                                                  |)
                                                                                                |)
                                                                                              |)
                                                                                            |)
                                                                                          |)));
                                                                                      fun γ =>
                                                                                        ltac:(M.monadic
                                                                                          (let
                                                                                                γ0_0 :=
                                                                                            M.SubPointer.get_struct_tuple_field (|
                                                                                              γ,
                                                                                              "core::ops::control_flow::ControlFlow::Continue",
                                                                                              0
                                                                                            |) in
                                                                                          let val :=
                                                                                            M.copy (|
                                                                                              γ0_0
                                                                                            |) in
                                                                                          val))
                                                                                    ]
                                                                                  |) in
                                                                                M.alloc (|
                                                                                  Value.Tuple []
                                                                                |)))
                                                                          ]
                                                                        |) in
                                                                      M.alloc (| Value.Tuple [] |)))
                                                                  |)))
                                                            ]
                                                          |)) in
                                                      let _ :=
                                                        M.use
                                                          (M.match_operator (|
                                                            M.alloc (|
                                                              M.call_closure (|
                                                                M.get_trait_method (|
                                                                  "core::iter::traits::collect::IntoIterator",
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "core::iter::adapters::enumerate::Enumerate")
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "core::slice::iter::Iter")
                                                                        [ Ty.path "u64" ]
                                                                    ],
                                                                  [],
                                                                  "into_iter",
                                                                  []
                                                                |),
                                                                [
                                                                  M.call_closure (|
                                                                    M.get_trait_method (|
                                                                      "core::iter::traits::iterator::Iterator",
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "core::slice::iter::Iter")
                                                                        [ Ty.path "u64" ],
                                                                      [],
                                                                      "enumerate",
                                                                      []
                                                                    |),
                                                                    [
                                                                      M.call_closure (|
                                                                        M.get_associated_function (|
                                                                          Ty.apply
                                                                            (Ty.path "slice")
                                                                            [ Ty.path "u64" ],
                                                                          "iter",
                                                                          []
                                                                        |),
                                                                        [
                                                                          M.call_closure (|
                                                                            M.get_trait_method (|
                                                                              "core::ops::deref::Deref",
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "alloc::vec::Vec")
                                                                                [
                                                                                  Ty.path "u64";
                                                                                  Ty.path
                                                                                    "alloc::alloc::Global"
                                                                                ],
                                                                              [],
                                                                              "deref",
                                                                              []
                                                                            |),
                                                                            [ M.read (| outputs |) ]
                                                                          |)
                                                                        ]
                                                                      |)
                                                                    ]
                                                                  |)
                                                                ]
                                                              |)
                                                            |),
                                                            [
                                                              fun γ =>
                                                                ltac:(M.monadic
                                                                  (let iter := M.copy (| γ |) in
                                                                  M.loop (|
                                                                    ltac:(M.monadic
                                                                      (let _ :=
                                                                        M.match_operator (|
                                                                          M.alloc (|
                                                                            M.call_closure (|
                                                                              M.get_trait_method (|
                                                                                "core::iter::traits::iterator::Iterator",
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "core::iter::adapters::enumerate::Enumerate")
                                                                                  [
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "core::slice::iter::Iter")
                                                                                      [
                                                                                        Ty.path
                                                                                          "u64"
                                                                                      ]
                                                                                  ],
                                                                                [],
                                                                                "next",
                                                                                []
                                                                              |),
                                                                              [ iter ]
                                                                            |)
                                                                          |),
                                                                          [
                                                                            fun γ =>
                                                                              ltac:(M.monadic
                                                                                (M.alloc (|
                                                                                  M.never_to_any (|
                                                                                    M.read (|
                                                                                      M.break (||)
                                                                                    |)
                                                                                  |)
                                                                                |)));
                                                                            fun γ =>
                                                                              ltac:(M.monadic
                                                                                (let γ0_0 :=
                                                                                  M.SubPointer.get_struct_tuple_field (|
                                                                                    γ,
                                                                                    "core::option::Option::Some",
                                                                                    0
                                                                                  |) in
                                                                                let γ1_0 :=
                                                                                  M.SubPointer.get_tuple_field (|
                                                                                    γ0_0,
                                                                                    0
                                                                                  |) in
                                                                                let γ1_1 :=
                                                                                  M.SubPointer.get_tuple_field (|
                                                                                    γ0_0,
                                                                                    1
                                                                                  |) in
                                                                                let offset :=
                                                                                  M.copy (|
                                                                                    γ1_0
                                                                                  |) in
                                                                                let output :=
                                                                                  M.copy (|
                                                                                    γ1_1
                                                                                  |) in
                                                                                let _ :=
                                                                                  M.match_operator (|
                                                                                    M.alloc (|
                                                                                      M.call_closure (|
                                                                                        M.get_trait_method (|
                                                                                          "core::ops::try_trait::Try",
                                                                                          Ty.apply
                                                                                            (Ty.path
                                                                                              "core::result::Result")
                                                                                            [
                                                                                              Ty.apply
                                                                                                (Ty.path
                                                                                                  "halo2_proofs::circuit::AssignedCell")
                                                                                                [
                                                                                                  F;
                                                                                                  F
                                                                                                ];
                                                                                              Ty.path
                                                                                                "halo2_proofs::plonk::error::Error"
                                                                                            ],
                                                                                          [],
                                                                                          "branch",
                                                                                          []
                                                                                        |),
                                                                                        [
                                                                                          M.call_closure (|
                                                                                            M.get_associated_function (|
                                                                                              Ty.apply
                                                                                                (Ty.path
                                                                                                  "halo2_proofs::circuit::Region")
                                                                                                [ F
                                                                                                ],
                                                                                              "assign_advice",
                                                                                              [
                                                                                                Ty.function
                                                                                                  [
                                                                                                    Ty.tuple
                                                                                                      []
                                                                                                  ]
                                                                                                  (Ty.apply
                                                                                                    (Ty.path
                                                                                                      "core::result::Result")
                                                                                                    [
                                                                                                      F;
                                                                                                      Ty.path
                                                                                                        "halo2_proofs::plonk::error::Error"
                                                                                                    ]);
                                                                                                F;
                                                                                                Ty.function
                                                                                                  [
                                                                                                    Ty.tuple
                                                                                                      []
                                                                                                  ]
                                                                                                  (Ty.apply
                                                                                                    (Ty.path
                                                                                                      "&")
                                                                                                    [
                                                                                                      Ty.path
                                                                                                        "str"
                                                                                                    ]);
                                                                                                Ty.apply
                                                                                                  (Ty.path
                                                                                                    "&")
                                                                                                  [
                                                                                                    Ty.path
                                                                                                      "str"
                                                                                                  ]
                                                                                              ]
                                                                                            |),
                                                                                            [
                                                                                              M.read (|
                                                                                                region
                                                                                              |);
                                                                                              M.closure
                                                                                                (fun
                                                                                                    γ =>
                                                                                                  ltac:(M.monadic
                                                                                                    match
                                                                                                      γ
                                                                                                    with
                                                                                                    | [
                                                                                                          α0
                                                                                                        ] =>
                                                                                                      M.match_operator (|
                                                                                                        M.alloc (|
                                                                                                          α0
                                                                                                        |),
                                                                                                        [
                                                                                                          fun
                                                                                                              γ =>
                                                                                                            ltac:(M.monadic
                                                                                                              (M.read (|
                                                                                                                Value.String
                                                                                                                  "context cont output index"
                                                                                                              |)))
                                                                                                        ]
                                                                                                      |)
                                                                                                    | _ =>
                                                                                                      M.impossible (||)
                                                                                                    end));
                                                                                              M.read (|
                                                                                                M.SubPointer.get_struct_record_field (|
                                                                                                  M.SubPointer.get_struct_record_field (|
                                                                                                    M.read (|
                                                                                                      self
                                                                                                    |),
                                                                                                    "delphinus_zkwasm::foreign::context::circuits::assign::ContextContHelperTableChip",
                                                                                                    "config"
                                                                                                  |),
                                                                                                  "delphinus_zkwasm::foreign::context::circuits::ContextContHelperTableConfig",
                                                                                                  "output"
                                                                                                |)
                                                                                              |);
                                                                                              BinOp.Panic.add (|
                                                                                                Integer.Usize,
                                                                                                M.read (|
                                                                                                  offset
                                                                                                |),
                                                                                                Value.Integer
                                                                                                  1
                                                                                              |);
                                                                                              M.closure
                                                                                                (fun
                                                                                                    γ =>
                                                                                                  ltac:(M.monadic
                                                                                                    match
                                                                                                      γ
                                                                                                    with
                                                                                                    | [
                                                                                                          α0
                                                                                                        ] =>
                                                                                                      M.match_operator (|
                                                                                                        M.alloc (|
                                                                                                          α0
                                                                                                        |),
                                                                                                        [
                                                                                                          fun
                                                                                                              γ =>
                                                                                                            ltac:(M.monadic
                                                                                                              (Value.StructTuple
                                                                                                                "core::result::Result::Ok"
                                                                                                                [
                                                                                                                  M.call_closure (|
                                                                                                                    M.get_trait_method (|
                                                                                                                      "core::convert::From",
                                                                                                                      F,
                                                                                                                      [
                                                                                                                        Ty.path
                                                                                                                          "u64"
                                                                                                                      ],
                                                                                                                      "from",
                                                                                                                      []
                                                                                                                    |),
                                                                                                                    [
                                                                                                                      M.read (|
                                                                                                                        M.read (|
                                                                                                                          output
                                                                                                                        |)
                                                                                                                      |)
                                                                                                                    ]
                                                                                                                  |)
                                                                                                                ]))
                                                                                                        ]
                                                                                                      |)
                                                                                                    | _ =>
                                                                                                      M.impossible (||)
                                                                                                    end))
                                                                                            ]
                                                                                          |)
                                                                                        ]
                                                                                      |)
                                                                                    |),
                                                                                    [
                                                                                      fun γ =>
                                                                                        ltac:(M.monadic
                                                                                          (let
                                                                                                γ0_0 :=
                                                                                            M.SubPointer.get_struct_tuple_field (|
                                                                                              γ,
                                                                                              "core::ops::control_flow::ControlFlow::Break",
                                                                                              0
                                                                                            |) in
                                                                                          let
                                                                                                residual :=
                                                                                            M.copy (|
                                                                                              γ0_0
                                                                                            |) in
                                                                                          M.alloc (|
                                                                                            M.never_to_any (|
                                                                                              M.read (|
                                                                                                M.return_ (|
                                                                                                  M.call_closure (|
                                                                                                    M.get_trait_method (|
                                                                                                      "core::ops::try_trait::FromResidual",
                                                                                                      Ty.apply
                                                                                                        (Ty.path
                                                                                                          "core::result::Result")
                                                                                                        [
                                                                                                          Ty.tuple
                                                                                                            [];
                                                                                                          Ty.path
                                                                                                            "halo2_proofs::plonk::error::Error"
                                                                                                        ],
                                                                                                      [
                                                                                                        Ty.apply
                                                                                                          (Ty.path
                                                                                                            "core::result::Result")
                                                                                                          [
                                                                                                            Ty.path
                                                                                                              "core::convert::Infallible";
                                                                                                            Ty.path
                                                                                                              "halo2_proofs::plonk::error::Error"
                                                                                                          ]
                                                                                                      ],
                                                                                                      "from_residual",
                                                                                                      []
                                                                                                    |),
                                                                                                    [
                                                                                                      M.read (|
                                                                                                        residual
                                                                                                      |)
                                                                                                    ]
                                                                                                  |)
                                                                                                |)
                                                                                              |)
                                                                                            |)
                                                                                          |)));
                                                                                      fun γ =>
                                                                                        ltac:(M.monadic
                                                                                          (let
                                                                                                γ0_0 :=
                                                                                            M.SubPointer.get_struct_tuple_field (|
                                                                                              γ,
                                                                                              "core::ops::control_flow::ControlFlow::Continue",
                                                                                              0
                                                                                            |) in
                                                                                          let val :=
                                                                                            M.copy (|
                                                                                              γ0_0
                                                                                            |) in
                                                                                          val))
                                                                                    ]
                                                                                  |) in
                                                                                M.alloc (|
                                                                                  Value.Tuple []
                                                                                |)))
                                                                          ]
                                                                        |) in
                                                                      M.alloc (| Value.Tuple [] |)))
                                                                  |)))
                                                            ]
                                                          |)) in
                                                      M.alloc (|
                                                        Value.StructTuple
                                                          "core::result::Result::Ok"
                                                          [ Value.Tuple [] ]
                                                      |)
                                                    |)))
                                              ]
                                            |)
                                          | _ => M.impossible (||)
                                          end))
                                  ]
                                |)
                              ]
                            |)
                          |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ0_0 :=
                                  M.SubPointer.get_struct_tuple_field (|
                                    γ,
                                    "core::ops::control_flow::ControlFlow::Break",
                                    0
                                  |) in
                                let residual := M.copy (| γ0_0 |) in
                                M.alloc (|
                                  M.never_to_any (|
                                    M.read (|
                                      M.return_ (|
                                        M.call_closure (|
                                          M.get_trait_method (|
                                            "core::ops::try_trait::FromResidual",
                                            Ty.apply
                                              (Ty.path "core::result::Result")
                                              [
                                                Ty.tuple [];
                                                Ty.path "halo2_proofs::plonk::error::Error"
                                              ],
                                            [
                                              Ty.apply
                                                (Ty.path "core::result::Result")
                                                [
                                                  Ty.path "core::convert::Infallible";
                                                  Ty.path "halo2_proofs::plonk::error::Error"
                                                ]
                                            ],
                                            "from_residual",
                                            []
                                          |),
                                          [ M.read (| residual |) ]
                                        |)
                                      |)
                                    |)
                                  |)
                                |)));
                            fun γ =>
                              ltac:(M.monadic
                                (let γ0_0 :=
                                  M.SubPointer.get_struct_tuple_field (|
                                    γ,
                                    "core::ops::control_flow::ControlFlow::Continue",
                                    0
                                  |) in
                                let val := M.copy (| γ0_0 |) in
                                val))
                          ]
                        |) in
                      M.alloc (| Value.StructTuple "core::result::Result::Ok" [ Value.Tuple [] ] |)
                    |)))
                |)))
            | _, _ => M.impossible
            end.
          
          Axiom AssociatedFunction_assign :
            forall (F : Ty.t),
            M.IsAssociatedFunction (Self F) "assign" (assign F).
        End Impl_delphinus_zkwasm_foreign_context_circuits_assign_ContextContHelperTableChip_F.
        
        (* Trait *)
        (* Empty module 'ExtractContextFromTrace' *)
        
        Module Impl_delphinus_zkwasm_foreign_context_circuits_assign_ExtractContextFromTrace_for_specs_etable_EventTable.
          Definition Self : Ty.t := Ty.path "specs::etable::EventTable".
          
          (*
              fn get_context_inputs(&self) -> Vec<u64> {
                  self.entries()
                      .iter()
                      .filter_map(|e| match &e.step_info {
                          StepInfo::CallHost {
                              plugin: HostPlugin::Context,
                              op_index_in_plugin,
                              ret_val,
                              ..
                          } => {
                              if *op_index_in_plugin == Op::ReadContext as usize {
                                  *ret_val
                              } else {
                                  None
                              }
                          }
                          _ => None,
                      })
                      .collect()
              }
          *)
          Definition get_context_inputs (τ : list Ty.t) (α : list Value.t) : M :=
            match τ, α with
            | [], [ self ] =>
              ltac:(M.monadic
                (let self := M.alloc (| self |) in
                M.call_closure (|
                  M.get_trait_method (|
                    "core::iter::traits::iterator::Iterator",
                    Ty.apply
                      (Ty.path "core::iter::adapters::filter_map::FilterMap")
                      [
                        Ty.apply
                          (Ty.path "core::slice::iter::Iter")
                          [ Ty.path "specs::etable::EventTableEntry" ];
                        Ty.function
                          [
                            Ty.tuple
                              [ Ty.apply (Ty.path "&") [ Ty.path "specs::etable::EventTableEntry" ]
                              ]
                          ]
                          (Ty.apply (Ty.path "core::option::Option") [ Ty.path "u64" ])
                      ],
                    [],
                    "collect",
                    [
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        [ Ty.path "u64"; Ty.path "alloc::alloc::Global" ]
                    ]
                  |),
                  [
                    M.call_closure (|
                      M.get_trait_method (|
                        "core::iter::traits::iterator::Iterator",
                        Ty.apply
                          (Ty.path "core::slice::iter::Iter")
                          [ Ty.path "specs::etable::EventTableEntry" ],
                        [],
                        "filter_map",
                        [
                          Ty.path "u64";
                          Ty.function
                            [
                              Ty.tuple
                                [
                                  Ty.apply
                                    (Ty.path "&")
                                    [ Ty.path "specs::etable::EventTableEntry" ]
                                ]
                            ]
                            (Ty.apply (Ty.path "core::option::Option") [ Ty.path "u64" ])
                        ]
                      |),
                      [
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.apply (Ty.path "slice") [ Ty.path "specs::etable::EventTableEntry" ],
                            "iter",
                            []
                          |),
                          [
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::ops::deref::Deref",
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  [
                                    Ty.path "specs::etable::EventTableEntry";
                                    Ty.path "alloc::alloc::Global"
                                  ],
                                [],
                                "deref",
                                []
                              |),
                              [
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.path "specs::etable::EventTable",
                                    "entries",
                                    []
                                  |),
                                  [ M.read (| self |) ]
                                |)
                              ]
                            |)
                          ]
                        |);
                        M.closure
                          (fun γ =>
                            ltac:(M.monadic
                              match γ with
                              | [ α0 ] =>
                                M.match_operator (|
                                  M.alloc (| α0 |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let e := M.copy (| γ |) in
                                        M.read (|
                                          M.match_operator (|
                                            M.alloc (|
                                              M.SubPointer.get_struct_record_field (|
                                                M.read (| e |),
                                                "specs::etable::EventTableEntry",
                                                "step_info"
                                              |)
                                            |),
                                            [
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let γ := M.read (| γ |) in
                                                  let γ1_0 :=
                                                    M.SubPointer.get_struct_record_field (|
                                                      γ,
                                                      "specs::step::StepInfo::CallHost",
                                                      "plugin"
                                                    |) in
                                                  let γ1_1 :=
                                                    M.SubPointer.get_struct_record_field (|
                                                      γ,
                                                      "specs::step::StepInfo::CallHost",
                                                      "op_index_in_plugin"
                                                    |) in
                                                  let γ1_2 :=
                                                    M.SubPointer.get_struct_record_field (|
                                                      γ,
                                                      "specs::step::StepInfo::CallHost",
                                                      "ret_val"
                                                    |) in
                                                  let op_index_in_plugin := M.alloc (| γ1_1 |) in
                                                  let ret_val := M.alloc (| γ1_2 |) in
                                                  M.match_operator (|
                                                    M.alloc (| Value.Tuple [] |),
                                                    [
                                                      fun γ =>
                                                        ltac:(M.monadic
                                                          (let γ :=
                                                            M.use
                                                              (M.alloc (|
                                                                BinOp.Pure.eq
                                                                  (M.read (|
                                                                    M.read (| op_index_in_plugin |)
                                                                  |))
                                                                  (M.rust_cast
                                                                    (BinOp.Panic.add (|
                                                                      Integer.Isize,
                                                                      M.get_constant (|
                                                                        "delphinus_zkwasm::foreign::context::Op::ReadContext_discriminant"
                                                                      |),
                                                                      Value.Integer 0
                                                                    |)))
                                                              |)) in
                                                          let _ :=
                                                            M.is_constant_or_break_match (|
                                                              M.read (| γ |),
                                                              Value.Bool true
                                                            |) in
                                                          M.read (| ret_val |)));
                                                      fun γ =>
                                                        ltac:(M.monadic
                                                          (M.alloc (|
                                                            Value.StructTuple
                                                              "core::option::Option::None"
                                                              []
                                                          |)))
                                                    ]
                                                  |)));
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (M.alloc (|
                                                    Value.StructTuple
                                                      "core::option::Option::None"
                                                      []
                                                  |)))
                                            ]
                                          |)
                                        |)))
                                  ]
                                |)
                              | _ => M.impossible (||)
                              end))
                      ]
                    |)
                  ]
                |)))
            | _, _ => M.impossible
            end.
          
          (*
              fn get_context_outputs(&self) -> Vec<u64> {
                  self.entries()
                      .iter()
                      .filter_map(|e| match &e.step_info {
                          StepInfo::CallHost {
                              plugin: HostPlugin::Context,
                              op_index_in_plugin,
                              args,
                              ..
                          } => {
                              if *op_index_in_plugin == Op::WriteContext as usize {
                                  Some(args[0])
                              } else {
                                  None
                              }
                          }
                          _ => None,
                      })
                      .collect()
              }
          *)
          Definition get_context_outputs (τ : list Ty.t) (α : list Value.t) : M :=
            match τ, α with
            | [], [ self ] =>
              ltac:(M.monadic
                (let self := M.alloc (| self |) in
                M.call_closure (|
                  M.get_trait_method (|
                    "core::iter::traits::iterator::Iterator",
                    Ty.apply
                      (Ty.path "core::iter::adapters::filter_map::FilterMap")
                      [
                        Ty.apply
                          (Ty.path "core::slice::iter::Iter")
                          [ Ty.path "specs::etable::EventTableEntry" ];
                        Ty.function
                          [
                            Ty.tuple
                              [ Ty.apply (Ty.path "&") [ Ty.path "specs::etable::EventTableEntry" ]
                              ]
                          ]
                          (Ty.apply (Ty.path "core::option::Option") [ Ty.path "u64" ])
                      ],
                    [],
                    "collect",
                    [
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        [ Ty.path "u64"; Ty.path "alloc::alloc::Global" ]
                    ]
                  |),
                  [
                    M.call_closure (|
                      M.get_trait_method (|
                        "core::iter::traits::iterator::Iterator",
                        Ty.apply
                          (Ty.path "core::slice::iter::Iter")
                          [ Ty.path "specs::etable::EventTableEntry" ],
                        [],
                        "filter_map",
                        [
                          Ty.path "u64";
                          Ty.function
                            [
                              Ty.tuple
                                [
                                  Ty.apply
                                    (Ty.path "&")
                                    [ Ty.path "specs::etable::EventTableEntry" ]
                                ]
                            ]
                            (Ty.apply (Ty.path "core::option::Option") [ Ty.path "u64" ])
                        ]
                      |),
                      [
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.apply (Ty.path "slice") [ Ty.path "specs::etable::EventTableEntry" ],
                            "iter",
                            []
                          |),
                          [
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::ops::deref::Deref",
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  [
                                    Ty.path "specs::etable::EventTableEntry";
                                    Ty.path "alloc::alloc::Global"
                                  ],
                                [],
                                "deref",
                                []
                              |),
                              [
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.path "specs::etable::EventTable",
                                    "entries",
                                    []
                                  |),
                                  [ M.read (| self |) ]
                                |)
                              ]
                            |)
                          ]
                        |);
                        M.closure
                          (fun γ =>
                            ltac:(M.monadic
                              match γ with
                              | [ α0 ] =>
                                M.match_operator (|
                                  M.alloc (| α0 |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let e := M.copy (| γ |) in
                                        M.read (|
                                          M.match_operator (|
                                            M.alloc (|
                                              M.SubPointer.get_struct_record_field (|
                                                M.read (| e |),
                                                "specs::etable::EventTableEntry",
                                                "step_info"
                                              |)
                                            |),
                                            [
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let γ := M.read (| γ |) in
                                                  let γ1_0 :=
                                                    M.SubPointer.get_struct_record_field (|
                                                      γ,
                                                      "specs::step::StepInfo::CallHost",
                                                      "plugin"
                                                    |) in
                                                  let γ1_1 :=
                                                    M.SubPointer.get_struct_record_field (|
                                                      γ,
                                                      "specs::step::StepInfo::CallHost",
                                                      "op_index_in_plugin"
                                                    |) in
                                                  let γ1_2 :=
                                                    M.SubPointer.get_struct_record_field (|
                                                      γ,
                                                      "specs::step::StepInfo::CallHost",
                                                      "args"
                                                    |) in
                                                  let op_index_in_plugin := M.alloc (| γ1_1 |) in
                                                  let args := M.alloc (| γ1_2 |) in
                                                  M.match_operator (|
                                                    M.alloc (| Value.Tuple [] |),
                                                    [
                                                      fun γ =>
                                                        ltac:(M.monadic
                                                          (let γ :=
                                                            M.use
                                                              (M.alloc (|
                                                                BinOp.Pure.eq
                                                                  (M.read (|
                                                                    M.read (| op_index_in_plugin |)
                                                                  |))
                                                                  (M.rust_cast
                                                                    (BinOp.Panic.add (|
                                                                      Integer.Isize,
                                                                      M.get_constant (|
                                                                        "delphinus_zkwasm::foreign::context::Op::WriteContext_discriminant"
                                                                      |),
                                                                      Value.Integer 0
                                                                    |)))
                                                              |)) in
                                                          let _ :=
                                                            M.is_constant_or_break_match (|
                                                              M.read (| γ |),
                                                              Value.Bool true
                                                            |) in
                                                          M.alloc (|
                                                            Value.StructTuple
                                                              "core::option::Option::Some"
                                                              [
                                                                M.read (|
                                                                  M.call_closure (|
                                                                    M.get_trait_method (|
                                                                      "core::ops::index::Index",
                                                                      Ty.apply
                                                                        (Ty.path "alloc::vec::Vec")
                                                                        [
                                                                          Ty.path "u64";
                                                                          Ty.path
                                                                            "alloc::alloc::Global"
                                                                        ],
                                                                      [ Ty.path "usize" ],
                                                                      "index",
                                                                      []
                                                                    |),
                                                                    [
                                                                      M.read (| args |);
                                                                      Value.Integer 0
                                                                    ]
                                                                  |)
                                                                |)
                                                              ]
                                                          |)));
                                                      fun γ =>
                                                        ltac:(M.monadic
                                                          (M.alloc (|
                                                            Value.StructTuple
                                                              "core::option::Option::None"
                                                              []
                                                          |)))
                                                    ]
                                                  |)));
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (M.alloc (|
                                                    Value.StructTuple
                                                      "core::option::Option::None"
                                                      []
                                                  |)))
                                            ]
                                          |)
                                        |)))
                                  ]
                                |)
                              | _ => M.impossible (||)
                              end))
                      ]
                    |)
                  ]
                |)))
            | _, _ => M.impossible
            end.
          
          Axiom Implements :
            M.IsTraitInstance
              "delphinus_zkwasm::foreign::context::circuits::assign::ExtractContextFromTrace"
              Self
              (* Trait polymorphic types *) []
              (* Instance *)
              [
                ("get_context_inputs", InstanceField.Method get_context_inputs);
                ("get_context_outputs", InstanceField.Method get_context_outputs)
              ].
        End Impl_delphinus_zkwasm_foreign_context_circuits_assign_ExtractContextFromTrace_for_specs_etable_EventTable.
      End assign.
    End circuits.
  End context.
End foreign.
