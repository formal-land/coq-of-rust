(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module foreign.
  Module context.
    Module etable_op_configure.
      (* StructRecord
        {
          name := "ETableContextHelperTableConfig";
          ty_params := [ "F" ];
          fields :=
            [
              ("plugin_index", Ty.path "u64");
              ("is_context_in_op",
                Ty.apply (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedBitCell") [ F ]);
              ("is_context_out_op",
                Ty.apply (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedBitCell") [ F ]);
              ("context_input_index_for_lookup",
                Ty.apply
                  (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedUnlimitedCell")
                  [ F ]);
              ("context_output_index_for_lookup",
                Ty.apply
                  (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedUnlimitedCell")
                  [ F ]);
              ("input_value",
                Ty.apply
                  (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedUnlimitedCell")
                  [ F ]);
              ("output_value",
                Ty.apply
                  (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedUnlimitedCell")
                  [ F ]);
              ("lookup_read_stack",
                Ty.apply
                  (Ty.path
                    "delphinus_zkwasm::circuits::etable::allocator::AllocatedMemoryTableLookupReadCell")
                  [ F ]);
              ("lookup_write_stack",
                Ty.apply
                  (Ty.path
                    "delphinus_zkwasm::circuits::etable::allocator::AllocatedMemoryTableLookupWriteCell")
                  [ F ])
            ];
        } *)
      
      (* StructRecord
        {
          name := "ETableContextHelperTableConfigBuilder";
          ty_params := [];
          fields := [ ("index", Ty.path "usize") ];
        } *)
      
      Module Impl_delphinus_zkwasm_foreign_InternalHostPluginBuilder_for_delphinus_zkwasm_foreign_context_etable_op_configure_ETableContextHelperTableConfigBuilder.
        Definition Self : Ty.t :=
          Ty.path
            "delphinus_zkwasm::foreign::context::etable_op_configure::ETableContextHelperTableConfigBuilder".
        
        (*
            fn new(index: usize) -> Self {
                Self { index }
            }
        *)
        Definition new (τ : list Ty.t) (α : list Value.t) : M :=
          match τ, α with
          | [], [ index ] =>
            ltac:(M.monadic
              (let index := M.alloc (| index |) in
              Value.StructRecord
                "delphinus_zkwasm::foreign::context::etable_op_configure::ETableContextHelperTableConfigBuilder"
                [ ("index", M.read (| index |)) ]))
          | _, _ => M.impossible
          end.
        
        Axiom Implements :
          M.IsTraitInstance
            "delphinus_zkwasm::foreign::InternalHostPluginBuilder"
            Self
            (* Trait polymorphic types *) []
            (* Instance *) [ ("new", InstanceField.Method new) ].
      End Impl_delphinus_zkwasm_foreign_InternalHostPluginBuilder_for_delphinus_zkwasm_foreign_context_etable_op_configure_ETableContextHelperTableConfigBuilder.
      
      Module Impl_delphinus_zkwasm_foreign_EventTableForeignCallConfigBuilder_where_pairing_bn256_arithmetic_fields_FieldExt_F_F_for_delphinus_zkwasm_foreign_context_etable_op_configure_ETableContextHelperTableConfigBuilder.
        Definition Self (F : Ty.t) : Ty.t :=
          Ty.path
            "delphinus_zkwasm::foreign::context::etable_op_configure::ETableContextHelperTableConfigBuilder".
        
        (*
            fn configure(
                self,
                common_config: &EventTableCommonConfig<F>,
                allocator: &mut EventTableCellAllocator<F>,
                constraint_builder: &mut ConstraintBuilder<F>,
                lookup_cells: &mut (impl Iterator<Item = AllocatedUnlimitedCell<F>> + Clone),
            ) -> Box<dyn EventTableOpcodeConfig<F>> {
                let is_context_in_op = allocator.alloc_bit_cell();
                let is_context_out_op = allocator.alloc_bit_cell();
                let context_input_index_for_lookup = lookup_cells.next().unwrap();
                let context_output_index_for_lookup = lookup_cells.next().unwrap();
        
                let input_value = lookup_cells.next().unwrap();
                let output_value = lookup_cells.next().unwrap();
        
                let sp = common_config.sp_cell;
        
                let context_input_index = common_config.context_input_index_cell;
                let context_output_index = common_config.context_output_index_cell;
        
                let lookup_read_stack = allocator.alloc_memory_table_lookup_read_cell(
                    "context stack read",
                    constraint_builder,
                    common_config.eid_cell,
                    move |____| constant_from!(LocationType::Stack as u64),
                    move |meta| sp.expr(meta) + constant_from!(1),
                    move |____| constant_from!(0),
                    move |meta| output_value.expr(meta),
                    move |meta| is_context_out_op.expr(meta),
                );
                let lookup_write_stack = allocator.alloc_memory_table_lookup_write_cell(
                    "context stack write",
                    constraint_builder,
                    common_config.eid_cell,
                    move |____| constant_from!(LocationType::Stack as u64),
                    move |meta| sp.expr(meta),
                    move |____| constant_from!(0),
                    move |meta| input_value.expr(meta),
                    move |meta| is_context_in_op.expr(meta),
                );
        
                constraint_builder.push(
                    "context sel",
                    Box::new(move |meta| {
                        vec![is_context_in_op.expr(meta) + is_context_out_op.expr(meta) - constant_from!(1)]
                    }),
                );
        
                constraint_builder.push(
                    "context lookup",
                    Box::new(move |meta| {
                        vec![
                            is_context_in_op.expr(meta)
                                * (context_input_index_for_lookup.expr(meta)
                                    - context_input_index.expr(meta)),
                            is_context_out_op.expr(meta)
                                * (context_output_index_for_lookup.expr(meta)
                                    - context_output_index.expr(meta)),
                        ]
                    }),
                );
        
                constraint_builder.lookup(
                    CONTEXT_FOREIGN_TABLE_KEY,
                    "lookup context cont table",
                    Box::new(move |meta| {
                        vec![
                            context_input_index_for_lookup.expr(meta),
                            input_value.expr(meta),
                            context_output_index_for_lookup.expr(meta),
                            output_value.expr(meta),
                        ]
                    }),
                );
        
                Box::new(ETableContextHelperTableConfig {
                    plugin_index: self.index as u64,
                    is_context_in_op,
                    is_context_out_op,
                    input_value,
                    output_value,
                    lookup_read_stack,
                    lookup_write_stack,
                    context_input_index_for_lookup,
                    context_output_index_for_lookup,
                })
            }
        *)
        Definition configure (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self F in
          match τ, α with
          | [ impl_Iterator_Item___AllocatedUnlimitedCell_F____plus__Clone ],
              [ self; common_config; allocator; constraint_builder; lookup_cells ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              let common_config := M.alloc (| common_config |) in
              let allocator := M.alloc (| allocator |) in
              let constraint_builder := M.alloc (| constraint_builder |) in
              let lookup_cells := M.alloc (| lookup_cells |) in
              (* Unsize *)
              M.pointer_coercion
                (M.read (|
                  let is_context_in_op :=
                    M.alloc (|
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.apply
                            (Ty.path
                              "delphinus_zkwasm::circuits::etable::allocator::EventTableCellAllocator")
                            [ F ],
                          "alloc_bit_cell",
                          []
                        |),
                        [ M.read (| allocator |) ]
                      |)
                    |) in
                  let is_context_out_op :=
                    M.alloc (|
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.apply
                            (Ty.path
                              "delphinus_zkwasm::circuits::etable::allocator::EventTableCellAllocator")
                            [ F ],
                          "alloc_bit_cell",
                          []
                        |),
                        [ M.read (| allocator |) ]
                      |)
                    |) in
                  let context_input_index_for_lookup :=
                    M.alloc (|
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.apply
                            (Ty.path "core::option::Option")
                            [
                              Ty.apply
                                (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedUnlimitedCell")
                                [ F ]
                            ],
                          "unwrap",
                          []
                        |),
                        [
                          M.call_closure (|
                            M.get_trait_method (|
                              "core::iter::traits::iterator::Iterator",
                              impl_Iterator_Item___AllocatedUnlimitedCell_F____plus__Clone,
                              [],
                              "next",
                              []
                            |),
                            [ M.read (| lookup_cells |) ]
                          |)
                        ]
                      |)
                    |) in
                  let context_output_index_for_lookup :=
                    M.alloc (|
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.apply
                            (Ty.path "core::option::Option")
                            [
                              Ty.apply
                                (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedUnlimitedCell")
                                [ F ]
                            ],
                          "unwrap",
                          []
                        |),
                        [
                          M.call_closure (|
                            M.get_trait_method (|
                              "core::iter::traits::iterator::Iterator",
                              impl_Iterator_Item___AllocatedUnlimitedCell_F____plus__Clone,
                              [],
                              "next",
                              []
                            |),
                            [ M.read (| lookup_cells |) ]
                          |)
                        ]
                      |)
                    |) in
                  let input_value :=
                    M.alloc (|
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.apply
                            (Ty.path "core::option::Option")
                            [
                              Ty.apply
                                (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedUnlimitedCell")
                                [ F ]
                            ],
                          "unwrap",
                          []
                        |),
                        [
                          M.call_closure (|
                            M.get_trait_method (|
                              "core::iter::traits::iterator::Iterator",
                              impl_Iterator_Item___AllocatedUnlimitedCell_F____plus__Clone,
                              [],
                              "next",
                              []
                            |),
                            [ M.read (| lookup_cells |) ]
                          |)
                        ]
                      |)
                    |) in
                  let output_value :=
                    M.alloc (|
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.apply
                            (Ty.path "core::option::Option")
                            [
                              Ty.apply
                                (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedUnlimitedCell")
                                [ F ]
                            ],
                          "unwrap",
                          []
                        |),
                        [
                          M.call_closure (|
                            M.get_trait_method (|
                              "core::iter::traits::iterator::Iterator",
                              impl_Iterator_Item___AllocatedUnlimitedCell_F____plus__Clone,
                              [],
                              "next",
                              []
                            |),
                            [ M.read (| lookup_cells |) ]
                          |)
                        ]
                      |)
                    |) in
                  let sp :=
                    M.copy (|
                      M.SubPointer.get_struct_record_field (|
                        M.read (| common_config |),
                        "delphinus_zkwasm::circuits::etable::EventTableCommonConfig",
                        "sp_cell"
                      |)
                    |) in
                  let context_input_index :=
                    M.copy (|
                      M.SubPointer.get_struct_record_field (|
                        M.read (| common_config |),
                        "delphinus_zkwasm::circuits::etable::EventTableCommonConfig",
                        "context_input_index_cell"
                      |)
                    |) in
                  let context_output_index :=
                    M.copy (|
                      M.SubPointer.get_struct_record_field (|
                        M.read (| common_config |),
                        "delphinus_zkwasm::circuits::etable::EventTableCommonConfig",
                        "context_output_index_cell"
                      |)
                    |) in
                  let lookup_read_stack :=
                    M.alloc (|
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.apply
                            (Ty.path
                              "delphinus_zkwasm::circuits::etable::allocator::EventTableCellAllocator")
                            [ F ],
                          "alloc_memory_table_lookup_read_cell",
                          [
                            Ty.function
                              [
                                Ty.tuple
                                  [
                                    Ty.apply
                                      (Ty.path "&mut")
                                      [
                                        Ty.apply
                                          (Ty.path "halo2_proofs::plonk::circuit::VirtualCells")
                                          [ F ]
                                      ]
                                  ]
                              ]
                              (Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ]);
                            Ty.function
                              [
                                Ty.tuple
                                  [
                                    Ty.apply
                                      (Ty.path "&mut")
                                      [
                                        Ty.apply
                                          (Ty.path "halo2_proofs::plonk::circuit::VirtualCells")
                                          [ F ]
                                      ]
                                  ]
                              ]
                              (Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ]);
                            Ty.function
                              [
                                Ty.tuple
                                  [
                                    Ty.apply
                                      (Ty.path "&mut")
                                      [
                                        Ty.apply
                                          (Ty.path "halo2_proofs::plonk::circuit::VirtualCells")
                                          [ F ]
                                      ]
                                  ]
                              ]
                              (Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ]);
                            Ty.function
                              [
                                Ty.tuple
                                  [
                                    Ty.apply
                                      (Ty.path "&mut")
                                      [
                                        Ty.apply
                                          (Ty.path "halo2_proofs::plonk::circuit::VirtualCells")
                                          [ F ]
                                      ]
                                  ]
                              ]
                              (Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ]);
                            Ty.function
                              [
                                Ty.tuple
                                  [
                                    Ty.apply
                                      (Ty.path "&mut")
                                      [
                                        Ty.apply
                                          (Ty.path "halo2_proofs::plonk::circuit::VirtualCells")
                                          [ F ]
                                      ]
                                  ]
                              ]
                              (Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ])
                          ]
                        |),
                        [
                          M.read (| allocator |);
                          M.read (| Value.String "context stack read" |);
                          M.read (| constraint_builder |);
                          M.read (|
                            M.SubPointer.get_struct_record_field (|
                              M.read (| common_config |),
                              "delphinus_zkwasm::circuits::etable::EventTableCommonConfig",
                              "eid_cell"
                            |)
                          |);
                          M.closure
                            (fun γ =>
                              ltac:(M.monadic
                                match γ with
                                | [ α0 ] =>
                                  M.match_operator (|
                                    M.alloc (| α0 |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let ____ := M.copy (| γ |) in
                                          Value.StructTuple
                                            "halo2_proofs::plonk::circuit::Expression::Constant"
                                            [
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "core::convert::From",
                                                  F,
                                                  [ Ty.path "u64" ],
                                                  "from",
                                                  []
                                                |),
                                                [
                                                  M.read (|
                                                    M.use
                                                      (M.alloc (|
                                                        M.rust_cast
                                                          (BinOp.Panic.add (|
                                                            Integer.Isize,
                                                            M.get_constant (|
                                                              "specs::mtable::LocationType::Stack_discriminant"
                                                            |),
                                                            Value.Integer 0
                                                          |))
                                                      |))
                                                  |)
                                                ]
                                              |)
                                            ]))
                                    ]
                                  |)
                                | _ => M.impossible (||)
                                end));
                          M.closure
                            (fun γ =>
                              ltac:(M.monadic
                                match γ with
                                | [ α0 ] =>
                                  M.match_operator (|
                                    M.alloc (| α0 |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let meta := M.copy (| γ |) in
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "core::ops::arith::Add",
                                              Ty.apply
                                                (Ty.path "halo2_proofs::plonk::circuit::Expression")
                                                [ F ],
                                              [
                                                Ty.apply
                                                  (Ty.path
                                                    "halo2_proofs::plonk::circuit::Expression")
                                                  [ F ]
                                              ],
                                              "add",
                                              []
                                            |),
                                            [
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "delphinus_zkwasm::circuits::cell::CellExpression",
                                                  Ty.apply
                                                    (Ty.path
                                                      "delphinus_zkwasm::circuits::cell::AllocatedCommonRangeCell")
                                                    [ F ],
                                                  [ F ],
                                                  "expr",
                                                  []
                                                |),
                                                [ sp; M.read (| meta |) ]
                                              |);
                                              Value.StructTuple
                                                "halo2_proofs::plonk::circuit::Expression::Constant"
                                                [
                                                  M.call_closure (|
                                                    M.get_trait_method (|
                                                      "core::convert::From",
                                                      F,
                                                      [ Ty.path "u64" ],
                                                      "from",
                                                      []
                                                    |),
                                                    [
                                                      M.read (|
                                                        M.use (M.alloc (| Value.Integer 1 |))
                                                      |)
                                                    ]
                                                  |)
                                                ]
                                            ]
                                          |)))
                                    ]
                                  |)
                                | _ => M.impossible (||)
                                end));
                          M.closure
                            (fun γ =>
                              ltac:(M.monadic
                                match γ with
                                | [ α0 ] =>
                                  M.match_operator (|
                                    M.alloc (| α0 |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let ____ := M.copy (| γ |) in
                                          Value.StructTuple
                                            "halo2_proofs::plonk::circuit::Expression::Constant"
                                            [
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "core::convert::From",
                                                  F,
                                                  [ Ty.path "u64" ],
                                                  "from",
                                                  []
                                                |),
                                                [ M.read (| M.use (M.alloc (| Value.Integer 0 |)) |)
                                                ]
                                              |)
                                            ]))
                                    ]
                                  |)
                                | _ => M.impossible (||)
                                end));
                          M.closure
                            (fun γ =>
                              ltac:(M.monadic
                                match γ with
                                | [ α0 ] =>
                                  M.match_operator (|
                                    M.alloc (| α0 |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let meta := M.copy (| γ |) in
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "delphinus_zkwasm::circuits::cell::CellExpression",
                                              Ty.apply
                                                (Ty.path
                                                  "delphinus_zkwasm::circuits::cell::AllocatedUnlimitedCell")
                                                [ F ],
                                              [ F ],
                                              "expr",
                                              []
                                            |),
                                            [ output_value; M.read (| meta |) ]
                                          |)))
                                    ]
                                  |)
                                | _ => M.impossible (||)
                                end));
                          M.closure
                            (fun γ =>
                              ltac:(M.monadic
                                match γ with
                                | [ α0 ] =>
                                  M.match_operator (|
                                    M.alloc (| α0 |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let meta := M.copy (| γ |) in
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "delphinus_zkwasm::circuits::cell::CellExpression",
                                              Ty.apply
                                                (Ty.path
                                                  "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                                [ F ],
                                              [ F ],
                                              "expr",
                                              []
                                            |),
                                            [ is_context_out_op; M.read (| meta |) ]
                                          |)))
                                    ]
                                  |)
                                | _ => M.impossible (||)
                                end))
                        ]
                      |)
                    |) in
                  let lookup_write_stack :=
                    M.alloc (|
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.apply
                            (Ty.path
                              "delphinus_zkwasm::circuits::etable::allocator::EventTableCellAllocator")
                            [ F ],
                          "alloc_memory_table_lookup_write_cell",
                          [
                            Ty.function
                              [
                                Ty.tuple
                                  [
                                    Ty.apply
                                      (Ty.path "&mut")
                                      [
                                        Ty.apply
                                          (Ty.path "halo2_proofs::plonk::circuit::VirtualCells")
                                          [ F ]
                                      ]
                                  ]
                              ]
                              (Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ]);
                            Ty.function
                              [
                                Ty.tuple
                                  [
                                    Ty.apply
                                      (Ty.path "&mut")
                                      [
                                        Ty.apply
                                          (Ty.path "halo2_proofs::plonk::circuit::VirtualCells")
                                          [ F ]
                                      ]
                                  ]
                              ]
                              (Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ]);
                            Ty.function
                              [
                                Ty.tuple
                                  [
                                    Ty.apply
                                      (Ty.path "&mut")
                                      [
                                        Ty.apply
                                          (Ty.path "halo2_proofs::plonk::circuit::VirtualCells")
                                          [ F ]
                                      ]
                                  ]
                              ]
                              (Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ]);
                            Ty.function
                              [
                                Ty.tuple
                                  [
                                    Ty.apply
                                      (Ty.path "&mut")
                                      [
                                        Ty.apply
                                          (Ty.path "halo2_proofs::plonk::circuit::VirtualCells")
                                          [ F ]
                                      ]
                                  ]
                              ]
                              (Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ]);
                            Ty.function
                              [
                                Ty.tuple
                                  [
                                    Ty.apply
                                      (Ty.path "&mut")
                                      [
                                        Ty.apply
                                          (Ty.path "halo2_proofs::plonk::circuit::VirtualCells")
                                          [ F ]
                                      ]
                                  ]
                              ]
                              (Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ])
                          ]
                        |),
                        [
                          M.read (| allocator |);
                          M.read (| Value.String "context stack write" |);
                          M.read (| constraint_builder |);
                          M.read (|
                            M.SubPointer.get_struct_record_field (|
                              M.read (| common_config |),
                              "delphinus_zkwasm::circuits::etable::EventTableCommonConfig",
                              "eid_cell"
                            |)
                          |);
                          M.closure
                            (fun γ =>
                              ltac:(M.monadic
                                match γ with
                                | [ α0 ] =>
                                  M.match_operator (|
                                    M.alloc (| α0 |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let ____ := M.copy (| γ |) in
                                          Value.StructTuple
                                            "halo2_proofs::plonk::circuit::Expression::Constant"
                                            [
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "core::convert::From",
                                                  F,
                                                  [ Ty.path "u64" ],
                                                  "from",
                                                  []
                                                |),
                                                [
                                                  M.read (|
                                                    M.use
                                                      (M.alloc (|
                                                        M.rust_cast
                                                          (BinOp.Panic.add (|
                                                            Integer.Isize,
                                                            M.get_constant (|
                                                              "specs::mtable::LocationType::Stack_discriminant"
                                                            |),
                                                            Value.Integer 0
                                                          |))
                                                      |))
                                                  |)
                                                ]
                                              |)
                                            ]))
                                    ]
                                  |)
                                | _ => M.impossible (||)
                                end));
                          M.closure
                            (fun γ =>
                              ltac:(M.monadic
                                match γ with
                                | [ α0 ] =>
                                  M.match_operator (|
                                    M.alloc (| α0 |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let meta := M.copy (| γ |) in
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "delphinus_zkwasm::circuits::cell::CellExpression",
                                              Ty.apply
                                                (Ty.path
                                                  "delphinus_zkwasm::circuits::cell::AllocatedCommonRangeCell")
                                                [ F ],
                                              [ F ],
                                              "expr",
                                              []
                                            |),
                                            [ sp; M.read (| meta |) ]
                                          |)))
                                    ]
                                  |)
                                | _ => M.impossible (||)
                                end));
                          M.closure
                            (fun γ =>
                              ltac:(M.monadic
                                match γ with
                                | [ α0 ] =>
                                  M.match_operator (|
                                    M.alloc (| α0 |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let ____ := M.copy (| γ |) in
                                          Value.StructTuple
                                            "halo2_proofs::plonk::circuit::Expression::Constant"
                                            [
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "core::convert::From",
                                                  F,
                                                  [ Ty.path "u64" ],
                                                  "from",
                                                  []
                                                |),
                                                [ M.read (| M.use (M.alloc (| Value.Integer 0 |)) |)
                                                ]
                                              |)
                                            ]))
                                    ]
                                  |)
                                | _ => M.impossible (||)
                                end));
                          M.closure
                            (fun γ =>
                              ltac:(M.monadic
                                match γ with
                                | [ α0 ] =>
                                  M.match_operator (|
                                    M.alloc (| α0 |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let meta := M.copy (| γ |) in
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "delphinus_zkwasm::circuits::cell::CellExpression",
                                              Ty.apply
                                                (Ty.path
                                                  "delphinus_zkwasm::circuits::cell::AllocatedUnlimitedCell")
                                                [ F ],
                                              [ F ],
                                              "expr",
                                              []
                                            |),
                                            [ input_value; M.read (| meta |) ]
                                          |)))
                                    ]
                                  |)
                                | _ => M.impossible (||)
                                end));
                          M.closure
                            (fun γ =>
                              ltac:(M.monadic
                                match γ with
                                | [ α0 ] =>
                                  M.match_operator (|
                                    M.alloc (| α0 |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let meta := M.copy (| γ |) in
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "delphinus_zkwasm::circuits::cell::CellExpression",
                                              Ty.apply
                                                (Ty.path
                                                  "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                                [ F ],
                                              [ F ],
                                              "expr",
                                              []
                                            |),
                                            [ is_context_in_op; M.read (| meta |) ]
                                          |)))
                                    ]
                                  |)
                                | _ => M.impossible (||)
                                end))
                        ]
                      |)
                    |) in
                  let _ :=
                    M.alloc (|
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.apply
                            (Ty.path
                              "delphinus_zkwasm::circuits::etable::constraint_builder::ConstraintBuilder")
                            [ F ],
                          "push",
                          []
                        |),
                        [
                          M.read (| constraint_builder |);
                          M.read (| Value.String "context sel" |);
                          (* Unsize *)
                          M.pointer_coercion
                            (M.call_closure (|
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path "alloc::boxed::Box")
                                  [
                                    Ty.function
                                      [
                                        Ty.tuple
                                          [
                                            Ty.apply
                                              (Ty.path "&mut")
                                              [
                                                Ty.apply
                                                  (Ty.path
                                                    "halo2_proofs::plonk::circuit::VirtualCells")
                                                  [ F ]
                                              ]
                                          ]
                                      ]
                                      (Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        [
                                          Ty.apply
                                            (Ty.path "halo2_proofs::plonk::circuit::Expression")
                                            [ F ];
                                          Ty.path "alloc::alloc::Global"
                                        ]);
                                    Ty.path "alloc::alloc::Global"
                                  ],
                                "new",
                                []
                              |),
                              [
                                M.closure
                                  (fun γ =>
                                    ltac:(M.monadic
                                      match γ with
                                      | [ α0 ] =>
                                        M.match_operator (|
                                          M.alloc (| α0 |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let meta := M.copy (| γ |) in
                                                M.call_closure (|
                                                  M.get_associated_function (|
                                                    Ty.apply
                                                      (Ty.path "slice")
                                                      [
                                                        Ty.apply
                                                          (Ty.path
                                                            "halo2_proofs::plonk::circuit::Expression")
                                                          [ F ]
                                                      ],
                                                    "into_vec",
                                                    [ Ty.path "alloc::alloc::Global" ]
                                                  |),
                                                  [
                                                    (* Unsize *)
                                                    M.pointer_coercion
                                                      (M.read (|
                                                        M.call_closure (|
                                                          M.get_associated_function (|
                                                            Ty.apply
                                                              (Ty.path "alloc::boxed::Box")
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "array")
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "halo2_proofs::plonk::circuit::Expression")
                                                                      [ F ]
                                                                  ];
                                                                Ty.path "alloc::alloc::Global"
                                                              ],
                                                            "new",
                                                            []
                                                          |),
                                                          [
                                                            M.alloc (|
                                                              Value.Array
                                                                [
                                                                  M.call_closure (|
                                                                    M.get_trait_method (|
                                                                      "core::ops::arith::Sub",
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "halo2_proofs::plonk::circuit::Expression")
                                                                        [ F ],
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "halo2_proofs::plonk::circuit::Expression")
                                                                          [ F ]
                                                                      ],
                                                                      "sub",
                                                                      []
                                                                    |),
                                                                    [
                                                                      M.call_closure (|
                                                                        M.get_trait_method (|
                                                                          "core::ops::arith::Add",
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "halo2_proofs::plonk::circuit::Expression")
                                                                            [ F ],
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "halo2_proofs::plonk::circuit::Expression")
                                                                              [ F ]
                                                                          ],
                                                                          "add",
                                                                          []
                                                                        |),
                                                                        [
                                                                          M.call_closure (|
                                                                            M.get_trait_method (|
                                                                              "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                                                                [ F ],
                                                                              [ F ],
                                                                              "expr",
                                                                              []
                                                                            |),
                                                                            [
                                                                              is_context_in_op;
                                                                              M.read (| meta |)
                                                                            ]
                                                                          |);
                                                                          M.call_closure (|
                                                                            M.get_trait_method (|
                                                                              "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                                                                [ F ],
                                                                              [ F ],
                                                                              "expr",
                                                                              []
                                                                            |),
                                                                            [
                                                                              is_context_out_op;
                                                                              M.read (| meta |)
                                                                            ]
                                                                          |)
                                                                        ]
                                                                      |);
                                                                      Value.StructTuple
                                                                        "halo2_proofs::plonk::circuit::Expression::Constant"
                                                                        [
                                                                          M.call_closure (|
                                                                            M.get_trait_method (|
                                                                              "core::convert::From",
                                                                              F,
                                                                              [ Ty.path "u64" ],
                                                                              "from",
                                                                              []
                                                                            |),
                                                                            [
                                                                              M.read (|
                                                                                M.use
                                                                                  (M.alloc (|
                                                                                    Value.Integer 1
                                                                                  |))
                                                                              |)
                                                                            ]
                                                                          |)
                                                                        ]
                                                                    ]
                                                                  |)
                                                                ]
                                                            |)
                                                          ]
                                                        |)
                                                      |))
                                                  ]
                                                |)))
                                          ]
                                        |)
                                      | _ => M.impossible (||)
                                      end))
                              ]
                            |))
                        ]
                      |)
                    |) in
                  let _ :=
                    M.alloc (|
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.apply
                            (Ty.path
                              "delphinus_zkwasm::circuits::etable::constraint_builder::ConstraintBuilder")
                            [ F ],
                          "push",
                          []
                        |),
                        [
                          M.read (| constraint_builder |);
                          M.read (| Value.String "context lookup" |);
                          (* Unsize *)
                          M.pointer_coercion
                            (M.call_closure (|
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path "alloc::boxed::Box")
                                  [
                                    Ty.function
                                      [
                                        Ty.tuple
                                          [
                                            Ty.apply
                                              (Ty.path "&mut")
                                              [
                                                Ty.apply
                                                  (Ty.path
                                                    "halo2_proofs::plonk::circuit::VirtualCells")
                                                  [ F ]
                                              ]
                                          ]
                                      ]
                                      (Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        [
                                          Ty.apply
                                            (Ty.path "halo2_proofs::plonk::circuit::Expression")
                                            [ F ];
                                          Ty.path "alloc::alloc::Global"
                                        ]);
                                    Ty.path "alloc::alloc::Global"
                                  ],
                                "new",
                                []
                              |),
                              [
                                M.closure
                                  (fun γ =>
                                    ltac:(M.monadic
                                      match γ with
                                      | [ α0 ] =>
                                        M.match_operator (|
                                          M.alloc (| α0 |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let meta := M.copy (| γ |) in
                                                M.call_closure (|
                                                  M.get_associated_function (|
                                                    Ty.apply
                                                      (Ty.path "slice")
                                                      [
                                                        Ty.apply
                                                          (Ty.path
                                                            "halo2_proofs::plonk::circuit::Expression")
                                                          [ F ]
                                                      ],
                                                    "into_vec",
                                                    [ Ty.path "alloc::alloc::Global" ]
                                                  |),
                                                  [
                                                    (* Unsize *)
                                                    M.pointer_coercion
                                                      (M.read (|
                                                        M.call_closure (|
                                                          M.get_associated_function (|
                                                            Ty.apply
                                                              (Ty.path "alloc::boxed::Box")
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "array")
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "halo2_proofs::plonk::circuit::Expression")
                                                                      [ F ]
                                                                  ];
                                                                Ty.path "alloc::alloc::Global"
                                                              ],
                                                            "new",
                                                            []
                                                          |),
                                                          [
                                                            M.alloc (|
                                                              Value.Array
                                                                [
                                                                  M.call_closure (|
                                                                    M.get_trait_method (|
                                                                      "core::ops::arith::Mul",
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "halo2_proofs::plonk::circuit::Expression")
                                                                        [ F ],
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "halo2_proofs::plonk::circuit::Expression")
                                                                          [ F ]
                                                                      ],
                                                                      "mul",
                                                                      []
                                                                    |),
                                                                    [
                                                                      M.call_closure (|
                                                                        M.get_trait_method (|
                                                                          "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                                                            [ F ],
                                                                          [ F ],
                                                                          "expr",
                                                                          []
                                                                        |),
                                                                        [
                                                                          is_context_in_op;
                                                                          M.read (| meta |)
                                                                        ]
                                                                      |);
                                                                      M.call_closure (|
                                                                        M.get_trait_method (|
                                                                          "core::ops::arith::Sub",
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "halo2_proofs::plonk::circuit::Expression")
                                                                            [ F ],
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "halo2_proofs::plonk::circuit::Expression")
                                                                              [ F ]
                                                                          ],
                                                                          "sub",
                                                                          []
                                                                        |),
                                                                        [
                                                                          M.call_closure (|
                                                                            M.get_trait_method (|
                                                                              "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "delphinus_zkwasm::circuits::cell::AllocatedUnlimitedCell")
                                                                                [ F ],
                                                                              [ F ],
                                                                              "expr",
                                                                              []
                                                                            |),
                                                                            [
                                                                              context_input_index_for_lookup;
                                                                              M.read (| meta |)
                                                                            ]
                                                                          |);
                                                                          M.call_closure (|
                                                                            M.get_trait_method (|
                                                                              "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "delphinus_zkwasm::circuits::cell::AllocatedCommonRangeCell")
                                                                                [ F ],
                                                                              [ F ],
                                                                              "expr",
                                                                              []
                                                                            |),
                                                                            [
                                                                              context_input_index;
                                                                              M.read (| meta |)
                                                                            ]
                                                                          |)
                                                                        ]
                                                                      |)
                                                                    ]
                                                                  |);
                                                                  M.call_closure (|
                                                                    M.get_trait_method (|
                                                                      "core::ops::arith::Mul",
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "halo2_proofs::plonk::circuit::Expression")
                                                                        [ F ],
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "halo2_proofs::plonk::circuit::Expression")
                                                                          [ F ]
                                                                      ],
                                                                      "mul",
                                                                      []
                                                                    |),
                                                                    [
                                                                      M.call_closure (|
                                                                        M.get_trait_method (|
                                                                          "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                                                            [ F ],
                                                                          [ F ],
                                                                          "expr",
                                                                          []
                                                                        |),
                                                                        [
                                                                          is_context_out_op;
                                                                          M.read (| meta |)
                                                                        ]
                                                                      |);
                                                                      M.call_closure (|
                                                                        M.get_trait_method (|
                                                                          "core::ops::arith::Sub",
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "halo2_proofs::plonk::circuit::Expression")
                                                                            [ F ],
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "halo2_proofs::plonk::circuit::Expression")
                                                                              [ F ]
                                                                          ],
                                                                          "sub",
                                                                          []
                                                                        |),
                                                                        [
                                                                          M.call_closure (|
                                                                            M.get_trait_method (|
                                                                              "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "delphinus_zkwasm::circuits::cell::AllocatedUnlimitedCell")
                                                                                [ F ],
                                                                              [ F ],
                                                                              "expr",
                                                                              []
                                                                            |),
                                                                            [
                                                                              context_output_index_for_lookup;
                                                                              M.read (| meta |)
                                                                            ]
                                                                          |);
                                                                          M.call_closure (|
                                                                            M.get_trait_method (|
                                                                              "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "delphinus_zkwasm::circuits::cell::AllocatedCommonRangeCell")
                                                                                [ F ],
                                                                              [ F ],
                                                                              "expr",
                                                                              []
                                                                            |),
                                                                            [
                                                                              context_output_index;
                                                                              M.read (| meta |)
                                                                            ]
                                                                          |)
                                                                        ]
                                                                      |)
                                                                    ]
                                                                  |)
                                                                ]
                                                            |)
                                                          ]
                                                        |)
                                                      |))
                                                  ]
                                                |)))
                                          ]
                                        |)
                                      | _ => M.impossible (||)
                                      end))
                              ]
                            |))
                        ]
                      |)
                    |) in
                  let _ :=
                    M.alloc (|
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.apply
                            (Ty.path
                              "delphinus_zkwasm::circuits::etable::constraint_builder::ConstraintBuilder")
                            [ F ],
                          "lookup",
                          []
                        |),
                        [
                          M.read (| constraint_builder |);
                          M.read (|
                            M.get_constant (|
                              "delphinus_zkwasm::foreign::context::circuits::CONTEXT_FOREIGN_TABLE_KEY"
                            |)
                          |);
                          M.read (| Value.String "lookup context cont table" |);
                          (* Unsize *)
                          M.pointer_coercion
                            (M.call_closure (|
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path "alloc::boxed::Box")
                                  [
                                    Ty.function
                                      [
                                        Ty.tuple
                                          [
                                            Ty.apply
                                              (Ty.path "&mut")
                                              [
                                                Ty.apply
                                                  (Ty.path
                                                    "halo2_proofs::plonk::circuit::VirtualCells")
                                                  [ F ]
                                              ]
                                          ]
                                      ]
                                      (Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        [
                                          Ty.apply
                                            (Ty.path "halo2_proofs::plonk::circuit::Expression")
                                            [ F ];
                                          Ty.path "alloc::alloc::Global"
                                        ]);
                                    Ty.path "alloc::alloc::Global"
                                  ],
                                "new",
                                []
                              |),
                              [
                                M.closure
                                  (fun γ =>
                                    ltac:(M.monadic
                                      match γ with
                                      | [ α0 ] =>
                                        M.match_operator (|
                                          M.alloc (| α0 |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let meta := M.copy (| γ |) in
                                                M.call_closure (|
                                                  M.get_associated_function (|
                                                    Ty.apply
                                                      (Ty.path "slice")
                                                      [
                                                        Ty.apply
                                                          (Ty.path
                                                            "halo2_proofs::plonk::circuit::Expression")
                                                          [ F ]
                                                      ],
                                                    "into_vec",
                                                    [ Ty.path "alloc::alloc::Global" ]
                                                  |),
                                                  [
                                                    (* Unsize *)
                                                    M.pointer_coercion
                                                      (M.read (|
                                                        M.call_closure (|
                                                          M.get_associated_function (|
                                                            Ty.apply
                                                              (Ty.path "alloc::boxed::Box")
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "array")
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "halo2_proofs::plonk::circuit::Expression")
                                                                      [ F ]
                                                                  ];
                                                                Ty.path "alloc::alloc::Global"
                                                              ],
                                                            "new",
                                                            []
                                                          |),
                                                          [
                                                            M.alloc (|
                                                              Value.Array
                                                                [
                                                                  M.call_closure (|
                                                                    M.get_trait_method (|
                                                                      "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "delphinus_zkwasm::circuits::cell::AllocatedUnlimitedCell")
                                                                        [ F ],
                                                                      [ F ],
                                                                      "expr",
                                                                      []
                                                                    |),
                                                                    [
                                                                      context_input_index_for_lookup;
                                                                      M.read (| meta |)
                                                                    ]
                                                                  |);
                                                                  M.call_closure (|
                                                                    M.get_trait_method (|
                                                                      "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "delphinus_zkwasm::circuits::cell::AllocatedUnlimitedCell")
                                                                        [ F ],
                                                                      [ F ],
                                                                      "expr",
                                                                      []
                                                                    |),
                                                                    [ input_value; M.read (| meta |)
                                                                    ]
                                                                  |);
                                                                  M.call_closure (|
                                                                    M.get_trait_method (|
                                                                      "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "delphinus_zkwasm::circuits::cell::AllocatedUnlimitedCell")
                                                                        [ F ],
                                                                      [ F ],
                                                                      "expr",
                                                                      []
                                                                    |),
                                                                    [
                                                                      context_output_index_for_lookup;
                                                                      M.read (| meta |)
                                                                    ]
                                                                  |);
                                                                  M.call_closure (|
                                                                    M.get_trait_method (|
                                                                      "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "delphinus_zkwasm::circuits::cell::AllocatedUnlimitedCell")
                                                                        [ F ],
                                                                      [ F ],
                                                                      "expr",
                                                                      []
                                                                    |),
                                                                    [
                                                                      output_value;
                                                                      M.read (| meta |)
                                                                    ]
                                                                  |)
                                                                ]
                                                            |)
                                                          ]
                                                        |)
                                                      |))
                                                  ]
                                                |)))
                                          ]
                                        |)
                                      | _ => M.impossible (||)
                                      end))
                              ]
                            |))
                        ]
                      |)
                    |) in
                  M.alloc (|
                    (* Unsize *)
                    M.pointer_coercion
                      (M.call_closure (|
                        M.get_associated_function (|
                          Ty.apply
                            (Ty.path "alloc::boxed::Box")
                            [
                              Ty.apply
                                (Ty.path
                                  "delphinus_zkwasm::foreign::context::etable_op_configure::ETableContextHelperTableConfig")
                                [ F ];
                              Ty.path "alloc::alloc::Global"
                            ],
                          "new",
                          []
                        |),
                        [
                          Value.StructRecord
                            "delphinus_zkwasm::foreign::context::etable_op_configure::ETableContextHelperTableConfig"
                            [
                              ("plugin_index",
                                M.rust_cast
                                  (M.read (|
                                    M.SubPointer.get_struct_record_field (|
                                      self,
                                      "delphinus_zkwasm::foreign::context::etable_op_configure::ETableContextHelperTableConfigBuilder",
                                      "index"
                                    |)
                                  |)));
                              ("is_context_in_op", M.read (| is_context_in_op |));
                              ("is_context_out_op", M.read (| is_context_out_op |));
                              ("input_value", M.read (| input_value |));
                              ("output_value", M.read (| output_value |));
                              ("lookup_read_stack", M.read (| lookup_read_stack |));
                              ("lookup_write_stack", M.read (| lookup_write_stack |));
                              ("context_input_index_for_lookup",
                                M.read (| context_input_index_for_lookup |));
                              ("context_output_index_for_lookup",
                                M.read (| context_output_index_for_lookup |))
                            ]
                        ]
                      |))
                  |)
                |))))
          | _, _ => M.impossible
          end.
        
        Axiom Implements :
          forall (F : Ty.t),
          M.IsTraitInstance
            "delphinus_zkwasm::foreign::EventTableForeignCallConfigBuilder"
            (Self F)
            (* Trait polymorphic types *) [ (* F *) F ]
            (* Instance *) [ ("configure", InstanceField.Method (configure F)) ].
      End Impl_delphinus_zkwasm_foreign_EventTableForeignCallConfigBuilder_where_pairing_bn256_arithmetic_fields_FieldExt_F_F_for_delphinus_zkwasm_foreign_context_etable_op_configure_ETableContextHelperTableConfigBuilder.
      
      Module Impl_delphinus_zkwasm_circuits_etable_EventTableOpcodeConfig_where_pairing_bn256_arithmetic_fields_FieldExt_F_F_for_delphinus_zkwasm_foreign_context_etable_op_configure_ETableContextHelperTableConfig_F.
        Definition Self (F : Ty.t) : Ty.t :=
          Ty.apply
            (Ty.path
              "delphinus_zkwasm::foreign::context::etable_op_configure::ETableContextHelperTableConfig")
            [ F ].
        
        (*
            fn opcode(&self, meta: &mut VirtualCells<'_, F>) -> Expression<F> {
                constant_from_bn!(
                    &(BigUint::from(OpcodeClass::ForeignPluginStart as u64 + self.plugin_index)
                        << OPCODE_CLASS_SHIFT)
                ) + self.is_context_out_op.expr(meta)
            }
        *)
        Definition opcode (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self F in
          match τ, α with
          | [], [ self; meta ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              let meta := M.alloc (| meta |) in
              M.call_closure (|
                M.get_trait_method (|
                  "core::ops::arith::Add",
                  Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ],
                  [ Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ] ],
                  "add",
                  []
                |),
                [
                  Value.StructTuple
                    "halo2_proofs::plonk::circuit::Expression::Constant"
                    [
                      M.call_closure (|
                        M.get_function (|
                          "delphinus_zkwasm::circuits::utils::bn_to_field",
                          [ F ]
                        |),
                        [
                          M.alloc (|
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::ops::bit::Shl",
                                Ty.path "num_bigint::biguint::BigUint",
                                [ Ty.path "u32" ],
                                "shl",
                                []
                              |),
                              [
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "core::convert::From",
                                    Ty.path "num_bigint::biguint::BigUint",
                                    [ Ty.path "u64" ],
                                    "from",
                                    []
                                  |),
                                  [
                                    BinOp.Panic.add (|
                                      Integer.U64,
                                      M.rust_cast
                                        (BinOp.Panic.add (|
                                          Integer.Isize,
                                          M.get_constant (|
                                            "specs::itable::OpcodeClass::LocalGet_discriminant"
                                          |),
                                          Value.Integer 28
                                        |)),
                                      M.read (|
                                        M.SubPointer.get_struct_record_field (|
                                          M.read (| self |),
                                          "delphinus_zkwasm::foreign::context::etable_op_configure::ETableContextHelperTableConfig",
                                          "plugin_index"
                                        |)
                                      |)
                                    |)
                                  ]
                                |);
                                M.read (|
                                  M.get_constant (| "specs::itable::OPCODE_CLASS_SHIFT" |)
                                |)
                              ]
                            |)
                          |)
                        ]
                      |)
                    ];
                  M.call_closure (|
                    M.get_trait_method (|
                      "delphinus_zkwasm::circuits::cell::CellExpression",
                      Ty.apply (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedBitCell") [ F ],
                      [ F ],
                      "expr",
                      []
                    |),
                    [
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "delphinus_zkwasm::foreign::context::etable_op_configure::ETableContextHelperTableConfig",
                        "is_context_out_op"
                      |);
                      M.read (| meta |)
                    ]
                  |)
                ]
              |)))
          | _, _ => M.impossible
          end.
        
        (*
            fn assign(
                &self,
                ctx: &mut Context<'_, F>,
                step: &StepStatus,
                entry: &EventTableEntryWithMemoryInfo,
            ) -> Result<(), Error> {
                match &entry.eentry.step_info {
                    StepInfo::CallHost {
                        plugin,
                        args,
                        ret_val,
                        op_index_in_plugin,
                        ..
                    } => {
                        assert_eq!( *plugin, HostPlugin::Context);
        
                        if *op_index_in_plugin == Op::ReadContext as usize {
                            let value = ret_val.unwrap();
        
                            self.input_value.assign(ctx, F::from(value))?;
                            self.lookup_write_stack.assign(
                                ctx,
                                step.current.eid,
                                entry.memory_rw_entires[0].end_eid,
                                step.current.sp,
                                LocationType::Stack,
                                false,
                                value,
                            )?;
                            self.is_context_in_op.assign_bool(ctx, true)?;
                            self.context_input_index_for_lookup
                                .assign(ctx, F::from(step.current.context_in_index as u64))?;
        
                            Ok(())
                        } else {
                            let value = *args.first().unwrap();
        
                            self.output_value.assign(ctx, F::from(value))?;
                            self.lookup_read_stack.assign(
                                ctx,
                                entry.memory_rw_entires[0].start_eid,
                                step.current.eid,
                                entry.memory_rw_entires[0].end_eid,
                                step.current.sp + 1,
                                LocationType::Stack,
                                false,
                                value,
                            )?;
                            self.is_context_out_op.assign_bool(ctx, true)?;
                            self.context_output_index_for_lookup
                                .assign(ctx, F::from(step.current.context_out_index as u64))?;
        
                            Ok(())
                        }
                    }
                    _ => unreachable!(),
                }
            }
        *)
        Definition assign (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self F in
          match τ, α with
          | [], [ self; ctx; step; entry ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              let ctx := M.alloc (| ctx |) in
              let step := M.alloc (| step |) in
              let entry := M.alloc (| entry |) in
              M.catch_return (|
                ltac:(M.monadic
                  (M.read (|
                    M.match_operator (|
                      M.alloc (|
                        M.SubPointer.get_struct_record_field (|
                          M.SubPointer.get_struct_record_field (|
                            M.read (| entry |),
                            "delphinus_zkwasm::circuits::utils::table_entry::EventTableEntryWithMemoryInfo",
                            "eentry"
                          |),
                          "specs::etable::EventTableEntry",
                          "step_info"
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ := M.read (| γ |) in
                            let γ1_0 :=
                              M.SubPointer.get_struct_record_field (|
                                γ,
                                "specs::step::StepInfo::CallHost",
                                "plugin"
                              |) in
                            let γ1_1 :=
                              M.SubPointer.get_struct_record_field (|
                                γ,
                                "specs::step::StepInfo::CallHost",
                                "args"
                              |) in
                            let γ1_2 :=
                              M.SubPointer.get_struct_record_field (|
                                γ,
                                "specs::step::StepInfo::CallHost",
                                "ret_val"
                              |) in
                            let γ1_3 :=
                              M.SubPointer.get_struct_record_field (|
                                γ,
                                "specs::step::StepInfo::CallHost",
                                "op_index_in_plugin"
                              |) in
                            let plugin := M.alloc (| γ1_0 |) in
                            let args := M.alloc (| γ1_1 |) in
                            let ret_val := M.alloc (| γ1_2 |) in
                            let op_index_in_plugin := M.alloc (| γ1_3 |) in
                            let _ :=
                              M.match_operator (|
                                M.alloc (|
                                  Value.Tuple
                                    [
                                      M.read (| plugin |);
                                      M.alloc (|
                                        Value.StructTuple
                                          "specs::host_function::HostPlugin::Context"
                                          []
                                      |)
                                    ]
                                |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                                      let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                                      let left_val := M.copy (| γ0_0 |) in
                                      let right_val := M.copy (| γ0_1 |) in
                                      M.match_operator (|
                                        M.alloc (| Value.Tuple [] |),
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let γ :=
                                                M.use
                                                  (M.alloc (|
                                                    UnOp.Pure.not
                                                      (M.call_closure (|
                                                        M.get_trait_method (|
                                                          "core::cmp::PartialEq",
                                                          Ty.path
                                                            "specs::host_function::HostPlugin",
                                                          [
                                                            Ty.path
                                                              "specs::host_function::HostPlugin"
                                                          ],
                                                          "eq",
                                                          []
                                                        |),
                                                        [
                                                          M.read (| left_val |);
                                                          M.read (| right_val |)
                                                        ]
                                                      |))
                                                  |)) in
                                              let _ :=
                                                M.is_constant_or_break_match (|
                                                  M.read (| γ |),
                                                  Value.Bool true
                                                |) in
                                              M.alloc (|
                                                M.never_to_any (|
                                                  M.read (|
                                                    let kind :=
                                                      M.alloc (|
                                                        Value.StructTuple
                                                          "core::panicking::AssertKind::Eq"
                                                          []
                                                      |) in
                                                    M.alloc (|
                                                      M.call_closure (|
                                                        M.get_function (|
                                                          "core::panicking::assert_failed",
                                                          [
                                                            Ty.path
                                                              "specs::host_function::HostPlugin";
                                                            Ty.path
                                                              "specs::host_function::HostPlugin"
                                                          ]
                                                        |),
                                                        [
                                                          M.read (| kind |);
                                                          M.read (| left_val |);
                                                          M.read (| right_val |);
                                                          Value.StructTuple
                                                            "core::option::Option::None"
                                                            []
                                                        ]
                                                      |)
                                                    |)
                                                  |)
                                                |)
                                              |)));
                                          fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                        ]
                                      |)))
                                ]
                              |) in
                            M.match_operator (|
                              M.alloc (| Value.Tuple [] |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ :=
                                      M.use
                                        (M.alloc (|
                                          BinOp.Pure.eq
                                            (M.read (| M.read (| op_index_in_plugin |) |))
                                            (M.rust_cast
                                              (BinOp.Panic.add (|
                                                Integer.Isize,
                                                M.get_constant (|
                                                  "delphinus_zkwasm::foreign::context::Op::ReadContext_discriminant"
                                                |),
                                                Value.Integer 0
                                              |)))
                                        |)) in
                                    let _ :=
                                      M.is_constant_or_break_match (|
                                        M.read (| γ |),
                                        Value.Bool true
                                      |) in
                                    let value :=
                                      M.alloc (|
                                        M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.apply
                                              (Ty.path "core::option::Option")
                                              [ Ty.path "u64" ],
                                            "unwrap",
                                            []
                                          |),
                                          [ M.read (| M.read (| ret_val |) |) ]
                                        |)
                                      |) in
                                    let _ :=
                                      M.match_operator (|
                                        M.alloc (|
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "core::ops::try_trait::Try",
                                              Ty.apply
                                                (Ty.path "core::result::Result")
                                                [
                                                  Ty.apply
                                                    (Ty.path "halo2_proofs::circuit::AssignedCell")
                                                    [ F; F ];
                                                  Ty.path "halo2_proofs::plonk::error::Error"
                                                ],
                                              [],
                                              "branch",
                                              []
                                            |),
                                            [
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "delphinus_zkwasm::circuits::cell::CellExpression",
                                                  Ty.apply
                                                    (Ty.path
                                                      "delphinus_zkwasm::circuits::cell::AllocatedUnlimitedCell")
                                                    [ F ],
                                                  [ F ],
                                                  "assign",
                                                  []
                                                |),
                                                [
                                                  M.SubPointer.get_struct_record_field (|
                                                    M.read (| self |),
                                                    "delphinus_zkwasm::foreign::context::etable_op_configure::ETableContextHelperTableConfig",
                                                    "input_value"
                                                  |);
                                                  M.read (| ctx |);
                                                  M.call_closure (|
                                                    M.get_trait_method (|
                                                      "core::convert::From",
                                                      F,
                                                      [ Ty.path "u64" ],
                                                      "from",
                                                      []
                                                    |),
                                                    [ M.read (| value |) ]
                                                  |)
                                                ]
                                              |)
                                            ]
                                          |)
                                        |),
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let γ0_0 :=
                                                M.SubPointer.get_struct_tuple_field (|
                                                  γ,
                                                  "core::ops::control_flow::ControlFlow::Break",
                                                  0
                                                |) in
                                              let residual := M.copy (| γ0_0 |) in
                                              M.alloc (|
                                                M.never_to_any (|
                                                  M.read (|
                                                    M.return_ (|
                                                      M.call_closure (|
                                                        M.get_trait_method (|
                                                          "core::ops::try_trait::FromResidual",
                                                          Ty.apply
                                                            (Ty.path "core::result::Result")
                                                            [
                                                              Ty.tuple [];
                                                              Ty.path
                                                                "halo2_proofs::plonk::error::Error"
                                                            ],
                                                          [
                                                            Ty.apply
                                                              (Ty.path "core::result::Result")
                                                              [
                                                                Ty.path "core::convert::Infallible";
                                                                Ty.path
                                                                  "halo2_proofs::plonk::error::Error"
                                                              ]
                                                          ],
                                                          "from_residual",
                                                          []
                                                        |),
                                                        [ M.read (| residual |) ]
                                                      |)
                                                    |)
                                                  |)
                                                |)
                                              |)));
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let γ0_0 :=
                                                M.SubPointer.get_struct_tuple_field (|
                                                  γ,
                                                  "core::ops::control_flow::ControlFlow::Continue",
                                                  0
                                                |) in
                                              let val := M.copy (| γ0_0 |) in
                                              val))
                                        ]
                                      |) in
                                    let _ :=
                                      M.match_operator (|
                                        M.alloc (|
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "core::ops::try_trait::Try",
                                              Ty.apply
                                                (Ty.path "core::result::Result")
                                                [
                                                  Ty.tuple [];
                                                  Ty.path "halo2_proofs::plonk::error::Error"
                                                ],
                                              [],
                                              "branch",
                                              []
                                            |),
                                            [
                                              M.call_closure (|
                                                M.get_associated_function (|
                                                  Ty.apply
                                                    (Ty.path
                                                      "delphinus_zkwasm::circuits::etable::allocator::AllocatedMemoryTableLookupWriteCell")
                                                    [ F ],
                                                  "assign",
                                                  []
                                                |),
                                                [
                                                  M.SubPointer.get_struct_record_field (|
                                                    M.read (| self |),
                                                    "delphinus_zkwasm::foreign::context::etable_op_configure::ETableContextHelperTableConfig",
                                                    "lookup_write_stack"
                                                  |);
                                                  M.read (| ctx |);
                                                  M.read (|
                                                    M.SubPointer.get_struct_record_field (|
                                                      M.read (|
                                                        M.SubPointer.get_struct_record_field (|
                                                          M.read (| step |),
                                                          "delphinus_zkwasm::circuits::utils::step_status::StepStatus",
                                                          "current"
                                                        |)
                                                      |),
                                                      "delphinus_zkwasm::circuits::utils::step_status::Status",
                                                      "eid"
                                                    |)
                                                  |);
                                                  M.read (|
                                                    M.SubPointer.get_struct_record_field (|
                                                      M.call_closure (|
                                                        M.get_trait_method (|
                                                          "core::ops::index::Index",
                                                          Ty.apply
                                                            (Ty.path "alloc::vec::Vec")
                                                            [
                                                              Ty.path
                                                                "delphinus_zkwasm::circuits::utils::table_entry::MemoryRWEntry";
                                                              Ty.path "alloc::alloc::Global"
                                                            ],
                                                          [ Ty.path "usize" ],
                                                          "index",
                                                          []
                                                        |),
                                                        [
                                                          M.SubPointer.get_struct_record_field (|
                                                            M.read (| entry |),
                                                            "delphinus_zkwasm::circuits::utils::table_entry::EventTableEntryWithMemoryInfo",
                                                            "memory_rw_entires"
                                                          |);
                                                          Value.Integer 0
                                                        ]
                                                      |),
                                                      "delphinus_zkwasm::circuits::utils::table_entry::MemoryRWEntry",
                                                      "end_eid"
                                                    |)
                                                  |);
                                                  M.read (|
                                                    M.SubPointer.get_struct_record_field (|
                                                      M.read (|
                                                        M.SubPointer.get_struct_record_field (|
                                                          M.read (| step |),
                                                          "delphinus_zkwasm::circuits::utils::step_status::StepStatus",
                                                          "current"
                                                        |)
                                                      |),
                                                      "delphinus_zkwasm::circuits::utils::step_status::Status",
                                                      "sp"
                                                    |)
                                                  |);
                                                  Value.StructTuple
                                                    "specs::mtable::LocationType::Stack"
                                                    [];
                                                  Value.Bool false;
                                                  M.read (| value |)
                                                ]
                                              |)
                                            ]
                                          |)
                                        |),
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let γ0_0 :=
                                                M.SubPointer.get_struct_tuple_field (|
                                                  γ,
                                                  "core::ops::control_flow::ControlFlow::Break",
                                                  0
                                                |) in
                                              let residual := M.copy (| γ0_0 |) in
                                              M.alloc (|
                                                M.never_to_any (|
                                                  M.read (|
                                                    M.return_ (|
                                                      M.call_closure (|
                                                        M.get_trait_method (|
                                                          "core::ops::try_trait::FromResidual",
                                                          Ty.apply
                                                            (Ty.path "core::result::Result")
                                                            [
                                                              Ty.tuple [];
                                                              Ty.path
                                                                "halo2_proofs::plonk::error::Error"
                                                            ],
                                                          [
                                                            Ty.apply
                                                              (Ty.path "core::result::Result")
                                                              [
                                                                Ty.path "core::convert::Infallible";
                                                                Ty.path
                                                                  "halo2_proofs::plonk::error::Error"
                                                              ]
                                                          ],
                                                          "from_residual",
                                                          []
                                                        |),
                                                        [ M.read (| residual |) ]
                                                      |)
                                                    |)
                                                  |)
                                                |)
                                              |)));
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let γ0_0 :=
                                                M.SubPointer.get_struct_tuple_field (|
                                                  γ,
                                                  "core::ops::control_flow::ControlFlow::Continue",
                                                  0
                                                |) in
                                              let val := M.copy (| γ0_0 |) in
                                              val))
                                        ]
                                      |) in
                                    let _ :=
                                      M.match_operator (|
                                        M.alloc (|
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "core::ops::try_trait::Try",
                                              Ty.apply
                                                (Ty.path "core::result::Result")
                                                [
                                                  Ty.apply
                                                    (Ty.path "halo2_proofs::circuit::AssignedCell")
                                                    [ F; F ];
                                                  Ty.path "halo2_proofs::plonk::error::Error"
                                                ],
                                              [],
                                              "branch",
                                              []
                                            |),
                                            [
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "delphinus_zkwasm::circuits::cell::CellExpression",
                                                  Ty.apply
                                                    (Ty.path
                                                      "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                                    [ F ],
                                                  [ F ],
                                                  "assign_bool",
                                                  []
                                                |),
                                                [
                                                  M.SubPointer.get_struct_record_field (|
                                                    M.read (| self |),
                                                    "delphinus_zkwasm::foreign::context::etable_op_configure::ETableContextHelperTableConfig",
                                                    "is_context_in_op"
                                                  |);
                                                  M.read (| ctx |);
                                                  Value.Bool true
                                                ]
                                              |)
                                            ]
                                          |)
                                        |),
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let γ0_0 :=
                                                M.SubPointer.get_struct_tuple_field (|
                                                  γ,
                                                  "core::ops::control_flow::ControlFlow::Break",
                                                  0
                                                |) in
                                              let residual := M.copy (| γ0_0 |) in
                                              M.alloc (|
                                                M.never_to_any (|
                                                  M.read (|
                                                    M.return_ (|
                                                      M.call_closure (|
                                                        M.get_trait_method (|
                                                          "core::ops::try_trait::FromResidual",
                                                          Ty.apply
                                                            (Ty.path "core::result::Result")
                                                            [
                                                              Ty.tuple [];
                                                              Ty.path
                                                                "halo2_proofs::plonk::error::Error"
                                                            ],
                                                          [
                                                            Ty.apply
                                                              (Ty.path "core::result::Result")
                                                              [
                                                                Ty.path "core::convert::Infallible";
                                                                Ty.path
                                                                  "halo2_proofs::plonk::error::Error"
                                                              ]
                                                          ],
                                                          "from_residual",
                                                          []
                                                        |),
                                                        [ M.read (| residual |) ]
                                                      |)
                                                    |)
                                                  |)
                                                |)
                                              |)));
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let γ0_0 :=
                                                M.SubPointer.get_struct_tuple_field (|
                                                  γ,
                                                  "core::ops::control_flow::ControlFlow::Continue",
                                                  0
                                                |) in
                                              let val := M.copy (| γ0_0 |) in
                                              val))
                                        ]
                                      |) in
                                    let _ :=
                                      M.match_operator (|
                                        M.alloc (|
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "core::ops::try_trait::Try",
                                              Ty.apply
                                                (Ty.path "core::result::Result")
                                                [
                                                  Ty.apply
                                                    (Ty.path "halo2_proofs::circuit::AssignedCell")
                                                    [ F; F ];
                                                  Ty.path "halo2_proofs::plonk::error::Error"
                                                ],
                                              [],
                                              "branch",
                                              []
                                            |),
                                            [
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "delphinus_zkwasm::circuits::cell::CellExpression",
                                                  Ty.apply
                                                    (Ty.path
                                                      "delphinus_zkwasm::circuits::cell::AllocatedUnlimitedCell")
                                                    [ F ],
                                                  [ F ],
                                                  "assign",
                                                  []
                                                |),
                                                [
                                                  M.SubPointer.get_struct_record_field (|
                                                    M.read (| self |),
                                                    "delphinus_zkwasm::foreign::context::etable_op_configure::ETableContextHelperTableConfig",
                                                    "context_input_index_for_lookup"
                                                  |);
                                                  M.read (| ctx |);
                                                  M.call_closure (|
                                                    M.get_trait_method (|
                                                      "core::convert::From",
                                                      F,
                                                      [ Ty.path "u64" ],
                                                      "from",
                                                      []
                                                    |),
                                                    [
                                                      M.rust_cast
                                                        (M.read (|
                                                          M.SubPointer.get_struct_record_field (|
                                                            M.read (|
                                                              M.SubPointer.get_struct_record_field (|
                                                                M.read (| step |),
                                                                "delphinus_zkwasm::circuits::utils::step_status::StepStatus",
                                                                "current"
                                                              |)
                                                            |),
                                                            "delphinus_zkwasm::circuits::utils::step_status::Status",
                                                            "context_in_index"
                                                          |)
                                                        |))
                                                    ]
                                                  |)
                                                ]
                                              |)
                                            ]
                                          |)
                                        |),
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let γ0_0 :=
                                                M.SubPointer.get_struct_tuple_field (|
                                                  γ,
                                                  "core::ops::control_flow::ControlFlow::Break",
                                                  0
                                                |) in
                                              let residual := M.copy (| γ0_0 |) in
                                              M.alloc (|
                                                M.never_to_any (|
                                                  M.read (|
                                                    M.return_ (|
                                                      M.call_closure (|
                                                        M.get_trait_method (|
                                                          "core::ops::try_trait::FromResidual",
                                                          Ty.apply
                                                            (Ty.path "core::result::Result")
                                                            [
                                                              Ty.tuple [];
                                                              Ty.path
                                                                "halo2_proofs::plonk::error::Error"
                                                            ],
                                                          [
                                                            Ty.apply
                                                              (Ty.path "core::result::Result")
                                                              [
                                                                Ty.path "core::convert::Infallible";
                                                                Ty.path
                                                                  "halo2_proofs::plonk::error::Error"
                                                              ]
                                                          ],
                                                          "from_residual",
                                                          []
                                                        |),
                                                        [ M.read (| residual |) ]
                                                      |)
                                                    |)
                                                  |)
                                                |)
                                              |)));
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let γ0_0 :=
                                                M.SubPointer.get_struct_tuple_field (|
                                                  γ,
                                                  "core::ops::control_flow::ControlFlow::Continue",
                                                  0
                                                |) in
                                              let val := M.copy (| γ0_0 |) in
                                              val))
                                        ]
                                      |) in
                                    M.alloc (|
                                      Value.StructTuple
                                        "core::result::Result::Ok"
                                        [ Value.Tuple [] ]
                                    |)));
                                fun γ =>
                                  ltac:(M.monadic
                                    (let value :=
                                      M.copy (|
                                        M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.apply
                                              (Ty.path "core::option::Option")
                                              [ Ty.apply (Ty.path "&") [ Ty.path "u64" ] ],
                                            "unwrap",
                                            []
                                          |),
                                          [
                                            M.call_closure (|
                                              M.get_associated_function (|
                                                Ty.apply (Ty.path "slice") [ Ty.path "u64" ],
                                                "first",
                                                []
                                              |),
                                              [
                                                M.call_closure (|
                                                  M.get_trait_method (|
                                                    "core::ops::deref::Deref",
                                                    Ty.apply
                                                      (Ty.path "alloc::vec::Vec")
                                                      [
                                                        Ty.path "u64";
                                                        Ty.path "alloc::alloc::Global"
                                                      ],
                                                    [],
                                                    "deref",
                                                    []
                                                  |),
                                                  [ M.read (| args |) ]
                                                |)
                                              ]
                                            |)
                                          ]
                                        |)
                                      |) in
                                    let _ :=
                                      M.match_operator (|
                                        M.alloc (|
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "core::ops::try_trait::Try",
                                              Ty.apply
                                                (Ty.path "core::result::Result")
                                                [
                                                  Ty.apply
                                                    (Ty.path "halo2_proofs::circuit::AssignedCell")
                                                    [ F; F ];
                                                  Ty.path "halo2_proofs::plonk::error::Error"
                                                ],
                                              [],
                                              "branch",
                                              []
                                            |),
                                            [
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "delphinus_zkwasm::circuits::cell::CellExpression",
                                                  Ty.apply
                                                    (Ty.path
                                                      "delphinus_zkwasm::circuits::cell::AllocatedUnlimitedCell")
                                                    [ F ],
                                                  [ F ],
                                                  "assign",
                                                  []
                                                |),
                                                [
                                                  M.SubPointer.get_struct_record_field (|
                                                    M.read (| self |),
                                                    "delphinus_zkwasm::foreign::context::etable_op_configure::ETableContextHelperTableConfig",
                                                    "output_value"
                                                  |);
                                                  M.read (| ctx |);
                                                  M.call_closure (|
                                                    M.get_trait_method (|
                                                      "core::convert::From",
                                                      F,
                                                      [ Ty.path "u64" ],
                                                      "from",
                                                      []
                                                    |),
                                                    [ M.read (| value |) ]
                                                  |)
                                                ]
                                              |)
                                            ]
                                          |)
                                        |),
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let γ0_0 :=
                                                M.SubPointer.get_struct_tuple_field (|
                                                  γ,
                                                  "core::ops::control_flow::ControlFlow::Break",
                                                  0
                                                |) in
                                              let residual := M.copy (| γ0_0 |) in
                                              M.alloc (|
                                                M.never_to_any (|
                                                  M.read (|
                                                    M.return_ (|
                                                      M.call_closure (|
                                                        M.get_trait_method (|
                                                          "core::ops::try_trait::FromResidual",
                                                          Ty.apply
                                                            (Ty.path "core::result::Result")
                                                            [
                                                              Ty.tuple [];
                                                              Ty.path
                                                                "halo2_proofs::plonk::error::Error"
                                                            ],
                                                          [
                                                            Ty.apply
                                                              (Ty.path "core::result::Result")
                                                              [
                                                                Ty.path "core::convert::Infallible";
                                                                Ty.path
                                                                  "halo2_proofs::plonk::error::Error"
                                                              ]
                                                          ],
                                                          "from_residual",
                                                          []
                                                        |),
                                                        [ M.read (| residual |) ]
                                                      |)
                                                    |)
                                                  |)
                                                |)
                                              |)));
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let γ0_0 :=
                                                M.SubPointer.get_struct_tuple_field (|
                                                  γ,
                                                  "core::ops::control_flow::ControlFlow::Continue",
                                                  0
                                                |) in
                                              let val := M.copy (| γ0_0 |) in
                                              val))
                                        ]
                                      |) in
                                    let _ :=
                                      M.match_operator (|
                                        M.alloc (|
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "core::ops::try_trait::Try",
                                              Ty.apply
                                                (Ty.path "core::result::Result")
                                                [
                                                  Ty.tuple [];
                                                  Ty.path "halo2_proofs::plonk::error::Error"
                                                ],
                                              [],
                                              "branch",
                                              []
                                            |),
                                            [
                                              M.call_closure (|
                                                M.get_associated_function (|
                                                  Ty.apply
                                                    (Ty.path
                                                      "delphinus_zkwasm::circuits::etable::allocator::AllocatedMemoryTableLookupReadCell")
                                                    [ F ],
                                                  "assign",
                                                  []
                                                |),
                                                [
                                                  M.SubPointer.get_struct_record_field (|
                                                    M.read (| self |),
                                                    "delphinus_zkwasm::foreign::context::etable_op_configure::ETableContextHelperTableConfig",
                                                    "lookup_read_stack"
                                                  |);
                                                  M.read (| ctx |);
                                                  M.read (|
                                                    M.SubPointer.get_struct_record_field (|
                                                      M.call_closure (|
                                                        M.get_trait_method (|
                                                          "core::ops::index::Index",
                                                          Ty.apply
                                                            (Ty.path "alloc::vec::Vec")
                                                            [
                                                              Ty.path
                                                                "delphinus_zkwasm::circuits::utils::table_entry::MemoryRWEntry";
                                                              Ty.path "alloc::alloc::Global"
                                                            ],
                                                          [ Ty.path "usize" ],
                                                          "index",
                                                          []
                                                        |),
                                                        [
                                                          M.SubPointer.get_struct_record_field (|
                                                            M.read (| entry |),
                                                            "delphinus_zkwasm::circuits::utils::table_entry::EventTableEntryWithMemoryInfo",
                                                            "memory_rw_entires"
                                                          |);
                                                          Value.Integer 0
                                                        ]
                                                      |),
                                                      "delphinus_zkwasm::circuits::utils::table_entry::MemoryRWEntry",
                                                      "start_eid"
                                                    |)
                                                  |);
                                                  M.read (|
                                                    M.SubPointer.get_struct_record_field (|
                                                      M.read (|
                                                        M.SubPointer.get_struct_record_field (|
                                                          M.read (| step |),
                                                          "delphinus_zkwasm::circuits::utils::step_status::StepStatus",
                                                          "current"
                                                        |)
                                                      |),
                                                      "delphinus_zkwasm::circuits::utils::step_status::Status",
                                                      "eid"
                                                    |)
                                                  |);
                                                  M.read (|
                                                    M.SubPointer.get_struct_record_field (|
                                                      M.call_closure (|
                                                        M.get_trait_method (|
                                                          "core::ops::index::Index",
                                                          Ty.apply
                                                            (Ty.path "alloc::vec::Vec")
                                                            [
                                                              Ty.path
                                                                "delphinus_zkwasm::circuits::utils::table_entry::MemoryRWEntry";
                                                              Ty.path "alloc::alloc::Global"
                                                            ],
                                                          [ Ty.path "usize" ],
                                                          "index",
                                                          []
                                                        |),
                                                        [
                                                          M.SubPointer.get_struct_record_field (|
                                                            M.read (| entry |),
                                                            "delphinus_zkwasm::circuits::utils::table_entry::EventTableEntryWithMemoryInfo",
                                                            "memory_rw_entires"
                                                          |);
                                                          Value.Integer 0
                                                        ]
                                                      |),
                                                      "delphinus_zkwasm::circuits::utils::table_entry::MemoryRWEntry",
                                                      "end_eid"
                                                    |)
                                                  |);
                                                  BinOp.Panic.add (|
                                                    Integer.U32,
                                                    M.read (|
                                                      M.SubPointer.get_struct_record_field (|
                                                        M.read (|
                                                          M.SubPointer.get_struct_record_field (|
                                                            M.read (| step |),
                                                            "delphinus_zkwasm::circuits::utils::step_status::StepStatus",
                                                            "current"
                                                          |)
                                                        |),
                                                        "delphinus_zkwasm::circuits::utils::step_status::Status",
                                                        "sp"
                                                      |)
                                                    |),
                                                    Value.Integer 1
                                                  |);
                                                  Value.StructTuple
                                                    "specs::mtable::LocationType::Stack"
                                                    [];
                                                  Value.Bool false;
                                                  M.read (| value |)
                                                ]
                                              |)
                                            ]
                                          |)
                                        |),
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let γ0_0 :=
                                                M.SubPointer.get_struct_tuple_field (|
                                                  γ,
                                                  "core::ops::control_flow::ControlFlow::Break",
                                                  0
                                                |) in
                                              let residual := M.copy (| γ0_0 |) in
                                              M.alloc (|
                                                M.never_to_any (|
                                                  M.read (|
                                                    M.return_ (|
                                                      M.call_closure (|
                                                        M.get_trait_method (|
                                                          "core::ops::try_trait::FromResidual",
                                                          Ty.apply
                                                            (Ty.path "core::result::Result")
                                                            [
                                                              Ty.tuple [];
                                                              Ty.path
                                                                "halo2_proofs::plonk::error::Error"
                                                            ],
                                                          [
                                                            Ty.apply
                                                              (Ty.path "core::result::Result")
                                                              [
                                                                Ty.path "core::convert::Infallible";
                                                                Ty.path
                                                                  "halo2_proofs::plonk::error::Error"
                                                              ]
                                                          ],
                                                          "from_residual",
                                                          []
                                                        |),
                                                        [ M.read (| residual |) ]
                                                      |)
                                                    |)
                                                  |)
                                                |)
                                              |)));
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let γ0_0 :=
                                                M.SubPointer.get_struct_tuple_field (|
                                                  γ,
                                                  "core::ops::control_flow::ControlFlow::Continue",
                                                  0
                                                |) in
                                              let val := M.copy (| γ0_0 |) in
                                              val))
                                        ]
                                      |) in
                                    let _ :=
                                      M.match_operator (|
                                        M.alloc (|
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "core::ops::try_trait::Try",
                                              Ty.apply
                                                (Ty.path "core::result::Result")
                                                [
                                                  Ty.apply
                                                    (Ty.path "halo2_proofs::circuit::AssignedCell")
                                                    [ F; F ];
                                                  Ty.path "halo2_proofs::plonk::error::Error"
                                                ],
                                              [],
                                              "branch",
                                              []
                                            |),
                                            [
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "delphinus_zkwasm::circuits::cell::CellExpression",
                                                  Ty.apply
                                                    (Ty.path
                                                      "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                                    [ F ],
                                                  [ F ],
                                                  "assign_bool",
                                                  []
                                                |),
                                                [
                                                  M.SubPointer.get_struct_record_field (|
                                                    M.read (| self |),
                                                    "delphinus_zkwasm::foreign::context::etable_op_configure::ETableContextHelperTableConfig",
                                                    "is_context_out_op"
                                                  |);
                                                  M.read (| ctx |);
                                                  Value.Bool true
                                                ]
                                              |)
                                            ]
                                          |)
                                        |),
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let γ0_0 :=
                                                M.SubPointer.get_struct_tuple_field (|
                                                  γ,
                                                  "core::ops::control_flow::ControlFlow::Break",
                                                  0
                                                |) in
                                              let residual := M.copy (| γ0_0 |) in
                                              M.alloc (|
                                                M.never_to_any (|
                                                  M.read (|
                                                    M.return_ (|
                                                      M.call_closure (|
                                                        M.get_trait_method (|
                                                          "core::ops::try_trait::FromResidual",
                                                          Ty.apply
                                                            (Ty.path "core::result::Result")
                                                            [
                                                              Ty.tuple [];
                                                              Ty.path
                                                                "halo2_proofs::plonk::error::Error"
                                                            ],
                                                          [
                                                            Ty.apply
                                                              (Ty.path "core::result::Result")
                                                              [
                                                                Ty.path "core::convert::Infallible";
                                                                Ty.path
                                                                  "halo2_proofs::plonk::error::Error"
                                                              ]
                                                          ],
                                                          "from_residual",
                                                          []
                                                        |),
                                                        [ M.read (| residual |) ]
                                                      |)
                                                    |)
                                                  |)
                                                |)
                                              |)));
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let γ0_0 :=
                                                M.SubPointer.get_struct_tuple_field (|
                                                  γ,
                                                  "core::ops::control_flow::ControlFlow::Continue",
                                                  0
                                                |) in
                                              let val := M.copy (| γ0_0 |) in
                                              val))
                                        ]
                                      |) in
                                    let _ :=
                                      M.match_operator (|
                                        M.alloc (|
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "core::ops::try_trait::Try",
                                              Ty.apply
                                                (Ty.path "core::result::Result")
                                                [
                                                  Ty.apply
                                                    (Ty.path "halo2_proofs::circuit::AssignedCell")
                                                    [ F; F ];
                                                  Ty.path "halo2_proofs::plonk::error::Error"
                                                ],
                                              [],
                                              "branch",
                                              []
                                            |),
                                            [
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "delphinus_zkwasm::circuits::cell::CellExpression",
                                                  Ty.apply
                                                    (Ty.path
                                                      "delphinus_zkwasm::circuits::cell::AllocatedUnlimitedCell")
                                                    [ F ],
                                                  [ F ],
                                                  "assign",
                                                  []
                                                |),
                                                [
                                                  M.SubPointer.get_struct_record_field (|
                                                    M.read (| self |),
                                                    "delphinus_zkwasm::foreign::context::etable_op_configure::ETableContextHelperTableConfig",
                                                    "context_output_index_for_lookup"
                                                  |);
                                                  M.read (| ctx |);
                                                  M.call_closure (|
                                                    M.get_trait_method (|
                                                      "core::convert::From",
                                                      F,
                                                      [ Ty.path "u64" ],
                                                      "from",
                                                      []
                                                    |),
                                                    [
                                                      M.rust_cast
                                                        (M.read (|
                                                          M.SubPointer.get_struct_record_field (|
                                                            M.read (|
                                                              M.SubPointer.get_struct_record_field (|
                                                                M.read (| step |),
                                                                "delphinus_zkwasm::circuits::utils::step_status::StepStatus",
                                                                "current"
                                                              |)
                                                            |),
                                                            "delphinus_zkwasm::circuits::utils::step_status::Status",
                                                            "context_out_index"
                                                          |)
                                                        |))
                                                    ]
                                                  |)
                                                ]
                                              |)
                                            ]
                                          |)
                                        |),
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let γ0_0 :=
                                                M.SubPointer.get_struct_tuple_field (|
                                                  γ,
                                                  "core::ops::control_flow::ControlFlow::Break",
                                                  0
                                                |) in
                                              let residual := M.copy (| γ0_0 |) in
                                              M.alloc (|
                                                M.never_to_any (|
                                                  M.read (|
                                                    M.return_ (|
                                                      M.call_closure (|
                                                        M.get_trait_method (|
                                                          "core::ops::try_trait::FromResidual",
                                                          Ty.apply
                                                            (Ty.path "core::result::Result")
                                                            [
                                                              Ty.tuple [];
                                                              Ty.path
                                                                "halo2_proofs::plonk::error::Error"
                                                            ],
                                                          [
                                                            Ty.apply
                                                              (Ty.path "core::result::Result")
                                                              [
                                                                Ty.path "core::convert::Infallible";
                                                                Ty.path
                                                                  "halo2_proofs::plonk::error::Error"
                                                              ]
                                                          ],
                                                          "from_residual",
                                                          []
                                                        |),
                                                        [ M.read (| residual |) ]
                                                      |)
                                                    |)
                                                  |)
                                                |)
                                              |)));
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let γ0_0 :=
                                                M.SubPointer.get_struct_tuple_field (|
                                                  γ,
                                                  "core::ops::control_flow::ControlFlow::Continue",
                                                  0
                                                |) in
                                              let val := M.copy (| γ0_0 |) in
                                              val))
                                        ]
                                      |) in
                                    M.alloc (|
                                      Value.StructTuple
                                        "core::result::Result::Ok"
                                        [ Value.Tuple [] ]
                                    |)))
                              ]
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (M.alloc (|
                              M.never_to_any (|
                                M.call_closure (|
                                  M.get_function (| "core::panicking::panic", [] |),
                                  [
                                    M.read (|
                                      Value.String "internal error: entered unreachable code"
                                    |)
                                  ]
                                |)
                              |)
                            |)))
                      ]
                    |)
                  |)))
              |)))
          | _, _ => M.impossible
          end.
        
        (*
            fn mops(&self, meta: &mut VirtualCells<'_, F>) -> Option<Expression<F>> {
                Some(self.is_context_in_op.expr(meta))
            }
        *)
        Definition mops (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self F in
          match τ, α with
          | [], [ self; meta ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              let meta := M.alloc (| meta |) in
              Value.StructTuple
                "core::option::Option::Some"
                [
                  M.call_closure (|
                    M.get_trait_method (|
                      "delphinus_zkwasm::circuits::cell::CellExpression",
                      Ty.apply (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedBitCell") [ F ],
                      [ F ],
                      "expr",
                      []
                    |),
                    [
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "delphinus_zkwasm::foreign::context::etable_op_configure::ETableContextHelperTableConfig",
                        "is_context_in_op"
                      |);
                      M.read (| meta |)
                    ]
                  |)
                ]))
          | _, _ => M.impossible
          end.
        
        (*
            fn memory_writing_ops(&self, entry: &EventTableEntry) -> u32 {
                match &entry.step_info {
                    StepInfo::CallHost {
                        plugin,
                        op_index_in_plugin,
                        ..
                    } => {
                        assert_eq!( *plugin, HostPlugin::Context);
        
                        ( *op_index_in_plugin == Op::ReadContext as usize) as u32
                    }
                    _ => unreachable!(),
                }
            }
        *)
        Definition memory_writing_ops (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self F in
          match τ, α with
          | [], [ self; entry ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              let entry := M.alloc (| entry |) in
              M.read (|
                M.match_operator (|
                  M.alloc (|
                    M.SubPointer.get_struct_record_field (|
                      M.read (| entry |),
                      "specs::etable::EventTableEntry",
                      "step_info"
                    |)
                  |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let γ1_0 :=
                          M.SubPointer.get_struct_record_field (|
                            γ,
                            "specs::step::StepInfo::CallHost",
                            "plugin"
                          |) in
                        let γ1_1 :=
                          M.SubPointer.get_struct_record_field (|
                            γ,
                            "specs::step::StepInfo::CallHost",
                            "op_index_in_plugin"
                          |) in
                        let plugin := M.alloc (| γ1_0 |) in
                        let op_index_in_plugin := M.alloc (| γ1_1 |) in
                        let _ :=
                          M.match_operator (|
                            M.alloc (|
                              Value.Tuple
                                [
                                  M.read (| plugin |);
                                  M.alloc (|
                                    Value.StructTuple "specs::host_function::HostPlugin::Context" []
                                  |)
                                ]
                            |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                                  let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                                  let left_val := M.copy (| γ0_0 |) in
                                  let right_val := M.copy (| γ0_1 |) in
                                  M.match_operator (|
                                    M.alloc (| Value.Tuple [] |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let γ :=
                                            M.use
                                              (M.alloc (|
                                                UnOp.Pure.not
                                                  (M.call_closure (|
                                                    M.get_trait_method (|
                                                      "core::cmp::PartialEq",
                                                      Ty.path "specs::host_function::HostPlugin",
                                                      [ Ty.path "specs::host_function::HostPlugin"
                                                      ],
                                                      "eq",
                                                      []
                                                    |),
                                                    [ M.read (| left_val |); M.read (| right_val |)
                                                    ]
                                                  |))
                                              |)) in
                                          let _ :=
                                            M.is_constant_or_break_match (|
                                              M.read (| γ |),
                                              Value.Bool true
                                            |) in
                                          M.alloc (|
                                            M.never_to_any (|
                                              M.read (|
                                                let kind :=
                                                  M.alloc (|
                                                    Value.StructTuple
                                                      "core::panicking::AssertKind::Eq"
                                                      []
                                                  |) in
                                                M.alloc (|
                                                  M.call_closure (|
                                                    M.get_function (|
                                                      "core::panicking::assert_failed",
                                                      [
                                                        Ty.path "specs::host_function::HostPlugin";
                                                        Ty.path "specs::host_function::HostPlugin"
                                                      ]
                                                    |),
                                                    [
                                                      M.read (| kind |);
                                                      M.read (| left_val |);
                                                      M.read (| right_val |);
                                                      Value.StructTuple
                                                        "core::option::Option::None"
                                                        []
                                                    ]
                                                  |)
                                                |)
                                              |)
                                            |)
                                          |)));
                                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                    ]
                                  |)))
                            ]
                          |) in
                        M.alloc (|
                          M.rust_cast
                            (BinOp.Pure.eq
                              (M.read (| M.read (| op_index_in_plugin |) |))
                              (M.rust_cast
                                (BinOp.Panic.add (|
                                  Integer.Isize,
                                  M.get_constant (|
                                    "delphinus_zkwasm::foreign::context::Op::ReadContext_discriminant"
                                  |),
                                  Value.Integer 0
                                |))))
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (M.alloc (|
                          M.never_to_any (|
                            M.call_closure (|
                              M.get_function (| "core::panicking::panic", [] |),
                              [ M.read (| Value.String "internal error: entered unreachable code" |)
                              ]
                            |)
                          |)
                        |)))
                  ]
                |)
              |)))
          | _, _ => M.impossible
          end.
        
        (*
            fn sp_diff(&self, meta: &mut VirtualCells<'_, F>) -> Option<Expression<F>> {
                /*
                 * context_out: sp + 1
                 * context_in: sp - 1
                 */
                Some(constant!(-F::one()) + constant_from!(2) * self.is_context_out_op.expr(meta))
            }
        *)
        Definition sp_diff (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self F in
          match τ, α with
          | [], [ self; meta ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              let meta := M.alloc (| meta |) in
              Value.StructTuple
                "core::option::Option::Some"
                [
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::ops::arith::Add",
                      Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ],
                      [ Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ] ],
                      "add",
                      []
                    |),
                    [
                      Value.StructTuple
                        "halo2_proofs::plonk::circuit::Expression::Constant"
                        [
                          M.call_closure (|
                            M.get_trait_method (| "core::ops::arith::Neg", F, [], "neg", [] |),
                            [
                              M.call_closure (|
                                M.get_trait_method (| "ff::Field", F, [], "one", [] |),
                                []
                              |)
                            ]
                          |)
                        ];
                      M.call_closure (|
                        M.get_trait_method (|
                          "core::ops::arith::Mul",
                          Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ],
                          [ Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ] ],
                          "mul",
                          []
                        |),
                        [
                          Value.StructTuple
                            "halo2_proofs::plonk::circuit::Expression::Constant"
                            [
                              M.call_closure (|
                                M.get_trait_method (|
                                  "core::convert::From",
                                  F,
                                  [ Ty.path "u64" ],
                                  "from",
                                  []
                                |),
                                [ M.read (| M.use (M.alloc (| Value.Integer 2 |)) |) ]
                              |)
                            ];
                          M.call_closure (|
                            M.get_trait_method (|
                              "delphinus_zkwasm::circuits::cell::CellExpression",
                              Ty.apply
                                (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                [ F ],
                              [ F ],
                              "expr",
                              []
                            |),
                            [
                              M.SubPointer.get_struct_record_field (|
                                M.read (| self |),
                                "delphinus_zkwasm::foreign::context::etable_op_configure::ETableContextHelperTableConfig",
                                "is_context_out_op"
                              |);
                              M.read (| meta |)
                            ]
                          |)
                        ]
                      |)
                    ]
                  |)
                ]))
          | _, _ => M.impossible
          end.
        
        (*
            fn is_context_input_op(&self, entry: &EventTableEntry) -> bool {
                match &entry.step_info {
                    StepInfo::CallHost {
                        plugin,
                        op_index_in_plugin,
                        ..
                    } => {
                        assert_eq!( *plugin, HostPlugin::Context);
        
                        return *op_index_in_plugin == Op::ReadContext as usize;
                    }
                    _ => unreachable!(),
                }
            }
        *)
        Definition is_context_input_op (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self F in
          match τ, α with
          | [], [ self; entry ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              let entry := M.alloc (| entry |) in
              M.catch_return (|
                ltac:(M.monadic
                  (M.read (|
                    M.match_operator (|
                      M.alloc (|
                        M.SubPointer.get_struct_record_field (|
                          M.read (| entry |),
                          "specs::etable::EventTableEntry",
                          "step_info"
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ := M.read (| γ |) in
                            let γ1_0 :=
                              M.SubPointer.get_struct_record_field (|
                                γ,
                                "specs::step::StepInfo::CallHost",
                                "plugin"
                              |) in
                            let γ1_1 :=
                              M.SubPointer.get_struct_record_field (|
                                γ,
                                "specs::step::StepInfo::CallHost",
                                "op_index_in_plugin"
                              |) in
                            let plugin := M.alloc (| γ1_0 |) in
                            let op_index_in_plugin := M.alloc (| γ1_1 |) in
                            M.alloc (|
                              M.never_to_any (|
                                M.read (|
                                  let _ :=
                                    M.match_operator (|
                                      M.alloc (|
                                        Value.Tuple
                                          [
                                            M.read (| plugin |);
                                            M.alloc (|
                                              Value.StructTuple
                                                "specs::host_function::HostPlugin::Context"
                                                []
                                            |)
                                          ]
                                      |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                                            let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                                            let left_val := M.copy (| γ0_0 |) in
                                            let right_val := M.copy (| γ0_1 |) in
                                            M.match_operator (|
                                              M.alloc (| Value.Tuple [] |),
                                              [
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (let γ :=
                                                      M.use
                                                        (M.alloc (|
                                                          UnOp.Pure.not
                                                            (M.call_closure (|
                                                              M.get_trait_method (|
                                                                "core::cmp::PartialEq",
                                                                Ty.path
                                                                  "specs::host_function::HostPlugin",
                                                                [
                                                                  Ty.path
                                                                    "specs::host_function::HostPlugin"
                                                                ],
                                                                "eq",
                                                                []
                                                              |),
                                                              [
                                                                M.read (| left_val |);
                                                                M.read (| right_val |)
                                                              ]
                                                            |))
                                                        |)) in
                                                    let _ :=
                                                      M.is_constant_or_break_match (|
                                                        M.read (| γ |),
                                                        Value.Bool true
                                                      |) in
                                                    M.alloc (|
                                                      M.never_to_any (|
                                                        M.read (|
                                                          let kind :=
                                                            M.alloc (|
                                                              Value.StructTuple
                                                                "core::panicking::AssertKind::Eq"
                                                                []
                                                            |) in
                                                          M.alloc (|
                                                            M.call_closure (|
                                                              M.get_function (|
                                                                "core::panicking::assert_failed",
                                                                [
                                                                  Ty.path
                                                                    "specs::host_function::HostPlugin";
                                                                  Ty.path
                                                                    "specs::host_function::HostPlugin"
                                                                ]
                                                              |),
                                                              [
                                                                M.read (| kind |);
                                                                M.read (| left_val |);
                                                                M.read (| right_val |);
                                                                Value.StructTuple
                                                                  "core::option::Option::None"
                                                                  []
                                                              ]
                                                            |)
                                                          |)
                                                        |)
                                                      |)
                                                    |)));
                                                fun γ =>
                                                  ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                              ]
                                            |)))
                                      ]
                                    |) in
                                  M.return_ (|
                                    BinOp.Pure.eq
                                      (M.read (| M.read (| op_index_in_plugin |) |))
                                      (M.rust_cast
                                        (BinOp.Panic.add (|
                                          Integer.Isize,
                                          M.get_constant (|
                                            "delphinus_zkwasm::foreign::context::Op::ReadContext_discriminant"
                                          |),
                                          Value.Integer 0
                                        |)))
                                  |)
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (M.alloc (|
                              M.never_to_any (|
                                M.call_closure (|
                                  M.get_function (| "core::panicking::panic", [] |),
                                  [
                                    M.read (|
                                      Value.String "internal error: entered unreachable code"
                                    |)
                                  ]
                                |)
                              |)
                            |)))
                      ]
                    |)
                  |)))
              |)))
          | _, _ => M.impossible
          end.
        
        (*
            fn context_input_index_increase(
                &self,
                meta: &mut VirtualCells<'_, F>,
                _common_config: &EventTableCommonConfig<F>,
            ) -> Option<Expression<F>> {
                Some(self.is_context_in_op.expr(meta))
            }
        *)
        Definition context_input_index_increase (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self F in
          match τ, α with
          | [], [ self; meta; _common_config ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              let meta := M.alloc (| meta |) in
              let _common_config := M.alloc (| _common_config |) in
              Value.StructTuple
                "core::option::Option::Some"
                [
                  M.call_closure (|
                    M.get_trait_method (|
                      "delphinus_zkwasm::circuits::cell::CellExpression",
                      Ty.apply (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedBitCell") [ F ],
                      [ F ],
                      "expr",
                      []
                    |),
                    [
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "delphinus_zkwasm::foreign::context::etable_op_configure::ETableContextHelperTableConfig",
                        "is_context_in_op"
                      |);
                      M.read (| meta |)
                    ]
                  |)
                ]))
          | _, _ => M.impossible
          end.
        
        (*
            fn is_context_output_op(&self, entry: &EventTableEntry) -> bool {
                match &entry.step_info {
                    StepInfo::CallHost {
                        plugin,
                        op_index_in_plugin,
                        ..
                    } => {
                        assert_eq!( *plugin, HostPlugin::Context);
        
                        return *op_index_in_plugin == Op::WriteContext as usize;
                    }
                    _ => unreachable!(),
                }
            }
        *)
        Definition is_context_output_op (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self F in
          match τ, α with
          | [], [ self; entry ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              let entry := M.alloc (| entry |) in
              M.catch_return (|
                ltac:(M.monadic
                  (M.read (|
                    M.match_operator (|
                      M.alloc (|
                        M.SubPointer.get_struct_record_field (|
                          M.read (| entry |),
                          "specs::etable::EventTableEntry",
                          "step_info"
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ := M.read (| γ |) in
                            let γ1_0 :=
                              M.SubPointer.get_struct_record_field (|
                                γ,
                                "specs::step::StepInfo::CallHost",
                                "plugin"
                              |) in
                            let γ1_1 :=
                              M.SubPointer.get_struct_record_field (|
                                γ,
                                "specs::step::StepInfo::CallHost",
                                "op_index_in_plugin"
                              |) in
                            let plugin := M.alloc (| γ1_0 |) in
                            let op_index_in_plugin := M.alloc (| γ1_1 |) in
                            M.alloc (|
                              M.never_to_any (|
                                M.read (|
                                  let _ :=
                                    M.match_operator (|
                                      M.alloc (|
                                        Value.Tuple
                                          [
                                            M.read (| plugin |);
                                            M.alloc (|
                                              Value.StructTuple
                                                "specs::host_function::HostPlugin::Context"
                                                []
                                            |)
                                          ]
                                      |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                                            let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                                            let left_val := M.copy (| γ0_0 |) in
                                            let right_val := M.copy (| γ0_1 |) in
                                            M.match_operator (|
                                              M.alloc (| Value.Tuple [] |),
                                              [
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (let γ :=
                                                      M.use
                                                        (M.alloc (|
                                                          UnOp.Pure.not
                                                            (M.call_closure (|
                                                              M.get_trait_method (|
                                                                "core::cmp::PartialEq",
                                                                Ty.path
                                                                  "specs::host_function::HostPlugin",
                                                                [
                                                                  Ty.path
                                                                    "specs::host_function::HostPlugin"
                                                                ],
                                                                "eq",
                                                                []
                                                              |),
                                                              [
                                                                M.read (| left_val |);
                                                                M.read (| right_val |)
                                                              ]
                                                            |))
                                                        |)) in
                                                    let _ :=
                                                      M.is_constant_or_break_match (|
                                                        M.read (| γ |),
                                                        Value.Bool true
                                                      |) in
                                                    M.alloc (|
                                                      M.never_to_any (|
                                                        M.read (|
                                                          let kind :=
                                                            M.alloc (|
                                                              Value.StructTuple
                                                                "core::panicking::AssertKind::Eq"
                                                                []
                                                            |) in
                                                          M.alloc (|
                                                            M.call_closure (|
                                                              M.get_function (|
                                                                "core::panicking::assert_failed",
                                                                [
                                                                  Ty.path
                                                                    "specs::host_function::HostPlugin";
                                                                  Ty.path
                                                                    "specs::host_function::HostPlugin"
                                                                ]
                                                              |),
                                                              [
                                                                M.read (| kind |);
                                                                M.read (| left_val |);
                                                                M.read (| right_val |);
                                                                Value.StructTuple
                                                                  "core::option::Option::None"
                                                                  []
                                                              ]
                                                            |)
                                                          |)
                                                        |)
                                                      |)
                                                    |)));
                                                fun γ =>
                                                  ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                              ]
                                            |)))
                                      ]
                                    |) in
                                  M.return_ (|
                                    BinOp.Pure.eq
                                      (M.read (| M.read (| op_index_in_plugin |) |))
                                      (M.rust_cast
                                        (BinOp.Panic.add (|
                                          Integer.Isize,
                                          M.get_constant (|
                                            "delphinus_zkwasm::foreign::context::Op::WriteContext_discriminant"
                                          |),
                                          Value.Integer 0
                                        |)))
                                  |)
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (M.alloc (|
                              M.never_to_any (|
                                M.call_closure (|
                                  M.get_function (| "core::panicking::panic", [] |),
                                  [
                                    M.read (|
                                      Value.String "internal error: entered unreachable code"
                                    |)
                                  ]
                                |)
                              |)
                            |)))
                      ]
                    |)
                  |)))
              |)))
          | _, _ => M.impossible
          end.
        
        (*
            fn context_output_index_increase(
                &self,
                meta: &mut VirtualCells<'_, F>,
                _common_config: &EventTableCommonConfig<F>,
            ) -> Option<Expression<F>> {
                Some(self.is_context_out_op.expr(meta))
            }
        *)
        Definition context_output_index_increase
            (F : Ty.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self F in
          match τ, α with
          | [], [ self; meta; _common_config ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              let meta := M.alloc (| meta |) in
              let _common_config := M.alloc (| _common_config |) in
              Value.StructTuple
                "core::option::Option::Some"
                [
                  M.call_closure (|
                    M.get_trait_method (|
                      "delphinus_zkwasm::circuits::cell::CellExpression",
                      Ty.apply (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedBitCell") [ F ],
                      [ F ],
                      "expr",
                      []
                    |),
                    [
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "delphinus_zkwasm::foreign::context::etable_op_configure::ETableContextHelperTableConfig",
                        "is_context_out_op"
                      |);
                      M.read (| meta |)
                    ]
                  |)
                ]))
          | _, _ => M.impossible
          end.
        
        Axiom Implements :
          forall (F : Ty.t),
          M.IsTraitInstance
            "delphinus_zkwasm::circuits::etable::EventTableOpcodeConfig"
            (Self F)
            (* Trait polymorphic types *) [ (* F *) F ]
            (* Instance *)
            [
              ("opcode", InstanceField.Method (opcode F));
              ("assign", InstanceField.Method (assign F));
              ("mops", InstanceField.Method (mops F));
              ("memory_writing_ops", InstanceField.Method (memory_writing_ops F));
              ("sp_diff", InstanceField.Method (sp_diff F));
              ("is_context_input_op", InstanceField.Method (is_context_input_op F));
              ("context_input_index_increase",
                InstanceField.Method (context_input_index_increase F));
              ("is_context_output_op", InstanceField.Method (is_context_output_op F));
              ("context_output_index_increase",
                InstanceField.Method (context_output_index_increase F))
            ].
      End Impl_delphinus_zkwasm_circuits_etable_EventTableOpcodeConfig_where_pairing_bn256_arithmetic_fields_FieldExt_F_F_for_delphinus_zkwasm_foreign_context_etable_op_configure_ETableContextHelperTableConfig_F.
    End etable_op_configure.
  End context.
End foreign.
