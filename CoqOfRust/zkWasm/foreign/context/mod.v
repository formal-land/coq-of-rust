(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module foreign.
  Module context.
    (*
    Enum Op
    {
      ty_params := [];
      variants :=
        [
          {
            name := "ReadContext";
            item := StructTuple [];
            discriminant := Some 0;
          };
          {
            name := "WriteContext";
            item := StructTuple [];
            discriminant := Some 1;
          }
        ];
    }
    *)
    
    (* StructTuple
      {
        name := "ContextOutput";
        ty_params := [];
        fields :=
          [ Ty.apply (Ty.path "alloc::vec::Vec") [ Ty.path "u64"; Ty.path "alloc::alloc::Global" ]
          ];
      } *)
    
    Module Impl_core_clone_Clone_for_delphinus_zkwasm_foreign_context_ContextOutput.
      Definition Self : Ty.t := Ty.path "delphinus_zkwasm::foreign::context::ContextOutput".
      
      (* Clone *)
      Definition clone (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            Value.StructTuple
              "delphinus_zkwasm::foreign::context::ContextOutput"
              [
                M.call_closure (|
                  M.get_trait_method (|
                    "core::clone::Clone",
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      [ Ty.path "u64"; Ty.path "alloc::alloc::Global" ],
                    [],
                    "clone",
                    []
                  |),
                  [
                    M.SubPointer.get_struct_tuple_field (|
                      M.read (| self |),
                      "delphinus_zkwasm::foreign::context::ContextOutput",
                      0
                    |)
                  ]
                |)
              ]))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::clone::Clone"
          Self
          (* Trait polymorphic types *) []
          (* Instance *) [ ("clone", InstanceField.Method clone) ].
    End Impl_core_clone_Clone_for_delphinus_zkwasm_foreign_context_ContextOutput.
    
    Module Impl_core_default_Default_for_delphinus_zkwasm_foreign_context_ContextOutput.
      Definition Self : Ty.t := Ty.path "delphinus_zkwasm::foreign::context::ContextOutput".
      
      (* Default *)
      Definition default (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [] =>
          ltac:(M.monadic
            (Value.StructTuple
              "delphinus_zkwasm::foreign::context::ContextOutput"
              [
                M.call_closure (|
                  M.get_trait_method (|
                    "core::default::Default",
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      [ Ty.path "u64"; Ty.path "alloc::alloc::Global" ],
                    [],
                    "default",
                    []
                  |),
                  []
                |)
              ]))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::default::Default"
          Self
          (* Trait polymorphic types *) []
          (* Instance *) [ ("default", InstanceField.Method default) ].
    End Impl_core_default_Default_for_delphinus_zkwasm_foreign_context_ContextOutput.
    
    Module Impl_delphinus_zkwasm_foreign_context_ContextOutput.
      Definition Self : Ty.t := Ty.path "delphinus_zkwasm::foreign::context::ContextOutput".
      
      (*
          pub fn write(&self, fd: &mut File) -> io::Result<()> {
              fd.write_all("0x".as_bytes())?;
      
              for value in &self.0 {
                  let bytes = value.to_le_bytes();
                  let s = hex::encode(bytes);
                  fd.write_all(&s.as_bytes())?;
              }
      
              fd.write_all(":bytes-packed".as_bytes())?;
      
              Ok(())
          }
      *)
      Definition write (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ self; fd ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let fd := M.alloc (| fd |) in
            M.catch_return (|
              ltac:(M.monadic
                (M.read (|
                  let _ :=
                    M.match_operator (|
                      M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::ops::try_trait::Try",
                            Ty.apply
                              (Ty.path "core::result::Result")
                              [ Ty.tuple []; Ty.path "std::io::error::Error" ],
                            [],
                            "branch",
                            []
                          |),
                          [
                            M.call_closure (|
                              M.get_trait_method (|
                                "std::io::Write",
                                Ty.path "std::fs::File",
                                [],
                                "write_all",
                                []
                              |),
                              [
                                M.read (| fd |);
                                M.call_closure (|
                                  M.get_associated_function (| Ty.path "str", "as_bytes", [] |),
                                  [ M.read (| Value.String "0x" |) ]
                                |)
                              ]
                            |)
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Break",
                                0
                              |) in
                            let residual := M.copy (| γ0_0 |) in
                            M.alloc (|
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::ops::try_trait::FromResidual",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          [ Ty.tuple []; Ty.path "std::io::error::Error" ],
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.path "std::io::error::Error"
                                            ]
                                        ],
                                        "from_residual",
                                        []
                                      |),
                                      [ M.read (| residual |) ]
                                    |)
                                  |)
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Continue",
                                0
                              |) in
                            let val := M.copy (| γ0_0 |) in
                            val))
                      ]
                    |) in
                  let _ :=
                    M.use
                      (M.match_operator (|
                        M.alloc (|
                          M.call_closure (|
                            M.get_trait_method (|
                              "core::iter::traits::collect::IntoIterator",
                              Ty.apply
                                (Ty.path "&")
                                [
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    [ Ty.path "u64"; Ty.path "alloc::alloc::Global" ]
                                ],
                              [],
                              "into_iter",
                              []
                            |),
                            [
                              M.SubPointer.get_struct_tuple_field (|
                                M.read (| self |),
                                "delphinus_zkwasm::foreign::context::ContextOutput",
                                0
                              |)
                            ]
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let iter := M.copy (| γ |) in
                              M.loop (|
                                ltac:(M.monadic
                                  (let _ :=
                                    M.match_operator (|
                                      M.alloc (|
                                        M.call_closure (|
                                          M.get_trait_method (|
                                            "core::iter::traits::iterator::Iterator",
                                            Ty.apply
                                              (Ty.path "core::slice::iter::Iter")
                                              [ Ty.path "u64" ],
                                            [],
                                            "next",
                                            []
                                          |),
                                          [ iter ]
                                        |)
                                      |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (M.alloc (|
                                              M.never_to_any (| M.read (| M.break (||) |) |)
                                            |)));
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let γ0_0 :=
                                              M.SubPointer.get_struct_tuple_field (|
                                                γ,
                                                "core::option::Option::Some",
                                                0
                                              |) in
                                            let value := M.copy (| γ0_0 |) in
                                            let bytes :=
                                              M.alloc (|
                                                M.call_closure (|
                                                  M.get_associated_function (|
                                                    Ty.path "u64",
                                                    "to_le_bytes",
                                                    []
                                                  |),
                                                  [ M.read (| M.read (| value |) |) ]
                                                |)
                                              |) in
                                            let s :=
                                              M.alloc (|
                                                M.call_closure (|
                                                  M.get_function (|
                                                    "hex::encode",
                                                    [ Ty.apply (Ty.path "array") [ Ty.path "u8" ] ]
                                                  |),
                                                  [ M.read (| bytes |) ]
                                                |)
                                              |) in
                                            let _ :=
                                              M.match_operator (|
                                                M.alloc (|
                                                  M.call_closure (|
                                                    M.get_trait_method (|
                                                      "core::ops::try_trait::Try",
                                                      Ty.apply
                                                        (Ty.path "core::result::Result")
                                                        [
                                                          Ty.tuple [];
                                                          Ty.path "std::io::error::Error"
                                                        ],
                                                      [],
                                                      "branch",
                                                      []
                                                    |),
                                                    [
                                                      M.call_closure (|
                                                        M.get_trait_method (|
                                                          "std::io::Write",
                                                          Ty.path "std::fs::File",
                                                          [],
                                                          "write_all",
                                                          []
                                                        |),
                                                        [
                                                          M.read (| fd |);
                                                          M.call_closure (|
                                                            M.get_associated_function (|
                                                              Ty.path "alloc::string::String",
                                                              "as_bytes",
                                                              []
                                                            |),
                                                            [ s ]
                                                          |)
                                                        ]
                                                      |)
                                                    ]
                                                  |)
                                                |),
                                                [
                                                  fun γ =>
                                                    ltac:(M.monadic
                                                      (let γ0_0 :=
                                                        M.SubPointer.get_struct_tuple_field (|
                                                          γ,
                                                          "core::ops::control_flow::ControlFlow::Break",
                                                          0
                                                        |) in
                                                      let residual := M.copy (| γ0_0 |) in
                                                      M.alloc (|
                                                        M.never_to_any (|
                                                          M.read (|
                                                            M.return_ (|
                                                              M.call_closure (|
                                                                M.get_trait_method (|
                                                                  "core::ops::try_trait::FromResidual",
                                                                  Ty.apply
                                                                    (Ty.path "core::result::Result")
                                                                    [
                                                                      Ty.tuple [];
                                                                      Ty.path
                                                                        "std::io::error::Error"
                                                                    ],
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "core::result::Result")
                                                                      [
                                                                        Ty.path
                                                                          "core::convert::Infallible";
                                                                        Ty.path
                                                                          "std::io::error::Error"
                                                                      ]
                                                                  ],
                                                                  "from_residual",
                                                                  []
                                                                |),
                                                                [ M.read (| residual |) ]
                                                              |)
                                                            |)
                                                          |)
                                                        |)
                                                      |)));
                                                  fun γ =>
                                                    ltac:(M.monadic
                                                      (let γ0_0 :=
                                                        M.SubPointer.get_struct_tuple_field (|
                                                          γ,
                                                          "core::ops::control_flow::ControlFlow::Continue",
                                                          0
                                                        |) in
                                                      let val := M.copy (| γ0_0 |) in
                                                      val))
                                                ]
                                              |) in
                                            M.alloc (| Value.Tuple [] |)))
                                      ]
                                    |) in
                                  M.alloc (| Value.Tuple [] |)))
                              |)))
                        ]
                      |)) in
                  let _ :=
                    M.match_operator (|
                      M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::ops::try_trait::Try",
                            Ty.apply
                              (Ty.path "core::result::Result")
                              [ Ty.tuple []; Ty.path "std::io::error::Error" ],
                            [],
                            "branch",
                            []
                          |),
                          [
                            M.call_closure (|
                              M.get_trait_method (|
                                "std::io::Write",
                                Ty.path "std::fs::File",
                                [],
                                "write_all",
                                []
                              |),
                              [
                                M.read (| fd |);
                                M.call_closure (|
                                  M.get_associated_function (| Ty.path "str", "as_bytes", [] |),
                                  [ M.read (| Value.String ":bytes-packed" |) ]
                                |)
                              ]
                            |)
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Break",
                                0
                              |) in
                            let residual := M.copy (| γ0_0 |) in
                            M.alloc (|
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::ops::try_trait::FromResidual",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          [ Ty.tuple []; Ty.path "std::io::error::Error" ],
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.path "std::io::error::Error"
                                            ]
                                        ],
                                        "from_residual",
                                        []
                                      |),
                                      [ M.read (| residual |) ]
                                    |)
                                  |)
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Continue",
                                0
                              |) in
                            let val := M.copy (| γ0_0 |) in
                            val))
                      ]
                    |) in
                  M.alloc (| Value.StructTuple "core::result::Result::Ok" [ Value.Tuple [] ] |)
                |)))
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom AssociatedFunction_write : M.IsAssociatedFunction Self "write" write.
    End Impl_delphinus_zkwasm_foreign_context_ContextOutput.
  End context.
End foreign.
