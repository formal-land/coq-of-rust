(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module foreign.
  Module context.
    Module runtime.
      (* StructRecord
        {
          name := "Context";
          ty_params := [];
          fields :=
            [
              ("inputs",
                Ty.apply
                  (Ty.path "alloc::vec::Vec")
                  [ Ty.path "u64"; Ty.path "alloc::alloc::Global" ]);
              ("outputs",
                Ty.apply
                  (Ty.path "alloc::vec::Vec")
                  [ Ty.path "u64"; Ty.path "alloc::alloc::Global" ])
            ];
        } *)
      
      Module Impl_delphinus_zkwasm_foreign_context_runtime_Context.
        Definition Self : Ty.t := Ty.path "delphinus_zkwasm::foreign::context::runtime::Context".
        
        (*
            fn new(context_input: Vec<u64>) -> Self {
                let mut inputs = context_input.clone();
                inputs.reverse();
        
                Context {
                    inputs,
                    outputs: vec![],
                }
            }
        *)
        Definition new (τ : list Ty.t) (α : list Value.t) : M :=
          match τ, α with
          | [], [ context_input ] =>
            ltac:(M.monadic
              (let context_input := M.alloc (| context_input |) in
              M.read (|
                let inputs :=
                  M.alloc (|
                    M.call_closure (|
                      M.get_trait_method (|
                        "core::clone::Clone",
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          [ Ty.path "u64"; Ty.path "alloc::alloc::Global" ],
                        [],
                        "clone",
                        []
                      |),
                      [ context_input ]
                    |)
                  |) in
                let _ :=
                  M.alloc (|
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.apply (Ty.path "slice") [ Ty.path "u64" ],
                        "reverse",
                        []
                      |),
                      [
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::ops::deref::DerefMut",
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              [ Ty.path "u64"; Ty.path "alloc::alloc::Global" ],
                            [],
                            "deref_mut",
                            []
                          |),
                          [ inputs ]
                        |)
                      ]
                    |)
                  |) in
                M.alloc (|
                  Value.StructRecord
                    "delphinus_zkwasm::foreign::context::runtime::Context"
                    [
                      ("inputs", M.read (| inputs |));
                      ("outputs",
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              [ Ty.path "u64"; Ty.path "alloc::alloc::Global" ],
                            "new",
                            []
                          |),
                          []
                        |))
                    ]
                |)
              |)))
          | _, _ => M.impossible
          end.
        
        Axiom AssociatedFunction_new : M.IsAssociatedFunction Self "new" new.
        
        (*
            pub fn write_context(&mut self, value: u64) {
                self.outputs.push(value)
            }
        *)
        Definition write_context (τ : list Ty.t) (α : list Value.t) : M :=
          match τ, α with
          | [], [ self; value ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              let value := M.alloc (| value |) in
              M.call_closure (|
                M.get_associated_function (|
                  Ty.apply
                    (Ty.path "alloc::vec::Vec")
                    [ Ty.path "u64"; Ty.path "alloc::alloc::Global" ],
                  "push",
                  []
                |),
                [
                  M.SubPointer.get_struct_record_field (|
                    M.read (| self |),
                    "delphinus_zkwasm::foreign::context::runtime::Context",
                    "outputs"
                  |);
                  M.read (| value |)
                ]
              |)))
          | _, _ => M.impossible
          end.
        
        Axiom AssociatedFunction_write_context :
          M.IsAssociatedFunction Self "write_context" write_context.
        
        (*
            pub fn read_context(&mut self) -> u64 {
                self.inputs
                    .pop()
                    .expect("Failed to pop value from context_in array, please check you inputs")
            }
        *)
        Definition read_context (τ : list Ty.t) (α : list Value.t) : M :=
          match τ, α with
          | [], [ self ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              M.call_closure (|
                M.get_associated_function (|
                  Ty.apply (Ty.path "core::option::Option") [ Ty.path "u64" ],
                  "expect",
                  []
                |),
                [
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        [ Ty.path "u64"; Ty.path "alloc::alloc::Global" ],
                      "pop",
                      []
                    |),
                    [
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "delphinus_zkwasm::foreign::context::runtime::Context",
                        "inputs"
                      |)
                    ]
                  |);
                  M.read (|
                    Value.String
                      "Failed to pop value from context_in array, please check you inputs"
                  |)
                ]
              |)))
          | _, _ => M.impossible
          end.
        
        Axiom AssociatedFunction_read_context :
          M.IsAssociatedFunction Self "read_context" read_context.
      End Impl_delphinus_zkwasm_foreign_context_runtime_Context.
      
      Module Impl_delphinus_zkwasm_runtime_host_ForeignContext_for_delphinus_zkwasm_foreign_context_runtime_Context.
        Definition Self : Ty.t := Ty.path "delphinus_zkwasm::foreign::context::runtime::Context".
        
        (*
            fn expose_context_outputs(&self) -> Vec<u64> {
                self.outputs.clone()
            }
        *)
        Definition expose_context_outputs (τ : list Ty.t) (α : list Value.t) : M :=
          match τ, α with
          | [], [ self ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              M.call_closure (|
                M.get_trait_method (|
                  "core::clone::Clone",
                  Ty.apply
                    (Ty.path "alloc::vec::Vec")
                    [ Ty.path "u64"; Ty.path "alloc::alloc::Global" ],
                  [],
                  "clone",
                  []
                |),
                [
                  M.SubPointer.get_struct_record_field (|
                    M.read (| self |),
                    "delphinus_zkwasm::foreign::context::runtime::Context",
                    "outputs"
                  |)
                ]
              |)))
          | _, _ => M.impossible
          end.
        
        Axiom Implements :
          M.IsTraitInstance
            "delphinus_zkwasm::runtime::host::ForeignContext"
            Self
            (* Trait polymorphic types *) []
            (* Instance *)
            [ ("expose_context_outputs", InstanceField.Method expose_context_outputs) ].
      End Impl_delphinus_zkwasm_runtime_host_ForeignContext_for_delphinus_zkwasm_foreign_context_runtime_Context.
      
      (*
      pub fn register_context_foreign(env: &mut HostEnv, context_input: Vec<u64>) {
          env.internal_env.register_plugin(
              "context plugin",
              HostPlugin::Context,
              Box::new(Context::new(context_input)),
          );
      
          env.internal_env.register_function(
              "wasm_read_context",
              Signature {
                  params: vec![],
                  return_type: Some(ValueType::I64),
              },
              HostPlugin::Context,
              Op::ReadContext as usize,
              Rc::new(
                  |_obs, context: &mut dyn ForeignContext, _args: RuntimeArgs| {
                      let context = context.downcast_mut::<Context>().unwrap();
      
                      Some(wasmi::RuntimeValue::I64(context.read_context() as i64))
                  },
              ),
          );
      
          env.internal_env.register_function(
              "wasm_write_context",
              Signature {
                  params: vec![ValueType::I64],
                  return_type: None,
              },
              HostPlugin::Context,
              Op::WriteContext as usize,
              Rc::new(
                  |_obs, context: &mut dyn ForeignContext, args: RuntimeArgs| {
                      let context = context.downcast_mut::<Context>().unwrap();
      
                      let value: i64 = args.nth(0);
                      context.write_context(value as u64);
      
                      None
                  },
              ),
          );
      }
      *)
      Definition register_context_foreign (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ env; context_input ] =>
          ltac:(M.monadic
            (let env := M.alloc (| env |) in
            let context_input := M.alloc (| context_input |) in
            M.read (|
              let _ :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.path
                        "delphinus_zkwasm::runtime::host::internal_circuit_plugin::InternalCircuitEnv",
                      "register_plugin",
                      []
                    |),
                    [
                      M.SubPointer.get_struct_record_field (|
                        M.read (| env |),
                        "delphinus_zkwasm::runtime::host::host_env::HostEnv",
                        "internal_env"
                      |);
                      M.read (| Value.String "context plugin" |);
                      Value.StructTuple "specs::host_function::HostPlugin::Context" [];
                      (* Unsize *)
                      M.pointer_coercion
                        (M.call_closure (|
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path "alloc::boxed::Box")
                              [
                                Ty.path "delphinus_zkwasm::foreign::context::runtime::Context";
                                Ty.path "alloc::alloc::Global"
                              ],
                            "new",
                            []
                          |),
                          [
                            M.call_closure (|
                              M.get_associated_function (|
                                Ty.path "delphinus_zkwasm::foreign::context::runtime::Context",
                                "new",
                                []
                              |),
                              [ M.read (| context_input |) ]
                            |)
                          ]
                        |))
                    ]
                  |)
                |) in
              let _ :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.path
                        "delphinus_zkwasm::runtime::host::internal_circuit_plugin::InternalCircuitEnv",
                      "register_function",
                      []
                    |),
                    [
                      M.SubPointer.get_struct_record_field (|
                        M.read (| env |),
                        "delphinus_zkwasm::runtime::host::host_env::HostEnv",
                        "internal_env"
                      |);
                      M.read (| Value.String "wasm_read_context" |);
                      Value.StructRecord
                        "specs::host_function::Signature"
                        [
                          ("params",
                            M.call_closure (|
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  [
                                    Ty.path "specs::types::ValueType";
                                    Ty.path "alloc::alloc::Global"
                                  ],
                                "new",
                                []
                              |),
                              []
                            |));
                          ("return_type",
                            Value.StructTuple
                              "core::option::Option::Some"
                              [ Value.StructTuple "specs::types::ValueType::I64" [] ])
                        ];
                      Value.StructTuple "specs::host_function::HostPlugin::Context" [];
                      M.rust_cast
                        (BinOp.Panic.add (|
                          Integer.Isize,
                          M.get_constant (|
                            "delphinus_zkwasm::foreign::context::Op::ReadContext_discriminant"
                          |),
                          Value.Integer 0
                        |));
                      (* Unsize *)
                      M.pointer_coercion
                        (M.call_closure (|
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path "alloc::rc::Rc")
                              [
                                Ty.function
                                  [
                                    Ty.tuple
                                      [
                                        Ty.apply
                                          (Ty.path "&")
                                          [
                                            Ty.path
                                              "delphinus_zkwasm::runtime::monitor::observer::Observer"
                                          ];
                                        Ty.apply
                                          (Ty.path "&mut")
                                          [
                                            Ty.dyn
                                              [
                                                ("delphinus_zkwasm::runtime::host::ForeignContext::Trait",
                                                  [])
                                              ]
                                          ];
                                        Ty.path "wasmi::host::RuntimeArgs"
                                      ]
                                  ]
                                  (Ty.apply
                                    (Ty.path "core::option::Option")
                                    [ Ty.path "wasmi_core::value::Value" ]);
                                Ty.path "alloc::alloc::Global"
                              ],
                            "new",
                            []
                          |),
                          [
                            M.closure
                              (fun γ =>
                                ltac:(M.monadic
                                  match γ with
                                  | [ α0; α1; α2 ] =>
                                    M.match_operator (|
                                      M.alloc (| α0 |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let _obs := M.copy (| γ |) in
                                            M.match_operator (|
                                              M.alloc (| α1 |),
                                              [
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (let context := M.copy (| γ |) in
                                                    M.match_operator (|
                                                      M.alloc (| α2 |),
                                                      [
                                                        fun γ =>
                                                          ltac:(M.monadic
                                                            (let _args := M.copy (| γ |) in
                                                            M.read (|
                                                              let context :=
                                                                M.alloc (|
                                                                  M.call_closure (|
                                                                    M.get_associated_function (|
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "core::option::Option")
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path "&mut")
                                                                            [
                                                                              Ty.path
                                                                                "delphinus_zkwasm::foreign::context::runtime::Context"
                                                                            ]
                                                                        ],
                                                                      "unwrap",
                                                                      []
                                                                    |),
                                                                    [
                                                                      M.call_closure (|
                                                                        M.get_associated_function (|
                                                                          Ty.dyn
                                                                            [
                                                                              ("delphinus_zkwasm::runtime::host::ForeignContext::Trait",
                                                                                [])
                                                                            ],
                                                                          "downcast_mut",
                                                                          [
                                                                            Ty.path
                                                                              "delphinus_zkwasm::foreign::context::runtime::Context"
                                                                          ]
                                                                        |),
                                                                        [ M.read (| context |) ]
                                                                      |)
                                                                    ]
                                                                  |)
                                                                |) in
                                                              M.alloc (|
                                                                Value.StructTuple
                                                                  "core::option::Option::Some"
                                                                  [
                                                                    Value.StructTuple
                                                                      "wasmi_core::value::Value::I64"
                                                                      [
                                                                        M.rust_cast
                                                                          (M.call_closure (|
                                                                            M.get_associated_function (|
                                                                              Ty.path
                                                                                "delphinus_zkwasm::foreign::context::runtime::Context",
                                                                              "read_context",
                                                                              []
                                                                            |),
                                                                            [ M.read (| context |) ]
                                                                          |))
                                                                      ]
                                                                  ]
                                                              |)
                                                            |)))
                                                      ]
                                                    |)))
                                              ]
                                            |)))
                                      ]
                                    |)
                                  | _ => M.impossible (||)
                                  end))
                          ]
                        |))
                    ]
                  |)
                |) in
              let _ :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.path
                        "delphinus_zkwasm::runtime::host::internal_circuit_plugin::InternalCircuitEnv",
                      "register_function",
                      []
                    |),
                    [
                      M.SubPointer.get_struct_record_field (|
                        M.read (| env |),
                        "delphinus_zkwasm::runtime::host::host_env::HostEnv",
                        "internal_env"
                      |);
                      M.read (| Value.String "wasm_write_context" |);
                      Value.StructRecord
                        "specs::host_function::Signature"
                        [
                          ("params",
                            M.call_closure (|
                              M.get_associated_function (|
                                Ty.apply (Ty.path "slice") [ Ty.path "specs::types::ValueType" ],
                                "into_vec",
                                [ Ty.path "alloc::alloc::Global" ]
                              |),
                              [
                                (* Unsize *)
                                M.pointer_coercion
                                  (M.read (|
                                    M.call_closure (|
                                      M.get_associated_function (|
                                        Ty.apply
                                          (Ty.path "alloc::boxed::Box")
                                          [
                                            Ty.apply
                                              (Ty.path "array")
                                              [ Ty.path "specs::types::ValueType" ];
                                            Ty.path "alloc::alloc::Global"
                                          ],
                                        "new",
                                        []
                                      |),
                                      [
                                        M.alloc (|
                                          Value.Array
                                            [ Value.StructTuple "specs::types::ValueType::I64" [] ]
                                        |)
                                      ]
                                    |)
                                  |))
                              ]
                            |));
                          ("return_type", Value.StructTuple "core::option::Option::None" [])
                        ];
                      Value.StructTuple "specs::host_function::HostPlugin::Context" [];
                      M.rust_cast
                        (BinOp.Panic.add (|
                          Integer.Isize,
                          M.get_constant (|
                            "delphinus_zkwasm::foreign::context::Op::WriteContext_discriminant"
                          |),
                          Value.Integer 0
                        |));
                      (* Unsize *)
                      M.pointer_coercion
                        (M.call_closure (|
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path "alloc::rc::Rc")
                              [
                                Ty.function
                                  [
                                    Ty.tuple
                                      [
                                        Ty.apply
                                          (Ty.path "&")
                                          [
                                            Ty.path
                                              "delphinus_zkwasm::runtime::monitor::observer::Observer"
                                          ];
                                        Ty.apply
                                          (Ty.path "&mut")
                                          [
                                            Ty.dyn
                                              [
                                                ("delphinus_zkwasm::runtime::host::ForeignContext::Trait",
                                                  [])
                                              ]
                                          ];
                                        Ty.path "wasmi::host::RuntimeArgs"
                                      ]
                                  ]
                                  (Ty.apply
                                    (Ty.path "core::option::Option")
                                    [ Ty.path "wasmi_core::value::Value" ]);
                                Ty.path "alloc::alloc::Global"
                              ],
                            "new",
                            []
                          |),
                          [
                            M.closure
                              (fun γ =>
                                ltac:(M.monadic
                                  match γ with
                                  | [ α0; α1; α2 ] =>
                                    M.match_operator (|
                                      M.alloc (| α0 |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let _obs := M.copy (| γ |) in
                                            M.match_operator (|
                                              M.alloc (| α1 |),
                                              [
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (let context := M.copy (| γ |) in
                                                    M.match_operator (|
                                                      M.alloc (| α2 |),
                                                      [
                                                        fun γ =>
                                                          ltac:(M.monadic
                                                            (let args := M.copy (| γ |) in
                                                            M.read (|
                                                              let context :=
                                                                M.alloc (|
                                                                  M.call_closure (|
                                                                    M.get_associated_function (|
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "core::option::Option")
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path "&mut")
                                                                            [
                                                                              Ty.path
                                                                                "delphinus_zkwasm::foreign::context::runtime::Context"
                                                                            ]
                                                                        ],
                                                                      "unwrap",
                                                                      []
                                                                    |),
                                                                    [
                                                                      M.call_closure (|
                                                                        M.get_associated_function (|
                                                                          Ty.dyn
                                                                            [
                                                                              ("delphinus_zkwasm::runtime::host::ForeignContext::Trait",
                                                                                [])
                                                                            ],
                                                                          "downcast_mut",
                                                                          [
                                                                            Ty.path
                                                                              "delphinus_zkwasm::foreign::context::runtime::Context"
                                                                          ]
                                                                        |),
                                                                        [ M.read (| context |) ]
                                                                      |)
                                                                    ]
                                                                  |)
                                                                |) in
                                                              let value :=
                                                                M.alloc (|
                                                                  M.call_closure (|
                                                                    M.get_associated_function (|
                                                                      Ty.path
                                                                        "wasmi::host::RuntimeArgs",
                                                                      "nth",
                                                                      [ Ty.path "i64" ]
                                                                    |),
                                                                    [ args; Value.Integer 0 ]
                                                                  |)
                                                                |) in
                                                              let _ :=
                                                                M.alloc (|
                                                                  M.call_closure (|
                                                                    M.get_associated_function (|
                                                                      Ty.path
                                                                        "delphinus_zkwasm::foreign::context::runtime::Context",
                                                                      "write_context",
                                                                      []
                                                                    |),
                                                                    [
                                                                      M.read (| context |);
                                                                      M.rust_cast
                                                                        (M.read (| value |))
                                                                    ]
                                                                  |)
                                                                |) in
                                                              M.alloc (|
                                                                Value.StructTuple
                                                                  "core::option::Option::None"
                                                                  []
                                                              |)
                                                            |)))
                                                      ]
                                                    |)))
                                              ]
                                            |)))
                                      ]
                                    |)
                                  | _ => M.impossible (||)
                                  end))
                          ]
                        |))
                    ]
                  |)
                |) in
              M.alloc (| Value.Tuple [] |)
            |)))
        | _, _ => M.impossible
        end.
    End runtime.
  End context.
End foreign.
