(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module foreign.
  Module log_helper.
    (* StructTuple
      {
        name := "Context";
        ty_params := [];
        fields := [];
      } *)
    
    Module Impl_delphinus_zkwasm_runtime_host_ForeignContext_for_delphinus_zkwasm_foreign_log_helper_Context.
      Definition Self : Ty.t := Ty.path "delphinus_zkwasm::foreign::log_helper::Context".
      
      Axiom Implements :
        M.IsTraitInstance
          "delphinus_zkwasm::runtime::host::ForeignContext"
          Self
          (* Trait polymorphic types *) []
          (* Instance *) [].
    End Impl_delphinus_zkwasm_runtime_host_ForeignContext_for_delphinus_zkwasm_foreign_log_helper_Context.
    
    (*
    pub fn register_log_foreign(env: &mut HostEnv) {
        let foreign_log_plugin = env
            .external_env
            .register_plugin("foreign_print", Box::new(Context));
    
        let print = Rc::new(
            |_observer: &Observer, _context: &mut dyn ForeignContext, args: wasmi::RuntimeArgs| {
                let value: u64 = args.nth(0);
                println!("{}", value);
                None
            },
        );
    
        let printchar = Rc::new(
            |_observer: &Observer, _context: &mut dyn ForeignContext, args: wasmi::RuntimeArgs| {
                let value: u64 = args.nth(0);
                print!("{}", value as u8 as char);
                None
            },
        );
    
        env.external_env.register_function(
            "wasm_dbg",
            Log as usize,
            ExternalHostCallSignature::Argument,
            foreign_log_plugin.clone(),
            print,
        );
    
        env.external_env.register_function(
            "wasm_dbg_char",
            LogChar as usize,
            ExternalHostCallSignature::Argument,
            foreign_log_plugin,
            printchar,
        );
    }
    *)
    Definition register_log_foreign (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [ env ] =>
        ltac:(M.monadic
          (let env := M.alloc (| env |) in
          M.read (|
            let foreign_log_plugin :=
              M.alloc (|
                M.call_closure (|
                  M.get_associated_function (|
                    Ty.path
                      "delphinus_zkwasm::runtime::host::external_circuit_plugin::ExternalCircuitEnv",
                    "register_plugin",
                    []
                  |),
                  [
                    M.SubPointer.get_struct_record_field (|
                      M.read (| env |),
                      "delphinus_zkwasm::runtime::host::host_env::HostEnv",
                      "external_env"
                    |);
                    M.read (| Value.String "foreign_print" |);
                    (* Unsize *)
                    M.pointer_coercion
                      (M.call_closure (|
                        M.get_associated_function (|
                          Ty.apply
                            (Ty.path "alloc::boxed::Box")
                            [
                              Ty.path "delphinus_zkwasm::foreign::log_helper::Context";
                              Ty.path "alloc::alloc::Global"
                            ],
                          "new",
                          []
                        |),
                        [ Value.StructTuple "delphinus_zkwasm::foreign::log_helper::Context" [] ]
                      |))
                  ]
                |)
              |) in
            let print :=
              M.alloc (|
                M.call_closure (|
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path "alloc::rc::Rc")
                      [
                        Ty.function
                          [
                            Ty.tuple
                              [
                                Ty.apply
                                  (Ty.path "&")
                                  [ Ty.path "delphinus_zkwasm::runtime::monitor::observer::Observer"
                                  ];
                                Ty.apply
                                  (Ty.path "&mut")
                                  [
                                    Ty.dyn
                                      [
                                        ("delphinus_zkwasm::runtime::host::ForeignContext::Trait",
                                          [])
                                      ]
                                  ];
                                Ty.path "wasmi::host::RuntimeArgs"
                              ]
                          ]
                          (Ty.apply
                            (Ty.path "core::option::Option")
                            [ Ty.path "wasmi_core::value::Value" ]);
                        Ty.path "alloc::alloc::Global"
                      ],
                    "new",
                    []
                  |),
                  [
                    M.closure
                      (fun γ =>
                        ltac:(M.monadic
                          match γ with
                          | [ α0; α1; α2 ] =>
                            M.match_operator (|
                              M.alloc (| α0 |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let _observer := M.copy (| γ |) in
                                    M.match_operator (|
                                      M.alloc (| α1 |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let _context := M.copy (| γ |) in
                                            M.match_operator (|
                                              M.alloc (| α2 |),
                                              [
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (let args := M.copy (| γ |) in
                                                    M.read (|
                                                      let value :=
                                                        M.alloc (|
                                                          M.call_closure (|
                                                            M.get_associated_function (|
                                                              Ty.path "wasmi::host::RuntimeArgs",
                                                              "nth",
                                                              [ Ty.path "u64" ]
                                                            |),
                                                            [ args; Value.Integer 0 ]
                                                          |)
                                                        |) in
                                                      let _ :=
                                                        let _ :=
                                                          M.alloc (|
                                                            M.call_closure (|
                                                              M.get_function (|
                                                                "std::io::stdio::_print",
                                                                []
                                                              |),
                                                              [
                                                                M.call_closure (|
                                                                  M.get_associated_function (|
                                                                    Ty.path "core::fmt::Arguments",
                                                                    "new_v1",
                                                                    []
                                                                  |),
                                                                  [
                                                                    (* Unsize *)
                                                                    M.pointer_coercion
                                                                      (M.alloc (|
                                                                        Value.Array
                                                                          [
                                                                            M.read (|
                                                                              Value.String ""
                                                                            |);
                                                                            M.read (|
                                                                              Value.String "
"
                                                                            |)
                                                                          ]
                                                                      |));
                                                                    (* Unsize *)
                                                                    M.pointer_coercion
                                                                      (M.alloc (|
                                                                        Value.Array
                                                                          [
                                                                            M.call_closure (|
                                                                              M.get_associated_function (|
                                                                                Ty.path
                                                                                  "core::fmt::rt::Argument",
                                                                                "new_display",
                                                                                [ Ty.path "u64" ]
                                                                              |),
                                                                              [ value ]
                                                                            |)
                                                                          ]
                                                                      |))
                                                                  ]
                                                                |)
                                                              ]
                                                            |)
                                                          |) in
                                                        M.alloc (| Value.Tuple [] |) in
                                                      M.alloc (|
                                                        Value.StructTuple
                                                          "core::option::Option::None"
                                                          []
                                                      |)
                                                    |)))
                                              ]
                                            |)))
                                      ]
                                    |)))
                              ]
                            |)
                          | _ => M.impossible (||)
                          end))
                  ]
                |)
              |) in
            let printchar :=
              M.alloc (|
                M.call_closure (|
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path "alloc::rc::Rc")
                      [
                        Ty.function
                          [
                            Ty.tuple
                              [
                                Ty.apply
                                  (Ty.path "&")
                                  [ Ty.path "delphinus_zkwasm::runtime::monitor::observer::Observer"
                                  ];
                                Ty.apply
                                  (Ty.path "&mut")
                                  [
                                    Ty.dyn
                                      [
                                        ("delphinus_zkwasm::runtime::host::ForeignContext::Trait",
                                          [])
                                      ]
                                  ];
                                Ty.path "wasmi::host::RuntimeArgs"
                              ]
                          ]
                          (Ty.apply
                            (Ty.path "core::option::Option")
                            [ Ty.path "wasmi_core::value::Value" ]);
                        Ty.path "alloc::alloc::Global"
                      ],
                    "new",
                    []
                  |),
                  [
                    M.closure
                      (fun γ =>
                        ltac:(M.monadic
                          match γ with
                          | [ α0; α1; α2 ] =>
                            M.match_operator (|
                              M.alloc (| α0 |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let _observer := M.copy (| γ |) in
                                    M.match_operator (|
                                      M.alloc (| α1 |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let _context := M.copy (| γ |) in
                                            M.match_operator (|
                                              M.alloc (| α2 |),
                                              [
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (let args := M.copy (| γ |) in
                                                    M.read (|
                                                      let value :=
                                                        M.alloc (|
                                                          M.call_closure (|
                                                            M.get_associated_function (|
                                                              Ty.path "wasmi::host::RuntimeArgs",
                                                              "nth",
                                                              [ Ty.path "u64" ]
                                                            |),
                                                            [ args; Value.Integer 0 ]
                                                          |)
                                                        |) in
                                                      let _ :=
                                                        let _ :=
                                                          M.alloc (|
                                                            M.call_closure (|
                                                              M.get_function (|
                                                                "std::io::stdio::_print",
                                                                []
                                                              |),
                                                              [
                                                                M.call_closure (|
                                                                  M.get_associated_function (|
                                                                    Ty.path "core::fmt::Arguments",
                                                                    "new_v1",
                                                                    []
                                                                  |),
                                                                  [
                                                                    (* Unsize *)
                                                                    M.pointer_coercion
                                                                      (M.alloc (|
                                                                        Value.Array
                                                                          [
                                                                            M.read (|
                                                                              Value.String ""
                                                                            |)
                                                                          ]
                                                                      |));
                                                                    (* Unsize *)
                                                                    M.pointer_coercion
                                                                      (M.alloc (|
                                                                        Value.Array
                                                                          [
                                                                            M.call_closure (|
                                                                              M.get_associated_function (|
                                                                                Ty.path
                                                                                  "core::fmt::rt::Argument",
                                                                                "new_display",
                                                                                [ Ty.path "char" ]
                                                                              |),
                                                                              [
                                                                                M.alloc (|
                                                                                  M.rust_cast
                                                                                    (M.rust_cast
                                                                                      (M.read (|
                                                                                        value
                                                                                      |)))
                                                                                |)
                                                                              ]
                                                                            |)
                                                                          ]
                                                                      |))
                                                                  ]
                                                                |)
                                                              ]
                                                            |)
                                                          |) in
                                                        M.alloc (| Value.Tuple [] |) in
                                                      M.alloc (|
                                                        Value.StructTuple
                                                          "core::option::Option::None"
                                                          []
                                                      |)
                                                    |)))
                                              ]
                                            |)))
                                      ]
                                    |)))
                              ]
                            |)
                          | _ => M.impossible (||)
                          end))
                  ]
                |)
              |) in
            let _ :=
              M.alloc (|
                M.call_closure (|
                  M.get_associated_function (|
                    Ty.path
                      "delphinus_zkwasm::runtime::host::external_circuit_plugin::ExternalCircuitEnv",
                    "register_function",
                    []
                  |),
                  [
                    M.SubPointer.get_struct_record_field (|
                      M.read (| env |),
                      "delphinus_zkwasm::runtime::host::host_env::HostEnv",
                      "external_env"
                    |);
                    M.read (| Value.String "wasm_dbg" |);
                    M.rust_cast
                      (BinOp.Panic.add (|
                        Integer.Isize,
                        M.get_constant (|
                          "zkwasm_host_circuits::host::ForeignInst::Log_discriminant"
                        |),
                        Value.Integer 0
                      |));
                    Value.StructTuple
                      "specs::external_host_call_table::ExternalHostCallSignature::Argument"
                      [];
                    M.call_closure (|
                      M.get_trait_method (|
                        "core::clone::Clone",
                        Ty.apply
                          (Ty.path "alloc::rc::Rc")
                          [
                            Ty.path "delphinus_zkwasm::runtime::host::ForeignPlugin";
                            Ty.path "alloc::alloc::Global"
                          ],
                        [],
                        "clone",
                        []
                      |),
                      [ foreign_log_plugin ]
                    |);
                    (* Unsize *) M.pointer_coercion (M.read (| print |))
                  ]
                |)
              |) in
            let _ :=
              M.alloc (|
                M.call_closure (|
                  M.get_associated_function (|
                    Ty.path
                      "delphinus_zkwasm::runtime::host::external_circuit_plugin::ExternalCircuitEnv",
                    "register_function",
                    []
                  |),
                  [
                    M.SubPointer.get_struct_record_field (|
                      M.read (| env |),
                      "delphinus_zkwasm::runtime::host::host_env::HostEnv",
                      "external_env"
                    |);
                    M.read (| Value.String "wasm_dbg_char" |);
                    M.rust_cast
                      (BinOp.Panic.add (|
                        Integer.Isize,
                        M.get_constant (|
                          "zkwasm_host_circuits::host::ForeignInst::Log_discriminant"
                        |),
                        Value.Integer 36
                      |));
                    Value.StructTuple
                      "specs::external_host_call_table::ExternalHostCallSignature::Argument"
                      [];
                    M.read (| foreign_log_plugin |);
                    (* Unsize *) M.pointer_coercion (M.read (| printchar |))
                  ]
                |)
              |) in
            M.alloc (| Value.Tuple [] |)
          |)))
      | _, _ => M.impossible
      end.
  End log_helper.
End foreign.
