(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module foreign.
  Module require_helper.
    Module etable_op_configure.
      (* StructRecord
        {
          name := "ETableRequireHelperTableConfig";
          ty_params := [ "F" ];
          fields :=
            [
              ("plugin_index", Ty.path "usize");
              ("cond",
                Ty.apply (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedU64Cell") [ F ]);
              ("cond_inv",
                Ty.apply
                  (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedUnlimitedCell")
                  [ F ]);
              ("memory_table_lookup_read_stack",
                Ty.apply
                  (Ty.path
                    "delphinus_zkwasm::circuits::etable::allocator::AllocatedMemoryTableLookupReadCell")
                  [ F ])
            ];
        } *)
      
      (* StructRecord
        {
          name := "ETableRequireHelperTableConfigBuilder";
          ty_params := [];
          fields := [ ("index", Ty.path "usize") ];
        } *)
      
      Module Impl_delphinus_zkwasm_foreign_InternalHostPluginBuilder_for_delphinus_zkwasm_foreign_require_helper_etable_op_configure_ETableRequireHelperTableConfigBuilder.
        Definition Self : Ty.t :=
          Ty.path
            "delphinus_zkwasm::foreign::require_helper::etable_op_configure::ETableRequireHelperTableConfigBuilder".
        
        (*
            fn new(index: usize) -> Self {
                Self { index }
            }
        *)
        Definition new (τ : list Ty.t) (α : list Value.t) : M :=
          match τ, α with
          | [], [ index ] =>
            ltac:(M.monadic
              (let index := M.alloc (| index |) in
              Value.StructRecord
                "delphinus_zkwasm::foreign::require_helper::etable_op_configure::ETableRequireHelperTableConfigBuilder"
                [ ("index", M.read (| index |)) ]))
          | _, _ => M.impossible
          end.
        
        Axiom Implements :
          M.IsTraitInstance
            "delphinus_zkwasm::foreign::InternalHostPluginBuilder"
            Self
            (* Trait polymorphic types *) []
            (* Instance *) [ ("new", InstanceField.Method new) ].
      End Impl_delphinus_zkwasm_foreign_InternalHostPluginBuilder_for_delphinus_zkwasm_foreign_require_helper_etable_op_configure_ETableRequireHelperTableConfigBuilder.
      
      Module Impl_delphinus_zkwasm_foreign_EventTableForeignCallConfigBuilder_where_pairing_bn256_arithmetic_fields_FieldExt_F_F_for_delphinus_zkwasm_foreign_require_helper_etable_op_configure_ETableRequireHelperTableConfigBuilder.
        Definition Self (F : Ty.t) : Ty.t :=
          Ty.path
            "delphinus_zkwasm::foreign::require_helper::etable_op_configure::ETableRequireHelperTableConfigBuilder".
        
        (*
            fn configure(
                self,
                common_config: &EventTableCommonConfig<F>,
                allocator: &mut EventTableCellAllocator<F>,
                constraint_builder: &mut ConstraintBuilder<F>,
                _lookup_cells: &mut (impl Iterator<Item = AllocatedUnlimitedCell<F>> + Clone),
            ) -> Box<dyn EventTableOpcodeConfig<F>> {
                let cond = allocator.alloc_u64_cell();
                let cond_inv = allocator.alloc_unlimited_cell();
        
                constraint_builder.push(
                    "require: cond is not zero",
                    Box::new(move |meta| vec![(cond.expr(meta) * cond_inv.expr(meta) - constant_from!(1))]),
                );
        
                let eid = common_config.eid_cell;
                let sp = common_config.sp_cell;
        
                let memory_table_lookup_read_stack = allocator.alloc_memory_table_lookup_read_cell(
                    "require stack read",
                    constraint_builder,
                    eid,
                    move |_| constant_from!(LocationType::Stack as u64),
                    move |meta| sp.expr(meta) + constant_from!(1),
                    move |____| constant_from!(1),
                    move |meta| cond.expr(meta),
                    move |_| constant_from!(1),
                );
        
                Box::new(ETableRequireHelperTableConfig {
                    plugin_index: self.index,
                    cond,
                    cond_inv,
                    memory_table_lookup_read_stack,
                })
            }
        *)
        Definition configure (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self F in
          match τ, α with
          | [ impl_Iterator_Item___AllocatedUnlimitedCell_F____plus__Clone ],
              [ self; common_config; allocator; constraint_builder; _lookup_cells ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              let common_config := M.alloc (| common_config |) in
              let allocator := M.alloc (| allocator |) in
              let constraint_builder := M.alloc (| constraint_builder |) in
              let _lookup_cells := M.alloc (| _lookup_cells |) in
              (* Unsize *)
              M.pointer_coercion
                (M.read (|
                  let cond :=
                    M.alloc (|
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.apply
                            (Ty.path
                              "delphinus_zkwasm::circuits::etable::allocator::EventTableCellAllocator")
                            [ F ],
                          "alloc_u64_cell",
                          []
                        |),
                        [ M.read (| allocator |) ]
                      |)
                    |) in
                  let cond_inv :=
                    M.alloc (|
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.apply
                            (Ty.path
                              "delphinus_zkwasm::circuits::etable::allocator::EventTableCellAllocator")
                            [ F ],
                          "alloc_unlimited_cell",
                          []
                        |),
                        [ M.read (| allocator |) ]
                      |)
                    |) in
                  let _ :=
                    M.alloc (|
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.apply
                            (Ty.path
                              "delphinus_zkwasm::circuits::etable::constraint_builder::ConstraintBuilder")
                            [ F ],
                          "push",
                          []
                        |),
                        [
                          M.read (| constraint_builder |);
                          M.read (| Value.String "require: cond is not zero" |);
                          (* Unsize *)
                          M.pointer_coercion
                            (M.call_closure (|
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path "alloc::boxed::Box")
                                  [
                                    Ty.function
                                      [
                                        Ty.tuple
                                          [
                                            Ty.apply
                                              (Ty.path "&mut")
                                              [
                                                Ty.apply
                                                  (Ty.path
                                                    "halo2_proofs::plonk::circuit::VirtualCells")
                                                  [ F ]
                                              ]
                                          ]
                                      ]
                                      (Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        [
                                          Ty.apply
                                            (Ty.path "halo2_proofs::plonk::circuit::Expression")
                                            [ F ];
                                          Ty.path "alloc::alloc::Global"
                                        ]);
                                    Ty.path "alloc::alloc::Global"
                                  ],
                                "new",
                                []
                              |),
                              [
                                M.closure
                                  (fun γ =>
                                    ltac:(M.monadic
                                      match γ with
                                      | [ α0 ] =>
                                        M.match_operator (|
                                          M.alloc (| α0 |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let meta := M.copy (| γ |) in
                                                M.call_closure (|
                                                  M.get_associated_function (|
                                                    Ty.apply
                                                      (Ty.path "slice")
                                                      [
                                                        Ty.apply
                                                          (Ty.path
                                                            "halo2_proofs::plonk::circuit::Expression")
                                                          [ F ]
                                                      ],
                                                    "into_vec",
                                                    [ Ty.path "alloc::alloc::Global" ]
                                                  |),
                                                  [
                                                    (* Unsize *)
                                                    M.pointer_coercion
                                                      (M.read (|
                                                        M.call_closure (|
                                                          M.get_associated_function (|
                                                            Ty.apply
                                                              (Ty.path "alloc::boxed::Box")
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "array")
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "halo2_proofs::plonk::circuit::Expression")
                                                                      [ F ]
                                                                  ];
                                                                Ty.path "alloc::alloc::Global"
                                                              ],
                                                            "new",
                                                            []
                                                          |),
                                                          [
                                                            M.alloc (|
                                                              Value.Array
                                                                [
                                                                  M.call_closure (|
                                                                    M.get_trait_method (|
                                                                      "core::ops::arith::Sub",
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "halo2_proofs::plonk::circuit::Expression")
                                                                        [ F ],
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "halo2_proofs::plonk::circuit::Expression")
                                                                          [ F ]
                                                                      ],
                                                                      "sub",
                                                                      []
                                                                    |),
                                                                    [
                                                                      M.call_closure (|
                                                                        M.get_trait_method (|
                                                                          "core::ops::arith::Mul",
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "halo2_proofs::plonk::circuit::Expression")
                                                                            [ F ],
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "halo2_proofs::plonk::circuit::Expression")
                                                                              [ F ]
                                                                          ],
                                                                          "mul",
                                                                          []
                                                                        |),
                                                                        [
                                                                          M.call_closure (|
                                                                            M.get_associated_function (|
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "delphinus_zkwasm::circuits::cell::AllocatedU64Cell")
                                                                                [ F ],
                                                                              "expr",
                                                                              []
                                                                            |),
                                                                            [
                                                                              cond;
                                                                              M.read (| meta |)
                                                                            ]
                                                                          |);
                                                                          M.call_closure (|
                                                                            M.get_trait_method (|
                                                                              "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "delphinus_zkwasm::circuits::cell::AllocatedUnlimitedCell")
                                                                                [ F ],
                                                                              [ F ],
                                                                              "expr",
                                                                              []
                                                                            |),
                                                                            [
                                                                              cond_inv;
                                                                              M.read (| meta |)
                                                                            ]
                                                                          |)
                                                                        ]
                                                                      |);
                                                                      Value.StructTuple
                                                                        "halo2_proofs::plonk::circuit::Expression::Constant"
                                                                        [
                                                                          M.call_closure (|
                                                                            M.get_trait_method (|
                                                                              "core::convert::From",
                                                                              F,
                                                                              [ Ty.path "u64" ],
                                                                              "from",
                                                                              []
                                                                            |),
                                                                            [
                                                                              M.read (|
                                                                                M.use
                                                                                  (M.alloc (|
                                                                                    Value.Integer 1
                                                                                  |))
                                                                              |)
                                                                            ]
                                                                          |)
                                                                        ]
                                                                    ]
                                                                  |)
                                                                ]
                                                            |)
                                                          ]
                                                        |)
                                                      |))
                                                  ]
                                                |)))
                                          ]
                                        |)
                                      | _ => M.impossible (||)
                                      end))
                              ]
                            |))
                        ]
                      |)
                    |) in
                  let eid :=
                    M.copy (|
                      M.SubPointer.get_struct_record_field (|
                        M.read (| common_config |),
                        "delphinus_zkwasm::circuits::etable::EventTableCommonConfig",
                        "eid_cell"
                      |)
                    |) in
                  let sp :=
                    M.copy (|
                      M.SubPointer.get_struct_record_field (|
                        M.read (| common_config |),
                        "delphinus_zkwasm::circuits::etable::EventTableCommonConfig",
                        "sp_cell"
                      |)
                    |) in
                  let memory_table_lookup_read_stack :=
                    M.alloc (|
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.apply
                            (Ty.path
                              "delphinus_zkwasm::circuits::etable::allocator::EventTableCellAllocator")
                            [ F ],
                          "alloc_memory_table_lookup_read_cell",
                          [
                            Ty.function
                              [
                                Ty.tuple
                                  [
                                    Ty.apply
                                      (Ty.path "&mut")
                                      [
                                        Ty.apply
                                          (Ty.path "halo2_proofs::plonk::circuit::VirtualCells")
                                          [ F ]
                                      ]
                                  ]
                              ]
                              (Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ]);
                            Ty.function
                              [
                                Ty.tuple
                                  [
                                    Ty.apply
                                      (Ty.path "&mut")
                                      [
                                        Ty.apply
                                          (Ty.path "halo2_proofs::plonk::circuit::VirtualCells")
                                          [ F ]
                                      ]
                                  ]
                              ]
                              (Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ]);
                            Ty.function
                              [
                                Ty.tuple
                                  [
                                    Ty.apply
                                      (Ty.path "&mut")
                                      [
                                        Ty.apply
                                          (Ty.path "halo2_proofs::plonk::circuit::VirtualCells")
                                          [ F ]
                                      ]
                                  ]
                              ]
                              (Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ]);
                            Ty.function
                              [
                                Ty.tuple
                                  [
                                    Ty.apply
                                      (Ty.path "&mut")
                                      [
                                        Ty.apply
                                          (Ty.path "halo2_proofs::plonk::circuit::VirtualCells")
                                          [ F ]
                                      ]
                                  ]
                              ]
                              (Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ]);
                            Ty.function
                              [
                                Ty.tuple
                                  [
                                    Ty.apply
                                      (Ty.path "&mut")
                                      [
                                        Ty.apply
                                          (Ty.path "halo2_proofs::plonk::circuit::VirtualCells")
                                          [ F ]
                                      ]
                                  ]
                              ]
                              (Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ])
                          ]
                        |),
                        [
                          M.read (| allocator |);
                          M.read (| Value.String "require stack read" |);
                          M.read (| constraint_builder |);
                          M.read (| eid |);
                          M.closure
                            (fun γ =>
                              ltac:(M.monadic
                                match γ with
                                | [ α0 ] =>
                                  M.match_operator (|
                                    M.alloc (| α0 |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (Value.StructTuple
                                            "halo2_proofs::plonk::circuit::Expression::Constant"
                                            [
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "core::convert::From",
                                                  F,
                                                  [ Ty.path "u64" ],
                                                  "from",
                                                  []
                                                |),
                                                [
                                                  M.read (|
                                                    M.use
                                                      (M.alloc (|
                                                        M.rust_cast
                                                          (BinOp.Panic.add (|
                                                            Integer.Isize,
                                                            M.get_constant (|
                                                              "specs::mtable::LocationType::Stack_discriminant"
                                                            |),
                                                            Value.Integer 0
                                                          |))
                                                      |))
                                                  |)
                                                ]
                                              |)
                                            ]))
                                    ]
                                  |)
                                | _ => M.impossible (||)
                                end));
                          M.closure
                            (fun γ =>
                              ltac:(M.monadic
                                match γ with
                                | [ α0 ] =>
                                  M.match_operator (|
                                    M.alloc (| α0 |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let meta := M.copy (| γ |) in
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "core::ops::arith::Add",
                                              Ty.apply
                                                (Ty.path "halo2_proofs::plonk::circuit::Expression")
                                                [ F ],
                                              [
                                                Ty.apply
                                                  (Ty.path
                                                    "halo2_proofs::plonk::circuit::Expression")
                                                  [ F ]
                                              ],
                                              "add",
                                              []
                                            |),
                                            [
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "delphinus_zkwasm::circuits::cell::CellExpression",
                                                  Ty.apply
                                                    (Ty.path
                                                      "delphinus_zkwasm::circuits::cell::AllocatedCommonRangeCell")
                                                    [ F ],
                                                  [ F ],
                                                  "expr",
                                                  []
                                                |),
                                                [ sp; M.read (| meta |) ]
                                              |);
                                              Value.StructTuple
                                                "halo2_proofs::plonk::circuit::Expression::Constant"
                                                [
                                                  M.call_closure (|
                                                    M.get_trait_method (|
                                                      "core::convert::From",
                                                      F,
                                                      [ Ty.path "u64" ],
                                                      "from",
                                                      []
                                                    |),
                                                    [
                                                      M.read (|
                                                        M.use (M.alloc (| Value.Integer 1 |))
                                                      |)
                                                    ]
                                                  |)
                                                ]
                                            ]
                                          |)))
                                    ]
                                  |)
                                | _ => M.impossible (||)
                                end));
                          M.closure
                            (fun γ =>
                              ltac:(M.monadic
                                match γ with
                                | [ α0 ] =>
                                  M.match_operator (|
                                    M.alloc (| α0 |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let ____ := M.copy (| γ |) in
                                          Value.StructTuple
                                            "halo2_proofs::plonk::circuit::Expression::Constant"
                                            [
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "core::convert::From",
                                                  F,
                                                  [ Ty.path "u64" ],
                                                  "from",
                                                  []
                                                |),
                                                [ M.read (| M.use (M.alloc (| Value.Integer 1 |)) |)
                                                ]
                                              |)
                                            ]))
                                    ]
                                  |)
                                | _ => M.impossible (||)
                                end));
                          M.closure
                            (fun γ =>
                              ltac:(M.monadic
                                match γ with
                                | [ α0 ] =>
                                  M.match_operator (|
                                    M.alloc (| α0 |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let meta := M.copy (| γ |) in
                                          M.call_closure (|
                                            M.get_associated_function (|
                                              Ty.apply
                                                (Ty.path
                                                  "delphinus_zkwasm::circuits::cell::AllocatedU64Cell")
                                                [ F ],
                                              "expr",
                                              []
                                            |),
                                            [ cond; M.read (| meta |) ]
                                          |)))
                                    ]
                                  |)
                                | _ => M.impossible (||)
                                end));
                          M.closure
                            (fun γ =>
                              ltac:(M.monadic
                                match γ with
                                | [ α0 ] =>
                                  M.match_operator (|
                                    M.alloc (| α0 |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (Value.StructTuple
                                            "halo2_proofs::plonk::circuit::Expression::Constant"
                                            [
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "core::convert::From",
                                                  F,
                                                  [ Ty.path "u64" ],
                                                  "from",
                                                  []
                                                |),
                                                [ M.read (| M.use (M.alloc (| Value.Integer 1 |)) |)
                                                ]
                                              |)
                                            ]))
                                    ]
                                  |)
                                | _ => M.impossible (||)
                                end))
                        ]
                      |)
                    |) in
                  M.alloc (|
                    (* Unsize *)
                    M.pointer_coercion
                      (M.call_closure (|
                        M.get_associated_function (|
                          Ty.apply
                            (Ty.path "alloc::boxed::Box")
                            [
                              Ty.apply
                                (Ty.path
                                  "delphinus_zkwasm::foreign::require_helper::etable_op_configure::ETableRequireHelperTableConfig")
                                [ F ];
                              Ty.path "alloc::alloc::Global"
                            ],
                          "new",
                          []
                        |),
                        [
                          Value.StructRecord
                            "delphinus_zkwasm::foreign::require_helper::etable_op_configure::ETableRequireHelperTableConfig"
                            [
                              ("plugin_index",
                                M.read (|
                                  M.SubPointer.get_struct_record_field (|
                                    self,
                                    "delphinus_zkwasm::foreign::require_helper::etable_op_configure::ETableRequireHelperTableConfigBuilder",
                                    "index"
                                  |)
                                |));
                              ("cond", M.read (| cond |));
                              ("cond_inv", M.read (| cond_inv |));
                              ("memory_table_lookup_read_stack",
                                M.read (| memory_table_lookup_read_stack |))
                            ]
                        ]
                      |))
                  |)
                |))))
          | _, _ => M.impossible
          end.
        
        Axiom Implements :
          forall (F : Ty.t),
          M.IsTraitInstance
            "delphinus_zkwasm::foreign::EventTableForeignCallConfigBuilder"
            (Self F)
            (* Trait polymorphic types *) [ (* F *) F ]
            (* Instance *) [ ("configure", InstanceField.Method (configure F)) ].
      End Impl_delphinus_zkwasm_foreign_EventTableForeignCallConfigBuilder_where_pairing_bn256_arithmetic_fields_FieldExt_F_F_for_delphinus_zkwasm_foreign_require_helper_etable_op_configure_ETableRequireHelperTableConfigBuilder.
      
      Module Impl_delphinus_zkwasm_circuits_etable_EventTableOpcodeConfig_where_pairing_bn256_arithmetic_fields_FieldExt_F_F_for_delphinus_zkwasm_foreign_require_helper_etable_op_configure_ETableRequireHelperTableConfig_F.
        Definition Self (F : Ty.t) : Ty.t :=
          Ty.apply
            (Ty.path
              "delphinus_zkwasm::foreign::require_helper::etable_op_configure::ETableRequireHelperTableConfig")
            [ F ].
        
        (*
            fn opcode(&self, _meta: &mut VirtualCells<'_, F>) -> Expression<F> {
                constant_from_bn!(
                    &(BigUint::from(OpcodeClass::ForeignPluginStart as u64 + self.plugin_index as u64)
                        << OPCODE_CLASS_SHIFT)
                )
            }
        *)
        Definition opcode (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self F in
          match τ, α with
          | [], [ self; _meta ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              let _meta := M.alloc (| _meta |) in
              Value.StructTuple
                "halo2_proofs::plonk::circuit::Expression::Constant"
                [
                  M.call_closure (|
                    M.get_function (| "delphinus_zkwasm::circuits::utils::bn_to_field", [ F ] |),
                    [
                      M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::ops::bit::Shl",
                            Ty.path "num_bigint::biguint::BigUint",
                            [ Ty.path "u32" ],
                            "shl",
                            []
                          |),
                          [
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::convert::From",
                                Ty.path "num_bigint::biguint::BigUint",
                                [ Ty.path "u64" ],
                                "from",
                                []
                              |),
                              [
                                BinOp.Panic.add (|
                                  Integer.U64,
                                  M.rust_cast
                                    (BinOp.Panic.add (|
                                      Integer.Isize,
                                      M.get_constant (|
                                        "specs::itable::OpcodeClass::LocalGet_discriminant"
                                      |),
                                      Value.Integer 28
                                    |)),
                                  M.rust_cast
                                    (M.read (|
                                      M.SubPointer.get_struct_record_field (|
                                        M.read (| self |),
                                        "delphinus_zkwasm::foreign::require_helper::etable_op_configure::ETableRequireHelperTableConfig",
                                        "plugin_index"
                                      |)
                                    |))
                                |)
                              ]
                            |);
                            M.read (| M.get_constant (| "specs::itable::OPCODE_CLASS_SHIFT" |) |)
                          ]
                        |)
                      |)
                    ]
                  |)
                ]))
          | _, _ => M.impossible
          end.
        
        (*
            fn assign(
                &self,
                ctx: &mut Context<'_, F>,
                step: &StepStatus,
                entry: &EventTableEntryWithMemoryInfo,
            ) -> Result<(), Error> {
                match &entry.eentry.step_info {
                    StepInfo::CallHost { args, .. } => {
                        let cond = args[0];
        
                        self.cond.assign(ctx, cond)?;
                        self.cond_inv
                            .assign(ctx, F::from(cond).invert().unwrap_or(F::zero()))?;
                        self.memory_table_lookup_read_stack.assign(
                            ctx,
                            entry.memory_rw_entires[0].start_eid,
                            step.current.eid,
                            entry.memory_rw_entires[0].end_eid,
                            step.current.sp + 1,
                            LocationType::Stack,
                            true,
                            cond,
                        )?;
        
                        Ok(())
                    }
        
                    _ => unreachable!(),
                }
            }
        *)
        Definition assign (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self F in
          match τ, α with
          | [], [ self; ctx; step; entry ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              let ctx := M.alloc (| ctx |) in
              let step := M.alloc (| step |) in
              let entry := M.alloc (| entry |) in
              M.catch_return (|
                ltac:(M.monadic
                  (M.read (|
                    M.match_operator (|
                      M.alloc (|
                        M.SubPointer.get_struct_record_field (|
                          M.SubPointer.get_struct_record_field (|
                            M.read (| entry |),
                            "delphinus_zkwasm::circuits::utils::table_entry::EventTableEntryWithMemoryInfo",
                            "eentry"
                          |),
                          "specs::etable::EventTableEntry",
                          "step_info"
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ := M.read (| γ |) in
                            let γ1_0 :=
                              M.SubPointer.get_struct_record_field (|
                                γ,
                                "specs::step::StepInfo::CallHost",
                                "args"
                              |) in
                            let args := M.alloc (| γ1_0 |) in
                            let cond :=
                              M.copy (|
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "core::ops::index::Index",
                                    Ty.apply
                                      (Ty.path "alloc::vec::Vec")
                                      [ Ty.path "u64"; Ty.path "alloc::alloc::Global" ],
                                    [ Ty.path "usize" ],
                                    "index",
                                    []
                                  |),
                                  [ M.read (| args |); Value.Integer 0 ]
                                |)
                              |) in
                            let _ :=
                              M.match_operator (|
                                M.alloc (|
                                  M.call_closure (|
                                    M.get_trait_method (|
                                      "core::ops::try_trait::Try",
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        [ Ty.tuple []; Ty.path "halo2_proofs::plonk::error::Error"
                                        ],
                                      [],
                                      "branch",
                                      []
                                    |),
                                    [
                                      M.call_closure (|
                                        M.get_associated_function (|
                                          Ty.apply
                                            (Ty.path
                                              "delphinus_zkwasm::circuits::cell::AllocatedU64Cell")
                                            [ F ],
                                          "assign",
                                          []
                                        |),
                                        [
                                          M.SubPointer.get_struct_record_field (|
                                            M.read (| self |),
                                            "delphinus_zkwasm::foreign::require_helper::etable_op_configure::ETableRequireHelperTableConfig",
                                            "cond"
                                          |);
                                          M.read (| ctx |);
                                          M.read (| cond |)
                                        ]
                                      |)
                                    ]
                                  |)
                                |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ0_0 :=
                                        M.SubPointer.get_struct_tuple_field (|
                                          γ,
                                          "core::ops::control_flow::ControlFlow::Break",
                                          0
                                        |) in
                                      let residual := M.copy (| γ0_0 |) in
                                      M.alloc (|
                                        M.never_to_any (|
                                          M.read (|
                                            M.return_ (|
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "core::ops::try_trait::FromResidual",
                                                  Ty.apply
                                                    (Ty.path "core::result::Result")
                                                    [
                                                      Ty.tuple [];
                                                      Ty.path "halo2_proofs::plonk::error::Error"
                                                    ],
                                                  [
                                                    Ty.apply
                                                      (Ty.path "core::result::Result")
                                                      [
                                                        Ty.path "core::convert::Infallible";
                                                        Ty.path "halo2_proofs::plonk::error::Error"
                                                      ]
                                                  ],
                                                  "from_residual",
                                                  []
                                                |),
                                                [ M.read (| residual |) ]
                                              |)
                                            |)
                                          |)
                                        |)
                                      |)));
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ0_0 :=
                                        M.SubPointer.get_struct_tuple_field (|
                                          γ,
                                          "core::ops::control_flow::ControlFlow::Continue",
                                          0
                                        |) in
                                      let val := M.copy (| γ0_0 |) in
                                      val))
                                ]
                              |) in
                            let _ :=
                              M.match_operator (|
                                M.alloc (|
                                  M.call_closure (|
                                    M.get_trait_method (|
                                      "core::ops::try_trait::Try",
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        [
                                          Ty.apply
                                            (Ty.path "halo2_proofs::circuit::AssignedCell")
                                            [ F; F ];
                                          Ty.path "halo2_proofs::plonk::error::Error"
                                        ],
                                      [],
                                      "branch",
                                      []
                                    |),
                                    [
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "delphinus_zkwasm::circuits::cell::CellExpression",
                                          Ty.apply
                                            (Ty.path
                                              "delphinus_zkwasm::circuits::cell::AllocatedUnlimitedCell")
                                            [ F ],
                                          [ F ],
                                          "assign",
                                          []
                                        |),
                                        [
                                          M.SubPointer.get_struct_record_field (|
                                            M.read (| self |),
                                            "delphinus_zkwasm::foreign::require_helper::etable_op_configure::ETableRequireHelperTableConfig",
                                            "cond_inv"
                                          |);
                                          M.read (| ctx |);
                                          M.call_closure (|
                                            M.get_associated_function (|
                                              Ty.apply (Ty.path "subtle::CtOption") [ F ],
                                              "unwrap_or",
                                              []
                                            |),
                                            [
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "ff::Field",
                                                  F,
                                                  [],
                                                  "invert",
                                                  []
                                                |),
                                                [
                                                  M.alloc (|
                                                    M.call_closure (|
                                                      M.get_trait_method (|
                                                        "core::convert::From",
                                                        F,
                                                        [ Ty.path "u64" ],
                                                        "from",
                                                        []
                                                      |),
                                                      [ M.read (| cond |) ]
                                                    |)
                                                  |)
                                                ]
                                              |);
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "ff::Field",
                                                  F,
                                                  [],
                                                  "zero",
                                                  []
                                                |),
                                                []
                                              |)
                                            ]
                                          |)
                                        ]
                                      |)
                                    ]
                                  |)
                                |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ0_0 :=
                                        M.SubPointer.get_struct_tuple_field (|
                                          γ,
                                          "core::ops::control_flow::ControlFlow::Break",
                                          0
                                        |) in
                                      let residual := M.copy (| γ0_0 |) in
                                      M.alloc (|
                                        M.never_to_any (|
                                          M.read (|
                                            M.return_ (|
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "core::ops::try_trait::FromResidual",
                                                  Ty.apply
                                                    (Ty.path "core::result::Result")
                                                    [
                                                      Ty.tuple [];
                                                      Ty.path "halo2_proofs::plonk::error::Error"
                                                    ],
                                                  [
                                                    Ty.apply
                                                      (Ty.path "core::result::Result")
                                                      [
                                                        Ty.path "core::convert::Infallible";
                                                        Ty.path "halo2_proofs::plonk::error::Error"
                                                      ]
                                                  ],
                                                  "from_residual",
                                                  []
                                                |),
                                                [ M.read (| residual |) ]
                                              |)
                                            |)
                                          |)
                                        |)
                                      |)));
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ0_0 :=
                                        M.SubPointer.get_struct_tuple_field (|
                                          γ,
                                          "core::ops::control_flow::ControlFlow::Continue",
                                          0
                                        |) in
                                      let val := M.copy (| γ0_0 |) in
                                      val))
                                ]
                              |) in
                            let _ :=
                              M.match_operator (|
                                M.alloc (|
                                  M.call_closure (|
                                    M.get_trait_method (|
                                      "core::ops::try_trait::Try",
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        [ Ty.tuple []; Ty.path "halo2_proofs::plonk::error::Error"
                                        ],
                                      [],
                                      "branch",
                                      []
                                    |),
                                    [
                                      M.call_closure (|
                                        M.get_associated_function (|
                                          Ty.apply
                                            (Ty.path
                                              "delphinus_zkwasm::circuits::etable::allocator::AllocatedMemoryTableLookupReadCell")
                                            [ F ],
                                          "assign",
                                          []
                                        |),
                                        [
                                          M.SubPointer.get_struct_record_field (|
                                            M.read (| self |),
                                            "delphinus_zkwasm::foreign::require_helper::etable_op_configure::ETableRequireHelperTableConfig",
                                            "memory_table_lookup_read_stack"
                                          |);
                                          M.read (| ctx |);
                                          M.read (|
                                            M.SubPointer.get_struct_record_field (|
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "core::ops::index::Index",
                                                  Ty.apply
                                                    (Ty.path "alloc::vec::Vec")
                                                    [
                                                      Ty.path
                                                        "delphinus_zkwasm::circuits::utils::table_entry::MemoryRWEntry";
                                                      Ty.path "alloc::alloc::Global"
                                                    ],
                                                  [ Ty.path "usize" ],
                                                  "index",
                                                  []
                                                |),
                                                [
                                                  M.SubPointer.get_struct_record_field (|
                                                    M.read (| entry |),
                                                    "delphinus_zkwasm::circuits::utils::table_entry::EventTableEntryWithMemoryInfo",
                                                    "memory_rw_entires"
                                                  |);
                                                  Value.Integer 0
                                                ]
                                              |),
                                              "delphinus_zkwasm::circuits::utils::table_entry::MemoryRWEntry",
                                              "start_eid"
                                            |)
                                          |);
                                          M.read (|
                                            M.SubPointer.get_struct_record_field (|
                                              M.read (|
                                                M.SubPointer.get_struct_record_field (|
                                                  M.read (| step |),
                                                  "delphinus_zkwasm::circuits::utils::step_status::StepStatus",
                                                  "current"
                                                |)
                                              |),
                                              "delphinus_zkwasm::circuits::utils::step_status::Status",
                                              "eid"
                                            |)
                                          |);
                                          M.read (|
                                            M.SubPointer.get_struct_record_field (|
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "core::ops::index::Index",
                                                  Ty.apply
                                                    (Ty.path "alloc::vec::Vec")
                                                    [
                                                      Ty.path
                                                        "delphinus_zkwasm::circuits::utils::table_entry::MemoryRWEntry";
                                                      Ty.path "alloc::alloc::Global"
                                                    ],
                                                  [ Ty.path "usize" ],
                                                  "index",
                                                  []
                                                |),
                                                [
                                                  M.SubPointer.get_struct_record_field (|
                                                    M.read (| entry |),
                                                    "delphinus_zkwasm::circuits::utils::table_entry::EventTableEntryWithMemoryInfo",
                                                    "memory_rw_entires"
                                                  |);
                                                  Value.Integer 0
                                                ]
                                              |),
                                              "delphinus_zkwasm::circuits::utils::table_entry::MemoryRWEntry",
                                              "end_eid"
                                            |)
                                          |);
                                          BinOp.Panic.add (|
                                            Integer.U32,
                                            M.read (|
                                              M.SubPointer.get_struct_record_field (|
                                                M.read (|
                                                  M.SubPointer.get_struct_record_field (|
                                                    M.read (| step |),
                                                    "delphinus_zkwasm::circuits::utils::step_status::StepStatus",
                                                    "current"
                                                  |)
                                                |),
                                                "delphinus_zkwasm::circuits::utils::step_status::Status",
                                                "sp"
                                              |)
                                            |),
                                            Value.Integer 1
                                          |);
                                          Value.StructTuple "specs::mtable::LocationType::Stack" [];
                                          Value.Bool true;
                                          M.read (| cond |)
                                        ]
                                      |)
                                    ]
                                  |)
                                |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ0_0 :=
                                        M.SubPointer.get_struct_tuple_field (|
                                          γ,
                                          "core::ops::control_flow::ControlFlow::Break",
                                          0
                                        |) in
                                      let residual := M.copy (| γ0_0 |) in
                                      M.alloc (|
                                        M.never_to_any (|
                                          M.read (|
                                            M.return_ (|
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "core::ops::try_trait::FromResidual",
                                                  Ty.apply
                                                    (Ty.path "core::result::Result")
                                                    [
                                                      Ty.tuple [];
                                                      Ty.path "halo2_proofs::plonk::error::Error"
                                                    ],
                                                  [
                                                    Ty.apply
                                                      (Ty.path "core::result::Result")
                                                      [
                                                        Ty.path "core::convert::Infallible";
                                                        Ty.path "halo2_proofs::plonk::error::Error"
                                                      ]
                                                  ],
                                                  "from_residual",
                                                  []
                                                |),
                                                [ M.read (| residual |) ]
                                              |)
                                            |)
                                          |)
                                        |)
                                      |)));
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ0_0 :=
                                        M.SubPointer.get_struct_tuple_field (|
                                          γ,
                                          "core::ops::control_flow::ControlFlow::Continue",
                                          0
                                        |) in
                                      let val := M.copy (| γ0_0 |) in
                                      val))
                                ]
                              |) in
                            M.alloc (|
                              Value.StructTuple "core::result::Result::Ok" [ Value.Tuple [] ]
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (M.alloc (|
                              M.never_to_any (|
                                M.call_closure (|
                                  M.get_function (| "core::panicking::panic", [] |),
                                  [
                                    M.read (|
                                      Value.String "internal error: entered unreachable code"
                                    |)
                                  ]
                                |)
                              |)
                            |)))
                      ]
                    |)
                  |)))
              |)))
          | _, _ => M.impossible
          end.
        
        (*
            fn sp_diff(&self, _meta: &mut VirtualCells<'_, F>) -> Option<Expression<F>> {
                Some(constant_from!(1))
            }
        *)
        Definition sp_diff (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self F in
          match τ, α with
          | [], [ self; _meta ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              let _meta := M.alloc (| _meta |) in
              Value.StructTuple
                "core::option::Option::Some"
                [
                  Value.StructTuple
                    "halo2_proofs::plonk::circuit::Expression::Constant"
                    [
                      M.call_closure (|
                        M.get_trait_method (|
                          "core::convert::From",
                          F,
                          [ Ty.path "u64" ],
                          "from",
                          []
                        |),
                        [ M.read (| M.use (M.alloc (| Value.Integer 1 |)) |) ]
                      |)
                    ]
                ]))
          | _, _ => M.impossible
          end.
        
        Axiom Implements :
          forall (F : Ty.t),
          M.IsTraitInstance
            "delphinus_zkwasm::circuits::etable::EventTableOpcodeConfig"
            (Self F)
            (* Trait polymorphic types *) [ (* F *) F ]
            (* Instance *)
            [
              ("opcode", InstanceField.Method (opcode F));
              ("assign", InstanceField.Method (assign F));
              ("sp_diff", InstanceField.Method (sp_diff F))
            ].
      End Impl_delphinus_zkwasm_circuits_etable_EventTableOpcodeConfig_where_pairing_bn256_arithmetic_fields_FieldExt_F_F_for_delphinus_zkwasm_foreign_require_helper_etable_op_configure_ETableRequireHelperTableConfig_F.
    End etable_op_configure.
  End require_helper.
End foreign.
