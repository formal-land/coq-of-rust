(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module foreign.
  Module require_helper.
    (* StructTuple
      {
        name := "Context";
        ty_params := [];
        fields := [];
      } *)
    
    Module Impl_delphinus_zkwasm_runtime_host_ForeignContext_for_delphinus_zkwasm_foreign_require_helper_Context.
      Definition Self : Ty.t := Ty.path "delphinus_zkwasm::foreign::require_helper::Context".
      
      Axiom Implements :
        M.IsTraitInstance
          "delphinus_zkwasm::runtime::host::ForeignContext"
          Self
          (* Trait polymorphic types *) []
          (* Instance *) [].
    End Impl_delphinus_zkwasm_runtime_host_ForeignContext_for_delphinus_zkwasm_foreign_require_helper_Context.
    
    (*
    pub fn register_require_foreign(env: &mut HostEnv) {
        let require = Rc::new(
            |_observer: &Observer, _context: &mut dyn ForeignContext, args: wasmi::RuntimeArgs| {
                let cond: u32 = args.nth(0);
    
                if cond == 0 {
                    panic!(
                        "require is not satisfied, which is a \
                    false assertion in the wasm code. Please check \
                    the logic of your image or input."
                    )
                }
    
                None
            },
        );
    
        env.internal_env
            .register_plugin("require plugin", HostPlugin::Require, Box::new(Context));
    
        env.internal_env.register_function(
            "require",
            specs::host_function::Signature {
                params: vec![ValueType::I32],
                return_type: None,
            },
            HostPlugin::Require,
            0,
            require,
        );
    }
    *)
    Definition register_require_foreign (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [ env ] =>
        ltac:(M.monadic
          (let env := M.alloc (| env |) in
          M.read (|
            let require :=
              M.alloc (|
                M.call_closure (|
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path "alloc::rc::Rc")
                      [
                        Ty.function
                          [
                            Ty.tuple
                              [
                                Ty.apply
                                  (Ty.path "&")
                                  [ Ty.path "delphinus_zkwasm::runtime::monitor::observer::Observer"
                                  ];
                                Ty.apply
                                  (Ty.path "&mut")
                                  [
                                    Ty.dyn
                                      [
                                        ("delphinus_zkwasm::runtime::host::ForeignContext::Trait",
                                          [])
                                      ]
                                  ];
                                Ty.path "wasmi::host::RuntimeArgs"
                              ]
                          ]
                          (Ty.apply
                            (Ty.path "core::option::Option")
                            [ Ty.path "wasmi_core::value::Value" ]);
                        Ty.path "alloc::alloc::Global"
                      ],
                    "new",
                    []
                  |),
                  [
                    M.closure
                      (fun γ =>
                        ltac:(M.monadic
                          match γ with
                          | [ α0; α1; α2 ] =>
                            M.match_operator (|
                              M.alloc (| α0 |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let _observer := M.copy (| γ |) in
                                    M.match_operator (|
                                      M.alloc (| α1 |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let _context := M.copy (| γ |) in
                                            M.match_operator (|
                                              M.alloc (| α2 |),
                                              [
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (let args := M.copy (| γ |) in
                                                    M.read (|
                                                      let cond :=
                                                        M.alloc (|
                                                          M.call_closure (|
                                                            M.get_associated_function (|
                                                              Ty.path "wasmi::host::RuntimeArgs",
                                                              "nth",
                                                              [ Ty.path "u32" ]
                                                            |),
                                                            [ args; Value.Integer 0 ]
                                                          |)
                                                        |) in
                                                      let _ :=
                                                        M.match_operator (|
                                                          M.alloc (| Value.Tuple [] |),
                                                          [
                                                            fun γ =>
                                                              ltac:(M.monadic
                                                                (let γ :=
                                                                  M.use
                                                                    (M.alloc (|
                                                                      BinOp.Pure.eq
                                                                        (M.read (| cond |))
                                                                        (Value.Integer 0)
                                                                    |)) in
                                                                let _ :=
                                                                  M.is_constant_or_break_match (|
                                                                    M.read (| γ |),
                                                                    Value.Bool true
                                                                  |) in
                                                                M.alloc (|
                                                                  M.never_to_any (|
                                                                    M.call_closure (|
                                                                      M.get_function (|
                                                                        "core::panicking::panic_fmt",
                                                                        []
                                                                      |),
                                                                      [
                                                                        M.call_closure (|
                                                                          M.get_associated_function (|
                                                                            Ty.path
                                                                              "core::fmt::Arguments",
                                                                            "new_const",
                                                                            []
                                                                          |),
                                                                          [
                                                                            (* Unsize *)
                                                                            M.pointer_coercion
                                                                              (M.alloc (|
                                                                                Value.Array
                                                                                  [
                                                                                    M.read (|
                                                                                      Value.String
                                                                                        "require is not satisfied, which is a false assertion in the wasm code. Please check the logic of your image or input."
                                                                                    |)
                                                                                  ]
                                                                              |))
                                                                          ]
                                                                        |)
                                                                      ]
                                                                    |)
                                                                  |)
                                                                |)));
                                                            fun γ =>
                                                              ltac:(M.monadic
                                                                (M.alloc (| Value.Tuple [] |)))
                                                          ]
                                                        |) in
                                                      M.alloc (|
                                                        Value.StructTuple
                                                          "core::option::Option::None"
                                                          []
                                                      |)
                                                    |)))
                                              ]
                                            |)))
                                      ]
                                    |)))
                              ]
                            |)
                          | _ => M.impossible (||)
                          end))
                  ]
                |)
              |) in
            let _ :=
              M.alloc (|
                M.call_closure (|
                  M.get_associated_function (|
                    Ty.path
                      "delphinus_zkwasm::runtime::host::internal_circuit_plugin::InternalCircuitEnv",
                    "register_plugin",
                    []
                  |),
                  [
                    M.SubPointer.get_struct_record_field (|
                      M.read (| env |),
                      "delphinus_zkwasm::runtime::host::host_env::HostEnv",
                      "internal_env"
                    |);
                    M.read (| Value.String "require plugin" |);
                    Value.StructTuple "specs::host_function::HostPlugin::Require" [];
                    (* Unsize *)
                    M.pointer_coercion
                      (M.call_closure (|
                        M.get_associated_function (|
                          Ty.apply
                            (Ty.path "alloc::boxed::Box")
                            [
                              Ty.path "delphinus_zkwasm::foreign::require_helper::Context";
                              Ty.path "alloc::alloc::Global"
                            ],
                          "new",
                          []
                        |),
                        [ Value.StructTuple "delphinus_zkwasm::foreign::require_helper::Context" []
                        ]
                      |))
                  ]
                |)
              |) in
            let _ :=
              M.alloc (|
                M.call_closure (|
                  M.get_associated_function (|
                    Ty.path
                      "delphinus_zkwasm::runtime::host::internal_circuit_plugin::InternalCircuitEnv",
                    "register_function",
                    []
                  |),
                  [
                    M.SubPointer.get_struct_record_field (|
                      M.read (| env |),
                      "delphinus_zkwasm::runtime::host::host_env::HostEnv",
                      "internal_env"
                    |);
                    M.read (| Value.String "require" |);
                    Value.StructRecord
                      "specs::host_function::Signature"
                      [
                        ("params",
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.apply (Ty.path "slice") [ Ty.path "specs::types::ValueType" ],
                              "into_vec",
                              [ Ty.path "alloc::alloc::Global" ]
                            |),
                            [
                              (* Unsize *)
                              M.pointer_coercion
                                (M.read (|
                                  M.call_closure (|
                                    M.get_associated_function (|
                                      Ty.apply
                                        (Ty.path "alloc::boxed::Box")
                                        [
                                          Ty.apply
                                            (Ty.path "array")
                                            [ Ty.path "specs::types::ValueType" ];
                                          Ty.path "alloc::alloc::Global"
                                        ],
                                      "new",
                                      []
                                    |),
                                    [
                                      M.alloc (|
                                        Value.Array
                                          [ Value.StructTuple "specs::types::ValueType::I32" [] ]
                                      |)
                                    ]
                                  |)
                                |))
                            ]
                          |));
                        ("return_type", Value.StructTuple "core::option::Option::None" [])
                      ];
                    Value.StructTuple "specs::host_function::HostPlugin::Require" [];
                    Value.Integer 0;
                    (* Unsize *) M.pointer_coercion (M.read (| require |))
                  ]
                |)
              |) in
            M.alloc (| Value.Tuple [] |)
          |)))
      | _, _ => M.impossible
      end.
  End require_helper.
End foreign.
