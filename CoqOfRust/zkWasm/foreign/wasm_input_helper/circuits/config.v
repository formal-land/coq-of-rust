(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module foreign.
  Module wasm_input_helper.
    Module circuits.
      Module config.
        Module Impl_delphinus_zkwasm_foreign_wasm_input_helper_circuits_WasmInputHelperTableConfig_F.
          Definition Self (F : Ty.t) : Ty.t :=
            Ty.apply
              (Ty.path
                "delphinus_zkwasm::foreign::wasm_input_helper::circuits::WasmInputHelperTableConfig")
              [ F ].
          
          (*
              pub fn configure(meta: &mut ConstraintSystem<F>, from_zero_index: Column<Fixed>) -> Self {
                  let input = meta.instance_column();
                  meta.enable_equality(input);
          
                  WasmInputHelperTableConfig {
                      from_zero_index,
                      input,
                      _mark: std::marker::PhantomData,
                  }
              }
          *)
          Definition configure (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
            let Self : Ty.t := Self F in
            match τ, α with
            | [], [ meta; from_zero_index ] =>
              ltac:(M.monadic
                (let meta := M.alloc (| meta |) in
                let from_zero_index := M.alloc (| from_zero_index |) in
                M.read (|
                  let input :=
                    M.alloc (|
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.apply (Ty.path "halo2_proofs::plonk::circuit::ConstraintSystem") [ F ],
                          "instance_column",
                          []
                        |),
                        [ M.read (| meta |) ]
                      |)
                    |) in
                  let _ :=
                    M.alloc (|
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.apply (Ty.path "halo2_proofs::plonk::circuit::ConstraintSystem") [ F ],
                          "enable_equality",
                          [
                            Ty.apply
                              (Ty.path "halo2_proofs::plonk::circuit::Column")
                              [ Ty.path "halo2_proofs::plonk::circuit::Instance" ]
                          ]
                        |),
                        [ M.read (| meta |); M.read (| input |) ]
                      |)
                    |) in
                  M.alloc (|
                    Value.StructRecord
                      "delphinus_zkwasm::foreign::wasm_input_helper::circuits::WasmInputHelperTableConfig"
                      [
                        ("from_zero_index", M.read (| from_zero_index |));
                        ("input", M.read (| input |));
                        ("_mark", Value.StructTuple "core::marker::PhantomData" [])
                      ]
                  |)
                |)))
            | _, _ => M.impossible
            end.
          
          Axiom AssociatedFunction_configure :
            forall (F : Ty.t),
            M.IsAssociatedFunction (Self F) "configure" (configure F).
        End Impl_delphinus_zkwasm_foreign_wasm_input_helper_circuits_WasmInputHelperTableConfig_F.
        
        Module Impl_delphinus_zkwasm_foreign_ForeignTableConfig_where_pairing_bn256_arithmetic_fields_FieldExt_F_F_for_delphinus_zkwasm_foreign_wasm_input_helper_circuits_WasmInputHelperTableConfig_F.
          Definition Self (F : Ty.t) : Ty.t :=
            Ty.apply
              (Ty.path
                "delphinus_zkwasm::foreign::wasm_input_helper::circuits::WasmInputHelperTableConfig")
              [ F ].
          
          (*
              fn configure_in_table(
                  &self,
                  meta: &mut ConstraintSystem<F>,
                  key: &'static str,
                  expr: &dyn Fn(&mut VirtualCells<'_, F>) -> Vec<Expression<F>>,
              ) {
                  meta.lookup_any(key, |meta| {
                      let mut exprs = expr(meta);
          
                      vec![
                          (exprs.remove(0), fixed_curr!(meta, self.from_zero_index)),
                          (exprs.remove(0), instance_prev!(meta, self.input)),
                      ]
                  });
              }
          *)
          Definition configure_in_table (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
            let Self : Ty.t := Self F in
            match τ, α with
            | [], [ self; meta; key; expr ] =>
              ltac:(M.monadic
                (let self := M.alloc (| self |) in
                let meta := M.alloc (| meta |) in
                let key := M.alloc (| key |) in
                let expr := M.alloc (| expr |) in
                M.read (|
                  let _ :=
                    M.alloc (|
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.apply (Ty.path "halo2_proofs::plonk::circuit::ConstraintSystem") [ F ],
                          "lookup_any",
                          [
                            Ty.function
                              [
                                Ty.tuple
                                  [
                                    Ty.apply
                                      (Ty.path "&mut")
                                      [
                                        Ty.apply
                                          (Ty.path "halo2_proofs::plonk::circuit::VirtualCells")
                                          [ F ]
                                      ]
                                  ]
                              ]
                              (Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                [
                                  Ty.tuple
                                    [
                                      Ty.apply
                                        (Ty.path "halo2_proofs::plonk::circuit::Expression")
                                        [ F ];
                                      Ty.apply
                                        (Ty.path "halo2_proofs::plonk::circuit::Expression")
                                        [ F ]
                                    ];
                                  Ty.path "alloc::alloc::Global"
                                ])
                          ]
                        |),
                        [
                          M.read (| meta |);
                          M.read (| key |);
                          M.closure
                            (fun γ =>
                              ltac:(M.monadic
                                match γ with
                                | [ α0 ] =>
                                  M.match_operator (|
                                    M.alloc (| α0 |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let meta := M.copy (| γ |) in
                                          M.read (|
                                            let exprs :=
                                              M.alloc (|
                                                M.call_closure (|
                                                  M.get_trait_method (|
                                                    "core::ops::function::Fn",
                                                    Ty.dyn
                                                      [
                                                        ("existential predicate with variables",
                                                          []);
                                                        ("existential predicate with variables", [])
                                                      ],
                                                    [
                                                      Ty.tuple
                                                        [
                                                          Ty.apply
                                                            (Ty.path "&mut")
                                                            [
                                                              Ty.apply
                                                                (Ty.path
                                                                  "halo2_proofs::plonk::circuit::VirtualCells")
                                                                [ F ]
                                                            ]
                                                        ]
                                                    ],
                                                    "call",
                                                    []
                                                  |),
                                                  [
                                                    M.read (| expr |);
                                                    Value.Tuple [ M.read (| meta |) ]
                                                  ]
                                                |)
                                              |) in
                                            M.alloc (|
                                              M.call_closure (|
                                                M.get_associated_function (|
                                                  Ty.apply
                                                    (Ty.path "slice")
                                                    [
                                                      Ty.tuple
                                                        [
                                                          Ty.apply
                                                            (Ty.path
                                                              "halo2_proofs::plonk::circuit::Expression")
                                                            [ F ];
                                                          Ty.apply
                                                            (Ty.path
                                                              "halo2_proofs::plonk::circuit::Expression")
                                                            [ F ]
                                                        ]
                                                    ],
                                                  "into_vec",
                                                  [ Ty.path "alloc::alloc::Global" ]
                                                |),
                                                [
                                                  (* Unsize *)
                                                  M.pointer_coercion
                                                    (M.read (|
                                                      M.call_closure (|
                                                        M.get_associated_function (|
                                                          Ty.apply
                                                            (Ty.path "alloc::boxed::Box")
                                                            [
                                                              Ty.apply
                                                                (Ty.path "array")
                                                                [
                                                                  Ty.tuple
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "halo2_proofs::plonk::circuit::Expression")
                                                                        [ F ];
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "halo2_proofs::plonk::circuit::Expression")
                                                                        [ F ]
                                                                    ]
                                                                ];
                                                              Ty.path "alloc::alloc::Global"
                                                            ],
                                                          "new",
                                                          []
                                                        |),
                                                        [
                                                          M.alloc (|
                                                            Value.Array
                                                              [
                                                                Value.Tuple
                                                                  [
                                                                    M.call_closure (|
                                                                      M.get_associated_function (|
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "alloc::vec::Vec")
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "halo2_proofs::plonk::circuit::Expression")
                                                                              [ F ];
                                                                            Ty.path
                                                                              "alloc::alloc::Global"
                                                                          ],
                                                                        "remove",
                                                                        []
                                                                      |),
                                                                      [ exprs; Value.Integer 0 ]
                                                                    |);
                                                                    M.call_closure (|
                                                                      M.get_associated_function (|
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "halo2_proofs::plonk::circuit::VirtualCells")
                                                                          [ F ],
                                                                        "query_fixed",
                                                                        []
                                                                      |),
                                                                      [
                                                                        M.read (| meta |);
                                                                        M.read (|
                                                                          M.SubPointer.get_struct_record_field (|
                                                                            M.read (| self |),
                                                                            "delphinus_zkwasm::foreign::wasm_input_helper::circuits::WasmInputHelperTableConfig",
                                                                            "from_zero_index"
                                                                          |)
                                                                        |);
                                                                        M.call_closure (|
                                                                          M.get_associated_function (|
                                                                            Ty.path
                                                                              "halo2_proofs::poly::Rotation",
                                                                            "cur",
                                                                            []
                                                                          |),
                                                                          []
                                                                        |)
                                                                      ]
                                                                    |)
                                                                  ];
                                                                Value.Tuple
                                                                  [
                                                                    M.call_closure (|
                                                                      M.get_associated_function (|
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "alloc::vec::Vec")
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "halo2_proofs::plonk::circuit::Expression")
                                                                              [ F ];
                                                                            Ty.path
                                                                              "alloc::alloc::Global"
                                                                          ],
                                                                        "remove",
                                                                        []
                                                                      |),
                                                                      [ exprs; Value.Integer 0 ]
                                                                    |);
                                                                    M.call_closure (|
                                                                      M.get_associated_function (|
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "halo2_proofs::plonk::circuit::VirtualCells")
                                                                          [ F ],
                                                                        "query_instance",
                                                                        []
                                                                      |),
                                                                      [
                                                                        M.read (| meta |);
                                                                        M.read (|
                                                                          M.SubPointer.get_struct_record_field (|
                                                                            M.read (| self |),
                                                                            "delphinus_zkwasm::foreign::wasm_input_helper::circuits::WasmInputHelperTableConfig",
                                                                            "input"
                                                                          |)
                                                                        |);
                                                                        M.call_closure (|
                                                                          M.get_associated_function (|
                                                                            Ty.path
                                                                              "halo2_proofs::poly::Rotation",
                                                                            "prev",
                                                                            []
                                                                          |),
                                                                          []
                                                                        |)
                                                                      ]
                                                                    |)
                                                                  ]
                                                              ]
                                                          |)
                                                        ]
                                                      |)
                                                    |))
                                                ]
                                              |)
                                            |)
                                          |)))
                                    ]
                                  |)
                                | _ => M.impossible (||)
                                end))
                        ]
                      |)
                    |) in
                  M.alloc (| Value.Tuple [] |)
                |)))
            | _, _ => M.impossible
            end.
          
          Axiom Implements :
            forall (F : Ty.t),
            M.IsTraitInstance
              "delphinus_zkwasm::foreign::ForeignTableConfig"
              (Self F)
              (* Trait polymorphic types *) [ (* F *) F ]
              (* Instance *)
              [ ("configure_in_table", InstanceField.Method (configure_in_table F)) ].
        End Impl_delphinus_zkwasm_foreign_ForeignTableConfig_where_pairing_bn256_arithmetic_fields_FieldExt_F_F_for_delphinus_zkwasm_foreign_wasm_input_helper_circuits_WasmInputHelperTableConfig_F.
      End config.
    End circuits.
  End wasm_input_helper.
End foreign.
