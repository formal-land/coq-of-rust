(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module foreign.
  Module wasm_input_helper.
    Module etable_op_configure.
      (* StructRecord
        {
          name := "ETableWasmInputHelperTableConfig";
          ty_params := [ "F" ];
          fields :=
            [
              ("plugin_index", Ty.path "usize");
              ("is_wasm_input_op",
                Ty.apply (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedBitCell") [ F ]);
              ("is_wasm_output_op",
                Ty.apply (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedBitCell") [ F ]);
              ("is_public",
                Ty.apply (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedBitCell") [ F ]);
              ("value",
                Ty.apply (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedU64Cell") [ F ]);
              ("enable_input_table_lookup",
                Ty.apply (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedBitCell") [ F ]);
              ("public_input_index_for_lookup",
                Ty.apply
                  (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedUnlimitedCell")
                  [ F ]);
              ("value_for_lookup",
                Ty.apply
                  (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedUnlimitedCell")
                  [ F ]);
              ("lookup_read_stack",
                Ty.apply
                  (Ty.path
                    "delphinus_zkwasm::circuits::etable::allocator::AllocatedMemoryTableLookupReadCell")
                  [ F ]);
              ("lookup_write_stack",
                Ty.apply
                  (Ty.path
                    "delphinus_zkwasm::circuits::etable::allocator::AllocatedMemoryTableLookupWriteCell")
                  [ F ])
            ];
        } *)
      
      (* StructRecord
        {
          name := "ETableWasmInputHelperTableConfigBuilder";
          ty_params := [];
          fields := [ ("index", Ty.path "usize") ];
        } *)
      
      Module Impl_delphinus_zkwasm_foreign_InternalHostPluginBuilder_for_delphinus_zkwasm_foreign_wasm_input_helper_etable_op_configure_ETableWasmInputHelperTableConfigBuilder.
        Definition Self : Ty.t :=
          Ty.path
            "delphinus_zkwasm::foreign::wasm_input_helper::etable_op_configure::ETableWasmInputHelperTableConfigBuilder".
        
        (*
            fn new(index: usize) -> Self {
                Self { index }
            }
        *)
        Definition new (τ : list Ty.t) (α : list Value.t) : M :=
          match τ, α with
          | [], [ index ] =>
            ltac:(M.monadic
              (let index := M.alloc (| index |) in
              Value.StructRecord
                "delphinus_zkwasm::foreign::wasm_input_helper::etable_op_configure::ETableWasmInputHelperTableConfigBuilder"
                [ ("index", M.read (| index |)) ]))
          | _, _ => M.impossible
          end.
        
        Axiom Implements :
          M.IsTraitInstance
            "delphinus_zkwasm::foreign::InternalHostPluginBuilder"
            Self
            (* Trait polymorphic types *) []
            (* Instance *) [ ("new", InstanceField.Method new) ].
      End Impl_delphinus_zkwasm_foreign_InternalHostPluginBuilder_for_delphinus_zkwasm_foreign_wasm_input_helper_etable_op_configure_ETableWasmInputHelperTableConfigBuilder.
      
      Module Impl_delphinus_zkwasm_foreign_EventTableForeignCallConfigBuilder_where_pairing_bn256_arithmetic_fields_FieldExt_F_F_for_delphinus_zkwasm_foreign_wasm_input_helper_etable_op_configure_ETableWasmInputHelperTableConfigBuilder.
        Definition Self (F : Ty.t) : Ty.t :=
          Ty.path
            "delphinus_zkwasm::foreign::wasm_input_helper::etable_op_configure::ETableWasmInputHelperTableConfigBuilder".
        
        (*
            fn configure(
                self,
                common_config: &EventTableCommonConfig<F>,
                allocator: &mut EventTableCellAllocator<F>,
                constraint_builder: &mut ConstraintBuilder<F>,
                lookup_cells: &mut (impl Iterator<Item = AllocatedUnlimitedCell<F>> + Clone),
            ) -> Box<dyn EventTableOpcodeConfig<F>> {
                let eid = common_config.eid_cell;
                let sp = common_config.sp_cell;
                let public_input_index = common_config.input_index_cell;
        
                let is_wasm_input_op: AllocatedBitCell<F> = allocator.alloc_bit_cell();
                let is_wasm_output_op: AllocatedBitCell<F> = allocator.alloc_bit_cell();
        
                let is_public = allocator.alloc_bit_cell();
                let value = allocator.alloc_u64_cell();
        
                let enable_input_table_lookup = allocator.alloc_bit_cell();
                let public_input_index_for_lookup = lookup_cells.next().unwrap();
                let value_for_lookup = lookup_cells.next().unwrap();
        
                let lookup_read_stack = allocator.alloc_memory_table_lookup_read_cell(
                    "wasm input stack read",
                    constraint_builder,
                    eid,
                    move |____| constant_from!(LocationType::Stack as u64),
                    move |meta| sp.expr(meta) + constant_from!(1),
                    move |meta| is_wasm_input_op.expr(meta),
                    move |meta| {
                        is_public.expr(meta) * is_wasm_input_op.expr(meta)
                            + value.u64_cell.expr(meta) * is_wasm_output_op.expr(meta)
                    },
                    move |____| constant_from!(1),
                );
                let lookup_write_stack = allocator.alloc_memory_table_lookup_write_cell(
                    "wasm input stack write",
                    constraint_builder,
                    eid,
                    move |____| constant_from!(LocationType::Stack as u64),
                    move |meta| sp.expr(meta) + constant_from!(1),
                    move |____| constant_from!(0),
                    move |meta| value.u64_cell.expr(meta),
                    move |meta| is_wasm_input_op.expr(meta),
                );
        
                constraint_builder.push(
                    "wasm_input_helper: sel",
                    Box::new(move |meta| {
                        vec![is_wasm_input_op.expr(meta) + is_wasm_output_op.expr(meta) - constant_from!(1)]
                    }),
                );
        
                constraint_builder.push(
                    "enable lookup bit",
                    Box::new(move |meta| {
                        vec![
                            enable_input_table_lookup.expr(meta)
                                - (is_public.expr(meta) + is_wasm_output_op.expr(meta)),
                        ]
                    }),
                );
        
                constraint_builder.push(
                    "wasm input lookup aux",
                    Box::new(move |meta| {
                        vec![
                            enable_input_table_lookup.expr(meta) * public_input_index.expr(meta)
                                - public_input_index_for_lookup.expr(meta),
                            enable_input_table_lookup.expr(meta) * value.expr(meta)
                                - value_for_lookup.expr(meta),
                        ]
                    }),
                );
        
                constraint_builder.lookup(
                    WASM_INPUT_FOREIGN_TABLE_KEY,
                    "lookup input table",
                    Box::new(move |meta| {
                        vec![
                            public_input_index_for_lookup.expr(meta),
                            value_for_lookup.expr(meta),
                        ]
                    }),
                );
        
                Box::new(ETableWasmInputHelperTableConfig {
                    plugin_index: self.index,
                    is_wasm_input_op,
                    is_wasm_output_op,
                    is_public,
                    value,
                    enable_input_table_lookup,
                    public_input_index_for_lookup,
                    value_for_lookup,
                    lookup_read_stack,
                    lookup_write_stack,
                })
            }
        *)
        Definition configure (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self F in
          match τ, α with
          | [ impl_Iterator_Item___AllocatedUnlimitedCell_F____plus__Clone ],
              [ self; common_config; allocator; constraint_builder; lookup_cells ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              let common_config := M.alloc (| common_config |) in
              let allocator := M.alloc (| allocator |) in
              let constraint_builder := M.alloc (| constraint_builder |) in
              let lookup_cells := M.alloc (| lookup_cells |) in
              (* Unsize *)
              M.pointer_coercion
                (M.read (|
                  let eid :=
                    M.copy (|
                      M.SubPointer.get_struct_record_field (|
                        M.read (| common_config |),
                        "delphinus_zkwasm::circuits::etable::EventTableCommonConfig",
                        "eid_cell"
                      |)
                    |) in
                  let sp :=
                    M.copy (|
                      M.SubPointer.get_struct_record_field (|
                        M.read (| common_config |),
                        "delphinus_zkwasm::circuits::etable::EventTableCommonConfig",
                        "sp_cell"
                      |)
                    |) in
                  let public_input_index :=
                    M.copy (|
                      M.SubPointer.get_struct_record_field (|
                        M.read (| common_config |),
                        "delphinus_zkwasm::circuits::etable::EventTableCommonConfig",
                        "input_index_cell"
                      |)
                    |) in
                  let is_wasm_input_op :=
                    M.alloc (|
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.apply
                            (Ty.path
                              "delphinus_zkwasm::circuits::etable::allocator::EventTableCellAllocator")
                            [ F ],
                          "alloc_bit_cell",
                          []
                        |),
                        [ M.read (| allocator |) ]
                      |)
                    |) in
                  let is_wasm_output_op :=
                    M.alloc (|
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.apply
                            (Ty.path
                              "delphinus_zkwasm::circuits::etable::allocator::EventTableCellAllocator")
                            [ F ],
                          "alloc_bit_cell",
                          []
                        |),
                        [ M.read (| allocator |) ]
                      |)
                    |) in
                  let is_public :=
                    M.alloc (|
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.apply
                            (Ty.path
                              "delphinus_zkwasm::circuits::etable::allocator::EventTableCellAllocator")
                            [ F ],
                          "alloc_bit_cell",
                          []
                        |),
                        [ M.read (| allocator |) ]
                      |)
                    |) in
                  let value :=
                    M.alloc (|
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.apply
                            (Ty.path
                              "delphinus_zkwasm::circuits::etable::allocator::EventTableCellAllocator")
                            [ F ],
                          "alloc_u64_cell",
                          []
                        |),
                        [ M.read (| allocator |) ]
                      |)
                    |) in
                  let enable_input_table_lookup :=
                    M.alloc (|
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.apply
                            (Ty.path
                              "delphinus_zkwasm::circuits::etable::allocator::EventTableCellAllocator")
                            [ F ],
                          "alloc_bit_cell",
                          []
                        |),
                        [ M.read (| allocator |) ]
                      |)
                    |) in
                  let public_input_index_for_lookup :=
                    M.alloc (|
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.apply
                            (Ty.path "core::option::Option")
                            [
                              Ty.apply
                                (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedUnlimitedCell")
                                [ F ]
                            ],
                          "unwrap",
                          []
                        |),
                        [
                          M.call_closure (|
                            M.get_trait_method (|
                              "core::iter::traits::iterator::Iterator",
                              impl_Iterator_Item___AllocatedUnlimitedCell_F____plus__Clone,
                              [],
                              "next",
                              []
                            |),
                            [ M.read (| lookup_cells |) ]
                          |)
                        ]
                      |)
                    |) in
                  let value_for_lookup :=
                    M.alloc (|
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.apply
                            (Ty.path "core::option::Option")
                            [
                              Ty.apply
                                (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedUnlimitedCell")
                                [ F ]
                            ],
                          "unwrap",
                          []
                        |),
                        [
                          M.call_closure (|
                            M.get_trait_method (|
                              "core::iter::traits::iterator::Iterator",
                              impl_Iterator_Item___AllocatedUnlimitedCell_F____plus__Clone,
                              [],
                              "next",
                              []
                            |),
                            [ M.read (| lookup_cells |) ]
                          |)
                        ]
                      |)
                    |) in
                  let lookup_read_stack :=
                    M.alloc (|
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.apply
                            (Ty.path
                              "delphinus_zkwasm::circuits::etable::allocator::EventTableCellAllocator")
                            [ F ],
                          "alloc_memory_table_lookup_read_cell",
                          [
                            Ty.function
                              [
                                Ty.tuple
                                  [
                                    Ty.apply
                                      (Ty.path "&mut")
                                      [
                                        Ty.apply
                                          (Ty.path "halo2_proofs::plonk::circuit::VirtualCells")
                                          [ F ]
                                      ]
                                  ]
                              ]
                              (Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ]);
                            Ty.function
                              [
                                Ty.tuple
                                  [
                                    Ty.apply
                                      (Ty.path "&mut")
                                      [
                                        Ty.apply
                                          (Ty.path "halo2_proofs::plonk::circuit::VirtualCells")
                                          [ F ]
                                      ]
                                  ]
                              ]
                              (Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ]);
                            Ty.function
                              [
                                Ty.tuple
                                  [
                                    Ty.apply
                                      (Ty.path "&mut")
                                      [
                                        Ty.apply
                                          (Ty.path "halo2_proofs::plonk::circuit::VirtualCells")
                                          [ F ]
                                      ]
                                  ]
                              ]
                              (Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ]);
                            Ty.function
                              [
                                Ty.tuple
                                  [
                                    Ty.apply
                                      (Ty.path "&mut")
                                      [
                                        Ty.apply
                                          (Ty.path "halo2_proofs::plonk::circuit::VirtualCells")
                                          [ F ]
                                      ]
                                  ]
                              ]
                              (Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ]);
                            Ty.function
                              [
                                Ty.tuple
                                  [
                                    Ty.apply
                                      (Ty.path "&mut")
                                      [
                                        Ty.apply
                                          (Ty.path "halo2_proofs::plonk::circuit::VirtualCells")
                                          [ F ]
                                      ]
                                  ]
                              ]
                              (Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ])
                          ]
                        |),
                        [
                          M.read (| allocator |);
                          M.read (| Value.String "wasm input stack read" |);
                          M.read (| constraint_builder |);
                          M.read (| eid |);
                          M.closure
                            (fun γ =>
                              ltac:(M.monadic
                                match γ with
                                | [ α0 ] =>
                                  M.match_operator (|
                                    M.alloc (| α0 |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let ____ := M.copy (| γ |) in
                                          Value.StructTuple
                                            "halo2_proofs::plonk::circuit::Expression::Constant"
                                            [
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "core::convert::From",
                                                  F,
                                                  [ Ty.path "u64" ],
                                                  "from",
                                                  []
                                                |),
                                                [
                                                  M.read (|
                                                    M.use
                                                      (M.alloc (|
                                                        M.rust_cast
                                                          (BinOp.Panic.add (|
                                                            Integer.Isize,
                                                            M.get_constant (|
                                                              "specs::mtable::LocationType::Stack_discriminant"
                                                            |),
                                                            Value.Integer 0
                                                          |))
                                                      |))
                                                  |)
                                                ]
                                              |)
                                            ]))
                                    ]
                                  |)
                                | _ => M.impossible (||)
                                end));
                          M.closure
                            (fun γ =>
                              ltac:(M.monadic
                                match γ with
                                | [ α0 ] =>
                                  M.match_operator (|
                                    M.alloc (| α0 |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let meta := M.copy (| γ |) in
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "core::ops::arith::Add",
                                              Ty.apply
                                                (Ty.path "halo2_proofs::plonk::circuit::Expression")
                                                [ F ],
                                              [
                                                Ty.apply
                                                  (Ty.path
                                                    "halo2_proofs::plonk::circuit::Expression")
                                                  [ F ]
                                              ],
                                              "add",
                                              []
                                            |),
                                            [
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "delphinus_zkwasm::circuits::cell::CellExpression",
                                                  Ty.apply
                                                    (Ty.path
                                                      "delphinus_zkwasm::circuits::cell::AllocatedCommonRangeCell")
                                                    [ F ],
                                                  [ F ],
                                                  "expr",
                                                  []
                                                |),
                                                [ sp; M.read (| meta |) ]
                                              |);
                                              Value.StructTuple
                                                "halo2_proofs::plonk::circuit::Expression::Constant"
                                                [
                                                  M.call_closure (|
                                                    M.get_trait_method (|
                                                      "core::convert::From",
                                                      F,
                                                      [ Ty.path "u64" ],
                                                      "from",
                                                      []
                                                    |),
                                                    [
                                                      M.read (|
                                                        M.use (M.alloc (| Value.Integer 1 |))
                                                      |)
                                                    ]
                                                  |)
                                                ]
                                            ]
                                          |)))
                                    ]
                                  |)
                                | _ => M.impossible (||)
                                end));
                          M.closure
                            (fun γ =>
                              ltac:(M.monadic
                                match γ with
                                | [ α0 ] =>
                                  M.match_operator (|
                                    M.alloc (| α0 |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let meta := M.copy (| γ |) in
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "delphinus_zkwasm::circuits::cell::CellExpression",
                                              Ty.apply
                                                (Ty.path
                                                  "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                                [ F ],
                                              [ F ],
                                              "expr",
                                              []
                                            |),
                                            [ is_wasm_input_op; M.read (| meta |) ]
                                          |)))
                                    ]
                                  |)
                                | _ => M.impossible (||)
                                end));
                          M.closure
                            (fun γ =>
                              ltac:(M.monadic
                                match γ with
                                | [ α0 ] =>
                                  M.match_operator (|
                                    M.alloc (| α0 |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let meta := M.copy (| γ |) in
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "core::ops::arith::Add",
                                              Ty.apply
                                                (Ty.path "halo2_proofs::plonk::circuit::Expression")
                                                [ F ],
                                              [
                                                Ty.apply
                                                  (Ty.path
                                                    "halo2_proofs::plonk::circuit::Expression")
                                                  [ F ]
                                              ],
                                              "add",
                                              []
                                            |),
                                            [
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "core::ops::arith::Mul",
                                                  Ty.apply
                                                    (Ty.path
                                                      "halo2_proofs::plonk::circuit::Expression")
                                                    [ F ],
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "halo2_proofs::plonk::circuit::Expression")
                                                      [ F ]
                                                  ],
                                                  "mul",
                                                  []
                                                |),
                                                [
                                                  M.call_closure (|
                                                    M.get_trait_method (|
                                                      "delphinus_zkwasm::circuits::cell::CellExpression",
                                                      Ty.apply
                                                        (Ty.path
                                                          "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                                        [ F ],
                                                      [ F ],
                                                      "expr",
                                                      []
                                                    |),
                                                    [ is_public; M.read (| meta |) ]
                                                  |);
                                                  M.call_closure (|
                                                    M.get_trait_method (|
                                                      "delphinus_zkwasm::circuits::cell::CellExpression",
                                                      Ty.apply
                                                        (Ty.path
                                                          "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                                        [ F ],
                                                      [ F ],
                                                      "expr",
                                                      []
                                                    |),
                                                    [ is_wasm_input_op; M.read (| meta |) ]
                                                  |)
                                                ]
                                              |);
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "core::ops::arith::Mul",
                                                  Ty.apply
                                                    (Ty.path
                                                      "halo2_proofs::plonk::circuit::Expression")
                                                    [ F ],
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "halo2_proofs::plonk::circuit::Expression")
                                                      [ F ]
                                                  ],
                                                  "mul",
                                                  []
                                                |),
                                                [
                                                  M.call_closure (|
                                                    M.get_trait_method (|
                                                      "delphinus_zkwasm::circuits::cell::CellExpression",
                                                      Ty.apply
                                                        (Ty.path
                                                          "delphinus_zkwasm::circuits::cell::AllocatedUnlimitedCell")
                                                        [ F ],
                                                      [ F ],
                                                      "expr",
                                                      []
                                                    |),
                                                    [
                                                      M.SubPointer.get_struct_record_field (|
                                                        value,
                                                        "delphinus_zkwasm::circuits::cell::AllocatedU64Cell",
                                                        "u64_cell"
                                                      |);
                                                      M.read (| meta |)
                                                    ]
                                                  |);
                                                  M.call_closure (|
                                                    M.get_trait_method (|
                                                      "delphinus_zkwasm::circuits::cell::CellExpression",
                                                      Ty.apply
                                                        (Ty.path
                                                          "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                                        [ F ],
                                                      [ F ],
                                                      "expr",
                                                      []
                                                    |),
                                                    [ is_wasm_output_op; M.read (| meta |) ]
                                                  |)
                                                ]
                                              |)
                                            ]
                                          |)))
                                    ]
                                  |)
                                | _ => M.impossible (||)
                                end));
                          M.closure
                            (fun γ =>
                              ltac:(M.monadic
                                match γ with
                                | [ α0 ] =>
                                  M.match_operator (|
                                    M.alloc (| α0 |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let ____ := M.copy (| γ |) in
                                          Value.StructTuple
                                            "halo2_proofs::plonk::circuit::Expression::Constant"
                                            [
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "core::convert::From",
                                                  F,
                                                  [ Ty.path "u64" ],
                                                  "from",
                                                  []
                                                |),
                                                [ M.read (| M.use (M.alloc (| Value.Integer 1 |)) |)
                                                ]
                                              |)
                                            ]))
                                    ]
                                  |)
                                | _ => M.impossible (||)
                                end))
                        ]
                      |)
                    |) in
                  let lookup_write_stack :=
                    M.alloc (|
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.apply
                            (Ty.path
                              "delphinus_zkwasm::circuits::etable::allocator::EventTableCellAllocator")
                            [ F ],
                          "alloc_memory_table_lookup_write_cell",
                          [
                            Ty.function
                              [
                                Ty.tuple
                                  [
                                    Ty.apply
                                      (Ty.path "&mut")
                                      [
                                        Ty.apply
                                          (Ty.path "halo2_proofs::plonk::circuit::VirtualCells")
                                          [ F ]
                                      ]
                                  ]
                              ]
                              (Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ]);
                            Ty.function
                              [
                                Ty.tuple
                                  [
                                    Ty.apply
                                      (Ty.path "&mut")
                                      [
                                        Ty.apply
                                          (Ty.path "halo2_proofs::plonk::circuit::VirtualCells")
                                          [ F ]
                                      ]
                                  ]
                              ]
                              (Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ]);
                            Ty.function
                              [
                                Ty.tuple
                                  [
                                    Ty.apply
                                      (Ty.path "&mut")
                                      [
                                        Ty.apply
                                          (Ty.path "halo2_proofs::plonk::circuit::VirtualCells")
                                          [ F ]
                                      ]
                                  ]
                              ]
                              (Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ]);
                            Ty.function
                              [
                                Ty.tuple
                                  [
                                    Ty.apply
                                      (Ty.path "&mut")
                                      [
                                        Ty.apply
                                          (Ty.path "halo2_proofs::plonk::circuit::VirtualCells")
                                          [ F ]
                                      ]
                                  ]
                              ]
                              (Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ]);
                            Ty.function
                              [
                                Ty.tuple
                                  [
                                    Ty.apply
                                      (Ty.path "&mut")
                                      [
                                        Ty.apply
                                          (Ty.path "halo2_proofs::plonk::circuit::VirtualCells")
                                          [ F ]
                                      ]
                                  ]
                              ]
                              (Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ])
                          ]
                        |),
                        [
                          M.read (| allocator |);
                          M.read (| Value.String "wasm input stack write" |);
                          M.read (| constraint_builder |);
                          M.read (| eid |);
                          M.closure
                            (fun γ =>
                              ltac:(M.monadic
                                match γ with
                                | [ α0 ] =>
                                  M.match_operator (|
                                    M.alloc (| α0 |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let ____ := M.copy (| γ |) in
                                          Value.StructTuple
                                            "halo2_proofs::plonk::circuit::Expression::Constant"
                                            [
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "core::convert::From",
                                                  F,
                                                  [ Ty.path "u64" ],
                                                  "from",
                                                  []
                                                |),
                                                [
                                                  M.read (|
                                                    M.use
                                                      (M.alloc (|
                                                        M.rust_cast
                                                          (BinOp.Panic.add (|
                                                            Integer.Isize,
                                                            M.get_constant (|
                                                              "specs::mtable::LocationType::Stack_discriminant"
                                                            |),
                                                            Value.Integer 0
                                                          |))
                                                      |))
                                                  |)
                                                ]
                                              |)
                                            ]))
                                    ]
                                  |)
                                | _ => M.impossible (||)
                                end));
                          M.closure
                            (fun γ =>
                              ltac:(M.monadic
                                match γ with
                                | [ α0 ] =>
                                  M.match_operator (|
                                    M.alloc (| α0 |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let meta := M.copy (| γ |) in
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "core::ops::arith::Add",
                                              Ty.apply
                                                (Ty.path "halo2_proofs::plonk::circuit::Expression")
                                                [ F ],
                                              [
                                                Ty.apply
                                                  (Ty.path
                                                    "halo2_proofs::plonk::circuit::Expression")
                                                  [ F ]
                                              ],
                                              "add",
                                              []
                                            |),
                                            [
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "delphinus_zkwasm::circuits::cell::CellExpression",
                                                  Ty.apply
                                                    (Ty.path
                                                      "delphinus_zkwasm::circuits::cell::AllocatedCommonRangeCell")
                                                    [ F ],
                                                  [ F ],
                                                  "expr",
                                                  []
                                                |),
                                                [ sp; M.read (| meta |) ]
                                              |);
                                              Value.StructTuple
                                                "halo2_proofs::plonk::circuit::Expression::Constant"
                                                [
                                                  M.call_closure (|
                                                    M.get_trait_method (|
                                                      "core::convert::From",
                                                      F,
                                                      [ Ty.path "u64" ],
                                                      "from",
                                                      []
                                                    |),
                                                    [
                                                      M.read (|
                                                        M.use (M.alloc (| Value.Integer 1 |))
                                                      |)
                                                    ]
                                                  |)
                                                ]
                                            ]
                                          |)))
                                    ]
                                  |)
                                | _ => M.impossible (||)
                                end));
                          M.closure
                            (fun γ =>
                              ltac:(M.monadic
                                match γ with
                                | [ α0 ] =>
                                  M.match_operator (|
                                    M.alloc (| α0 |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let ____ := M.copy (| γ |) in
                                          Value.StructTuple
                                            "halo2_proofs::plonk::circuit::Expression::Constant"
                                            [
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "core::convert::From",
                                                  F,
                                                  [ Ty.path "u64" ],
                                                  "from",
                                                  []
                                                |),
                                                [ M.read (| M.use (M.alloc (| Value.Integer 0 |)) |)
                                                ]
                                              |)
                                            ]))
                                    ]
                                  |)
                                | _ => M.impossible (||)
                                end));
                          M.closure
                            (fun γ =>
                              ltac:(M.monadic
                                match γ with
                                | [ α0 ] =>
                                  M.match_operator (|
                                    M.alloc (| α0 |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let meta := M.copy (| γ |) in
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "delphinus_zkwasm::circuits::cell::CellExpression",
                                              Ty.apply
                                                (Ty.path
                                                  "delphinus_zkwasm::circuits::cell::AllocatedUnlimitedCell")
                                                [ F ],
                                              [ F ],
                                              "expr",
                                              []
                                            |),
                                            [
                                              M.SubPointer.get_struct_record_field (|
                                                value,
                                                "delphinus_zkwasm::circuits::cell::AllocatedU64Cell",
                                                "u64_cell"
                                              |);
                                              M.read (| meta |)
                                            ]
                                          |)))
                                    ]
                                  |)
                                | _ => M.impossible (||)
                                end));
                          M.closure
                            (fun γ =>
                              ltac:(M.monadic
                                match γ with
                                | [ α0 ] =>
                                  M.match_operator (|
                                    M.alloc (| α0 |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let meta := M.copy (| γ |) in
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "delphinus_zkwasm::circuits::cell::CellExpression",
                                              Ty.apply
                                                (Ty.path
                                                  "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                                [ F ],
                                              [ F ],
                                              "expr",
                                              []
                                            |),
                                            [ is_wasm_input_op; M.read (| meta |) ]
                                          |)))
                                    ]
                                  |)
                                | _ => M.impossible (||)
                                end))
                        ]
                      |)
                    |) in
                  let _ :=
                    M.alloc (|
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.apply
                            (Ty.path
                              "delphinus_zkwasm::circuits::etable::constraint_builder::ConstraintBuilder")
                            [ F ],
                          "push",
                          []
                        |),
                        [
                          M.read (| constraint_builder |);
                          M.read (| Value.String "wasm_input_helper: sel" |);
                          (* Unsize *)
                          M.pointer_coercion
                            (M.call_closure (|
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path "alloc::boxed::Box")
                                  [
                                    Ty.function
                                      [
                                        Ty.tuple
                                          [
                                            Ty.apply
                                              (Ty.path "&mut")
                                              [
                                                Ty.apply
                                                  (Ty.path
                                                    "halo2_proofs::plonk::circuit::VirtualCells")
                                                  [ F ]
                                              ]
                                          ]
                                      ]
                                      (Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        [
                                          Ty.apply
                                            (Ty.path "halo2_proofs::plonk::circuit::Expression")
                                            [ F ];
                                          Ty.path "alloc::alloc::Global"
                                        ]);
                                    Ty.path "alloc::alloc::Global"
                                  ],
                                "new",
                                []
                              |),
                              [
                                M.closure
                                  (fun γ =>
                                    ltac:(M.monadic
                                      match γ with
                                      | [ α0 ] =>
                                        M.match_operator (|
                                          M.alloc (| α0 |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let meta := M.copy (| γ |) in
                                                M.call_closure (|
                                                  M.get_associated_function (|
                                                    Ty.apply
                                                      (Ty.path "slice")
                                                      [
                                                        Ty.apply
                                                          (Ty.path
                                                            "halo2_proofs::plonk::circuit::Expression")
                                                          [ F ]
                                                      ],
                                                    "into_vec",
                                                    [ Ty.path "alloc::alloc::Global" ]
                                                  |),
                                                  [
                                                    (* Unsize *)
                                                    M.pointer_coercion
                                                      (M.read (|
                                                        M.call_closure (|
                                                          M.get_associated_function (|
                                                            Ty.apply
                                                              (Ty.path "alloc::boxed::Box")
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "array")
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "halo2_proofs::plonk::circuit::Expression")
                                                                      [ F ]
                                                                  ];
                                                                Ty.path "alloc::alloc::Global"
                                                              ],
                                                            "new",
                                                            []
                                                          |),
                                                          [
                                                            M.alloc (|
                                                              Value.Array
                                                                [
                                                                  M.call_closure (|
                                                                    M.get_trait_method (|
                                                                      "core::ops::arith::Sub",
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "halo2_proofs::plonk::circuit::Expression")
                                                                        [ F ],
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "halo2_proofs::plonk::circuit::Expression")
                                                                          [ F ]
                                                                      ],
                                                                      "sub",
                                                                      []
                                                                    |),
                                                                    [
                                                                      M.call_closure (|
                                                                        M.get_trait_method (|
                                                                          "core::ops::arith::Add",
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "halo2_proofs::plonk::circuit::Expression")
                                                                            [ F ],
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "halo2_proofs::plonk::circuit::Expression")
                                                                              [ F ]
                                                                          ],
                                                                          "add",
                                                                          []
                                                                        |),
                                                                        [
                                                                          M.call_closure (|
                                                                            M.get_trait_method (|
                                                                              "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                                                                [ F ],
                                                                              [ F ],
                                                                              "expr",
                                                                              []
                                                                            |),
                                                                            [
                                                                              is_wasm_input_op;
                                                                              M.read (| meta |)
                                                                            ]
                                                                          |);
                                                                          M.call_closure (|
                                                                            M.get_trait_method (|
                                                                              "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                                                                [ F ],
                                                                              [ F ],
                                                                              "expr",
                                                                              []
                                                                            |),
                                                                            [
                                                                              is_wasm_output_op;
                                                                              M.read (| meta |)
                                                                            ]
                                                                          |)
                                                                        ]
                                                                      |);
                                                                      Value.StructTuple
                                                                        "halo2_proofs::plonk::circuit::Expression::Constant"
                                                                        [
                                                                          M.call_closure (|
                                                                            M.get_trait_method (|
                                                                              "core::convert::From",
                                                                              F,
                                                                              [ Ty.path "u64" ],
                                                                              "from",
                                                                              []
                                                                            |),
                                                                            [
                                                                              M.read (|
                                                                                M.use
                                                                                  (M.alloc (|
                                                                                    Value.Integer 1
                                                                                  |))
                                                                              |)
                                                                            ]
                                                                          |)
                                                                        ]
                                                                    ]
                                                                  |)
                                                                ]
                                                            |)
                                                          ]
                                                        |)
                                                      |))
                                                  ]
                                                |)))
                                          ]
                                        |)
                                      | _ => M.impossible (||)
                                      end))
                              ]
                            |))
                        ]
                      |)
                    |) in
                  let _ :=
                    M.alloc (|
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.apply
                            (Ty.path
                              "delphinus_zkwasm::circuits::etable::constraint_builder::ConstraintBuilder")
                            [ F ],
                          "push",
                          []
                        |),
                        [
                          M.read (| constraint_builder |);
                          M.read (| Value.String "enable lookup bit" |);
                          (* Unsize *)
                          M.pointer_coercion
                            (M.call_closure (|
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path "alloc::boxed::Box")
                                  [
                                    Ty.function
                                      [
                                        Ty.tuple
                                          [
                                            Ty.apply
                                              (Ty.path "&mut")
                                              [
                                                Ty.apply
                                                  (Ty.path
                                                    "halo2_proofs::plonk::circuit::VirtualCells")
                                                  [ F ]
                                              ]
                                          ]
                                      ]
                                      (Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        [
                                          Ty.apply
                                            (Ty.path "halo2_proofs::plonk::circuit::Expression")
                                            [ F ];
                                          Ty.path "alloc::alloc::Global"
                                        ]);
                                    Ty.path "alloc::alloc::Global"
                                  ],
                                "new",
                                []
                              |),
                              [
                                M.closure
                                  (fun γ =>
                                    ltac:(M.monadic
                                      match γ with
                                      | [ α0 ] =>
                                        M.match_operator (|
                                          M.alloc (| α0 |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let meta := M.copy (| γ |) in
                                                M.call_closure (|
                                                  M.get_associated_function (|
                                                    Ty.apply
                                                      (Ty.path "slice")
                                                      [
                                                        Ty.apply
                                                          (Ty.path
                                                            "halo2_proofs::plonk::circuit::Expression")
                                                          [ F ]
                                                      ],
                                                    "into_vec",
                                                    [ Ty.path "alloc::alloc::Global" ]
                                                  |),
                                                  [
                                                    (* Unsize *)
                                                    M.pointer_coercion
                                                      (M.read (|
                                                        M.call_closure (|
                                                          M.get_associated_function (|
                                                            Ty.apply
                                                              (Ty.path "alloc::boxed::Box")
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "array")
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "halo2_proofs::plonk::circuit::Expression")
                                                                      [ F ]
                                                                  ];
                                                                Ty.path "alloc::alloc::Global"
                                                              ],
                                                            "new",
                                                            []
                                                          |),
                                                          [
                                                            M.alloc (|
                                                              Value.Array
                                                                [
                                                                  M.call_closure (|
                                                                    M.get_trait_method (|
                                                                      "core::ops::arith::Sub",
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "halo2_proofs::plonk::circuit::Expression")
                                                                        [ F ],
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "halo2_proofs::plonk::circuit::Expression")
                                                                          [ F ]
                                                                      ],
                                                                      "sub",
                                                                      []
                                                                    |),
                                                                    [
                                                                      M.call_closure (|
                                                                        M.get_trait_method (|
                                                                          "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                                                            [ F ],
                                                                          [ F ],
                                                                          "expr",
                                                                          []
                                                                        |),
                                                                        [
                                                                          enable_input_table_lookup;
                                                                          M.read (| meta |)
                                                                        ]
                                                                      |);
                                                                      M.call_closure (|
                                                                        M.get_trait_method (|
                                                                          "core::ops::arith::Add",
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "halo2_proofs::plonk::circuit::Expression")
                                                                            [ F ],
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "halo2_proofs::plonk::circuit::Expression")
                                                                              [ F ]
                                                                          ],
                                                                          "add",
                                                                          []
                                                                        |),
                                                                        [
                                                                          M.call_closure (|
                                                                            M.get_trait_method (|
                                                                              "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                                                                [ F ],
                                                                              [ F ],
                                                                              "expr",
                                                                              []
                                                                            |),
                                                                            [
                                                                              is_public;
                                                                              M.read (| meta |)
                                                                            ]
                                                                          |);
                                                                          M.call_closure (|
                                                                            M.get_trait_method (|
                                                                              "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                                                                [ F ],
                                                                              [ F ],
                                                                              "expr",
                                                                              []
                                                                            |),
                                                                            [
                                                                              is_wasm_output_op;
                                                                              M.read (| meta |)
                                                                            ]
                                                                          |)
                                                                        ]
                                                                      |)
                                                                    ]
                                                                  |)
                                                                ]
                                                            |)
                                                          ]
                                                        |)
                                                      |))
                                                  ]
                                                |)))
                                          ]
                                        |)
                                      | _ => M.impossible (||)
                                      end))
                              ]
                            |))
                        ]
                      |)
                    |) in
                  let _ :=
                    M.alloc (|
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.apply
                            (Ty.path
                              "delphinus_zkwasm::circuits::etable::constraint_builder::ConstraintBuilder")
                            [ F ],
                          "push",
                          []
                        |),
                        [
                          M.read (| constraint_builder |);
                          M.read (| Value.String "wasm input lookup aux" |);
                          (* Unsize *)
                          M.pointer_coercion
                            (M.call_closure (|
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path "alloc::boxed::Box")
                                  [
                                    Ty.function
                                      [
                                        Ty.tuple
                                          [
                                            Ty.apply
                                              (Ty.path "&mut")
                                              [
                                                Ty.apply
                                                  (Ty.path
                                                    "halo2_proofs::plonk::circuit::VirtualCells")
                                                  [ F ]
                                              ]
                                          ]
                                      ]
                                      (Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        [
                                          Ty.apply
                                            (Ty.path "halo2_proofs::plonk::circuit::Expression")
                                            [ F ];
                                          Ty.path "alloc::alloc::Global"
                                        ]);
                                    Ty.path "alloc::alloc::Global"
                                  ],
                                "new",
                                []
                              |),
                              [
                                M.closure
                                  (fun γ =>
                                    ltac:(M.monadic
                                      match γ with
                                      | [ α0 ] =>
                                        M.match_operator (|
                                          M.alloc (| α0 |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let meta := M.copy (| γ |) in
                                                M.call_closure (|
                                                  M.get_associated_function (|
                                                    Ty.apply
                                                      (Ty.path "slice")
                                                      [
                                                        Ty.apply
                                                          (Ty.path
                                                            "halo2_proofs::plonk::circuit::Expression")
                                                          [ F ]
                                                      ],
                                                    "into_vec",
                                                    [ Ty.path "alloc::alloc::Global" ]
                                                  |),
                                                  [
                                                    (* Unsize *)
                                                    M.pointer_coercion
                                                      (M.read (|
                                                        M.call_closure (|
                                                          M.get_associated_function (|
                                                            Ty.apply
                                                              (Ty.path "alloc::boxed::Box")
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "array")
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "halo2_proofs::plonk::circuit::Expression")
                                                                      [ F ]
                                                                  ];
                                                                Ty.path "alloc::alloc::Global"
                                                              ],
                                                            "new",
                                                            []
                                                          |),
                                                          [
                                                            M.alloc (|
                                                              Value.Array
                                                                [
                                                                  M.call_closure (|
                                                                    M.get_trait_method (|
                                                                      "core::ops::arith::Sub",
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "halo2_proofs::plonk::circuit::Expression")
                                                                        [ F ],
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "halo2_proofs::plonk::circuit::Expression")
                                                                          [ F ]
                                                                      ],
                                                                      "sub",
                                                                      []
                                                                    |),
                                                                    [
                                                                      M.call_closure (|
                                                                        M.get_trait_method (|
                                                                          "core::ops::arith::Mul",
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "halo2_proofs::plonk::circuit::Expression")
                                                                            [ F ],
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "halo2_proofs::plonk::circuit::Expression")
                                                                              [ F ]
                                                                          ],
                                                                          "mul",
                                                                          []
                                                                        |),
                                                                        [
                                                                          M.call_closure (|
                                                                            M.get_trait_method (|
                                                                              "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                                                                [ F ],
                                                                              [ F ],
                                                                              "expr",
                                                                              []
                                                                            |),
                                                                            [
                                                                              enable_input_table_lookup;
                                                                              M.read (| meta |)
                                                                            ]
                                                                          |);
                                                                          M.call_closure (|
                                                                            M.get_trait_method (|
                                                                              "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "delphinus_zkwasm::circuits::cell::AllocatedCommonRangeCell")
                                                                                [ F ],
                                                                              [ F ],
                                                                              "expr",
                                                                              []
                                                                            |),
                                                                            [
                                                                              public_input_index;
                                                                              M.read (| meta |)
                                                                            ]
                                                                          |)
                                                                        ]
                                                                      |);
                                                                      M.call_closure (|
                                                                        M.get_trait_method (|
                                                                          "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "delphinus_zkwasm::circuits::cell::AllocatedUnlimitedCell")
                                                                            [ F ],
                                                                          [ F ],
                                                                          "expr",
                                                                          []
                                                                        |),
                                                                        [
                                                                          public_input_index_for_lookup;
                                                                          M.read (| meta |)
                                                                        ]
                                                                      |)
                                                                    ]
                                                                  |);
                                                                  M.call_closure (|
                                                                    M.get_trait_method (|
                                                                      "core::ops::arith::Sub",
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "halo2_proofs::plonk::circuit::Expression")
                                                                        [ F ],
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "halo2_proofs::plonk::circuit::Expression")
                                                                          [ F ]
                                                                      ],
                                                                      "sub",
                                                                      []
                                                                    |),
                                                                    [
                                                                      M.call_closure (|
                                                                        M.get_trait_method (|
                                                                          "core::ops::arith::Mul",
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "halo2_proofs::plonk::circuit::Expression")
                                                                            [ F ],
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "halo2_proofs::plonk::circuit::Expression")
                                                                              [ F ]
                                                                          ],
                                                                          "mul",
                                                                          []
                                                                        |),
                                                                        [
                                                                          M.call_closure (|
                                                                            M.get_trait_method (|
                                                                              "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                                                                [ F ],
                                                                              [ F ],
                                                                              "expr",
                                                                              []
                                                                            |),
                                                                            [
                                                                              enable_input_table_lookup;
                                                                              M.read (| meta |)
                                                                            ]
                                                                          |);
                                                                          M.call_closure (|
                                                                            M.get_associated_function (|
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "delphinus_zkwasm::circuits::cell::AllocatedU64Cell")
                                                                                [ F ],
                                                                              "expr",
                                                                              []
                                                                            |),
                                                                            [
                                                                              value;
                                                                              M.read (| meta |)
                                                                            ]
                                                                          |)
                                                                        ]
                                                                      |);
                                                                      M.call_closure (|
                                                                        M.get_trait_method (|
                                                                          "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "delphinus_zkwasm::circuits::cell::AllocatedUnlimitedCell")
                                                                            [ F ],
                                                                          [ F ],
                                                                          "expr",
                                                                          []
                                                                        |),
                                                                        [
                                                                          value_for_lookup;
                                                                          M.read (| meta |)
                                                                        ]
                                                                      |)
                                                                    ]
                                                                  |)
                                                                ]
                                                            |)
                                                          ]
                                                        |)
                                                      |))
                                                  ]
                                                |)))
                                          ]
                                        |)
                                      | _ => M.impossible (||)
                                      end))
                              ]
                            |))
                        ]
                      |)
                    |) in
                  let _ :=
                    M.alloc (|
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.apply
                            (Ty.path
                              "delphinus_zkwasm::circuits::etable::constraint_builder::ConstraintBuilder")
                            [ F ],
                          "lookup",
                          []
                        |),
                        [
                          M.read (| constraint_builder |);
                          M.read (|
                            M.get_constant (|
                              "delphinus_zkwasm::foreign::wasm_input_helper::circuits::WASM_INPUT_FOREIGN_TABLE_KEY"
                            |)
                          |);
                          M.read (| Value.String "lookup input table" |);
                          (* Unsize *)
                          M.pointer_coercion
                            (M.call_closure (|
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path "alloc::boxed::Box")
                                  [
                                    Ty.function
                                      [
                                        Ty.tuple
                                          [
                                            Ty.apply
                                              (Ty.path "&mut")
                                              [
                                                Ty.apply
                                                  (Ty.path
                                                    "halo2_proofs::plonk::circuit::VirtualCells")
                                                  [ F ]
                                              ]
                                          ]
                                      ]
                                      (Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        [
                                          Ty.apply
                                            (Ty.path "halo2_proofs::plonk::circuit::Expression")
                                            [ F ];
                                          Ty.path "alloc::alloc::Global"
                                        ]);
                                    Ty.path "alloc::alloc::Global"
                                  ],
                                "new",
                                []
                              |),
                              [
                                M.closure
                                  (fun γ =>
                                    ltac:(M.monadic
                                      match γ with
                                      | [ α0 ] =>
                                        M.match_operator (|
                                          M.alloc (| α0 |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let meta := M.copy (| γ |) in
                                                M.call_closure (|
                                                  M.get_associated_function (|
                                                    Ty.apply
                                                      (Ty.path "slice")
                                                      [
                                                        Ty.apply
                                                          (Ty.path
                                                            "halo2_proofs::plonk::circuit::Expression")
                                                          [ F ]
                                                      ],
                                                    "into_vec",
                                                    [ Ty.path "alloc::alloc::Global" ]
                                                  |),
                                                  [
                                                    (* Unsize *)
                                                    M.pointer_coercion
                                                      (M.read (|
                                                        M.call_closure (|
                                                          M.get_associated_function (|
                                                            Ty.apply
                                                              (Ty.path "alloc::boxed::Box")
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "array")
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "halo2_proofs::plonk::circuit::Expression")
                                                                      [ F ]
                                                                  ];
                                                                Ty.path "alloc::alloc::Global"
                                                              ],
                                                            "new",
                                                            []
                                                          |),
                                                          [
                                                            M.alloc (|
                                                              Value.Array
                                                                [
                                                                  M.call_closure (|
                                                                    M.get_trait_method (|
                                                                      "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "delphinus_zkwasm::circuits::cell::AllocatedUnlimitedCell")
                                                                        [ F ],
                                                                      [ F ],
                                                                      "expr",
                                                                      []
                                                                    |),
                                                                    [
                                                                      public_input_index_for_lookup;
                                                                      M.read (| meta |)
                                                                    ]
                                                                  |);
                                                                  M.call_closure (|
                                                                    M.get_trait_method (|
                                                                      "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "delphinus_zkwasm::circuits::cell::AllocatedUnlimitedCell")
                                                                        [ F ],
                                                                      [ F ],
                                                                      "expr",
                                                                      []
                                                                    |),
                                                                    [
                                                                      value_for_lookup;
                                                                      M.read (| meta |)
                                                                    ]
                                                                  |)
                                                                ]
                                                            |)
                                                          ]
                                                        |)
                                                      |))
                                                  ]
                                                |)))
                                          ]
                                        |)
                                      | _ => M.impossible (||)
                                      end))
                              ]
                            |))
                        ]
                      |)
                    |) in
                  M.alloc (|
                    (* Unsize *)
                    M.pointer_coercion
                      (M.call_closure (|
                        M.get_associated_function (|
                          Ty.apply
                            (Ty.path "alloc::boxed::Box")
                            [
                              Ty.apply
                                (Ty.path
                                  "delphinus_zkwasm::foreign::wasm_input_helper::etable_op_configure::ETableWasmInputHelperTableConfig")
                                [ F ];
                              Ty.path "alloc::alloc::Global"
                            ],
                          "new",
                          []
                        |),
                        [
                          Value.StructRecord
                            "delphinus_zkwasm::foreign::wasm_input_helper::etable_op_configure::ETableWasmInputHelperTableConfig"
                            [
                              ("plugin_index",
                                M.read (|
                                  M.SubPointer.get_struct_record_field (|
                                    self,
                                    "delphinus_zkwasm::foreign::wasm_input_helper::etable_op_configure::ETableWasmInputHelperTableConfigBuilder",
                                    "index"
                                  |)
                                |));
                              ("is_wasm_input_op", M.read (| is_wasm_input_op |));
                              ("is_wasm_output_op", M.read (| is_wasm_output_op |));
                              ("is_public", M.read (| is_public |));
                              ("value", M.read (| value |));
                              ("enable_input_table_lookup", M.read (| enable_input_table_lookup |));
                              ("public_input_index_for_lookup",
                                M.read (| public_input_index_for_lookup |));
                              ("value_for_lookup", M.read (| value_for_lookup |));
                              ("lookup_read_stack", M.read (| lookup_read_stack |));
                              ("lookup_write_stack", M.read (| lookup_write_stack |))
                            ]
                        ]
                      |))
                  |)
                |))))
          | _, _ => M.impossible
          end.
        
        Axiom Implements :
          forall (F : Ty.t),
          M.IsTraitInstance
            "delphinus_zkwasm::foreign::EventTableForeignCallConfigBuilder"
            (Self F)
            (* Trait polymorphic types *) [ (* F *) F ]
            (* Instance *) [ ("configure", InstanceField.Method (configure F)) ].
      End Impl_delphinus_zkwasm_foreign_EventTableForeignCallConfigBuilder_where_pairing_bn256_arithmetic_fields_FieldExt_F_F_for_delphinus_zkwasm_foreign_wasm_input_helper_etable_op_configure_ETableWasmInputHelperTableConfigBuilder.
      
      Module Impl_delphinus_zkwasm_circuits_etable_EventTableOpcodeConfig_where_pairing_bn256_arithmetic_fields_FieldExt_F_F_for_delphinus_zkwasm_foreign_wasm_input_helper_etable_op_configure_ETableWasmInputHelperTableConfig_F.
        Definition Self (F : Ty.t) : Ty.t :=
          Ty.apply
            (Ty.path
              "delphinus_zkwasm::foreign::wasm_input_helper::etable_op_configure::ETableWasmInputHelperTableConfig")
            [ F ].
        
        (*
            fn sp_diff(&self, meta: &mut VirtualCells<'_, F>) -> Option<Expression<F>> {
                Some(self.is_wasm_output_op.expr(meta))
            }
        *)
        Definition sp_diff (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self F in
          match τ, α with
          | [], [ self; meta ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              let meta := M.alloc (| meta |) in
              Value.StructTuple
                "core::option::Option::Some"
                [
                  M.call_closure (|
                    M.get_trait_method (|
                      "delphinus_zkwasm::circuits::cell::CellExpression",
                      Ty.apply (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedBitCell") [ F ],
                      [ F ],
                      "expr",
                      []
                    |),
                    [
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "delphinus_zkwasm::foreign::wasm_input_helper::etable_op_configure::ETableWasmInputHelperTableConfig",
                        "is_wasm_output_op"
                      |);
                      M.read (| meta |)
                    ]
                  |)
                ]))
          | _, _ => M.impossible
          end.
        
        (*
            fn opcode(&self, meta: &mut VirtualCells<'_, F>) -> Expression<F> {
                constant_from_bn!(
                    &(BigUint::from(OpcodeClass::ForeignPluginStart as u64 + self.plugin_index as u64)
                        << OPCODE_CLASS_SHIFT)
                ) + self.is_wasm_output_op.expr(meta)
            }
        *)
        Definition opcode (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self F in
          match τ, α with
          | [], [ self; meta ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              let meta := M.alloc (| meta |) in
              M.call_closure (|
                M.get_trait_method (|
                  "core::ops::arith::Add",
                  Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ],
                  [ Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ] ],
                  "add",
                  []
                |),
                [
                  Value.StructTuple
                    "halo2_proofs::plonk::circuit::Expression::Constant"
                    [
                      M.call_closure (|
                        M.get_function (|
                          "delphinus_zkwasm::circuits::utils::bn_to_field",
                          [ F ]
                        |),
                        [
                          M.alloc (|
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::ops::bit::Shl",
                                Ty.path "num_bigint::biguint::BigUint",
                                [ Ty.path "u32" ],
                                "shl",
                                []
                              |),
                              [
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "core::convert::From",
                                    Ty.path "num_bigint::biguint::BigUint",
                                    [ Ty.path "u64" ],
                                    "from",
                                    []
                                  |),
                                  [
                                    BinOp.Panic.add (|
                                      Integer.U64,
                                      M.rust_cast
                                        (BinOp.Panic.add (|
                                          Integer.Isize,
                                          M.get_constant (|
                                            "specs::itable::OpcodeClass::LocalGet_discriminant"
                                          |),
                                          Value.Integer 28
                                        |)),
                                      M.rust_cast
                                        (M.read (|
                                          M.SubPointer.get_struct_record_field (|
                                            M.read (| self |),
                                            "delphinus_zkwasm::foreign::wasm_input_helper::etable_op_configure::ETableWasmInputHelperTableConfig",
                                            "plugin_index"
                                          |)
                                        |))
                                    |)
                                  ]
                                |);
                                M.read (|
                                  M.get_constant (| "specs::itable::OPCODE_CLASS_SHIFT" |)
                                |)
                              ]
                            |)
                          |)
                        ]
                      |)
                    ];
                  M.call_closure (|
                    M.get_trait_method (|
                      "delphinus_zkwasm::circuits::cell::CellExpression",
                      Ty.apply (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedBitCell") [ F ],
                      [ F ],
                      "expr",
                      []
                    |),
                    [
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "delphinus_zkwasm::foreign::wasm_input_helper::etable_op_configure::ETableWasmInputHelperTableConfig",
                        "is_wasm_output_op"
                      |);
                      M.read (| meta |)
                    ]
                  |)
                ]
              |)))
          | _, _ => M.impossible
          end.
        
        (*
            fn assign(
                &self,
                ctx: &mut Context<'_, F>,
                step: &StepStatus,
                entry: &EventTableEntryWithMemoryInfo,
            ) -> Result<(), Error> {
                match &entry.eentry.step_info {
                    StepInfo::CallHost {
                        args,
                        ret_val,
                        signature,
                        op_index_in_plugin,
                        ..
                    } => {
                        if *op_index_in_plugin == Op::WasmInput as usize {
                            let arg_type: VarType = ( *signature.params.get(0).unwrap()).into();
                            let ret_type: VarType = signature.return_type.unwrap().into();
        
                            assert_eq!(args.len(), 1);
                            assert_eq!(arg_type, VarType::I32);
                            assert_eq!(ret_type, VarType::I64);
        
                            let is_public = *args.get(0).unwrap() == 1;
                            let value = ret_val.unwrap();
        
                            self.is_wasm_input_op.assign_bool(ctx, true)?;
                            self.is_public.assign_bool(ctx, is_public)?;
                            self.value.assign(ctx, value)?;
        
                            self.enable_input_table_lookup.assign_bool(ctx, is_public)?;
                            self.public_input_index_for_lookup.assign(
                                ctx,
                                (is_public as u64 * step.current.host_public_inputs as u64).into(),
                            )?;
                            self.value_for_lookup
                                .assign(ctx, ((is_public as u64) * value).into())?;
        
                            self.lookup_read_stack.assign(
                                ctx,
                                entry.memory_rw_entires[0].start_eid,
                                step.current.eid,
                                entry.memory_rw_entires[0].end_eid,
                                step.current.sp + 1,
                                LocationType::Stack,
                                true,
                                *args.get(0).unwrap(),
                            )?;
        
                            self.lookup_write_stack.assign(
                                ctx,
                                step.current.eid,
                                entry.memory_rw_entires[1].end_eid,
                                step.current.sp + 1,
                                LocationType::Stack,
                                false,
                                ret_val.unwrap(),
                            )?;
                        } else {
                            let arg_type: VarType = ( *signature.params.get(0).unwrap()).into();
                            assert_eq!(args.len(), 1);
                            assert_eq!(arg_type, VarType::I64);
        
                            let value = *args.first().unwrap();
                            self.value.assign(ctx, value)?;
        
                            self.is_wasm_output_op.assign_bool(ctx, true)?;
        
                            self.enable_input_table_lookup.assign_bool(ctx, true)?;
                            self.public_input_index_for_lookup
                                .assign(ctx, (step.current.host_public_inputs as u64).into())?;
                            self.value_for_lookup.assign(ctx, value.into())?;
        
                            self.lookup_read_stack.assign(
                                ctx,
                                entry.memory_rw_entires[0].start_eid,
                                step.current.eid,
                                entry.memory_rw_entires[0].end_eid,
                                step.current.sp + 1,
                                LocationType::Stack,
                                false,
                                value,
                            )?;
                        }
        
                        Ok(())
                    }
        
                    _ => unreachable!(),
                }
            }
        *)
        Definition assign (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self F in
          match τ, α with
          | [], [ self; ctx; step; entry ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              let ctx := M.alloc (| ctx |) in
              let step := M.alloc (| step |) in
              let entry := M.alloc (| entry |) in
              M.catch_return (|
                ltac:(M.monadic
                  (M.read (|
                    M.match_operator (|
                      M.alloc (|
                        M.SubPointer.get_struct_record_field (|
                          M.SubPointer.get_struct_record_field (|
                            M.read (| entry |),
                            "delphinus_zkwasm::circuits::utils::table_entry::EventTableEntryWithMemoryInfo",
                            "eentry"
                          |),
                          "specs::etable::EventTableEntry",
                          "step_info"
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ := M.read (| γ |) in
                            let γ1_0 :=
                              M.SubPointer.get_struct_record_field (|
                                γ,
                                "specs::step::StepInfo::CallHost",
                                "args"
                              |) in
                            let γ1_1 :=
                              M.SubPointer.get_struct_record_field (|
                                γ,
                                "specs::step::StepInfo::CallHost",
                                "ret_val"
                              |) in
                            let γ1_2 :=
                              M.SubPointer.get_struct_record_field (|
                                γ,
                                "specs::step::StepInfo::CallHost",
                                "signature"
                              |) in
                            let γ1_3 :=
                              M.SubPointer.get_struct_record_field (|
                                γ,
                                "specs::step::StepInfo::CallHost",
                                "op_index_in_plugin"
                              |) in
                            let args := M.alloc (| γ1_0 |) in
                            let ret_val := M.alloc (| γ1_1 |) in
                            let signature := M.alloc (| γ1_2 |) in
                            let op_index_in_plugin := M.alloc (| γ1_3 |) in
                            let _ :=
                              M.match_operator (|
                                M.alloc (| Value.Tuple [] |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ :=
                                        M.use
                                          (M.alloc (|
                                            BinOp.Pure.eq
                                              (M.read (| M.read (| op_index_in_plugin |) |))
                                              (M.rust_cast
                                                (BinOp.Panic.add (|
                                                  Integer.Isize,
                                                  M.get_constant (|
                                                    "delphinus_zkwasm::foreign::wasm_input_helper::Op::WasmInput_discriminant"
                                                  |),
                                                  Value.Integer 0
                                                |)))
                                          |)) in
                                      let _ :=
                                        M.is_constant_or_break_match (|
                                          M.read (| γ |),
                                          Value.Bool true
                                        |) in
                                      let arg_type :=
                                        M.alloc (|
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "core::convert::Into",
                                              Ty.path "specs::types::ValueType",
                                              [ Ty.path "specs::mtable::VarType" ],
                                              "into",
                                              []
                                            |),
                                            [
                                              M.read (|
                                                M.call_closure (|
                                                  M.get_associated_function (|
                                                    Ty.apply
                                                      (Ty.path "core::option::Option")
                                                      [
                                                        Ty.apply
                                                          (Ty.path "&")
                                                          [ Ty.path "specs::types::ValueType" ]
                                                      ],
                                                    "unwrap",
                                                    []
                                                  |),
                                                  [
                                                    M.call_closure (|
                                                      M.get_associated_function (|
                                                        Ty.apply
                                                          (Ty.path "slice")
                                                          [ Ty.path "specs::types::ValueType" ],
                                                        "get",
                                                        [ Ty.path "usize" ]
                                                      |),
                                                      [
                                                        M.call_closure (|
                                                          M.get_trait_method (|
                                                            "core::ops::deref::Deref",
                                                            Ty.apply
                                                              (Ty.path "alloc::vec::Vec")
                                                              [
                                                                Ty.path "specs::types::ValueType";
                                                                Ty.path "alloc::alloc::Global"
                                                              ],
                                                            [],
                                                            "deref",
                                                            []
                                                          |),
                                                          [
                                                            M.SubPointer.get_struct_record_field (|
                                                              M.read (| signature |),
                                                              "specs::host_function::Signature",
                                                              "params"
                                                            |)
                                                          ]
                                                        |);
                                                        Value.Integer 0
                                                      ]
                                                    |)
                                                  ]
                                                |)
                                              |)
                                            ]
                                          |)
                                        |) in
                                      let ret_type :=
                                        M.alloc (|
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "core::convert::Into",
                                              Ty.path "specs::types::ValueType",
                                              [ Ty.path "specs::mtable::VarType" ],
                                              "into",
                                              []
                                            |),
                                            [
                                              M.call_closure (|
                                                M.get_associated_function (|
                                                  Ty.apply
                                                    (Ty.path "core::option::Option")
                                                    [ Ty.path "specs::types::ValueType" ],
                                                  "unwrap",
                                                  []
                                                |),
                                                [
                                                  M.read (|
                                                    M.SubPointer.get_struct_record_field (|
                                                      M.read (| signature |),
                                                      "specs::host_function::Signature",
                                                      "return_type"
                                                    |)
                                                  |)
                                                ]
                                              |)
                                            ]
                                          |)
                                        |) in
                                      let _ :=
                                        M.match_operator (|
                                          M.alloc (|
                                            Value.Tuple
                                              [
                                                M.alloc (|
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.apply
                                                        (Ty.path "alloc::vec::Vec")
                                                        [
                                                          Ty.path "u64";
                                                          Ty.path "alloc::alloc::Global"
                                                        ],
                                                      "len",
                                                      []
                                                    |),
                                                    [ M.read (| args |) ]
                                                  |)
                                                |);
                                                M.alloc (| Value.Integer 1 |)
                                              ]
                                          |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let γ0_0 :=
                                                  M.SubPointer.get_tuple_field (| γ, 0 |) in
                                                let γ0_1 :=
                                                  M.SubPointer.get_tuple_field (| γ, 1 |) in
                                                let left_val := M.copy (| γ0_0 |) in
                                                let right_val := M.copy (| γ0_1 |) in
                                                M.match_operator (|
                                                  M.alloc (| Value.Tuple [] |),
                                                  [
                                                    fun γ =>
                                                      ltac:(M.monadic
                                                        (let γ :=
                                                          M.use
                                                            (M.alloc (|
                                                              UnOp.Pure.not
                                                                (BinOp.Pure.eq
                                                                  (M.read (|
                                                                    M.read (| left_val |)
                                                                  |))
                                                                  (M.read (|
                                                                    M.read (| right_val |)
                                                                  |)))
                                                            |)) in
                                                        let _ :=
                                                          M.is_constant_or_break_match (|
                                                            M.read (| γ |),
                                                            Value.Bool true
                                                          |) in
                                                        M.alloc (|
                                                          M.never_to_any (|
                                                            M.read (|
                                                              let kind :=
                                                                M.alloc (|
                                                                  Value.StructTuple
                                                                    "core::panicking::AssertKind::Eq"
                                                                    []
                                                                |) in
                                                              M.alloc (|
                                                                M.call_closure (|
                                                                  M.get_function (|
                                                                    "core::panicking::assert_failed",
                                                                    [
                                                                      Ty.path "usize";
                                                                      Ty.path "usize"
                                                                    ]
                                                                  |),
                                                                  [
                                                                    M.read (| kind |);
                                                                    M.read (| left_val |);
                                                                    M.read (| right_val |);
                                                                    Value.StructTuple
                                                                      "core::option::Option::None"
                                                                      []
                                                                  ]
                                                                |)
                                                              |)
                                                            |)
                                                          |)
                                                        |)));
                                                    fun γ =>
                                                      ltac:(M.monadic
                                                        (M.alloc (| Value.Tuple [] |)))
                                                  ]
                                                |)))
                                          ]
                                        |) in
                                      let _ :=
                                        M.match_operator (|
                                          M.alloc (|
                                            Value.Tuple
                                              [
                                                arg_type;
                                                M.alloc (|
                                                  Value.StructTuple "specs::mtable::VarType::I32" []
                                                |)
                                              ]
                                          |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let γ0_0 :=
                                                  M.SubPointer.get_tuple_field (| γ, 0 |) in
                                                let γ0_1 :=
                                                  M.SubPointer.get_tuple_field (| γ, 1 |) in
                                                let left_val := M.copy (| γ0_0 |) in
                                                let right_val := M.copy (| γ0_1 |) in
                                                M.match_operator (|
                                                  M.alloc (| Value.Tuple [] |),
                                                  [
                                                    fun γ =>
                                                      ltac:(M.monadic
                                                        (let γ :=
                                                          M.use
                                                            (M.alloc (|
                                                              UnOp.Pure.not
                                                                (M.call_closure (|
                                                                  M.get_trait_method (|
                                                                    "core::cmp::PartialEq",
                                                                    Ty.path
                                                                      "specs::mtable::VarType",
                                                                    [
                                                                      Ty.path
                                                                        "specs::mtable::VarType"
                                                                    ],
                                                                    "eq",
                                                                    []
                                                                  |),
                                                                  [
                                                                    M.read (| left_val |);
                                                                    M.read (| right_val |)
                                                                  ]
                                                                |))
                                                            |)) in
                                                        let _ :=
                                                          M.is_constant_or_break_match (|
                                                            M.read (| γ |),
                                                            Value.Bool true
                                                          |) in
                                                        M.alloc (|
                                                          M.never_to_any (|
                                                            M.read (|
                                                              let kind :=
                                                                M.alloc (|
                                                                  Value.StructTuple
                                                                    "core::panicking::AssertKind::Eq"
                                                                    []
                                                                |) in
                                                              M.alloc (|
                                                                M.call_closure (|
                                                                  M.get_function (|
                                                                    "core::panicking::assert_failed",
                                                                    [
                                                                      Ty.path
                                                                        "specs::mtable::VarType";
                                                                      Ty.path
                                                                        "specs::mtable::VarType"
                                                                    ]
                                                                  |),
                                                                  [
                                                                    M.read (| kind |);
                                                                    M.read (| left_val |);
                                                                    M.read (| right_val |);
                                                                    Value.StructTuple
                                                                      "core::option::Option::None"
                                                                      []
                                                                  ]
                                                                |)
                                                              |)
                                                            |)
                                                          |)
                                                        |)));
                                                    fun γ =>
                                                      ltac:(M.monadic
                                                        (M.alloc (| Value.Tuple [] |)))
                                                  ]
                                                |)))
                                          ]
                                        |) in
                                      let _ :=
                                        M.match_operator (|
                                          M.alloc (|
                                            Value.Tuple
                                              [
                                                ret_type;
                                                M.alloc (|
                                                  Value.StructTuple "specs::mtable::VarType::I64" []
                                                |)
                                              ]
                                          |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let γ0_0 :=
                                                  M.SubPointer.get_tuple_field (| γ, 0 |) in
                                                let γ0_1 :=
                                                  M.SubPointer.get_tuple_field (| γ, 1 |) in
                                                let left_val := M.copy (| γ0_0 |) in
                                                let right_val := M.copy (| γ0_1 |) in
                                                M.match_operator (|
                                                  M.alloc (| Value.Tuple [] |),
                                                  [
                                                    fun γ =>
                                                      ltac:(M.monadic
                                                        (let γ :=
                                                          M.use
                                                            (M.alloc (|
                                                              UnOp.Pure.not
                                                                (M.call_closure (|
                                                                  M.get_trait_method (|
                                                                    "core::cmp::PartialEq",
                                                                    Ty.path
                                                                      "specs::mtable::VarType",
                                                                    [
                                                                      Ty.path
                                                                        "specs::mtable::VarType"
                                                                    ],
                                                                    "eq",
                                                                    []
                                                                  |),
                                                                  [
                                                                    M.read (| left_val |);
                                                                    M.read (| right_val |)
                                                                  ]
                                                                |))
                                                            |)) in
                                                        let _ :=
                                                          M.is_constant_or_break_match (|
                                                            M.read (| γ |),
                                                            Value.Bool true
                                                          |) in
                                                        M.alloc (|
                                                          M.never_to_any (|
                                                            M.read (|
                                                              let kind :=
                                                                M.alloc (|
                                                                  Value.StructTuple
                                                                    "core::panicking::AssertKind::Eq"
                                                                    []
                                                                |) in
                                                              M.alloc (|
                                                                M.call_closure (|
                                                                  M.get_function (|
                                                                    "core::panicking::assert_failed",
                                                                    [
                                                                      Ty.path
                                                                        "specs::mtable::VarType";
                                                                      Ty.path
                                                                        "specs::mtable::VarType"
                                                                    ]
                                                                  |),
                                                                  [
                                                                    M.read (| kind |);
                                                                    M.read (| left_val |);
                                                                    M.read (| right_val |);
                                                                    Value.StructTuple
                                                                      "core::option::Option::None"
                                                                      []
                                                                  ]
                                                                |)
                                                              |)
                                                            |)
                                                          |)
                                                        |)));
                                                    fun γ =>
                                                      ltac:(M.monadic
                                                        (M.alloc (| Value.Tuple [] |)))
                                                  ]
                                                |)))
                                          ]
                                        |) in
                                      let is_public :=
                                        M.alloc (|
                                          BinOp.Pure.eq
                                            (M.read (|
                                              M.call_closure (|
                                                M.get_associated_function (|
                                                  Ty.apply
                                                    (Ty.path "core::option::Option")
                                                    [ Ty.apply (Ty.path "&") [ Ty.path "u64" ] ],
                                                  "unwrap",
                                                  []
                                                |),
                                                [
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.apply (Ty.path "slice") [ Ty.path "u64" ],
                                                      "get",
                                                      [ Ty.path "usize" ]
                                                    |),
                                                    [
                                                      M.call_closure (|
                                                        M.get_trait_method (|
                                                          "core::ops::deref::Deref",
                                                          Ty.apply
                                                            (Ty.path "alloc::vec::Vec")
                                                            [
                                                              Ty.path "u64";
                                                              Ty.path "alloc::alloc::Global"
                                                            ],
                                                          [],
                                                          "deref",
                                                          []
                                                        |),
                                                        [ M.read (| args |) ]
                                                      |);
                                                      Value.Integer 0
                                                    ]
                                                  |)
                                                ]
                                              |)
                                            |))
                                            (Value.Integer 1)
                                        |) in
                                      let value :=
                                        M.alloc (|
                                          M.call_closure (|
                                            M.get_associated_function (|
                                              Ty.apply
                                                (Ty.path "core::option::Option")
                                                [ Ty.path "u64" ],
                                              "unwrap",
                                              []
                                            |),
                                            [ M.read (| M.read (| ret_val |) |) ]
                                          |)
                                        |) in
                                      let _ :=
                                        M.match_operator (|
                                          M.alloc (|
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "core::ops::try_trait::Try",
                                                Ty.apply
                                                  (Ty.path "core::result::Result")
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "halo2_proofs::circuit::AssignedCell")
                                                      [ F; F ];
                                                    Ty.path "halo2_proofs::plonk::error::Error"
                                                  ],
                                                [],
                                                "branch",
                                                []
                                              |),
                                              [
                                                M.call_closure (|
                                                  M.get_trait_method (|
                                                    "delphinus_zkwasm::circuits::cell::CellExpression",
                                                    Ty.apply
                                                      (Ty.path
                                                        "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                                      [ F ],
                                                    [ F ],
                                                    "assign_bool",
                                                    []
                                                  |),
                                                  [
                                                    M.SubPointer.get_struct_record_field (|
                                                      M.read (| self |),
                                                      "delphinus_zkwasm::foreign::wasm_input_helper::etable_op_configure::ETableWasmInputHelperTableConfig",
                                                      "is_wasm_input_op"
                                                    |);
                                                    M.read (| ctx |);
                                                    Value.Bool true
                                                  ]
                                                |)
                                              ]
                                            |)
                                          |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let γ0_0 :=
                                                  M.SubPointer.get_struct_tuple_field (|
                                                    γ,
                                                    "core::ops::control_flow::ControlFlow::Break",
                                                    0
                                                  |) in
                                                let residual := M.copy (| γ0_0 |) in
                                                M.alloc (|
                                                  M.never_to_any (|
                                                    M.read (|
                                                      M.return_ (|
                                                        M.call_closure (|
                                                          M.get_trait_method (|
                                                            "core::ops::try_trait::FromResidual",
                                                            Ty.apply
                                                              (Ty.path "core::result::Result")
                                                              [
                                                                Ty.tuple [];
                                                                Ty.path
                                                                  "halo2_proofs::plonk::error::Error"
                                                              ],
                                                            [
                                                              Ty.apply
                                                                (Ty.path "core::result::Result")
                                                                [
                                                                  Ty.path
                                                                    "core::convert::Infallible";
                                                                  Ty.path
                                                                    "halo2_proofs::plonk::error::Error"
                                                                ]
                                                            ],
                                                            "from_residual",
                                                            []
                                                          |),
                                                          [ M.read (| residual |) ]
                                                        |)
                                                      |)
                                                    |)
                                                  |)
                                                |)));
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let γ0_0 :=
                                                  M.SubPointer.get_struct_tuple_field (|
                                                    γ,
                                                    "core::ops::control_flow::ControlFlow::Continue",
                                                    0
                                                  |) in
                                                let val := M.copy (| γ0_0 |) in
                                                val))
                                          ]
                                        |) in
                                      let _ :=
                                        M.match_operator (|
                                          M.alloc (|
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "core::ops::try_trait::Try",
                                                Ty.apply
                                                  (Ty.path "core::result::Result")
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "halo2_proofs::circuit::AssignedCell")
                                                      [ F; F ];
                                                    Ty.path "halo2_proofs::plonk::error::Error"
                                                  ],
                                                [],
                                                "branch",
                                                []
                                              |),
                                              [
                                                M.call_closure (|
                                                  M.get_trait_method (|
                                                    "delphinus_zkwasm::circuits::cell::CellExpression",
                                                    Ty.apply
                                                      (Ty.path
                                                        "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                                      [ F ],
                                                    [ F ],
                                                    "assign_bool",
                                                    []
                                                  |),
                                                  [
                                                    M.SubPointer.get_struct_record_field (|
                                                      M.read (| self |),
                                                      "delphinus_zkwasm::foreign::wasm_input_helper::etable_op_configure::ETableWasmInputHelperTableConfig",
                                                      "is_public"
                                                    |);
                                                    M.read (| ctx |);
                                                    M.read (| is_public |)
                                                  ]
                                                |)
                                              ]
                                            |)
                                          |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let γ0_0 :=
                                                  M.SubPointer.get_struct_tuple_field (|
                                                    γ,
                                                    "core::ops::control_flow::ControlFlow::Break",
                                                    0
                                                  |) in
                                                let residual := M.copy (| γ0_0 |) in
                                                M.alloc (|
                                                  M.never_to_any (|
                                                    M.read (|
                                                      M.return_ (|
                                                        M.call_closure (|
                                                          M.get_trait_method (|
                                                            "core::ops::try_trait::FromResidual",
                                                            Ty.apply
                                                              (Ty.path "core::result::Result")
                                                              [
                                                                Ty.tuple [];
                                                                Ty.path
                                                                  "halo2_proofs::plonk::error::Error"
                                                              ],
                                                            [
                                                              Ty.apply
                                                                (Ty.path "core::result::Result")
                                                                [
                                                                  Ty.path
                                                                    "core::convert::Infallible";
                                                                  Ty.path
                                                                    "halo2_proofs::plonk::error::Error"
                                                                ]
                                                            ],
                                                            "from_residual",
                                                            []
                                                          |),
                                                          [ M.read (| residual |) ]
                                                        |)
                                                      |)
                                                    |)
                                                  |)
                                                |)));
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let γ0_0 :=
                                                  M.SubPointer.get_struct_tuple_field (|
                                                    γ,
                                                    "core::ops::control_flow::ControlFlow::Continue",
                                                    0
                                                  |) in
                                                let val := M.copy (| γ0_0 |) in
                                                val))
                                          ]
                                        |) in
                                      let _ :=
                                        M.match_operator (|
                                          M.alloc (|
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "core::ops::try_trait::Try",
                                                Ty.apply
                                                  (Ty.path "core::result::Result")
                                                  [
                                                    Ty.tuple [];
                                                    Ty.path "halo2_proofs::plonk::error::Error"
                                                  ],
                                                [],
                                                "branch",
                                                []
                                              |),
                                              [
                                                M.call_closure (|
                                                  M.get_associated_function (|
                                                    Ty.apply
                                                      (Ty.path
                                                        "delphinus_zkwasm::circuits::cell::AllocatedU64Cell")
                                                      [ F ],
                                                    "assign",
                                                    []
                                                  |),
                                                  [
                                                    M.SubPointer.get_struct_record_field (|
                                                      M.read (| self |),
                                                      "delphinus_zkwasm::foreign::wasm_input_helper::etable_op_configure::ETableWasmInputHelperTableConfig",
                                                      "value"
                                                    |);
                                                    M.read (| ctx |);
                                                    M.read (| value |)
                                                  ]
                                                |)
                                              ]
                                            |)
                                          |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let γ0_0 :=
                                                  M.SubPointer.get_struct_tuple_field (|
                                                    γ,
                                                    "core::ops::control_flow::ControlFlow::Break",
                                                    0
                                                  |) in
                                                let residual := M.copy (| γ0_0 |) in
                                                M.alloc (|
                                                  M.never_to_any (|
                                                    M.read (|
                                                      M.return_ (|
                                                        M.call_closure (|
                                                          M.get_trait_method (|
                                                            "core::ops::try_trait::FromResidual",
                                                            Ty.apply
                                                              (Ty.path "core::result::Result")
                                                              [
                                                                Ty.tuple [];
                                                                Ty.path
                                                                  "halo2_proofs::plonk::error::Error"
                                                              ],
                                                            [
                                                              Ty.apply
                                                                (Ty.path "core::result::Result")
                                                                [
                                                                  Ty.path
                                                                    "core::convert::Infallible";
                                                                  Ty.path
                                                                    "halo2_proofs::plonk::error::Error"
                                                                ]
                                                            ],
                                                            "from_residual",
                                                            []
                                                          |),
                                                          [ M.read (| residual |) ]
                                                        |)
                                                      |)
                                                    |)
                                                  |)
                                                |)));
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let γ0_0 :=
                                                  M.SubPointer.get_struct_tuple_field (|
                                                    γ,
                                                    "core::ops::control_flow::ControlFlow::Continue",
                                                    0
                                                  |) in
                                                let val := M.copy (| γ0_0 |) in
                                                val))
                                          ]
                                        |) in
                                      let _ :=
                                        M.match_operator (|
                                          M.alloc (|
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "core::ops::try_trait::Try",
                                                Ty.apply
                                                  (Ty.path "core::result::Result")
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "halo2_proofs::circuit::AssignedCell")
                                                      [ F; F ];
                                                    Ty.path "halo2_proofs::plonk::error::Error"
                                                  ],
                                                [],
                                                "branch",
                                                []
                                              |),
                                              [
                                                M.call_closure (|
                                                  M.get_trait_method (|
                                                    "delphinus_zkwasm::circuits::cell::CellExpression",
                                                    Ty.apply
                                                      (Ty.path
                                                        "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                                      [ F ],
                                                    [ F ],
                                                    "assign_bool",
                                                    []
                                                  |),
                                                  [
                                                    M.SubPointer.get_struct_record_field (|
                                                      M.read (| self |),
                                                      "delphinus_zkwasm::foreign::wasm_input_helper::etable_op_configure::ETableWasmInputHelperTableConfig",
                                                      "enable_input_table_lookup"
                                                    |);
                                                    M.read (| ctx |);
                                                    M.read (| is_public |)
                                                  ]
                                                |)
                                              ]
                                            |)
                                          |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let γ0_0 :=
                                                  M.SubPointer.get_struct_tuple_field (|
                                                    γ,
                                                    "core::ops::control_flow::ControlFlow::Break",
                                                    0
                                                  |) in
                                                let residual := M.copy (| γ0_0 |) in
                                                M.alloc (|
                                                  M.never_to_any (|
                                                    M.read (|
                                                      M.return_ (|
                                                        M.call_closure (|
                                                          M.get_trait_method (|
                                                            "core::ops::try_trait::FromResidual",
                                                            Ty.apply
                                                              (Ty.path "core::result::Result")
                                                              [
                                                                Ty.tuple [];
                                                                Ty.path
                                                                  "halo2_proofs::plonk::error::Error"
                                                              ],
                                                            [
                                                              Ty.apply
                                                                (Ty.path "core::result::Result")
                                                                [
                                                                  Ty.path
                                                                    "core::convert::Infallible";
                                                                  Ty.path
                                                                    "halo2_proofs::plonk::error::Error"
                                                                ]
                                                            ],
                                                            "from_residual",
                                                            []
                                                          |),
                                                          [ M.read (| residual |) ]
                                                        |)
                                                      |)
                                                    |)
                                                  |)
                                                |)));
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let γ0_0 :=
                                                  M.SubPointer.get_struct_tuple_field (|
                                                    γ,
                                                    "core::ops::control_flow::ControlFlow::Continue",
                                                    0
                                                  |) in
                                                let val := M.copy (| γ0_0 |) in
                                                val))
                                          ]
                                        |) in
                                      let _ :=
                                        M.match_operator (|
                                          M.alloc (|
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "core::ops::try_trait::Try",
                                                Ty.apply
                                                  (Ty.path "core::result::Result")
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "halo2_proofs::circuit::AssignedCell")
                                                      [ F; F ];
                                                    Ty.path "halo2_proofs::plonk::error::Error"
                                                  ],
                                                [],
                                                "branch",
                                                []
                                              |),
                                              [
                                                M.call_closure (|
                                                  M.get_trait_method (|
                                                    "delphinus_zkwasm::circuits::cell::CellExpression",
                                                    Ty.apply
                                                      (Ty.path
                                                        "delphinus_zkwasm::circuits::cell::AllocatedUnlimitedCell")
                                                      [ F ],
                                                    [ F ],
                                                    "assign",
                                                    []
                                                  |),
                                                  [
                                                    M.SubPointer.get_struct_record_field (|
                                                      M.read (| self |),
                                                      "delphinus_zkwasm::foreign::wasm_input_helper::etable_op_configure::ETableWasmInputHelperTableConfig",
                                                      "public_input_index_for_lookup"
                                                    |);
                                                    M.read (| ctx |);
                                                    M.call_closure (|
                                                      M.get_trait_method (|
                                                        "core::convert::Into",
                                                        Ty.path "u64",
                                                        [ F ],
                                                        "into",
                                                        []
                                                      |),
                                                      [
                                                        BinOp.Panic.mul (|
                                                          Integer.U64,
                                                          M.rust_cast (M.read (| is_public |)),
                                                          M.rust_cast
                                                            (M.read (|
                                                              M.SubPointer.get_struct_record_field (|
                                                                M.read (|
                                                                  M.SubPointer.get_struct_record_field (|
                                                                    M.read (| step |),
                                                                    "delphinus_zkwasm::circuits::utils::step_status::StepStatus",
                                                                    "current"
                                                                  |)
                                                                |),
                                                                "delphinus_zkwasm::circuits::utils::step_status::Status",
                                                                "host_public_inputs"
                                                              |)
                                                            |))
                                                        |)
                                                      ]
                                                    |)
                                                  ]
                                                |)
                                              ]
                                            |)
                                          |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let γ0_0 :=
                                                  M.SubPointer.get_struct_tuple_field (|
                                                    γ,
                                                    "core::ops::control_flow::ControlFlow::Break",
                                                    0
                                                  |) in
                                                let residual := M.copy (| γ0_0 |) in
                                                M.alloc (|
                                                  M.never_to_any (|
                                                    M.read (|
                                                      M.return_ (|
                                                        M.call_closure (|
                                                          M.get_trait_method (|
                                                            "core::ops::try_trait::FromResidual",
                                                            Ty.apply
                                                              (Ty.path "core::result::Result")
                                                              [
                                                                Ty.tuple [];
                                                                Ty.path
                                                                  "halo2_proofs::plonk::error::Error"
                                                              ],
                                                            [
                                                              Ty.apply
                                                                (Ty.path "core::result::Result")
                                                                [
                                                                  Ty.path
                                                                    "core::convert::Infallible";
                                                                  Ty.path
                                                                    "halo2_proofs::plonk::error::Error"
                                                                ]
                                                            ],
                                                            "from_residual",
                                                            []
                                                          |),
                                                          [ M.read (| residual |) ]
                                                        |)
                                                      |)
                                                    |)
                                                  |)
                                                |)));
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let γ0_0 :=
                                                  M.SubPointer.get_struct_tuple_field (|
                                                    γ,
                                                    "core::ops::control_flow::ControlFlow::Continue",
                                                    0
                                                  |) in
                                                let val := M.copy (| γ0_0 |) in
                                                val))
                                          ]
                                        |) in
                                      let _ :=
                                        M.match_operator (|
                                          M.alloc (|
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "core::ops::try_trait::Try",
                                                Ty.apply
                                                  (Ty.path "core::result::Result")
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "halo2_proofs::circuit::AssignedCell")
                                                      [ F; F ];
                                                    Ty.path "halo2_proofs::plonk::error::Error"
                                                  ],
                                                [],
                                                "branch",
                                                []
                                              |),
                                              [
                                                M.call_closure (|
                                                  M.get_trait_method (|
                                                    "delphinus_zkwasm::circuits::cell::CellExpression",
                                                    Ty.apply
                                                      (Ty.path
                                                        "delphinus_zkwasm::circuits::cell::AllocatedUnlimitedCell")
                                                      [ F ],
                                                    [ F ],
                                                    "assign",
                                                    []
                                                  |),
                                                  [
                                                    M.SubPointer.get_struct_record_field (|
                                                      M.read (| self |),
                                                      "delphinus_zkwasm::foreign::wasm_input_helper::etable_op_configure::ETableWasmInputHelperTableConfig",
                                                      "value_for_lookup"
                                                    |);
                                                    M.read (| ctx |);
                                                    M.call_closure (|
                                                      M.get_trait_method (|
                                                        "core::convert::Into",
                                                        Ty.path "u64",
                                                        [ F ],
                                                        "into",
                                                        []
                                                      |),
                                                      [
                                                        BinOp.Panic.mul (|
                                                          Integer.U64,
                                                          M.rust_cast (M.read (| is_public |)),
                                                          M.read (| value |)
                                                        |)
                                                      ]
                                                    |)
                                                  ]
                                                |)
                                              ]
                                            |)
                                          |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let γ0_0 :=
                                                  M.SubPointer.get_struct_tuple_field (|
                                                    γ,
                                                    "core::ops::control_flow::ControlFlow::Break",
                                                    0
                                                  |) in
                                                let residual := M.copy (| γ0_0 |) in
                                                M.alloc (|
                                                  M.never_to_any (|
                                                    M.read (|
                                                      M.return_ (|
                                                        M.call_closure (|
                                                          M.get_trait_method (|
                                                            "core::ops::try_trait::FromResidual",
                                                            Ty.apply
                                                              (Ty.path "core::result::Result")
                                                              [
                                                                Ty.tuple [];
                                                                Ty.path
                                                                  "halo2_proofs::plonk::error::Error"
                                                              ],
                                                            [
                                                              Ty.apply
                                                                (Ty.path "core::result::Result")
                                                                [
                                                                  Ty.path
                                                                    "core::convert::Infallible";
                                                                  Ty.path
                                                                    "halo2_proofs::plonk::error::Error"
                                                                ]
                                                            ],
                                                            "from_residual",
                                                            []
                                                          |),
                                                          [ M.read (| residual |) ]
                                                        |)
                                                      |)
                                                    |)
                                                  |)
                                                |)));
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let γ0_0 :=
                                                  M.SubPointer.get_struct_tuple_field (|
                                                    γ,
                                                    "core::ops::control_flow::ControlFlow::Continue",
                                                    0
                                                  |) in
                                                let val := M.copy (| γ0_0 |) in
                                                val))
                                          ]
                                        |) in
                                      let _ :=
                                        M.match_operator (|
                                          M.alloc (|
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "core::ops::try_trait::Try",
                                                Ty.apply
                                                  (Ty.path "core::result::Result")
                                                  [
                                                    Ty.tuple [];
                                                    Ty.path "halo2_proofs::plonk::error::Error"
                                                  ],
                                                [],
                                                "branch",
                                                []
                                              |),
                                              [
                                                M.call_closure (|
                                                  M.get_associated_function (|
                                                    Ty.apply
                                                      (Ty.path
                                                        "delphinus_zkwasm::circuits::etable::allocator::AllocatedMemoryTableLookupReadCell")
                                                      [ F ],
                                                    "assign",
                                                    []
                                                  |),
                                                  [
                                                    M.SubPointer.get_struct_record_field (|
                                                      M.read (| self |),
                                                      "delphinus_zkwasm::foreign::wasm_input_helper::etable_op_configure::ETableWasmInputHelperTableConfig",
                                                      "lookup_read_stack"
                                                    |);
                                                    M.read (| ctx |);
                                                    M.read (|
                                                      M.SubPointer.get_struct_record_field (|
                                                        M.call_closure (|
                                                          M.get_trait_method (|
                                                            "core::ops::index::Index",
                                                            Ty.apply
                                                              (Ty.path "alloc::vec::Vec")
                                                              [
                                                                Ty.path
                                                                  "delphinus_zkwasm::circuits::utils::table_entry::MemoryRWEntry";
                                                                Ty.path "alloc::alloc::Global"
                                                              ],
                                                            [ Ty.path "usize" ],
                                                            "index",
                                                            []
                                                          |),
                                                          [
                                                            M.SubPointer.get_struct_record_field (|
                                                              M.read (| entry |),
                                                              "delphinus_zkwasm::circuits::utils::table_entry::EventTableEntryWithMemoryInfo",
                                                              "memory_rw_entires"
                                                            |);
                                                            Value.Integer 0
                                                          ]
                                                        |),
                                                        "delphinus_zkwasm::circuits::utils::table_entry::MemoryRWEntry",
                                                        "start_eid"
                                                      |)
                                                    |);
                                                    M.read (|
                                                      M.SubPointer.get_struct_record_field (|
                                                        M.read (|
                                                          M.SubPointer.get_struct_record_field (|
                                                            M.read (| step |),
                                                            "delphinus_zkwasm::circuits::utils::step_status::StepStatus",
                                                            "current"
                                                          |)
                                                        |),
                                                        "delphinus_zkwasm::circuits::utils::step_status::Status",
                                                        "eid"
                                                      |)
                                                    |);
                                                    M.read (|
                                                      M.SubPointer.get_struct_record_field (|
                                                        M.call_closure (|
                                                          M.get_trait_method (|
                                                            "core::ops::index::Index",
                                                            Ty.apply
                                                              (Ty.path "alloc::vec::Vec")
                                                              [
                                                                Ty.path
                                                                  "delphinus_zkwasm::circuits::utils::table_entry::MemoryRWEntry";
                                                                Ty.path "alloc::alloc::Global"
                                                              ],
                                                            [ Ty.path "usize" ],
                                                            "index",
                                                            []
                                                          |),
                                                          [
                                                            M.SubPointer.get_struct_record_field (|
                                                              M.read (| entry |),
                                                              "delphinus_zkwasm::circuits::utils::table_entry::EventTableEntryWithMemoryInfo",
                                                              "memory_rw_entires"
                                                            |);
                                                            Value.Integer 0
                                                          ]
                                                        |),
                                                        "delphinus_zkwasm::circuits::utils::table_entry::MemoryRWEntry",
                                                        "end_eid"
                                                      |)
                                                    |);
                                                    BinOp.Panic.add (|
                                                      Integer.U32,
                                                      M.read (|
                                                        M.SubPointer.get_struct_record_field (|
                                                          M.read (|
                                                            M.SubPointer.get_struct_record_field (|
                                                              M.read (| step |),
                                                              "delphinus_zkwasm::circuits::utils::step_status::StepStatus",
                                                              "current"
                                                            |)
                                                          |),
                                                          "delphinus_zkwasm::circuits::utils::step_status::Status",
                                                          "sp"
                                                        |)
                                                      |),
                                                      Value.Integer 1
                                                    |);
                                                    Value.StructTuple
                                                      "specs::mtable::LocationType::Stack"
                                                      [];
                                                    Value.Bool true;
                                                    M.read (|
                                                      M.call_closure (|
                                                        M.get_associated_function (|
                                                          Ty.apply
                                                            (Ty.path "core::option::Option")
                                                            [
                                                              Ty.apply
                                                                (Ty.path "&")
                                                                [ Ty.path "u64" ]
                                                            ],
                                                          "unwrap",
                                                          []
                                                        |),
                                                        [
                                                          M.call_closure (|
                                                            M.get_associated_function (|
                                                              Ty.apply
                                                                (Ty.path "slice")
                                                                [ Ty.path "u64" ],
                                                              "get",
                                                              [ Ty.path "usize" ]
                                                            |),
                                                            [
                                                              M.call_closure (|
                                                                M.get_trait_method (|
                                                                  "core::ops::deref::Deref",
                                                                  Ty.apply
                                                                    (Ty.path "alloc::vec::Vec")
                                                                    [
                                                                      Ty.path "u64";
                                                                      Ty.path "alloc::alloc::Global"
                                                                    ],
                                                                  [],
                                                                  "deref",
                                                                  []
                                                                |),
                                                                [ M.read (| args |) ]
                                                              |);
                                                              Value.Integer 0
                                                            ]
                                                          |)
                                                        ]
                                                      |)
                                                    |)
                                                  ]
                                                |)
                                              ]
                                            |)
                                          |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let γ0_0 :=
                                                  M.SubPointer.get_struct_tuple_field (|
                                                    γ,
                                                    "core::ops::control_flow::ControlFlow::Break",
                                                    0
                                                  |) in
                                                let residual := M.copy (| γ0_0 |) in
                                                M.alloc (|
                                                  M.never_to_any (|
                                                    M.read (|
                                                      M.return_ (|
                                                        M.call_closure (|
                                                          M.get_trait_method (|
                                                            "core::ops::try_trait::FromResidual",
                                                            Ty.apply
                                                              (Ty.path "core::result::Result")
                                                              [
                                                                Ty.tuple [];
                                                                Ty.path
                                                                  "halo2_proofs::plonk::error::Error"
                                                              ],
                                                            [
                                                              Ty.apply
                                                                (Ty.path "core::result::Result")
                                                                [
                                                                  Ty.path
                                                                    "core::convert::Infallible";
                                                                  Ty.path
                                                                    "halo2_proofs::plonk::error::Error"
                                                                ]
                                                            ],
                                                            "from_residual",
                                                            []
                                                          |),
                                                          [ M.read (| residual |) ]
                                                        |)
                                                      |)
                                                    |)
                                                  |)
                                                |)));
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let γ0_0 :=
                                                  M.SubPointer.get_struct_tuple_field (|
                                                    γ,
                                                    "core::ops::control_flow::ControlFlow::Continue",
                                                    0
                                                  |) in
                                                let val := M.copy (| γ0_0 |) in
                                                val))
                                          ]
                                        |) in
                                      let _ :=
                                        M.match_operator (|
                                          M.alloc (|
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "core::ops::try_trait::Try",
                                                Ty.apply
                                                  (Ty.path "core::result::Result")
                                                  [
                                                    Ty.tuple [];
                                                    Ty.path "halo2_proofs::plonk::error::Error"
                                                  ],
                                                [],
                                                "branch",
                                                []
                                              |),
                                              [
                                                M.call_closure (|
                                                  M.get_associated_function (|
                                                    Ty.apply
                                                      (Ty.path
                                                        "delphinus_zkwasm::circuits::etable::allocator::AllocatedMemoryTableLookupWriteCell")
                                                      [ F ],
                                                    "assign",
                                                    []
                                                  |),
                                                  [
                                                    M.SubPointer.get_struct_record_field (|
                                                      M.read (| self |),
                                                      "delphinus_zkwasm::foreign::wasm_input_helper::etable_op_configure::ETableWasmInputHelperTableConfig",
                                                      "lookup_write_stack"
                                                    |);
                                                    M.read (| ctx |);
                                                    M.read (|
                                                      M.SubPointer.get_struct_record_field (|
                                                        M.read (|
                                                          M.SubPointer.get_struct_record_field (|
                                                            M.read (| step |),
                                                            "delphinus_zkwasm::circuits::utils::step_status::StepStatus",
                                                            "current"
                                                          |)
                                                        |),
                                                        "delphinus_zkwasm::circuits::utils::step_status::Status",
                                                        "eid"
                                                      |)
                                                    |);
                                                    M.read (|
                                                      M.SubPointer.get_struct_record_field (|
                                                        M.call_closure (|
                                                          M.get_trait_method (|
                                                            "core::ops::index::Index",
                                                            Ty.apply
                                                              (Ty.path "alloc::vec::Vec")
                                                              [
                                                                Ty.path
                                                                  "delphinus_zkwasm::circuits::utils::table_entry::MemoryRWEntry";
                                                                Ty.path "alloc::alloc::Global"
                                                              ],
                                                            [ Ty.path "usize" ],
                                                            "index",
                                                            []
                                                          |),
                                                          [
                                                            M.SubPointer.get_struct_record_field (|
                                                              M.read (| entry |),
                                                              "delphinus_zkwasm::circuits::utils::table_entry::EventTableEntryWithMemoryInfo",
                                                              "memory_rw_entires"
                                                            |);
                                                            Value.Integer 1
                                                          ]
                                                        |),
                                                        "delphinus_zkwasm::circuits::utils::table_entry::MemoryRWEntry",
                                                        "end_eid"
                                                      |)
                                                    |);
                                                    BinOp.Panic.add (|
                                                      Integer.U32,
                                                      M.read (|
                                                        M.SubPointer.get_struct_record_field (|
                                                          M.read (|
                                                            M.SubPointer.get_struct_record_field (|
                                                              M.read (| step |),
                                                              "delphinus_zkwasm::circuits::utils::step_status::StepStatus",
                                                              "current"
                                                            |)
                                                          |),
                                                          "delphinus_zkwasm::circuits::utils::step_status::Status",
                                                          "sp"
                                                        |)
                                                      |),
                                                      Value.Integer 1
                                                    |);
                                                    Value.StructTuple
                                                      "specs::mtable::LocationType::Stack"
                                                      [];
                                                    Value.Bool false;
                                                    M.call_closure (|
                                                      M.get_associated_function (|
                                                        Ty.apply
                                                          (Ty.path "core::option::Option")
                                                          [ Ty.path "u64" ],
                                                        "unwrap",
                                                        []
                                                      |),
                                                      [ M.read (| M.read (| ret_val |) |) ]
                                                    |)
                                                  ]
                                                |)
                                              ]
                                            |)
                                          |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let γ0_0 :=
                                                  M.SubPointer.get_struct_tuple_field (|
                                                    γ,
                                                    "core::ops::control_flow::ControlFlow::Break",
                                                    0
                                                  |) in
                                                let residual := M.copy (| γ0_0 |) in
                                                M.alloc (|
                                                  M.never_to_any (|
                                                    M.read (|
                                                      M.return_ (|
                                                        M.call_closure (|
                                                          M.get_trait_method (|
                                                            "core::ops::try_trait::FromResidual",
                                                            Ty.apply
                                                              (Ty.path "core::result::Result")
                                                              [
                                                                Ty.tuple [];
                                                                Ty.path
                                                                  "halo2_proofs::plonk::error::Error"
                                                              ],
                                                            [
                                                              Ty.apply
                                                                (Ty.path "core::result::Result")
                                                                [
                                                                  Ty.path
                                                                    "core::convert::Infallible";
                                                                  Ty.path
                                                                    "halo2_proofs::plonk::error::Error"
                                                                ]
                                                            ],
                                                            "from_residual",
                                                            []
                                                          |),
                                                          [ M.read (| residual |) ]
                                                        |)
                                                      |)
                                                    |)
                                                  |)
                                                |)));
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let γ0_0 :=
                                                  M.SubPointer.get_struct_tuple_field (|
                                                    γ,
                                                    "core::ops::control_flow::ControlFlow::Continue",
                                                    0
                                                  |) in
                                                let val := M.copy (| γ0_0 |) in
                                                val))
                                          ]
                                        |) in
                                      M.alloc (| Value.Tuple [] |)));
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let arg_type :=
                                        M.alloc (|
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "core::convert::Into",
                                              Ty.path "specs::types::ValueType",
                                              [ Ty.path "specs::mtable::VarType" ],
                                              "into",
                                              []
                                            |),
                                            [
                                              M.read (|
                                                M.call_closure (|
                                                  M.get_associated_function (|
                                                    Ty.apply
                                                      (Ty.path "core::option::Option")
                                                      [
                                                        Ty.apply
                                                          (Ty.path "&")
                                                          [ Ty.path "specs::types::ValueType" ]
                                                      ],
                                                    "unwrap",
                                                    []
                                                  |),
                                                  [
                                                    M.call_closure (|
                                                      M.get_associated_function (|
                                                        Ty.apply
                                                          (Ty.path "slice")
                                                          [ Ty.path "specs::types::ValueType" ],
                                                        "get",
                                                        [ Ty.path "usize" ]
                                                      |),
                                                      [
                                                        M.call_closure (|
                                                          M.get_trait_method (|
                                                            "core::ops::deref::Deref",
                                                            Ty.apply
                                                              (Ty.path "alloc::vec::Vec")
                                                              [
                                                                Ty.path "specs::types::ValueType";
                                                                Ty.path "alloc::alloc::Global"
                                                              ],
                                                            [],
                                                            "deref",
                                                            []
                                                          |),
                                                          [
                                                            M.SubPointer.get_struct_record_field (|
                                                              M.read (| signature |),
                                                              "specs::host_function::Signature",
                                                              "params"
                                                            |)
                                                          ]
                                                        |);
                                                        Value.Integer 0
                                                      ]
                                                    |)
                                                  ]
                                                |)
                                              |)
                                            ]
                                          |)
                                        |) in
                                      let _ :=
                                        M.match_operator (|
                                          M.alloc (|
                                            Value.Tuple
                                              [
                                                M.alloc (|
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.apply
                                                        (Ty.path "alloc::vec::Vec")
                                                        [
                                                          Ty.path "u64";
                                                          Ty.path "alloc::alloc::Global"
                                                        ],
                                                      "len",
                                                      []
                                                    |),
                                                    [ M.read (| args |) ]
                                                  |)
                                                |);
                                                M.alloc (| Value.Integer 1 |)
                                              ]
                                          |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let γ0_0 :=
                                                  M.SubPointer.get_tuple_field (| γ, 0 |) in
                                                let γ0_1 :=
                                                  M.SubPointer.get_tuple_field (| γ, 1 |) in
                                                let left_val := M.copy (| γ0_0 |) in
                                                let right_val := M.copy (| γ0_1 |) in
                                                M.match_operator (|
                                                  M.alloc (| Value.Tuple [] |),
                                                  [
                                                    fun γ =>
                                                      ltac:(M.monadic
                                                        (let γ :=
                                                          M.use
                                                            (M.alloc (|
                                                              UnOp.Pure.not
                                                                (BinOp.Pure.eq
                                                                  (M.read (|
                                                                    M.read (| left_val |)
                                                                  |))
                                                                  (M.read (|
                                                                    M.read (| right_val |)
                                                                  |)))
                                                            |)) in
                                                        let _ :=
                                                          M.is_constant_or_break_match (|
                                                            M.read (| γ |),
                                                            Value.Bool true
                                                          |) in
                                                        M.alloc (|
                                                          M.never_to_any (|
                                                            M.read (|
                                                              let kind :=
                                                                M.alloc (|
                                                                  Value.StructTuple
                                                                    "core::panicking::AssertKind::Eq"
                                                                    []
                                                                |) in
                                                              M.alloc (|
                                                                M.call_closure (|
                                                                  M.get_function (|
                                                                    "core::panicking::assert_failed",
                                                                    [
                                                                      Ty.path "usize";
                                                                      Ty.path "usize"
                                                                    ]
                                                                  |),
                                                                  [
                                                                    M.read (| kind |);
                                                                    M.read (| left_val |);
                                                                    M.read (| right_val |);
                                                                    Value.StructTuple
                                                                      "core::option::Option::None"
                                                                      []
                                                                  ]
                                                                |)
                                                              |)
                                                            |)
                                                          |)
                                                        |)));
                                                    fun γ =>
                                                      ltac:(M.monadic
                                                        (M.alloc (| Value.Tuple [] |)))
                                                  ]
                                                |)))
                                          ]
                                        |) in
                                      let _ :=
                                        M.match_operator (|
                                          M.alloc (|
                                            Value.Tuple
                                              [
                                                arg_type;
                                                M.alloc (|
                                                  Value.StructTuple "specs::mtable::VarType::I64" []
                                                |)
                                              ]
                                          |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let γ0_0 :=
                                                  M.SubPointer.get_tuple_field (| γ, 0 |) in
                                                let γ0_1 :=
                                                  M.SubPointer.get_tuple_field (| γ, 1 |) in
                                                let left_val := M.copy (| γ0_0 |) in
                                                let right_val := M.copy (| γ0_1 |) in
                                                M.match_operator (|
                                                  M.alloc (| Value.Tuple [] |),
                                                  [
                                                    fun γ =>
                                                      ltac:(M.monadic
                                                        (let γ :=
                                                          M.use
                                                            (M.alloc (|
                                                              UnOp.Pure.not
                                                                (M.call_closure (|
                                                                  M.get_trait_method (|
                                                                    "core::cmp::PartialEq",
                                                                    Ty.path
                                                                      "specs::mtable::VarType",
                                                                    [
                                                                      Ty.path
                                                                        "specs::mtable::VarType"
                                                                    ],
                                                                    "eq",
                                                                    []
                                                                  |),
                                                                  [
                                                                    M.read (| left_val |);
                                                                    M.read (| right_val |)
                                                                  ]
                                                                |))
                                                            |)) in
                                                        let _ :=
                                                          M.is_constant_or_break_match (|
                                                            M.read (| γ |),
                                                            Value.Bool true
                                                          |) in
                                                        M.alloc (|
                                                          M.never_to_any (|
                                                            M.read (|
                                                              let kind :=
                                                                M.alloc (|
                                                                  Value.StructTuple
                                                                    "core::panicking::AssertKind::Eq"
                                                                    []
                                                                |) in
                                                              M.alloc (|
                                                                M.call_closure (|
                                                                  M.get_function (|
                                                                    "core::panicking::assert_failed",
                                                                    [
                                                                      Ty.path
                                                                        "specs::mtable::VarType";
                                                                      Ty.path
                                                                        "specs::mtable::VarType"
                                                                    ]
                                                                  |),
                                                                  [
                                                                    M.read (| kind |);
                                                                    M.read (| left_val |);
                                                                    M.read (| right_val |);
                                                                    Value.StructTuple
                                                                      "core::option::Option::None"
                                                                      []
                                                                  ]
                                                                |)
                                                              |)
                                                            |)
                                                          |)
                                                        |)));
                                                    fun γ =>
                                                      ltac:(M.monadic
                                                        (M.alloc (| Value.Tuple [] |)))
                                                  ]
                                                |)))
                                          ]
                                        |) in
                                      let value :=
                                        M.copy (|
                                          M.call_closure (|
                                            M.get_associated_function (|
                                              Ty.apply
                                                (Ty.path "core::option::Option")
                                                [ Ty.apply (Ty.path "&") [ Ty.path "u64" ] ],
                                              "unwrap",
                                              []
                                            |),
                                            [
                                              M.call_closure (|
                                                M.get_associated_function (|
                                                  Ty.apply (Ty.path "slice") [ Ty.path "u64" ],
                                                  "first",
                                                  []
                                                |),
                                                [
                                                  M.call_closure (|
                                                    M.get_trait_method (|
                                                      "core::ops::deref::Deref",
                                                      Ty.apply
                                                        (Ty.path "alloc::vec::Vec")
                                                        [
                                                          Ty.path "u64";
                                                          Ty.path "alloc::alloc::Global"
                                                        ],
                                                      [],
                                                      "deref",
                                                      []
                                                    |),
                                                    [ M.read (| args |) ]
                                                  |)
                                                ]
                                              |)
                                            ]
                                          |)
                                        |) in
                                      let _ :=
                                        M.match_operator (|
                                          M.alloc (|
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "core::ops::try_trait::Try",
                                                Ty.apply
                                                  (Ty.path "core::result::Result")
                                                  [
                                                    Ty.tuple [];
                                                    Ty.path "halo2_proofs::plonk::error::Error"
                                                  ],
                                                [],
                                                "branch",
                                                []
                                              |),
                                              [
                                                M.call_closure (|
                                                  M.get_associated_function (|
                                                    Ty.apply
                                                      (Ty.path
                                                        "delphinus_zkwasm::circuits::cell::AllocatedU64Cell")
                                                      [ F ],
                                                    "assign",
                                                    []
                                                  |),
                                                  [
                                                    M.SubPointer.get_struct_record_field (|
                                                      M.read (| self |),
                                                      "delphinus_zkwasm::foreign::wasm_input_helper::etable_op_configure::ETableWasmInputHelperTableConfig",
                                                      "value"
                                                    |);
                                                    M.read (| ctx |);
                                                    M.read (| value |)
                                                  ]
                                                |)
                                              ]
                                            |)
                                          |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let γ0_0 :=
                                                  M.SubPointer.get_struct_tuple_field (|
                                                    γ,
                                                    "core::ops::control_flow::ControlFlow::Break",
                                                    0
                                                  |) in
                                                let residual := M.copy (| γ0_0 |) in
                                                M.alloc (|
                                                  M.never_to_any (|
                                                    M.read (|
                                                      M.return_ (|
                                                        M.call_closure (|
                                                          M.get_trait_method (|
                                                            "core::ops::try_trait::FromResidual",
                                                            Ty.apply
                                                              (Ty.path "core::result::Result")
                                                              [
                                                                Ty.tuple [];
                                                                Ty.path
                                                                  "halo2_proofs::plonk::error::Error"
                                                              ],
                                                            [
                                                              Ty.apply
                                                                (Ty.path "core::result::Result")
                                                                [
                                                                  Ty.path
                                                                    "core::convert::Infallible";
                                                                  Ty.path
                                                                    "halo2_proofs::plonk::error::Error"
                                                                ]
                                                            ],
                                                            "from_residual",
                                                            []
                                                          |),
                                                          [ M.read (| residual |) ]
                                                        |)
                                                      |)
                                                    |)
                                                  |)
                                                |)));
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let γ0_0 :=
                                                  M.SubPointer.get_struct_tuple_field (|
                                                    γ,
                                                    "core::ops::control_flow::ControlFlow::Continue",
                                                    0
                                                  |) in
                                                let val := M.copy (| γ0_0 |) in
                                                val))
                                          ]
                                        |) in
                                      let _ :=
                                        M.match_operator (|
                                          M.alloc (|
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "core::ops::try_trait::Try",
                                                Ty.apply
                                                  (Ty.path "core::result::Result")
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "halo2_proofs::circuit::AssignedCell")
                                                      [ F; F ];
                                                    Ty.path "halo2_proofs::plonk::error::Error"
                                                  ],
                                                [],
                                                "branch",
                                                []
                                              |),
                                              [
                                                M.call_closure (|
                                                  M.get_trait_method (|
                                                    "delphinus_zkwasm::circuits::cell::CellExpression",
                                                    Ty.apply
                                                      (Ty.path
                                                        "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                                      [ F ],
                                                    [ F ],
                                                    "assign_bool",
                                                    []
                                                  |),
                                                  [
                                                    M.SubPointer.get_struct_record_field (|
                                                      M.read (| self |),
                                                      "delphinus_zkwasm::foreign::wasm_input_helper::etable_op_configure::ETableWasmInputHelperTableConfig",
                                                      "is_wasm_output_op"
                                                    |);
                                                    M.read (| ctx |);
                                                    Value.Bool true
                                                  ]
                                                |)
                                              ]
                                            |)
                                          |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let γ0_0 :=
                                                  M.SubPointer.get_struct_tuple_field (|
                                                    γ,
                                                    "core::ops::control_flow::ControlFlow::Break",
                                                    0
                                                  |) in
                                                let residual := M.copy (| γ0_0 |) in
                                                M.alloc (|
                                                  M.never_to_any (|
                                                    M.read (|
                                                      M.return_ (|
                                                        M.call_closure (|
                                                          M.get_trait_method (|
                                                            "core::ops::try_trait::FromResidual",
                                                            Ty.apply
                                                              (Ty.path "core::result::Result")
                                                              [
                                                                Ty.tuple [];
                                                                Ty.path
                                                                  "halo2_proofs::plonk::error::Error"
                                                              ],
                                                            [
                                                              Ty.apply
                                                                (Ty.path "core::result::Result")
                                                                [
                                                                  Ty.path
                                                                    "core::convert::Infallible";
                                                                  Ty.path
                                                                    "halo2_proofs::plonk::error::Error"
                                                                ]
                                                            ],
                                                            "from_residual",
                                                            []
                                                          |),
                                                          [ M.read (| residual |) ]
                                                        |)
                                                      |)
                                                    |)
                                                  |)
                                                |)));
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let γ0_0 :=
                                                  M.SubPointer.get_struct_tuple_field (|
                                                    γ,
                                                    "core::ops::control_flow::ControlFlow::Continue",
                                                    0
                                                  |) in
                                                let val := M.copy (| γ0_0 |) in
                                                val))
                                          ]
                                        |) in
                                      let _ :=
                                        M.match_operator (|
                                          M.alloc (|
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "core::ops::try_trait::Try",
                                                Ty.apply
                                                  (Ty.path "core::result::Result")
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "halo2_proofs::circuit::AssignedCell")
                                                      [ F; F ];
                                                    Ty.path "halo2_proofs::plonk::error::Error"
                                                  ],
                                                [],
                                                "branch",
                                                []
                                              |),
                                              [
                                                M.call_closure (|
                                                  M.get_trait_method (|
                                                    "delphinus_zkwasm::circuits::cell::CellExpression",
                                                    Ty.apply
                                                      (Ty.path
                                                        "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                                      [ F ],
                                                    [ F ],
                                                    "assign_bool",
                                                    []
                                                  |),
                                                  [
                                                    M.SubPointer.get_struct_record_field (|
                                                      M.read (| self |),
                                                      "delphinus_zkwasm::foreign::wasm_input_helper::etable_op_configure::ETableWasmInputHelperTableConfig",
                                                      "enable_input_table_lookup"
                                                    |);
                                                    M.read (| ctx |);
                                                    Value.Bool true
                                                  ]
                                                |)
                                              ]
                                            |)
                                          |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let γ0_0 :=
                                                  M.SubPointer.get_struct_tuple_field (|
                                                    γ,
                                                    "core::ops::control_flow::ControlFlow::Break",
                                                    0
                                                  |) in
                                                let residual := M.copy (| γ0_0 |) in
                                                M.alloc (|
                                                  M.never_to_any (|
                                                    M.read (|
                                                      M.return_ (|
                                                        M.call_closure (|
                                                          M.get_trait_method (|
                                                            "core::ops::try_trait::FromResidual",
                                                            Ty.apply
                                                              (Ty.path "core::result::Result")
                                                              [
                                                                Ty.tuple [];
                                                                Ty.path
                                                                  "halo2_proofs::plonk::error::Error"
                                                              ],
                                                            [
                                                              Ty.apply
                                                                (Ty.path "core::result::Result")
                                                                [
                                                                  Ty.path
                                                                    "core::convert::Infallible";
                                                                  Ty.path
                                                                    "halo2_proofs::plonk::error::Error"
                                                                ]
                                                            ],
                                                            "from_residual",
                                                            []
                                                          |),
                                                          [ M.read (| residual |) ]
                                                        |)
                                                      |)
                                                    |)
                                                  |)
                                                |)));
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let γ0_0 :=
                                                  M.SubPointer.get_struct_tuple_field (|
                                                    γ,
                                                    "core::ops::control_flow::ControlFlow::Continue",
                                                    0
                                                  |) in
                                                let val := M.copy (| γ0_0 |) in
                                                val))
                                          ]
                                        |) in
                                      let _ :=
                                        M.match_operator (|
                                          M.alloc (|
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "core::ops::try_trait::Try",
                                                Ty.apply
                                                  (Ty.path "core::result::Result")
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "halo2_proofs::circuit::AssignedCell")
                                                      [ F; F ];
                                                    Ty.path "halo2_proofs::plonk::error::Error"
                                                  ],
                                                [],
                                                "branch",
                                                []
                                              |),
                                              [
                                                M.call_closure (|
                                                  M.get_trait_method (|
                                                    "delphinus_zkwasm::circuits::cell::CellExpression",
                                                    Ty.apply
                                                      (Ty.path
                                                        "delphinus_zkwasm::circuits::cell::AllocatedUnlimitedCell")
                                                      [ F ],
                                                    [ F ],
                                                    "assign",
                                                    []
                                                  |),
                                                  [
                                                    M.SubPointer.get_struct_record_field (|
                                                      M.read (| self |),
                                                      "delphinus_zkwasm::foreign::wasm_input_helper::etable_op_configure::ETableWasmInputHelperTableConfig",
                                                      "public_input_index_for_lookup"
                                                    |);
                                                    M.read (| ctx |);
                                                    M.call_closure (|
                                                      M.get_trait_method (|
                                                        "core::convert::Into",
                                                        Ty.path "u64",
                                                        [ F ],
                                                        "into",
                                                        []
                                                      |),
                                                      [
                                                        M.rust_cast
                                                          (M.read (|
                                                            M.SubPointer.get_struct_record_field (|
                                                              M.read (|
                                                                M.SubPointer.get_struct_record_field (|
                                                                  M.read (| step |),
                                                                  "delphinus_zkwasm::circuits::utils::step_status::StepStatus",
                                                                  "current"
                                                                |)
                                                              |),
                                                              "delphinus_zkwasm::circuits::utils::step_status::Status",
                                                              "host_public_inputs"
                                                            |)
                                                          |))
                                                      ]
                                                    |)
                                                  ]
                                                |)
                                              ]
                                            |)
                                          |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let γ0_0 :=
                                                  M.SubPointer.get_struct_tuple_field (|
                                                    γ,
                                                    "core::ops::control_flow::ControlFlow::Break",
                                                    0
                                                  |) in
                                                let residual := M.copy (| γ0_0 |) in
                                                M.alloc (|
                                                  M.never_to_any (|
                                                    M.read (|
                                                      M.return_ (|
                                                        M.call_closure (|
                                                          M.get_trait_method (|
                                                            "core::ops::try_trait::FromResidual",
                                                            Ty.apply
                                                              (Ty.path "core::result::Result")
                                                              [
                                                                Ty.tuple [];
                                                                Ty.path
                                                                  "halo2_proofs::plonk::error::Error"
                                                              ],
                                                            [
                                                              Ty.apply
                                                                (Ty.path "core::result::Result")
                                                                [
                                                                  Ty.path
                                                                    "core::convert::Infallible";
                                                                  Ty.path
                                                                    "halo2_proofs::plonk::error::Error"
                                                                ]
                                                            ],
                                                            "from_residual",
                                                            []
                                                          |),
                                                          [ M.read (| residual |) ]
                                                        |)
                                                      |)
                                                    |)
                                                  |)
                                                |)));
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let γ0_0 :=
                                                  M.SubPointer.get_struct_tuple_field (|
                                                    γ,
                                                    "core::ops::control_flow::ControlFlow::Continue",
                                                    0
                                                  |) in
                                                let val := M.copy (| γ0_0 |) in
                                                val))
                                          ]
                                        |) in
                                      let _ :=
                                        M.match_operator (|
                                          M.alloc (|
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "core::ops::try_trait::Try",
                                                Ty.apply
                                                  (Ty.path "core::result::Result")
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "halo2_proofs::circuit::AssignedCell")
                                                      [ F; F ];
                                                    Ty.path "halo2_proofs::plonk::error::Error"
                                                  ],
                                                [],
                                                "branch",
                                                []
                                              |),
                                              [
                                                M.call_closure (|
                                                  M.get_trait_method (|
                                                    "delphinus_zkwasm::circuits::cell::CellExpression",
                                                    Ty.apply
                                                      (Ty.path
                                                        "delphinus_zkwasm::circuits::cell::AllocatedUnlimitedCell")
                                                      [ F ],
                                                    [ F ],
                                                    "assign",
                                                    []
                                                  |),
                                                  [
                                                    M.SubPointer.get_struct_record_field (|
                                                      M.read (| self |),
                                                      "delphinus_zkwasm::foreign::wasm_input_helper::etable_op_configure::ETableWasmInputHelperTableConfig",
                                                      "value_for_lookup"
                                                    |);
                                                    M.read (| ctx |);
                                                    M.call_closure (|
                                                      M.get_trait_method (|
                                                        "core::convert::Into",
                                                        Ty.path "u64",
                                                        [ F ],
                                                        "into",
                                                        []
                                                      |),
                                                      [ M.read (| value |) ]
                                                    |)
                                                  ]
                                                |)
                                              ]
                                            |)
                                          |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let γ0_0 :=
                                                  M.SubPointer.get_struct_tuple_field (|
                                                    γ,
                                                    "core::ops::control_flow::ControlFlow::Break",
                                                    0
                                                  |) in
                                                let residual := M.copy (| γ0_0 |) in
                                                M.alloc (|
                                                  M.never_to_any (|
                                                    M.read (|
                                                      M.return_ (|
                                                        M.call_closure (|
                                                          M.get_trait_method (|
                                                            "core::ops::try_trait::FromResidual",
                                                            Ty.apply
                                                              (Ty.path "core::result::Result")
                                                              [
                                                                Ty.tuple [];
                                                                Ty.path
                                                                  "halo2_proofs::plonk::error::Error"
                                                              ],
                                                            [
                                                              Ty.apply
                                                                (Ty.path "core::result::Result")
                                                                [
                                                                  Ty.path
                                                                    "core::convert::Infallible";
                                                                  Ty.path
                                                                    "halo2_proofs::plonk::error::Error"
                                                                ]
                                                            ],
                                                            "from_residual",
                                                            []
                                                          |),
                                                          [ M.read (| residual |) ]
                                                        |)
                                                      |)
                                                    |)
                                                  |)
                                                |)));
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let γ0_0 :=
                                                  M.SubPointer.get_struct_tuple_field (|
                                                    γ,
                                                    "core::ops::control_flow::ControlFlow::Continue",
                                                    0
                                                  |) in
                                                let val := M.copy (| γ0_0 |) in
                                                val))
                                          ]
                                        |) in
                                      let _ :=
                                        M.match_operator (|
                                          M.alloc (|
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "core::ops::try_trait::Try",
                                                Ty.apply
                                                  (Ty.path "core::result::Result")
                                                  [
                                                    Ty.tuple [];
                                                    Ty.path "halo2_proofs::plonk::error::Error"
                                                  ],
                                                [],
                                                "branch",
                                                []
                                              |),
                                              [
                                                M.call_closure (|
                                                  M.get_associated_function (|
                                                    Ty.apply
                                                      (Ty.path
                                                        "delphinus_zkwasm::circuits::etable::allocator::AllocatedMemoryTableLookupReadCell")
                                                      [ F ],
                                                    "assign",
                                                    []
                                                  |),
                                                  [
                                                    M.SubPointer.get_struct_record_field (|
                                                      M.read (| self |),
                                                      "delphinus_zkwasm::foreign::wasm_input_helper::etable_op_configure::ETableWasmInputHelperTableConfig",
                                                      "lookup_read_stack"
                                                    |);
                                                    M.read (| ctx |);
                                                    M.read (|
                                                      M.SubPointer.get_struct_record_field (|
                                                        M.call_closure (|
                                                          M.get_trait_method (|
                                                            "core::ops::index::Index",
                                                            Ty.apply
                                                              (Ty.path "alloc::vec::Vec")
                                                              [
                                                                Ty.path
                                                                  "delphinus_zkwasm::circuits::utils::table_entry::MemoryRWEntry";
                                                                Ty.path "alloc::alloc::Global"
                                                              ],
                                                            [ Ty.path "usize" ],
                                                            "index",
                                                            []
                                                          |),
                                                          [
                                                            M.SubPointer.get_struct_record_field (|
                                                              M.read (| entry |),
                                                              "delphinus_zkwasm::circuits::utils::table_entry::EventTableEntryWithMemoryInfo",
                                                              "memory_rw_entires"
                                                            |);
                                                            Value.Integer 0
                                                          ]
                                                        |),
                                                        "delphinus_zkwasm::circuits::utils::table_entry::MemoryRWEntry",
                                                        "start_eid"
                                                      |)
                                                    |);
                                                    M.read (|
                                                      M.SubPointer.get_struct_record_field (|
                                                        M.read (|
                                                          M.SubPointer.get_struct_record_field (|
                                                            M.read (| step |),
                                                            "delphinus_zkwasm::circuits::utils::step_status::StepStatus",
                                                            "current"
                                                          |)
                                                        |),
                                                        "delphinus_zkwasm::circuits::utils::step_status::Status",
                                                        "eid"
                                                      |)
                                                    |);
                                                    M.read (|
                                                      M.SubPointer.get_struct_record_field (|
                                                        M.call_closure (|
                                                          M.get_trait_method (|
                                                            "core::ops::index::Index",
                                                            Ty.apply
                                                              (Ty.path "alloc::vec::Vec")
                                                              [
                                                                Ty.path
                                                                  "delphinus_zkwasm::circuits::utils::table_entry::MemoryRWEntry";
                                                                Ty.path "alloc::alloc::Global"
                                                              ],
                                                            [ Ty.path "usize" ],
                                                            "index",
                                                            []
                                                          |),
                                                          [
                                                            M.SubPointer.get_struct_record_field (|
                                                              M.read (| entry |),
                                                              "delphinus_zkwasm::circuits::utils::table_entry::EventTableEntryWithMemoryInfo",
                                                              "memory_rw_entires"
                                                            |);
                                                            Value.Integer 0
                                                          ]
                                                        |),
                                                        "delphinus_zkwasm::circuits::utils::table_entry::MemoryRWEntry",
                                                        "end_eid"
                                                      |)
                                                    |);
                                                    BinOp.Panic.add (|
                                                      Integer.U32,
                                                      M.read (|
                                                        M.SubPointer.get_struct_record_field (|
                                                          M.read (|
                                                            M.SubPointer.get_struct_record_field (|
                                                              M.read (| step |),
                                                              "delphinus_zkwasm::circuits::utils::step_status::StepStatus",
                                                              "current"
                                                            |)
                                                          |),
                                                          "delphinus_zkwasm::circuits::utils::step_status::Status",
                                                          "sp"
                                                        |)
                                                      |),
                                                      Value.Integer 1
                                                    |);
                                                    Value.StructTuple
                                                      "specs::mtable::LocationType::Stack"
                                                      [];
                                                    Value.Bool false;
                                                    M.read (| value |)
                                                  ]
                                                |)
                                              ]
                                            |)
                                          |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let γ0_0 :=
                                                  M.SubPointer.get_struct_tuple_field (|
                                                    γ,
                                                    "core::ops::control_flow::ControlFlow::Break",
                                                    0
                                                  |) in
                                                let residual := M.copy (| γ0_0 |) in
                                                M.alloc (|
                                                  M.never_to_any (|
                                                    M.read (|
                                                      M.return_ (|
                                                        M.call_closure (|
                                                          M.get_trait_method (|
                                                            "core::ops::try_trait::FromResidual",
                                                            Ty.apply
                                                              (Ty.path "core::result::Result")
                                                              [
                                                                Ty.tuple [];
                                                                Ty.path
                                                                  "halo2_proofs::plonk::error::Error"
                                                              ],
                                                            [
                                                              Ty.apply
                                                                (Ty.path "core::result::Result")
                                                                [
                                                                  Ty.path
                                                                    "core::convert::Infallible";
                                                                  Ty.path
                                                                    "halo2_proofs::plonk::error::Error"
                                                                ]
                                                            ],
                                                            "from_residual",
                                                            []
                                                          |),
                                                          [ M.read (| residual |) ]
                                                        |)
                                                      |)
                                                    |)
                                                  |)
                                                |)));
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let γ0_0 :=
                                                  M.SubPointer.get_struct_tuple_field (|
                                                    γ,
                                                    "core::ops::control_flow::ControlFlow::Continue",
                                                    0
                                                  |) in
                                                let val := M.copy (| γ0_0 |) in
                                                val))
                                          ]
                                        |) in
                                      M.alloc (| Value.Tuple [] |)))
                                ]
                              |) in
                            M.alloc (|
                              Value.StructTuple "core::result::Result::Ok" [ Value.Tuple [] ]
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (M.alloc (|
                              M.never_to_any (|
                                M.call_closure (|
                                  M.get_function (| "core::panicking::panic", [] |),
                                  [
                                    M.read (|
                                      Value.String "internal error: entered unreachable code"
                                    |)
                                  ]
                                |)
                              |)
                            |)))
                      ]
                    |)
                  |)))
              |)))
          | _, _ => M.impossible
          end.
        
        (*
            fn mops(&self, meta: &mut VirtualCells<'_, F>) -> Option<Expression<F>> {
                Some(self.is_wasm_input_op.expr(meta))
            }
        *)
        Definition mops (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self F in
          match τ, α with
          | [], [ self; meta ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              let meta := M.alloc (| meta |) in
              Value.StructTuple
                "core::option::Option::Some"
                [
                  M.call_closure (|
                    M.get_trait_method (|
                      "delphinus_zkwasm::circuits::cell::CellExpression",
                      Ty.apply (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedBitCell") [ F ],
                      [ F ],
                      "expr",
                      []
                    |),
                    [
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "delphinus_zkwasm::foreign::wasm_input_helper::etable_op_configure::ETableWasmInputHelperTableConfig",
                        "is_wasm_input_op"
                      |);
                      M.read (| meta |)
                    ]
                  |)
                ]))
          | _, _ => M.impossible
          end.
        
        (*
            fn memory_writing_ops(&self, entry: &EventTableEntry) -> u32 {
                match &entry.step_info {
                    StepInfo::CallHost {
                        plugin,
                        op_index_in_plugin,
                        ..
                    } => {
                        assert_eq!( *plugin, HostPlugin::HostInput);
        
                        if *op_index_in_plugin == Op::WasmInput as usize {
                            1
                        } else {
                            0
                        }
                    }
                    _ => unreachable!(),
                }
            }
        *)
        Definition memory_writing_ops (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self F in
          match τ, α with
          | [], [ self; entry ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              let entry := M.alloc (| entry |) in
              M.read (|
                M.match_operator (|
                  M.alloc (|
                    M.SubPointer.get_struct_record_field (|
                      M.read (| entry |),
                      "specs::etable::EventTableEntry",
                      "step_info"
                    |)
                  |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let γ1_0 :=
                          M.SubPointer.get_struct_record_field (|
                            γ,
                            "specs::step::StepInfo::CallHost",
                            "plugin"
                          |) in
                        let γ1_1 :=
                          M.SubPointer.get_struct_record_field (|
                            γ,
                            "specs::step::StepInfo::CallHost",
                            "op_index_in_plugin"
                          |) in
                        let plugin := M.alloc (| γ1_0 |) in
                        let op_index_in_plugin := M.alloc (| γ1_1 |) in
                        let _ :=
                          M.match_operator (|
                            M.alloc (|
                              Value.Tuple
                                [
                                  M.read (| plugin |);
                                  M.alloc (|
                                    Value.StructTuple
                                      "specs::host_function::HostPlugin::HostInput"
                                      []
                                  |)
                                ]
                            |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                                  let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                                  let left_val := M.copy (| γ0_0 |) in
                                  let right_val := M.copy (| γ0_1 |) in
                                  M.match_operator (|
                                    M.alloc (| Value.Tuple [] |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let γ :=
                                            M.use
                                              (M.alloc (|
                                                UnOp.Pure.not
                                                  (M.call_closure (|
                                                    M.get_trait_method (|
                                                      "core::cmp::PartialEq",
                                                      Ty.path "specs::host_function::HostPlugin",
                                                      [ Ty.path "specs::host_function::HostPlugin"
                                                      ],
                                                      "eq",
                                                      []
                                                    |),
                                                    [ M.read (| left_val |); M.read (| right_val |)
                                                    ]
                                                  |))
                                              |)) in
                                          let _ :=
                                            M.is_constant_or_break_match (|
                                              M.read (| γ |),
                                              Value.Bool true
                                            |) in
                                          M.alloc (|
                                            M.never_to_any (|
                                              M.read (|
                                                let kind :=
                                                  M.alloc (|
                                                    Value.StructTuple
                                                      "core::panicking::AssertKind::Eq"
                                                      []
                                                  |) in
                                                M.alloc (|
                                                  M.call_closure (|
                                                    M.get_function (|
                                                      "core::panicking::assert_failed",
                                                      [
                                                        Ty.path "specs::host_function::HostPlugin";
                                                        Ty.path "specs::host_function::HostPlugin"
                                                      ]
                                                    |),
                                                    [
                                                      M.read (| kind |);
                                                      M.read (| left_val |);
                                                      M.read (| right_val |);
                                                      Value.StructTuple
                                                        "core::option::Option::None"
                                                        []
                                                    ]
                                                  |)
                                                |)
                                              |)
                                            |)
                                          |)));
                                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                    ]
                                  |)))
                            ]
                          |) in
                        M.match_operator (|
                          M.alloc (| Value.Tuple [] |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ :=
                                  M.use
                                    (M.alloc (|
                                      BinOp.Pure.eq
                                        (M.read (| M.read (| op_index_in_plugin |) |))
                                        (M.rust_cast
                                          (BinOp.Panic.add (|
                                            Integer.Isize,
                                            M.get_constant (|
                                              "delphinus_zkwasm::foreign::wasm_input_helper::Op::WasmInput_discriminant"
                                            |),
                                            Value.Integer 0
                                          |)))
                                    |)) in
                                let _ :=
                                  M.is_constant_or_break_match (|
                                    M.read (| γ |),
                                    Value.Bool true
                                  |) in
                                M.alloc (| Value.Integer 1 |)));
                            fun γ => ltac:(M.monadic (M.alloc (| Value.Integer 0 |)))
                          ]
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (M.alloc (|
                          M.never_to_any (|
                            M.call_closure (|
                              M.get_function (| "core::panicking::panic", [] |),
                              [ M.read (| Value.String "internal error: entered unreachable code" |)
                              ]
                            |)
                          |)
                        |)))
                  ]
                |)
              |)))
          | _, _ => M.impossible
          end.
        
        (*
            fn input_index_increase(
                &self,
                meta: &mut VirtualCells<'_, F>,
                _common_config: &EventTableCommonConfig<F>,
            ) -> Option<Expression<F>> {
                // Public wasm input or wasm output
                Some(self.enable_input_table_lookup.expr(meta))
            }
        *)
        Definition input_index_increase (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self F in
          match τ, α with
          | [], [ self; meta; _common_config ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              let meta := M.alloc (| meta |) in
              let _common_config := M.alloc (| _common_config |) in
              Value.StructTuple
                "core::option::Option::Some"
                [
                  M.call_closure (|
                    M.get_trait_method (|
                      "delphinus_zkwasm::circuits::cell::CellExpression",
                      Ty.apply (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedBitCell") [ F ],
                      [ F ],
                      "expr",
                      []
                    |),
                    [
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "delphinus_zkwasm::foreign::wasm_input_helper::etable_op_configure::ETableWasmInputHelperTableConfig",
                        "enable_input_table_lookup"
                      |);
                      M.read (| meta |)
                    ]
                  |)
                ]))
          | _, _ => M.impossible
          end.
        
        (*
            fn is_host_public_input(&self, entry: &EventTableEntry) -> bool {
                match &entry.step_info {
                    StepInfo::CallHost {
                        plugin,
                        args,
                        op_index_in_plugin,
                        ..
                    } => {
                        assert_eq!( *plugin, HostPlugin::HostInput);
        
                        *op_index_in_plugin == Op::WasmInput as usize && args[0] != 0
                            || *op_index_in_plugin == Op::WasmOutput as usize
                    }
                    _ => unreachable!(),
                }
            }
        *)
        Definition is_host_public_input (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self F in
          match τ, α with
          | [], [ self; entry ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              let entry := M.alloc (| entry |) in
              M.read (|
                M.match_operator (|
                  M.alloc (|
                    M.SubPointer.get_struct_record_field (|
                      M.read (| entry |),
                      "specs::etable::EventTableEntry",
                      "step_info"
                    |)
                  |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let γ1_0 :=
                          M.SubPointer.get_struct_record_field (|
                            γ,
                            "specs::step::StepInfo::CallHost",
                            "plugin"
                          |) in
                        let γ1_1 :=
                          M.SubPointer.get_struct_record_field (|
                            γ,
                            "specs::step::StepInfo::CallHost",
                            "args"
                          |) in
                        let γ1_2 :=
                          M.SubPointer.get_struct_record_field (|
                            γ,
                            "specs::step::StepInfo::CallHost",
                            "op_index_in_plugin"
                          |) in
                        let plugin := M.alloc (| γ1_0 |) in
                        let args := M.alloc (| γ1_1 |) in
                        let op_index_in_plugin := M.alloc (| γ1_2 |) in
                        let _ :=
                          M.match_operator (|
                            M.alloc (|
                              Value.Tuple
                                [
                                  M.read (| plugin |);
                                  M.alloc (|
                                    Value.StructTuple
                                      "specs::host_function::HostPlugin::HostInput"
                                      []
                                  |)
                                ]
                            |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                                  let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                                  let left_val := M.copy (| γ0_0 |) in
                                  let right_val := M.copy (| γ0_1 |) in
                                  M.match_operator (|
                                    M.alloc (| Value.Tuple [] |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let γ :=
                                            M.use
                                              (M.alloc (|
                                                UnOp.Pure.not
                                                  (M.call_closure (|
                                                    M.get_trait_method (|
                                                      "core::cmp::PartialEq",
                                                      Ty.path "specs::host_function::HostPlugin",
                                                      [ Ty.path "specs::host_function::HostPlugin"
                                                      ],
                                                      "eq",
                                                      []
                                                    |),
                                                    [ M.read (| left_val |); M.read (| right_val |)
                                                    ]
                                                  |))
                                              |)) in
                                          let _ :=
                                            M.is_constant_or_break_match (|
                                              M.read (| γ |),
                                              Value.Bool true
                                            |) in
                                          M.alloc (|
                                            M.never_to_any (|
                                              M.read (|
                                                let kind :=
                                                  M.alloc (|
                                                    Value.StructTuple
                                                      "core::panicking::AssertKind::Eq"
                                                      []
                                                  |) in
                                                M.alloc (|
                                                  M.call_closure (|
                                                    M.get_function (|
                                                      "core::panicking::assert_failed",
                                                      [
                                                        Ty.path "specs::host_function::HostPlugin";
                                                        Ty.path "specs::host_function::HostPlugin"
                                                      ]
                                                    |),
                                                    [
                                                      M.read (| kind |);
                                                      M.read (| left_val |);
                                                      M.read (| right_val |);
                                                      Value.StructTuple
                                                        "core::option::Option::None"
                                                        []
                                                    ]
                                                  |)
                                                |)
                                              |)
                                            |)
                                          |)));
                                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                    ]
                                  |)))
                            ]
                          |) in
                        M.alloc (|
                          LogicalOp.or (|
                            LogicalOp.and (|
                              BinOp.Pure.eq
                                (M.read (| M.read (| op_index_in_plugin |) |))
                                (M.rust_cast
                                  (BinOp.Panic.add (|
                                    Integer.Isize,
                                    M.get_constant (|
                                      "delphinus_zkwasm::foreign::wasm_input_helper::Op::WasmInput_discriminant"
                                    |),
                                    Value.Integer 0
                                  |))),
                              ltac:(M.monadic
                                (BinOp.Pure.ne
                                  (M.read (|
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::ops::index::Index",
                                        Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          [ Ty.path "u64"; Ty.path "alloc::alloc::Global" ],
                                        [ Ty.path "usize" ],
                                        "index",
                                        []
                                      |),
                                      [ M.read (| args |); Value.Integer 0 ]
                                    |)
                                  |))
                                  (Value.Integer 0)))
                            |),
                            ltac:(M.monadic
                              (BinOp.Pure.eq
                                (M.read (| M.read (| op_index_in_plugin |) |))
                                (M.rust_cast
                                  (BinOp.Panic.add (|
                                    Integer.Isize,
                                    M.get_constant (|
                                      "delphinus_zkwasm::foreign::wasm_input_helper::Op::WasmOutput_discriminant"
                                    |),
                                    Value.Integer 0
                                  |)))))
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (M.alloc (|
                          M.never_to_any (|
                            M.call_closure (|
                              M.get_function (| "core::panicking::panic", [] |),
                              [ M.read (| Value.String "internal error: entered unreachable code" |)
                              ]
                            |)
                          |)
                        |)))
                  ]
                |)
              |)))
          | _, _ => M.impossible
          end.
        
        Axiom Implements :
          forall (F : Ty.t),
          M.IsTraitInstance
            "delphinus_zkwasm::circuits::etable::EventTableOpcodeConfig"
            (Self F)
            (* Trait polymorphic types *) [ (* F *) F ]
            (* Instance *)
            [
              ("sp_diff", InstanceField.Method (sp_diff F));
              ("opcode", InstanceField.Method (opcode F));
              ("assign", InstanceField.Method (assign F));
              ("mops", InstanceField.Method (mops F));
              ("memory_writing_ops", InstanceField.Method (memory_writing_ops F));
              ("input_index_increase", InstanceField.Method (input_index_increase F));
              ("is_host_public_input", InstanceField.Method (is_host_public_input F))
            ].
      End Impl_delphinus_zkwasm_circuits_etable_EventTableOpcodeConfig_where_pairing_bn256_arithmetic_fields_FieldExt_F_F_for_delphinus_zkwasm_foreign_wasm_input_helper_etable_op_configure_ETableWasmInputHelperTableConfig_F.
    End etable_op_configure.
  End wasm_input_helper.
End foreign.
