(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module foreign.
  Module wasm_input_helper.
    Module runtime.
      (* StructRecord
        {
          name := "Context";
          ty_params := [];
          fields :=
            [
              ("public_inputs",
                Ty.apply
                  (Ty.path "alloc::vec::Vec")
                  [ Ty.path "u64"; Ty.path "alloc::alloc::Global" ]);
              ("private_inputs",
                Ty.apply
                  (Ty.path "alloc::collections::vec_deque::VecDeque")
                  [ Ty.path "u64"; Ty.path "alloc::alloc::Global" ]);
              ("instance",
                Ty.apply
                  (Ty.path "alloc::vec::Vec")
                  [ Ty.path "u64"; Ty.path "alloc::alloc::Global" ]);
              ("output",
                Ty.apply
                  (Ty.path "alloc::vec::Vec")
                  [ Ty.path "u64"; Ty.path "alloc::alloc::Global" ])
            ];
        } *)
      
      Module Impl_delphinus_zkwasm_foreign_wasm_input_helper_runtime_Context.
        Definition Self : Ty.t :=
          Ty.path "delphinus_zkwasm::foreign::wasm_input_helper::runtime::Context".
        
        (*
            pub fn new(public_inputs: Vec<u64>, private_inputs: Vec<u64>) -> Self {
                Context {
                    public_inputs,
                    private_inputs: private_inputs.into(),
                    instance: vec![],
                    output: vec![],
                }
            }
        *)
        Definition new (τ : list Ty.t) (α : list Value.t) : M :=
          match τ, α with
          | [], [ public_inputs; private_inputs ] =>
            ltac:(M.monadic
              (let public_inputs := M.alloc (| public_inputs |) in
              let private_inputs := M.alloc (| private_inputs |) in
              Value.StructRecord
                "delphinus_zkwasm::foreign::wasm_input_helper::runtime::Context"
                [
                  ("public_inputs", M.read (| public_inputs |));
                  ("private_inputs",
                    M.call_closure (|
                      M.get_trait_method (|
                        "core::convert::Into",
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          [ Ty.path "u64"; Ty.path "alloc::alloc::Global" ],
                        [
                          Ty.apply
                            (Ty.path "alloc::collections::vec_deque::VecDeque")
                            [ Ty.path "u64"; Ty.path "alloc::alloc::Global" ]
                        ],
                        "into",
                        []
                      |),
                      [ M.read (| private_inputs |) ]
                    |));
                  ("instance",
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          [ Ty.path "u64"; Ty.path "alloc::alloc::Global" ],
                        "new",
                        []
                      |),
                      []
                    |));
                  ("output",
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          [ Ty.path "u64"; Ty.path "alloc::alloc::Global" ],
                        "new",
                        []
                      |),
                      []
                    |))
                ]))
          | _, _ => M.impossible
          end.
        
        Axiom AssociatedFunction_new : M.IsAssociatedFunction Self "new" new.
        
        (*
            pub fn pop_public(&mut self) -> u64 {
                if self.public_inputs.is_empty() {
                    panic!("failed to read public input, please checkout your input");
                }
                self.public_inputs.remove(0)
            }
        *)
        Definition pop_public (τ : list Ty.t) (α : list Value.t) : M :=
          match τ, α with
          | [], [ self ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              M.read (|
                let _ :=
                  M.match_operator (|
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.apply
                                      (Ty.path "alloc::vec::Vec")
                                      [ Ty.path "u64"; Ty.path "alloc::alloc::Global" ],
                                    "is_empty",
                                    []
                                  |),
                                  [
                                    M.SubPointer.get_struct_record_field (|
                                      M.read (| self |),
                                      "delphinus_zkwasm::foreign::wasm_input_helper::runtime::Context",
                                      "public_inputs"
                                    |)
                                  ]
                                |)
                              |)) in
                          let _ :=
                            M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.call_closure (|
                                M.get_function (| "core::panicking::panic_fmt", [] |),
                                [
                                  M.call_closure (|
                                    M.get_associated_function (|
                                      Ty.path "core::fmt::Arguments",
                                      "new_const",
                                      []
                                    |),
                                    [
                                      (* Unsize *)
                                      M.pointer_coercion
                                        (M.alloc (|
                                          Value.Array
                                            [
                                              M.read (|
                                                Value.String
                                                  "failed to read public input, please checkout your input"
                                              |)
                                            ]
                                        |))
                                    ]
                                  |)
                                ]
                              |)
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        [ Ty.path "u64"; Ty.path "alloc::alloc::Global" ],
                      "remove",
                      []
                    |),
                    [
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "delphinus_zkwasm::foreign::wasm_input_helper::runtime::Context",
                        "public_inputs"
                      |);
                      Value.Integer 0
                    ]
                  |)
                |)
              |)))
          | _, _ => M.impossible
          end.
        
        Axiom AssociatedFunction_pop_public : M.IsAssociatedFunction Self "pop_public" pop_public.
        
        (*
            pub fn pop_private(&mut self) -> u64 {
                if self.private_inputs.is_empty() {
                    panic!("failed to read private input, please checkout your input");
                }
                self.private_inputs.pop_front().unwrap()
            }
        *)
        Definition pop_private (τ : list Ty.t) (α : list Value.t) : M :=
          match τ, α with
          | [], [ self ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              M.read (|
                let _ :=
                  M.match_operator (|
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.apply
                                      (Ty.path "alloc::collections::vec_deque::VecDeque")
                                      [ Ty.path "u64"; Ty.path "alloc::alloc::Global" ],
                                    "is_empty",
                                    []
                                  |),
                                  [
                                    M.SubPointer.get_struct_record_field (|
                                      M.read (| self |),
                                      "delphinus_zkwasm::foreign::wasm_input_helper::runtime::Context",
                                      "private_inputs"
                                    |)
                                  ]
                                |)
                              |)) in
                          let _ :=
                            M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.call_closure (|
                                M.get_function (| "core::panicking::panic_fmt", [] |),
                                [
                                  M.call_closure (|
                                    M.get_associated_function (|
                                      Ty.path "core::fmt::Arguments",
                                      "new_const",
                                      []
                                    |),
                                    [
                                      (* Unsize *)
                                      M.pointer_coercion
                                        (M.alloc (|
                                          Value.Array
                                            [
                                              M.read (|
                                                Value.String
                                                  "failed to read private input, please checkout your input"
                                              |)
                                            ]
                                        |))
                                    ]
                                  |)
                                ]
                              |)
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply (Ty.path "core::option::Option") [ Ty.path "u64" ],
                      "unwrap",
                      []
                    |),
                    [
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.apply
                            (Ty.path "alloc::collections::vec_deque::VecDeque")
                            [ Ty.path "u64"; Ty.path "alloc::alloc::Global" ],
                          "pop_front",
                          []
                        |),
                        [
                          M.SubPointer.get_struct_record_field (|
                            M.read (| self |),
                            "delphinus_zkwasm::foreign::wasm_input_helper::runtime::Context",
                            "private_inputs"
                          |)
                        ]
                      |)
                    ]
                  |)
                |)
              |)))
          | _, _ => M.impossible
          end.
        
        Axiom AssociatedFunction_pop_private :
          M.IsAssociatedFunction Self "pop_private" pop_private.
        
        (*
            fn push_public(&mut self, value: u64) {
                self.instance.push(value)
            }
        *)
        Definition push_public (τ : list Ty.t) (α : list Value.t) : M :=
          match τ, α with
          | [], [ self; value ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              let value := M.alloc (| value |) in
              M.call_closure (|
                M.get_associated_function (|
                  Ty.apply
                    (Ty.path "alloc::vec::Vec")
                    [ Ty.path "u64"; Ty.path "alloc::alloc::Global" ],
                  "push",
                  []
                |),
                [
                  M.SubPointer.get_struct_record_field (|
                    M.read (| self |),
                    "delphinus_zkwasm::foreign::wasm_input_helper::runtime::Context",
                    "instance"
                  |);
                  M.read (| value |)
                ]
              |)))
          | _, _ => M.impossible
          end.
        
        Axiom AssociatedFunction_push_public :
          M.IsAssociatedFunction Self "push_public" push_public.
        
        (*
            fn push_output(&mut self, value: u64) {
                self.instance.push(value);
                self.output.push(value);
            }
        *)
        Definition push_output (τ : list Ty.t) (α : list Value.t) : M :=
          match τ, α with
          | [], [ self; value ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              let value := M.alloc (| value |) in
              M.read (|
                let _ :=
                  M.alloc (|
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          [ Ty.path "u64"; Ty.path "alloc::alloc::Global" ],
                        "push",
                        []
                      |),
                      [
                        M.SubPointer.get_struct_record_field (|
                          M.read (| self |),
                          "delphinus_zkwasm::foreign::wasm_input_helper::runtime::Context",
                          "instance"
                        |);
                        M.read (| value |)
                      ]
                    |)
                  |) in
                let _ :=
                  M.alloc (|
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          [ Ty.path "u64"; Ty.path "alloc::alloc::Global" ],
                        "push",
                        []
                      |),
                      [
                        M.SubPointer.get_struct_record_field (|
                          M.read (| self |),
                          "delphinus_zkwasm::foreign::wasm_input_helper::runtime::Context",
                          "output"
                        |);
                        M.read (| value |)
                      ]
                    |)
                  |) in
                M.alloc (| Value.Tuple [] |)
              |)))
          | _, _ => M.impossible
          end.
        
        Axiom AssociatedFunction_push_output :
          M.IsAssociatedFunction Self "push_output" push_output.
        
        (*
            pub fn wasm_input(&mut self, arg: i32) -> u64 {
                assert!(arg == 0 || arg == 1);
        
                let input = if arg == 1 {
                    let value = self.pop_public();
                    self.push_public(value);
                    value
                } else {
                    self.pop_private()
                };
        
                input
            }
        *)
        Definition wasm_input (τ : list Ty.t) (α : list Value.t) : M :=
          match τ, α with
          | [], [ self; arg ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              let arg := M.alloc (| arg |) in
              M.read (|
                let _ :=
                  M.match_operator (|
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                UnOp.Pure.not
                                  (LogicalOp.or (|
                                    BinOp.Pure.eq (M.read (| arg |)) (Value.Integer 0),
                                    ltac:(M.monadic
                                      (BinOp.Pure.eq (M.read (| arg |)) (Value.Integer 1)))
                                  |))
                              |)) in
                          let _ :=
                            M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.call_closure (|
                                M.get_function (| "core::panicking::panic", [] |),
                                [ M.read (| Value.String "assertion failed: arg == 0 || arg == 1" |)
                                ]
                              |)
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                let input :=
                  M.copy (|
                    M.match_operator (|
                      M.alloc (| Value.Tuple [] |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ :=
                              M.use
                                (M.alloc (|
                                  BinOp.Pure.eq (M.read (| arg |)) (Value.Integer 1)
                                |)) in
                            let _ :=
                              M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                            let value :=
                              M.alloc (|
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.path
                                      "delphinus_zkwasm::foreign::wasm_input_helper::runtime::Context",
                                    "pop_public",
                                    []
                                  |),
                                  [ M.read (| self |) ]
                                |)
                              |) in
                            let _ :=
                              M.alloc (|
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.path
                                      "delphinus_zkwasm::foreign::wasm_input_helper::runtime::Context",
                                    "push_public",
                                    []
                                  |),
                                  [ M.read (| self |); M.read (| value |) ]
                                |)
                              |) in
                            value));
                        fun γ =>
                          ltac:(M.monadic
                            (M.alloc (|
                              M.call_closure (|
                                M.get_associated_function (|
                                  Ty.path
                                    "delphinus_zkwasm::foreign::wasm_input_helper::runtime::Context",
                                  "pop_private",
                                  []
                                |),
                                [ M.read (| self |) ]
                              |)
                            |)))
                      ]
                    |)
                  |) in
                input
              |)))
          | _, _ => M.impossible
          end.
        
        Axiom AssociatedFunction_wasm_input : M.IsAssociatedFunction Self "wasm_input" wasm_input.
        
        (*
            pub fn wasm_output(&mut self, value: u64) {
                self.push_output(value);
            }
        *)
        Definition wasm_output (τ : list Ty.t) (α : list Value.t) : M :=
          match τ, α with
          | [], [ self; value ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              let value := M.alloc (| value |) in
              M.read (|
                let _ :=
                  M.alloc (|
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.path "delphinus_zkwasm::foreign::wasm_input_helper::runtime::Context",
                        "push_output",
                        []
                      |),
                      [ M.read (| self |); M.read (| value |) ]
                    |)
                  |) in
                M.alloc (| Value.Tuple [] |)
              |)))
          | _, _ => M.impossible
          end.
        
        Axiom AssociatedFunction_wasm_output :
          M.IsAssociatedFunction Self "wasm_output" wasm_output.
      End Impl_delphinus_zkwasm_foreign_wasm_input_helper_runtime_Context.
      
      Module Impl_delphinus_zkwasm_runtime_host_ForeignContext_for_delphinus_zkwasm_foreign_wasm_input_helper_runtime_Context.
        Definition Self : Ty.t :=
          Ty.path "delphinus_zkwasm::foreign::wasm_input_helper::runtime::Context".
        
        (*
            fn get_statics(&self) -> Option<ForeignStatics> {
                None
            }
        *)
        Definition get_statics (τ : list Ty.t) (α : list Value.t) : M :=
          match τ, α with
          | [], [ self ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              Value.StructTuple "core::option::Option::None" []))
          | _, _ => M.impossible
          end.
        
        (*
            fn expose_public_inputs_and_outputs(&self) -> Vec<u64> {
                self.instance.clone()
            }
        *)
        Definition expose_public_inputs_and_outputs (τ : list Ty.t) (α : list Value.t) : M :=
          match τ, α with
          | [], [ self ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              M.call_closure (|
                M.get_trait_method (|
                  "core::clone::Clone",
                  Ty.apply
                    (Ty.path "alloc::vec::Vec")
                    [ Ty.path "u64"; Ty.path "alloc::alloc::Global" ],
                  [],
                  "clone",
                  []
                |),
                [
                  M.SubPointer.get_struct_record_field (|
                    M.read (| self |),
                    "delphinus_zkwasm::foreign::wasm_input_helper::runtime::Context",
                    "instance"
                  |)
                ]
              |)))
          | _, _ => M.impossible
          end.
        
        (*
            fn expose_outputs(&self) -> Vec<u64> {
                self.output.clone()
            }
        *)
        Definition expose_outputs (τ : list Ty.t) (α : list Value.t) : M :=
          match τ, α with
          | [], [ self ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              M.call_closure (|
                M.get_trait_method (|
                  "core::clone::Clone",
                  Ty.apply
                    (Ty.path "alloc::vec::Vec")
                    [ Ty.path "u64"; Ty.path "alloc::alloc::Global" ],
                  [],
                  "clone",
                  []
                |),
                [
                  M.SubPointer.get_struct_record_field (|
                    M.read (| self |),
                    "delphinus_zkwasm::foreign::wasm_input_helper::runtime::Context",
                    "output"
                  |)
                ]
              |)))
          | _, _ => M.impossible
          end.
        
        Axiom Implements :
          M.IsTraitInstance
            "delphinus_zkwasm::runtime::host::ForeignContext"
            Self
            (* Trait polymorphic types *) []
            (* Instance *)
            [
              ("get_statics", InstanceField.Method get_statics);
              ("expose_public_inputs_and_outputs",
                InstanceField.Method expose_public_inputs_and_outputs);
              ("expose_outputs", InstanceField.Method expose_outputs)
            ].
      End Impl_delphinus_zkwasm_runtime_host_ForeignContext_for_delphinus_zkwasm_foreign_wasm_input_helper_runtime_Context.
      
      (*
      pub fn register_wasm_input_foreign(
          env: &mut HostEnv,
          public_inputs: Vec<u64>,
          private_inputs: Vec<u64>,
      ) {
          let wasm_input = Rc::new(
              |_observer: &Observer, context: &mut dyn ForeignContext, args: wasmi::RuntimeArgs| {
                  let context = context.downcast_mut::<Context>().unwrap();
                  let arg: i32 = args.nth(0);
                  let input = context.wasm_input(arg);
      
                  Some(wasmi::RuntimeValue::I64(input as i64))
              },
          );
      
          let wasm_output = Rc::new(
              |_observer: &Observer, context: &mut dyn ForeignContext, args: wasmi::RuntimeArgs| {
                  let context = context.downcast_mut::<Context>().unwrap();
      
                  let value: i64 = args.nth(0);
                  context.wasm_output(value as u64);
      
                  None
              },
          );
      
          env.internal_env.register_plugin(
              "wasm input plugin",
              HostPlugin::HostInput,
              Box::new(Context::new(public_inputs, private_inputs)),
          );
      
          env.internal_env.register_function(
              "wasm_input",
              specs::host_function::Signature {
                  params: vec![ValueType::I32],
                  return_type: Some(ValueType::I64),
              },
              HostPlugin::HostInput,
              Op::WasmInput as usize,
              wasm_input,
          );
      
          env.internal_env.register_function(
              "wasm_output",
              specs::host_function::Signature {
                  params: vec![ValueType::I64],
                  return_type: None,
              },
              HostPlugin::HostInput,
              Op::WasmOutput as usize,
              wasm_output,
          );
      }
      *)
      Definition register_wasm_input_foreign (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ env; public_inputs; private_inputs ] =>
          ltac:(M.monadic
            (let env := M.alloc (| env |) in
            let public_inputs := M.alloc (| public_inputs |) in
            let private_inputs := M.alloc (| private_inputs |) in
            M.read (|
              let wasm_input :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "alloc::rc::Rc")
                        [
                          Ty.function
                            [
                              Ty.tuple
                                [
                                  Ty.apply
                                    (Ty.path "&")
                                    [
                                      Ty.path
                                        "delphinus_zkwasm::runtime::monitor::observer::Observer"
                                    ];
                                  Ty.apply
                                    (Ty.path "&mut")
                                    [
                                      Ty.dyn
                                        [
                                          ("delphinus_zkwasm::runtime::host::ForeignContext::Trait",
                                            [])
                                        ]
                                    ];
                                  Ty.path "wasmi::host::RuntimeArgs"
                                ]
                            ]
                            (Ty.apply
                              (Ty.path "core::option::Option")
                              [ Ty.path "wasmi_core::value::Value" ]);
                          Ty.path "alloc::alloc::Global"
                        ],
                      "new",
                      []
                    |),
                    [
                      M.closure
                        (fun γ =>
                          ltac:(M.monadic
                            match γ with
                            | [ α0; α1; α2 ] =>
                              M.match_operator (|
                                M.alloc (| α0 |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let _observer := M.copy (| γ |) in
                                      M.match_operator (|
                                        M.alloc (| α1 |),
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let context := M.copy (| γ |) in
                                              M.match_operator (|
                                                M.alloc (| α2 |),
                                                [
                                                  fun γ =>
                                                    ltac:(M.monadic
                                                      (let args := M.copy (| γ |) in
                                                      M.read (|
                                                        let context :=
                                                          M.alloc (|
                                                            M.call_closure (|
                                                              M.get_associated_function (|
                                                                Ty.apply
                                                                  (Ty.path "core::option::Option")
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path "&mut")
                                                                      [
                                                                        Ty.path
                                                                          "delphinus_zkwasm::foreign::wasm_input_helper::runtime::Context"
                                                                      ]
                                                                  ],
                                                                "unwrap",
                                                                []
                                                              |),
                                                              [
                                                                M.call_closure (|
                                                                  M.get_associated_function (|
                                                                    Ty.dyn
                                                                      [
                                                                        ("delphinus_zkwasm::runtime::host::ForeignContext::Trait",
                                                                          [])
                                                                      ],
                                                                    "downcast_mut",
                                                                    [
                                                                      Ty.path
                                                                        "delphinus_zkwasm::foreign::wasm_input_helper::runtime::Context"
                                                                    ]
                                                                  |),
                                                                  [ M.read (| context |) ]
                                                                |)
                                                              ]
                                                            |)
                                                          |) in
                                                        let arg :=
                                                          M.alloc (|
                                                            M.call_closure (|
                                                              M.get_associated_function (|
                                                                Ty.path "wasmi::host::RuntimeArgs",
                                                                "nth",
                                                                [ Ty.path "i32" ]
                                                              |),
                                                              [ args; Value.Integer 0 ]
                                                            |)
                                                          |) in
                                                        let input :=
                                                          M.alloc (|
                                                            M.call_closure (|
                                                              M.get_associated_function (|
                                                                Ty.path
                                                                  "delphinus_zkwasm::foreign::wasm_input_helper::runtime::Context",
                                                                "wasm_input",
                                                                []
                                                              |),
                                                              [
                                                                M.read (| context |);
                                                                M.read (| arg |)
                                                              ]
                                                            |)
                                                          |) in
                                                        M.alloc (|
                                                          Value.StructTuple
                                                            "core::option::Option::Some"
                                                            [
                                                              Value.StructTuple
                                                                "wasmi_core::value::Value::I64"
                                                                [ M.rust_cast (M.read (| input |)) ]
                                                            ]
                                                        |)
                                                      |)))
                                                ]
                                              |)))
                                        ]
                                      |)))
                                ]
                              |)
                            | _ => M.impossible (||)
                            end))
                    ]
                  |)
                |) in
              let wasm_output :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "alloc::rc::Rc")
                        [
                          Ty.function
                            [
                              Ty.tuple
                                [
                                  Ty.apply
                                    (Ty.path "&")
                                    [
                                      Ty.path
                                        "delphinus_zkwasm::runtime::monitor::observer::Observer"
                                    ];
                                  Ty.apply
                                    (Ty.path "&mut")
                                    [
                                      Ty.dyn
                                        [
                                          ("delphinus_zkwasm::runtime::host::ForeignContext::Trait",
                                            [])
                                        ]
                                    ];
                                  Ty.path "wasmi::host::RuntimeArgs"
                                ]
                            ]
                            (Ty.apply
                              (Ty.path "core::option::Option")
                              [ Ty.path "wasmi_core::value::Value" ]);
                          Ty.path "alloc::alloc::Global"
                        ],
                      "new",
                      []
                    |),
                    [
                      M.closure
                        (fun γ =>
                          ltac:(M.monadic
                            match γ with
                            | [ α0; α1; α2 ] =>
                              M.match_operator (|
                                M.alloc (| α0 |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let _observer := M.copy (| γ |) in
                                      M.match_operator (|
                                        M.alloc (| α1 |),
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let context := M.copy (| γ |) in
                                              M.match_operator (|
                                                M.alloc (| α2 |),
                                                [
                                                  fun γ =>
                                                    ltac:(M.monadic
                                                      (let args := M.copy (| γ |) in
                                                      M.read (|
                                                        let context :=
                                                          M.alloc (|
                                                            M.call_closure (|
                                                              M.get_associated_function (|
                                                                Ty.apply
                                                                  (Ty.path "core::option::Option")
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path "&mut")
                                                                      [
                                                                        Ty.path
                                                                          "delphinus_zkwasm::foreign::wasm_input_helper::runtime::Context"
                                                                      ]
                                                                  ],
                                                                "unwrap",
                                                                []
                                                              |),
                                                              [
                                                                M.call_closure (|
                                                                  M.get_associated_function (|
                                                                    Ty.dyn
                                                                      [
                                                                        ("delphinus_zkwasm::runtime::host::ForeignContext::Trait",
                                                                          [])
                                                                      ],
                                                                    "downcast_mut",
                                                                    [
                                                                      Ty.path
                                                                        "delphinus_zkwasm::foreign::wasm_input_helper::runtime::Context"
                                                                    ]
                                                                  |),
                                                                  [ M.read (| context |) ]
                                                                |)
                                                              ]
                                                            |)
                                                          |) in
                                                        let value :=
                                                          M.alloc (|
                                                            M.call_closure (|
                                                              M.get_associated_function (|
                                                                Ty.path "wasmi::host::RuntimeArgs",
                                                                "nth",
                                                                [ Ty.path "i64" ]
                                                              |),
                                                              [ args; Value.Integer 0 ]
                                                            |)
                                                          |) in
                                                        let _ :=
                                                          M.alloc (|
                                                            M.call_closure (|
                                                              M.get_associated_function (|
                                                                Ty.path
                                                                  "delphinus_zkwasm::foreign::wasm_input_helper::runtime::Context",
                                                                "wasm_output",
                                                                []
                                                              |),
                                                              [
                                                                M.read (| context |);
                                                                M.rust_cast (M.read (| value |))
                                                              ]
                                                            |)
                                                          |) in
                                                        M.alloc (|
                                                          Value.StructTuple
                                                            "core::option::Option::None"
                                                            []
                                                        |)
                                                      |)))
                                                ]
                                              |)))
                                        ]
                                      |)))
                                ]
                              |)
                            | _ => M.impossible (||)
                            end))
                    ]
                  |)
                |) in
              let _ :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.path
                        "delphinus_zkwasm::runtime::host::internal_circuit_plugin::InternalCircuitEnv",
                      "register_plugin",
                      []
                    |),
                    [
                      M.SubPointer.get_struct_record_field (|
                        M.read (| env |),
                        "delphinus_zkwasm::runtime::host::host_env::HostEnv",
                        "internal_env"
                      |);
                      M.read (| Value.String "wasm input plugin" |);
                      Value.StructTuple "specs::host_function::HostPlugin::HostInput" [];
                      (* Unsize *)
                      M.pointer_coercion
                        (M.call_closure (|
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path "alloc::boxed::Box")
                              [
                                Ty.path
                                  "delphinus_zkwasm::foreign::wasm_input_helper::runtime::Context";
                                Ty.path "alloc::alloc::Global"
                              ],
                            "new",
                            []
                          |),
                          [
                            M.call_closure (|
                              M.get_associated_function (|
                                Ty.path
                                  "delphinus_zkwasm::foreign::wasm_input_helper::runtime::Context",
                                "new",
                                []
                              |),
                              [ M.read (| public_inputs |); M.read (| private_inputs |) ]
                            |)
                          ]
                        |))
                    ]
                  |)
                |) in
              let _ :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.path
                        "delphinus_zkwasm::runtime::host::internal_circuit_plugin::InternalCircuitEnv",
                      "register_function",
                      []
                    |),
                    [
                      M.SubPointer.get_struct_record_field (|
                        M.read (| env |),
                        "delphinus_zkwasm::runtime::host::host_env::HostEnv",
                        "internal_env"
                      |);
                      M.read (| Value.String "wasm_input" |);
                      Value.StructRecord
                        "specs::host_function::Signature"
                        [
                          ("params",
                            M.call_closure (|
                              M.get_associated_function (|
                                Ty.apply (Ty.path "slice") [ Ty.path "specs::types::ValueType" ],
                                "into_vec",
                                [ Ty.path "alloc::alloc::Global" ]
                              |),
                              [
                                (* Unsize *)
                                M.pointer_coercion
                                  (M.read (|
                                    M.call_closure (|
                                      M.get_associated_function (|
                                        Ty.apply
                                          (Ty.path "alloc::boxed::Box")
                                          [
                                            Ty.apply
                                              (Ty.path "array")
                                              [ Ty.path "specs::types::ValueType" ];
                                            Ty.path "alloc::alloc::Global"
                                          ],
                                        "new",
                                        []
                                      |),
                                      [
                                        M.alloc (|
                                          Value.Array
                                            [ Value.StructTuple "specs::types::ValueType::I32" [] ]
                                        |)
                                      ]
                                    |)
                                  |))
                              ]
                            |));
                          ("return_type",
                            Value.StructTuple
                              "core::option::Option::Some"
                              [ Value.StructTuple "specs::types::ValueType::I64" [] ])
                        ];
                      Value.StructTuple "specs::host_function::HostPlugin::HostInput" [];
                      M.rust_cast
                        (BinOp.Panic.add (|
                          Integer.Isize,
                          M.get_constant (|
                            "delphinus_zkwasm::foreign::wasm_input_helper::Op::WasmInput_discriminant"
                          |),
                          Value.Integer 0
                        |));
                      (* Unsize *) M.pointer_coercion (M.read (| wasm_input |))
                    ]
                  |)
                |) in
              let _ :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.path
                        "delphinus_zkwasm::runtime::host::internal_circuit_plugin::InternalCircuitEnv",
                      "register_function",
                      []
                    |),
                    [
                      M.SubPointer.get_struct_record_field (|
                        M.read (| env |),
                        "delphinus_zkwasm::runtime::host::host_env::HostEnv",
                        "internal_env"
                      |);
                      M.read (| Value.String "wasm_output" |);
                      Value.StructRecord
                        "specs::host_function::Signature"
                        [
                          ("params",
                            M.call_closure (|
                              M.get_associated_function (|
                                Ty.apply (Ty.path "slice") [ Ty.path "specs::types::ValueType" ],
                                "into_vec",
                                [ Ty.path "alloc::alloc::Global" ]
                              |),
                              [
                                (* Unsize *)
                                M.pointer_coercion
                                  (M.read (|
                                    M.call_closure (|
                                      M.get_associated_function (|
                                        Ty.apply
                                          (Ty.path "alloc::boxed::Box")
                                          [
                                            Ty.apply
                                              (Ty.path "array")
                                              [ Ty.path "specs::types::ValueType" ];
                                            Ty.path "alloc::alloc::Global"
                                          ],
                                        "new",
                                        []
                                      |),
                                      [
                                        M.alloc (|
                                          Value.Array
                                            [ Value.StructTuple "specs::types::ValueType::I64" [] ]
                                        |)
                                      ]
                                    |)
                                  |))
                              ]
                            |));
                          ("return_type", Value.StructTuple "core::option::Option::None" [])
                        ];
                      Value.StructTuple "specs::host_function::HostPlugin::HostInput" [];
                      M.rust_cast
                        (BinOp.Panic.add (|
                          Integer.Isize,
                          M.get_constant (|
                            "delphinus_zkwasm::foreign::wasm_input_helper::Op::WasmOutput_discriminant"
                          |),
                          Value.Integer 0
                        |));
                      (* Unsize *) M.pointer_coercion (M.read (| wasm_output |))
                    ]
                  |)
                |) in
              M.alloc (| Value.Tuple [] |)
            |)))
        | _, _ => M.impossible
        end.
    End runtime.
  End wasm_input_helper.
End foreign.
