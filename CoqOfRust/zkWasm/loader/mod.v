(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module loader.
  Definition value_ENTRY : Value.t := M.run ltac:(M.monadic (Value.String "zkmain")).
  
  (* StructRecord
    {
      name := "ExecutionReturn";
      ty_params := [];
      fields :=
        [
          ("context_output",
            Ty.apply (Ty.path "alloc::vec::Vec") [ Ty.path "u64"; Ty.path "alloc::alloc::Global" ])
        ];
    } *)
  
  (* StructRecord
    {
      name := "ZkWasmLoader";
      ty_params := [];
      fields :=
        [
          ("k", Ty.path "u32");
          ("entry", Ty.path "alloc::string::String");
          ("env", Ty.path "delphinus_zkwasm::runtime::host::host_env::HostEnv")
        ];
    } *)
  
  Module Impl_delphinus_zkwasm_loader_ZkWasmLoader.
    Definition Self : Ty.t := Ty.path "delphinus_zkwasm::loader::ZkWasmLoader".
    
    (*
        pub fn parse_module(image: &Vec<u8>) -> Result<Module> {
            fn precheck(_module: &Module) -> Result<()> {
                #[allow(dead_code)]
                fn check_zkmain_exists(module: &Module) -> Result<()> {
                    use parity_wasm::elements::Internal;
    
                    let export = module.module().export_section().unwrap();
    
                    if let Some(entry) = export.entries().iter().find(|entry| entry.field() == ENTRY) {
                        match entry.internal() {
                            Internal::Function(_fid) => Ok(()),
                            _ => Err(anyhow!(Error::PreCheck(PreCheckErr::ZkmainIsNotFunction))),
                        }
                    } else {
                        Err(anyhow!(Error::PreCheck(PreCheckErr::ZkmainNotExists)))
                    }
                }
    
                #[cfg(not(test))]
                check_zkmain_exists(_module)?;
                // TODO: check the signature of zkmain function.
                // TODO: check the relation between maximal pages and K.
                // TODO: check the instructions of phantom functions.
                // TODO: check phantom functions exists.
                // TODO: check if instructions are supported.
    
                Ok(())
            }
    
            let mut module = Module::from_buffer(&image)?;
            if let Ok(parity_module) = module.module().clone().parse_names() {
                module.module = parity_module;
            } else {
                warn!("Failed to parse name section of the wasm binary.");
            }
    
            precheck(&module)?;
    
            Ok(module)
        }
    *)
    Definition parse_module (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [ image ] =>
        ltac:(M.monadic
          (let image := M.alloc (| image |) in
          M.catch_return (|
            ltac:(M.monadic
              (M.read (|
                let module :=
                  M.copy (|
                    M.match_operator (|
                      M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::ops::try_trait::Try",
                            Ty.apply
                              (Ty.path "core::result::Result")
                              [ Ty.path "wasmi::Module"; Ty.path "wasmi::Error" ],
                            [],
                            "branch",
                            []
                          |),
                          [
                            M.call_closure (|
                              M.get_associated_function (|
                                Ty.path "wasmi::Module",
                                "from_buffer",
                                [
                                  Ty.apply
                                    (Ty.path "&")
                                    [
                                      Ty.apply
                                        (Ty.path "&")
                                        [
                                          Ty.apply
                                            (Ty.path "alloc::vec::Vec")
                                            [ Ty.path "u8"; Ty.path "alloc::alloc::Global" ]
                                        ]
                                    ]
                                ]
                              |),
                              [ image ]
                            |)
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Break",
                                0
                              |) in
                            let residual := M.copy (| γ0_0 |) in
                            M.alloc (|
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::ops::try_trait::FromResidual",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          [ Ty.path "wasmi::Module"; Ty.path "anyhow::Error" ],
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.path "wasmi::Error"
                                            ]
                                        ],
                                        "from_residual",
                                        []
                                      |),
                                      [ M.read (| residual |) ]
                                    |)
                                  |)
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Continue",
                                0
                              |) in
                            let val := M.copy (| γ0_0 |) in
                            val))
                      ]
                    |)
                  |) in
                let _ :=
                  M.match_operator (|
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.alloc (|
                              M.call_closure (|
                                M.get_associated_function (|
                                  Ty.path "parity_wasm::elements::module::Module",
                                  "parse_names",
                                  []
                                |),
                                [
                                  M.call_closure (|
                                    M.get_trait_method (|
                                      "core::clone::Clone",
                                      Ty.path "parity_wasm::elements::module::Module",
                                      [],
                                      "clone",
                                      []
                                    |),
                                    [
                                      M.call_closure (|
                                        M.get_associated_function (|
                                          Ty.path "wasmi::Module",
                                          "module",
                                          []
                                        |),
                                        [ module ]
                                      |)
                                    ]
                                  |)
                                ]
                              |)
                            |) in
                          let γ0_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "core::result::Result::Ok",
                              0
                            |) in
                          let parity_module := M.copy (| γ0_0 |) in
                          let _ :=
                            M.write (|
                              M.SubPointer.get_struct_record_field (|
                                module,
                                "wasmi::Module",
                                "module"
                              |),
                              M.read (| parity_module |)
                            |) in
                          M.alloc (| Value.Tuple [] |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let _ :=
                            let lvl := M.alloc (| Value.StructTuple "log::Level::Warn" [] |) in
                            M.match_operator (|
                              M.alloc (| Value.Tuple [] |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ :=
                                      M.use
                                        (M.alloc (|
                                          LogicalOp.and (|
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "core::cmp::PartialOrd",
                                                Ty.path "log::Level",
                                                [ Ty.path "log::LevelFilter" ],
                                                "le",
                                                []
                                              |),
                                              [ lvl; M.get_constant (| "log::STATIC_MAX_LEVEL" |) ]
                                            |),
                                            ltac:(M.monadic
                                              (M.call_closure (|
                                                M.get_trait_method (|
                                                  "core::cmp::PartialOrd",
                                                  Ty.path "log::Level",
                                                  [ Ty.path "log::LevelFilter" ],
                                                  "le",
                                                  []
                                                |),
                                                [
                                                  lvl;
                                                  M.alloc (|
                                                    M.call_closure (|
                                                      M.get_function (| "log::max_level", [] |),
                                                      []
                                                    |)
                                                  |)
                                                ]
                                              |)))
                                          |)
                                        |)) in
                                    let _ :=
                                      M.is_constant_or_break_match (|
                                        M.read (| γ |),
                                        Value.Bool true
                                      |) in
                                    let _ :=
                                      M.alloc (|
                                        M.call_closure (|
                                          M.get_function (|
                                            "log::__private_api::log",
                                            [ Ty.tuple [] ]
                                          |),
                                          [
                                            M.call_closure (|
                                              M.get_associated_function (|
                                                Ty.path "core::fmt::Arguments",
                                                "new_const",
                                                []
                                              |),
                                              [
                                                (* Unsize *)
                                                M.pointer_coercion
                                                  (M.alloc (|
                                                    Value.Array
                                                      [
                                                        M.read (|
                                                          Value.String
                                                            "Failed to parse name section of the wasm binary."
                                                        |)
                                                      ]
                                                  |))
                                              ]
                                            |);
                                            M.read (| lvl |);
                                            M.alloc (|
                                              Value.Tuple
                                                [
                                                  M.read (|
                                                    Value.String "delphinus_zkwasm::loader"
                                                  |);
                                                  M.read (|
                                                    Value.String "delphinus_zkwasm::loader"
                                                  |);
                                                  M.read (|
                                                    Value.String "crates/zkwasm/src/loader/mod.rs"
                                                  |)
                                                ]
                                            |);
                                            Value.Integer 94;
                                            Value.Tuple []
                                          ]
                                        |)
                                      |) in
                                    M.alloc (| Value.Tuple [] |)));
                                fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                              ]
                            |) in
                          M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                let _ :=
                  M.match_operator (|
                    M.alloc (|
                      M.call_closure (|
                        M.get_trait_method (|
                          "core::ops::try_trait::Try",
                          Ty.apply
                            (Ty.path "core::result::Result")
                            [ Ty.tuple []; Ty.path "anyhow::Error" ],
                          [],
                          "branch",
                          []
                        |),
                        [
                          M.call_closure (|
                            M.get_associated_function (| Self, "precheck.parse_module", [] |),
                            [ module ]
                          |)
                        ]
                      |)
                    |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "core::ops::control_flow::ControlFlow::Break",
                              0
                            |) in
                          let residual := M.copy (| γ0_0 |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                M.return_ (|
                                  M.call_closure (|
                                    M.get_trait_method (|
                                      "core::ops::try_trait::FromResidual",
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        [ Ty.path "wasmi::Module"; Ty.path "anyhow::Error" ],
                                      [
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          [
                                            Ty.path "core::convert::Infallible";
                                            Ty.path "anyhow::Error"
                                          ]
                                      ],
                                      "from_residual",
                                      []
                                    |),
                                    [ M.read (| residual |) ]
                                  |)
                                |)
                              |)
                            |)
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "core::ops::control_flow::ControlFlow::Continue",
                              0
                            |) in
                          let val := M.copy (| γ0_0 |) in
                          val))
                    ]
                  |) in
                M.alloc (| Value.StructTuple "core::result::Result::Ok" [ M.read (| module |) ] |)
              |)))
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom AssociatedFunction_parse_module : M.IsAssociatedFunction Self "parse_module" parse_module.
    (*
        pub fn compile<'a>(
            &self,
            module: &'a Module,
            monitor: &mut dyn WasmiMonitor,
        ) -> Result<CompiledImage<NotStartedModuleRef<'a>>> {
            let imports = ImportsBuilder::new().with_resolver("env", &self.env);
    
            WasmInterpreter::compile(monitor, module, &imports, self.entry.as_str())
        }
    *)
    Definition compile (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [ self; module; monitor ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let module := M.alloc (| module |) in
          let monitor := M.alloc (| monitor |) in
          M.read (|
            let imports :=
              M.alloc (|
                M.call_closure (|
                  M.get_associated_function (|
                    Ty.path "wasmi::imports::ImportsBuilder",
                    "with_resolver",
                    [ Ty.apply (Ty.path "&") [ Ty.path "str" ] ]
                  |),
                  [
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.path "wasmi::imports::ImportsBuilder",
                        "new",
                        []
                      |),
                      []
                    |);
                    M.read (| Value.String "env" |);
                    (* Unsize *)
                    M.pointer_coercion
                      (M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "delphinus_zkwasm::loader::ZkWasmLoader",
                        "env"
                      |))
                  ]
                |)
              |) in
            M.alloc (|
              M.call_closure (|
                M.get_associated_function (|
                  Ty.path "delphinus_zkwasm::runtime::wasmi_interpreter::WasmiRuntime",
                  "compile",
                  [ Ty.path "wasmi::imports::ImportsBuilder" ]
                |),
                [
                  (* Unsize *) M.pointer_coercion (M.read (| monitor |));
                  M.read (| module |);
                  imports;
                  M.call_closure (|
                    M.get_associated_function (| Ty.path "alloc::string::String", "as_str", [] |),
                    [
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "delphinus_zkwasm::loader::ZkWasmLoader",
                        "entry"
                      |)
                    ]
                  |)
                ]
              |)
            |)
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom AssociatedFunction_compile : M.IsAssociatedFunction Self "compile" compile.
    
    (*
        pub fn circuit_without_witness<E: MultiMillerLoop>(
            &mut self,
            _is_last_slice: bool,
        ) -> Result<ZkWasmCircuit<E::Scalar>, BuildingCircuitError> {
            todo!()
            /*
            let k = self.k;
    
            let env = env_builder.create_env_without_value(k);
    
            let compiled_module = self.compile(&env, false, TraceBackend::Memory).unwrap();
    
            ZkWasmCircuit::new(
                k,
                Slice {
                    itable: compiled_module.tables.itable.clone(),
                    br_table: compiled_module.tables.br_table.clone(),
                    elem_table: compiled_module.tables.elem_table.clone(),
                    configure_table: compiled_module.tables.configure_table.clone(),
                    static_jtable: compiled_module.tables.static_jtable.clone(),
                    imtable: compiled_module.tables.imtable.clone(),
                    initialization_state: compiled_module.tables.initialization_state.clone(),
                    post_imtable: compiled_module.tables.imtable.clone(),
                    post_initialization_state: compiled_module.tables.initialization_state.clone(),
    
                    etable: Arc::new(EventTable::default()),
                    frame_table: Arc::new(JumpTable::default()),
    
                    is_last_slice,
                },
            )
            */
        }
    *)
    Definition circuit_without_witness (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [ E ], [ self; _is_last_slice ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let _is_last_slice := M.alloc (| _is_last_slice |) in
          M.never_to_any (|
            M.call_closure (|
              M.get_function (| "core::panicking::panic", [] |),
              [ M.read (| Value.String "not yet implemented" |) ]
            |)
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom AssociatedFunction_circuit_without_witness :
      M.IsAssociatedFunction Self "circuit_without_witness" circuit_without_witness.
    
    (*
        pub fn new(k: u32, env: HostEnv) -> Result<Self> {
            let loader = Self {
                k,
                entry: ENTRY.to_string(),
                env,
            };
    
            loader.init_env()?;
    
            Ok(loader)
        }
    *)
    Definition new (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [ k; env ] =>
        ltac:(M.monadic
          (let k := M.alloc (| k |) in
          let env := M.alloc (| env |) in
          M.catch_return (|
            ltac:(M.monadic
              (M.read (|
                let loader :=
                  M.alloc (|
                    Value.StructRecord
                      "delphinus_zkwasm::loader::ZkWasmLoader"
                      [
                        ("k", M.read (| k |));
                        ("entry",
                          M.call_closure (|
                            M.get_trait_method (|
                              "alloc::string::ToString",
                              Ty.path "str",
                              [],
                              "to_string",
                              []
                            |),
                            [ M.read (| M.get_constant (| "delphinus_zkwasm::loader::ENTRY" |) |) ]
                          |));
                        ("env", M.read (| env |))
                      ]
                  |) in
                let _ :=
                  M.match_operator (|
                    M.alloc (|
                      M.call_closure (|
                        M.get_trait_method (|
                          "core::ops::try_trait::Try",
                          Ty.apply
                            (Ty.path "core::result::Result")
                            [ Ty.tuple []; Ty.path "anyhow::Error" ],
                          [],
                          "branch",
                          []
                        |),
                        [
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.path "delphinus_zkwasm::loader::ZkWasmLoader",
                              "init_env",
                              []
                            |),
                            [ loader ]
                          |)
                        ]
                      |)
                    |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "core::ops::control_flow::ControlFlow::Break",
                              0
                            |) in
                          let residual := M.copy (| γ0_0 |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                M.return_ (|
                                  M.call_closure (|
                                    M.get_trait_method (|
                                      "core::ops::try_trait::FromResidual",
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        [
                                          Ty.path "delphinus_zkwasm::loader::ZkWasmLoader";
                                          Ty.path "anyhow::Error"
                                        ],
                                      [
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          [
                                            Ty.path "core::convert::Infallible";
                                            Ty.path "anyhow::Error"
                                          ]
                                      ],
                                      "from_residual",
                                      []
                                    |),
                                    [ M.read (| residual |) ]
                                  |)
                                |)
                              |)
                            |)
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "core::ops::control_flow::ControlFlow::Continue",
                              0
                            |) in
                          let val := M.copy (| γ0_0 |) in
                          val))
                    ]
                  |) in
                M.alloc (| Value.StructTuple "core::result::Result::Ok" [ M.read (| loader |) ] |)
              |)))
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom AssociatedFunction_new : M.IsAssociatedFunction Self "new" new.
    
    (*
        pub fn create_vkey<E: MultiMillerLoop>(
            &self,
            params: &Params<E::G1Affine>,
            circuit: &ZkWasmCircuit<E::Scalar>,
        ) -> Result<VerifyingKey<E::G1Affine>> {
            Ok(keygen_vk(&params, circuit).unwrap())
        }
    *)
    Definition create_vkey (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [ E ], [ self; params; circuit ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let params := M.alloc (| params |) in
          let circuit := M.alloc (| circuit |) in
          Value.StructTuple
            "core::result::Result::Ok"
            [
              M.call_closure (|
                M.get_associated_function (|
                  Ty.apply
                    (Ty.path "core::result::Result")
                    [
                      Ty.apply (Ty.path "halo2_proofs::plonk::VerifyingKey") [ Ty.associated ];
                      Ty.path "halo2_proofs::plonk::error::Error"
                    ],
                  "unwrap",
                  []
                |),
                [
                  M.call_closure (|
                    M.get_function (|
                      "halo2_proofs::plonk::keygen::keygen_vk",
                      [
                        Ty.associated;
                        Ty.apply
                          (Ty.path "delphinus_zkwasm::circuits::ZkWasmCircuit")
                          [ Ty.associated ]
                      ]
                    |),
                    [ M.read (| params |); M.read (| circuit |) ]
                  |)
                ]
              |)
            ]))
      | _, _ => M.impossible
      end.
    
    Axiom AssociatedFunction_create_vkey : M.IsAssociatedFunction Self "create_vkey" create_vkey.
    (*
        pub fn run(
            self,
            compiled_module: CompiledImage<NotStartedModuleRef<'_>>,
            monitor: &mut dyn WasmiMonitor,
        ) -> Result<ExecutionResult<RuntimeValue>> {
            compiled_module.run(monitor, self.env)
        }
    *)
    Definition run (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [ self; compiled_module; monitor ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let compiled_module := M.alloc (| compiled_module |) in
          let monitor := M.alloc (| monitor |) in
          M.call_closure (|
            M.get_trait_method (|
              "delphinus_zkwasm::runtime::wasmi_interpreter::Execution",
              Ty.apply
                (Ty.path "delphinus_zkwasm::runtime::CompiledImage")
                [ Ty.path "wasmi::module::NotStartedModuleRef" ],
              [ Ty.path "wasmi_core::value::Value" ],
              "run",
              []
            |),
            [
              M.read (| compiled_module |);
              (* Unsize *) M.pointer_coercion (M.read (| monitor |));
              M.read (|
                M.SubPointer.get_struct_record_field (|
                  self,
                  "delphinus_zkwasm::loader::ZkWasmLoader",
                  "env"
                |)
              |)
            ]
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom AssociatedFunction_run : M.IsAssociatedFunction Self "run" run.
    
    (*
        pub fn slice<E: MultiMillerLoop>(
            &self,
            _execution_result: ExecutionResult<RuntimeValue>,
        ) -> Result<Slices<E::Scalar>, BuildingCircuitError> {
            todo!()
            // Slices::new(self.k, execution_result.tables)
        }
    *)
    Definition slice (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [ E ], [ self; _execution_result ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let _execution_result := M.alloc (| _execution_result |) in
          M.never_to_any (|
            M.call_closure (|
              M.get_function (| "core::panicking::panic", [] |),
              [ M.read (| Value.String "not yet implemented" |) ]
            |)
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom AssociatedFunction_slice : M.IsAssociatedFunction Self "slice" slice.
    
    (*
        pub fn mock_test<E: MultiMillerLoop>(
            &self,
            circuit: &ZkWasmCircuit<E::Scalar>,
            instances: &Vec<E::Scalar>,
        ) -> Result<()> {
            let prover = MockProver::run(self.k, circuit, vec![instances.clone()])?;
            assert_eq!(prover.verify(), Ok(()));
    
            Ok(())
        }
    *)
    Definition mock_test (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [ E ], [ self; circuit; instances ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let circuit := M.alloc (| circuit |) in
          let instances := M.alloc (| instances |) in
          M.catch_return (|
            ltac:(M.monadic
              (M.read (|
                let prover :=
                  M.copy (|
                    M.match_operator (|
                      M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::ops::try_trait::Try",
                            Ty.apply
                              (Ty.path "core::result::Result")
                              [
                                Ty.apply
                                  (Ty.path "halo2_proofs::dev::MockVerifier")
                                  [ Ty.associated ];
                                Ty.path "halo2_proofs::plonk::error::Error"
                              ],
                            [],
                            "branch",
                            []
                          |),
                          [
                            M.call_closure (|
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path "halo2_proofs::dev::MockProver")
                                  [ Ty.associated ],
                                "run",
                                [
                                  Ty.apply
                                    (Ty.path "delphinus_zkwasm::circuits::ZkWasmCircuit")
                                    [ Ty.associated ]
                                ]
                              |),
                              [
                                M.read (|
                                  M.SubPointer.get_struct_record_field (|
                                    M.read (| self |),
                                    "delphinus_zkwasm::loader::ZkWasmLoader",
                                    "k"
                                  |)
                                |);
                                M.read (| circuit |);
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.apply
                                      (Ty.path "slice")
                                      [
                                        Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          [ Ty.associated; Ty.path "alloc::alloc::Global" ]
                                      ],
                                    "into_vec",
                                    [ Ty.path "alloc::alloc::Global" ]
                                  |),
                                  [
                                    (* Unsize *)
                                    M.pointer_coercion
                                      (M.read (|
                                        M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.apply
                                              (Ty.path "alloc::boxed::Box")
                                              [
                                                Ty.apply
                                                  (Ty.path "array")
                                                  [
                                                    Ty.apply
                                                      (Ty.path "alloc::vec::Vec")
                                                      [
                                                        Ty.associated;
                                                        Ty.path "alloc::alloc::Global"
                                                      ]
                                                  ];
                                                Ty.path "alloc::alloc::Global"
                                              ],
                                            "new",
                                            []
                                          |),
                                          [
                                            M.alloc (|
                                              Value.Array
                                                [
                                                  M.call_closure (|
                                                    M.get_trait_method (|
                                                      "core::clone::Clone",
                                                      Ty.apply
                                                        (Ty.path "alloc::vec::Vec")
                                                        [
                                                          Ty.associated;
                                                          Ty.path "alloc::alloc::Global"
                                                        ],
                                                      [],
                                                      "clone",
                                                      []
                                                    |),
                                                    [ M.read (| instances |) ]
                                                  |)
                                                ]
                                            |)
                                          ]
                                        |)
                                      |))
                                  ]
                                |)
                              ]
                            |)
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Break",
                                0
                              |) in
                            let residual := M.copy (| γ0_0 |) in
                            M.alloc (|
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::ops::try_trait::FromResidual",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          [ Ty.tuple []; Ty.path "anyhow::Error" ],
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.path "halo2_proofs::plonk::error::Error"
                                            ]
                                        ],
                                        "from_residual",
                                        []
                                      |),
                                      [ M.read (| residual |) ]
                                    |)
                                  |)
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Continue",
                                0
                              |) in
                            let val := M.copy (| γ0_0 |) in
                            val))
                      ]
                    |)
                  |) in
                let _ :=
                  M.match_operator (|
                    M.alloc (|
                      Value.Tuple
                        [
                          M.alloc (|
                            M.call_closure (|
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path "halo2_proofs::dev::MockVerifier")
                                  [ Ty.associated ],
                                "verify",
                                []
                              |),
                              [ prover ]
                            |)
                          |);
                          M.alloc (|
                            Value.StructTuple "core::result::Result::Ok" [ Value.Tuple [] ]
                          |)
                        ]
                    |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                          let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                          let left_val := M.copy (| γ0_0 |) in
                          let right_val := M.copy (| γ0_1 |) in
                          M.match_operator (|
                            M.alloc (| Value.Tuple [] |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ :=
                                    M.use
                                      (M.alloc (|
                                        UnOp.Pure.not
                                          (M.call_closure (|
                                            M.get_trait_method (|
                                              "core::cmp::PartialEq",
                                              Ty.apply
                                                (Ty.path "core::result::Result")
                                                [
                                                  Ty.tuple [];
                                                  Ty.apply
                                                    (Ty.path "alloc::vec::Vec")
                                                    [
                                                      Ty.path "halo2_proofs::dev::VerifyFailure";
                                                      Ty.path "alloc::alloc::Global"
                                                    ]
                                                ],
                                              [
                                                Ty.apply
                                                  (Ty.path "core::result::Result")
                                                  [
                                                    Ty.tuple [];
                                                    Ty.apply
                                                      (Ty.path "alloc::vec::Vec")
                                                      [
                                                        Ty.path "halo2_proofs::dev::VerifyFailure";
                                                        Ty.path "alloc::alloc::Global"
                                                      ]
                                                  ]
                                              ],
                                              "eq",
                                              []
                                            |),
                                            [ M.read (| left_val |); M.read (| right_val |) ]
                                          |))
                                      |)) in
                                  let _ :=
                                    M.is_constant_or_break_match (|
                                      M.read (| γ |),
                                      Value.Bool true
                                    |) in
                                  M.alloc (|
                                    M.never_to_any (|
                                      M.read (|
                                        let kind :=
                                          M.alloc (|
                                            Value.StructTuple "core::panicking::AssertKind::Eq" []
                                          |) in
                                        M.alloc (|
                                          M.call_closure (|
                                            M.get_function (|
                                              "core::panicking::assert_failed",
                                              [
                                                Ty.apply
                                                  (Ty.path "core::result::Result")
                                                  [
                                                    Ty.tuple [];
                                                    Ty.apply
                                                      (Ty.path "alloc::vec::Vec")
                                                      [
                                                        Ty.path "halo2_proofs::dev::VerifyFailure";
                                                        Ty.path "alloc::alloc::Global"
                                                      ]
                                                  ];
                                                Ty.apply
                                                  (Ty.path "core::result::Result")
                                                  [
                                                    Ty.tuple [];
                                                    Ty.apply
                                                      (Ty.path "alloc::vec::Vec")
                                                      [
                                                        Ty.path "halo2_proofs::dev::VerifyFailure";
                                                        Ty.path "alloc::alloc::Global"
                                                      ]
                                                  ]
                                              ]
                                            |),
                                            [
                                              M.read (| kind |);
                                              M.read (| left_val |);
                                              M.read (| right_val |);
                                              Value.StructTuple "core::option::Option::None" []
                                            ]
                                          |)
                                        |)
                                      |)
                                    |)
                                  |)));
                              fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                            ]
                          |)))
                    ]
                  |) in
                M.alloc (| Value.StructTuple "core::result::Result::Ok" [ Value.Tuple [] ] |)
              |)))
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom AssociatedFunction_mock_test : M.IsAssociatedFunction Self "mock_test" mock_test.
    
    (*
        pub fn create_proof<E: MultiMillerLoop>(
            &self,
            params: &Params<E::G1Affine>,
            pk: &ProvingKey<E::G1Affine>,
            circuit: &ZkWasmCircuit<E::Scalar>,
            instances: &Vec<E::Scalar>,
        ) -> Result<Vec<u8>> {
            let mut transcript = Blake2bWrite::init(vec![]);
    
            create_proof(
                params,
                pk,
                std::slice::from_ref(circuit),
                &[&[&instances[..]]],
                OsRng,
                &mut transcript,
            )?;
    
            Ok(transcript.finalize())
        }
    *)
    Definition create_proof (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [ E ], [ self; params; pk; circuit; instances ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let params := M.alloc (| params |) in
          let pk := M.alloc (| pk |) in
          let circuit := M.alloc (| circuit |) in
          let instances := M.alloc (| instances |) in
          M.catch_return (|
            ltac:(M.monadic
              (M.read (|
                let transcript :=
                  M.alloc (|
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path "halo2_proofs::transcript::Blake2bWrite")
                          [
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              [ Ty.path "u8"; Ty.path "alloc::alloc::Global" ];
                            Ty.associated;
                            Ty.apply
                              (Ty.path "halo2_proofs::transcript::Challenge255")
                              [ Ty.associated ]
                          ],
                        "init",
                        []
                      |),
                      [
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              [ Ty.path "u8"; Ty.path "alloc::alloc::Global" ],
                            "new",
                            []
                          |),
                          []
                        |)
                      ]
                    |)
                  |) in
                let _ :=
                  M.match_operator (|
                    M.alloc (|
                      M.call_closure (|
                        M.get_trait_method (|
                          "core::ops::try_trait::Try",
                          Ty.apply
                            (Ty.path "core::result::Result")
                            [ Ty.tuple []; Ty.path "halo2_proofs::plonk::error::Error" ],
                          [],
                          "branch",
                          []
                        |),
                        [
                          M.call_closure (|
                            M.get_function (|
                              "halo2_proofs::plonk::prover::create_proof",
                              [
                                Ty.associated;
                                Ty.apply
                                  (Ty.path "halo2_proofs::transcript::Challenge255")
                                  [ Ty.associated ];
                                Ty.path "rand_core::os::OsRng";
                                Ty.apply
                                  (Ty.path "halo2_proofs::transcript::Blake2bWrite")
                                  [
                                    Ty.apply
                                      (Ty.path "alloc::vec::Vec")
                                      [ Ty.path "u8"; Ty.path "alloc::alloc::Global" ];
                                    Ty.associated;
                                    Ty.apply
                                      (Ty.path "halo2_proofs::transcript::Challenge255")
                                      [ Ty.associated ]
                                  ];
                                Ty.apply
                                  (Ty.path "delphinus_zkwasm::circuits::ZkWasmCircuit")
                                  [ Ty.associated ]
                              ]
                            |),
                            [
                              M.read (| params |);
                              M.read (| pk |);
                              M.call_closure (|
                                M.get_function (|
                                  "core::slice::raw::from_ref",
                                  [
                                    Ty.apply
                                      (Ty.path "delphinus_zkwasm::circuits::ZkWasmCircuit")
                                      [ Ty.associated ]
                                  ]
                                |),
                                [ M.read (| circuit |) ]
                              |);
                              (* Unsize *)
                              M.pointer_coercion
                                (M.alloc (|
                                  Value.Array
                                    [
                                      (* Unsize *)
                                      M.pointer_coercion
                                        (M.alloc (|
                                          Value.Array
                                            [
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "core::ops::index::Index",
                                                  Ty.apply
                                                    (Ty.path "alloc::vec::Vec")
                                                    [ Ty.associated; Ty.path "alloc::alloc::Global"
                                                    ],
                                                  [ Ty.path "core::ops::range::RangeFull" ],
                                                  "index",
                                                  []
                                                |),
                                                [
                                                  M.read (| instances |);
                                                  Value.StructTuple "core::ops::range::RangeFull" []
                                                ]
                                              |)
                                            ]
                                        |))
                                    ]
                                |));
                              Value.StructTuple "rand_core::os::OsRng" [];
                              transcript
                            ]
                          |)
                        ]
                      |)
                    |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "core::ops::control_flow::ControlFlow::Break",
                              0
                            |) in
                          let residual := M.copy (| γ0_0 |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                M.return_ (|
                                  M.call_closure (|
                                    M.get_trait_method (|
                                      "core::ops::try_trait::FromResidual",
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        [
                                          Ty.apply
                                            (Ty.path "alloc::vec::Vec")
                                            [ Ty.path "u8"; Ty.path "alloc::alloc::Global" ];
                                          Ty.path "anyhow::Error"
                                        ],
                                      [
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          [
                                            Ty.path "core::convert::Infallible";
                                            Ty.path "halo2_proofs::plonk::error::Error"
                                          ]
                                      ],
                                      "from_residual",
                                      []
                                    |),
                                    [ M.read (| residual |) ]
                                  |)
                                |)
                              |)
                            |)
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "core::ops::control_flow::ControlFlow::Continue",
                              0
                            |) in
                          let val := M.copy (| γ0_0 |) in
                          val))
                    ]
                  |) in
                M.alloc (|
                  Value.StructTuple
                    "core::result::Result::Ok"
                    [
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.apply
                            (Ty.path "halo2_proofs::transcript::Blake2bWrite")
                            [
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                [ Ty.path "u8"; Ty.path "alloc::alloc::Global" ];
                              Ty.associated;
                              Ty.apply
                                (Ty.path "halo2_proofs::transcript::Challenge255")
                                [ Ty.associated ]
                            ],
                          "finalize",
                          []
                        |),
                        [ M.read (| transcript |) ]
                      |)
                    ]
                |)
              |)))
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom AssociatedFunction_create_proof : M.IsAssociatedFunction Self "create_proof" create_proof.
    
    (*
        fn init_env(&self) -> Result<()> {
            init_zkwasm_runtime(self.k);
    
            Ok(())
        }
    *)
    Definition init_env (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.read (|
            let _ :=
              M.alloc (|
                M.call_closure (|
                  M.get_function (|
                    "delphinus_zkwasm::circuits::config::init_zkwasm_runtime",
                    []
                  |),
                  [
                    M.read (|
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "delphinus_zkwasm::loader::ZkWasmLoader",
                        "k"
                      |)
                    |)
                  ]
                |)
              |) in
            M.alloc (| Value.StructTuple "core::result::Result::Ok" [ Value.Tuple [] ] |)
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom AssociatedFunction_init_env : M.IsAssociatedFunction Self "init_env" init_env.
    
    (*
        pub fn verify_proof<E: MultiMillerLoop>(
            &self,
            params: &Params<E::G1Affine>,
            vkey: &VerifyingKey<E::G1Affine>,
            instances: &Vec<E::Scalar>,
            proof: Vec<u8>,
        ) -> Result<()> {
            let params_verifier: ParamsVerifier<E> = params.verifier(instances.len()).unwrap();
            let strategy = SingleVerifier::new(&params_verifier);
    
            verify_proof(
                &params_verifier,
                vkey,
                strategy,
                &[&[&instances]],
                &mut Blake2bRead::init(&proof[..]),
            )
            .unwrap();
    
            Ok(())
        }
    *)
    Definition verify_proof (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [ E ], [ self; params; vkey; instances; proof ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let params := M.alloc (| params |) in
          let vkey := M.alloc (| vkey |) in
          let instances := M.alloc (| instances |) in
          let proof := M.alloc (| proof |) in
          M.read (|
            let params_verifier :=
              M.alloc (|
                M.call_closure (|
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path "core::result::Result")
                      [
                        Ty.apply (Ty.path "halo2_proofs::poly::commitment::ParamsVerifier") [ E ];
                        Ty.path "std::io::error::Error"
                      ],
                    "unwrap",
                    []
                  |),
                  [
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path "halo2_proofs::poly::commitment::Params")
                          [ Ty.associated ],
                        "verifier",
                        [ E ]
                      |),
                      [
                        M.read (| params |);
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              [ Ty.associated; Ty.path "alloc::alloc::Global" ],
                            "len",
                            []
                          |),
                          [ M.read (| instances |) ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            let strategy :=
              M.alloc (|
                M.call_closure (|
                  M.get_associated_function (|
                    Ty.apply (Ty.path "halo2_proofs::plonk::verifier::SingleVerifier") [ E ],
                    "new",
                    []
                  |),
                  [ params_verifier ]
                |)
              |) in
            let _ :=
              M.alloc (|
                M.call_closure (|
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path "core::result::Result")
                      [ Ty.tuple []; Ty.path "halo2_proofs::plonk::error::Error" ],
                    "unwrap",
                    []
                  |),
                  [
                    M.call_closure (|
                      M.get_function (|
                        "halo2_proofs::plonk::verifier::verify_proof",
                        [
                          E;
                          Ty.apply
                            (Ty.path "halo2_proofs::transcript::Challenge255")
                            [ Ty.associated ];
                          Ty.apply
                            (Ty.path "halo2_proofs::transcript::Blake2bRead")
                            [
                              Ty.apply
                                (Ty.path "&")
                                [ Ty.apply (Ty.path "slice") [ Ty.path "u8" ] ];
                              Ty.associated;
                              Ty.apply
                                (Ty.path "halo2_proofs::transcript::Challenge255")
                                [ Ty.associated ]
                            ];
                          Ty.apply (Ty.path "halo2_proofs::plonk::verifier::SingleVerifier") [ E ]
                        ]
                      |),
                      [
                        params_verifier;
                        M.read (| vkey |);
                        M.read (| strategy |);
                        (* Unsize *)
                        M.pointer_coercion
                          (M.alloc (|
                            Value.Array
                              [
                                (* Unsize *)
                                M.pointer_coercion
                                  (M.alloc (|
                                    Value.Array
                                      [
                                        M.call_closure (|
                                          M.get_trait_method (|
                                            "core::ops::deref::Deref",
                                            Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              [ Ty.associated; Ty.path "alloc::alloc::Global" ],
                                            [],
                                            "deref",
                                            []
                                          |),
                                          [ M.read (| instances |) ]
                                        |)
                                      ]
                                  |))
                              ]
                          |));
                        M.alloc (|
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.apply
                                (Ty.path "halo2_proofs::transcript::Blake2bRead")
                                [
                                  Ty.apply
                                    (Ty.path "&")
                                    [ Ty.apply (Ty.path "slice") [ Ty.path "u8" ] ];
                                  Ty.associated;
                                  Ty.apply
                                    (Ty.path "halo2_proofs::transcript::Challenge255")
                                    [ Ty.associated ]
                                ],
                              "init",
                              []
                            |),
                            [
                              M.call_closure (|
                                M.get_trait_method (|
                                  "core::ops::index::Index",
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    [ Ty.path "u8"; Ty.path "alloc::alloc::Global" ],
                                  [ Ty.path "core::ops::range::RangeFull" ],
                                  "index",
                                  []
                                |),
                                [ proof; Value.StructTuple "core::ops::range::RangeFull" [] ]
                              |)
                            ]
                          |)
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            M.alloc (| Value.StructTuple "core::result::Result::Ok" [ Value.Tuple [] ] |)
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom AssociatedFunction_verify_proof : M.IsAssociatedFunction Self "verify_proof" verify_proof.
    
    (*
        pub fn checksum<C: CurveAffine>(
            &self,
            params: &Params<C>,
            compilation_table: &CompilationTable,
        ) -> Result<Vec<C>> {
            Ok(compilation_table.checksum(self.k, params))
        }
    *)
    Definition checksum (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [ C ], [ self; params; compilation_table ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let params := M.alloc (| params |) in
          let compilation_table := M.alloc (| compilation_table |) in
          Value.StructTuple
            "core::result::Result::Ok"
            [
              M.call_closure (|
                M.get_trait_method (|
                  "delphinus_zkwasm::checksum::ImageCheckSum",
                  Ty.path "specs::CompilationTable",
                  [ C; Ty.apply (Ty.path "alloc::vec::Vec") [ C; Ty.path "alloc::alloc::Global" ] ],
                  "checksum",
                  []
                |),
                [
                  M.read (| compilation_table |);
                  M.read (|
                    M.SubPointer.get_struct_record_field (|
                      M.read (| self |),
                      "delphinus_zkwasm::loader::ZkWasmLoader",
                      "k"
                    |)
                  |);
                  M.read (| params |)
                ]
              |)
            ]))
      | _, _ => M.impossible
      end.
    
    Axiom AssociatedFunction_checksum : M.IsAssociatedFunction Self "checksum" checksum.
  End Impl_delphinus_zkwasm_loader_ZkWasmLoader.
  
  
End loader.
