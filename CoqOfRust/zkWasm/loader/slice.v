(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module loader.
  Module slice.
    (* StructRecord
      {
        name := "Slices";
        ty_params := [ "F" ];
        fields :=
          [
            ("k", Ty.path "u32");
            ("itable",
              Ty.apply
                (Ty.path "alloc::sync::Arc")
                [ Ty.path "specs::itable::InstructionTable"; Ty.path "alloc::alloc::Global" ]);
            ("br_table",
              Ty.apply
                (Ty.path "alloc::sync::Arc")
                [ Ty.path "specs::brtable::BrTable"; Ty.path "alloc::alloc::Global" ]);
            ("elem_table",
              Ty.apply
                (Ty.path "alloc::sync::Arc")
                [ Ty.path "specs::brtable::ElemTable"; Ty.path "alloc::alloc::Global" ]);
            ("configure_table",
              Ty.apply
                (Ty.path "alloc::sync::Arc")
                [ Ty.path "specs::configure_table::ConfigureTable"; Ty.path "alloc::alloc::Global"
                ]);
            ("static_jtable",
              Ty.apply
                (Ty.path "alloc::sync::Arc")
                [
                  Ty.apply (Ty.path "array") [ Ty.path "specs::jtable::StaticFrameEntry" ];
                  Ty.path "alloc::alloc::Global"
                ]);
            ("frame_table",
              Ty.apply
                (Ty.path "alloc::sync::Arc")
                [ Ty.path "specs::jtable::JumpTable"; Ty.path "alloc::alloc::Global" ]);
            ("imtable",
              Ty.apply
                (Ty.path "alloc::sync::Arc")
                [ Ty.path "specs::imtable::InitMemoryTable"; Ty.path "alloc::alloc::Global" ]);
            ("initialization_state",
              Ty.apply
                (Ty.path "alloc::sync::Arc")
                [
                  Ty.apply
                    (Ty.path "specs::state::InitializationState")
                    [ Ty.path "u32"; Ty.path "num_bigint::biguint::BigUint" ];
                  Ty.path "alloc::alloc::Global"
                ]);
            ("etables",
              Ty.apply
                (Ty.path "alloc::collections::vec_deque::VecDeque")
                [ Ty.path "specs::etable::EventTableBackend"; Ty.path "alloc::alloc::Global" ]);
            ("_marker", Ty.apply (Ty.path "core::marker::PhantomData") [ F ])
          ];
      } *)
    
    Module Impl_delphinus_zkwasm_loader_slice_Slices_F.
      Definition Self (F : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "delphinus_zkwasm::loader::slice::Slices") [ F ].
      
      (*
          pub fn new(k: u32, tables: Tables) -> Result<Self, BuildingCircuitError> {
              if cfg!(not(feature = "continuation")) {
                  let slices = tables.execution_tables.etable.len();
      
                  if slices != 1 {
                      return Err(BuildingCircuitError::MultiSlicesNotSupport(slices));
                  }
              }
      
              Ok(Self {
                  k,
      
                  itable: tables.compilation_tables.itable,
                  br_table: tables.compilation_tables.br_table,
                  elem_table: tables.compilation_tables.elem_table,
                  configure_table: tables.compilation_tables.configure_table,
                  static_jtable: tables.compilation_tables.static_jtable,
                  frame_table: Arc::new(tables.execution_tables.jtable),
      
                  imtable: tables.compilation_tables.imtable,
                  initialization_state: tables.compilation_tables.initialization_state,
      
                  etables: tables.execution_tables.etable.into(),
      
                  _marker: std::marker::PhantomData,
              })
          }
      *)
      Definition new (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match τ, α with
        | [], [ k; tables ] =>
          ltac:(M.monadic
            (let k := M.alloc (| k |) in
            let tables := M.alloc (| tables |) in
            M.catch_return (|
              ltac:(M.monadic
                (M.read (|
                  let _ :=
                    M.match_operator (|
                      M.alloc (| Value.Tuple [] |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ := M.use (M.alloc (| Value.Bool true |)) in
                            let _ :=
                              M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                            let slices :=
                              M.alloc (|
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.apply
                                      (Ty.path "alloc::vec::Vec")
                                      [
                                        Ty.path "specs::etable::EventTableBackend";
                                        Ty.path "alloc::alloc::Global"
                                      ],
                                    "len",
                                    []
                                  |),
                                  [
                                    M.SubPointer.get_struct_record_field (|
                                      M.SubPointer.get_struct_record_field (|
                                        tables,
                                        "specs::Tables",
                                        "execution_tables"
                                      |),
                                      "specs::ExecutionTable",
                                      "etable"
                                    |)
                                  ]
                                |)
                              |) in
                            M.match_operator (|
                              M.alloc (| Value.Tuple [] |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ :=
                                      M.use
                                        (M.alloc (|
                                          BinOp.Pure.ne (M.read (| slices |)) (Value.Integer 1)
                                        |)) in
                                    let _ :=
                                      M.is_constant_or_break_match (|
                                        M.read (| γ |),
                                        Value.Bool true
                                      |) in
                                    M.alloc (|
                                      M.never_to_any (|
                                        M.read (|
                                          M.return_ (|
                                            Value.StructTuple
                                              "core::result::Result::Err"
                                              [
                                                Value.StructTuple
                                                  "delphinus_zkwasm::error::BuildingCircuitError::MultiSlicesNotSupport"
                                                  [ M.read (| slices |) ]
                                              ]
                                          |)
                                        |)
                                      |)
                                    |)));
                                fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                              ]
                            |)));
                        fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                      ]
                    |) in
                  M.alloc (|
                    Value.StructTuple
                      "core::result::Result::Ok"
                      [
                        Value.StructRecord
                          "delphinus_zkwasm::loader::slice::Slices"
                          [
                            ("k", M.read (| k |));
                            ("itable",
                              M.read (|
                                M.SubPointer.get_struct_record_field (|
                                  M.SubPointer.get_struct_record_field (|
                                    tables,
                                    "specs::Tables",
                                    "compilation_tables"
                                  |),
                                  "specs::CompilationTable",
                                  "itable"
                                |)
                              |));
                            ("br_table",
                              M.read (|
                                M.SubPointer.get_struct_record_field (|
                                  M.SubPointer.get_struct_record_field (|
                                    tables,
                                    "specs::Tables",
                                    "compilation_tables"
                                  |),
                                  "specs::CompilationTable",
                                  "br_table"
                                |)
                              |));
                            ("elem_table",
                              M.read (|
                                M.SubPointer.get_struct_record_field (|
                                  M.SubPointer.get_struct_record_field (|
                                    tables,
                                    "specs::Tables",
                                    "compilation_tables"
                                  |),
                                  "specs::CompilationTable",
                                  "elem_table"
                                |)
                              |));
                            ("configure_table",
                              M.read (|
                                M.SubPointer.get_struct_record_field (|
                                  M.SubPointer.get_struct_record_field (|
                                    tables,
                                    "specs::Tables",
                                    "compilation_tables"
                                  |),
                                  "specs::CompilationTable",
                                  "configure_table"
                                |)
                              |));
                            ("static_jtable",
                              M.read (|
                                M.SubPointer.get_struct_record_field (|
                                  M.SubPointer.get_struct_record_field (|
                                    tables,
                                    "specs::Tables",
                                    "compilation_tables"
                                  |),
                                  "specs::CompilationTable",
                                  "static_jtable"
                                |)
                              |));
                            ("frame_table",
                              M.call_closure (|
                                M.get_associated_function (|
                                  Ty.apply
                                    (Ty.path "alloc::sync::Arc")
                                    [
                                      Ty.path "specs::jtable::JumpTable";
                                      Ty.path "alloc::alloc::Global"
                                    ],
                                  "new",
                                  []
                                |),
                                [
                                  M.read (|
                                    M.SubPointer.get_struct_record_field (|
                                      M.SubPointer.get_struct_record_field (|
                                        tables,
                                        "specs::Tables",
                                        "execution_tables"
                                      |),
                                      "specs::ExecutionTable",
                                      "jtable"
                                    |)
                                  |)
                                ]
                              |));
                            ("imtable",
                              M.read (|
                                M.SubPointer.get_struct_record_field (|
                                  M.SubPointer.get_struct_record_field (|
                                    tables,
                                    "specs::Tables",
                                    "compilation_tables"
                                  |),
                                  "specs::CompilationTable",
                                  "imtable"
                                |)
                              |));
                            ("initialization_state",
                              M.read (|
                                M.SubPointer.get_struct_record_field (|
                                  M.SubPointer.get_struct_record_field (|
                                    tables,
                                    "specs::Tables",
                                    "compilation_tables"
                                  |),
                                  "specs::CompilationTable",
                                  "initialization_state"
                                |)
                              |));
                            ("etables",
                              M.call_closure (|
                                M.get_trait_method (|
                                  "core::convert::Into",
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    [
                                      Ty.path "specs::etable::EventTableBackend";
                                      Ty.path "alloc::alloc::Global"
                                    ],
                                  [
                                    Ty.apply
                                      (Ty.path "alloc::collections::vec_deque::VecDeque")
                                      [
                                        Ty.path "specs::etable::EventTableBackend";
                                        Ty.path "alloc::alloc::Global"
                                      ]
                                  ],
                                  "into",
                                  []
                                |),
                                [
                                  M.read (|
                                    M.SubPointer.get_struct_record_field (|
                                      M.SubPointer.get_struct_record_field (|
                                        tables,
                                        "specs::Tables",
                                        "execution_tables"
                                      |),
                                      "specs::ExecutionTable",
                                      "etable"
                                    |)
                                  |)
                                ]
                              |));
                            ("_marker", Value.StructTuple "core::marker::PhantomData" [])
                          ]
                      ]
                  |)
                |)))
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom AssociatedFunction_new :
        forall (F : Ty.t),
        M.IsAssociatedFunction (Self F) "new" (new F).
      
      (*
          pub fn mock_test_all(self, instances: Vec<F>) -> anyhow::Result<()> {
              use halo2_proofs::dev::MockProver;
      
              let k = self.k;
              let mut iter = self.into_iter();
      
              while let Some(slice) = iter.next() {
                  let prover = MockProver::run(k, &slice?, vec![instances.clone()])?;
                  assert_eq!(prover.verify(), Ok(()));
              }
      
              Ok(())
          }
      *)
      Definition mock_test_all (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match τ, α with
        | [], [ self; instances ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let instances := M.alloc (| instances |) in
            M.catch_return (|
              ltac:(M.monadic
                (M.read (|
                  let k :=
                    M.copy (|
                      M.SubPointer.get_struct_record_field (|
                        self,
                        "delphinus_zkwasm::loader::slice::Slices",
                        "k"
                      |)
                    |) in
                  let iter :=
                    M.alloc (|
                      M.call_closure (|
                        M.get_trait_method (|
                          "core::iter::traits::collect::IntoIterator",
                          Ty.apply (Ty.path "delphinus_zkwasm::loader::slice::Slices") [ F ],
                          [],
                          "into_iter",
                          []
                        |),
                        [ M.read (| self |) ]
                      |)
                    |) in
                  let _ :=
                    M.loop (|
                      ltac:(M.monadic
                        (M.match_operator (|
                          M.alloc (| Value.Tuple [] |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ :=
                                  M.alloc (|
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::iter::traits::iterator::Iterator",
                                        Ty.apply
                                          (Ty.path "delphinus_zkwasm::loader::slice::Slices")
                                          [ F ],
                                        [],
                                        "next",
                                        []
                                      |),
                                      [ iter ]
                                    |)
                                  |) in
                                let γ0_0 :=
                                  M.SubPointer.get_struct_tuple_field (|
                                    γ,
                                    "core::option::Option::Some",
                                    0
                                  |) in
                                let slice := M.copy (| γ0_0 |) in
                                let prover :=
                                  M.copy (|
                                    M.match_operator (|
                                      M.alloc (|
                                        M.call_closure (|
                                          M.get_trait_method (|
                                            "core::ops::try_trait::Try",
                                            Ty.apply
                                              (Ty.path "core::result::Result")
                                              [
                                                Ty.apply
                                                  (Ty.path "halo2_proofs::dev::MockVerifier")
                                                  [ F ];
                                                Ty.path "halo2_proofs::plonk::error::Error"
                                              ],
                                            [],
                                            "branch",
                                            []
                                          |),
                                          [
                                            M.call_closure (|
                                              M.get_associated_function (|
                                                Ty.apply
                                                  (Ty.path "halo2_proofs::dev::MockProver")
                                                  [ F ],
                                                "run",
                                                [
                                                  Ty.apply
                                                    (Ty.path
                                                      "delphinus_zkwasm::circuits::ZkWasmCircuit")
                                                    [ F ]
                                                ]
                                              |),
                                              [
                                                M.read (| k |);
                                                M.match_operator (|
                                                  M.alloc (|
                                                    M.call_closure (|
                                                      M.get_trait_method (|
                                                        "core::ops::try_trait::Try",
                                                        Ty.apply
                                                          (Ty.path "core::result::Result")
                                                          [
                                                            Ty.apply
                                                              (Ty.path
                                                                "delphinus_zkwasm::circuits::ZkWasmCircuit")
                                                              [ F ];
                                                            Ty.path
                                                              "delphinus_zkwasm::error::BuildingCircuitError"
                                                          ],
                                                        [],
                                                        "branch",
                                                        []
                                                      |),
                                                      [ M.read (| slice |) ]
                                                    |)
                                                  |),
                                                  [
                                                    fun γ =>
                                                      ltac:(M.monadic
                                                        (let γ0_0 :=
                                                          M.SubPointer.get_struct_tuple_field (|
                                                            γ,
                                                            "core::ops::control_flow::ControlFlow::Break",
                                                            0
                                                          |) in
                                                        let residual := M.copy (| γ0_0 |) in
                                                        M.alloc (|
                                                          M.never_to_any (|
                                                            M.read (|
                                                              M.return_ (|
                                                                M.call_closure (|
                                                                  M.get_trait_method (|
                                                                    "core::ops::try_trait::FromResidual",
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "core::result::Result")
                                                                      [
                                                                        Ty.tuple [];
                                                                        Ty.path "anyhow::Error"
                                                                      ],
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "core::result::Result")
                                                                        [
                                                                          Ty.path
                                                                            "core::convert::Infallible";
                                                                          Ty.path
                                                                            "delphinus_zkwasm::error::BuildingCircuitError"
                                                                        ]
                                                                    ],
                                                                    "from_residual",
                                                                    []
                                                                  |),
                                                                  [ M.read (| residual |) ]
                                                                |)
                                                              |)
                                                            |)
                                                          |)
                                                        |)));
                                                    fun γ =>
                                                      ltac:(M.monadic
                                                        (let γ0_0 :=
                                                          M.SubPointer.get_struct_tuple_field (|
                                                            γ,
                                                            "core::ops::control_flow::ControlFlow::Continue",
                                                            0
                                                          |) in
                                                        let val := M.copy (| γ0_0 |) in
                                                        val))
                                                  ]
                                                |);
                                                M.call_closure (|
                                                  M.get_associated_function (|
                                                    Ty.apply
                                                      (Ty.path "slice")
                                                      [
                                                        Ty.apply
                                                          (Ty.path "alloc::vec::Vec")
                                                          [ F; Ty.path "alloc::alloc::Global" ]
                                                      ],
                                                    "into_vec",
                                                    [ Ty.path "alloc::alloc::Global" ]
                                                  |),
                                                  [
                                                    (* Unsize *)
                                                    M.pointer_coercion
                                                      (M.read (|
                                                        M.call_closure (|
                                                          M.get_associated_function (|
                                                            Ty.apply
                                                              (Ty.path "alloc::boxed::Box")
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "array")
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path "alloc::vec::Vec")
                                                                      [
                                                                        F;
                                                                        Ty.path
                                                                          "alloc::alloc::Global"
                                                                      ]
                                                                  ];
                                                                Ty.path "alloc::alloc::Global"
                                                              ],
                                                            "new",
                                                            []
                                                          |),
                                                          [
                                                            M.alloc (|
                                                              Value.Array
                                                                [
                                                                  M.call_closure (|
                                                                    M.get_trait_method (|
                                                                      "core::clone::Clone",
                                                                      Ty.apply
                                                                        (Ty.path "alloc::vec::Vec")
                                                                        [
                                                                          F;
                                                                          Ty.path
                                                                            "alloc::alloc::Global"
                                                                        ],
                                                                      [],
                                                                      "clone",
                                                                      []
                                                                    |),
                                                                    [ instances ]
                                                                  |)
                                                                ]
                                                            |)
                                                          ]
                                                        |)
                                                      |))
                                                  ]
                                                |)
                                              ]
                                            |)
                                          ]
                                        |)
                                      |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let γ0_0 :=
                                              M.SubPointer.get_struct_tuple_field (|
                                                γ,
                                                "core::ops::control_flow::ControlFlow::Break",
                                                0
                                              |) in
                                            let residual := M.copy (| γ0_0 |) in
                                            M.alloc (|
                                              M.never_to_any (|
                                                M.read (|
                                                  M.return_ (|
                                                    M.call_closure (|
                                                      M.get_trait_method (|
                                                        "core::ops::try_trait::FromResidual",
                                                        Ty.apply
                                                          (Ty.path "core::result::Result")
                                                          [ Ty.tuple []; Ty.path "anyhow::Error" ],
                                                        [
                                                          Ty.apply
                                                            (Ty.path "core::result::Result")
                                                            [
                                                              Ty.path "core::convert::Infallible";
                                                              Ty.path
                                                                "halo2_proofs::plonk::error::Error"
                                                            ]
                                                        ],
                                                        "from_residual",
                                                        []
                                                      |),
                                                      [ M.read (| residual |) ]
                                                    |)
                                                  |)
                                                |)
                                              |)
                                            |)));
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let γ0_0 :=
                                              M.SubPointer.get_struct_tuple_field (|
                                                γ,
                                                "core::ops::control_flow::ControlFlow::Continue",
                                                0
                                              |) in
                                            let val := M.copy (| γ0_0 |) in
                                            val))
                                      ]
                                    |)
                                  |) in
                                let _ :=
                                  M.match_operator (|
                                    M.alloc (|
                                      Value.Tuple
                                        [
                                          M.alloc (|
                                            M.call_closure (|
                                              M.get_associated_function (|
                                                Ty.apply
                                                  (Ty.path "halo2_proofs::dev::MockVerifier")
                                                  [ F ],
                                                "verify",
                                                []
                                              |),
                                              [ prover ]
                                            |)
                                          |);
                                          M.alloc (|
                                            Value.StructTuple
                                              "core::result::Result::Ok"
                                              [ Value.Tuple [] ]
                                          |)
                                        ]
                                    |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                                          let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                                          let left_val := M.copy (| γ0_0 |) in
                                          let right_val := M.copy (| γ0_1 |) in
                                          M.match_operator (|
                                            M.alloc (| Value.Tuple [] |),
                                            [
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let γ :=
                                                    M.use
                                                      (M.alloc (|
                                                        UnOp.Pure.not
                                                          (M.call_closure (|
                                                            M.get_trait_method (|
                                                              "core::cmp::PartialEq",
                                                              Ty.apply
                                                                (Ty.path "core::result::Result")
                                                                [
                                                                  Ty.tuple [];
                                                                  Ty.apply
                                                                    (Ty.path "alloc::vec::Vec")
                                                                    [
                                                                      Ty.path
                                                                        "halo2_proofs::dev::VerifyFailure";
                                                                      Ty.path "alloc::alloc::Global"
                                                                    ]
                                                                ],
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "core::result::Result")
                                                                  [
                                                                    Ty.tuple [];
                                                                    Ty.apply
                                                                      (Ty.path "alloc::vec::Vec")
                                                                      [
                                                                        Ty.path
                                                                          "halo2_proofs::dev::VerifyFailure";
                                                                        Ty.path
                                                                          "alloc::alloc::Global"
                                                                      ]
                                                                  ]
                                                              ],
                                                              "eq",
                                                              []
                                                            |),
                                                            [
                                                              M.read (| left_val |);
                                                              M.read (| right_val |)
                                                            ]
                                                          |))
                                                      |)) in
                                                  let _ :=
                                                    M.is_constant_or_break_match (|
                                                      M.read (| γ |),
                                                      Value.Bool true
                                                    |) in
                                                  M.alloc (|
                                                    M.never_to_any (|
                                                      M.read (|
                                                        let kind :=
                                                          M.alloc (|
                                                            Value.StructTuple
                                                              "core::panicking::AssertKind::Eq"
                                                              []
                                                          |) in
                                                        M.alloc (|
                                                          M.call_closure (|
                                                            M.get_function (|
                                                              "core::panicking::assert_failed",
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "core::result::Result")
                                                                  [
                                                                    Ty.tuple [];
                                                                    Ty.apply
                                                                      (Ty.path "alloc::vec::Vec")
                                                                      [
                                                                        Ty.path
                                                                          "halo2_proofs::dev::VerifyFailure";
                                                                        Ty.path
                                                                          "alloc::alloc::Global"
                                                                      ]
                                                                  ];
                                                                Ty.apply
                                                                  (Ty.path "core::result::Result")
                                                                  [
                                                                    Ty.tuple [];
                                                                    Ty.apply
                                                                      (Ty.path "alloc::vec::Vec")
                                                                      [
                                                                        Ty.path
                                                                          "halo2_proofs::dev::VerifyFailure";
                                                                        Ty.path
                                                                          "alloc::alloc::Global"
                                                                      ]
                                                                  ]
                                                              ]
                                                            |),
                                                            [
                                                              M.read (| kind |);
                                                              M.read (| left_val |);
                                                              M.read (| right_val |);
                                                              Value.StructTuple
                                                                "core::option::Option::None"
                                                                []
                                                            ]
                                                          |)
                                                        |)
                                                      |)
                                                    |)
                                                  |)));
                                              fun γ =>
                                                ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                            ]
                                          |)))
                                    ]
                                  |) in
                                M.alloc (| Value.Tuple [] |)));
                            fun γ =>
                              ltac:(M.monadic
                                (M.alloc (|
                                  M.never_to_any (|
                                    M.read (|
                                      let _ :=
                                        M.alloc (|
                                          M.never_to_any (| M.read (| M.break (||) |) |)
                                        |) in
                                      M.alloc (| Value.Tuple [] |)
                                    |)
                                  |)
                                |)))
                          ]
                        |)))
                    |) in
                  M.alloc (| Value.StructTuple "core::result::Result::Ok" [ Value.Tuple [] ] |)
                |)))
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom AssociatedFunction_mock_test_all :
        forall (F : Ty.t),
        M.IsAssociatedFunction (Self F) "mock_test_all" (mock_test_all F).
    End Impl_delphinus_zkwasm_loader_slice_Slices_F.
    
    Module Impl_core_iter_traits_iterator_Iterator_where_pairing_bn256_arithmetic_fields_FieldExt_F_for_delphinus_zkwasm_loader_slice_Slices_F.
      Definition Self (F : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "delphinus_zkwasm::loader::slice::Slices") [ F ].
      
      (*     type Item = Result<ZkWasmCircuit<F>, BuildingCircuitError>; *)
      Definition _Item (F : Ty.t) : Ty.t :=
        Ty.apply
          (Ty.path "core::result::Result")
          [
            Ty.apply (Ty.path "delphinus_zkwasm::circuits::ZkWasmCircuit") [ F ];
            Ty.path "delphinus_zkwasm::error::BuildingCircuitError"
          ].
      
      (*
          fn next(&mut self) -> Option<Self::Item> {
              if self.etables.is_empty() {
                  return None;
              }
      
              let etable = match self.etables.pop_front().unwrap() {
                  EventTableBackend::Memory(etable) => etable,
                  EventTableBackend::Json(path) => EventTable::read(&path).unwrap(),
              };
      
              let post_imtable = Arc::new(self.imtable.update_init_memory_table(&etable));
              let post_initialization_state = Arc::new({
                  let next_event_entry = if let Some(next_event_table) = self.etables.front() {
                      match next_event_table {
                          EventTableBackend::Memory(etable) => etable.entries().first().cloned(),
                          EventTableBackend::Json(path) => {
                              let etable = EventTable::read(&path).unwrap();
                              etable.entries().first().cloned()
                          }
                      }
                  } else {
                      None
                  };
      
                  self.initialization_state.update_initialization_state(
                      &etable,
                      &self.configure_table,
                      next_event_entry.as_ref(),
                  )
              });
      
              let slice = Slice {
                  itable: self.itable.clone(),
                  br_table: self.br_table.clone(),
                  elem_table: self.elem_table.clone(),
                  configure_table: self.configure_table.clone(),
                  static_jtable: self.static_jtable.clone(),
                  frame_table: self.frame_table.clone(),
      
                  imtable: self.imtable.clone(),
                  post_imtable: post_imtable.clone(),
      
                  initialization_state: self.initialization_state.clone(),
                  post_initialization_state: post_initialization_state.clone(),
      
                  etable: Arc::new(etable),
                  is_last_slice: self.etables.is_empty(),
              };
      
              self.imtable = post_imtable;
              self.initialization_state = post_initialization_state;
      
              let circuit = ZkWasmCircuit::new(self.k, slice);
      
              Some(circuit)
          }
      *)
      Definition next (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match τ, α with
        | [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.catch_return (|
              ltac:(M.monadic
                (M.read (|
                  let _ :=
                    M.match_operator (|
                      M.alloc (| Value.Tuple [] |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ :=
                              M.use
                                (M.alloc (|
                                  M.call_closure (|
                                    M.get_associated_function (|
                                      Ty.apply
                                        (Ty.path "alloc::collections::vec_deque::VecDeque")
                                        [
                                          Ty.path "specs::etable::EventTableBackend";
                                          Ty.path "alloc::alloc::Global"
                                        ],
                                      "is_empty",
                                      []
                                    |),
                                    [
                                      M.SubPointer.get_struct_record_field (|
                                        M.read (| self |),
                                        "delphinus_zkwasm::loader::slice::Slices",
                                        "etables"
                                      |)
                                    ]
                                  |)
                                |)) in
                            let _ :=
                              M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                            M.alloc (|
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (| Value.StructTuple "core::option::Option::None" [] |)
                                |)
                              |)
                            |)));
                        fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                      ]
                    |) in
                  let etable :=
                    M.copy (|
                      M.match_operator (|
                        M.alloc (|
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.apply
                                (Ty.path "core::option::Option")
                                [ Ty.path "specs::etable::EventTableBackend" ],
                              "unwrap",
                              []
                            |),
                            [
                              M.call_closure (|
                                M.get_associated_function (|
                                  Ty.apply
                                    (Ty.path "alloc::collections::vec_deque::VecDeque")
                                    [
                                      Ty.path "specs::etable::EventTableBackend";
                                      Ty.path "alloc::alloc::Global"
                                    ],
                                  "pop_front",
                                  []
                                |),
                                [
                                  M.SubPointer.get_struct_record_field (|
                                    M.read (| self |),
                                    "delphinus_zkwasm::loader::slice::Slices",
                                    "etables"
                                  |)
                                ]
                              |)
                            ]
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "specs::etable::EventTableBackend::Memory",
                                  0
                                |) in
                              let etable := M.copy (| γ0_0 |) in
                              etable));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "specs::etable::EventTableBackend::Json",
                                  0
                                |) in
                              let path := M.copy (| γ0_0 |) in
                              M.alloc (|
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.apply
                                      (Ty.path "core::result::Result")
                                      [
                                        Ty.path "specs::etable::EventTable";
                                        Ty.path "std::io::error::Error"
                                      ],
                                    "unwrap",
                                    []
                                  |),
                                  [
                                    M.call_closure (|
                                      M.get_associated_function (|
                                        Ty.path "specs::etable::EventTable",
                                        "read",
                                        []
                                      |),
                                      [ path ]
                                    |)
                                  ]
                                |)
                              |)))
                        ]
                      |)
                    |) in
                  let post_imtable :=
                    M.alloc (|
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.apply
                            (Ty.path "alloc::sync::Arc")
                            [
                              Ty.path "specs::imtable::InitMemoryTable";
                              Ty.path "alloc::alloc::Global"
                            ],
                          "new",
                          []
                        |),
                        [
                          M.call_closure (|
                            M.get_trait_method (|
                              "delphinus_zkwasm::runtime::state::UpdateInitMemoryTable",
                              Ty.path "specs::imtable::InitMemoryTable",
                              [],
                              "update_init_memory_table",
                              []
                            |),
                            [
                              M.call_closure (|
                                M.get_trait_method (|
                                  "core::ops::deref::Deref",
                                  Ty.apply
                                    (Ty.path "alloc::sync::Arc")
                                    [
                                      Ty.path "specs::imtable::InitMemoryTable";
                                      Ty.path "alloc::alloc::Global"
                                    ],
                                  [],
                                  "deref",
                                  []
                                |),
                                [
                                  M.SubPointer.get_struct_record_field (|
                                    M.read (| self |),
                                    "delphinus_zkwasm::loader::slice::Slices",
                                    "imtable"
                                  |)
                                ]
                              |);
                              etable
                            ]
                          |)
                        ]
                      |)
                    |) in
                  let post_initialization_state :=
                    M.alloc (|
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.apply
                            (Ty.path "alloc::sync::Arc")
                            [
                              Ty.apply
                                (Ty.path "specs::state::InitializationState")
                                [ Ty.path "u32"; Ty.path "num_bigint::biguint::BigUint" ];
                              Ty.path "alloc::alloc::Global"
                            ],
                          "new",
                          []
                        |),
                        [
                          M.read (|
                            let next_event_entry :=
                              M.copy (|
                                M.match_operator (|
                                  M.alloc (| Value.Tuple [] |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ :=
                                          M.alloc (|
                                            M.call_closure (|
                                              M.get_associated_function (|
                                                Ty.apply
                                                  (Ty.path
                                                    "alloc::collections::vec_deque::VecDeque")
                                                  [
                                                    Ty.path "specs::etable::EventTableBackend";
                                                    Ty.path "alloc::alloc::Global"
                                                  ],
                                                "front",
                                                []
                                              |),
                                              [
                                                M.SubPointer.get_struct_record_field (|
                                                  M.read (| self |),
                                                  "delphinus_zkwasm::loader::slice::Slices",
                                                  "etables"
                                                |)
                                              ]
                                            |)
                                          |) in
                                        let γ0_0 :=
                                          M.SubPointer.get_struct_tuple_field (|
                                            γ,
                                            "core::option::Option::Some",
                                            0
                                          |) in
                                        let next_event_table := M.copy (| γ0_0 |) in
                                        M.match_operator (|
                                          next_event_table,
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let γ := M.read (| γ |) in
                                                let γ1_0 :=
                                                  M.SubPointer.get_struct_tuple_field (|
                                                    γ,
                                                    "specs::etable::EventTableBackend::Memory",
                                                    0
                                                  |) in
                                                let etable := M.alloc (| γ1_0 |) in
                                                M.alloc (|
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.apply
                                                        (Ty.path "core::option::Option")
                                                        [
                                                          Ty.apply
                                                            (Ty.path "&")
                                                            [
                                                              Ty.path
                                                                "specs::etable::EventTableEntry"
                                                            ]
                                                        ],
                                                      "cloned",
                                                      []
                                                    |),
                                                    [
                                                      M.call_closure (|
                                                        M.get_associated_function (|
                                                          Ty.apply
                                                            (Ty.path "slice")
                                                            [
                                                              Ty.path
                                                                "specs::etable::EventTableEntry"
                                                            ],
                                                          "first",
                                                          []
                                                        |),
                                                        [
                                                          M.call_closure (|
                                                            M.get_trait_method (|
                                                              "core::ops::deref::Deref",
                                                              Ty.apply
                                                                (Ty.path "alloc::vec::Vec")
                                                                [
                                                                  Ty.path
                                                                    "specs::etable::EventTableEntry";
                                                                  Ty.path "alloc::alloc::Global"
                                                                ],
                                                              [],
                                                              "deref",
                                                              []
                                                            |),
                                                            [
                                                              M.call_closure (|
                                                                M.get_associated_function (|
                                                                  Ty.path
                                                                    "specs::etable::EventTable",
                                                                  "entries",
                                                                  []
                                                                |),
                                                                [ M.read (| etable |) ]
                                                              |)
                                                            ]
                                                          |)
                                                        ]
                                                      |)
                                                    ]
                                                  |)
                                                |)));
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let γ := M.read (| γ |) in
                                                let γ1_0 :=
                                                  M.SubPointer.get_struct_tuple_field (|
                                                    γ,
                                                    "specs::etable::EventTableBackend::Json",
                                                    0
                                                  |) in
                                                let path := M.alloc (| γ1_0 |) in
                                                let etable :=
                                                  M.alloc (|
                                                    M.call_closure (|
                                                      M.get_associated_function (|
                                                        Ty.apply
                                                          (Ty.path "core::result::Result")
                                                          [
                                                            Ty.path "specs::etable::EventTable";
                                                            Ty.path "std::io::error::Error"
                                                          ],
                                                        "unwrap",
                                                        []
                                                      |),
                                                      [
                                                        M.call_closure (|
                                                          M.get_associated_function (|
                                                            Ty.path "specs::etable::EventTable",
                                                            "read",
                                                            []
                                                          |),
                                                          [ M.read (| path |) ]
                                                        |)
                                                      ]
                                                    |)
                                                  |) in
                                                M.alloc (|
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.apply
                                                        (Ty.path "core::option::Option")
                                                        [
                                                          Ty.apply
                                                            (Ty.path "&")
                                                            [
                                                              Ty.path
                                                                "specs::etable::EventTableEntry"
                                                            ]
                                                        ],
                                                      "cloned",
                                                      []
                                                    |),
                                                    [
                                                      M.call_closure (|
                                                        M.get_associated_function (|
                                                          Ty.apply
                                                            (Ty.path "slice")
                                                            [
                                                              Ty.path
                                                                "specs::etable::EventTableEntry"
                                                            ],
                                                          "first",
                                                          []
                                                        |),
                                                        [
                                                          M.call_closure (|
                                                            M.get_trait_method (|
                                                              "core::ops::deref::Deref",
                                                              Ty.apply
                                                                (Ty.path "alloc::vec::Vec")
                                                                [
                                                                  Ty.path
                                                                    "specs::etable::EventTableEntry";
                                                                  Ty.path "alloc::alloc::Global"
                                                                ],
                                                              [],
                                                              "deref",
                                                              []
                                                            |),
                                                            [
                                                              M.call_closure (|
                                                                M.get_associated_function (|
                                                                  Ty.path
                                                                    "specs::etable::EventTable",
                                                                  "entries",
                                                                  []
                                                                |),
                                                                [ etable ]
                                                              |)
                                                            ]
                                                          |)
                                                        ]
                                                      |)
                                                    ]
                                                  |)
                                                |)))
                                          ]
                                        |)));
                                    fun γ =>
                                      ltac:(M.monadic
                                        (M.alloc (|
                                          Value.StructTuple "core::option::Option::None" []
                                        |)))
                                  ]
                                |)
                              |) in
                            M.alloc (|
                              M.call_closure (|
                                M.get_trait_method (|
                                  "delphinus_zkwasm::runtime::state::UpdateInitializationState",
                                  Ty.apply
                                    (Ty.path "specs::state::InitializationState")
                                    [ Ty.path "u32"; Ty.path "num_bigint::biguint::BigUint" ],
                                  [],
                                  "update_initialization_state",
                                  []
                                |),
                                [
                                  M.call_closure (|
                                    M.get_trait_method (|
                                      "core::ops::deref::Deref",
                                      Ty.apply
                                        (Ty.path "alloc::sync::Arc")
                                        [
                                          Ty.apply
                                            (Ty.path "specs::state::InitializationState")
                                            [ Ty.path "u32"; Ty.path "num_bigint::biguint::BigUint"
                                            ];
                                          Ty.path "alloc::alloc::Global"
                                        ],
                                      [],
                                      "deref",
                                      []
                                    |),
                                    [
                                      M.SubPointer.get_struct_record_field (|
                                        M.read (| self |),
                                        "delphinus_zkwasm::loader::slice::Slices",
                                        "initialization_state"
                                      |)
                                    ]
                                  |);
                                  etable;
                                  M.call_closure (|
                                    M.get_trait_method (|
                                      "core::ops::deref::Deref",
                                      Ty.apply
                                        (Ty.path "alloc::sync::Arc")
                                        [
                                          Ty.path "specs::configure_table::ConfigureTable";
                                          Ty.path "alloc::alloc::Global"
                                        ],
                                      [],
                                      "deref",
                                      []
                                    |),
                                    [
                                      M.SubPointer.get_struct_record_field (|
                                        M.read (| self |),
                                        "delphinus_zkwasm::loader::slice::Slices",
                                        "configure_table"
                                      |)
                                    ]
                                  |);
                                  M.call_closure (|
                                    M.get_associated_function (|
                                      Ty.apply
                                        (Ty.path "core::option::Option")
                                        [ Ty.path "specs::etable::EventTableEntry" ],
                                      "as_ref",
                                      []
                                    |),
                                    [ next_event_entry ]
                                  |)
                                ]
                              |)
                            |)
                          |)
                        ]
                      |)
                    |) in
                  let slice :=
                    M.alloc (|
                      Value.StructRecord
                        "specs::slice::Slice"
                        [
                          ("itable",
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::clone::Clone",
                                Ty.apply
                                  (Ty.path "alloc::sync::Arc")
                                  [
                                    Ty.path "specs::itable::InstructionTable";
                                    Ty.path "alloc::alloc::Global"
                                  ],
                                [],
                                "clone",
                                []
                              |),
                              [
                                M.SubPointer.get_struct_record_field (|
                                  M.read (| self |),
                                  "delphinus_zkwasm::loader::slice::Slices",
                                  "itable"
                                |)
                              ]
                            |));
                          ("br_table",
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::clone::Clone",
                                Ty.apply
                                  (Ty.path "alloc::sync::Arc")
                                  [
                                    Ty.path "specs::brtable::BrTable";
                                    Ty.path "alloc::alloc::Global"
                                  ],
                                [],
                                "clone",
                                []
                              |),
                              [
                                M.SubPointer.get_struct_record_field (|
                                  M.read (| self |),
                                  "delphinus_zkwasm::loader::slice::Slices",
                                  "br_table"
                                |)
                              ]
                            |));
                          ("elem_table",
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::clone::Clone",
                                Ty.apply
                                  (Ty.path "alloc::sync::Arc")
                                  [
                                    Ty.path "specs::brtable::ElemTable";
                                    Ty.path "alloc::alloc::Global"
                                  ],
                                [],
                                "clone",
                                []
                              |),
                              [
                                M.SubPointer.get_struct_record_field (|
                                  M.read (| self |),
                                  "delphinus_zkwasm::loader::slice::Slices",
                                  "elem_table"
                                |)
                              ]
                            |));
                          ("configure_table",
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::clone::Clone",
                                Ty.apply
                                  (Ty.path "alloc::sync::Arc")
                                  [
                                    Ty.path "specs::configure_table::ConfigureTable";
                                    Ty.path "alloc::alloc::Global"
                                  ],
                                [],
                                "clone",
                                []
                              |),
                              [
                                M.SubPointer.get_struct_record_field (|
                                  M.read (| self |),
                                  "delphinus_zkwasm::loader::slice::Slices",
                                  "configure_table"
                                |)
                              ]
                            |));
                          ("static_jtable",
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::clone::Clone",
                                Ty.apply
                                  (Ty.path "alloc::sync::Arc")
                                  [
                                    Ty.apply
                                      (Ty.path "array")
                                      [ Ty.path "specs::jtable::StaticFrameEntry" ];
                                    Ty.path "alloc::alloc::Global"
                                  ],
                                [],
                                "clone",
                                []
                              |),
                              [
                                M.SubPointer.get_struct_record_field (|
                                  M.read (| self |),
                                  "delphinus_zkwasm::loader::slice::Slices",
                                  "static_jtable"
                                |)
                              ]
                            |));
                          ("frame_table",
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::clone::Clone",
                                Ty.apply
                                  (Ty.path "alloc::sync::Arc")
                                  [
                                    Ty.path "specs::jtable::JumpTable";
                                    Ty.path "alloc::alloc::Global"
                                  ],
                                [],
                                "clone",
                                []
                              |),
                              [
                                M.SubPointer.get_struct_record_field (|
                                  M.read (| self |),
                                  "delphinus_zkwasm::loader::slice::Slices",
                                  "frame_table"
                                |)
                              ]
                            |));
                          ("imtable",
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::clone::Clone",
                                Ty.apply
                                  (Ty.path "alloc::sync::Arc")
                                  [
                                    Ty.path "specs::imtable::InitMemoryTable";
                                    Ty.path "alloc::alloc::Global"
                                  ],
                                [],
                                "clone",
                                []
                              |),
                              [
                                M.SubPointer.get_struct_record_field (|
                                  M.read (| self |),
                                  "delphinus_zkwasm::loader::slice::Slices",
                                  "imtable"
                                |)
                              ]
                            |));
                          ("post_imtable",
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::clone::Clone",
                                Ty.apply
                                  (Ty.path "alloc::sync::Arc")
                                  [
                                    Ty.path "specs::imtable::InitMemoryTable";
                                    Ty.path "alloc::alloc::Global"
                                  ],
                                [],
                                "clone",
                                []
                              |),
                              [ post_imtable ]
                            |));
                          ("initialization_state",
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::clone::Clone",
                                Ty.apply
                                  (Ty.path "alloc::sync::Arc")
                                  [
                                    Ty.apply
                                      (Ty.path "specs::state::InitializationState")
                                      [ Ty.path "u32"; Ty.path "num_bigint::biguint::BigUint" ];
                                    Ty.path "alloc::alloc::Global"
                                  ],
                                [],
                                "clone",
                                []
                              |),
                              [
                                M.SubPointer.get_struct_record_field (|
                                  M.read (| self |),
                                  "delphinus_zkwasm::loader::slice::Slices",
                                  "initialization_state"
                                |)
                              ]
                            |));
                          ("post_initialization_state",
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::clone::Clone",
                                Ty.apply
                                  (Ty.path "alloc::sync::Arc")
                                  [
                                    Ty.apply
                                      (Ty.path "specs::state::InitializationState")
                                      [ Ty.path "u32"; Ty.path "num_bigint::biguint::BigUint" ];
                                    Ty.path "alloc::alloc::Global"
                                  ],
                                [],
                                "clone",
                                []
                              |),
                              [ post_initialization_state ]
                            |));
                          ("etable",
                            M.call_closure (|
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path "alloc::sync::Arc")
                                  [
                                    Ty.path "specs::etable::EventTable";
                                    Ty.path "alloc::alloc::Global"
                                  ],
                                "new",
                                []
                              |),
                              [ M.read (| etable |) ]
                            |));
                          ("is_last_slice",
                            M.call_closure (|
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path "alloc::collections::vec_deque::VecDeque")
                                  [
                                    Ty.path "specs::etable::EventTableBackend";
                                    Ty.path "alloc::alloc::Global"
                                  ],
                                "is_empty",
                                []
                              |),
                              [
                                M.SubPointer.get_struct_record_field (|
                                  M.read (| self |),
                                  "delphinus_zkwasm::loader::slice::Slices",
                                  "etables"
                                |)
                              ]
                            |))
                        ]
                    |) in
                  let _ :=
                    M.write (|
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "delphinus_zkwasm::loader::slice::Slices",
                        "imtable"
                      |),
                      M.read (| post_imtable |)
                    |) in
                  let _ :=
                    M.write (|
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "delphinus_zkwasm::loader::slice::Slices",
                        "initialization_state"
                      |),
                      M.read (| post_initialization_state |)
                    |) in
                  let circuit :=
                    M.alloc (|
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.apply (Ty.path "delphinus_zkwasm::circuits::ZkWasmCircuit") [ F ],
                          "new",
                          []
                        |),
                        [
                          M.read (|
                            M.SubPointer.get_struct_record_field (|
                              M.read (| self |),
                              "delphinus_zkwasm::loader::slice::Slices",
                              "k"
                            |)
                          |);
                          M.read (| slice |)
                        ]
                      |)
                    |) in
                  M.alloc (|
                    Value.StructTuple "core::option::Option::Some" [ M.read (| circuit |) ]
                  |)
                |)))
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        forall (F : Ty.t),
        M.IsTraitInstance
          "core::iter::traits::iterator::Iterator"
          (Self F)
          (* Trait polymorphic types *) []
          (* Instance *)
          [ ("Item", InstanceField.Ty (_Item F)); ("next", InstanceField.Method (next F)) ].
    End Impl_core_iter_traits_iterator_Iterator_where_pairing_bn256_arithmetic_fields_FieldExt_F_for_delphinus_zkwasm_loader_slice_Slices_F.
  End slice.
End loader.
