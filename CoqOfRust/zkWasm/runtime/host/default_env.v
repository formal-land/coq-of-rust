(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module runtime.
  Module host.
    Module default_env.
      (* StructRecord
        {
          name := "ExecutionArg";
          ty_params := [];
          fields :=
            [
              ("public_inputs",
                Ty.apply
                  (Ty.path "alloc::vec::Vec")
                  [ Ty.path "u64"; Ty.path "alloc::alloc::Global" ]);
              ("private_inputs",
                Ty.apply
                  (Ty.path "alloc::vec::Vec")
                  [ Ty.path "u64"; Ty.path "alloc::alloc::Global" ]);
              ("context_inputs",
                Ty.apply
                  (Ty.path "alloc::vec::Vec")
                  [ Ty.path "u64"; Ty.path "alloc::alloc::Global" ])
            ];
        } *)
      
      Module Impl_core_clone_Clone_for_delphinus_zkwasm_runtime_host_default_env_ExecutionArg.
        Definition Self : Ty.t :=
          Ty.path "delphinus_zkwasm::runtime::host::default_env::ExecutionArg".
        
        (* Clone *)
        Definition clone (τ : list Ty.t) (α : list Value.t) : M :=
          match τ, α with
          | [], [ self ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              Value.StructRecord
                "delphinus_zkwasm::runtime::host::default_env::ExecutionArg"
                [
                  ("public_inputs",
                    M.call_closure (|
                      M.get_trait_method (|
                        "core::clone::Clone",
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          [ Ty.path "u64"; Ty.path "alloc::alloc::Global" ],
                        [],
                        "clone",
                        []
                      |),
                      [
                        M.SubPointer.get_struct_record_field (|
                          M.read (| self |),
                          "delphinus_zkwasm::runtime::host::default_env::ExecutionArg",
                          "public_inputs"
                        |)
                      ]
                    |));
                  ("private_inputs",
                    M.call_closure (|
                      M.get_trait_method (|
                        "core::clone::Clone",
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          [ Ty.path "u64"; Ty.path "alloc::alloc::Global" ],
                        [],
                        "clone",
                        []
                      |),
                      [
                        M.SubPointer.get_struct_record_field (|
                          M.read (| self |),
                          "delphinus_zkwasm::runtime::host::default_env::ExecutionArg",
                          "private_inputs"
                        |)
                      ]
                    |));
                  ("context_inputs",
                    M.call_closure (|
                      M.get_trait_method (|
                        "core::clone::Clone",
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          [ Ty.path "u64"; Ty.path "alloc::alloc::Global" ],
                        [],
                        "clone",
                        []
                      |),
                      [
                        M.SubPointer.get_struct_record_field (|
                          M.read (| self |),
                          "delphinus_zkwasm::runtime::host::default_env::ExecutionArg",
                          "context_inputs"
                        |)
                      ]
                    |))
                ]))
          | _, _ => M.impossible
          end.
        
        Axiom Implements :
          M.IsTraitInstance
            "core::clone::Clone"
            Self
            (* Trait polymorphic types *) []
            (* Instance *) [ ("clone", InstanceField.Method clone) ].
      End Impl_core_clone_Clone_for_delphinus_zkwasm_runtime_host_default_env_ExecutionArg.
      
      (* StructTuple
        {
          name := "DefaultHostEnvBuilder";
          ty_params := [];
          fields := [];
        } *)
      
      Module Impl_delphinus_zkwasm_runtime_host_HostEnvBuilder_for_delphinus_zkwasm_runtime_host_default_env_DefaultHostEnvBuilder.
        Definition Self : Ty.t :=
          Ty.path "delphinus_zkwasm::runtime::host::default_env::DefaultHostEnvBuilder".
        
        (*
            fn create_env_without_value(&self, k: u32) -> HostEnv {
                let mut env = HostEnv::new(k);
                register_wasm_input_foreign(&mut env, vec![], vec![]);
                register_require_foreign(&mut env);
                register_log_foreign(&mut env);
                register_context_foreign(&mut env, vec![]);
                env.finalize();
        
                env
            }
        *)
        Definition create_env_without_value (τ : list Ty.t) (α : list Value.t) : M :=
          match τ, α with
          | [], [ self; k ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              let k := M.alloc (| k |) in
              M.read (|
                let env :=
                  M.alloc (|
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.path "delphinus_zkwasm::runtime::host::host_env::HostEnv",
                        "new",
                        []
                      |),
                      [ M.read (| k |) ]
                    |)
                  |) in
                let _ :=
                  M.alloc (|
                    M.call_closure (|
                      M.get_function (|
                        "delphinus_zkwasm::foreign::wasm_input_helper::runtime::register_wasm_input_foreign",
                        []
                      |),
                      [
                        env;
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              [ Ty.path "u64"; Ty.path "alloc::alloc::Global" ],
                            "new",
                            []
                          |),
                          []
                        |);
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              [ Ty.path "u64"; Ty.path "alloc::alloc::Global" ],
                            "new",
                            []
                          |),
                          []
                        |)
                      ]
                    |)
                  |) in
                let _ :=
                  M.alloc (|
                    M.call_closure (|
                      M.get_function (|
                        "delphinus_zkwasm::foreign::require_helper::register_require_foreign",
                        []
                      |),
                      [ env ]
                    |)
                  |) in
                let _ :=
                  M.alloc (|
                    M.call_closure (|
                      M.get_function (|
                        "delphinus_zkwasm::foreign::log_helper::register_log_foreign",
                        []
                      |),
                      [ env ]
                    |)
                  |) in
                let _ :=
                  M.alloc (|
                    M.call_closure (|
                      M.get_function (|
                        "delphinus_zkwasm::foreign::context::runtime::register_context_foreign",
                        []
                      |),
                      [
                        env;
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              [ Ty.path "u64"; Ty.path "alloc::alloc::Global" ],
                            "new",
                            []
                          |),
                          []
                        |)
                      ]
                    |)
                  |) in
                let _ :=
                  M.alloc (|
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.path "delphinus_zkwasm::runtime::host::host_env::HostEnv",
                        "finalize",
                        []
                      |),
                      [ env ]
                    |)
                  |) in
                env
              |)))
          | _, _ => M.impossible
          end.
        
        (*
            fn create_env(&self, k: u32, arg: ExecutionArg) -> HostEnv {
                let mut env = HostEnv::new(k);
                register_wasm_input_foreign(&mut env, arg.public_inputs, arg.private_inputs);
                register_require_foreign(&mut env);
                register_log_foreign(&mut env);
                register_context_foreign(&mut env, arg.context_inputs);
                env.finalize();
        
                env
            }
        *)
        Definition create_env (τ : list Ty.t) (α : list Value.t) : M :=
          match τ, α with
          | [], [ self; k; arg ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              let k := M.alloc (| k |) in
              let arg := M.alloc (| arg |) in
              M.read (|
                let env :=
                  M.alloc (|
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.path "delphinus_zkwasm::runtime::host::host_env::HostEnv",
                        "new",
                        []
                      |),
                      [ M.read (| k |) ]
                    |)
                  |) in
                let _ :=
                  M.alloc (|
                    M.call_closure (|
                      M.get_function (|
                        "delphinus_zkwasm::foreign::wasm_input_helper::runtime::register_wasm_input_foreign",
                        []
                      |),
                      [
                        env;
                        M.read (|
                          M.SubPointer.get_struct_record_field (|
                            arg,
                            "delphinus_zkwasm::runtime::host::default_env::ExecutionArg",
                            "public_inputs"
                          |)
                        |);
                        M.read (|
                          M.SubPointer.get_struct_record_field (|
                            arg,
                            "delphinus_zkwasm::runtime::host::default_env::ExecutionArg",
                            "private_inputs"
                          |)
                        |)
                      ]
                    |)
                  |) in
                let _ :=
                  M.alloc (|
                    M.call_closure (|
                      M.get_function (|
                        "delphinus_zkwasm::foreign::require_helper::register_require_foreign",
                        []
                      |),
                      [ env ]
                    |)
                  |) in
                let _ :=
                  M.alloc (|
                    M.call_closure (|
                      M.get_function (|
                        "delphinus_zkwasm::foreign::log_helper::register_log_foreign",
                        []
                      |),
                      [ env ]
                    |)
                  |) in
                let _ :=
                  M.alloc (|
                    M.call_closure (|
                      M.get_function (|
                        "delphinus_zkwasm::foreign::context::runtime::register_context_foreign",
                        []
                      |),
                      [
                        env;
                        M.read (|
                          M.SubPointer.get_struct_record_field (|
                            arg,
                            "delphinus_zkwasm::runtime::host::default_env::ExecutionArg",
                            "context_inputs"
                          |)
                        |)
                      ]
                    |)
                  |) in
                let _ :=
                  M.alloc (|
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.path "delphinus_zkwasm::runtime::host::host_env::HostEnv",
                        "finalize",
                        []
                      |),
                      [ env ]
                    |)
                  |) in
                env
              |)))
          | _, _ => M.impossible
          end.
        
        Axiom Implements :
          M.IsTraitInstance
            "delphinus_zkwasm::runtime::host::HostEnvBuilder"
            Self
            (* Trait polymorphic types *) []
            (* Instance *)
            [
              ("create_env_without_value", InstanceField.Method create_env_without_value);
              ("create_env", InstanceField.Method create_env)
            ].
      End Impl_delphinus_zkwasm_runtime_host_HostEnvBuilder_for_delphinus_zkwasm_runtime_host_default_env_DefaultHostEnvBuilder.
    End default_env.
  End host.
End runtime.
