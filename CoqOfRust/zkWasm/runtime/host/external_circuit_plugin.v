(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module runtime.
  Module host.
    Module external_circuit_plugin.
      (* StructRecord
        {
          name := "ForeignOp";
          ty_params := [];
          fields :=
            [
              ("op_index", Ty.path "usize");
              ("sig", Ty.path "specs::external_host_call_table::ExternalHostCallSignature");
              ("plugin",
                Ty.apply
                  (Ty.path "alloc::rc::Rc")
                  [
                    Ty.path "delphinus_zkwasm::runtime::host::ForeignPlugin";
                    Ty.path "alloc::alloc::Global"
                  ]);
              ("cb",
                Ty.apply
                  (Ty.path "alloc::rc::Rc")
                  [
                    Ty.dyn
                      [
                        ("existential predicate with variables", []);
                        ("existential predicate with variables", [])
                      ];
                    Ty.path "alloc::alloc::Global"
                  ])
            ];
        } *)
      
      (* StructRecord
        {
          name := "ExternalCircuitEnv";
          ty_params := [];
          fields :=
            [
              ("functions",
                Ty.apply
                  (Ty.path "std::collections::hash::map::HashMap")
                  [
                    Ty.path "alloc::string::String";
                    Ty.path "delphinus_zkwasm::runtime::host::external_circuit_plugin::ForeignOp";
                    Ty.path "std::hash::random::RandomState"
                  ]);
              ("finalized",
                Ty.apply
                  (Ty.path "alloc::rc::Rc")
                  [
                    Ty.apply (Ty.path "core::cell::RefCell") [ Ty.path "bool" ];
                    Ty.path "alloc::alloc::Global"
                  ])
            ];
        } *)
      
      Module Impl_delphinus_zkwasm_runtime_host_external_circuit_plugin_ExternalCircuitEnv.
        Definition Self : Ty.t :=
          Ty.path "delphinus_zkwasm::runtime::host::external_circuit_plugin::ExternalCircuitEnv".
        
        (*
            pub(super) fn new(finalized: Rc<RefCell<bool>>) -> Self {
                Self {
                    functions: HashMap::new(),
                    finalized,
                }
            }
        *)
        Definition new (τ : list Ty.t) (α : list Value.t) : M :=
          match τ, α with
          | [], [ finalized ] =>
            ltac:(M.monadic
              (let finalized := M.alloc (| finalized |) in
              Value.StructRecord
                "delphinus_zkwasm::runtime::host::external_circuit_plugin::ExternalCircuitEnv"
                [
                  ("functions",
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path "std::collections::hash::map::HashMap")
                          [
                            Ty.path "alloc::string::String";
                            Ty.path
                              "delphinus_zkwasm::runtime::host::external_circuit_plugin::ForeignOp";
                            Ty.path "std::hash::random::RandomState"
                          ],
                        "new",
                        []
                      |),
                      []
                    |));
                  ("finalized", M.read (| finalized |))
                ]))
          | _, _ => M.impossible
          end.
        
        Axiom AssociatedFunction_new : M.IsAssociatedFunction Self "new" new.
        
        (*
            pub fn register_plugin(
                &mut self,
                name: &str,
                ctx: Box<dyn ForeignContext>,
            ) -> Rc<ForeignPlugin> {
                Rc::new(ForeignPlugin {
                    name: name.to_string(),
                    ctx: Rc::new(RefCell::new(ctx)),
                })
            }
        *)
        Definition register_plugin (τ : list Ty.t) (α : list Value.t) : M :=
          match τ, α with
          | [], [ self; name; ctx ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              let name := M.alloc (| name |) in
              let ctx := M.alloc (| ctx |) in
              M.call_closure (|
                M.get_associated_function (|
                  Ty.apply
                    (Ty.path "alloc::rc::Rc")
                    [
                      Ty.path "delphinus_zkwasm::runtime::host::ForeignPlugin";
                      Ty.path "alloc::alloc::Global"
                    ],
                  "new",
                  []
                |),
                [
                  Value.StructRecord
                    "delphinus_zkwasm::runtime::host::ForeignPlugin"
                    [
                      ("name",
                        M.call_closure (|
                          M.get_trait_method (|
                            "alloc::string::ToString",
                            Ty.path "str",
                            [],
                            "to_string",
                            []
                          |),
                          [ M.read (| name |) ]
                        |));
                      ("ctx",
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path "alloc::rc::Rc")
                              [
                                Ty.apply
                                  (Ty.path "core::cell::RefCell")
                                  [
                                    Ty.apply
                                      (Ty.path "alloc::boxed::Box")
                                      [
                                        Ty.dyn
                                          [
                                            ("delphinus_zkwasm::runtime::host::ForeignContext::Trait",
                                              [])
                                          ];
                                        Ty.path "alloc::alloc::Global"
                                      ]
                                  ];
                                Ty.path "alloc::alloc::Global"
                              ],
                            "new",
                            []
                          |),
                          [
                            (* Unsize *)
                            M.pointer_coercion
                              (M.call_closure (|
                                M.get_associated_function (|
                                  Ty.apply
                                    (Ty.path "core::cell::RefCell")
                                    [
                                      Ty.apply
                                        (Ty.path "alloc::boxed::Box")
                                        [
                                          Ty.dyn
                                            [
                                              ("delphinus_zkwasm::runtime::host::ForeignContext::Trait",
                                                [])
                                            ];
                                          Ty.path "alloc::alloc::Global"
                                        ]
                                    ],
                                  "new",
                                  []
                                |),
                                [ (* Unsize *) M.pointer_coercion (M.read (| ctx |)) ]
                              |))
                          ]
                        |))
                    ]
                ]
              |)))
          | _, _ => M.impossible
          end.
        
        Axiom AssociatedFunction_register_plugin :
          M.IsAssociatedFunction Self "register_plugin" register_plugin.
        
        (*
            pub fn register_function(
                &mut self,
                name: &str,
                op_index: usize,
                sig: ExternalHostCallSignature,
                plugin: Rc<ForeignPlugin>,
                cb: Rc<dyn Fn(&Observer, &mut dyn ForeignContext, RuntimeArgs) -> Option<RuntimeValue>>,
            ) {
                assert!(!*self.finalized.borrow());
        
                self.functions.insert(
                    name.to_owned(),
                    ForeignOp {
                        op_index,
                        sig,
                        plugin,
                        cb,
                    },
                );
            }
        *)
        Definition register_function (τ : list Ty.t) (α : list Value.t) : M :=
          match τ, α with
          | [], [ self; name; op_index; sig; plugin; cb ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              let name := M.alloc (| name |) in
              let op_index := M.alloc (| op_index |) in
              let sig := M.alloc (| sig |) in
              let plugin := M.alloc (| plugin |) in
              let cb := M.alloc (| cb |) in
              M.read (|
                let _ :=
                  M.match_operator (|
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                UnOp.Pure.not
                                  (UnOp.Pure.not
                                    (M.read (|
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "core::ops::deref::Deref",
                                          Ty.apply (Ty.path "core::cell::Ref") [ Ty.path "bool" ],
                                          [],
                                          "deref",
                                          []
                                        |),
                                        [
                                          M.alloc (|
                                            M.call_closure (|
                                              M.get_associated_function (|
                                                Ty.apply
                                                  (Ty.path "core::cell::RefCell")
                                                  [ Ty.path "bool" ],
                                                "borrow",
                                                []
                                              |),
                                              [
                                                M.call_closure (|
                                                  M.get_trait_method (|
                                                    "core::ops::deref::Deref",
                                                    Ty.apply
                                                      (Ty.path "alloc::rc::Rc")
                                                      [
                                                        Ty.apply
                                                          (Ty.path "core::cell::RefCell")
                                                          [ Ty.path "bool" ];
                                                        Ty.path "alloc::alloc::Global"
                                                      ],
                                                    [],
                                                    "deref",
                                                    []
                                                  |),
                                                  [
                                                    M.SubPointer.get_struct_record_field (|
                                                      M.read (| self |),
                                                      "delphinus_zkwasm::runtime::host::external_circuit_plugin::ExternalCircuitEnv",
                                                      "finalized"
                                                    |)
                                                  ]
                                                |)
                                              ]
                                            |)
                                          |)
                                        ]
                                      |)
                                    |)))
                              |)) in
                          let _ :=
                            M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.call_closure (|
                                M.get_function (| "core::panicking::panic", [] |),
                                [
                                  M.read (|
                                    Value.String "assertion failed: !*self.finalized.borrow()"
                                  |)
                                ]
                              |)
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                let _ :=
                  M.alloc (|
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path "std::collections::hash::map::HashMap")
                          [
                            Ty.path "alloc::string::String";
                            Ty.path
                              "delphinus_zkwasm::runtime::host::external_circuit_plugin::ForeignOp";
                            Ty.path "std::hash::random::RandomState"
                          ],
                        "insert",
                        []
                      |),
                      [
                        M.SubPointer.get_struct_record_field (|
                          M.read (| self |),
                          "delphinus_zkwasm::runtime::host::external_circuit_plugin::ExternalCircuitEnv",
                          "functions"
                        |);
                        M.call_closure (|
                          M.get_trait_method (|
                            "alloc::borrow::ToOwned",
                            Ty.path "str",
                            [],
                            "to_owned",
                            []
                          |),
                          [ M.read (| name |) ]
                        |);
                        Value.StructRecord
                          "delphinus_zkwasm::runtime::host::external_circuit_plugin::ForeignOp"
                          [
                            ("op_index", M.read (| op_index |));
                            ("sig", M.read (| sig |));
                            ("plugin", M.read (| plugin |));
                            ("cb", (* Unsize *) M.pointer_coercion (M.read (| cb |)))
                          ]
                      ]
                    |)
                  |) in
                M.alloc (| Value.Tuple [] |)
              |)))
          | _, _ => M.impossible
          end.
        
        Axiom AssociatedFunction_register_function :
          M.IsAssociatedFunction Self "register_function" register_function.
        
        (*
            pub fn get_statics(&self) -> HashMap<String, ForeignStatics> {
                let mut m = HashMap::new();
                for (_, v) in &self.functions {
                    let plugin_name = &v.plugin.name;
        
                    if !m.contains_key(plugin_name) {
                        if let Some(stat) = (v.plugin.ctx).as_ref().borrow().get_statics() {
                            m.insert(plugin_name.to_string(), stat);
                        }
                    }
                }
                m
            }
        *)
        Definition get_statics (τ : list Ty.t) (α : list Value.t) : M :=
          match τ, α with
          | [], [ self ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              M.read (|
                let m :=
                  M.alloc (|
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path "std::collections::hash::map::HashMap")
                          [
                            Ty.path "alloc::string::String";
                            Ty.path "delphinus_zkwasm::runtime::host::ForeignStatics";
                            Ty.path "std::hash::random::RandomState"
                          ],
                        "new",
                        []
                      |),
                      []
                    |)
                  |) in
                let _ :=
                  M.use
                    (M.match_operator (|
                      M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::iter::traits::collect::IntoIterator",
                            Ty.apply
                              (Ty.path "&")
                              [
                                Ty.apply
                                  (Ty.path "std::collections::hash::map::HashMap")
                                  [
                                    Ty.path "alloc::string::String";
                                    Ty.path
                                      "delphinus_zkwasm::runtime::host::external_circuit_plugin::ForeignOp";
                                    Ty.path "std::hash::random::RandomState"
                                  ]
                              ],
                            [],
                            "into_iter",
                            []
                          |),
                          [
                            M.SubPointer.get_struct_record_field (|
                              M.read (| self |),
                              "delphinus_zkwasm::runtime::host::external_circuit_plugin::ExternalCircuitEnv",
                              "functions"
                            |)
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let iter := M.copy (| γ |) in
                            M.loop (|
                              ltac:(M.monadic
                                (let _ :=
                                  M.match_operator (|
                                    M.alloc (|
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "core::iter::traits::iterator::Iterator",
                                          Ty.apply
                                            (Ty.path "std::collections::hash::map::Iter")
                                            [
                                              Ty.path "alloc::string::String";
                                              Ty.path
                                                "delphinus_zkwasm::runtime::host::external_circuit_plugin::ForeignOp"
                                            ],
                                          [],
                                          "next",
                                          []
                                        |),
                                        [ iter ]
                                      |)
                                    |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (M.alloc (|
                                            M.never_to_any (| M.read (| M.break (||) |) |)
                                          |)));
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let γ0_0 :=
                                            M.SubPointer.get_struct_tuple_field (|
                                              γ,
                                              "core::option::Option::Some",
                                              0
                                            |) in
                                          let γ1_0 := M.SubPointer.get_tuple_field (| γ0_0, 0 |) in
                                          let γ1_1 := M.SubPointer.get_tuple_field (| γ0_0, 1 |) in
                                          let v := M.copy (| γ1_1 |) in
                                          let plugin_name :=
                                            M.alloc (|
                                              M.SubPointer.get_struct_record_field (|
                                                M.call_closure (|
                                                  M.get_trait_method (|
                                                    "core::ops::deref::Deref",
                                                    Ty.apply
                                                      (Ty.path "alloc::rc::Rc")
                                                      [
                                                        Ty.path
                                                          "delphinus_zkwasm::runtime::host::ForeignPlugin";
                                                        Ty.path "alloc::alloc::Global"
                                                      ],
                                                    [],
                                                    "deref",
                                                    []
                                                  |),
                                                  [
                                                    M.SubPointer.get_struct_record_field (|
                                                      M.read (| v |),
                                                      "delphinus_zkwasm::runtime::host::external_circuit_plugin::ForeignOp",
                                                      "plugin"
                                                    |)
                                                  ]
                                                |),
                                                "delphinus_zkwasm::runtime::host::ForeignPlugin",
                                                "name"
                                              |)
                                            |) in
                                          M.match_operator (|
                                            M.alloc (| Value.Tuple [] |),
                                            [
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let γ :=
                                                    M.use
                                                      (M.alloc (|
                                                        UnOp.Pure.not
                                                          (M.call_closure (|
                                                            M.get_associated_function (|
                                                              Ty.apply
                                                                (Ty.path
                                                                  "std::collections::hash::map::HashMap")
                                                                [
                                                                  Ty.path "alloc::string::String";
                                                                  Ty.path
                                                                    "delphinus_zkwasm::runtime::host::ForeignStatics";
                                                                  Ty.path
                                                                    "std::hash::random::RandomState"
                                                                ],
                                                              "contains_key",
                                                              [ Ty.path "alloc::string::String" ]
                                                            |),
                                                            [ m; M.read (| plugin_name |) ]
                                                          |))
                                                      |)) in
                                                  let _ :=
                                                    M.is_constant_or_break_match (|
                                                      M.read (| γ |),
                                                      Value.Bool true
                                                    |) in
                                                  M.match_operator (|
                                                    M.alloc (| Value.Tuple [] |),
                                                    [
                                                      fun γ =>
                                                        ltac:(M.monadic
                                                          (let γ :=
                                                            M.alloc (|
                                                              M.call_closure (|
                                                                M.get_trait_method (|
                                                                  "delphinus_zkwasm::runtime::host::ForeignContext",
                                                                  Ty.dyn
                                                                    [
                                                                      ("delphinus_zkwasm::runtime::host::ForeignContext::Trait",
                                                                        [])
                                                                    ],
                                                                  [],
                                                                  "get_statics",
                                                                  []
                                                                |),
                                                                [
                                                                  M.read (|
                                                                    M.call_closure (|
                                                                      M.get_trait_method (|
                                                                        "core::ops::deref::Deref",
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "core::cell::Ref")
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "alloc::boxed::Box")
                                                                              [
                                                                                Ty.dyn
                                                                                  [
                                                                                    ("delphinus_zkwasm::runtime::host::ForeignContext::Trait",
                                                                                      [])
                                                                                  ];
                                                                                Ty.path
                                                                                  "alloc::alloc::Global"
                                                                              ]
                                                                          ],
                                                                        [],
                                                                        "deref",
                                                                        []
                                                                      |),
                                                                      [
                                                                        M.alloc (|
                                                                          M.call_closure (|
                                                                            M.get_associated_function (|
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "core::cell::RefCell")
                                                                                [
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "alloc::boxed::Box")
                                                                                    [
                                                                                      Ty.dyn
                                                                                        [
                                                                                          ("delphinus_zkwasm::runtime::host::ForeignContext::Trait",
                                                                                            [])
                                                                                        ];
                                                                                      Ty.path
                                                                                        "alloc::alloc::Global"
                                                                                    ]
                                                                                ],
                                                                              "borrow",
                                                                              []
                                                                            |),
                                                                            [
                                                                              M.call_closure (|
                                                                                M.get_trait_method (|
                                                                                  "core::convert::AsRef",
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "alloc::rc::Rc")
                                                                                    [
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "core::cell::RefCell")
                                                                                        [
                                                                                          Ty.apply
                                                                                            (Ty.path
                                                                                              "alloc::boxed::Box")
                                                                                            [
                                                                                              Ty.dyn
                                                                                                [
                                                                                                  ("delphinus_zkwasm::runtime::host::ForeignContext::Trait",
                                                                                                    [])
                                                                                                ];
                                                                                              Ty.path
                                                                                                "alloc::alloc::Global"
                                                                                            ]
                                                                                        ];
                                                                                      Ty.path
                                                                                        "alloc::alloc::Global"
                                                                                    ],
                                                                                  [
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "core::cell::RefCell")
                                                                                      [
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "alloc::boxed::Box")
                                                                                          [
                                                                                            Ty.dyn
                                                                                              [
                                                                                                ("delphinus_zkwasm::runtime::host::ForeignContext::Trait",
                                                                                                  [])
                                                                                              ];
                                                                                            Ty.path
                                                                                              "alloc::alloc::Global"
                                                                                          ]
                                                                                      ]
                                                                                  ],
                                                                                  "as_ref",
                                                                                  []
                                                                                |),
                                                                                [
                                                                                  M.SubPointer.get_struct_record_field (|
                                                                                    M.call_closure (|
                                                                                      M.get_trait_method (|
                                                                                        "core::ops::deref::Deref",
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "alloc::rc::Rc")
                                                                                          [
                                                                                            Ty.path
                                                                                              "delphinus_zkwasm::runtime::host::ForeignPlugin";
                                                                                            Ty.path
                                                                                              "alloc::alloc::Global"
                                                                                          ],
                                                                                        [],
                                                                                        "deref",
                                                                                        []
                                                                                      |),
                                                                                      [
                                                                                        M.SubPointer.get_struct_record_field (|
                                                                                          M.read (|
                                                                                            v
                                                                                          |),
                                                                                          "delphinus_zkwasm::runtime::host::external_circuit_plugin::ForeignOp",
                                                                                          "plugin"
                                                                                        |)
                                                                                      ]
                                                                                    |),
                                                                                    "delphinus_zkwasm::runtime::host::ForeignPlugin",
                                                                                    "ctx"
                                                                                  |)
                                                                                ]
                                                                              |)
                                                                            ]
                                                                          |)
                                                                        |)
                                                                      ]
                                                                    |)
                                                                  |)
                                                                ]
                                                              |)
                                                            |) in
                                                          let γ0_0 :=
                                                            M.SubPointer.get_struct_tuple_field (|
                                                              γ,
                                                              "core::option::Option::Some",
                                                              0
                                                            |) in
                                                          let stat := M.copy (| γ0_0 |) in
                                                          let _ :=
                                                            M.alloc (|
                                                              M.call_closure (|
                                                                M.get_associated_function (|
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "std::collections::hash::map::HashMap")
                                                                    [
                                                                      Ty.path
                                                                        "alloc::string::String";
                                                                      Ty.path
                                                                        "delphinus_zkwasm::runtime::host::ForeignStatics";
                                                                      Ty.path
                                                                        "std::hash::random::RandomState"
                                                                    ],
                                                                  "insert",
                                                                  []
                                                                |),
                                                                [
                                                                  m;
                                                                  M.call_closure (|
                                                                    M.get_trait_method (|
                                                                      "alloc::string::ToString",
                                                                      Ty.path
                                                                        "alloc::string::String",
                                                                      [],
                                                                      "to_string",
                                                                      []
                                                                    |),
                                                                    [ M.read (| plugin_name |) ]
                                                                  |);
                                                                  M.read (| stat |)
                                                                ]
                                                              |)
                                                            |) in
                                                          M.alloc (| Value.Tuple [] |)));
                                                      fun γ =>
                                                        ltac:(M.monadic
                                                          (M.alloc (| Value.Tuple [] |)))
                                                    ]
                                                  |)));
                                              fun γ =>
                                                ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                            ]
                                          |)))
                                    ]
                                  |) in
                                M.alloc (| Value.Tuple [] |)))
                            |)))
                      ]
                    |)) in
                m
              |)))
          | _, _ => M.impossible
          end.
        
        Axiom AssociatedFunction_get_statics :
          M.IsAssociatedFunction Self "get_statics" get_statics.
      End Impl_delphinus_zkwasm_runtime_host_external_circuit_plugin_ExternalCircuitEnv.
      
      Module Impl_wasmi_imports_ModuleImportResolver_for_delphinus_zkwasm_runtime_host_external_circuit_plugin_ExternalCircuitEnv.
        Definition Self : Ty.t :=
          Ty.path "delphinus_zkwasm::runtime::host::external_circuit_plugin::ExternalCircuitEnv".
        
        (*
            fn resolve_func(
                &self,
                function_name: &str,
                signature: &wasmi::Signature,
            ) -> Result<wasmi::FuncRef, wasmi::Error> {
                if let Some(function) = self.functions.get(function_name) {
                    if function.sig.match_wasmi_signature(signature) {
                        Ok(FuncInstance::alloc_host(
                            signature.clone(),
                            function.op_index,
                        ))
                    } else {
                        Err(wasmi::Error::Instantiation(format!(
                            "Export `{}` doesn't match expected type {:?}",
                            function_name, signature
                        )))
                    }
                } else {
                    Err(wasmi::Error::Instantiation(format!(
                        "Export {} not found",
                        function_name
                    )))
                }
            }
        *)
        Definition resolve_func (τ : list Ty.t) (α : list Value.t) : M :=
          match τ, α with
          | [], [ self; function_name; signature ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              let function_name := M.alloc (| function_name |) in
              let signature := M.alloc (| signature |) in
              M.read (|
                M.match_operator (|
                  M.alloc (| Value.Tuple [] |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ :=
                          M.alloc (|
                            M.call_closure (|
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path "std::collections::hash::map::HashMap")
                                  [
                                    Ty.path "alloc::string::String";
                                    Ty.path
                                      "delphinus_zkwasm::runtime::host::external_circuit_plugin::ForeignOp";
                                    Ty.path "std::hash::random::RandomState"
                                  ],
                                "get",
                                [ Ty.path "str" ]
                              |),
                              [
                                M.SubPointer.get_struct_record_field (|
                                  M.read (| self |),
                                  "delphinus_zkwasm::runtime::host::external_circuit_plugin::ExternalCircuitEnv",
                                  "functions"
                                |);
                                M.read (| function_name |)
                              ]
                            |)
                          |) in
                        let γ0_0 :=
                          M.SubPointer.get_struct_tuple_field (|
                            γ,
                            "core::option::Option::Some",
                            0
                          |) in
                        let function := M.copy (| γ0_0 |) in
                        M.match_operator (|
                          M.alloc (| Value.Tuple [] |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ :=
                                  M.use
                                    (M.alloc (|
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "delphinus_zkwasm::runtime::host::MatchForeignOpSignature",
                                          Ty.path
                                            "specs::external_host_call_table::ExternalHostCallSignature",
                                          [],
                                          "match_wasmi_signature",
                                          []
                                        |),
                                        [
                                          M.SubPointer.get_struct_record_field (|
                                            M.read (| function |),
                                            "delphinus_zkwasm::runtime::host::external_circuit_plugin::ForeignOp",
                                            "sig"
                                          |);
                                          M.read (| signature |)
                                        ]
                                      |)
                                    |)) in
                                let _ :=
                                  M.is_constant_or_break_match (|
                                    M.read (| γ |),
                                    Value.Bool true
                                  |) in
                                M.alloc (|
                                  Value.StructTuple
                                    "core::result::Result::Ok"
                                    [
                                      M.call_closure (|
                                        M.get_associated_function (|
                                          Ty.path "wasmi::func::FuncInstance",
                                          "alloc_host",
                                          []
                                        |),
                                        [
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "core::clone::Clone",
                                              Ty.path "wasmi::types::Signature",
                                              [],
                                              "clone",
                                              []
                                            |),
                                            [ M.read (| signature |) ]
                                          |);
                                          M.read (|
                                            M.SubPointer.get_struct_record_field (|
                                              M.read (| function |),
                                              "delphinus_zkwasm::runtime::host::external_circuit_plugin::ForeignOp",
                                              "op_index"
                                            |)
                                          |)
                                        ]
                                      |)
                                    ]
                                |)));
                            fun γ =>
                              ltac:(M.monadic
                                (M.alloc (|
                                  Value.StructTuple
                                    "core::result::Result::Err"
                                    [
                                      Value.StructTuple
                                        "wasmi::Error::Instantiation"
                                        [
                                          M.read (|
                                            let res :=
                                              M.alloc (|
                                                M.call_closure (|
                                                  M.get_function (| "alloc::fmt::format", [] |),
                                                  [
                                                    M.call_closure (|
                                                      M.get_associated_function (|
                                                        Ty.path "core::fmt::Arguments",
                                                        "new_v1",
                                                        []
                                                      |),
                                                      [
                                                        (* Unsize *)
                                                        M.pointer_coercion
                                                          (M.alloc (|
                                                            Value.Array
                                                              [
                                                                M.read (|
                                                                  Value.String "Export `"
                                                                |);
                                                                M.read (|
                                                                  Value.String
                                                                    "` doesn't match expected type "
                                                                |)
                                                              ]
                                                          |));
                                                        (* Unsize *)
                                                        M.pointer_coercion
                                                          (M.alloc (|
                                                            Value.Array
                                                              [
                                                                M.call_closure (|
                                                                  M.get_associated_function (|
                                                                    Ty.path
                                                                      "core::fmt::rt::Argument",
                                                                    "new_display",
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path "&")
                                                                        [ Ty.path "str" ]
                                                                    ]
                                                                  |),
                                                                  [ function_name ]
                                                                |);
                                                                M.call_closure (|
                                                                  M.get_associated_function (|
                                                                    Ty.path
                                                                      "core::fmt::rt::Argument",
                                                                    "new_debug",
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path "&")
                                                                        [
                                                                          Ty.path
                                                                            "wasmi::types::Signature"
                                                                        ]
                                                                    ]
                                                                  |),
                                                                  [ signature ]
                                                                |)
                                                              ]
                                                          |))
                                                      ]
                                                    |)
                                                  ]
                                                |)
                                              |) in
                                            res
                                          |)
                                        ]
                                    ]
                                |)))
                          ]
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (M.alloc (|
                          Value.StructTuple
                            "core::result::Result::Err"
                            [
                              Value.StructTuple
                                "wasmi::Error::Instantiation"
                                [
                                  M.read (|
                                    let res :=
                                      M.alloc (|
                                        M.call_closure (|
                                          M.get_function (| "alloc::fmt::format", [] |),
                                          [
                                            M.call_closure (|
                                              M.get_associated_function (|
                                                Ty.path "core::fmt::Arguments",
                                                "new_v1",
                                                []
                                              |),
                                              [
                                                (* Unsize *)
                                                M.pointer_coercion
                                                  (M.alloc (|
                                                    Value.Array
                                                      [
                                                        M.read (| Value.String "Export " |);
                                                        M.read (| Value.String " not found" |)
                                                      ]
                                                  |));
                                                (* Unsize *)
                                                M.pointer_coercion
                                                  (M.alloc (|
                                                    Value.Array
                                                      [
                                                        M.call_closure (|
                                                          M.get_associated_function (|
                                                            Ty.path "core::fmt::rt::Argument",
                                                            "new_display",
                                                            [
                                                              Ty.apply
                                                                (Ty.path "&")
                                                                [ Ty.path "str" ]
                                                            ]
                                                          |),
                                                          [ function_name ]
                                                        |)
                                                      ]
                                                  |))
                                              ]
                                            |)
                                          ]
                                        |)
                                      |) in
                                    res
                                  |)
                                ]
                            ]
                        |)))
                  ]
                |)
              |)))
          | _, _ => M.impossible
          end.
        
        Axiom Implements :
          M.IsTraitInstance
            "wasmi::imports::ModuleImportResolver"
            Self
            (* Trait polymorphic types *) []
            (* Instance *) [ ("resolve_func", InstanceField.Method resolve_func) ].
      End Impl_wasmi_imports_ModuleImportResolver_for_delphinus_zkwasm_runtime_host_external_circuit_plugin_ExternalCircuitEnv.
    End external_circuit_plugin.
  End host.
End runtime.
