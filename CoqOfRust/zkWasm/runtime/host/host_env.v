(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module runtime.
  Module host.
    Module host_env.
      (* StructRecord
        {
          name := "HostEnv";
          ty_params := [];
          fields :=
            [
              ("k", Ty.path "u32");
              ("internal_env",
                Ty.path
                  "delphinus_zkwasm::runtime::host::internal_circuit_plugin::InternalCircuitEnv");
              ("external_env",
                Ty.path
                  "delphinus_zkwasm::runtime::host::external_circuit_plugin::ExternalCircuitEnv");
              ("finalized",
                Ty.apply
                  (Ty.path "alloc::rc::Rc")
                  [
                    Ty.apply (Ty.path "core::cell::RefCell") [ Ty.path "bool" ];
                    Ty.path "alloc::alloc::Global"
                  ]);
              ("cached_lookup",
                Ty.apply
                  (Ty.path "core::option::Option")
                  [
                    Ty.apply
                      (Ty.path "std::collections::hash::map::HashMap")
                      [
                        Ty.path "usize";
                        Ty.path "delphinus_zkwasm::runtime::host::HostFunction";
                        Ty.path "std::hash::random::RandomState"
                      ]
                  ]);
              ("time_profile",
                Ty.apply
                  (Ty.path "alloc::collections::btree::map::BTreeMap")
                  [ Ty.path "alloc::string::String"; Ty.path "u128"; Ty.path "alloc::alloc::Global"
                  ])
            ];
        } *)
      
      Module Impl_delphinus_zkwasm_runtime_host_host_env_HostEnv.
        Definition Self : Ty.t := Ty.path "delphinus_zkwasm::runtime::host::host_env::HostEnv".
        
        (*
            pub fn new(k: u32) -> Self {
                let finalized = Rc::new(RefCell::new(false));
        
                Self {
                    k,
                    internal_env: InternalCircuitEnv::new(finalized.clone()),
                    external_env: ExternalCircuitEnv::new(finalized.clone()),
                    cached_lookup: None,
                    finalized,
                    time_profile: BTreeMap::new(),
                }
            }
        *)
        Definition new (τ : list Ty.t) (α : list Value.t) : M :=
          match τ, α with
          | [], [ k ] =>
            ltac:(M.monadic
              (let k := M.alloc (| k |) in
              M.read (|
                let finalized :=
                  M.alloc (|
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path "alloc::rc::Rc")
                          [
                            Ty.apply (Ty.path "core::cell::RefCell") [ Ty.path "bool" ];
                            Ty.path "alloc::alloc::Global"
                          ],
                        "new",
                        []
                      |),
                      [
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.apply (Ty.path "core::cell::RefCell") [ Ty.path "bool" ],
                            "new",
                            []
                          |),
                          [ Value.Bool false ]
                        |)
                      ]
                    |)
                  |) in
                M.alloc (|
                  Value.StructRecord
                    "delphinus_zkwasm::runtime::host::host_env::HostEnv"
                    [
                      ("k", M.read (| k |));
                      ("internal_env",
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.path
                              "delphinus_zkwasm::runtime::host::internal_circuit_plugin::InternalCircuitEnv",
                            "new",
                            []
                          |),
                          [
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::clone::Clone",
                                Ty.apply
                                  (Ty.path "alloc::rc::Rc")
                                  [
                                    Ty.apply (Ty.path "core::cell::RefCell") [ Ty.path "bool" ];
                                    Ty.path "alloc::alloc::Global"
                                  ],
                                [],
                                "clone",
                                []
                              |),
                              [ finalized ]
                            |)
                          ]
                        |));
                      ("external_env",
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.path
                              "delphinus_zkwasm::runtime::host::external_circuit_plugin::ExternalCircuitEnv",
                            "new",
                            []
                          |),
                          [
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::clone::Clone",
                                Ty.apply
                                  (Ty.path "alloc::rc::Rc")
                                  [
                                    Ty.apply (Ty.path "core::cell::RefCell") [ Ty.path "bool" ];
                                    Ty.path "alloc::alloc::Global"
                                  ],
                                [],
                                "clone",
                                []
                              |),
                              [ finalized ]
                            |)
                          ]
                        |));
                      ("cached_lookup", Value.StructTuple "core::option::Option::None" []);
                      ("finalized", M.read (| finalized |));
                      ("time_profile",
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path "alloc::collections::btree::map::BTreeMap")
                              [
                                Ty.path "alloc::string::String";
                                Ty.path "u128";
                                Ty.path "alloc::alloc::Global"
                              ],
                            "new",
                            []
                          |),
                          []
                        |))
                    ]
                |)
              |)))
          | _, _ => M.impossible
          end.
        
        Axiom AssociatedFunction_new : M.IsAssociatedFunction Self "new" new.
        
        (*
            pub fn finalize(&mut self) {
                let mut lookup = HashMap::<usize, HostFunction>::new();
        
                let mut internal_op_allocator_offset = 0;
        
                for (name, op) in &self.external_env.functions {
                    internal_op_allocator_offset = usize::max(internal_op_allocator_offset, op.op_index);
        
                    lookup
                        .insert(
                            op.op_index,
                            HostFunction {
                                desc: HostFunctionDesc::External {
                                    name: name.to_owned(),
                                    op: op.op_index,
                                    sig: op.sig.into(),
                                },
                                execution_env: HostFunctionExecutionEnv {
                                    ctx: op.plugin.ctx.clone(),
                                    cb: op.cb.clone(),
                                },
                            },
                        )
                        .map(|_| panic!("conflicting op index of foreign function"));
                }
        
                internal_op_allocator_offset += 1;
        
                for (name, op) in &mut self.internal_env.functions {
                    op.index = Some(internal_op_allocator_offset);
        
                    lookup.insert(
                        internal_op_allocator_offset,
                        HostFunction {
                            desc: HostFunctionDesc::Internal {
                                name: name.to_owned(),
                                op_index_in_plugin: op.index_within_plugin,
                                plugin: op.plugin,
                            },
                            execution_env: HostFunctionExecutionEnv {
                                ctx: self
                                    .internal_env
                                    .plugins
                                    .get(&op.plugin)
                                    .unwrap()
                                    .ctx
                                    .clone(),
                                cb: op.cb.clone(),
                            },
                        },
                    );
        
                    internal_op_allocator_offset += 1;
                }
        
                self.cached_lookup = Some(lookup);
        
                let mut finalized = self.finalized.borrow_mut();
                *finalized = true;
            }
        *)
        Definition finalize (τ : list Ty.t) (α : list Value.t) : M :=
          match τ, α with
          | [], [ self ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              M.read (|
                let lookup :=
                  M.alloc (|
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path "std::collections::hash::map::HashMap")
                          [
                            Ty.path "usize";
                            Ty.path "delphinus_zkwasm::runtime::host::HostFunction";
                            Ty.path "std::hash::random::RandomState"
                          ],
                        "new",
                        []
                      |),
                      []
                    |)
                  |) in
                let internal_op_allocator_offset := M.alloc (| Value.Integer 0 |) in
                let _ :=
                  M.use
                    (M.match_operator (|
                      M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::iter::traits::collect::IntoIterator",
                            Ty.apply
                              (Ty.path "&")
                              [
                                Ty.apply
                                  (Ty.path "std::collections::hash::map::HashMap")
                                  [
                                    Ty.path "alloc::string::String";
                                    Ty.path
                                      "delphinus_zkwasm::runtime::host::external_circuit_plugin::ForeignOp";
                                    Ty.path "std::hash::random::RandomState"
                                  ]
                              ],
                            [],
                            "into_iter",
                            []
                          |),
                          [
                            M.SubPointer.get_struct_record_field (|
                              M.SubPointer.get_struct_record_field (|
                                M.read (| self |),
                                "delphinus_zkwasm::runtime::host::host_env::HostEnv",
                                "external_env"
                              |),
                              "delphinus_zkwasm::runtime::host::external_circuit_plugin::ExternalCircuitEnv",
                              "functions"
                            |)
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let iter := M.copy (| γ |) in
                            M.loop (|
                              ltac:(M.monadic
                                (let _ :=
                                  M.match_operator (|
                                    M.alloc (|
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "core::iter::traits::iterator::Iterator",
                                          Ty.apply
                                            (Ty.path "std::collections::hash::map::Iter")
                                            [
                                              Ty.path "alloc::string::String";
                                              Ty.path
                                                "delphinus_zkwasm::runtime::host::external_circuit_plugin::ForeignOp"
                                            ],
                                          [],
                                          "next",
                                          []
                                        |),
                                        [ iter ]
                                      |)
                                    |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (M.alloc (|
                                            M.never_to_any (| M.read (| M.break (||) |) |)
                                          |)));
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let γ0_0 :=
                                            M.SubPointer.get_struct_tuple_field (|
                                              γ,
                                              "core::option::Option::Some",
                                              0
                                            |) in
                                          let γ1_0 := M.SubPointer.get_tuple_field (| γ0_0, 0 |) in
                                          let γ1_1 := M.SubPointer.get_tuple_field (| γ0_0, 1 |) in
                                          let name := M.copy (| γ1_0 |) in
                                          let op := M.copy (| γ1_1 |) in
                                          let _ :=
                                            M.write (|
                                              internal_op_allocator_offset,
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "core::cmp::Ord",
                                                  Ty.path "usize",
                                                  [],
                                                  "max",
                                                  []
                                                |),
                                                [
                                                  M.read (| internal_op_allocator_offset |);
                                                  M.read (|
                                                    M.SubPointer.get_struct_record_field (|
                                                      M.read (| op |),
                                                      "delphinus_zkwasm::runtime::host::external_circuit_plugin::ForeignOp",
                                                      "op_index"
                                                    |)
                                                  |)
                                                ]
                                              |)
                                            |) in
                                          let _ :=
                                            M.alloc (|
                                              M.call_closure (|
                                                M.get_associated_function (|
                                                  Ty.apply
                                                    (Ty.path "core::option::Option")
                                                    [
                                                      Ty.path
                                                        "delphinus_zkwasm::runtime::host::HostFunction"
                                                    ],
                                                  "map",
                                                  [
                                                    Ty.tuple [];
                                                    Ty.function
                                                      [
                                                        Ty.tuple
                                                          [
                                                            Ty.path
                                                              "delphinus_zkwasm::runtime::host::HostFunction"
                                                          ]
                                                      ]
                                                      (Ty.tuple [])
                                                  ]
                                                |),
                                                [
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.apply
                                                        (Ty.path
                                                          "std::collections::hash::map::HashMap")
                                                        [
                                                          Ty.path "usize";
                                                          Ty.path
                                                            "delphinus_zkwasm::runtime::host::HostFunction";
                                                          Ty.path "std::hash::random::RandomState"
                                                        ],
                                                      "insert",
                                                      []
                                                    |),
                                                    [
                                                      lookup;
                                                      M.read (|
                                                        M.SubPointer.get_struct_record_field (|
                                                          M.read (| op |),
                                                          "delphinus_zkwasm::runtime::host::external_circuit_plugin::ForeignOp",
                                                          "op_index"
                                                        |)
                                                      |);
                                                      Value.StructRecord
                                                        "delphinus_zkwasm::runtime::host::HostFunction"
                                                        [
                                                          ("desc",
                                                            Value.StructRecord
                                                              "specs::host_function::HostFunctionDesc::External"
                                                              [
                                                                ("name",
                                                                  M.call_closure (|
                                                                    M.get_trait_method (|
                                                                      "alloc::borrow::ToOwned",
                                                                      Ty.path
                                                                        "alloc::string::String",
                                                                      [],
                                                                      "to_owned",
                                                                      []
                                                                    |),
                                                                    [ M.read (| name |) ]
                                                                  |));
                                                                ("op",
                                                                  M.read (|
                                                                    M.SubPointer.get_struct_record_field (|
                                                                      M.read (| op |),
                                                                      "delphinus_zkwasm::runtime::host::external_circuit_plugin::ForeignOp",
                                                                      "op_index"
                                                                    |)
                                                                  |));
                                                                ("sig",
                                                                  M.call_closure (|
                                                                    M.get_trait_method (|
                                                                      "core::convert::Into",
                                                                      Ty.path
                                                                        "specs::external_host_call_table::ExternalHostCallSignature",
                                                                      [
                                                                        Ty.path
                                                                          "specs::external_host_call_table::ExternalHostCallSignature"
                                                                      ],
                                                                      "into",
                                                                      []
                                                                    |),
                                                                    [
                                                                      M.read (|
                                                                        M.SubPointer.get_struct_record_field (|
                                                                          M.read (| op |),
                                                                          "delphinus_zkwasm::runtime::host::external_circuit_plugin::ForeignOp",
                                                                          "sig"
                                                                        |)
                                                                      |)
                                                                    ]
                                                                  |))
                                                              ]);
                                                          ("execution_env",
                                                            Value.StructRecord
                                                              "delphinus_zkwasm::runtime::host::HostFunctionExecutionEnv"
                                                              [
                                                                ("ctx",
                                                                  M.call_closure (|
                                                                    M.get_trait_method (|
                                                                      "core::clone::Clone",
                                                                      Ty.apply
                                                                        (Ty.path "alloc::rc::Rc")
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "core::cell::RefCell")
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "alloc::boxed::Box")
                                                                                [
                                                                                  Ty.dyn
                                                                                    [
                                                                                      ("delphinus_zkwasm::runtime::host::ForeignContext::Trait",
                                                                                        [])
                                                                                    ];
                                                                                  Ty.path
                                                                                    "alloc::alloc::Global"
                                                                                ]
                                                                            ];
                                                                          Ty.path
                                                                            "alloc::alloc::Global"
                                                                        ],
                                                                      [],
                                                                      "clone",
                                                                      []
                                                                    |),
                                                                    [
                                                                      M.SubPointer.get_struct_record_field (|
                                                                        M.call_closure (|
                                                                          M.get_trait_method (|
                                                                            "core::ops::deref::Deref",
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "alloc::rc::Rc")
                                                                              [
                                                                                Ty.path
                                                                                  "delphinus_zkwasm::runtime::host::ForeignPlugin";
                                                                                Ty.path
                                                                                  "alloc::alloc::Global"
                                                                              ],
                                                                            [],
                                                                            "deref",
                                                                            []
                                                                          |),
                                                                          [
                                                                            M.SubPointer.get_struct_record_field (|
                                                                              M.read (| op |),
                                                                              "delphinus_zkwasm::runtime::host::external_circuit_plugin::ForeignOp",
                                                                              "plugin"
                                                                            |)
                                                                          ]
                                                                        |),
                                                                        "delphinus_zkwasm::runtime::host::ForeignPlugin",
                                                                        "ctx"
                                                                      |)
                                                                    ]
                                                                  |));
                                                                ("cb",
                                                                  (* Unsize *)
                                                                  M.pointer_coercion
                                                                    (M.call_closure (|
                                                                      M.get_trait_method (|
                                                                        "core::clone::Clone",
                                                                        Ty.apply
                                                                          (Ty.path "alloc::rc::Rc")
                                                                          [
                                                                            Ty.dyn
                                                                              [
                                                                                ("existential predicate with variables",
                                                                                  []);
                                                                                ("existential predicate with variables",
                                                                                  [])
                                                                              ];
                                                                            Ty.path
                                                                              "alloc::alloc::Global"
                                                                          ],
                                                                        [],
                                                                        "clone",
                                                                        []
                                                                      |),
                                                                      [
                                                                        M.SubPointer.get_struct_record_field (|
                                                                          M.read (| op |),
                                                                          "delphinus_zkwasm::runtime::host::external_circuit_plugin::ForeignOp",
                                                                          "cb"
                                                                        |)
                                                                      ]
                                                                    |)))
                                                              ])
                                                        ]
                                                    ]
                                                  |);
                                                  M.closure
                                                    (fun γ =>
                                                      ltac:(M.monadic
                                                        match γ with
                                                        | [ α0 ] =>
                                                          M.match_operator (|
                                                            M.alloc (| α0 |),
                                                            [
                                                              fun γ =>
                                                                ltac:(M.monadic
                                                                  (M.never_to_any (|
                                                                    M.call_closure (|
                                                                      M.get_function (|
                                                                        "core::panicking::panic_fmt",
                                                                        []
                                                                      |),
                                                                      [
                                                                        M.call_closure (|
                                                                          M.get_associated_function (|
                                                                            Ty.path
                                                                              "core::fmt::Arguments",
                                                                            "new_const",
                                                                            []
                                                                          |),
                                                                          [
                                                                            (* Unsize *)
                                                                            M.pointer_coercion
                                                                              (M.alloc (|
                                                                                Value.Array
                                                                                  [
                                                                                    M.read (|
                                                                                      Value.String
                                                                                        "conflicting op index of foreign function"
                                                                                    |)
                                                                                  ]
                                                                              |))
                                                                          ]
                                                                        |)
                                                                      ]
                                                                    |)
                                                                  |)))
                                                            ]
                                                          |)
                                                        | _ => M.impossible (||)
                                                        end))
                                                ]
                                              |)
                                            |) in
                                          M.alloc (| Value.Tuple [] |)))
                                    ]
                                  |) in
                                M.alloc (| Value.Tuple [] |)))
                            |)))
                      ]
                    |)) in
                let _ :=
                  let β := internal_op_allocator_offset in
                  M.write (|
                    β,
                    BinOp.Panic.add (| Integer.Usize, M.read (| β |), Value.Integer 1 |)
                  |) in
                let _ :=
                  M.use
                    (M.match_operator (|
                      M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::iter::traits::collect::IntoIterator",
                            Ty.apply
                              (Ty.path "&mut")
                              [
                                Ty.apply
                                  (Ty.path "std::collections::hash::map::HashMap")
                                  [
                                    Ty.path "alloc::string::String";
                                    Ty.path
                                      "delphinus_zkwasm::runtime::host::internal_circuit_plugin::ForeignOp";
                                    Ty.path "std::hash::random::RandomState"
                                  ]
                              ],
                            [],
                            "into_iter",
                            []
                          |),
                          [
                            M.SubPointer.get_struct_record_field (|
                              M.SubPointer.get_struct_record_field (|
                                M.read (| self |),
                                "delphinus_zkwasm::runtime::host::host_env::HostEnv",
                                "internal_env"
                              |),
                              "delphinus_zkwasm::runtime::host::internal_circuit_plugin::InternalCircuitEnv",
                              "functions"
                            |)
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let iter := M.copy (| γ |) in
                            M.loop (|
                              ltac:(M.monadic
                                (let _ :=
                                  M.match_operator (|
                                    M.alloc (|
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "core::iter::traits::iterator::Iterator",
                                          Ty.apply
                                            (Ty.path "std::collections::hash::map::IterMut")
                                            [
                                              Ty.path "alloc::string::String";
                                              Ty.path
                                                "delphinus_zkwasm::runtime::host::internal_circuit_plugin::ForeignOp"
                                            ],
                                          [],
                                          "next",
                                          []
                                        |),
                                        [ iter ]
                                      |)
                                    |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (M.alloc (|
                                            M.never_to_any (| M.read (| M.break (||) |) |)
                                          |)));
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let γ0_0 :=
                                            M.SubPointer.get_struct_tuple_field (|
                                              γ,
                                              "core::option::Option::Some",
                                              0
                                            |) in
                                          let γ1_0 := M.SubPointer.get_tuple_field (| γ0_0, 0 |) in
                                          let γ1_1 := M.SubPointer.get_tuple_field (| γ0_0, 1 |) in
                                          let name := M.copy (| γ1_0 |) in
                                          let op := M.copy (| γ1_1 |) in
                                          let _ :=
                                            M.write (|
                                              M.SubPointer.get_struct_record_field (|
                                                M.read (| op |),
                                                "delphinus_zkwasm::runtime::host::internal_circuit_plugin::ForeignOp",
                                                "index"
                                              |),
                                              Value.StructTuple
                                                "core::option::Option::Some"
                                                [ M.read (| internal_op_allocator_offset |) ]
                                            |) in
                                          let _ :=
                                            M.alloc (|
                                              M.call_closure (|
                                                M.get_associated_function (|
                                                  Ty.apply
                                                    (Ty.path "std::collections::hash::map::HashMap")
                                                    [
                                                      Ty.path "usize";
                                                      Ty.path
                                                        "delphinus_zkwasm::runtime::host::HostFunction";
                                                      Ty.path "std::hash::random::RandomState"
                                                    ],
                                                  "insert",
                                                  []
                                                |),
                                                [
                                                  lookup;
                                                  M.read (| internal_op_allocator_offset |);
                                                  Value.StructRecord
                                                    "delphinus_zkwasm::runtime::host::HostFunction"
                                                    [
                                                      ("desc",
                                                        Value.StructRecord
                                                          "specs::host_function::HostFunctionDesc::Internal"
                                                          [
                                                            ("name",
                                                              M.call_closure (|
                                                                M.get_trait_method (|
                                                                  "alloc::borrow::ToOwned",
                                                                  Ty.path "alloc::string::String",
                                                                  [],
                                                                  "to_owned",
                                                                  []
                                                                |),
                                                                [ M.read (| name |) ]
                                                              |));
                                                            ("op_index_in_plugin",
                                                              M.read (|
                                                                M.SubPointer.get_struct_record_field (|
                                                                  M.read (| op |),
                                                                  "delphinus_zkwasm::runtime::host::internal_circuit_plugin::ForeignOp",
                                                                  "index_within_plugin"
                                                                |)
                                                              |));
                                                            ("plugin",
                                                              M.read (|
                                                                M.SubPointer.get_struct_record_field (|
                                                                  M.read (| op |),
                                                                  "delphinus_zkwasm::runtime::host::internal_circuit_plugin::ForeignOp",
                                                                  "plugin"
                                                                |)
                                                              |))
                                                          ]);
                                                      ("execution_env",
                                                        Value.StructRecord
                                                          "delphinus_zkwasm::runtime::host::HostFunctionExecutionEnv"
                                                          [
                                                            ("ctx",
                                                              M.call_closure (|
                                                                M.get_trait_method (|
                                                                  "core::clone::Clone",
                                                                  Ty.apply
                                                                    (Ty.path "alloc::rc::Rc")
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "core::cell::RefCell")
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "alloc::boxed::Box")
                                                                            [
                                                                              Ty.dyn
                                                                                [
                                                                                  ("delphinus_zkwasm::runtime::host::ForeignContext::Trait",
                                                                                    [])
                                                                                ];
                                                                              Ty.path
                                                                                "alloc::alloc::Global"
                                                                            ]
                                                                        ];
                                                                      Ty.path "alloc::alloc::Global"
                                                                    ],
                                                                  [],
                                                                  "clone",
                                                                  []
                                                                |),
                                                                [
                                                                  M.SubPointer.get_struct_record_field (|
                                                                    M.call_closure (|
                                                                      M.get_associated_function (|
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "core::option::Option")
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path "&")
                                                                              [
                                                                                Ty.path
                                                                                  "delphinus_zkwasm::runtime::host::ForeignPlugin"
                                                                              ]
                                                                          ],
                                                                        "unwrap",
                                                                        []
                                                                      |),
                                                                      [
                                                                        M.call_closure (|
                                                                          M.get_associated_function (|
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "std::collections::hash::map::HashMap")
                                                                              [
                                                                                Ty.path
                                                                                  "specs::host_function::HostPlugin";
                                                                                Ty.path
                                                                                  "delphinus_zkwasm::runtime::host::ForeignPlugin";
                                                                                Ty.path
                                                                                  "std::hash::random::RandomState"
                                                                              ],
                                                                            "get",
                                                                            [
                                                                              Ty.path
                                                                                "specs::host_function::HostPlugin"
                                                                            ]
                                                                          |),
                                                                          [
                                                                            M.SubPointer.get_struct_record_field (|
                                                                              M.SubPointer.get_struct_record_field (|
                                                                                M.read (| self |),
                                                                                "delphinus_zkwasm::runtime::host::host_env::HostEnv",
                                                                                "internal_env"
                                                                              |),
                                                                              "delphinus_zkwasm::runtime::host::internal_circuit_plugin::InternalCircuitEnv",
                                                                              "plugins"
                                                                            |);
                                                                            M.SubPointer.get_struct_record_field (|
                                                                              M.read (| op |),
                                                                              "delphinus_zkwasm::runtime::host::internal_circuit_plugin::ForeignOp",
                                                                              "plugin"
                                                                            |)
                                                                          ]
                                                                        |)
                                                                      ]
                                                                    |),
                                                                    "delphinus_zkwasm::runtime::host::ForeignPlugin",
                                                                    "ctx"
                                                                  |)
                                                                ]
                                                              |));
                                                            ("cb",
                                                              (* Unsize *)
                                                              M.pointer_coercion
                                                                (M.call_closure (|
                                                                  M.get_trait_method (|
                                                                    "core::clone::Clone",
                                                                    Ty.apply
                                                                      (Ty.path "alloc::rc::Rc")
                                                                      [
                                                                        Ty.dyn
                                                                          [
                                                                            ("existential predicate with variables",
                                                                              []);
                                                                            ("existential predicate with variables",
                                                                              [])
                                                                          ];
                                                                        Ty.path
                                                                          "alloc::alloc::Global"
                                                                      ],
                                                                    [],
                                                                    "clone",
                                                                    []
                                                                  |),
                                                                  [
                                                                    M.SubPointer.get_struct_record_field (|
                                                                      M.read (| op |),
                                                                      "delphinus_zkwasm::runtime::host::internal_circuit_plugin::ForeignOp",
                                                                      "cb"
                                                                    |)
                                                                  ]
                                                                |)))
                                                          ])
                                                    ]
                                                ]
                                              |)
                                            |) in
                                          let _ :=
                                            let β := internal_op_allocator_offset in
                                            M.write (|
                                              β,
                                              BinOp.Panic.add (|
                                                Integer.Usize,
                                                M.read (| β |),
                                                Value.Integer 1
                                              |)
                                            |) in
                                          M.alloc (| Value.Tuple [] |)))
                                    ]
                                  |) in
                                M.alloc (| Value.Tuple [] |)))
                            |)))
                      ]
                    |)) in
                let _ :=
                  M.write (|
                    M.SubPointer.get_struct_record_field (|
                      M.read (| self |),
                      "delphinus_zkwasm::runtime::host::host_env::HostEnv",
                      "cached_lookup"
                    |),
                    Value.StructTuple "core::option::Option::Some" [ M.read (| lookup |) ]
                  |) in
                let finalized :=
                  M.alloc (|
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.apply (Ty.path "core::cell::RefCell") [ Ty.path "bool" ],
                        "borrow_mut",
                        []
                      |),
                      [
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::ops::deref::Deref",
                            Ty.apply
                              (Ty.path "alloc::rc::Rc")
                              [
                                Ty.apply (Ty.path "core::cell::RefCell") [ Ty.path "bool" ];
                                Ty.path "alloc::alloc::Global"
                              ],
                            [],
                            "deref",
                            []
                          |),
                          [
                            M.SubPointer.get_struct_record_field (|
                              M.read (| self |),
                              "delphinus_zkwasm::runtime::host::host_env::HostEnv",
                              "finalized"
                            |)
                          ]
                        |)
                      ]
                    |)
                  |) in
                let _ :=
                  M.write (|
                    M.call_closure (|
                      M.get_trait_method (|
                        "core::ops::deref::DerefMut",
                        Ty.apply (Ty.path "core::cell::RefMut") [ Ty.path "bool" ],
                        [],
                        "deref_mut",
                        []
                      |),
                      [ finalized ]
                    |),
                    Value.Bool true
                  |) in
                M.alloc (| Value.Tuple [] |)
              |)))
          | _, _ => M.impossible
          end.
        
        Axiom AssociatedFunction_finalize : M.IsAssociatedFunction Self "finalize" finalize.
        
        (*
            pub fn function_description_table(&self) -> HashMap<usize, HostFunctionDesc> {
                assert!(
                    *self.finalized.borrow(),
                    "HostEnv has not been finalized. Please invoke finalized() first."
                );
        
                self.cached_lookup
                    .clone()
                    .unwrap()
                    .iter()
                    .map(|(idx, host_function)| ( *idx, host_function.desc.clone()))
                    .collect()
            }
        *)
        Definition function_description_table (τ : list Ty.t) (α : list Value.t) : M :=
          match τ, α with
          | [], [ self ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              M.read (|
                let _ :=
                  M.match_operator (|
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                UnOp.Pure.not
                                  (M.read (|
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::ops::deref::Deref",
                                        Ty.apply (Ty.path "core::cell::Ref") [ Ty.path "bool" ],
                                        [],
                                        "deref",
                                        []
                                      |),
                                      [
                                        M.alloc (|
                                          M.call_closure (|
                                            M.get_associated_function (|
                                              Ty.apply
                                                (Ty.path "core::cell::RefCell")
                                                [ Ty.path "bool" ],
                                              "borrow",
                                              []
                                            |),
                                            [
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "core::ops::deref::Deref",
                                                  Ty.apply
                                                    (Ty.path "alloc::rc::Rc")
                                                    [
                                                      Ty.apply
                                                        (Ty.path "core::cell::RefCell")
                                                        [ Ty.path "bool" ];
                                                      Ty.path "alloc::alloc::Global"
                                                    ],
                                                  [],
                                                  "deref",
                                                  []
                                                |),
                                                [
                                                  M.SubPointer.get_struct_record_field (|
                                                    M.read (| self |),
                                                    "delphinus_zkwasm::runtime::host::host_env::HostEnv",
                                                    "finalized"
                                                  |)
                                                ]
                                              |)
                                            ]
                                          |)
                                        |)
                                      ]
                                    |)
                                  |))
                              |)) in
                          let _ :=
                            M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.call_closure (|
                                M.get_function (| "core::panicking::panic_fmt", [] |),
                                [
                                  M.call_closure (|
                                    M.get_associated_function (|
                                      Ty.path "core::fmt::Arguments",
                                      "new_const",
                                      []
                                    |),
                                    [
                                      (* Unsize *)
                                      M.pointer_coercion
                                        (M.alloc (|
                                          Value.Array
                                            [
                                              M.read (|
                                                Value.String
                                                  "HostEnv has not been finalized. Please invoke finalized() first."
                                              |)
                                            ]
                                        |))
                                    ]
                                  |)
                                ]
                              |)
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                M.alloc (|
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::iter::traits::iterator::Iterator",
                      Ty.apply
                        (Ty.path "core::iter::adapters::map::Map")
                        [
                          Ty.apply
                            (Ty.path "std::collections::hash::map::Iter")
                            [
                              Ty.path "usize";
                              Ty.path "delphinus_zkwasm::runtime::host::HostFunction"
                            ];
                          Ty.function
                            [
                              Ty.tuple
                                [
                                  Ty.tuple
                                    [
                                      Ty.apply (Ty.path "&") [ Ty.path "usize" ];
                                      Ty.apply
                                        (Ty.path "&")
                                        [ Ty.path "delphinus_zkwasm::runtime::host::HostFunction" ]
                                    ]
                                ]
                            ]
                            (Ty.tuple
                              [ Ty.path "usize"; Ty.path "specs::host_function::HostFunctionDesc" ])
                        ],
                      [],
                      "collect",
                      [
                        Ty.apply
                          (Ty.path "std::collections::hash::map::HashMap")
                          [
                            Ty.path "usize";
                            Ty.path "specs::host_function::HostFunctionDesc";
                            Ty.path "std::hash::random::RandomState"
                          ]
                      ]
                    |),
                    [
                      M.call_closure (|
                        M.get_trait_method (|
                          "core::iter::traits::iterator::Iterator",
                          Ty.apply
                            (Ty.path "std::collections::hash::map::Iter")
                            [
                              Ty.path "usize";
                              Ty.path "delphinus_zkwasm::runtime::host::HostFunction"
                            ],
                          [],
                          "map",
                          [
                            Ty.tuple
                              [ Ty.path "usize"; Ty.path "specs::host_function::HostFunctionDesc" ];
                            Ty.function
                              [
                                Ty.tuple
                                  [
                                    Ty.tuple
                                      [
                                        Ty.apply (Ty.path "&") [ Ty.path "usize" ];
                                        Ty.apply
                                          (Ty.path "&")
                                          [ Ty.path "delphinus_zkwasm::runtime::host::HostFunction"
                                          ]
                                      ]
                                  ]
                              ]
                              (Ty.tuple
                                [ Ty.path "usize"; Ty.path "specs::host_function::HostFunctionDesc"
                                ])
                          ]
                        |),
                        [
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.apply
                                (Ty.path "std::collections::hash::map::HashMap")
                                [
                                  Ty.path "usize";
                                  Ty.path "delphinus_zkwasm::runtime::host::HostFunction";
                                  Ty.path "std::hash::random::RandomState"
                                ],
                              "iter",
                              []
                            |),
                            [
                              M.alloc (|
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.apply
                                      (Ty.path "core::option::Option")
                                      [
                                        Ty.apply
                                          (Ty.path "std::collections::hash::map::HashMap")
                                          [
                                            Ty.path "usize";
                                            Ty.path "delphinus_zkwasm::runtime::host::HostFunction";
                                            Ty.path "std::hash::random::RandomState"
                                          ]
                                      ],
                                    "unwrap",
                                    []
                                  |),
                                  [
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::clone::Clone",
                                        Ty.apply
                                          (Ty.path "core::option::Option")
                                          [
                                            Ty.apply
                                              (Ty.path "std::collections::hash::map::HashMap")
                                              [
                                                Ty.path "usize";
                                                Ty.path
                                                  "delphinus_zkwasm::runtime::host::HostFunction";
                                                Ty.path "std::hash::random::RandomState"
                                              ]
                                          ],
                                        [],
                                        "clone",
                                        []
                                      |),
                                      [
                                        M.SubPointer.get_struct_record_field (|
                                          M.read (| self |),
                                          "delphinus_zkwasm::runtime::host::host_env::HostEnv",
                                          "cached_lookup"
                                        |)
                                      ]
                                    |)
                                  ]
                                |)
                              |)
                            ]
                          |);
                          M.closure
                            (fun γ =>
                              ltac:(M.monadic
                                match γ with
                                | [ α0 ] =>
                                  M.match_operator (|
                                    M.alloc (| α0 |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                                          let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                                          let idx := M.copy (| γ0_0 |) in
                                          let host_function := M.copy (| γ0_1 |) in
                                          Value.Tuple
                                            [
                                              M.read (| M.read (| idx |) |);
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "core::clone::Clone",
                                                  Ty.path "specs::host_function::HostFunctionDesc",
                                                  [],
                                                  "clone",
                                                  []
                                                |),
                                                [
                                                  M.SubPointer.get_struct_record_field (|
                                                    M.read (| host_function |),
                                                    "delphinus_zkwasm::runtime::host::HostFunction",
                                                    "desc"
                                                  |)
                                                ]
                                              |)
                                            ]))
                                    ]
                                  |)
                                | _ => M.impossible (||)
                                end))
                        ]
                      |)
                    ]
                  |)
                |)
              |)))
          | _, _ => M.impossible
          end.
        
        Axiom AssociatedFunction_function_description_table :
          M.IsAssociatedFunction Self "function_description_table" function_description_table.
        
        (*
            pub fn display_time_profile(&self) {
                debug!("Execution time(ms) of Foreign Functions:");
                self.time_profile.iter().for_each(|(func, ms)| {
                    debug!("{}:\t{}", func, ms);
                })
            }
        *)
        Definition display_time_profile (τ : list Ty.t) (α : list Value.t) : M :=
          match τ, α with
          | [], [ self ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              M.read (|
                let _ :=
                  let lvl := M.alloc (| Value.StructTuple "log::Level::Debug" [] |) in
                  M.match_operator (|
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                LogicalOp.and (|
                                  M.call_closure (|
                                    M.get_trait_method (|
                                      "core::cmp::PartialOrd",
                                      Ty.path "log::Level",
                                      [ Ty.path "log::LevelFilter" ],
                                      "le",
                                      []
                                    |),
                                    [ lvl; M.get_constant (| "log::STATIC_MAX_LEVEL" |) ]
                                  |),
                                  ltac:(M.monadic
                                    (M.call_closure (|
                                      M.get_trait_method (|
                                        "core::cmp::PartialOrd",
                                        Ty.path "log::Level",
                                        [ Ty.path "log::LevelFilter" ],
                                        "le",
                                        []
                                      |),
                                      [
                                        lvl;
                                        M.alloc (|
                                          M.call_closure (|
                                            M.get_function (| "log::max_level", [] |),
                                            []
                                          |)
                                        |)
                                      ]
                                    |)))
                                |)
                              |)) in
                          let _ :=
                            M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          let _ :=
                            M.alloc (|
                              M.call_closure (|
                                M.get_function (| "log::__private_api::log", [ Ty.tuple [] ] |),
                                [
                                  M.call_closure (|
                                    M.get_associated_function (|
                                      Ty.path "core::fmt::Arguments",
                                      "new_const",
                                      []
                                    |),
                                    [
                                      (* Unsize *)
                                      M.pointer_coercion
                                        (M.alloc (|
                                          Value.Array
                                            [
                                              M.read (|
                                                Value.String
                                                  "Execution time(ms) of Foreign Functions:"
                                              |)
                                            ]
                                        |))
                                    ]
                                  |);
                                  M.read (| lvl |);
                                  M.alloc (|
                                    Value.Tuple
                                      [
                                        M.read (|
                                          Value.String "delphinus_zkwasm::runtime::host::host_env"
                                        |);
                                        M.read (|
                                          Value.String "delphinus_zkwasm::runtime::host::host_env"
                                        |);
                                        M.read (|
                                          Value.String "crates/zkwasm/src/runtime/host/host_env.rs"
                                        |)
                                      ]
                                  |);
                                  Value.Integer 138;
                                  Value.Tuple []
                                ]
                              |)
                            |) in
                          M.alloc (| Value.Tuple [] |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                M.alloc (|
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::iter::traits::iterator::Iterator",
                      Ty.apply
                        (Ty.path "alloc::collections::btree::map::Iter")
                        [ Ty.path "alloc::string::String"; Ty.path "u128" ],
                      [],
                      "for_each",
                      [
                        Ty.function
                          [
                            Ty.tuple
                              [
                                Ty.tuple
                                  [
                                    Ty.apply (Ty.path "&") [ Ty.path "alloc::string::String" ];
                                    Ty.apply (Ty.path "&") [ Ty.path "u128" ]
                                  ]
                              ]
                          ]
                          (Ty.tuple [])
                      ]
                    |),
                    [
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.apply
                            (Ty.path "alloc::collections::btree::map::BTreeMap")
                            [
                              Ty.path "alloc::string::String";
                              Ty.path "u128";
                              Ty.path "alloc::alloc::Global"
                            ],
                          "iter",
                          []
                        |),
                        [
                          M.SubPointer.get_struct_record_field (|
                            M.read (| self |),
                            "delphinus_zkwasm::runtime::host::host_env::HostEnv",
                            "time_profile"
                          |)
                        ]
                      |);
                      M.closure
                        (fun γ =>
                          ltac:(M.monadic
                            match γ with
                            | [ α0 ] =>
                              M.match_operator (|
                                M.alloc (| α0 |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                                      let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                                      let func := M.copy (| γ0_0 |) in
                                      let ms := M.copy (| γ0_1 |) in
                                      M.read (|
                                        let _ :=
                                          let lvl :=
                                            M.alloc (|
                                              Value.StructTuple "log::Level::Debug" []
                                            |) in
                                          M.match_operator (|
                                            M.alloc (| Value.Tuple [] |),
                                            [
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let γ :=
                                                    M.use
                                                      (M.alloc (|
                                                        LogicalOp.and (|
                                                          M.call_closure (|
                                                            M.get_trait_method (|
                                                              "core::cmp::PartialOrd",
                                                              Ty.path "log::Level",
                                                              [ Ty.path "log::LevelFilter" ],
                                                              "le",
                                                              []
                                                            |),
                                                            [
                                                              lvl;
                                                              M.get_constant (|
                                                                "log::STATIC_MAX_LEVEL"
                                                              |)
                                                            ]
                                                          |),
                                                          ltac:(M.monadic
                                                            (M.call_closure (|
                                                              M.get_trait_method (|
                                                                "core::cmp::PartialOrd",
                                                                Ty.path "log::Level",
                                                                [ Ty.path "log::LevelFilter" ],
                                                                "le",
                                                                []
                                                              |),
                                                              [
                                                                lvl;
                                                                M.alloc (|
                                                                  M.call_closure (|
                                                                    M.get_function (|
                                                                      "log::max_level",
                                                                      []
                                                                    |),
                                                                    []
                                                                  |)
                                                                |)
                                                              ]
                                                            |)))
                                                        |)
                                                      |)) in
                                                  let _ :=
                                                    M.is_constant_or_break_match (|
                                                      M.read (| γ |),
                                                      Value.Bool true
                                                    |) in
                                                  let _ :=
                                                    M.alloc (|
                                                      M.call_closure (|
                                                        M.get_function (|
                                                          "log::__private_api::log",
                                                          [ Ty.tuple [] ]
                                                        |),
                                                        [
                                                          M.call_closure (|
                                                            M.get_associated_function (|
                                                              Ty.path "core::fmt::Arguments",
                                                              "new_v1",
                                                              []
                                                            |),
                                                            [
                                                              (* Unsize *)
                                                              M.pointer_coercion
                                                                (M.alloc (|
                                                                  Value.Array
                                                                    [
                                                                      M.read (| Value.String "" |);
                                                                      M.read (| Value.String ":	" |)
                                                                    ]
                                                                |));
                                                              (* Unsize *)
                                                              M.pointer_coercion
                                                                (M.alloc (|
                                                                  Value.Array
                                                                    [
                                                                      M.call_closure (|
                                                                        M.get_associated_function (|
                                                                          Ty.path
                                                                            "core::fmt::rt::Argument",
                                                                          "new_display",
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path "&")
                                                                              [
                                                                                Ty.path
                                                                                  "alloc::string::String"
                                                                              ]
                                                                          ]
                                                                        |),
                                                                        [ func ]
                                                                      |);
                                                                      M.call_closure (|
                                                                        M.get_associated_function (|
                                                                          Ty.path
                                                                            "core::fmt::rt::Argument",
                                                                          "new_display",
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path "&")
                                                                              [ Ty.path "u128" ]
                                                                          ]
                                                                        |),
                                                                        [ ms ]
                                                                      |)
                                                                    ]
                                                                |))
                                                            ]
                                                          |);
                                                          M.read (| lvl |);
                                                          M.alloc (|
                                                            Value.Tuple
                                                              [
                                                                M.read (|
                                                                  Value.String
                                                                    "delphinus_zkwasm::runtime::host::host_env"
                                                                |);
                                                                M.read (|
                                                                  Value.String
                                                                    "delphinus_zkwasm::runtime::host::host_env"
                                                                |);
                                                                M.read (|
                                                                  Value.String
                                                                    "crates/zkwasm/src/runtime/host/host_env.rs"
                                                                |)
                                                              ]
                                                          |);
                                                          Value.Integer 140;
                                                          Value.Tuple []
                                                        ]
                                                      |)
                                                    |) in
                                                  M.alloc (| Value.Tuple [] |)));
                                              fun γ =>
                                                ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                            ]
                                          |) in
                                        M.alloc (| Value.Tuple [] |)
                                      |)))
                                ]
                              |)
                            | _ => M.impossible (||)
                            end))
                    ]
                  |)
                |)
              |)))
          | _, _ => M.impossible
          end.
        
        Axiom AssociatedFunction_display_time_profile :
          M.IsAssociatedFunction Self "display_time_profile" display_time_profile.
      End Impl_delphinus_zkwasm_runtime_host_host_env_HostEnv.
      
      Module Impl_wasmi_imports_ModuleImportResolver_for_delphinus_zkwasm_runtime_host_host_env_HostEnv.
        Definition Self : Ty.t := Ty.path "delphinus_zkwasm::runtime::host::host_env::HostEnv".
        
        (*
            fn resolve_func(
                &self,
                function_name: &str,
                signature: &wasmi::Signature,
            ) -> Result<wasmi::FuncRef, wasmi::Error> {
                self.external_env
                    .resolve_func(function_name, signature)
                    .or_else(|_| self.internal_env.resolve_func(function_name, signature))
            }
        *)
        Definition resolve_func (τ : list Ty.t) (α : list Value.t) : M :=
          match τ, α with
          | [], [ self; function_name; signature ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              let function_name := M.alloc (| function_name |) in
              let signature := M.alloc (| signature |) in
              M.call_closure (|
                M.get_associated_function (|
                  Ty.apply
                    (Ty.path "core::result::Result")
                    [ Ty.path "wasmi::func::FuncRef"; Ty.path "wasmi::Error" ],
                  "or_else",
                  [
                    Ty.path "wasmi::Error";
                    Ty.function
                      [ Ty.tuple [ Ty.path "wasmi::Error" ] ]
                      (Ty.apply
                        (Ty.path "core::result::Result")
                        [ Ty.path "wasmi::func::FuncRef"; Ty.path "wasmi::Error" ])
                  ]
                |),
                [
                  M.call_closure (|
                    M.get_trait_method (|
                      "wasmi::imports::ModuleImportResolver",
                      Ty.path
                        "delphinus_zkwasm::runtime::host::external_circuit_plugin::ExternalCircuitEnv",
                      [],
                      "resolve_func",
                      []
                    |),
                    [
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "delphinus_zkwasm::runtime::host::host_env::HostEnv",
                        "external_env"
                      |);
                      M.read (| function_name |);
                      M.read (| signature |)
                    ]
                  |);
                  M.closure
                    (fun γ =>
                      ltac:(M.monadic
                        match γ with
                        | [ α0 ] =>
                          M.match_operator (|
                            M.alloc (| α0 |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (M.call_closure (|
                                    M.get_trait_method (|
                                      "wasmi::imports::ModuleImportResolver",
                                      Ty.path
                                        "delphinus_zkwasm::runtime::host::internal_circuit_plugin::InternalCircuitEnv",
                                      [],
                                      "resolve_func",
                                      []
                                    |),
                                    [
                                      M.SubPointer.get_struct_record_field (|
                                        M.read (| self |),
                                        "delphinus_zkwasm::runtime::host::host_env::HostEnv",
                                        "internal_env"
                                      |);
                                      M.read (| function_name |);
                                      M.read (| signature |)
                                    ]
                                  |)))
                            ]
                          |)
                        | _ => M.impossible (||)
                        end))
                ]
              |)))
          | _, _ => M.impossible
          end.
        
        Axiom Implements :
          M.IsTraitInstance
            "wasmi::imports::ModuleImportResolver"
            Self
            (* Trait polymorphic types *) []
            (* Instance *) [ ("resolve_func", InstanceField.Method resolve_func) ].
      End Impl_wasmi_imports_ModuleImportResolver_for_delphinus_zkwasm_runtime_host_host_env_HostEnv.
      
      (* StructRecord
        {
          name := "ExecEnv";
          ty_params := [];
          fields :=
            [
              ("host_env", Ty.path "delphinus_zkwasm::runtime::host::host_env::HostEnv");
              ("observer",
                Ty.apply
                  (Ty.path "alloc::rc::Rc")
                  [
                    Ty.apply
                      (Ty.path "core::cell::RefCell")
                      [ Ty.path "delphinus_zkwasm::runtime::monitor::observer::Observer" ];
                    Ty.path "alloc::alloc::Global"
                  ])
            ];
        } *)
      
      Module Impl_wasmi_host_Externals_for_delphinus_zkwasm_runtime_host_host_env_ExecEnv.
        Definition Self : Ty.t := Ty.path "delphinus_zkwasm::runtime::host::host_env::ExecEnv".
        
        (*
            fn invoke_index(
                &mut self,
                index: usize,
                args: RuntimeArgs,
            ) -> Result<Option<RuntimeValue>, Trap> {
                match self
                    .host_env
                    .cached_lookup
                    .as_ref()
                    .unwrap()
                    .get(&index)
                    .clone()
                {
                    Some(HostFunction {
                        desc: _desc,
                        execution_env: HostFunctionExecutionEnv { ctx, cb },
                    }) => {
                        let mut ctx = ( *ctx).borrow_mut();
                        let ctx = ctx.as_mut();
        
                        #[cfg(feature = "profile")]
                        let start = Instant::now();
        
                        let r = cb(&self.observer.borrow(), ctx, args);
        
                        #[cfg(feature = "profile")]
                        let duration = start.elapsed();
        
                        #[cfg(feature = "profile")]
                        self.host_env
                            .time_profile
                            .entry(_desc.name().to_string())
                            .and_modify(|d| *d += duration.as_millis())
                            .or_insert(duration.as_millis());
        
                        Ok(r)
                    }
                    None => unreachable!(),
                }
            }
        *)
        Definition invoke_index (τ : list Ty.t) (α : list Value.t) : M :=
          match τ, α with
          | [], [ self; index; args ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              let index := M.alloc (| index |) in
              let args := M.alloc (| args |) in
              M.read (|
                M.match_operator (|
                  M.alloc (|
                    M.call_closure (|
                      M.get_trait_method (|
                        "core::clone::Clone",
                        Ty.apply
                          (Ty.path "core::option::Option")
                          [
                            Ty.apply
                              (Ty.path "&")
                              [ Ty.path "delphinus_zkwasm::runtime::host::HostFunction" ]
                          ],
                        [],
                        "clone",
                        []
                      |),
                      [
                        M.alloc (|
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.apply
                                (Ty.path "std::collections::hash::map::HashMap")
                                [
                                  Ty.path "usize";
                                  Ty.path "delphinus_zkwasm::runtime::host::HostFunction";
                                  Ty.path "std::hash::random::RandomState"
                                ],
                              "get",
                              [ Ty.path "usize" ]
                            |),
                            [
                              M.call_closure (|
                                M.get_associated_function (|
                                  Ty.apply
                                    (Ty.path "core::option::Option")
                                    [
                                      Ty.apply
                                        (Ty.path "&")
                                        [
                                          Ty.apply
                                            (Ty.path "std::collections::hash::map::HashMap")
                                            [
                                              Ty.path "usize";
                                              Ty.path
                                                "delphinus_zkwasm::runtime::host::HostFunction";
                                              Ty.path "std::hash::random::RandomState"
                                            ]
                                        ]
                                    ],
                                  "unwrap",
                                  []
                                |),
                                [
                                  M.call_closure (|
                                    M.get_associated_function (|
                                      Ty.apply
                                        (Ty.path "core::option::Option")
                                        [
                                          Ty.apply
                                            (Ty.path "std::collections::hash::map::HashMap")
                                            [
                                              Ty.path "usize";
                                              Ty.path
                                                "delphinus_zkwasm::runtime::host::HostFunction";
                                              Ty.path "std::hash::random::RandomState"
                                            ]
                                        ],
                                      "as_ref",
                                      []
                                    |),
                                    [
                                      M.SubPointer.get_struct_record_field (|
                                        M.SubPointer.get_struct_record_field (|
                                          M.read (| self |),
                                          "delphinus_zkwasm::runtime::host::host_env::ExecEnv",
                                          "host_env"
                                        |),
                                        "delphinus_zkwasm::runtime::host::host_env::HostEnv",
                                        "cached_lookup"
                                      |)
                                    ]
                                  |)
                                ]
                              |);
                              index
                            ]
                          |)
                        |)
                      ]
                    |)
                  |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ0_0 :=
                          M.SubPointer.get_struct_tuple_field (|
                            γ,
                            "core::option::Option::Some",
                            0
                          |) in
                        let γ0_0 := M.read (| γ0_0 |) in
                        let γ2_0 :=
                          M.SubPointer.get_struct_record_field (|
                            γ0_0,
                            "delphinus_zkwasm::runtime::host::HostFunction",
                            "desc"
                          |) in
                        let γ2_1 :=
                          M.SubPointer.get_struct_record_field (|
                            γ0_0,
                            "delphinus_zkwasm::runtime::host::HostFunction",
                            "execution_env"
                          |) in
                        let _desc := M.alloc (| γ2_0 |) in
                        let γ3_0 :=
                          M.SubPointer.get_struct_record_field (|
                            γ2_1,
                            "delphinus_zkwasm::runtime::host::HostFunctionExecutionEnv",
                            "ctx"
                          |) in
                        let γ3_1 :=
                          M.SubPointer.get_struct_record_field (|
                            γ2_1,
                            "delphinus_zkwasm::runtime::host::HostFunctionExecutionEnv",
                            "cb"
                          |) in
                        let ctx := M.alloc (| γ3_0 |) in
                        let cb := M.alloc (| γ3_1 |) in
                        let ctx :=
                          M.alloc (|
                            M.call_closure (|
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path "core::cell::RefCell")
                                  [
                                    Ty.apply
                                      (Ty.path "alloc::boxed::Box")
                                      [
                                        Ty.dyn
                                          [
                                            ("delphinus_zkwasm::runtime::host::ForeignContext::Trait",
                                              [])
                                          ];
                                        Ty.path "alloc::alloc::Global"
                                      ]
                                  ],
                                "borrow_mut",
                                []
                              |),
                              [
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "core::ops::deref::Deref",
                                    Ty.apply
                                      (Ty.path "alloc::rc::Rc")
                                      [
                                        Ty.apply
                                          (Ty.path "core::cell::RefCell")
                                          [
                                            Ty.apply
                                              (Ty.path "alloc::boxed::Box")
                                              [
                                                Ty.dyn
                                                  [
                                                    ("delphinus_zkwasm::runtime::host::ForeignContext::Trait",
                                                      [])
                                                  ];
                                                Ty.path "alloc::alloc::Global"
                                              ]
                                          ];
                                        Ty.path "alloc::alloc::Global"
                                      ],
                                    [],
                                    "deref",
                                    []
                                  |),
                                  [ M.read (| ctx |) ]
                                |)
                              ]
                            |)
                          |) in
                        let ctx :=
                          M.alloc (|
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::convert::AsMut",
                                Ty.apply
                                  (Ty.path "alloc::boxed::Box")
                                  [
                                    Ty.dyn
                                      [
                                        ("delphinus_zkwasm::runtime::host::ForeignContext::Trait",
                                          [])
                                      ];
                                    Ty.path "alloc::alloc::Global"
                                  ],
                                [
                                  Ty.dyn
                                    [ ("delphinus_zkwasm::runtime::host::ForeignContext::Trait", [])
                                    ]
                                ],
                                "as_mut",
                                []
                              |),
                              [
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "core::ops::deref::DerefMut",
                                    Ty.apply
                                      (Ty.path "core::cell::RefMut")
                                      [
                                        Ty.apply
                                          (Ty.path "alloc::boxed::Box")
                                          [
                                            Ty.dyn
                                              [
                                                ("delphinus_zkwasm::runtime::host::ForeignContext::Trait",
                                                  [])
                                              ];
                                            Ty.path "alloc::alloc::Global"
                                          ]
                                      ],
                                    [],
                                    "deref_mut",
                                    []
                                  |),
                                  [ ctx ]
                                |)
                              ]
                            |)
                          |) in
                        let r :=
                          M.alloc (|
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::ops::function::Fn",
                                Ty.dyn
                                  [
                                    ("existential predicate with variables", []);
                                    ("existential predicate with variables", [])
                                  ],
                                [
                                  Ty.tuple
                                    [
                                      Ty.apply
                                        (Ty.path "&")
                                        [
                                          Ty.path
                                            "delphinus_zkwasm::runtime::monitor::observer::Observer"
                                        ];
                                      Ty.apply
                                        (Ty.path "&mut")
                                        [
                                          Ty.dyn
                                            [
                                              ("delphinus_zkwasm::runtime::host::ForeignContext::Trait",
                                                [])
                                            ]
                                        ];
                                      Ty.path "wasmi::host::RuntimeArgs"
                                    ]
                                ],
                                "call",
                                []
                              |),
                              [
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "core::ops::deref::Deref",
                                    Ty.apply
                                      (Ty.path "alloc::rc::Rc")
                                      [
                                        Ty.dyn
                                          [
                                            ("existential predicate with variables", []);
                                            ("existential predicate with variables", [])
                                          ];
                                        Ty.path "alloc::alloc::Global"
                                      ],
                                    [],
                                    "deref",
                                    []
                                  |),
                                  [ M.read (| cb |) ]
                                |);
                                Value.Tuple
                                  [
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::ops::deref::Deref",
                                        Ty.apply
                                          (Ty.path "core::cell::Ref")
                                          [
                                            Ty.path
                                              "delphinus_zkwasm::runtime::monitor::observer::Observer"
                                          ],
                                        [],
                                        "deref",
                                        []
                                      |),
                                      [
                                        M.alloc (|
                                          M.call_closure (|
                                            M.get_associated_function (|
                                              Ty.apply
                                                (Ty.path "core::cell::RefCell")
                                                [
                                                  Ty.path
                                                    "delphinus_zkwasm::runtime::monitor::observer::Observer"
                                                ],
                                              "borrow",
                                              []
                                            |),
                                            [
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "core::ops::deref::Deref",
                                                  Ty.apply
                                                    (Ty.path "alloc::rc::Rc")
                                                    [
                                                      Ty.apply
                                                        (Ty.path "core::cell::RefCell")
                                                        [
                                                          Ty.path
                                                            "delphinus_zkwasm::runtime::monitor::observer::Observer"
                                                        ];
                                                      Ty.path "alloc::alloc::Global"
                                                    ],
                                                  [],
                                                  "deref",
                                                  []
                                                |),
                                                [
                                                  M.SubPointer.get_struct_record_field (|
                                                    M.read (| self |),
                                                    "delphinus_zkwasm::runtime::host::host_env::ExecEnv",
                                                    "observer"
                                                  |)
                                                ]
                                              |)
                                            ]
                                          |)
                                        |)
                                      ]
                                    |);
                                    (* Unsize *) M.pointer_coercion (M.read (| ctx |));
                                    M.read (| args |)
                                  ]
                              ]
                            |)
                          |) in
                        M.alloc (|
                          Value.StructTuple "core::result::Result::Ok" [ M.read (| r |) ]
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (M.alloc (|
                          M.never_to_any (|
                            M.call_closure (|
                              M.get_function (| "core::panicking::panic", [] |),
                              [ M.read (| Value.String "internal error: entered unreachable code" |)
                              ]
                            |)
                          |)
                        |)))
                  ]
                |)
              |)))
          | _, _ => M.impossible
          end.
        
        Axiom Implements :
          M.IsTraitInstance
            "wasmi::host::Externals"
            Self
            (* Trait polymorphic types *) []
            (* Instance *) [ ("invoke_index", InstanceField.Method invoke_index) ].
      End Impl_wasmi_host_Externals_for_delphinus_zkwasm_runtime_host_host_env_ExecEnv.
    End host_env.
  End host.
End runtime.
