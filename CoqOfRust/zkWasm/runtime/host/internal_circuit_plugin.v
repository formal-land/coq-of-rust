(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module runtime.
  Module host.
    Module internal_circuit_plugin.
      (* StructRecord
        {
          name := "ForeignOp";
          ty_params := [];
          fields :=
            [
              ("index", Ty.apply (Ty.path "core::option::Option") [ Ty.path "usize" ]);
              ("index_within_plugin", Ty.path "usize");
              ("sig", Ty.path "specs::host_function::Signature");
              ("plugin", Ty.path "specs::host_function::HostPlugin");
              ("cb",
                Ty.apply
                  (Ty.path "alloc::rc::Rc")
                  [
                    Ty.dyn
                      [
                        ("existential predicate with variables", []);
                        ("existential predicate with variables", [])
                      ];
                    Ty.path "alloc::alloc::Global"
                  ])
            ];
        } *)
      
      (* StructRecord
        {
          name := "InternalCircuitEnv";
          ty_params := [];
          fields :=
            [
              ("plugins",
                Ty.apply
                  (Ty.path "std::collections::hash::map::HashMap")
                  [
                    Ty.path "specs::host_function::HostPlugin";
                    Ty.path "delphinus_zkwasm::runtime::host::ForeignPlugin";
                    Ty.path "std::hash::random::RandomState"
                  ]);
              ("functions",
                Ty.apply
                  (Ty.path "std::collections::hash::map::HashMap")
                  [
                    Ty.path "alloc::string::String";
                    Ty.path "delphinus_zkwasm::runtime::host::internal_circuit_plugin::ForeignOp";
                    Ty.path "std::hash::random::RandomState"
                  ]);
              ("finalized",
                Ty.apply
                  (Ty.path "alloc::rc::Rc")
                  [
                    Ty.apply (Ty.path "core::cell::RefCell") [ Ty.path "bool" ];
                    Ty.path "alloc::alloc::Global"
                  ])
            ];
        } *)
      
      Module Impl_delphinus_zkwasm_runtime_host_internal_circuit_plugin_InternalCircuitEnv.
        Definition Self : Ty.t :=
          Ty.path "delphinus_zkwasm::runtime::host::internal_circuit_plugin::InternalCircuitEnv".
        
        (*
            pub(super) fn new(finalized: Rc<RefCell<bool>>) -> Self {
                Self {
                    plugins: HashMap::new(),
                    functions: HashMap::new(),
                    finalized,
                }
            }
        *)
        Definition new (τ : list Ty.t) (α : list Value.t) : M :=
          match τ, α with
          | [], [ finalized ] =>
            ltac:(M.monadic
              (let finalized := M.alloc (| finalized |) in
              Value.StructRecord
                "delphinus_zkwasm::runtime::host::internal_circuit_plugin::InternalCircuitEnv"
                [
                  ("plugins",
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path "std::collections::hash::map::HashMap")
                          [
                            Ty.path "specs::host_function::HostPlugin";
                            Ty.path "delphinus_zkwasm::runtime::host::ForeignPlugin";
                            Ty.path "std::hash::random::RandomState"
                          ],
                        "new",
                        []
                      |),
                      []
                    |));
                  ("functions",
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path "std::collections::hash::map::HashMap")
                          [
                            Ty.path "alloc::string::String";
                            Ty.path
                              "delphinus_zkwasm::runtime::host::internal_circuit_plugin::ForeignOp";
                            Ty.path "std::hash::random::RandomState"
                          ],
                        "new",
                        []
                      |),
                      []
                    |));
                  ("finalized", M.read (| finalized |))
                ]))
          | _, _ => M.impossible
          end.
        
        Axiom AssociatedFunction_new : M.IsAssociatedFunction Self "new" new.
        
        (*
            pub(crate) fn get_context_of_plugin(
                &self,
                plugin: HostPlugin,
            ) -> Rc<RefCell<Box<dyn ForeignContext>>> {
                self.plugins.get(&plugin).unwrap().ctx.clone()
            }
        *)
        Definition get_context_of_plugin (τ : list Ty.t) (α : list Value.t) : M :=
          match τ, α with
          | [], [ self; plugin ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              let plugin := M.alloc (| plugin |) in
              M.call_closure (|
                M.get_trait_method (|
                  "core::clone::Clone",
                  Ty.apply
                    (Ty.path "alloc::rc::Rc")
                    [
                      Ty.apply
                        (Ty.path "core::cell::RefCell")
                        [
                          Ty.apply
                            (Ty.path "alloc::boxed::Box")
                            [
                              Ty.dyn
                                [ ("delphinus_zkwasm::runtime::host::ForeignContext::Trait", []) ];
                              Ty.path "alloc::alloc::Global"
                            ]
                        ];
                      Ty.path "alloc::alloc::Global"
                    ],
                  [],
                  "clone",
                  []
                |),
                [
                  M.SubPointer.get_struct_record_field (|
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path "core::option::Option")
                          [
                            Ty.apply
                              (Ty.path "&")
                              [ Ty.path "delphinus_zkwasm::runtime::host::ForeignPlugin" ]
                          ],
                        "unwrap",
                        []
                      |),
                      [
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path "std::collections::hash::map::HashMap")
                              [
                                Ty.path "specs::host_function::HostPlugin";
                                Ty.path "delphinus_zkwasm::runtime::host::ForeignPlugin";
                                Ty.path "std::hash::random::RandomState"
                              ],
                            "get",
                            [ Ty.path "specs::host_function::HostPlugin" ]
                          |),
                          [
                            M.SubPointer.get_struct_record_field (|
                              M.read (| self |),
                              "delphinus_zkwasm::runtime::host::internal_circuit_plugin::InternalCircuitEnv",
                              "plugins"
                            |);
                            plugin
                          ]
                        |)
                      ]
                    |),
                    "delphinus_zkwasm::runtime::host::ForeignPlugin",
                    "ctx"
                  |)
                ]
              |)))
          | _, _ => M.impossible
          end.
        
        Axiom AssociatedFunction_get_context_of_plugin :
          M.IsAssociatedFunction Self "get_context_of_plugin" get_context_of_plugin.
        
        (*
            pub fn register_plugin(
                &mut self,
                name: &str,
                plugin: HostPlugin,
                context: Box<dyn ForeignContext>,
            ) {
                let _ = self.plugins.insert(
                    plugin,
                    ForeignPlugin {
                        name: name.to_string(),
                        ctx: Rc::new(RefCell::new(context)),
                    },
                );
            }
        *)
        Definition register_plugin (τ : list Ty.t) (α : list Value.t) : M :=
          match τ, α with
          | [], [ self; name; plugin; context ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              let name := M.alloc (| name |) in
              let plugin := M.alloc (| plugin |) in
              let context := M.alloc (| context |) in
              M.read (|
                M.match_operator (|
                  M.alloc (|
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path "std::collections::hash::map::HashMap")
                          [
                            Ty.path "specs::host_function::HostPlugin";
                            Ty.path "delphinus_zkwasm::runtime::host::ForeignPlugin";
                            Ty.path "std::hash::random::RandomState"
                          ],
                        "insert",
                        []
                      |),
                      [
                        M.SubPointer.get_struct_record_field (|
                          M.read (| self |),
                          "delphinus_zkwasm::runtime::host::internal_circuit_plugin::InternalCircuitEnv",
                          "plugins"
                        |);
                        M.read (| plugin |);
                        Value.StructRecord
                          "delphinus_zkwasm::runtime::host::ForeignPlugin"
                          [
                            ("name",
                              M.call_closure (|
                                M.get_trait_method (|
                                  "alloc::string::ToString",
                                  Ty.path "str",
                                  [],
                                  "to_string",
                                  []
                                |),
                                [ M.read (| name |) ]
                              |));
                            ("ctx",
                              M.call_closure (|
                                M.get_associated_function (|
                                  Ty.apply
                                    (Ty.path "alloc::rc::Rc")
                                    [
                                      Ty.apply
                                        (Ty.path "core::cell::RefCell")
                                        [
                                          Ty.apply
                                            (Ty.path "alloc::boxed::Box")
                                            [
                                              Ty.dyn
                                                [
                                                  ("delphinus_zkwasm::runtime::host::ForeignContext::Trait",
                                                    [])
                                                ];
                                              Ty.path "alloc::alloc::Global"
                                            ]
                                        ];
                                      Ty.path "alloc::alloc::Global"
                                    ],
                                  "new",
                                  []
                                |),
                                [
                                  (* Unsize *)
                                  M.pointer_coercion
                                    (M.call_closure (|
                                      M.get_associated_function (|
                                        Ty.apply
                                          (Ty.path "core::cell::RefCell")
                                          [
                                            Ty.apply
                                              (Ty.path "alloc::boxed::Box")
                                              [
                                                Ty.dyn
                                                  [
                                                    ("delphinus_zkwasm::runtime::host::ForeignContext::Trait",
                                                      [])
                                                  ];
                                                Ty.path "alloc::alloc::Global"
                                              ]
                                          ],
                                        "new",
                                        []
                                      |),
                                      [ (* Unsize *) M.pointer_coercion (M.read (| context |)) ]
                                    |))
                                ]
                              |))
                          ]
                      ]
                    |)
                  |),
                  [ fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |))) ]
                |)
              |)))
          | _, _ => M.impossible
          end.
        
        Axiom AssociatedFunction_register_plugin :
          M.IsAssociatedFunction Self "register_plugin" register_plugin.
        
        (*
            pub fn register_function(
                &mut self,
                function_name: &str,
                sig: Signature,
                plugin: HostPlugin,
                index_within_plugin: usize,
                cb: Rc<dyn Fn(&Observer, &mut dyn ForeignContext, RuntimeArgs) -> Option<RuntimeValue>>,
            ) {
                assert!(!*self.finalized.borrow());
        
                self.functions.insert(
                    function_name.to_owned(),
                    ForeignOp {
                        index: None,
                        index_within_plugin,
                        sig,
                        plugin,
                        cb,
                    },
                );
            }
        *)
        Definition register_function (τ : list Ty.t) (α : list Value.t) : M :=
          match τ, α with
          | [], [ self; function_name; sig; plugin; index_within_plugin; cb ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              let function_name := M.alloc (| function_name |) in
              let sig := M.alloc (| sig |) in
              let plugin := M.alloc (| plugin |) in
              let index_within_plugin := M.alloc (| index_within_plugin |) in
              let cb := M.alloc (| cb |) in
              M.read (|
                let _ :=
                  M.match_operator (|
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                UnOp.Pure.not
                                  (UnOp.Pure.not
                                    (M.read (|
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "core::ops::deref::Deref",
                                          Ty.apply (Ty.path "core::cell::Ref") [ Ty.path "bool" ],
                                          [],
                                          "deref",
                                          []
                                        |),
                                        [
                                          M.alloc (|
                                            M.call_closure (|
                                              M.get_associated_function (|
                                                Ty.apply
                                                  (Ty.path "core::cell::RefCell")
                                                  [ Ty.path "bool" ],
                                                "borrow",
                                                []
                                              |),
                                              [
                                                M.call_closure (|
                                                  M.get_trait_method (|
                                                    "core::ops::deref::Deref",
                                                    Ty.apply
                                                      (Ty.path "alloc::rc::Rc")
                                                      [
                                                        Ty.apply
                                                          (Ty.path "core::cell::RefCell")
                                                          [ Ty.path "bool" ];
                                                        Ty.path "alloc::alloc::Global"
                                                      ],
                                                    [],
                                                    "deref",
                                                    []
                                                  |),
                                                  [
                                                    M.SubPointer.get_struct_record_field (|
                                                      M.read (| self |),
                                                      "delphinus_zkwasm::runtime::host::internal_circuit_plugin::InternalCircuitEnv",
                                                      "finalized"
                                                    |)
                                                  ]
                                                |)
                                              ]
                                            |)
                                          |)
                                        ]
                                      |)
                                    |)))
                              |)) in
                          let _ :=
                            M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.call_closure (|
                                M.get_function (| "core::panicking::panic", [] |),
                                [
                                  M.read (|
                                    Value.String "assertion failed: !*self.finalized.borrow()"
                                  |)
                                ]
                              |)
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                let _ :=
                  M.alloc (|
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path "std::collections::hash::map::HashMap")
                          [
                            Ty.path "alloc::string::String";
                            Ty.path
                              "delphinus_zkwasm::runtime::host::internal_circuit_plugin::ForeignOp";
                            Ty.path "std::hash::random::RandomState"
                          ],
                        "insert",
                        []
                      |),
                      [
                        M.SubPointer.get_struct_record_field (|
                          M.read (| self |),
                          "delphinus_zkwasm::runtime::host::internal_circuit_plugin::InternalCircuitEnv",
                          "functions"
                        |);
                        M.call_closure (|
                          M.get_trait_method (|
                            "alloc::borrow::ToOwned",
                            Ty.path "str",
                            [],
                            "to_owned",
                            []
                          |),
                          [ M.read (| function_name |) ]
                        |);
                        Value.StructRecord
                          "delphinus_zkwasm::runtime::host::internal_circuit_plugin::ForeignOp"
                          [
                            ("index", Value.StructTuple "core::option::Option::None" []);
                            ("index_within_plugin", M.read (| index_within_plugin |));
                            ("sig", M.read (| sig |));
                            ("plugin", M.read (| plugin |));
                            ("cb", (* Unsize *) M.pointer_coercion (M.read (| cb |)))
                          ]
                      ]
                    |)
                  |) in
                M.alloc (| Value.Tuple [] |)
              |)))
          | _, _ => M.impossible
          end.
        
        Axiom AssociatedFunction_register_function :
          M.IsAssociatedFunction Self "register_function" register_function.
      End Impl_delphinus_zkwasm_runtime_host_internal_circuit_plugin_InternalCircuitEnv.
      
      Module Impl_wasmi_imports_ModuleImportResolver_for_delphinus_zkwasm_runtime_host_internal_circuit_plugin_InternalCircuitEnv.
        Definition Self : Ty.t :=
          Ty.path "delphinus_zkwasm::runtime::host::internal_circuit_plugin::InternalCircuitEnv".
        
        (*
            fn resolve_func(
                &self,
                function_name: &str,
                signature: &wasmi::Signature,
            ) -> Result<wasmi::FuncRef, wasmi::Error> {
                if let Some(ForeignOp { index, sig, .. }) = self.functions.get(function_name) {
                    if *sig == signature.clone().into() {
                        Ok(FuncInstance::alloc_host(
                            signature.clone(),
                            index.expect("Unsolved host function index."),
                        ))
                    } else {
                        Err(wasmi::Error::Instantiation(format!("Signature not match",)))
                    }
                } else {
                    Err(wasmi::Error::Instantiation(format!(
                        "Export {} not found",
                        function_name
                    )))
                }
            }
        *)
        Definition resolve_func (τ : list Ty.t) (α : list Value.t) : M :=
          match τ, α with
          | [], [ self; function_name; signature ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              let function_name := M.alloc (| function_name |) in
              let signature := M.alloc (| signature |) in
              M.read (|
                M.match_operator (|
                  M.alloc (| Value.Tuple [] |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ :=
                          M.alloc (|
                            M.call_closure (|
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path "std::collections::hash::map::HashMap")
                                  [
                                    Ty.path "alloc::string::String";
                                    Ty.path
                                      "delphinus_zkwasm::runtime::host::internal_circuit_plugin::ForeignOp";
                                    Ty.path "std::hash::random::RandomState"
                                  ],
                                "get",
                                [ Ty.path "str" ]
                              |),
                              [
                                M.SubPointer.get_struct_record_field (|
                                  M.read (| self |),
                                  "delphinus_zkwasm::runtime::host::internal_circuit_plugin::InternalCircuitEnv",
                                  "functions"
                                |);
                                M.read (| function_name |)
                              ]
                            |)
                          |) in
                        let γ0_0 :=
                          M.SubPointer.get_struct_tuple_field (|
                            γ,
                            "core::option::Option::Some",
                            0
                          |) in
                        let γ0_0 := M.read (| γ0_0 |) in
                        let γ2_0 :=
                          M.SubPointer.get_struct_record_field (|
                            γ0_0,
                            "delphinus_zkwasm::runtime::host::internal_circuit_plugin::ForeignOp",
                            "index"
                          |) in
                        let γ2_1 :=
                          M.SubPointer.get_struct_record_field (|
                            γ0_0,
                            "delphinus_zkwasm::runtime::host::internal_circuit_plugin::ForeignOp",
                            "sig"
                          |) in
                        let index := M.alloc (| γ2_0 |) in
                        let sig := M.alloc (| γ2_1 |) in
                        M.match_operator (|
                          M.alloc (| Value.Tuple [] |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ :=
                                  M.use
                                    (M.alloc (|
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "core::cmp::PartialEq",
                                          Ty.path "specs::host_function::Signature",
                                          [ Ty.path "specs::host_function::Signature" ],
                                          "eq",
                                          []
                                        |),
                                        [
                                          M.read (| sig |);
                                          M.alloc (|
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "core::convert::Into",
                                                Ty.path "wasmi::types::Signature",
                                                [ Ty.path "specs::host_function::Signature" ],
                                                "into",
                                                []
                                              |),
                                              [
                                                M.call_closure (|
                                                  M.get_trait_method (|
                                                    "core::clone::Clone",
                                                    Ty.path "wasmi::types::Signature",
                                                    [],
                                                    "clone",
                                                    []
                                                  |),
                                                  [ M.read (| signature |) ]
                                                |)
                                              ]
                                            |)
                                          |)
                                        ]
                                      |)
                                    |)) in
                                let _ :=
                                  M.is_constant_or_break_match (|
                                    M.read (| γ |),
                                    Value.Bool true
                                  |) in
                                M.alloc (|
                                  Value.StructTuple
                                    "core::result::Result::Ok"
                                    [
                                      M.call_closure (|
                                        M.get_associated_function (|
                                          Ty.path "wasmi::func::FuncInstance",
                                          "alloc_host",
                                          []
                                        |),
                                        [
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "core::clone::Clone",
                                              Ty.path "wasmi::types::Signature",
                                              [],
                                              "clone",
                                              []
                                            |),
                                            [ M.read (| signature |) ]
                                          |);
                                          M.call_closure (|
                                            M.get_associated_function (|
                                              Ty.apply
                                                (Ty.path "core::option::Option")
                                                [ Ty.path "usize" ],
                                              "expect",
                                              []
                                            |),
                                            [
                                              M.read (| M.read (| index |) |);
                                              M.read (|
                                                Value.String "Unsolved host function index."
                                              |)
                                            ]
                                          |)
                                        ]
                                      |)
                                    ]
                                |)));
                            fun γ =>
                              ltac:(M.monadic
                                (M.alloc (|
                                  Value.StructTuple
                                    "core::result::Result::Err"
                                    [
                                      Value.StructTuple
                                        "wasmi::Error::Instantiation"
                                        [
                                          M.read (|
                                            let res :=
                                              M.alloc (|
                                                M.call_closure (|
                                                  M.get_function (| "alloc::fmt::format", [] |),
                                                  [
                                                    M.call_closure (|
                                                      M.get_associated_function (|
                                                        Ty.path "core::fmt::Arguments",
                                                        "new_const",
                                                        []
                                                      |),
                                                      [
                                                        (* Unsize *)
                                                        M.pointer_coercion
                                                          (M.alloc (|
                                                            Value.Array
                                                              [
                                                                M.read (|
                                                                  Value.String "Signature not match"
                                                                |)
                                                              ]
                                                          |))
                                                      ]
                                                    |)
                                                  ]
                                                |)
                                              |) in
                                            res
                                          |)
                                        ]
                                    ]
                                |)))
                          ]
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (M.alloc (|
                          Value.StructTuple
                            "core::result::Result::Err"
                            [
                              Value.StructTuple
                                "wasmi::Error::Instantiation"
                                [
                                  M.read (|
                                    let res :=
                                      M.alloc (|
                                        M.call_closure (|
                                          M.get_function (| "alloc::fmt::format", [] |),
                                          [
                                            M.call_closure (|
                                              M.get_associated_function (|
                                                Ty.path "core::fmt::Arguments",
                                                "new_v1",
                                                []
                                              |),
                                              [
                                                (* Unsize *)
                                                M.pointer_coercion
                                                  (M.alloc (|
                                                    Value.Array
                                                      [
                                                        M.read (| Value.String "Export " |);
                                                        M.read (| Value.String " not found" |)
                                                      ]
                                                  |));
                                                (* Unsize *)
                                                M.pointer_coercion
                                                  (M.alloc (|
                                                    Value.Array
                                                      [
                                                        M.call_closure (|
                                                          M.get_associated_function (|
                                                            Ty.path "core::fmt::rt::Argument",
                                                            "new_display",
                                                            [
                                                              Ty.apply
                                                                (Ty.path "&")
                                                                [ Ty.path "str" ]
                                                            ]
                                                          |),
                                                          [ function_name ]
                                                        |)
                                                      ]
                                                  |))
                                              ]
                                            |)
                                          ]
                                        |)
                                      |) in
                                    res
                                  |)
                                ]
                            ]
                        |)))
                  ]
                |)
              |)))
          | _, _ => M.impossible
          end.
        
        Axiom Implements :
          M.IsTraitInstance
            "wasmi::imports::ModuleImportResolver"
            Self
            (* Trait polymorphic types *) []
            (* Instance *) [ ("resolve_func", InstanceField.Method resolve_func) ].
      End Impl_wasmi_imports_ModuleImportResolver_for_delphinus_zkwasm_runtime_host_internal_circuit_plugin_InternalCircuitEnv.
    End internal_circuit_plugin.
  End host.
End runtime.
