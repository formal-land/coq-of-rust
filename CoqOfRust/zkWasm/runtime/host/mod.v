(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module runtime.
  Module host.
    (* Trait *)
    (* Empty module 'MatchForeignOpSignature' *)
    
    Module Impl_delphinus_zkwasm_runtime_host_MatchForeignOpSignature_for_specs_external_host_call_table_ExternalHostCallSignature.
      Definition Self : Ty.t :=
        Ty.path "specs::external_host_call_table::ExternalHostCallSignature".
      
      (*
          fn match_wasmi_signature(&self, signature: &Signature) -> bool {
              match self {
                  ExternalHostCallSignature::Argument => {
                      signature.params().len() == 1
                          && signature.params()[0] == wasmi::ValueType::I64
                          && signature.return_type() == None
                  }
                  ExternalHostCallSignature::Return => {
                      signature.params().len() == 0
                          && signature.return_type() == Some(wasmi::ValueType::I64)
                  }
              }
          }
      *)
      Definition match_wasmi_signature (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ self; signature ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let signature := M.alloc (| signature |) in
            M.read (|
              M.match_operator (|
                self,
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      M.alloc (|
                        LogicalOp.and (|
                          LogicalOp.and (|
                            BinOp.Pure.eq
                              (M.call_closure (|
                                M.get_associated_function (|
                                  Ty.apply
                                    (Ty.path "slice")
                                    [ Ty.path "wasmi_core::value::ValueType" ],
                                  "len",
                                  []
                                |),
                                [
                                  M.call_closure (|
                                    M.get_associated_function (|
                                      Ty.path "wasmi::types::Signature",
                                      "params",
                                      []
                                    |),
                                    [ M.read (| signature |) ]
                                  |)
                                ]
                              |))
                              (Value.Integer 1),
                            ltac:(M.monadic
                              (M.call_closure (|
                                M.get_trait_method (|
                                  "core::cmp::PartialEq",
                                  Ty.path "wasmi_core::value::ValueType",
                                  [ Ty.path "wasmi_core::value::ValueType" ],
                                  "eq",
                                  []
                                |),
                                [
                                  M.SubPointer.get_array_field (|
                                    M.call_closure (|
                                      M.get_associated_function (|
                                        Ty.path "wasmi::types::Signature",
                                        "params",
                                        []
                                      |),
                                      [ M.read (| signature |) ]
                                    |),
                                    M.alloc (| Value.Integer 0 |)
                                  |);
                                  M.alloc (|
                                    Value.StructTuple "wasmi_core::value::ValueType::I64" []
                                  |)
                                ]
                              |)))
                          |),
                          ltac:(M.monadic
                            (M.call_closure (|
                              M.get_trait_method (|
                                "core::cmp::PartialEq",
                                Ty.apply
                                  (Ty.path "core::option::Option")
                                  [ Ty.path "wasmi_core::value::ValueType" ],
                                [
                                  Ty.apply
                                    (Ty.path "core::option::Option")
                                    [ Ty.path "wasmi_core::value::ValueType" ]
                                ],
                                "eq",
                                []
                              |),
                              [
                                M.alloc (|
                                  M.call_closure (|
                                    M.get_associated_function (|
                                      Ty.path "wasmi::types::Signature",
                                      "return_type",
                                      []
                                    |),
                                    [ M.read (| signature |) ]
                                  |)
                                |);
                                M.alloc (| Value.StructTuple "core::option::Option::None" [] |)
                              ]
                            |)))
                        |)
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      M.alloc (|
                        LogicalOp.and (|
                          BinOp.Pure.eq
                            (M.call_closure (|
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path "slice")
                                  [ Ty.path "wasmi_core::value::ValueType" ],
                                "len",
                                []
                              |),
                              [
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.path "wasmi::types::Signature",
                                    "params",
                                    []
                                  |),
                                  [ M.read (| signature |) ]
                                |)
                              ]
                            |))
                            (Value.Integer 0),
                          ltac:(M.monadic
                            (M.call_closure (|
                              M.get_trait_method (|
                                "core::cmp::PartialEq",
                                Ty.apply
                                  (Ty.path "core::option::Option")
                                  [ Ty.path "wasmi_core::value::ValueType" ],
                                [
                                  Ty.apply
                                    (Ty.path "core::option::Option")
                                    [ Ty.path "wasmi_core::value::ValueType" ]
                                ],
                                "eq",
                                []
                              |),
                              [
                                M.alloc (|
                                  M.call_closure (|
                                    M.get_associated_function (|
                                      Ty.path "wasmi::types::Signature",
                                      "return_type",
                                      []
                                    |),
                                    [ M.read (| signature |) ]
                                  |)
                                |);
                                M.alloc (|
                                  Value.StructTuple
                                    "core::option::Option::Some"
                                    [ Value.StructTuple "wasmi_core::value::ValueType::I64" [] ]
                                |)
                              ]
                            |)))
                        |)
                      |)))
                ]
              |)
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "delphinus_zkwasm::runtime::host::MatchForeignOpSignature"
          Self
          (* Trait polymorphic types *) []
          (* Instance *) [ ("match_wasmi_signature", InstanceField.Method match_wasmi_signature) ].
    End Impl_delphinus_zkwasm_runtime_host_MatchForeignOpSignature_for_specs_external_host_call_table_ExternalHostCallSignature.
    
    (* StructRecord
      {
        name := "ForeignStatics";
        ty_params := [];
        fields := [ ("used_round", Ty.path "usize"); ("max_round", Ty.path "usize") ];
      } *)
    
    Module Impl_core_clone_Clone_for_delphinus_zkwasm_runtime_host_ForeignStatics.
      Definition Self : Ty.t := Ty.path "delphinus_zkwasm::runtime::host::ForeignStatics".
      
      (* Clone *)
      Definition clone (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            Value.StructRecord
              "delphinus_zkwasm::runtime::host::ForeignStatics"
              [
                ("used_round",
                  M.call_closure (|
                    M.get_trait_method (| "core::clone::Clone", Ty.path "usize", [], "clone", [] |),
                    [
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "delphinus_zkwasm::runtime::host::ForeignStatics",
                        "used_round"
                      |)
                    ]
                  |));
                ("max_round",
                  M.call_closure (|
                    M.get_trait_method (| "core::clone::Clone", Ty.path "usize", [], "clone", [] |),
                    [
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "delphinus_zkwasm::runtime::host::ForeignStatics",
                        "max_round"
                      |)
                    ]
                  |))
              ]))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::clone::Clone"
          Self
          (* Trait polymorphic types *) []
          (* Instance *) [ ("clone", InstanceField.Method clone) ].
    End Impl_core_clone_Clone_for_delphinus_zkwasm_runtime_host_ForeignStatics.
    
    Module Impl_core_fmt_Debug_for_delphinus_zkwasm_runtime_host_ForeignStatics.
      Definition Self : Ty.t := Ty.path "delphinus_zkwasm::runtime::host::ForeignStatics".
      
      (* Debug *)
      Definition fmt (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ self; f ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let f := M.alloc (| f |) in
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "core::fmt::Formatter",
                "debug_struct_field2_finish",
                []
              |),
              [
                M.read (| f |);
                M.read (| Value.String "ForeignStatics" |);
                M.read (| Value.String "used_round" |);
                (* Unsize *)
                M.pointer_coercion
                  (M.SubPointer.get_struct_record_field (|
                    M.read (| self |),
                    "delphinus_zkwasm::runtime::host::ForeignStatics",
                    "used_round"
                  |));
                M.read (| Value.String "max_round" |);
                (* Unsize *)
                M.pointer_coercion
                  (M.alloc (|
                    M.SubPointer.get_struct_record_field (|
                      M.read (| self |),
                      "delphinus_zkwasm::runtime::host::ForeignStatics",
                      "max_round"
                    |)
                  |))
              ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::fmt::Debug"
          Self
          (* Trait polymorphic types *) []
          (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
    End Impl_core_fmt_Debug_for_delphinus_zkwasm_runtime_host_ForeignStatics.
    
    (* Trait *)
    Module ForeignContext.
      Definition get_statics (Self : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            Value.StructTuple "core::option::Option::None" []))
        | _, _ => M.impossible
        end.
      
      Axiom ProvidedMethod_get_statics :
        M.IsProvidedMethod
          "delphinus_zkwasm::runtime::host::ForeignContext"
          "get_statics"
          get_statics.
      Definition expose_public_inputs_and_outputs
          (Self : Ty.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        match τ, α with
        | [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.never_to_any (|
              M.call_closure (|
                M.get_function (| "core::panicking::panic", [] |),
                [ M.read (| Value.String "internal error: entered unreachable code" |) ]
              |)
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom ProvidedMethod_expose_public_inputs_and_outputs :
        M.IsProvidedMethod
          "delphinus_zkwasm::runtime::host::ForeignContext"
          "expose_public_inputs_and_outputs"
          expose_public_inputs_and_outputs.
      Definition expose_outputs (Self : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.never_to_any (|
              M.call_closure (|
                M.get_function (| "core::panicking::panic", [] |),
                [ M.read (| Value.String "internal error: entered unreachable code" |) ]
              |)
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom ProvidedMethod_expose_outputs :
        M.IsProvidedMethod
          "delphinus_zkwasm::runtime::host::ForeignContext"
          "expose_outputs"
          expose_outputs.
      Definition expose_context_outputs (Self : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.never_to_any (|
              M.call_closure (|
                M.get_function (| "core::panicking::panic", [] |),
                [ M.read (| Value.String "internal error: entered unreachable code" |) ]
              |)
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom ProvidedMethod_expose_context_outputs :
        M.IsProvidedMethod
          "delphinus_zkwasm::runtime::host::ForeignContext"
          "expose_context_outputs"
          expose_context_outputs.
    End ForeignContext.
    
    (* StructRecord
      {
        name := "ForeignPlugin";
        ty_params := [];
        fields :=
          [
            ("name", Ty.path "alloc::string::String");
            ("ctx",
              Ty.apply
                (Ty.path "alloc::rc::Rc")
                [
                  Ty.apply
                    (Ty.path "core::cell::RefCell")
                    [
                      Ty.apply
                        (Ty.path "alloc::boxed::Box")
                        [
                          Ty.dyn [ ("delphinus_zkwasm::runtime::host::ForeignContext::Trait", []) ];
                          Ty.path "alloc::alloc::Global"
                        ]
                    ];
                  Ty.path "alloc::alloc::Global"
                ])
          ];
      } *)
    
    (* StructRecord
      {
        name := "HostFunctionExecutionEnv";
        ty_params := [];
        fields :=
          [
            ("ctx",
              Ty.apply
                (Ty.path "alloc::rc::Rc")
                [
                  Ty.apply
                    (Ty.path "core::cell::RefCell")
                    [
                      Ty.apply
                        (Ty.path "alloc::boxed::Box")
                        [
                          Ty.dyn [ ("delphinus_zkwasm::runtime::host::ForeignContext::Trait", []) ];
                          Ty.path "alloc::alloc::Global"
                        ]
                    ];
                  Ty.path "alloc::alloc::Global"
                ]);
            ("cb",
              Ty.apply
                (Ty.path "alloc::rc::Rc")
                [
                  Ty.dyn
                    [
                      ("existential predicate with variables", []);
                      ("existential predicate with variables", [])
                    ];
                  Ty.path "alloc::alloc::Global"
                ])
          ];
      } *)
    
    Module Impl_core_clone_Clone_for_delphinus_zkwasm_runtime_host_HostFunctionExecutionEnv.
      Definition Self : Ty.t := Ty.path "delphinus_zkwasm::runtime::host::HostFunctionExecutionEnv".
      
      (* Clone *)
      Definition clone (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            Value.StructRecord
              "delphinus_zkwasm::runtime::host::HostFunctionExecutionEnv"
              [
                ("ctx",
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.apply
                        (Ty.path "alloc::rc::Rc")
                        [
                          Ty.apply
                            (Ty.path "core::cell::RefCell")
                            [
                              Ty.apply
                                (Ty.path "alloc::boxed::Box")
                                [
                                  Ty.dyn
                                    [ ("delphinus_zkwasm::runtime::host::ForeignContext::Trait", [])
                                    ];
                                  Ty.path "alloc::alloc::Global"
                                ]
                            ];
                          Ty.path "alloc::alloc::Global"
                        ],
                      [],
                      "clone",
                      []
                    |),
                    [
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "delphinus_zkwasm::runtime::host::HostFunctionExecutionEnv",
                        "ctx"
                      |)
                    ]
                  |));
                ("cb",
                  (* Unsize *)
                  M.pointer_coercion
                    (M.call_closure (|
                      M.get_trait_method (|
                        "core::clone::Clone",
                        Ty.apply
                          (Ty.path "alloc::rc::Rc")
                          [
                            Ty.dyn
                              [
                                ("existential predicate with variables", []);
                                ("existential predicate with variables", [])
                              ];
                            Ty.path "alloc::alloc::Global"
                          ],
                        [],
                        "clone",
                        []
                      |),
                      [
                        M.SubPointer.get_struct_record_field (|
                          M.read (| self |),
                          "delphinus_zkwasm::runtime::host::HostFunctionExecutionEnv",
                          "cb"
                        |)
                      ]
                    |)))
              ]))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::clone::Clone"
          Self
          (* Trait polymorphic types *) []
          (* Instance *) [ ("clone", InstanceField.Method clone) ].
    End Impl_core_clone_Clone_for_delphinus_zkwasm_runtime_host_HostFunctionExecutionEnv.
    
    (* StructRecord
      {
        name := "HostFunction";
        ty_params := [];
        fields :=
          [
            ("desc", Ty.path "specs::host_function::HostFunctionDesc");
            ("execution_env", Ty.path "delphinus_zkwasm::runtime::host::HostFunctionExecutionEnv")
          ];
      } *)
    
    Module Impl_core_clone_Clone_for_delphinus_zkwasm_runtime_host_HostFunction.
      Definition Self : Ty.t := Ty.path "delphinus_zkwasm::runtime::host::HostFunction".
      
      (* Clone *)
      Definition clone (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            Value.StructRecord
              "delphinus_zkwasm::runtime::host::HostFunction"
              [
                ("desc",
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.path "specs::host_function::HostFunctionDesc",
                      [],
                      "clone",
                      []
                    |),
                    [
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "delphinus_zkwasm::runtime::host::HostFunction",
                        "desc"
                      |)
                    ]
                  |));
                ("execution_env",
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.path "delphinus_zkwasm::runtime::host::HostFunctionExecutionEnv",
                      [],
                      "clone",
                      []
                    |),
                    [
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "delphinus_zkwasm::runtime::host::HostFunction",
                        "execution_env"
                      |)
                    ]
                  |))
              ]))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::clone::Clone"
          Self
          (* Trait polymorphic types *) []
          (* Instance *) [ ("clone", InstanceField.Method clone) ].
    End Impl_core_clone_Clone_for_delphinus_zkwasm_runtime_host_HostFunction.
    
    (* Trait *)
    (* Empty module 'HostEnvArg' *)
    
    (* Trait *)
    (* Empty module 'HostEnvBuilder' *)
  End host.
End runtime.
