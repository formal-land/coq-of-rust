(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module runtime.
  (* StructRecord
    {
      name := "CompiledImage";
      ty_params := [ "I" ];
      fields := [ ("entry", Ty.path "alloc::string::String"); ("instance", I) ];
    } *)
  
  (* StructRecord
    {
      name := "ExecutionResult";
      ty_params := [ "R" ];
      fields :=
        [
          ("result", Ty.apply (Ty.path "core::option::Option") [ R ]);
          ("public_inputs_and_outputs",
            Ty.apply (Ty.path "alloc::vec::Vec") [ Ty.path "u64"; Ty.path "alloc::alloc::Global" ]);
          ("host_statics",
            Ty.apply
              (Ty.path "std::collections::hash::map::HashMap")
              [
                Ty.path "alloc::string::String";
                Ty.path "delphinus_zkwasm::runtime::host::ForeignStatics";
                Ty.path "std::hash::random::RandomState"
              ]);
          ("guest_statics", Ty.path "usize");
          ("outputs",
            Ty.apply (Ty.path "alloc::vec::Vec") [ Ty.path "u64"; Ty.path "alloc::alloc::Global" ]);
          ("context_outputs", Ty.path "delphinus_zkwasm::foreign::context::ContextOutput")
        ];
    } *)
  
  Module Impl_delphinus_zkwasm_runtime_ExecutionResult_R.
    Definition Self (R : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "delphinus_zkwasm::runtime::ExecutionResult") [ R ].
    
    (*
        pub fn public_inputs_and_outputs<F: FieldExt>(&self) -> Vec<F> {
            self.public_inputs_and_outputs
                .iter()
                .map(|v| F::from( *v))
                .collect()
        }
    *)
    Definition public_inputs_and_outputs (R : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self R in
      match τ, α with
      | [ F ], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.call_closure (|
            M.get_trait_method (|
              "core::iter::traits::iterator::Iterator",
              Ty.apply
                (Ty.path "core::iter::adapters::map::Map")
                [
                  Ty.apply (Ty.path "core::slice::iter::Iter") [ Ty.path "u64" ];
                  Ty.function [ Ty.tuple [ Ty.apply (Ty.path "&") [ Ty.path "u64" ] ] ] F
                ],
              [],
              "collect",
              [ Ty.apply (Ty.path "alloc::vec::Vec") [ F; Ty.path "alloc::alloc::Global" ] ]
            |),
            [
              M.call_closure (|
                M.get_trait_method (|
                  "core::iter::traits::iterator::Iterator",
                  Ty.apply (Ty.path "core::slice::iter::Iter") [ Ty.path "u64" ],
                  [],
                  "map",
                  [ F; Ty.function [ Ty.tuple [ Ty.apply (Ty.path "&") [ Ty.path "u64" ] ] ] F ]
                |),
                [
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply (Ty.path "slice") [ Ty.path "u64" ],
                      "iter",
                      []
                    |),
                    [
                      M.call_closure (|
                        M.get_trait_method (|
                          "core::ops::deref::Deref",
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            [ Ty.path "u64"; Ty.path "alloc::alloc::Global" ],
                          [],
                          "deref",
                          []
                        |),
                        [
                          M.SubPointer.get_struct_record_field (|
                            M.read (| self |),
                            "delphinus_zkwasm::runtime::ExecutionResult",
                            "public_inputs_and_outputs"
                          |)
                        ]
                      |)
                    ]
                  |);
                  M.closure
                    (fun γ =>
                      ltac:(M.monadic
                        match γ with
                        | [ α0 ] =>
                          M.match_operator (|
                            M.alloc (| α0 |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let v := M.copy (| γ |) in
                                  M.call_closure (|
                                    M.get_trait_method (|
                                      "core::convert::From",
                                      F,
                                      [ Ty.path "u64" ],
                                      "from",
                                      []
                                    |),
                                    [ M.read (| M.read (| v |) |) ]
                                  |)))
                            ]
                          |)
                        | _ => M.impossible (||)
                        end))
                ]
              |)
            ]
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom AssociatedFunction_public_inputs_and_outputs :
      forall (R : Ty.t),
      M.IsAssociatedFunction (Self R) "public_inputs_and_outputs" (public_inputs_and_outputs R).
  End Impl_delphinus_zkwasm_runtime_ExecutionResult_R.
  
  Axiom WasmInterpreter :
    (Ty.path "delphinus_zkwasm::runtime::WasmInterpreter") =
      (Ty.path "delphinus_zkwasm::runtime::wasmi_interpreter::WasmiRuntime").
  
  (*
  pub fn memory_event_of_step(event: &EventTableEntry) -> Vec<MemoryTableEntry> {
      let eid = event.eid;
      let sp_before_execution = event.sp;
  
      match &event.step_info {
          StepInfo::Br {
              drop,
              keep,
              keep_values,
              ..
          } => {
              assert_eq!(keep.len(), keep_values.len());
              assert!(keep.len() <= 1);
  
              let mut sp = sp_before_execution + 1;
              let mut ops = vec![];
  
              {
                  for i in 0..keep.len() {
                      ops.push(MemoryTableEntry {
                          eid,
                          offset: sp,
                          ltype: LocationType::Stack,
                          atype: AccessType::Read,
                          vtype: keep[i].into(),
                          is_mutable: true,
                          value: keep_values[i],
                      });
  
                      sp = sp + 1;
                  }
              }
  
              sp += drop;
              sp -= 1;
  
              {
                  for i in 0..keep.len() {
                      ops.push(MemoryTableEntry {
                          eid,
                          offset: sp,
                          ltype: LocationType::Stack,
                          atype: AccessType::Write,
                          vtype: keep[i].into(),
                          is_mutable: true,
                          value: keep_values[i],
                      });
  
                      sp = sp - 1;
                  }
              }
  
              ops
          }
          StepInfo::BrIfEqz {
              condition,
              drop,
              keep,
              keep_values,
              ..
          } => {
              assert_eq!(keep.len(), keep_values.len());
              assert!(keep.len() <= 1);
  
              let mut sp = sp_before_execution + 1;
  
              let mut ops = vec![MemoryTableEntry {
                  eid,
                  offset: sp,
                  ltype: LocationType::Stack,
                  atype: AccessType::Read,
                  vtype: VarType::I32,
                  is_mutable: true,
                  value: *condition as u32 as u64,
              }];
  
              sp = sp + 1;
  
              if *condition != 0 {
                  return ops;
              }
  
              {
                  for i in 0..keep.len() {
                      ops.push(MemoryTableEntry {
                          eid,
                          offset: sp,
                          ltype: LocationType::Stack,
                          atype: AccessType::Read,
                          vtype: keep[i].into(),
                          is_mutable: true,
                          value: keep_values[i],
                      });
  
                      sp = sp + 1;
                  }
              }
  
              sp += drop;
              sp -= 1;
  
              {
                  for i in 0..keep.len() {
                      ops.push(MemoryTableEntry {
                          eid,
                          offset: sp,
                          ltype: LocationType::Stack,
                          atype: AccessType::Write,
                          vtype: keep[i].into(),
                          is_mutable: true,
                          value: keep_values[i],
                      });
  
                      sp = sp - 1;
                  }
              }
  
              ops
          }
          StepInfo::BrIfNez {
              condition,
              drop,
              keep,
              keep_values,
              ..
          } => {
              assert_eq!(keep.len(), keep_values.len());
              assert!(keep.len() <= 1);
  
              let mut sp = sp_before_execution + 1;
  
              let mut ops = vec![MemoryTableEntry {
                  eid,
                  offset: sp,
                  ltype: LocationType::Stack,
                  atype: AccessType::Read,
                  vtype: VarType::I32,
                  is_mutable: true,
                  value: *condition as u32 as u64,
              }];
  
              sp = sp + 1;
  
              if *condition == 0 {
                  return ops;
              }
  
              {
                  for i in 0..keep.len() {
                      ops.push(MemoryTableEntry {
                          eid,
                          offset: sp,
                          ltype: LocationType::Stack,
                          atype: AccessType::Read,
                          vtype: keep[i].into(),
                          is_mutable: true,
                          value: keep_values[i],
                      });
  
                      sp = sp + 1;
                  }
              }
  
              sp += drop;
              sp -= 1;
  
              {
                  for i in 0..keep.len() {
                      ops.push(MemoryTableEntry {
                          eid,
                          offset: sp,
                          ltype: LocationType::Stack,
                          atype: AccessType::Write,
                          vtype: keep[i].into(),
                          is_mutable: true,
                          value: keep_values[i],
                      });
  
                      sp = sp - 1;
                  }
              }
  
              ops
          }
          StepInfo::BrTable {
              index,
              drop,
              keep,
              keep_values,
              ..
          } => {
              assert_eq!(keep.len(), keep_values.len());
              assert!(keep.len() <= 1);
  
              let mut sp = sp_before_execution + 1;
  
              let mut ops = vec![MemoryTableEntry {
                  eid,
                  offset: sp,
                  ltype: LocationType::Stack,
                  atype: AccessType::Read,
                  vtype: VarType::I32,
                  is_mutable: true,
                  value: *index as u32 as u64,
              }];
  
              sp = sp + 1;
  
              {
                  for i in 0..keep.len() {
                      ops.push(MemoryTableEntry {
                          eid,
                          offset: sp,
                          ltype: LocationType::Stack,
                          atype: AccessType::Read,
                          vtype: keep[i].into(),
                          is_mutable: true,
                          value: keep_values[i],
                      });
  
                      sp = sp + 1;
                  }
              }
  
              sp += drop;
              sp -= 1;
  
              {
                  for i in 0..keep.len() {
                      ops.push(MemoryTableEntry {
                          eid,
                          offset: sp,
                          ltype: LocationType::Stack,
                          atype: AccessType::Write,
                          vtype: keep[i].into(),
                          is_mutable: true,
                          value: keep_values[i],
                      });
  
                      sp = sp - 1;
                  }
              }
  
              ops
          }
          StepInfo::Return {
              drop,
              keep,
              keep_values,
          } => {
              assert_eq!(keep.len(), keep_values.len());
              assert!(keep.len() <= 1);
  
              let mut sp = sp_before_execution + 1;
              let mut ops = vec![];
  
              {
                  for i in 0..keep.len() {
                      ops.push(MemoryTableEntry {
                          eid,
                          offset: sp,
                          ltype: LocationType::Stack,
                          atype: AccessType::Read,
                          vtype: keep[i].into(),
                          is_mutable: true,
                          value: keep_values[i],
                      });
  
                      sp = sp + 1;
                  }
              }
  
              sp += drop;
              sp -= 1;
  
              {
                  for i in 0..keep.len() {
                      ops.push(MemoryTableEntry {
                          eid,
                          offset: sp,
                          ltype: LocationType::Stack,
                          atype: AccessType::Write,
                          vtype: keep[i].into(),
                          is_mutable: true,
                          value: keep_values[i],
                      });
  
                      sp = sp - 1;
                  }
              }
  
              ops
          }
          StepInfo::Drop { .. } => vec![],
          StepInfo::Select {
              val1,
              val2,
              cond,
              result,
              vtype,
          } => {
              let mut sp = sp_before_execution + 1;
              let mut ops = vec![];
  
              ops.push(MemoryTableEntry {
                  eid,
                  offset: sp,
                  ltype: LocationType::Stack,
                  atype: AccessType::Read,
                  vtype: VarType::I32,
                  is_mutable: true,
                  value: *cond,
              });
              sp = sp + 1;
  
              ops.push(MemoryTableEntry {
                  eid,
                  offset: sp,
                  ltype: LocationType::Stack,
                  atype: AccessType::Read,
                  vtype: *vtype,
                  is_mutable: true,
                  value: *val2,
              });
              sp = sp + 1;
  
              ops.push(MemoryTableEntry {
                  eid,
                  offset: sp,
                  ltype: LocationType::Stack,
                  atype: AccessType::Read,
                  vtype: *vtype,
                  is_mutable: true,
                  value: *val1,
              });
  
              ops.push(MemoryTableEntry {
                  eid,
                  offset: sp,
                  ltype: LocationType::Stack,
                  atype: AccessType::Write,
                  vtype: *vtype,
                  is_mutable: true,
                  value: *result,
              });
  
              ops
          }
          StepInfo::Call { index: _ } => {
              vec![]
          }
          StepInfo::CallIndirect { offset, .. } => {
              let stack_read = MemoryTableEntry {
                  eid,
                  offset: sp_before_execution + 1,
                  ltype: LocationType::Stack,
                  atype: AccessType::Read,
                  vtype: VarType::I32,
                  is_mutable: true,
                  value: *offset as u64,
              };
  
              vec![stack_read]
          }
          StepInfo::CallHost {
              args,
              ret_val,
              signature,
              ..
          } => {
              let mut mops = vec![];
              let mut sp = sp_before_execution;
  
              for (i, (ty, val)) in signature.params.iter().zip(args.iter()).enumerate() {
                  mops.push(MemoryTableEntry {
                      eid,
                      offset: sp_before_execution + args.len() as u32 - i as u32,
                      ltype: LocationType::Stack,
                      atype: AccessType::Read,
                      vtype: ( *ty).into(),
                      is_mutable: true,
                      value: *val,
                  });
              }
  
              sp = sp + args.len() as u32;
  
              if let Some(ty) = signature.return_type {
                  mops.push(MemoryTableEntry {
                      eid,
                      offset: sp,
                      ltype: LocationType::Stack,
                      atype: AccessType::Write,
                      vtype: ty.into(),
                      is_mutable: true,
                      value: ret_val.unwrap(),
                  });
              }
  
              mops
          }
          StepInfo::ExternalHostCall { value, sig, .. } => match sig {
              ExternalHostCallSignature::Argument => {
                  let stack_read = MemoryTableEntry {
                      eid,
                      offset: sp_before_execution + 1,
                      ltype: LocationType::Stack,
                      atype: AccessType::Read,
                      vtype: VarType::I64,
                      is_mutable: true,
                      value: value.unwrap(),
                  };
  
                  vec![stack_read]
              }
              ExternalHostCallSignature::Return => {
                  let stack_write = MemoryTableEntry {
                      eid,
                      offset: sp_before_execution,
                      ltype: LocationType::Stack,
                      atype: AccessType::Write,
                      vtype: VarType::I64,
                      is_mutable: true,
                      value: value.unwrap(),
                  };
  
                  vec![stack_write]
              }
          },
  
          StepInfo::GetLocal {
              vtype,
              depth,
              value,
          } => {
              let read = MemoryTableEntry {
                  eid,
                  offset: sp_before_execution + depth,
                  ltype: LocationType::Stack,
                  atype: AccessType::Read,
                  vtype: *vtype,
                  is_mutable: true,
                  value: *value,
              };
  
              let write = MemoryTableEntry {
                  eid,
                  offset: sp_before_execution,
                  ltype: LocationType::Stack,
                  atype: AccessType::Write,
                  vtype: *vtype,
                  is_mutable: true,
                  value: *value,
              };
              vec![read, write]
          }
          StepInfo::SetLocal {
              vtype,
              depth,
              value,
          } => {
              let mut sp = sp_before_execution;
  
              let read = MemoryTableEntry {
                  eid,
                  offset: sp + 1,
                  ltype: LocationType::Stack,
                  atype: AccessType::Read,
                  vtype: *vtype,
                  is_mutable: true,
                  value: *value,
              };
  
              sp += 1;
  
              let write = MemoryTableEntry {
                  eid,
                  offset: sp + depth,
                  ltype: LocationType::Stack,
                  atype: AccessType::Write,
                  vtype: *vtype,
                  is_mutable: true,
                  value: *value,
              };
  
              vec![read, write]
          }
          StepInfo::TeeLocal {
              vtype,
              depth,
              value,
          } => {
              let read = MemoryTableEntry {
                  eid,
                  offset: sp_before_execution + 1,
                  ltype: LocationType::Stack,
                  atype: AccessType::Read,
                  vtype: *vtype,
                  is_mutable: true,
                  value: *value,
              };
  
              let write = MemoryTableEntry {
                  eid,
                  offset: sp_before_execution + depth,
                  ltype: LocationType::Stack,
                  atype: AccessType::Write,
                  vtype: *vtype,
                  is_mutable: true,
                  value: *value,
              };
  
              vec![read, write]
          }
  
          StepInfo::GetGlobal {
              idx,
              vtype,
              is_mutable,
              value,
              ..
          } => {
              let global_get = MemoryTableEntry {
                  eid,
                  offset: *idx,
                  ltype: LocationType::Global,
                  atype: AccessType::Read,
                  vtype: *vtype,
                  is_mutable: *is_mutable,
                  value: *value,
              };
  
              let stack_write = MemoryTableEntry {
                  eid,
                  offset: sp_before_execution,
                  ltype: LocationType::Stack,
                  atype: AccessType::Write,
                  vtype: *vtype,
                  is_mutable: true,
                  value: *value,
              };
  
              vec![global_get, stack_write]
          }
          StepInfo::SetGlobal {
              idx,
              vtype,
              is_mutable,
              value,
          } => {
              let stack_read = MemoryTableEntry {
                  eid,
                  offset: sp_before_execution + 1,
                  ltype: LocationType::Stack,
                  atype: AccessType::Read,
                  vtype: *vtype,
                  is_mutable: true,
                  value: *value,
              };
  
              let global_set = MemoryTableEntry {
                  eid,
                  offset: *idx,
                  ltype: LocationType::Global,
                  atype: AccessType::Write,
                  vtype: *vtype,
                  is_mutable: *is_mutable,
                  value: *value,
              };
  
              vec![stack_read, global_set]
          }
  
          StepInfo::Load {
              vtype,
              load_size,
              raw_address,
              effective_address,
              value,
              block_value1,
              block_value2,
              ..
          } => {
              let load_address_from_stack = MemoryTableEntry {
                  eid,
                  offset: sp_before_execution + 1,
                  ltype: LocationType::Stack,
                  atype: AccessType::Read,
                  vtype: VarType::I32,
                  is_mutable: true,
                  value: *raw_address as u64,
              };
  
              let load_value1 = MemoryTableEntry {
                  eid,
                  offset: ( *effective_address) / 8,
                  ltype: LocationType::Heap,
                  atype: AccessType::Read,
                  // Load u64 from address which align with 8
                  vtype: VarType::I64,
                  is_mutable: true,
                  // The value will be used to lookup within imtable, hence block_value is given here
                  value: *block_value1,
              };
  
              let load_value2 = if *effective_address % 8 + load_size.byte_size() as u32 > 8 {
                  Some(MemoryTableEntry {
                      eid,
                      offset: effective_address / 8 + 1,
                      ltype: LocationType::Heap,
                      atype: AccessType::Read,
                      // Load u64 from address which align with 8
                      vtype: VarType::I64,
                      is_mutable: true,
                      // The value will be used to lookup within imtable, hence block_value is given here
                      value: *block_value2,
                  })
              } else {
                  None
              };
  
              let push_value = MemoryTableEntry {
                  eid,
                  offset: sp_before_execution + 1,
                  ltype: LocationType::Stack,
                  atype: AccessType::Write,
                  vtype: *vtype,
                  is_mutable: true,
                  value: *value,
              };
  
              vec![
                  vec![load_address_from_stack, load_value1],
                  load_value2.map_or(vec![], |v| vec![v]),
                  vec![push_value],
              ]
              .concat()
          }
          StepInfo::Store {
              vtype,
              store_size,
              raw_address,
              effective_address,
              value,
              pre_block_value1,
              updated_block_value1,
              pre_block_value2,
              updated_block_value2,
              ..
          } => {
              let load_value_from_stack = MemoryTableEntry {
                  eid,
                  offset: sp_before_execution + 1,
                  ltype: LocationType::Stack,
                  atype: AccessType::Read,
                  vtype: *vtype,
                  is_mutable: true,
                  value: *value,
              };
  
              let load_address_from_stack = MemoryTableEntry {
                  eid,
                  offset: sp_before_execution + 2,
                  ltype: LocationType::Stack,
                  atype: AccessType::Read,
                  vtype: VarType::I32,
                  is_mutable: true,
                  value: *raw_address as u64,
              };
  
              let load_value1 = MemoryTableEntry {
                  eid,
                  offset: effective_address / 8,
                  ltype: LocationType::Heap,
                  atype: AccessType::Read,
                  // Load u64 from address which align with 8
                  vtype: VarType::I64,
                  is_mutable: true,
                  // The value will be used to lookup within imtable, hence block_value is given here
                  value: *pre_block_value1,
              };
  
              let write_value1 = MemoryTableEntry {
                  eid,
                  offset: effective_address / 8,
                  ltype: LocationType::Heap,
                  atype: AccessType::Write,
                  // Load u64 from address which align with 8
                  vtype: VarType::I64,
                  is_mutable: true,
                  // The value will be used to lookup within imtable, hence block_value is given here
                  value: *updated_block_value1,
              };
  
              if *effective_address % 8 + store_size.byte_size() as u32 > 8 {
                  let load_value2 = MemoryTableEntry {
                      eid,
                      offset: effective_address / 8 + 1,
                      ltype: LocationType::Heap,
                      atype: AccessType::Read,
                      // Load u64 from address which align with 8
                      vtype: VarType::I64,
                      is_mutable: true,
                      // The value will be used to lookup within imtable, hence block_value is given here
                      value: *pre_block_value2,
                  };
  
                  let write_value2 = MemoryTableEntry {
                      eid,
                      offset: effective_address / 8 + 1,
                      ltype: LocationType::Heap,
                      atype: AccessType::Write,
                      // Load u64 from address which align with 8
                      vtype: VarType::I64,
                      is_mutable: true,
                      // The value will be used to lookup within imtable, hence block_value is given here
                      value: *updated_block_value2,
                  };
                  vec![
                      load_value_from_stack,
                      load_address_from_stack,
                      load_value1,
                      write_value1,
                      load_value2,
                      write_value2,
                  ]
              } else {
                  vec![
                      load_value_from_stack,
                      load_address_from_stack,
                      load_value1,
                      write_value1,
                  ]
              }
          }
  
          StepInfo::MemorySize => mem_op_from_stack_only_step(
              sp_before_execution,
              eid,
              VarType::I32,
              VarType::I32,
              &[],
              &[event.allocated_memory_pages as u32 as u64],
          ),
          StepInfo::MemoryGrow { grow_size, result } => mem_op_from_stack_only_step(
              sp_before_execution,
              eid,
              VarType::I32,
              VarType::I32,
              &[*grow_size as u32 as u64],
              &[*result as u32 as u64],
          ),
  
          StepInfo::I32Const { value } => mem_op_from_stack_only_step(
              sp_before_execution,
              eid,
              VarType::I32,
              VarType::I32,
              &[],
              &[*value as u32 as u64],
          ),
          StepInfo::I32BinOp {
              left, right, value, ..
          }
          | StepInfo::I32BinShiftOp {
              left, right, value, ..
          }
          | StepInfo::I32BinBitOp {
              left, right, value, ..
          } => mem_op_from_stack_only_step(
              sp_before_execution,
              eid,
              VarType::I32,
              VarType::I32,
              &[*right as u32 as u64, *left as u32 as u64],
              &[*value as u32 as u64],
          ),
          StepInfo::I32Comp {
              left, right, value, ..
          } => mem_op_from_stack_only_step(
              sp_before_execution,
              eid,
              VarType::I32,
              VarType::I32,
              &[*right as u32 as u64, *left as u32 as u64],
              &[*value as u32 as u64],
          ),
  
          StepInfo::I64BinOp {
              left, right, value, ..
          }
          | StepInfo::I64BinShiftOp {
              left, right, value, ..
          }
          | StepInfo::I64BinBitOp {
              left, right, value, ..
          } => mem_op_from_stack_only_step(
              sp_before_execution,
              eid,
              VarType::I64,
              VarType::I64,
              &[*right as u64, *left as u64],
              &[*value as u64],
          ),
  
          StepInfo::I64Const { value } => mem_op_from_stack_only_step(
              sp_before_execution,
              eid,
              VarType::I64,
              VarType::I64,
              &[],
              &[*value as u64],
          ),
          StepInfo::I64Comp {
              left, right, value, ..
          } => mem_op_from_stack_only_step(
              sp_before_execution,
              eid,
              VarType::I64,
              VarType::I32,
              &[*right as u64, *left as u64],
              &[*value as u32 as u64],
          ),
          StepInfo::UnaryOp {
              vtype,
              operand,
              result,
              ..
          } => mem_op_from_stack_only_step(
              sp_before_execution,
              eid,
              *vtype,
              *vtype,
              &[*operand],
              &[*result],
          ),
  
          StepInfo::Test {
              vtype,
              value,
              result,
          } => mem_op_from_stack_only_step(
              sp_before_execution,
              eid,
              *vtype,
              VarType::I32,
              &[*value],
              &[*result as u32 as u64],
          ),
  
          StepInfo::I32WrapI64 { value, result } => mem_op_from_stack_only_step(
              sp_before_execution,
              eid,
              VarType::I64,
              VarType::I32,
              &[*value as u64],
              &[*result as u32 as u64],
          ),
          StepInfo::I64ExtendI32 { value, result, .. } => mem_op_from_stack_only_step(
              sp_before_execution,
              eid,
              VarType::I32,
              VarType::I64,
              &[*value as u32 as u64],
              &[*result as u64],
          ),
          StepInfo::I32SignExtendI8 { value, result }
          | StepInfo::I32SignExtendI16 { value, result } => mem_op_from_stack_only_step(
              sp_before_execution,
              eid,
              VarType::I32,
              VarType::I32,
              &[*value as u32 as u64],
              &[*result as u32 as u64],
          ),
          StepInfo::I64SignExtendI8 { value, result }
          | StepInfo::I64SignExtendI16 { value, result }
          | StepInfo::I64SignExtendI32 { value, result } => mem_op_from_stack_only_step(
              sp_before_execution,
              eid,
              VarType::I64,
              VarType::I64,
              &[*value as u64],
              &[*result as u64],
          ),
      }
  }
  *)
  Definition memory_event_of_step (τ : list Ty.t) (α : list Value.t) : M :=
    match τ, α with
    | [], [ event ] =>
      ltac:(M.monadic
        (let event := M.alloc (| event |) in
        M.catch_return (|
          ltac:(M.monadic
            (M.read (|
              let eid :=
                M.copy (|
                  M.SubPointer.get_struct_record_field (|
                    M.read (| event |),
                    "specs::etable::EventTableEntry",
                    "eid"
                  |)
                |) in
              let sp_before_execution :=
                M.copy (|
                  M.SubPointer.get_struct_record_field (|
                    M.read (| event |),
                    "specs::etable::EventTableEntry",
                    "sp"
                  |)
                |) in
              M.match_operator (|
                M.alloc (|
                  M.SubPointer.get_struct_record_field (|
                    M.read (| event |),
                    "specs::etable::EventTableEntry",
                    "step_info"
                  |)
                |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_record_field (|
                          γ,
                          "specs::step::StepInfo::Br",
                          "drop"
                        |) in
                      let γ1_1 :=
                        M.SubPointer.get_struct_record_field (|
                          γ,
                          "specs::step::StepInfo::Br",
                          "keep"
                        |) in
                      let γ1_2 :=
                        M.SubPointer.get_struct_record_field (|
                          γ,
                          "specs::step::StepInfo::Br",
                          "keep_values"
                        |) in
                      let drop := M.alloc (| γ1_0 |) in
                      let keep := M.alloc (| γ1_1 |) in
                      let keep_values := M.alloc (| γ1_2 |) in
                      let _ :=
                        M.match_operator (|
                          M.alloc (|
                            Value.Tuple
                              [
                                M.alloc (|
                                  M.call_closure (|
                                    M.get_associated_function (|
                                      Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        [
                                          Ty.path "specs::types::ValueType";
                                          Ty.path "alloc::alloc::Global"
                                        ],
                                      "len",
                                      []
                                    |),
                                    [ M.read (| keep |) ]
                                  |)
                                |);
                                M.alloc (|
                                  M.call_closure (|
                                    M.get_associated_function (|
                                      Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        [ Ty.path "u64"; Ty.path "alloc::alloc::Global" ],
                                      "len",
                                      []
                                    |),
                                    [ M.read (| keep_values |) ]
                                  |)
                                |)
                              ]
                          |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                                let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                                let left_val := M.copy (| γ0_0 |) in
                                let right_val := M.copy (| γ0_1 |) in
                                M.match_operator (|
                                  M.alloc (| Value.Tuple [] |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ :=
                                          M.use
                                            (M.alloc (|
                                              UnOp.Pure.not
                                                (BinOp.Pure.eq
                                                  (M.read (| M.read (| left_val |) |))
                                                  (M.read (| M.read (| right_val |) |)))
                                            |)) in
                                        let _ :=
                                          M.is_constant_or_break_match (|
                                            M.read (| γ |),
                                            Value.Bool true
                                          |) in
                                        M.alloc (|
                                          M.never_to_any (|
                                            M.read (|
                                              let kind :=
                                                M.alloc (|
                                                  Value.StructTuple
                                                    "core::panicking::AssertKind::Eq"
                                                    []
                                                |) in
                                              M.alloc (|
                                                M.call_closure (|
                                                  M.get_function (|
                                                    "core::panicking::assert_failed",
                                                    [ Ty.path "usize"; Ty.path "usize" ]
                                                  |),
                                                  [
                                                    M.read (| kind |);
                                                    M.read (| left_val |);
                                                    M.read (| right_val |);
                                                    Value.StructTuple
                                                      "core::option::Option::None"
                                                      []
                                                  ]
                                                |)
                                              |)
                                            |)
                                          |)
                                        |)));
                                    fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                  ]
                                |)))
                          ]
                        |) in
                      let _ :=
                        M.match_operator (|
                          M.alloc (| Value.Tuple [] |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ :=
                                  M.use
                                    (M.alloc (|
                                      UnOp.Pure.not
                                        (BinOp.Pure.le
                                          (M.call_closure (|
                                            M.get_associated_function (|
                                              Ty.apply
                                                (Ty.path "alloc::vec::Vec")
                                                [
                                                  Ty.path "specs::types::ValueType";
                                                  Ty.path "alloc::alloc::Global"
                                                ],
                                              "len",
                                              []
                                            |),
                                            [ M.read (| keep |) ]
                                          |))
                                          (Value.Integer 1))
                                    |)) in
                                let _ :=
                                  M.is_constant_or_break_match (|
                                    M.read (| γ |),
                                    Value.Bool true
                                  |) in
                                M.alloc (|
                                  M.never_to_any (|
                                    M.call_closure (|
                                      M.get_function (| "core::panicking::panic", [] |),
                                      [
                                        M.read (|
                                          Value.String "assertion failed: keep.len() <= 1"
                                        |)
                                      ]
                                    |)
                                  |)
                                |)));
                            fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                          ]
                        |) in
                      let sp :=
                        M.alloc (|
                          BinOp.Panic.add (|
                            Integer.U32,
                            M.read (| sp_before_execution |),
                            Value.Integer 1
                          |)
                        |) in
                      let ops :=
                        M.alloc (|
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                [
                                  Ty.path "specs::mtable::MemoryTableEntry";
                                  Ty.path "alloc::alloc::Global"
                                ],
                              "new",
                              []
                            |),
                            []
                          |)
                        |) in
                      let _ :=
                        M.use
                          (M.match_operator (|
                            M.alloc (|
                              M.call_closure (|
                                M.get_trait_method (|
                                  "core::iter::traits::collect::IntoIterator",
                                  Ty.apply (Ty.path "core::ops::range::Range") [ Ty.path "usize" ],
                                  [],
                                  "into_iter",
                                  []
                                |),
                                [
                                  Value.StructRecord
                                    "core::ops::range::Range"
                                    [
                                      ("start", Value.Integer 0);
                                      ("end_",
                                        M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              [
                                                Ty.path "specs::types::ValueType";
                                                Ty.path "alloc::alloc::Global"
                                              ],
                                            "len",
                                            []
                                          |),
                                          [ M.read (| keep |) ]
                                        |))
                                    ]
                                ]
                              |)
                            |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let iter := M.copy (| γ |) in
                                  M.loop (|
                                    ltac:(M.monadic
                                      (let _ :=
                                        M.match_operator (|
                                          M.alloc (|
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "core::iter::traits::iterator::Iterator",
                                                Ty.apply
                                                  (Ty.path "core::ops::range::Range")
                                                  [ Ty.path "usize" ],
                                                [],
                                                "next",
                                                []
                                              |),
                                              [ iter ]
                                            |)
                                          |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (M.alloc (|
                                                  M.never_to_any (| M.read (| M.break (||) |) |)
                                                |)));
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let γ0_0 :=
                                                  M.SubPointer.get_struct_tuple_field (|
                                                    γ,
                                                    "core::option::Option::Some",
                                                    0
                                                  |) in
                                                let i := M.copy (| γ0_0 |) in
                                                let _ :=
                                                  M.alloc (|
                                                    M.call_closure (|
                                                      M.get_associated_function (|
                                                        Ty.apply
                                                          (Ty.path "alloc::vec::Vec")
                                                          [
                                                            Ty.path
                                                              "specs::mtable::MemoryTableEntry";
                                                            Ty.path "alloc::alloc::Global"
                                                          ],
                                                        "push",
                                                        []
                                                      |),
                                                      [
                                                        ops;
                                                        Value.StructRecord
                                                          "specs::mtable::MemoryTableEntry"
                                                          [
                                                            ("eid", M.read (| eid |));
                                                            ("offset", M.read (| sp |));
                                                            ("ltype",
                                                              Value.StructTuple
                                                                "specs::mtable::LocationType::Stack"
                                                                []);
                                                            ("atype",
                                                              Value.StructTuple
                                                                "specs::mtable::AccessType::Read"
                                                                []);
                                                            ("vtype",
                                                              M.call_closure (|
                                                                M.get_trait_method (|
                                                                  "core::convert::Into",
                                                                  Ty.path "specs::types::ValueType",
                                                                  [ Ty.path "specs::mtable::VarType"
                                                                  ],
                                                                  "into",
                                                                  []
                                                                |),
                                                                [
                                                                  M.read (|
                                                                    M.call_closure (|
                                                                      M.get_trait_method (|
                                                                        "core::ops::index::Index",
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "alloc::vec::Vec")
                                                                          [
                                                                            Ty.path
                                                                              "specs::types::ValueType";
                                                                            Ty.path
                                                                              "alloc::alloc::Global"
                                                                          ],
                                                                        [ Ty.path "usize" ],
                                                                        "index",
                                                                        []
                                                                      |),
                                                                      [
                                                                        M.read (| keep |);
                                                                        M.read (| i |)
                                                                      ]
                                                                    |)
                                                                  |)
                                                                ]
                                                              |));
                                                            ("is_mutable", Value.Bool true);
                                                            ("value",
                                                              M.read (|
                                                                M.call_closure (|
                                                                  M.get_trait_method (|
                                                                    "core::ops::index::Index",
                                                                    Ty.apply
                                                                      (Ty.path "alloc::vec::Vec")
                                                                      [
                                                                        Ty.path "u64";
                                                                        Ty.path
                                                                          "alloc::alloc::Global"
                                                                      ],
                                                                    [ Ty.path "usize" ],
                                                                    "index",
                                                                    []
                                                                  |),
                                                                  [
                                                                    M.read (| keep_values |);
                                                                    M.read (| i |)
                                                                  ]
                                                                |)
                                                              |))
                                                          ]
                                                      ]
                                                    |)
                                                  |) in
                                                let _ :=
                                                  M.write (|
                                                    sp,
                                                    BinOp.Panic.add (|
                                                      Integer.U32,
                                                      M.read (| sp |),
                                                      Value.Integer 1
                                                    |)
                                                  |) in
                                                M.alloc (| Value.Tuple [] |)))
                                          ]
                                        |) in
                                      M.alloc (| Value.Tuple [] |)))
                                  |)))
                            ]
                          |)) in
                      let _ :=
                        M.alloc (|
                          M.call_closure (|
                            M.get_trait_method (|
                              "core::ops::arith::AddAssign",
                              Ty.path "u32",
                              [ Ty.apply (Ty.path "&") [ Ty.path "u32" ] ],
                              "add_assign",
                              []
                            |),
                            [ sp; M.read (| drop |) ]
                          |)
                        |) in
                      let _ :=
                        let β := sp in
                        M.write (|
                          β,
                          BinOp.Panic.sub (| Integer.U32, M.read (| β |), Value.Integer 1 |)
                        |) in
                      let _ :=
                        M.use
                          (M.match_operator (|
                            M.alloc (|
                              M.call_closure (|
                                M.get_trait_method (|
                                  "core::iter::traits::collect::IntoIterator",
                                  Ty.apply (Ty.path "core::ops::range::Range") [ Ty.path "usize" ],
                                  [],
                                  "into_iter",
                                  []
                                |),
                                [
                                  Value.StructRecord
                                    "core::ops::range::Range"
                                    [
                                      ("start", Value.Integer 0);
                                      ("end_",
                                        M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              [
                                                Ty.path "specs::types::ValueType";
                                                Ty.path "alloc::alloc::Global"
                                              ],
                                            "len",
                                            []
                                          |),
                                          [ M.read (| keep |) ]
                                        |))
                                    ]
                                ]
                              |)
                            |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let iter := M.copy (| γ |) in
                                  M.loop (|
                                    ltac:(M.monadic
                                      (let _ :=
                                        M.match_operator (|
                                          M.alloc (|
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "core::iter::traits::iterator::Iterator",
                                                Ty.apply
                                                  (Ty.path "core::ops::range::Range")
                                                  [ Ty.path "usize" ],
                                                [],
                                                "next",
                                                []
                                              |),
                                              [ iter ]
                                            |)
                                          |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (M.alloc (|
                                                  M.never_to_any (| M.read (| M.break (||) |) |)
                                                |)));
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let γ0_0 :=
                                                  M.SubPointer.get_struct_tuple_field (|
                                                    γ,
                                                    "core::option::Option::Some",
                                                    0
                                                  |) in
                                                let i := M.copy (| γ0_0 |) in
                                                let _ :=
                                                  M.alloc (|
                                                    M.call_closure (|
                                                      M.get_associated_function (|
                                                        Ty.apply
                                                          (Ty.path "alloc::vec::Vec")
                                                          [
                                                            Ty.path
                                                              "specs::mtable::MemoryTableEntry";
                                                            Ty.path "alloc::alloc::Global"
                                                          ],
                                                        "push",
                                                        []
                                                      |),
                                                      [
                                                        ops;
                                                        Value.StructRecord
                                                          "specs::mtable::MemoryTableEntry"
                                                          [
                                                            ("eid", M.read (| eid |));
                                                            ("offset", M.read (| sp |));
                                                            ("ltype",
                                                              Value.StructTuple
                                                                "specs::mtable::LocationType::Stack"
                                                                []);
                                                            ("atype",
                                                              Value.StructTuple
                                                                "specs::mtable::AccessType::Write"
                                                                []);
                                                            ("vtype",
                                                              M.call_closure (|
                                                                M.get_trait_method (|
                                                                  "core::convert::Into",
                                                                  Ty.path "specs::types::ValueType",
                                                                  [ Ty.path "specs::mtable::VarType"
                                                                  ],
                                                                  "into",
                                                                  []
                                                                |),
                                                                [
                                                                  M.read (|
                                                                    M.call_closure (|
                                                                      M.get_trait_method (|
                                                                        "core::ops::index::Index",
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "alloc::vec::Vec")
                                                                          [
                                                                            Ty.path
                                                                              "specs::types::ValueType";
                                                                            Ty.path
                                                                              "alloc::alloc::Global"
                                                                          ],
                                                                        [ Ty.path "usize" ],
                                                                        "index",
                                                                        []
                                                                      |),
                                                                      [
                                                                        M.read (| keep |);
                                                                        M.read (| i |)
                                                                      ]
                                                                    |)
                                                                  |)
                                                                ]
                                                              |));
                                                            ("is_mutable", Value.Bool true);
                                                            ("value",
                                                              M.read (|
                                                                M.call_closure (|
                                                                  M.get_trait_method (|
                                                                    "core::ops::index::Index",
                                                                    Ty.apply
                                                                      (Ty.path "alloc::vec::Vec")
                                                                      [
                                                                        Ty.path "u64";
                                                                        Ty.path
                                                                          "alloc::alloc::Global"
                                                                      ],
                                                                    [ Ty.path "usize" ],
                                                                    "index",
                                                                    []
                                                                  |),
                                                                  [
                                                                    M.read (| keep_values |);
                                                                    M.read (| i |)
                                                                  ]
                                                                |)
                                                              |))
                                                          ]
                                                      ]
                                                    |)
                                                  |) in
                                                let _ :=
                                                  M.write (|
                                                    sp,
                                                    BinOp.Panic.sub (|
                                                      Integer.U32,
                                                      M.read (| sp |),
                                                      Value.Integer 1
                                                    |)
                                                  |) in
                                                M.alloc (| Value.Tuple [] |)))
                                          ]
                                        |) in
                                      M.alloc (| Value.Tuple [] |)))
                                  |)))
                            ]
                          |)) in
                      ops));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_record_field (|
                          γ,
                          "specs::step::StepInfo::BrIfEqz",
                          "condition"
                        |) in
                      let γ1_1 :=
                        M.SubPointer.get_struct_record_field (|
                          γ,
                          "specs::step::StepInfo::BrIfEqz",
                          "drop"
                        |) in
                      let γ1_2 :=
                        M.SubPointer.get_struct_record_field (|
                          γ,
                          "specs::step::StepInfo::BrIfEqz",
                          "keep"
                        |) in
                      let γ1_3 :=
                        M.SubPointer.get_struct_record_field (|
                          γ,
                          "specs::step::StepInfo::BrIfEqz",
                          "keep_values"
                        |) in
                      let condition := M.alloc (| γ1_0 |) in
                      let drop := M.alloc (| γ1_1 |) in
                      let keep := M.alloc (| γ1_2 |) in
                      let keep_values := M.alloc (| γ1_3 |) in
                      let _ :=
                        M.match_operator (|
                          M.alloc (|
                            Value.Tuple
                              [
                                M.alloc (|
                                  M.call_closure (|
                                    M.get_associated_function (|
                                      Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        [
                                          Ty.path "specs::types::ValueType";
                                          Ty.path "alloc::alloc::Global"
                                        ],
                                      "len",
                                      []
                                    |),
                                    [ M.read (| keep |) ]
                                  |)
                                |);
                                M.alloc (|
                                  M.call_closure (|
                                    M.get_associated_function (|
                                      Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        [ Ty.path "u64"; Ty.path "alloc::alloc::Global" ],
                                      "len",
                                      []
                                    |),
                                    [ M.read (| keep_values |) ]
                                  |)
                                |)
                              ]
                          |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                                let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                                let left_val := M.copy (| γ0_0 |) in
                                let right_val := M.copy (| γ0_1 |) in
                                M.match_operator (|
                                  M.alloc (| Value.Tuple [] |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ :=
                                          M.use
                                            (M.alloc (|
                                              UnOp.Pure.not
                                                (BinOp.Pure.eq
                                                  (M.read (| M.read (| left_val |) |))
                                                  (M.read (| M.read (| right_val |) |)))
                                            |)) in
                                        let _ :=
                                          M.is_constant_or_break_match (|
                                            M.read (| γ |),
                                            Value.Bool true
                                          |) in
                                        M.alloc (|
                                          M.never_to_any (|
                                            M.read (|
                                              let kind :=
                                                M.alloc (|
                                                  Value.StructTuple
                                                    "core::panicking::AssertKind::Eq"
                                                    []
                                                |) in
                                              M.alloc (|
                                                M.call_closure (|
                                                  M.get_function (|
                                                    "core::panicking::assert_failed",
                                                    [ Ty.path "usize"; Ty.path "usize" ]
                                                  |),
                                                  [
                                                    M.read (| kind |);
                                                    M.read (| left_val |);
                                                    M.read (| right_val |);
                                                    Value.StructTuple
                                                      "core::option::Option::None"
                                                      []
                                                  ]
                                                |)
                                              |)
                                            |)
                                          |)
                                        |)));
                                    fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                  ]
                                |)))
                          ]
                        |) in
                      let _ :=
                        M.match_operator (|
                          M.alloc (| Value.Tuple [] |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ :=
                                  M.use
                                    (M.alloc (|
                                      UnOp.Pure.not
                                        (BinOp.Pure.le
                                          (M.call_closure (|
                                            M.get_associated_function (|
                                              Ty.apply
                                                (Ty.path "alloc::vec::Vec")
                                                [
                                                  Ty.path "specs::types::ValueType";
                                                  Ty.path "alloc::alloc::Global"
                                                ],
                                              "len",
                                              []
                                            |),
                                            [ M.read (| keep |) ]
                                          |))
                                          (Value.Integer 1))
                                    |)) in
                                let _ :=
                                  M.is_constant_or_break_match (|
                                    M.read (| γ |),
                                    Value.Bool true
                                  |) in
                                M.alloc (|
                                  M.never_to_any (|
                                    M.call_closure (|
                                      M.get_function (| "core::panicking::panic", [] |),
                                      [
                                        M.read (|
                                          Value.String "assertion failed: keep.len() <= 1"
                                        |)
                                      ]
                                    |)
                                  |)
                                |)));
                            fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                          ]
                        |) in
                      let sp :=
                        M.alloc (|
                          BinOp.Panic.add (|
                            Integer.U32,
                            M.read (| sp_before_execution |),
                            Value.Integer 1
                          |)
                        |) in
                      let ops :=
                        M.alloc (|
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.apply
                                (Ty.path "slice")
                                [ Ty.path "specs::mtable::MemoryTableEntry" ],
                              "into_vec",
                              [ Ty.path "alloc::alloc::Global" ]
                            |),
                            [
                              (* Unsize *)
                              M.pointer_coercion
                                (M.read (|
                                  M.call_closure (|
                                    M.get_associated_function (|
                                      Ty.apply
                                        (Ty.path "alloc::boxed::Box")
                                        [
                                          Ty.apply
                                            (Ty.path "array")
                                            [ Ty.path "specs::mtable::MemoryTableEntry" ];
                                          Ty.path "alloc::alloc::Global"
                                        ],
                                      "new",
                                      []
                                    |),
                                    [
                                      M.alloc (|
                                        Value.Array
                                          [
                                            Value.StructRecord
                                              "specs::mtable::MemoryTableEntry"
                                              [
                                                ("eid", M.read (| eid |));
                                                ("offset", M.read (| sp |));
                                                ("ltype",
                                                  Value.StructTuple
                                                    "specs::mtable::LocationType::Stack"
                                                    []);
                                                ("atype",
                                                  Value.StructTuple
                                                    "specs::mtable::AccessType::Read"
                                                    []);
                                                ("vtype",
                                                  Value.StructTuple
                                                    "specs::mtable::VarType::I32"
                                                    []);
                                                ("is_mutable", Value.Bool true);
                                                ("value",
                                                  M.rust_cast
                                                    (M.rust_cast
                                                      (M.read (| M.read (| condition |) |))))
                                              ]
                                          ]
                                      |)
                                    ]
                                  |)
                                |))
                            ]
                          |)
                        |) in
                      let _ :=
                        M.write (|
                          sp,
                          BinOp.Panic.add (| Integer.U32, M.read (| sp |), Value.Integer 1 |)
                        |) in
                      let _ :=
                        M.match_operator (|
                          M.alloc (| Value.Tuple [] |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ :=
                                  M.use
                                    (M.alloc (|
                                      BinOp.Pure.ne
                                        (M.read (| M.read (| condition |) |))
                                        (Value.Integer 0)
                                    |)) in
                                let _ :=
                                  M.is_constant_or_break_match (|
                                    M.read (| γ |),
                                    Value.Bool true
                                  |) in
                                M.alloc (|
                                  M.never_to_any (| M.read (| M.return_ (| M.read (| ops |) |) |) |)
                                |)));
                            fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                          ]
                        |) in
                      let _ :=
                        M.use
                          (M.match_operator (|
                            M.alloc (|
                              M.call_closure (|
                                M.get_trait_method (|
                                  "core::iter::traits::collect::IntoIterator",
                                  Ty.apply (Ty.path "core::ops::range::Range") [ Ty.path "usize" ],
                                  [],
                                  "into_iter",
                                  []
                                |),
                                [
                                  Value.StructRecord
                                    "core::ops::range::Range"
                                    [
                                      ("start", Value.Integer 0);
                                      ("end_",
                                        M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              [
                                                Ty.path "specs::types::ValueType";
                                                Ty.path "alloc::alloc::Global"
                                              ],
                                            "len",
                                            []
                                          |),
                                          [ M.read (| keep |) ]
                                        |))
                                    ]
                                ]
                              |)
                            |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let iter := M.copy (| γ |) in
                                  M.loop (|
                                    ltac:(M.monadic
                                      (let _ :=
                                        M.match_operator (|
                                          M.alloc (|
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "core::iter::traits::iterator::Iterator",
                                                Ty.apply
                                                  (Ty.path "core::ops::range::Range")
                                                  [ Ty.path "usize" ],
                                                [],
                                                "next",
                                                []
                                              |),
                                              [ iter ]
                                            |)
                                          |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (M.alloc (|
                                                  M.never_to_any (| M.read (| M.break (||) |) |)
                                                |)));
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let γ0_0 :=
                                                  M.SubPointer.get_struct_tuple_field (|
                                                    γ,
                                                    "core::option::Option::Some",
                                                    0
                                                  |) in
                                                let i := M.copy (| γ0_0 |) in
                                                let _ :=
                                                  M.alloc (|
                                                    M.call_closure (|
                                                      M.get_associated_function (|
                                                        Ty.apply
                                                          (Ty.path "alloc::vec::Vec")
                                                          [
                                                            Ty.path
                                                              "specs::mtable::MemoryTableEntry";
                                                            Ty.path "alloc::alloc::Global"
                                                          ],
                                                        "push",
                                                        []
                                                      |),
                                                      [
                                                        ops;
                                                        Value.StructRecord
                                                          "specs::mtable::MemoryTableEntry"
                                                          [
                                                            ("eid", M.read (| eid |));
                                                            ("offset", M.read (| sp |));
                                                            ("ltype",
                                                              Value.StructTuple
                                                                "specs::mtable::LocationType::Stack"
                                                                []);
                                                            ("atype",
                                                              Value.StructTuple
                                                                "specs::mtable::AccessType::Read"
                                                                []);
                                                            ("vtype",
                                                              M.call_closure (|
                                                                M.get_trait_method (|
                                                                  "core::convert::Into",
                                                                  Ty.path "specs::types::ValueType",
                                                                  [ Ty.path "specs::mtable::VarType"
                                                                  ],
                                                                  "into",
                                                                  []
                                                                |),
                                                                [
                                                                  M.read (|
                                                                    M.call_closure (|
                                                                      M.get_trait_method (|
                                                                        "core::ops::index::Index",
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "alloc::vec::Vec")
                                                                          [
                                                                            Ty.path
                                                                              "specs::types::ValueType";
                                                                            Ty.path
                                                                              "alloc::alloc::Global"
                                                                          ],
                                                                        [ Ty.path "usize" ],
                                                                        "index",
                                                                        []
                                                                      |),
                                                                      [
                                                                        M.read (| keep |);
                                                                        M.read (| i |)
                                                                      ]
                                                                    |)
                                                                  |)
                                                                ]
                                                              |));
                                                            ("is_mutable", Value.Bool true);
                                                            ("value",
                                                              M.read (|
                                                                M.call_closure (|
                                                                  M.get_trait_method (|
                                                                    "core::ops::index::Index",
                                                                    Ty.apply
                                                                      (Ty.path "alloc::vec::Vec")
                                                                      [
                                                                        Ty.path "u64";
                                                                        Ty.path
                                                                          "alloc::alloc::Global"
                                                                      ],
                                                                    [ Ty.path "usize" ],
                                                                    "index",
                                                                    []
                                                                  |),
                                                                  [
                                                                    M.read (| keep_values |);
                                                                    M.read (| i |)
                                                                  ]
                                                                |)
                                                              |))
                                                          ]
                                                      ]
                                                    |)
                                                  |) in
                                                let _ :=
                                                  M.write (|
                                                    sp,
                                                    BinOp.Panic.add (|
                                                      Integer.U32,
                                                      M.read (| sp |),
                                                      Value.Integer 1
                                                    |)
                                                  |) in
                                                M.alloc (| Value.Tuple [] |)))
                                          ]
                                        |) in
                                      M.alloc (| Value.Tuple [] |)))
                                  |)))
                            ]
                          |)) in
                      let _ :=
                        M.alloc (|
                          M.call_closure (|
                            M.get_trait_method (|
                              "core::ops::arith::AddAssign",
                              Ty.path "u32",
                              [ Ty.apply (Ty.path "&") [ Ty.path "u32" ] ],
                              "add_assign",
                              []
                            |),
                            [ sp; M.read (| drop |) ]
                          |)
                        |) in
                      let _ :=
                        let β := sp in
                        M.write (|
                          β,
                          BinOp.Panic.sub (| Integer.U32, M.read (| β |), Value.Integer 1 |)
                        |) in
                      let _ :=
                        M.use
                          (M.match_operator (|
                            M.alloc (|
                              M.call_closure (|
                                M.get_trait_method (|
                                  "core::iter::traits::collect::IntoIterator",
                                  Ty.apply (Ty.path "core::ops::range::Range") [ Ty.path "usize" ],
                                  [],
                                  "into_iter",
                                  []
                                |),
                                [
                                  Value.StructRecord
                                    "core::ops::range::Range"
                                    [
                                      ("start", Value.Integer 0);
                                      ("end_",
                                        M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              [
                                                Ty.path "specs::types::ValueType";
                                                Ty.path "alloc::alloc::Global"
                                              ],
                                            "len",
                                            []
                                          |),
                                          [ M.read (| keep |) ]
                                        |))
                                    ]
                                ]
                              |)
                            |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let iter := M.copy (| γ |) in
                                  M.loop (|
                                    ltac:(M.monadic
                                      (let _ :=
                                        M.match_operator (|
                                          M.alloc (|
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "core::iter::traits::iterator::Iterator",
                                                Ty.apply
                                                  (Ty.path "core::ops::range::Range")
                                                  [ Ty.path "usize" ],
                                                [],
                                                "next",
                                                []
                                              |),
                                              [ iter ]
                                            |)
                                          |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (M.alloc (|
                                                  M.never_to_any (| M.read (| M.break (||) |) |)
                                                |)));
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let γ0_0 :=
                                                  M.SubPointer.get_struct_tuple_field (|
                                                    γ,
                                                    "core::option::Option::Some",
                                                    0
                                                  |) in
                                                let i := M.copy (| γ0_0 |) in
                                                let _ :=
                                                  M.alloc (|
                                                    M.call_closure (|
                                                      M.get_associated_function (|
                                                        Ty.apply
                                                          (Ty.path "alloc::vec::Vec")
                                                          [
                                                            Ty.path
                                                              "specs::mtable::MemoryTableEntry";
                                                            Ty.path "alloc::alloc::Global"
                                                          ],
                                                        "push",
                                                        []
                                                      |),
                                                      [
                                                        ops;
                                                        Value.StructRecord
                                                          "specs::mtable::MemoryTableEntry"
                                                          [
                                                            ("eid", M.read (| eid |));
                                                            ("offset", M.read (| sp |));
                                                            ("ltype",
                                                              Value.StructTuple
                                                                "specs::mtable::LocationType::Stack"
                                                                []);
                                                            ("atype",
                                                              Value.StructTuple
                                                                "specs::mtable::AccessType::Write"
                                                                []);
                                                            ("vtype",
                                                              M.call_closure (|
                                                                M.get_trait_method (|
                                                                  "core::convert::Into",
                                                                  Ty.path "specs::types::ValueType",
                                                                  [ Ty.path "specs::mtable::VarType"
                                                                  ],
                                                                  "into",
                                                                  []
                                                                |),
                                                                [
                                                                  M.read (|
                                                                    M.call_closure (|
                                                                      M.get_trait_method (|
                                                                        "core::ops::index::Index",
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "alloc::vec::Vec")
                                                                          [
                                                                            Ty.path
                                                                              "specs::types::ValueType";
                                                                            Ty.path
                                                                              "alloc::alloc::Global"
                                                                          ],
                                                                        [ Ty.path "usize" ],
                                                                        "index",
                                                                        []
                                                                      |),
                                                                      [
                                                                        M.read (| keep |);
                                                                        M.read (| i |)
                                                                      ]
                                                                    |)
                                                                  |)
                                                                ]
                                                              |));
                                                            ("is_mutable", Value.Bool true);
                                                            ("value",
                                                              M.read (|
                                                                M.call_closure (|
                                                                  M.get_trait_method (|
                                                                    "core::ops::index::Index",
                                                                    Ty.apply
                                                                      (Ty.path "alloc::vec::Vec")
                                                                      [
                                                                        Ty.path "u64";
                                                                        Ty.path
                                                                          "alloc::alloc::Global"
                                                                      ],
                                                                    [ Ty.path "usize" ],
                                                                    "index",
                                                                    []
                                                                  |),
                                                                  [
                                                                    M.read (| keep_values |);
                                                                    M.read (| i |)
                                                                  ]
                                                                |)
                                                              |))
                                                          ]
                                                      ]
                                                    |)
                                                  |) in
                                                let _ :=
                                                  M.write (|
                                                    sp,
                                                    BinOp.Panic.sub (|
                                                      Integer.U32,
                                                      M.read (| sp |),
                                                      Value.Integer 1
                                                    |)
                                                  |) in
                                                M.alloc (| Value.Tuple [] |)))
                                          ]
                                        |) in
                                      M.alloc (| Value.Tuple [] |)))
                                  |)))
                            ]
                          |)) in
                      ops));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_record_field (|
                          γ,
                          "specs::step::StepInfo::BrIfNez",
                          "condition"
                        |) in
                      let γ1_1 :=
                        M.SubPointer.get_struct_record_field (|
                          γ,
                          "specs::step::StepInfo::BrIfNez",
                          "drop"
                        |) in
                      let γ1_2 :=
                        M.SubPointer.get_struct_record_field (|
                          γ,
                          "specs::step::StepInfo::BrIfNez",
                          "keep"
                        |) in
                      let γ1_3 :=
                        M.SubPointer.get_struct_record_field (|
                          γ,
                          "specs::step::StepInfo::BrIfNez",
                          "keep_values"
                        |) in
                      let condition := M.alloc (| γ1_0 |) in
                      let drop := M.alloc (| γ1_1 |) in
                      let keep := M.alloc (| γ1_2 |) in
                      let keep_values := M.alloc (| γ1_3 |) in
                      let _ :=
                        M.match_operator (|
                          M.alloc (|
                            Value.Tuple
                              [
                                M.alloc (|
                                  M.call_closure (|
                                    M.get_associated_function (|
                                      Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        [
                                          Ty.path "specs::types::ValueType";
                                          Ty.path "alloc::alloc::Global"
                                        ],
                                      "len",
                                      []
                                    |),
                                    [ M.read (| keep |) ]
                                  |)
                                |);
                                M.alloc (|
                                  M.call_closure (|
                                    M.get_associated_function (|
                                      Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        [ Ty.path "u64"; Ty.path "alloc::alloc::Global" ],
                                      "len",
                                      []
                                    |),
                                    [ M.read (| keep_values |) ]
                                  |)
                                |)
                              ]
                          |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                                let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                                let left_val := M.copy (| γ0_0 |) in
                                let right_val := M.copy (| γ0_1 |) in
                                M.match_operator (|
                                  M.alloc (| Value.Tuple [] |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ :=
                                          M.use
                                            (M.alloc (|
                                              UnOp.Pure.not
                                                (BinOp.Pure.eq
                                                  (M.read (| M.read (| left_val |) |))
                                                  (M.read (| M.read (| right_val |) |)))
                                            |)) in
                                        let _ :=
                                          M.is_constant_or_break_match (|
                                            M.read (| γ |),
                                            Value.Bool true
                                          |) in
                                        M.alloc (|
                                          M.never_to_any (|
                                            M.read (|
                                              let kind :=
                                                M.alloc (|
                                                  Value.StructTuple
                                                    "core::panicking::AssertKind::Eq"
                                                    []
                                                |) in
                                              M.alloc (|
                                                M.call_closure (|
                                                  M.get_function (|
                                                    "core::panicking::assert_failed",
                                                    [ Ty.path "usize"; Ty.path "usize" ]
                                                  |),
                                                  [
                                                    M.read (| kind |);
                                                    M.read (| left_val |);
                                                    M.read (| right_val |);
                                                    Value.StructTuple
                                                      "core::option::Option::None"
                                                      []
                                                  ]
                                                |)
                                              |)
                                            |)
                                          |)
                                        |)));
                                    fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                  ]
                                |)))
                          ]
                        |) in
                      let _ :=
                        M.match_operator (|
                          M.alloc (| Value.Tuple [] |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ :=
                                  M.use
                                    (M.alloc (|
                                      UnOp.Pure.not
                                        (BinOp.Pure.le
                                          (M.call_closure (|
                                            M.get_associated_function (|
                                              Ty.apply
                                                (Ty.path "alloc::vec::Vec")
                                                [
                                                  Ty.path "specs::types::ValueType";
                                                  Ty.path "alloc::alloc::Global"
                                                ],
                                              "len",
                                              []
                                            |),
                                            [ M.read (| keep |) ]
                                          |))
                                          (Value.Integer 1))
                                    |)) in
                                let _ :=
                                  M.is_constant_or_break_match (|
                                    M.read (| γ |),
                                    Value.Bool true
                                  |) in
                                M.alloc (|
                                  M.never_to_any (|
                                    M.call_closure (|
                                      M.get_function (| "core::panicking::panic", [] |),
                                      [
                                        M.read (|
                                          Value.String "assertion failed: keep.len() <= 1"
                                        |)
                                      ]
                                    |)
                                  |)
                                |)));
                            fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                          ]
                        |) in
                      let sp :=
                        M.alloc (|
                          BinOp.Panic.add (|
                            Integer.U32,
                            M.read (| sp_before_execution |),
                            Value.Integer 1
                          |)
                        |) in
                      let ops :=
                        M.alloc (|
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.apply
                                (Ty.path "slice")
                                [ Ty.path "specs::mtable::MemoryTableEntry" ],
                              "into_vec",
                              [ Ty.path "alloc::alloc::Global" ]
                            |),
                            [
                              (* Unsize *)
                              M.pointer_coercion
                                (M.read (|
                                  M.call_closure (|
                                    M.get_associated_function (|
                                      Ty.apply
                                        (Ty.path "alloc::boxed::Box")
                                        [
                                          Ty.apply
                                            (Ty.path "array")
                                            [ Ty.path "specs::mtable::MemoryTableEntry" ];
                                          Ty.path "alloc::alloc::Global"
                                        ],
                                      "new",
                                      []
                                    |),
                                    [
                                      M.alloc (|
                                        Value.Array
                                          [
                                            Value.StructRecord
                                              "specs::mtable::MemoryTableEntry"
                                              [
                                                ("eid", M.read (| eid |));
                                                ("offset", M.read (| sp |));
                                                ("ltype",
                                                  Value.StructTuple
                                                    "specs::mtable::LocationType::Stack"
                                                    []);
                                                ("atype",
                                                  Value.StructTuple
                                                    "specs::mtable::AccessType::Read"
                                                    []);
                                                ("vtype",
                                                  Value.StructTuple
                                                    "specs::mtable::VarType::I32"
                                                    []);
                                                ("is_mutable", Value.Bool true);
                                                ("value",
                                                  M.rust_cast
                                                    (M.rust_cast
                                                      (M.read (| M.read (| condition |) |))))
                                              ]
                                          ]
                                      |)
                                    ]
                                  |)
                                |))
                            ]
                          |)
                        |) in
                      let _ :=
                        M.write (|
                          sp,
                          BinOp.Panic.add (| Integer.U32, M.read (| sp |), Value.Integer 1 |)
                        |) in
                      let _ :=
                        M.match_operator (|
                          M.alloc (| Value.Tuple [] |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ :=
                                  M.use
                                    (M.alloc (|
                                      BinOp.Pure.eq
                                        (M.read (| M.read (| condition |) |))
                                        (Value.Integer 0)
                                    |)) in
                                let _ :=
                                  M.is_constant_or_break_match (|
                                    M.read (| γ |),
                                    Value.Bool true
                                  |) in
                                M.alloc (|
                                  M.never_to_any (| M.read (| M.return_ (| M.read (| ops |) |) |) |)
                                |)));
                            fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                          ]
                        |) in
                      let _ :=
                        M.use
                          (M.match_operator (|
                            M.alloc (|
                              M.call_closure (|
                                M.get_trait_method (|
                                  "core::iter::traits::collect::IntoIterator",
                                  Ty.apply (Ty.path "core::ops::range::Range") [ Ty.path "usize" ],
                                  [],
                                  "into_iter",
                                  []
                                |),
                                [
                                  Value.StructRecord
                                    "core::ops::range::Range"
                                    [
                                      ("start", Value.Integer 0);
                                      ("end_",
                                        M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              [
                                                Ty.path "specs::types::ValueType";
                                                Ty.path "alloc::alloc::Global"
                                              ],
                                            "len",
                                            []
                                          |),
                                          [ M.read (| keep |) ]
                                        |))
                                    ]
                                ]
                              |)
                            |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let iter := M.copy (| γ |) in
                                  M.loop (|
                                    ltac:(M.monadic
                                      (let _ :=
                                        M.match_operator (|
                                          M.alloc (|
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "core::iter::traits::iterator::Iterator",
                                                Ty.apply
                                                  (Ty.path "core::ops::range::Range")
                                                  [ Ty.path "usize" ],
                                                [],
                                                "next",
                                                []
                                              |),
                                              [ iter ]
                                            |)
                                          |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (M.alloc (|
                                                  M.never_to_any (| M.read (| M.break (||) |) |)
                                                |)));
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let γ0_0 :=
                                                  M.SubPointer.get_struct_tuple_field (|
                                                    γ,
                                                    "core::option::Option::Some",
                                                    0
                                                  |) in
                                                let i := M.copy (| γ0_0 |) in
                                                let _ :=
                                                  M.alloc (|
                                                    M.call_closure (|
                                                      M.get_associated_function (|
                                                        Ty.apply
                                                          (Ty.path "alloc::vec::Vec")
                                                          [
                                                            Ty.path
                                                              "specs::mtable::MemoryTableEntry";
                                                            Ty.path "alloc::alloc::Global"
                                                          ],
                                                        "push",
                                                        []
                                                      |),
                                                      [
                                                        ops;
                                                        Value.StructRecord
                                                          "specs::mtable::MemoryTableEntry"
                                                          [
                                                            ("eid", M.read (| eid |));
                                                            ("offset", M.read (| sp |));
                                                            ("ltype",
                                                              Value.StructTuple
                                                                "specs::mtable::LocationType::Stack"
                                                                []);
                                                            ("atype",
                                                              Value.StructTuple
                                                                "specs::mtable::AccessType::Read"
                                                                []);
                                                            ("vtype",
                                                              M.call_closure (|
                                                                M.get_trait_method (|
                                                                  "core::convert::Into",
                                                                  Ty.path "specs::types::ValueType",
                                                                  [ Ty.path "specs::mtable::VarType"
                                                                  ],
                                                                  "into",
                                                                  []
                                                                |),
                                                                [
                                                                  M.read (|
                                                                    M.call_closure (|
                                                                      M.get_trait_method (|
                                                                        "core::ops::index::Index",
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "alloc::vec::Vec")
                                                                          [
                                                                            Ty.path
                                                                              "specs::types::ValueType";
                                                                            Ty.path
                                                                              "alloc::alloc::Global"
                                                                          ],
                                                                        [ Ty.path "usize" ],
                                                                        "index",
                                                                        []
                                                                      |),
                                                                      [
                                                                        M.read (| keep |);
                                                                        M.read (| i |)
                                                                      ]
                                                                    |)
                                                                  |)
                                                                ]
                                                              |));
                                                            ("is_mutable", Value.Bool true);
                                                            ("value",
                                                              M.read (|
                                                                M.call_closure (|
                                                                  M.get_trait_method (|
                                                                    "core::ops::index::Index",
                                                                    Ty.apply
                                                                      (Ty.path "alloc::vec::Vec")
                                                                      [
                                                                        Ty.path "u64";
                                                                        Ty.path
                                                                          "alloc::alloc::Global"
                                                                      ],
                                                                    [ Ty.path "usize" ],
                                                                    "index",
                                                                    []
                                                                  |),
                                                                  [
                                                                    M.read (| keep_values |);
                                                                    M.read (| i |)
                                                                  ]
                                                                |)
                                                              |))
                                                          ]
                                                      ]
                                                    |)
                                                  |) in
                                                let _ :=
                                                  M.write (|
                                                    sp,
                                                    BinOp.Panic.add (|
                                                      Integer.U32,
                                                      M.read (| sp |),
                                                      Value.Integer 1
                                                    |)
                                                  |) in
                                                M.alloc (| Value.Tuple [] |)))
                                          ]
                                        |) in
                                      M.alloc (| Value.Tuple [] |)))
                                  |)))
                            ]
                          |)) in
                      let _ :=
                        M.alloc (|
                          M.call_closure (|
                            M.get_trait_method (|
                              "core::ops::arith::AddAssign",
                              Ty.path "u32",
                              [ Ty.apply (Ty.path "&") [ Ty.path "u32" ] ],
                              "add_assign",
                              []
                            |),
                            [ sp; M.read (| drop |) ]
                          |)
                        |) in
                      let _ :=
                        let β := sp in
                        M.write (|
                          β,
                          BinOp.Panic.sub (| Integer.U32, M.read (| β |), Value.Integer 1 |)
                        |) in
                      let _ :=
                        M.use
                          (M.match_operator (|
                            M.alloc (|
                              M.call_closure (|
                                M.get_trait_method (|
                                  "core::iter::traits::collect::IntoIterator",
                                  Ty.apply (Ty.path "core::ops::range::Range") [ Ty.path "usize" ],
                                  [],
                                  "into_iter",
                                  []
                                |),
                                [
                                  Value.StructRecord
                                    "core::ops::range::Range"
                                    [
                                      ("start", Value.Integer 0);
                                      ("end_",
                                        M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              [
                                                Ty.path "specs::types::ValueType";
                                                Ty.path "alloc::alloc::Global"
                                              ],
                                            "len",
                                            []
                                          |),
                                          [ M.read (| keep |) ]
                                        |))
                                    ]
                                ]
                              |)
                            |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let iter := M.copy (| γ |) in
                                  M.loop (|
                                    ltac:(M.monadic
                                      (let _ :=
                                        M.match_operator (|
                                          M.alloc (|
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "core::iter::traits::iterator::Iterator",
                                                Ty.apply
                                                  (Ty.path "core::ops::range::Range")
                                                  [ Ty.path "usize" ],
                                                [],
                                                "next",
                                                []
                                              |),
                                              [ iter ]
                                            |)
                                          |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (M.alloc (|
                                                  M.never_to_any (| M.read (| M.break (||) |) |)
                                                |)));
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let γ0_0 :=
                                                  M.SubPointer.get_struct_tuple_field (|
                                                    γ,
                                                    "core::option::Option::Some",
                                                    0
                                                  |) in
                                                let i := M.copy (| γ0_0 |) in
                                                let _ :=
                                                  M.alloc (|
                                                    M.call_closure (|
                                                      M.get_associated_function (|
                                                        Ty.apply
                                                          (Ty.path "alloc::vec::Vec")
                                                          [
                                                            Ty.path
                                                              "specs::mtable::MemoryTableEntry";
                                                            Ty.path "alloc::alloc::Global"
                                                          ],
                                                        "push",
                                                        []
                                                      |),
                                                      [
                                                        ops;
                                                        Value.StructRecord
                                                          "specs::mtable::MemoryTableEntry"
                                                          [
                                                            ("eid", M.read (| eid |));
                                                            ("offset", M.read (| sp |));
                                                            ("ltype",
                                                              Value.StructTuple
                                                                "specs::mtable::LocationType::Stack"
                                                                []);
                                                            ("atype",
                                                              Value.StructTuple
                                                                "specs::mtable::AccessType::Write"
                                                                []);
                                                            ("vtype",
                                                              M.call_closure (|
                                                                M.get_trait_method (|
                                                                  "core::convert::Into",
                                                                  Ty.path "specs::types::ValueType",
                                                                  [ Ty.path "specs::mtable::VarType"
                                                                  ],
                                                                  "into",
                                                                  []
                                                                |),
                                                                [
                                                                  M.read (|
                                                                    M.call_closure (|
                                                                      M.get_trait_method (|
                                                                        "core::ops::index::Index",
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "alloc::vec::Vec")
                                                                          [
                                                                            Ty.path
                                                                              "specs::types::ValueType";
                                                                            Ty.path
                                                                              "alloc::alloc::Global"
                                                                          ],
                                                                        [ Ty.path "usize" ],
                                                                        "index",
                                                                        []
                                                                      |),
                                                                      [
                                                                        M.read (| keep |);
                                                                        M.read (| i |)
                                                                      ]
                                                                    |)
                                                                  |)
                                                                ]
                                                              |));
                                                            ("is_mutable", Value.Bool true);
                                                            ("value",
                                                              M.read (|
                                                                M.call_closure (|
                                                                  M.get_trait_method (|
                                                                    "core::ops::index::Index",
                                                                    Ty.apply
                                                                      (Ty.path "alloc::vec::Vec")
                                                                      [
                                                                        Ty.path "u64";
                                                                        Ty.path
                                                                          "alloc::alloc::Global"
                                                                      ],
                                                                    [ Ty.path "usize" ],
                                                                    "index",
                                                                    []
                                                                  |),
                                                                  [
                                                                    M.read (| keep_values |);
                                                                    M.read (| i |)
                                                                  ]
                                                                |)
                                                              |))
                                                          ]
                                                      ]
                                                    |)
                                                  |) in
                                                let _ :=
                                                  M.write (|
                                                    sp,
                                                    BinOp.Panic.sub (|
                                                      Integer.U32,
                                                      M.read (| sp |),
                                                      Value.Integer 1
                                                    |)
                                                  |) in
                                                M.alloc (| Value.Tuple [] |)))
                                          ]
                                        |) in
                                      M.alloc (| Value.Tuple [] |)))
                                  |)))
                            ]
                          |)) in
                      ops));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_record_field (|
                          γ,
                          "specs::step::StepInfo::BrTable",
                          "index"
                        |) in
                      let γ1_1 :=
                        M.SubPointer.get_struct_record_field (|
                          γ,
                          "specs::step::StepInfo::BrTable",
                          "drop"
                        |) in
                      let γ1_2 :=
                        M.SubPointer.get_struct_record_field (|
                          γ,
                          "specs::step::StepInfo::BrTable",
                          "keep"
                        |) in
                      let γ1_3 :=
                        M.SubPointer.get_struct_record_field (|
                          γ,
                          "specs::step::StepInfo::BrTable",
                          "keep_values"
                        |) in
                      let index := M.alloc (| γ1_0 |) in
                      let drop := M.alloc (| γ1_1 |) in
                      let keep := M.alloc (| γ1_2 |) in
                      let keep_values := M.alloc (| γ1_3 |) in
                      let _ :=
                        M.match_operator (|
                          M.alloc (|
                            Value.Tuple
                              [
                                M.alloc (|
                                  M.call_closure (|
                                    M.get_associated_function (|
                                      Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        [
                                          Ty.path "specs::types::ValueType";
                                          Ty.path "alloc::alloc::Global"
                                        ],
                                      "len",
                                      []
                                    |),
                                    [ M.read (| keep |) ]
                                  |)
                                |);
                                M.alloc (|
                                  M.call_closure (|
                                    M.get_associated_function (|
                                      Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        [ Ty.path "u64"; Ty.path "alloc::alloc::Global" ],
                                      "len",
                                      []
                                    |),
                                    [ M.read (| keep_values |) ]
                                  |)
                                |)
                              ]
                          |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                                let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                                let left_val := M.copy (| γ0_0 |) in
                                let right_val := M.copy (| γ0_1 |) in
                                M.match_operator (|
                                  M.alloc (| Value.Tuple [] |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ :=
                                          M.use
                                            (M.alloc (|
                                              UnOp.Pure.not
                                                (BinOp.Pure.eq
                                                  (M.read (| M.read (| left_val |) |))
                                                  (M.read (| M.read (| right_val |) |)))
                                            |)) in
                                        let _ :=
                                          M.is_constant_or_break_match (|
                                            M.read (| γ |),
                                            Value.Bool true
                                          |) in
                                        M.alloc (|
                                          M.never_to_any (|
                                            M.read (|
                                              let kind :=
                                                M.alloc (|
                                                  Value.StructTuple
                                                    "core::panicking::AssertKind::Eq"
                                                    []
                                                |) in
                                              M.alloc (|
                                                M.call_closure (|
                                                  M.get_function (|
                                                    "core::panicking::assert_failed",
                                                    [ Ty.path "usize"; Ty.path "usize" ]
                                                  |),
                                                  [
                                                    M.read (| kind |);
                                                    M.read (| left_val |);
                                                    M.read (| right_val |);
                                                    Value.StructTuple
                                                      "core::option::Option::None"
                                                      []
                                                  ]
                                                |)
                                              |)
                                            |)
                                          |)
                                        |)));
                                    fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                  ]
                                |)))
                          ]
                        |) in
                      let _ :=
                        M.match_operator (|
                          M.alloc (| Value.Tuple [] |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ :=
                                  M.use
                                    (M.alloc (|
                                      UnOp.Pure.not
                                        (BinOp.Pure.le
                                          (M.call_closure (|
                                            M.get_associated_function (|
                                              Ty.apply
                                                (Ty.path "alloc::vec::Vec")
                                                [
                                                  Ty.path "specs::types::ValueType";
                                                  Ty.path "alloc::alloc::Global"
                                                ],
                                              "len",
                                              []
                                            |),
                                            [ M.read (| keep |) ]
                                          |))
                                          (Value.Integer 1))
                                    |)) in
                                let _ :=
                                  M.is_constant_or_break_match (|
                                    M.read (| γ |),
                                    Value.Bool true
                                  |) in
                                M.alloc (|
                                  M.never_to_any (|
                                    M.call_closure (|
                                      M.get_function (| "core::panicking::panic", [] |),
                                      [
                                        M.read (|
                                          Value.String "assertion failed: keep.len() <= 1"
                                        |)
                                      ]
                                    |)
                                  |)
                                |)));
                            fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                          ]
                        |) in
                      let sp :=
                        M.alloc (|
                          BinOp.Panic.add (|
                            Integer.U32,
                            M.read (| sp_before_execution |),
                            Value.Integer 1
                          |)
                        |) in
                      let ops :=
                        M.alloc (|
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.apply
                                (Ty.path "slice")
                                [ Ty.path "specs::mtable::MemoryTableEntry" ],
                              "into_vec",
                              [ Ty.path "alloc::alloc::Global" ]
                            |),
                            [
                              (* Unsize *)
                              M.pointer_coercion
                                (M.read (|
                                  M.call_closure (|
                                    M.get_associated_function (|
                                      Ty.apply
                                        (Ty.path "alloc::boxed::Box")
                                        [
                                          Ty.apply
                                            (Ty.path "array")
                                            [ Ty.path "specs::mtable::MemoryTableEntry" ];
                                          Ty.path "alloc::alloc::Global"
                                        ],
                                      "new",
                                      []
                                    |),
                                    [
                                      M.alloc (|
                                        Value.Array
                                          [
                                            Value.StructRecord
                                              "specs::mtable::MemoryTableEntry"
                                              [
                                                ("eid", M.read (| eid |));
                                                ("offset", M.read (| sp |));
                                                ("ltype",
                                                  Value.StructTuple
                                                    "specs::mtable::LocationType::Stack"
                                                    []);
                                                ("atype",
                                                  Value.StructTuple
                                                    "specs::mtable::AccessType::Read"
                                                    []);
                                                ("vtype",
                                                  Value.StructTuple
                                                    "specs::mtable::VarType::I32"
                                                    []);
                                                ("is_mutable", Value.Bool true);
                                                ("value",
                                                  M.rust_cast
                                                    (M.rust_cast (M.read (| M.read (| index |) |))))
                                              ]
                                          ]
                                      |)
                                    ]
                                  |)
                                |))
                            ]
                          |)
                        |) in
                      let _ :=
                        M.write (|
                          sp,
                          BinOp.Panic.add (| Integer.U32, M.read (| sp |), Value.Integer 1 |)
                        |) in
                      let _ :=
                        M.use
                          (M.match_operator (|
                            M.alloc (|
                              M.call_closure (|
                                M.get_trait_method (|
                                  "core::iter::traits::collect::IntoIterator",
                                  Ty.apply (Ty.path "core::ops::range::Range") [ Ty.path "usize" ],
                                  [],
                                  "into_iter",
                                  []
                                |),
                                [
                                  Value.StructRecord
                                    "core::ops::range::Range"
                                    [
                                      ("start", Value.Integer 0);
                                      ("end_",
                                        M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              [
                                                Ty.path "specs::types::ValueType";
                                                Ty.path "alloc::alloc::Global"
                                              ],
                                            "len",
                                            []
                                          |),
                                          [ M.read (| keep |) ]
                                        |))
                                    ]
                                ]
                              |)
                            |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let iter := M.copy (| γ |) in
                                  M.loop (|
                                    ltac:(M.monadic
                                      (let _ :=
                                        M.match_operator (|
                                          M.alloc (|
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "core::iter::traits::iterator::Iterator",
                                                Ty.apply
                                                  (Ty.path "core::ops::range::Range")
                                                  [ Ty.path "usize" ],
                                                [],
                                                "next",
                                                []
                                              |),
                                              [ iter ]
                                            |)
                                          |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (M.alloc (|
                                                  M.never_to_any (| M.read (| M.break (||) |) |)
                                                |)));
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let γ0_0 :=
                                                  M.SubPointer.get_struct_tuple_field (|
                                                    γ,
                                                    "core::option::Option::Some",
                                                    0
                                                  |) in
                                                let i := M.copy (| γ0_0 |) in
                                                let _ :=
                                                  M.alloc (|
                                                    M.call_closure (|
                                                      M.get_associated_function (|
                                                        Ty.apply
                                                          (Ty.path "alloc::vec::Vec")
                                                          [
                                                            Ty.path
                                                              "specs::mtable::MemoryTableEntry";
                                                            Ty.path "alloc::alloc::Global"
                                                          ],
                                                        "push",
                                                        []
                                                      |),
                                                      [
                                                        ops;
                                                        Value.StructRecord
                                                          "specs::mtable::MemoryTableEntry"
                                                          [
                                                            ("eid", M.read (| eid |));
                                                            ("offset", M.read (| sp |));
                                                            ("ltype",
                                                              Value.StructTuple
                                                                "specs::mtable::LocationType::Stack"
                                                                []);
                                                            ("atype",
                                                              Value.StructTuple
                                                                "specs::mtable::AccessType::Read"
                                                                []);
                                                            ("vtype",
                                                              M.call_closure (|
                                                                M.get_trait_method (|
                                                                  "core::convert::Into",
                                                                  Ty.path "specs::types::ValueType",
                                                                  [ Ty.path "specs::mtable::VarType"
                                                                  ],
                                                                  "into",
                                                                  []
                                                                |),
                                                                [
                                                                  M.read (|
                                                                    M.call_closure (|
                                                                      M.get_trait_method (|
                                                                        "core::ops::index::Index",
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "alloc::vec::Vec")
                                                                          [
                                                                            Ty.path
                                                                              "specs::types::ValueType";
                                                                            Ty.path
                                                                              "alloc::alloc::Global"
                                                                          ],
                                                                        [ Ty.path "usize" ],
                                                                        "index",
                                                                        []
                                                                      |),
                                                                      [
                                                                        M.read (| keep |);
                                                                        M.read (| i |)
                                                                      ]
                                                                    |)
                                                                  |)
                                                                ]
                                                              |));
                                                            ("is_mutable", Value.Bool true);
                                                            ("value",
                                                              M.read (|
                                                                M.call_closure (|
                                                                  M.get_trait_method (|
                                                                    "core::ops::index::Index",
                                                                    Ty.apply
                                                                      (Ty.path "alloc::vec::Vec")
                                                                      [
                                                                        Ty.path "u64";
                                                                        Ty.path
                                                                          "alloc::alloc::Global"
                                                                      ],
                                                                    [ Ty.path "usize" ],
                                                                    "index",
                                                                    []
                                                                  |),
                                                                  [
                                                                    M.read (| keep_values |);
                                                                    M.read (| i |)
                                                                  ]
                                                                |)
                                                              |))
                                                          ]
                                                      ]
                                                    |)
                                                  |) in
                                                let _ :=
                                                  M.write (|
                                                    sp,
                                                    BinOp.Panic.add (|
                                                      Integer.U32,
                                                      M.read (| sp |),
                                                      Value.Integer 1
                                                    |)
                                                  |) in
                                                M.alloc (| Value.Tuple [] |)))
                                          ]
                                        |) in
                                      M.alloc (| Value.Tuple [] |)))
                                  |)))
                            ]
                          |)) in
                      let _ :=
                        M.alloc (|
                          M.call_closure (|
                            M.get_trait_method (|
                              "core::ops::arith::AddAssign",
                              Ty.path "u32",
                              [ Ty.apply (Ty.path "&") [ Ty.path "u32" ] ],
                              "add_assign",
                              []
                            |),
                            [ sp; M.read (| drop |) ]
                          |)
                        |) in
                      let _ :=
                        let β := sp in
                        M.write (|
                          β,
                          BinOp.Panic.sub (| Integer.U32, M.read (| β |), Value.Integer 1 |)
                        |) in
                      let _ :=
                        M.use
                          (M.match_operator (|
                            M.alloc (|
                              M.call_closure (|
                                M.get_trait_method (|
                                  "core::iter::traits::collect::IntoIterator",
                                  Ty.apply (Ty.path "core::ops::range::Range") [ Ty.path "usize" ],
                                  [],
                                  "into_iter",
                                  []
                                |),
                                [
                                  Value.StructRecord
                                    "core::ops::range::Range"
                                    [
                                      ("start", Value.Integer 0);
                                      ("end_",
                                        M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              [
                                                Ty.path "specs::types::ValueType";
                                                Ty.path "alloc::alloc::Global"
                                              ],
                                            "len",
                                            []
                                          |),
                                          [ M.read (| keep |) ]
                                        |))
                                    ]
                                ]
                              |)
                            |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let iter := M.copy (| γ |) in
                                  M.loop (|
                                    ltac:(M.monadic
                                      (let _ :=
                                        M.match_operator (|
                                          M.alloc (|
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "core::iter::traits::iterator::Iterator",
                                                Ty.apply
                                                  (Ty.path "core::ops::range::Range")
                                                  [ Ty.path "usize" ],
                                                [],
                                                "next",
                                                []
                                              |),
                                              [ iter ]
                                            |)
                                          |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (M.alloc (|
                                                  M.never_to_any (| M.read (| M.break (||) |) |)
                                                |)));
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let γ0_0 :=
                                                  M.SubPointer.get_struct_tuple_field (|
                                                    γ,
                                                    "core::option::Option::Some",
                                                    0
                                                  |) in
                                                let i := M.copy (| γ0_0 |) in
                                                let _ :=
                                                  M.alloc (|
                                                    M.call_closure (|
                                                      M.get_associated_function (|
                                                        Ty.apply
                                                          (Ty.path "alloc::vec::Vec")
                                                          [
                                                            Ty.path
                                                              "specs::mtable::MemoryTableEntry";
                                                            Ty.path "alloc::alloc::Global"
                                                          ],
                                                        "push",
                                                        []
                                                      |),
                                                      [
                                                        ops;
                                                        Value.StructRecord
                                                          "specs::mtable::MemoryTableEntry"
                                                          [
                                                            ("eid", M.read (| eid |));
                                                            ("offset", M.read (| sp |));
                                                            ("ltype",
                                                              Value.StructTuple
                                                                "specs::mtable::LocationType::Stack"
                                                                []);
                                                            ("atype",
                                                              Value.StructTuple
                                                                "specs::mtable::AccessType::Write"
                                                                []);
                                                            ("vtype",
                                                              M.call_closure (|
                                                                M.get_trait_method (|
                                                                  "core::convert::Into",
                                                                  Ty.path "specs::types::ValueType",
                                                                  [ Ty.path "specs::mtable::VarType"
                                                                  ],
                                                                  "into",
                                                                  []
                                                                |),
                                                                [
                                                                  M.read (|
                                                                    M.call_closure (|
                                                                      M.get_trait_method (|
                                                                        "core::ops::index::Index",
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "alloc::vec::Vec")
                                                                          [
                                                                            Ty.path
                                                                              "specs::types::ValueType";
                                                                            Ty.path
                                                                              "alloc::alloc::Global"
                                                                          ],
                                                                        [ Ty.path "usize" ],
                                                                        "index",
                                                                        []
                                                                      |),
                                                                      [
                                                                        M.read (| keep |);
                                                                        M.read (| i |)
                                                                      ]
                                                                    |)
                                                                  |)
                                                                ]
                                                              |));
                                                            ("is_mutable", Value.Bool true);
                                                            ("value",
                                                              M.read (|
                                                                M.call_closure (|
                                                                  M.get_trait_method (|
                                                                    "core::ops::index::Index",
                                                                    Ty.apply
                                                                      (Ty.path "alloc::vec::Vec")
                                                                      [
                                                                        Ty.path "u64";
                                                                        Ty.path
                                                                          "alloc::alloc::Global"
                                                                      ],
                                                                    [ Ty.path "usize" ],
                                                                    "index",
                                                                    []
                                                                  |),
                                                                  [
                                                                    M.read (| keep_values |);
                                                                    M.read (| i |)
                                                                  ]
                                                                |)
                                                              |))
                                                          ]
                                                      ]
                                                    |)
                                                  |) in
                                                let _ :=
                                                  M.write (|
                                                    sp,
                                                    BinOp.Panic.sub (|
                                                      Integer.U32,
                                                      M.read (| sp |),
                                                      Value.Integer 1
                                                    |)
                                                  |) in
                                                M.alloc (| Value.Tuple [] |)))
                                          ]
                                        |) in
                                      M.alloc (| Value.Tuple [] |)))
                                  |)))
                            ]
                          |)) in
                      ops));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_record_field (|
                          γ,
                          "specs::step::StepInfo::Return",
                          "drop"
                        |) in
                      let γ1_1 :=
                        M.SubPointer.get_struct_record_field (|
                          γ,
                          "specs::step::StepInfo::Return",
                          "keep"
                        |) in
                      let γ1_2 :=
                        M.SubPointer.get_struct_record_field (|
                          γ,
                          "specs::step::StepInfo::Return",
                          "keep_values"
                        |) in
                      let drop := M.alloc (| γ1_0 |) in
                      let keep := M.alloc (| γ1_1 |) in
                      let keep_values := M.alloc (| γ1_2 |) in
                      let _ :=
                        M.match_operator (|
                          M.alloc (|
                            Value.Tuple
                              [
                                M.alloc (|
                                  M.call_closure (|
                                    M.get_associated_function (|
                                      Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        [
                                          Ty.path "specs::types::ValueType";
                                          Ty.path "alloc::alloc::Global"
                                        ],
                                      "len",
                                      []
                                    |),
                                    [ M.read (| keep |) ]
                                  |)
                                |);
                                M.alloc (|
                                  M.call_closure (|
                                    M.get_associated_function (|
                                      Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        [ Ty.path "u64"; Ty.path "alloc::alloc::Global" ],
                                      "len",
                                      []
                                    |),
                                    [ M.read (| keep_values |) ]
                                  |)
                                |)
                              ]
                          |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                                let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                                let left_val := M.copy (| γ0_0 |) in
                                let right_val := M.copy (| γ0_1 |) in
                                M.match_operator (|
                                  M.alloc (| Value.Tuple [] |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ :=
                                          M.use
                                            (M.alloc (|
                                              UnOp.Pure.not
                                                (BinOp.Pure.eq
                                                  (M.read (| M.read (| left_val |) |))
                                                  (M.read (| M.read (| right_val |) |)))
                                            |)) in
                                        let _ :=
                                          M.is_constant_or_break_match (|
                                            M.read (| γ |),
                                            Value.Bool true
                                          |) in
                                        M.alloc (|
                                          M.never_to_any (|
                                            M.read (|
                                              let kind :=
                                                M.alloc (|
                                                  Value.StructTuple
                                                    "core::panicking::AssertKind::Eq"
                                                    []
                                                |) in
                                              M.alloc (|
                                                M.call_closure (|
                                                  M.get_function (|
                                                    "core::panicking::assert_failed",
                                                    [ Ty.path "usize"; Ty.path "usize" ]
                                                  |),
                                                  [
                                                    M.read (| kind |);
                                                    M.read (| left_val |);
                                                    M.read (| right_val |);
                                                    Value.StructTuple
                                                      "core::option::Option::None"
                                                      []
                                                  ]
                                                |)
                                              |)
                                            |)
                                          |)
                                        |)));
                                    fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                  ]
                                |)))
                          ]
                        |) in
                      let _ :=
                        M.match_operator (|
                          M.alloc (| Value.Tuple [] |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ :=
                                  M.use
                                    (M.alloc (|
                                      UnOp.Pure.not
                                        (BinOp.Pure.le
                                          (M.call_closure (|
                                            M.get_associated_function (|
                                              Ty.apply
                                                (Ty.path "alloc::vec::Vec")
                                                [
                                                  Ty.path "specs::types::ValueType";
                                                  Ty.path "alloc::alloc::Global"
                                                ],
                                              "len",
                                              []
                                            |),
                                            [ M.read (| keep |) ]
                                          |))
                                          (Value.Integer 1))
                                    |)) in
                                let _ :=
                                  M.is_constant_or_break_match (|
                                    M.read (| γ |),
                                    Value.Bool true
                                  |) in
                                M.alloc (|
                                  M.never_to_any (|
                                    M.call_closure (|
                                      M.get_function (| "core::panicking::panic", [] |),
                                      [
                                        M.read (|
                                          Value.String "assertion failed: keep.len() <= 1"
                                        |)
                                      ]
                                    |)
                                  |)
                                |)));
                            fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                          ]
                        |) in
                      let sp :=
                        M.alloc (|
                          BinOp.Panic.add (|
                            Integer.U32,
                            M.read (| sp_before_execution |),
                            Value.Integer 1
                          |)
                        |) in
                      let ops :=
                        M.alloc (|
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                [
                                  Ty.path "specs::mtable::MemoryTableEntry";
                                  Ty.path "alloc::alloc::Global"
                                ],
                              "new",
                              []
                            |),
                            []
                          |)
                        |) in
                      let _ :=
                        M.use
                          (M.match_operator (|
                            M.alloc (|
                              M.call_closure (|
                                M.get_trait_method (|
                                  "core::iter::traits::collect::IntoIterator",
                                  Ty.apply (Ty.path "core::ops::range::Range") [ Ty.path "usize" ],
                                  [],
                                  "into_iter",
                                  []
                                |),
                                [
                                  Value.StructRecord
                                    "core::ops::range::Range"
                                    [
                                      ("start", Value.Integer 0);
                                      ("end_",
                                        M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              [
                                                Ty.path "specs::types::ValueType";
                                                Ty.path "alloc::alloc::Global"
                                              ],
                                            "len",
                                            []
                                          |),
                                          [ M.read (| keep |) ]
                                        |))
                                    ]
                                ]
                              |)
                            |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let iter := M.copy (| γ |) in
                                  M.loop (|
                                    ltac:(M.monadic
                                      (let _ :=
                                        M.match_operator (|
                                          M.alloc (|
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "core::iter::traits::iterator::Iterator",
                                                Ty.apply
                                                  (Ty.path "core::ops::range::Range")
                                                  [ Ty.path "usize" ],
                                                [],
                                                "next",
                                                []
                                              |),
                                              [ iter ]
                                            |)
                                          |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (M.alloc (|
                                                  M.never_to_any (| M.read (| M.break (||) |) |)
                                                |)));
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let γ0_0 :=
                                                  M.SubPointer.get_struct_tuple_field (|
                                                    γ,
                                                    "core::option::Option::Some",
                                                    0
                                                  |) in
                                                let i := M.copy (| γ0_0 |) in
                                                let _ :=
                                                  M.alloc (|
                                                    M.call_closure (|
                                                      M.get_associated_function (|
                                                        Ty.apply
                                                          (Ty.path "alloc::vec::Vec")
                                                          [
                                                            Ty.path
                                                              "specs::mtable::MemoryTableEntry";
                                                            Ty.path "alloc::alloc::Global"
                                                          ],
                                                        "push",
                                                        []
                                                      |),
                                                      [
                                                        ops;
                                                        Value.StructRecord
                                                          "specs::mtable::MemoryTableEntry"
                                                          [
                                                            ("eid", M.read (| eid |));
                                                            ("offset", M.read (| sp |));
                                                            ("ltype",
                                                              Value.StructTuple
                                                                "specs::mtable::LocationType::Stack"
                                                                []);
                                                            ("atype",
                                                              Value.StructTuple
                                                                "specs::mtable::AccessType::Read"
                                                                []);
                                                            ("vtype",
                                                              M.call_closure (|
                                                                M.get_trait_method (|
                                                                  "core::convert::Into",
                                                                  Ty.path "specs::types::ValueType",
                                                                  [ Ty.path "specs::mtable::VarType"
                                                                  ],
                                                                  "into",
                                                                  []
                                                                |),
                                                                [
                                                                  M.read (|
                                                                    M.call_closure (|
                                                                      M.get_trait_method (|
                                                                        "core::ops::index::Index",
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "alloc::vec::Vec")
                                                                          [
                                                                            Ty.path
                                                                              "specs::types::ValueType";
                                                                            Ty.path
                                                                              "alloc::alloc::Global"
                                                                          ],
                                                                        [ Ty.path "usize" ],
                                                                        "index",
                                                                        []
                                                                      |),
                                                                      [
                                                                        M.read (| keep |);
                                                                        M.read (| i |)
                                                                      ]
                                                                    |)
                                                                  |)
                                                                ]
                                                              |));
                                                            ("is_mutable", Value.Bool true);
                                                            ("value",
                                                              M.read (|
                                                                M.call_closure (|
                                                                  M.get_trait_method (|
                                                                    "core::ops::index::Index",
                                                                    Ty.apply
                                                                      (Ty.path "alloc::vec::Vec")
                                                                      [
                                                                        Ty.path "u64";
                                                                        Ty.path
                                                                          "alloc::alloc::Global"
                                                                      ],
                                                                    [ Ty.path "usize" ],
                                                                    "index",
                                                                    []
                                                                  |),
                                                                  [
                                                                    M.read (| keep_values |);
                                                                    M.read (| i |)
                                                                  ]
                                                                |)
                                                              |))
                                                          ]
                                                      ]
                                                    |)
                                                  |) in
                                                let _ :=
                                                  M.write (|
                                                    sp,
                                                    BinOp.Panic.add (|
                                                      Integer.U32,
                                                      M.read (| sp |),
                                                      Value.Integer 1
                                                    |)
                                                  |) in
                                                M.alloc (| Value.Tuple [] |)))
                                          ]
                                        |) in
                                      M.alloc (| Value.Tuple [] |)))
                                  |)))
                            ]
                          |)) in
                      let _ :=
                        M.alloc (|
                          M.call_closure (|
                            M.get_trait_method (|
                              "core::ops::arith::AddAssign",
                              Ty.path "u32",
                              [ Ty.apply (Ty.path "&") [ Ty.path "u32" ] ],
                              "add_assign",
                              []
                            |),
                            [ sp; M.read (| drop |) ]
                          |)
                        |) in
                      let _ :=
                        let β := sp in
                        M.write (|
                          β,
                          BinOp.Panic.sub (| Integer.U32, M.read (| β |), Value.Integer 1 |)
                        |) in
                      let _ :=
                        M.use
                          (M.match_operator (|
                            M.alloc (|
                              M.call_closure (|
                                M.get_trait_method (|
                                  "core::iter::traits::collect::IntoIterator",
                                  Ty.apply (Ty.path "core::ops::range::Range") [ Ty.path "usize" ],
                                  [],
                                  "into_iter",
                                  []
                                |),
                                [
                                  Value.StructRecord
                                    "core::ops::range::Range"
                                    [
                                      ("start", Value.Integer 0);
                                      ("end_",
                                        M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              [
                                                Ty.path "specs::types::ValueType";
                                                Ty.path "alloc::alloc::Global"
                                              ],
                                            "len",
                                            []
                                          |),
                                          [ M.read (| keep |) ]
                                        |))
                                    ]
                                ]
                              |)
                            |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let iter := M.copy (| γ |) in
                                  M.loop (|
                                    ltac:(M.monadic
                                      (let _ :=
                                        M.match_operator (|
                                          M.alloc (|
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "core::iter::traits::iterator::Iterator",
                                                Ty.apply
                                                  (Ty.path "core::ops::range::Range")
                                                  [ Ty.path "usize" ],
                                                [],
                                                "next",
                                                []
                                              |),
                                              [ iter ]
                                            |)
                                          |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (M.alloc (|
                                                  M.never_to_any (| M.read (| M.break (||) |) |)
                                                |)));
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let γ0_0 :=
                                                  M.SubPointer.get_struct_tuple_field (|
                                                    γ,
                                                    "core::option::Option::Some",
                                                    0
                                                  |) in
                                                let i := M.copy (| γ0_0 |) in
                                                let _ :=
                                                  M.alloc (|
                                                    M.call_closure (|
                                                      M.get_associated_function (|
                                                        Ty.apply
                                                          (Ty.path "alloc::vec::Vec")
                                                          [
                                                            Ty.path
                                                              "specs::mtable::MemoryTableEntry";
                                                            Ty.path "alloc::alloc::Global"
                                                          ],
                                                        "push",
                                                        []
                                                      |),
                                                      [
                                                        ops;
                                                        Value.StructRecord
                                                          "specs::mtable::MemoryTableEntry"
                                                          [
                                                            ("eid", M.read (| eid |));
                                                            ("offset", M.read (| sp |));
                                                            ("ltype",
                                                              Value.StructTuple
                                                                "specs::mtable::LocationType::Stack"
                                                                []);
                                                            ("atype",
                                                              Value.StructTuple
                                                                "specs::mtable::AccessType::Write"
                                                                []);
                                                            ("vtype",
                                                              M.call_closure (|
                                                                M.get_trait_method (|
                                                                  "core::convert::Into",
                                                                  Ty.path "specs::types::ValueType",
                                                                  [ Ty.path "specs::mtable::VarType"
                                                                  ],
                                                                  "into",
                                                                  []
                                                                |),
                                                                [
                                                                  M.read (|
                                                                    M.call_closure (|
                                                                      M.get_trait_method (|
                                                                        "core::ops::index::Index",
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "alloc::vec::Vec")
                                                                          [
                                                                            Ty.path
                                                                              "specs::types::ValueType";
                                                                            Ty.path
                                                                              "alloc::alloc::Global"
                                                                          ],
                                                                        [ Ty.path "usize" ],
                                                                        "index",
                                                                        []
                                                                      |),
                                                                      [
                                                                        M.read (| keep |);
                                                                        M.read (| i |)
                                                                      ]
                                                                    |)
                                                                  |)
                                                                ]
                                                              |));
                                                            ("is_mutable", Value.Bool true);
                                                            ("value",
                                                              M.read (|
                                                                M.call_closure (|
                                                                  M.get_trait_method (|
                                                                    "core::ops::index::Index",
                                                                    Ty.apply
                                                                      (Ty.path "alloc::vec::Vec")
                                                                      [
                                                                        Ty.path "u64";
                                                                        Ty.path
                                                                          "alloc::alloc::Global"
                                                                      ],
                                                                    [ Ty.path "usize" ],
                                                                    "index",
                                                                    []
                                                                  |),
                                                                  [
                                                                    M.read (| keep_values |);
                                                                    M.read (| i |)
                                                                  ]
                                                                |)
                                                              |))
                                                          ]
                                                      ]
                                                    |)
                                                  |) in
                                                let _ :=
                                                  M.write (|
                                                    sp,
                                                    BinOp.Panic.sub (|
                                                      Integer.U32,
                                                      M.read (| sp |),
                                                      Value.Integer 1
                                                    |)
                                                  |) in
                                                M.alloc (| Value.Tuple [] |)))
                                          ]
                                        |) in
                                      M.alloc (| Value.Tuple [] |)))
                                  |)))
                            ]
                          |)) in
                      ops));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      M.alloc (|
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              [
                                Ty.path "specs::mtable::MemoryTableEntry";
                                Ty.path "alloc::alloc::Global"
                              ],
                            "new",
                            []
                          |),
                          []
                        |)
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_record_field (|
                          γ,
                          "specs::step::StepInfo::Select",
                          "val1"
                        |) in
                      let γ1_1 :=
                        M.SubPointer.get_struct_record_field (|
                          γ,
                          "specs::step::StepInfo::Select",
                          "val2"
                        |) in
                      let γ1_2 :=
                        M.SubPointer.get_struct_record_field (|
                          γ,
                          "specs::step::StepInfo::Select",
                          "cond"
                        |) in
                      let γ1_3 :=
                        M.SubPointer.get_struct_record_field (|
                          γ,
                          "specs::step::StepInfo::Select",
                          "result"
                        |) in
                      let γ1_4 :=
                        M.SubPointer.get_struct_record_field (|
                          γ,
                          "specs::step::StepInfo::Select",
                          "vtype"
                        |) in
                      let val1 := M.alloc (| γ1_0 |) in
                      let val2 := M.alloc (| γ1_1 |) in
                      let cond := M.alloc (| γ1_2 |) in
                      let result := M.alloc (| γ1_3 |) in
                      let vtype := M.alloc (| γ1_4 |) in
                      let sp :=
                        M.alloc (|
                          BinOp.Panic.add (|
                            Integer.U32,
                            M.read (| sp_before_execution |),
                            Value.Integer 1
                          |)
                        |) in
                      let ops :=
                        M.alloc (|
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                [
                                  Ty.path "specs::mtable::MemoryTableEntry";
                                  Ty.path "alloc::alloc::Global"
                                ],
                              "new",
                              []
                            |),
                            []
                          |)
                        |) in
                      let _ :=
                        M.alloc (|
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                [
                                  Ty.path "specs::mtable::MemoryTableEntry";
                                  Ty.path "alloc::alloc::Global"
                                ],
                              "push",
                              []
                            |),
                            [
                              ops;
                              Value.StructRecord
                                "specs::mtable::MemoryTableEntry"
                                [
                                  ("eid", M.read (| eid |));
                                  ("offset", M.read (| sp |));
                                  ("ltype",
                                    Value.StructTuple "specs::mtable::LocationType::Stack" []);
                                  ("atype", Value.StructTuple "specs::mtable::AccessType::Read" []);
                                  ("vtype", Value.StructTuple "specs::mtable::VarType::I32" []);
                                  ("is_mutable", Value.Bool true);
                                  ("value", M.read (| M.read (| cond |) |))
                                ]
                            ]
                          |)
                        |) in
                      let _ :=
                        M.write (|
                          sp,
                          BinOp.Panic.add (| Integer.U32, M.read (| sp |), Value.Integer 1 |)
                        |) in
                      let _ :=
                        M.alloc (|
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                [
                                  Ty.path "specs::mtable::MemoryTableEntry";
                                  Ty.path "alloc::alloc::Global"
                                ],
                              "push",
                              []
                            |),
                            [
                              ops;
                              Value.StructRecord
                                "specs::mtable::MemoryTableEntry"
                                [
                                  ("eid", M.read (| eid |));
                                  ("offset", M.read (| sp |));
                                  ("ltype",
                                    Value.StructTuple "specs::mtable::LocationType::Stack" []);
                                  ("atype", Value.StructTuple "specs::mtable::AccessType::Read" []);
                                  ("vtype", M.read (| M.read (| vtype |) |));
                                  ("is_mutable", Value.Bool true);
                                  ("value", M.read (| M.read (| val2 |) |))
                                ]
                            ]
                          |)
                        |) in
                      let _ :=
                        M.write (|
                          sp,
                          BinOp.Panic.add (| Integer.U32, M.read (| sp |), Value.Integer 1 |)
                        |) in
                      let _ :=
                        M.alloc (|
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                [
                                  Ty.path "specs::mtable::MemoryTableEntry";
                                  Ty.path "alloc::alloc::Global"
                                ],
                              "push",
                              []
                            |),
                            [
                              ops;
                              Value.StructRecord
                                "specs::mtable::MemoryTableEntry"
                                [
                                  ("eid", M.read (| eid |));
                                  ("offset", M.read (| sp |));
                                  ("ltype",
                                    Value.StructTuple "specs::mtable::LocationType::Stack" []);
                                  ("atype", Value.StructTuple "specs::mtable::AccessType::Read" []);
                                  ("vtype", M.read (| M.read (| vtype |) |));
                                  ("is_mutable", Value.Bool true);
                                  ("value", M.read (| M.read (| val1 |) |))
                                ]
                            ]
                          |)
                        |) in
                      let _ :=
                        M.alloc (|
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                [
                                  Ty.path "specs::mtable::MemoryTableEntry";
                                  Ty.path "alloc::alloc::Global"
                                ],
                              "push",
                              []
                            |),
                            [
                              ops;
                              Value.StructRecord
                                "specs::mtable::MemoryTableEntry"
                                [
                                  ("eid", M.read (| eid |));
                                  ("offset", M.read (| sp |));
                                  ("ltype",
                                    Value.StructTuple "specs::mtable::LocationType::Stack" []);
                                  ("atype",
                                    Value.StructTuple "specs::mtable::AccessType::Write" []);
                                  ("vtype", M.read (| M.read (| vtype |) |));
                                  ("is_mutable", Value.Bool true);
                                  ("value", M.read (| M.read (| result |) |))
                                ]
                            ]
                          |)
                        |) in
                      ops));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_record_field (|
                          γ,
                          "specs::step::StepInfo::Call",
                          "index"
                        |) in
                      M.alloc (|
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              [
                                Ty.path "specs::mtable::MemoryTableEntry";
                                Ty.path "alloc::alloc::Global"
                              ],
                            "new",
                            []
                          |),
                          []
                        |)
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_record_field (|
                          γ,
                          "specs::step::StepInfo::CallIndirect",
                          "offset"
                        |) in
                      let offset := M.alloc (| γ1_0 |) in
                      let stack_read :=
                        M.alloc (|
                          Value.StructRecord
                            "specs::mtable::MemoryTableEntry"
                            [
                              ("eid", M.read (| eid |));
                              ("offset",
                                BinOp.Panic.add (|
                                  Integer.U32,
                                  M.read (| sp_before_execution |),
                                  Value.Integer 1
                                |));
                              ("ltype", Value.StructTuple "specs::mtable::LocationType::Stack" []);
                              ("atype", Value.StructTuple "specs::mtable::AccessType::Read" []);
                              ("vtype", Value.StructTuple "specs::mtable::VarType::I32" []);
                              ("is_mutable", Value.Bool true);
                              ("value", M.rust_cast (M.read (| M.read (| offset |) |)))
                            ]
                        |) in
                      M.alloc (|
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path "slice")
                              [ Ty.path "specs::mtable::MemoryTableEntry" ],
                            "into_vec",
                            [ Ty.path "alloc::alloc::Global" ]
                          |),
                          [
                            (* Unsize *)
                            M.pointer_coercion
                              (M.read (|
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.apply
                                      (Ty.path "alloc::boxed::Box")
                                      [
                                        Ty.apply
                                          (Ty.path "array")
                                          [ Ty.path "specs::mtable::MemoryTableEntry" ];
                                        Ty.path "alloc::alloc::Global"
                                      ],
                                    "new",
                                    []
                                  |),
                                  [ M.alloc (| Value.Array [ M.read (| stack_read |) ] |) ]
                                |)
                              |))
                          ]
                        |)
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_record_field (|
                          γ,
                          "specs::step::StepInfo::CallHost",
                          "args"
                        |) in
                      let γ1_1 :=
                        M.SubPointer.get_struct_record_field (|
                          γ,
                          "specs::step::StepInfo::CallHost",
                          "ret_val"
                        |) in
                      let γ1_2 :=
                        M.SubPointer.get_struct_record_field (|
                          γ,
                          "specs::step::StepInfo::CallHost",
                          "signature"
                        |) in
                      let args := M.alloc (| γ1_0 |) in
                      let ret_val := M.alloc (| γ1_1 |) in
                      let signature := M.alloc (| γ1_2 |) in
                      let mops :=
                        M.alloc (|
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                [
                                  Ty.path "specs::mtable::MemoryTableEntry";
                                  Ty.path "alloc::alloc::Global"
                                ],
                              "new",
                              []
                            |),
                            []
                          |)
                        |) in
                      let sp := M.copy (| sp_before_execution |) in
                      let _ :=
                        M.use
                          (M.match_operator (|
                            M.alloc (|
                              M.call_closure (|
                                M.get_trait_method (|
                                  "core::iter::traits::collect::IntoIterator",
                                  Ty.apply
                                    (Ty.path "core::iter::adapters::enumerate::Enumerate")
                                    [
                                      Ty.apply
                                        (Ty.path "core::iter::adapters::zip::Zip")
                                        [
                                          Ty.apply
                                            (Ty.path "core::slice::iter::Iter")
                                            [ Ty.path "specs::types::ValueType" ];
                                          Ty.apply
                                            (Ty.path "core::slice::iter::Iter")
                                            [ Ty.path "u64" ]
                                        ]
                                    ],
                                  [],
                                  "into_iter",
                                  []
                                |),
                                [
                                  M.call_closure (|
                                    M.get_trait_method (|
                                      "core::iter::traits::iterator::Iterator",
                                      Ty.apply
                                        (Ty.path "core::iter::adapters::zip::Zip")
                                        [
                                          Ty.apply
                                            (Ty.path "core::slice::iter::Iter")
                                            [ Ty.path "specs::types::ValueType" ];
                                          Ty.apply
                                            (Ty.path "core::slice::iter::Iter")
                                            [ Ty.path "u64" ]
                                        ],
                                      [],
                                      "enumerate",
                                      []
                                    |),
                                    [
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "core::iter::traits::iterator::Iterator",
                                          Ty.apply
                                            (Ty.path "core::slice::iter::Iter")
                                            [ Ty.path "specs::types::ValueType" ],
                                          [],
                                          "zip",
                                          [
                                            Ty.apply
                                              (Ty.path "core::slice::iter::Iter")
                                              [ Ty.path "u64" ]
                                          ]
                                        |),
                                        [
                                          M.call_closure (|
                                            M.get_associated_function (|
                                              Ty.apply
                                                (Ty.path "slice")
                                                [ Ty.path "specs::types::ValueType" ],
                                              "iter",
                                              []
                                            |),
                                            [
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "core::ops::deref::Deref",
                                                  Ty.apply
                                                    (Ty.path "alloc::vec::Vec")
                                                    [
                                                      Ty.path "specs::types::ValueType";
                                                      Ty.path "alloc::alloc::Global"
                                                    ],
                                                  [],
                                                  "deref",
                                                  []
                                                |),
                                                [
                                                  M.SubPointer.get_struct_record_field (|
                                                    M.read (| signature |),
                                                    "specs::host_function::Signature",
                                                    "params"
                                                  |)
                                                ]
                                              |)
                                            ]
                                          |);
                                          M.call_closure (|
                                            M.get_associated_function (|
                                              Ty.apply (Ty.path "slice") [ Ty.path "u64" ],
                                              "iter",
                                              []
                                            |),
                                            [
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "core::ops::deref::Deref",
                                                  Ty.apply
                                                    (Ty.path "alloc::vec::Vec")
                                                    [ Ty.path "u64"; Ty.path "alloc::alloc::Global"
                                                    ],
                                                  [],
                                                  "deref",
                                                  []
                                                |),
                                                [ M.read (| args |) ]
                                              |)
                                            ]
                                          |)
                                        ]
                                      |)
                                    ]
                                  |)
                                ]
                              |)
                            |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let iter := M.copy (| γ |) in
                                  M.loop (|
                                    ltac:(M.monadic
                                      (let _ :=
                                        M.match_operator (|
                                          M.alloc (|
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "core::iter::traits::iterator::Iterator",
                                                Ty.apply
                                                  (Ty.path
                                                    "core::iter::adapters::enumerate::Enumerate")
                                                  [
                                                    Ty.apply
                                                      (Ty.path "core::iter::adapters::zip::Zip")
                                                      [
                                                        Ty.apply
                                                          (Ty.path "core::slice::iter::Iter")
                                                          [ Ty.path "specs::types::ValueType" ];
                                                        Ty.apply
                                                          (Ty.path "core::slice::iter::Iter")
                                                          [ Ty.path "u64" ]
                                                      ]
                                                  ],
                                                [],
                                                "next",
                                                []
                                              |),
                                              [ iter ]
                                            |)
                                          |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (M.alloc (|
                                                  M.never_to_any (| M.read (| M.break (||) |) |)
                                                |)));
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let γ0_0 :=
                                                  M.SubPointer.get_struct_tuple_field (|
                                                    γ,
                                                    "core::option::Option::Some",
                                                    0
                                                  |) in
                                                let γ1_0 :=
                                                  M.SubPointer.get_tuple_field (| γ0_0, 0 |) in
                                                let γ1_1 :=
                                                  M.SubPointer.get_tuple_field (| γ0_0, 1 |) in
                                                let i := M.copy (| γ1_0 |) in
                                                let γ2_0 :=
                                                  M.SubPointer.get_tuple_field (| γ1_1, 0 |) in
                                                let γ2_1 :=
                                                  M.SubPointer.get_tuple_field (| γ1_1, 1 |) in
                                                let ty := M.copy (| γ2_0 |) in
                                                let val := M.copy (| γ2_1 |) in
                                                let _ :=
                                                  M.alloc (|
                                                    M.call_closure (|
                                                      M.get_associated_function (|
                                                        Ty.apply
                                                          (Ty.path "alloc::vec::Vec")
                                                          [
                                                            Ty.path
                                                              "specs::mtable::MemoryTableEntry";
                                                            Ty.path "alloc::alloc::Global"
                                                          ],
                                                        "push",
                                                        []
                                                      |),
                                                      [
                                                        mops;
                                                        Value.StructRecord
                                                          "specs::mtable::MemoryTableEntry"
                                                          [
                                                            ("eid", M.read (| eid |));
                                                            ("offset",
                                                              BinOp.Panic.sub (|
                                                                Integer.U32,
                                                                BinOp.Panic.add (|
                                                                  Integer.U32,
                                                                  M.read (| sp_before_execution |),
                                                                  M.rust_cast
                                                                    (M.call_closure (|
                                                                      M.get_associated_function (|
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "alloc::vec::Vec")
                                                                          [
                                                                            Ty.path "u64";
                                                                            Ty.path
                                                                              "alloc::alloc::Global"
                                                                          ],
                                                                        "len",
                                                                        []
                                                                      |),
                                                                      [ M.read (| args |) ]
                                                                    |))
                                                                |),
                                                                M.rust_cast (M.read (| i |))
                                                              |));
                                                            ("ltype",
                                                              Value.StructTuple
                                                                "specs::mtable::LocationType::Stack"
                                                                []);
                                                            ("atype",
                                                              Value.StructTuple
                                                                "specs::mtable::AccessType::Read"
                                                                []);
                                                            ("vtype",
                                                              M.call_closure (|
                                                                M.get_trait_method (|
                                                                  "core::convert::Into",
                                                                  Ty.path "specs::types::ValueType",
                                                                  [ Ty.path "specs::mtable::VarType"
                                                                  ],
                                                                  "into",
                                                                  []
                                                                |),
                                                                [ M.read (| M.read (| ty |) |) ]
                                                              |));
                                                            ("is_mutable", Value.Bool true);
                                                            ("value", M.read (| M.read (| val |) |))
                                                          ]
                                                      ]
                                                    |)
                                                  |) in
                                                M.alloc (| Value.Tuple [] |)))
                                          ]
                                        |) in
                                      M.alloc (| Value.Tuple [] |)))
                                  |)))
                            ]
                          |)) in
                      let _ :=
                        M.write (|
                          sp,
                          BinOp.Panic.add (|
                            Integer.U32,
                            M.read (| sp |),
                            M.rust_cast
                              (M.call_closure (|
                                M.get_associated_function (|
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    [ Ty.path "u64"; Ty.path "alloc::alloc::Global" ],
                                  "len",
                                  []
                                |),
                                [ M.read (| args |) ]
                              |))
                          |)
                        |) in
                      let _ :=
                        M.match_operator (|
                          M.alloc (| Value.Tuple [] |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ :=
                                  M.SubPointer.get_struct_record_field (|
                                    M.read (| signature |),
                                    "specs::host_function::Signature",
                                    "return_type"
                                  |) in
                                let γ0_0 :=
                                  M.SubPointer.get_struct_tuple_field (|
                                    γ,
                                    "core::option::Option::Some",
                                    0
                                  |) in
                                let ty := M.copy (| γ0_0 |) in
                                let _ :=
                                  M.alloc (|
                                    M.call_closure (|
                                      M.get_associated_function (|
                                        Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          [
                                            Ty.path "specs::mtable::MemoryTableEntry";
                                            Ty.path "alloc::alloc::Global"
                                          ],
                                        "push",
                                        []
                                      |),
                                      [
                                        mops;
                                        Value.StructRecord
                                          "specs::mtable::MemoryTableEntry"
                                          [
                                            ("eid", M.read (| eid |));
                                            ("offset", M.read (| sp |));
                                            ("ltype",
                                              Value.StructTuple
                                                "specs::mtable::LocationType::Stack"
                                                []);
                                            ("atype",
                                              Value.StructTuple
                                                "specs::mtable::AccessType::Write"
                                                []);
                                            ("vtype",
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "core::convert::Into",
                                                  Ty.path "specs::types::ValueType",
                                                  [ Ty.path "specs::mtable::VarType" ],
                                                  "into",
                                                  []
                                                |),
                                                [ M.read (| ty |) ]
                                              |));
                                            ("is_mutable", Value.Bool true);
                                            ("value",
                                              M.call_closure (|
                                                M.get_associated_function (|
                                                  Ty.apply
                                                    (Ty.path "core::option::Option")
                                                    [ Ty.path "u64" ],
                                                  "unwrap",
                                                  []
                                                |),
                                                [ M.read (| M.read (| ret_val |) |) ]
                                              |))
                                          ]
                                      ]
                                    |)
                                  |) in
                                M.alloc (| Value.Tuple [] |)));
                            fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                          ]
                        |) in
                      mops));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_record_field (|
                          γ,
                          "specs::step::StepInfo::ExternalHostCall",
                          "value"
                        |) in
                      let γ1_1 :=
                        M.SubPointer.get_struct_record_field (|
                          γ,
                          "specs::step::StepInfo::ExternalHostCall",
                          "sig"
                        |) in
                      let value := M.alloc (| γ1_0 |) in
                      let sig := M.alloc (| γ1_1 |) in
                      M.match_operator (|
                        sig,
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ := M.read (| γ |) in
                              let stack_read :=
                                M.alloc (|
                                  Value.StructRecord
                                    "specs::mtable::MemoryTableEntry"
                                    [
                                      ("eid", M.read (| eid |));
                                      ("offset",
                                        BinOp.Panic.add (|
                                          Integer.U32,
                                          M.read (| sp_before_execution |),
                                          Value.Integer 1
                                        |));
                                      ("ltype",
                                        Value.StructTuple "specs::mtable::LocationType::Stack" []);
                                      ("atype",
                                        Value.StructTuple "specs::mtable::AccessType::Read" []);
                                      ("vtype", Value.StructTuple "specs::mtable::VarType::I64" []);
                                      ("is_mutable", Value.Bool true);
                                      ("value",
                                        M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.apply
                                              (Ty.path "core::option::Option")
                                              [ Ty.path "u64" ],
                                            "unwrap",
                                            []
                                          |),
                                          [ M.read (| M.read (| value |) |) ]
                                        |))
                                    ]
                                |) in
                              M.alloc (|
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.apply
                                      (Ty.path "slice")
                                      [ Ty.path "specs::mtable::MemoryTableEntry" ],
                                    "into_vec",
                                    [ Ty.path "alloc::alloc::Global" ]
                                  |),
                                  [
                                    (* Unsize *)
                                    M.pointer_coercion
                                      (M.read (|
                                        M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.apply
                                              (Ty.path "alloc::boxed::Box")
                                              [
                                                Ty.apply
                                                  (Ty.path "array")
                                                  [ Ty.path "specs::mtable::MemoryTableEntry" ];
                                                Ty.path "alloc::alloc::Global"
                                              ],
                                            "new",
                                            []
                                          |),
                                          [ M.alloc (| Value.Array [ M.read (| stack_read |) ] |) ]
                                        |)
                                      |))
                                  ]
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ := M.read (| γ |) in
                              let stack_write :=
                                M.alloc (|
                                  Value.StructRecord
                                    "specs::mtable::MemoryTableEntry"
                                    [
                                      ("eid", M.read (| eid |));
                                      ("offset", M.read (| sp_before_execution |));
                                      ("ltype",
                                        Value.StructTuple "specs::mtable::LocationType::Stack" []);
                                      ("atype",
                                        Value.StructTuple "specs::mtable::AccessType::Write" []);
                                      ("vtype", Value.StructTuple "specs::mtable::VarType::I64" []);
                                      ("is_mutable", Value.Bool true);
                                      ("value",
                                        M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.apply
                                              (Ty.path "core::option::Option")
                                              [ Ty.path "u64" ],
                                            "unwrap",
                                            []
                                          |),
                                          [ M.read (| M.read (| value |) |) ]
                                        |))
                                    ]
                                |) in
                              M.alloc (|
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.apply
                                      (Ty.path "slice")
                                      [ Ty.path "specs::mtable::MemoryTableEntry" ],
                                    "into_vec",
                                    [ Ty.path "alloc::alloc::Global" ]
                                  |),
                                  [
                                    (* Unsize *)
                                    M.pointer_coercion
                                      (M.read (|
                                        M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.apply
                                              (Ty.path "alloc::boxed::Box")
                                              [
                                                Ty.apply
                                                  (Ty.path "array")
                                                  [ Ty.path "specs::mtable::MemoryTableEntry" ];
                                                Ty.path "alloc::alloc::Global"
                                              ],
                                            "new",
                                            []
                                          |),
                                          [ M.alloc (| Value.Array [ M.read (| stack_write |) ] |) ]
                                        |)
                                      |))
                                  ]
                                |)
                              |)))
                        ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_record_field (|
                          γ,
                          "specs::step::StepInfo::GetLocal",
                          "vtype"
                        |) in
                      let γ1_1 :=
                        M.SubPointer.get_struct_record_field (|
                          γ,
                          "specs::step::StepInfo::GetLocal",
                          "depth"
                        |) in
                      let γ1_2 :=
                        M.SubPointer.get_struct_record_field (|
                          γ,
                          "specs::step::StepInfo::GetLocal",
                          "value"
                        |) in
                      let vtype := M.alloc (| γ1_0 |) in
                      let depth := M.alloc (| γ1_1 |) in
                      let value := M.alloc (| γ1_2 |) in
                      let read :=
                        M.alloc (|
                          Value.StructRecord
                            "specs::mtable::MemoryTableEntry"
                            [
                              ("eid", M.read (| eid |));
                              ("offset",
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "core::ops::arith::Add",
                                    Ty.path "u32",
                                    [ Ty.apply (Ty.path "&") [ Ty.path "u32" ] ],
                                    "add",
                                    []
                                  |),
                                  [ M.read (| sp_before_execution |); M.read (| depth |) ]
                                |));
                              ("ltype", Value.StructTuple "specs::mtable::LocationType::Stack" []);
                              ("atype", Value.StructTuple "specs::mtable::AccessType::Read" []);
                              ("vtype", M.read (| M.read (| vtype |) |));
                              ("is_mutable", Value.Bool true);
                              ("value", M.read (| M.read (| value |) |))
                            ]
                        |) in
                      let write :=
                        M.alloc (|
                          Value.StructRecord
                            "specs::mtable::MemoryTableEntry"
                            [
                              ("eid", M.read (| eid |));
                              ("offset", M.read (| sp_before_execution |));
                              ("ltype", Value.StructTuple "specs::mtable::LocationType::Stack" []);
                              ("atype", Value.StructTuple "specs::mtable::AccessType::Write" []);
                              ("vtype", M.read (| M.read (| vtype |) |));
                              ("is_mutable", Value.Bool true);
                              ("value", M.read (| M.read (| value |) |))
                            ]
                        |) in
                      M.alloc (|
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path "slice")
                              [ Ty.path "specs::mtable::MemoryTableEntry" ],
                            "into_vec",
                            [ Ty.path "alloc::alloc::Global" ]
                          |),
                          [
                            (* Unsize *)
                            M.pointer_coercion
                              (M.read (|
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.apply
                                      (Ty.path "alloc::boxed::Box")
                                      [
                                        Ty.apply
                                          (Ty.path "array")
                                          [ Ty.path "specs::mtable::MemoryTableEntry" ];
                                        Ty.path "alloc::alloc::Global"
                                      ],
                                    "new",
                                    []
                                  |),
                                  [
                                    M.alloc (|
                                      Value.Array [ M.read (| read |); M.read (| write |) ]
                                    |)
                                  ]
                                |)
                              |))
                          ]
                        |)
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_record_field (|
                          γ,
                          "specs::step::StepInfo::SetLocal",
                          "vtype"
                        |) in
                      let γ1_1 :=
                        M.SubPointer.get_struct_record_field (|
                          γ,
                          "specs::step::StepInfo::SetLocal",
                          "depth"
                        |) in
                      let γ1_2 :=
                        M.SubPointer.get_struct_record_field (|
                          γ,
                          "specs::step::StepInfo::SetLocal",
                          "value"
                        |) in
                      let vtype := M.alloc (| γ1_0 |) in
                      let depth := M.alloc (| γ1_1 |) in
                      let value := M.alloc (| γ1_2 |) in
                      let sp := M.copy (| sp_before_execution |) in
                      let read :=
                        M.alloc (|
                          Value.StructRecord
                            "specs::mtable::MemoryTableEntry"
                            [
                              ("eid", M.read (| eid |));
                              ("offset",
                                BinOp.Panic.add (|
                                  Integer.U32,
                                  M.read (| sp |),
                                  Value.Integer 1
                                |));
                              ("ltype", Value.StructTuple "specs::mtable::LocationType::Stack" []);
                              ("atype", Value.StructTuple "specs::mtable::AccessType::Read" []);
                              ("vtype", M.read (| M.read (| vtype |) |));
                              ("is_mutable", Value.Bool true);
                              ("value", M.read (| M.read (| value |) |))
                            ]
                        |) in
                      let _ :=
                        let β := sp in
                        M.write (|
                          β,
                          BinOp.Panic.add (| Integer.U32, M.read (| β |), Value.Integer 1 |)
                        |) in
                      let write :=
                        M.alloc (|
                          Value.StructRecord
                            "specs::mtable::MemoryTableEntry"
                            [
                              ("eid", M.read (| eid |));
                              ("offset",
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "core::ops::arith::Add",
                                    Ty.path "u32",
                                    [ Ty.apply (Ty.path "&") [ Ty.path "u32" ] ],
                                    "add",
                                    []
                                  |),
                                  [ M.read (| sp |); M.read (| depth |) ]
                                |));
                              ("ltype", Value.StructTuple "specs::mtable::LocationType::Stack" []);
                              ("atype", Value.StructTuple "specs::mtable::AccessType::Write" []);
                              ("vtype", M.read (| M.read (| vtype |) |));
                              ("is_mutable", Value.Bool true);
                              ("value", M.read (| M.read (| value |) |))
                            ]
                        |) in
                      M.alloc (|
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path "slice")
                              [ Ty.path "specs::mtable::MemoryTableEntry" ],
                            "into_vec",
                            [ Ty.path "alloc::alloc::Global" ]
                          |),
                          [
                            (* Unsize *)
                            M.pointer_coercion
                              (M.read (|
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.apply
                                      (Ty.path "alloc::boxed::Box")
                                      [
                                        Ty.apply
                                          (Ty.path "array")
                                          [ Ty.path "specs::mtable::MemoryTableEntry" ];
                                        Ty.path "alloc::alloc::Global"
                                      ],
                                    "new",
                                    []
                                  |),
                                  [
                                    M.alloc (|
                                      Value.Array [ M.read (| read |); M.read (| write |) ]
                                    |)
                                  ]
                                |)
                              |))
                          ]
                        |)
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_record_field (|
                          γ,
                          "specs::step::StepInfo::TeeLocal",
                          "vtype"
                        |) in
                      let γ1_1 :=
                        M.SubPointer.get_struct_record_field (|
                          γ,
                          "specs::step::StepInfo::TeeLocal",
                          "depth"
                        |) in
                      let γ1_2 :=
                        M.SubPointer.get_struct_record_field (|
                          γ,
                          "specs::step::StepInfo::TeeLocal",
                          "value"
                        |) in
                      let vtype := M.alloc (| γ1_0 |) in
                      let depth := M.alloc (| γ1_1 |) in
                      let value := M.alloc (| γ1_2 |) in
                      let read :=
                        M.alloc (|
                          Value.StructRecord
                            "specs::mtable::MemoryTableEntry"
                            [
                              ("eid", M.read (| eid |));
                              ("offset",
                                BinOp.Panic.add (|
                                  Integer.U32,
                                  M.read (| sp_before_execution |),
                                  Value.Integer 1
                                |));
                              ("ltype", Value.StructTuple "specs::mtable::LocationType::Stack" []);
                              ("atype", Value.StructTuple "specs::mtable::AccessType::Read" []);
                              ("vtype", M.read (| M.read (| vtype |) |));
                              ("is_mutable", Value.Bool true);
                              ("value", M.read (| M.read (| value |) |))
                            ]
                        |) in
                      let write :=
                        M.alloc (|
                          Value.StructRecord
                            "specs::mtable::MemoryTableEntry"
                            [
                              ("eid", M.read (| eid |));
                              ("offset",
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "core::ops::arith::Add",
                                    Ty.path "u32",
                                    [ Ty.apply (Ty.path "&") [ Ty.path "u32" ] ],
                                    "add",
                                    []
                                  |),
                                  [ M.read (| sp_before_execution |); M.read (| depth |) ]
                                |));
                              ("ltype", Value.StructTuple "specs::mtable::LocationType::Stack" []);
                              ("atype", Value.StructTuple "specs::mtable::AccessType::Write" []);
                              ("vtype", M.read (| M.read (| vtype |) |));
                              ("is_mutable", Value.Bool true);
                              ("value", M.read (| M.read (| value |) |))
                            ]
                        |) in
                      M.alloc (|
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path "slice")
                              [ Ty.path "specs::mtable::MemoryTableEntry" ],
                            "into_vec",
                            [ Ty.path "alloc::alloc::Global" ]
                          |),
                          [
                            (* Unsize *)
                            M.pointer_coercion
                              (M.read (|
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.apply
                                      (Ty.path "alloc::boxed::Box")
                                      [
                                        Ty.apply
                                          (Ty.path "array")
                                          [ Ty.path "specs::mtable::MemoryTableEntry" ];
                                        Ty.path "alloc::alloc::Global"
                                      ],
                                    "new",
                                    []
                                  |),
                                  [
                                    M.alloc (|
                                      Value.Array [ M.read (| read |); M.read (| write |) ]
                                    |)
                                  ]
                                |)
                              |))
                          ]
                        |)
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_record_field (|
                          γ,
                          "specs::step::StepInfo::GetGlobal",
                          "idx"
                        |) in
                      let γ1_1 :=
                        M.SubPointer.get_struct_record_field (|
                          γ,
                          "specs::step::StepInfo::GetGlobal",
                          "vtype"
                        |) in
                      let γ1_2 :=
                        M.SubPointer.get_struct_record_field (|
                          γ,
                          "specs::step::StepInfo::GetGlobal",
                          "is_mutable"
                        |) in
                      let γ1_3 :=
                        M.SubPointer.get_struct_record_field (|
                          γ,
                          "specs::step::StepInfo::GetGlobal",
                          "value"
                        |) in
                      let idx := M.alloc (| γ1_0 |) in
                      let vtype := M.alloc (| γ1_1 |) in
                      let is_mutable := M.alloc (| γ1_2 |) in
                      let value := M.alloc (| γ1_3 |) in
                      let global_get :=
                        M.alloc (|
                          Value.StructRecord
                            "specs::mtable::MemoryTableEntry"
                            [
                              ("eid", M.read (| eid |));
                              ("offset", M.read (| M.read (| idx |) |));
                              ("ltype", Value.StructTuple "specs::mtable::LocationType::Global" []);
                              ("atype", Value.StructTuple "specs::mtable::AccessType::Read" []);
                              ("vtype", M.read (| M.read (| vtype |) |));
                              ("is_mutable", M.read (| M.read (| is_mutable |) |));
                              ("value", M.read (| M.read (| value |) |))
                            ]
                        |) in
                      let stack_write :=
                        M.alloc (|
                          Value.StructRecord
                            "specs::mtable::MemoryTableEntry"
                            [
                              ("eid", M.read (| eid |));
                              ("offset", M.read (| sp_before_execution |));
                              ("ltype", Value.StructTuple "specs::mtable::LocationType::Stack" []);
                              ("atype", Value.StructTuple "specs::mtable::AccessType::Write" []);
                              ("vtype", M.read (| M.read (| vtype |) |));
                              ("is_mutable", Value.Bool true);
                              ("value", M.read (| M.read (| value |) |))
                            ]
                        |) in
                      M.alloc (|
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path "slice")
                              [ Ty.path "specs::mtable::MemoryTableEntry" ],
                            "into_vec",
                            [ Ty.path "alloc::alloc::Global" ]
                          |),
                          [
                            (* Unsize *)
                            M.pointer_coercion
                              (M.read (|
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.apply
                                      (Ty.path "alloc::boxed::Box")
                                      [
                                        Ty.apply
                                          (Ty.path "array")
                                          [ Ty.path "specs::mtable::MemoryTableEntry" ];
                                        Ty.path "alloc::alloc::Global"
                                      ],
                                    "new",
                                    []
                                  |),
                                  [
                                    M.alloc (|
                                      Value.Array
                                        [ M.read (| global_get |); M.read (| stack_write |) ]
                                    |)
                                  ]
                                |)
                              |))
                          ]
                        |)
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_record_field (|
                          γ,
                          "specs::step::StepInfo::SetGlobal",
                          "idx"
                        |) in
                      let γ1_1 :=
                        M.SubPointer.get_struct_record_field (|
                          γ,
                          "specs::step::StepInfo::SetGlobal",
                          "vtype"
                        |) in
                      let γ1_2 :=
                        M.SubPointer.get_struct_record_field (|
                          γ,
                          "specs::step::StepInfo::SetGlobal",
                          "is_mutable"
                        |) in
                      let γ1_3 :=
                        M.SubPointer.get_struct_record_field (|
                          γ,
                          "specs::step::StepInfo::SetGlobal",
                          "value"
                        |) in
                      let idx := M.alloc (| γ1_0 |) in
                      let vtype := M.alloc (| γ1_1 |) in
                      let is_mutable := M.alloc (| γ1_2 |) in
                      let value := M.alloc (| γ1_3 |) in
                      let stack_read :=
                        M.alloc (|
                          Value.StructRecord
                            "specs::mtable::MemoryTableEntry"
                            [
                              ("eid", M.read (| eid |));
                              ("offset",
                                BinOp.Panic.add (|
                                  Integer.U32,
                                  M.read (| sp_before_execution |),
                                  Value.Integer 1
                                |));
                              ("ltype", Value.StructTuple "specs::mtable::LocationType::Stack" []);
                              ("atype", Value.StructTuple "specs::mtable::AccessType::Read" []);
                              ("vtype", M.read (| M.read (| vtype |) |));
                              ("is_mutable", Value.Bool true);
                              ("value", M.read (| M.read (| value |) |))
                            ]
                        |) in
                      let global_set :=
                        M.alloc (|
                          Value.StructRecord
                            "specs::mtable::MemoryTableEntry"
                            [
                              ("eid", M.read (| eid |));
                              ("offset", M.read (| M.read (| idx |) |));
                              ("ltype", Value.StructTuple "specs::mtable::LocationType::Global" []);
                              ("atype", Value.StructTuple "specs::mtable::AccessType::Write" []);
                              ("vtype", M.read (| M.read (| vtype |) |));
                              ("is_mutable", M.read (| M.read (| is_mutable |) |));
                              ("value", M.read (| M.read (| value |) |))
                            ]
                        |) in
                      M.alloc (|
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path "slice")
                              [ Ty.path "specs::mtable::MemoryTableEntry" ],
                            "into_vec",
                            [ Ty.path "alloc::alloc::Global" ]
                          |),
                          [
                            (* Unsize *)
                            M.pointer_coercion
                              (M.read (|
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.apply
                                      (Ty.path "alloc::boxed::Box")
                                      [
                                        Ty.apply
                                          (Ty.path "array")
                                          [ Ty.path "specs::mtable::MemoryTableEntry" ];
                                        Ty.path "alloc::alloc::Global"
                                      ],
                                    "new",
                                    []
                                  |),
                                  [
                                    M.alloc (|
                                      Value.Array
                                        [ M.read (| stack_read |); M.read (| global_set |) ]
                                    |)
                                  ]
                                |)
                              |))
                          ]
                        |)
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_record_field (|
                          γ,
                          "specs::step::StepInfo::Load",
                          "vtype"
                        |) in
                      let γ1_1 :=
                        M.SubPointer.get_struct_record_field (|
                          γ,
                          "specs::step::StepInfo::Load",
                          "load_size"
                        |) in
                      let γ1_2 :=
                        M.SubPointer.get_struct_record_field (|
                          γ,
                          "specs::step::StepInfo::Load",
                          "raw_address"
                        |) in
                      let γ1_3 :=
                        M.SubPointer.get_struct_record_field (|
                          γ,
                          "specs::step::StepInfo::Load",
                          "effective_address"
                        |) in
                      let γ1_4 :=
                        M.SubPointer.get_struct_record_field (|
                          γ,
                          "specs::step::StepInfo::Load",
                          "value"
                        |) in
                      let γ1_5 :=
                        M.SubPointer.get_struct_record_field (|
                          γ,
                          "specs::step::StepInfo::Load",
                          "block_value1"
                        |) in
                      let γ1_6 :=
                        M.SubPointer.get_struct_record_field (|
                          γ,
                          "specs::step::StepInfo::Load",
                          "block_value2"
                        |) in
                      let vtype := M.alloc (| γ1_0 |) in
                      let load_size := M.alloc (| γ1_1 |) in
                      let raw_address := M.alloc (| γ1_2 |) in
                      let effective_address := M.alloc (| γ1_3 |) in
                      let value := M.alloc (| γ1_4 |) in
                      let block_value1 := M.alloc (| γ1_5 |) in
                      let block_value2 := M.alloc (| γ1_6 |) in
                      let load_address_from_stack :=
                        M.alloc (|
                          Value.StructRecord
                            "specs::mtable::MemoryTableEntry"
                            [
                              ("eid", M.read (| eid |));
                              ("offset",
                                BinOp.Panic.add (|
                                  Integer.U32,
                                  M.read (| sp_before_execution |),
                                  Value.Integer 1
                                |));
                              ("ltype", Value.StructTuple "specs::mtable::LocationType::Stack" []);
                              ("atype", Value.StructTuple "specs::mtable::AccessType::Read" []);
                              ("vtype", Value.StructTuple "specs::mtable::VarType::I32" []);
                              ("is_mutable", Value.Bool true);
                              ("value", M.rust_cast (M.read (| M.read (| raw_address |) |)))
                            ]
                        |) in
                      let load_value1 :=
                        M.alloc (|
                          Value.StructRecord
                            "specs::mtable::MemoryTableEntry"
                            [
                              ("eid", M.read (| eid |));
                              ("offset",
                                BinOp.Panic.div (|
                                  Integer.U32,
                                  M.read (| M.read (| effective_address |) |),
                                  Value.Integer 8
                                |));
                              ("ltype", Value.StructTuple "specs::mtable::LocationType::Heap" []);
                              ("atype", Value.StructTuple "specs::mtable::AccessType::Read" []);
                              ("vtype", Value.StructTuple "specs::mtable::VarType::I64" []);
                              ("is_mutable", Value.Bool true);
                              ("value", M.read (| M.read (| block_value1 |) |))
                            ]
                        |) in
                      let load_value2 :=
                        M.copy (|
                          M.match_operator (|
                            M.alloc (| Value.Tuple [] |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ :=
                                    M.use
                                      (M.alloc (|
                                        BinOp.Pure.gt
                                          (BinOp.Panic.add (|
                                            Integer.U32,
                                            BinOp.Panic.rem (|
                                              Integer.U32,
                                              M.read (| M.read (| effective_address |) |),
                                              Value.Integer 8
                                            |),
                                            M.read (|
                                              M.use
                                                (M.alloc (|
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.path "specs::mtable::MemoryReadSize",
                                                      "byte_size",
                                                      []
                                                    |),
                                                    [ M.read (| load_size |) ]
                                                  |)
                                                |))
                                            |)
                                          |))
                                          (Value.Integer 8)
                                      |)) in
                                  let _ :=
                                    M.is_constant_or_break_match (|
                                      M.read (| γ |),
                                      Value.Bool true
                                    |) in
                                  M.alloc (|
                                    Value.StructTuple
                                      "core::option::Option::Some"
                                      [
                                        Value.StructRecord
                                          "specs::mtable::MemoryTableEntry"
                                          [
                                            ("eid", M.read (| eid |));
                                            ("offset",
                                              BinOp.Panic.add (|
                                                Integer.U32,
                                                M.call_closure (|
                                                  M.get_trait_method (|
                                                    "core::ops::arith::Div",
                                                    Ty.apply (Ty.path "&") [ Ty.path "u32" ],
                                                    [ Ty.path "u32" ],
                                                    "div",
                                                    []
                                                  |),
                                                  [ M.read (| effective_address |); Value.Integer 8
                                                  ]
                                                |),
                                                Value.Integer 1
                                              |));
                                            ("ltype",
                                              Value.StructTuple
                                                "specs::mtable::LocationType::Heap"
                                                []);
                                            ("atype",
                                              Value.StructTuple
                                                "specs::mtable::AccessType::Read"
                                                []);
                                            ("vtype",
                                              Value.StructTuple "specs::mtable::VarType::I64" []);
                                            ("is_mutable", Value.Bool true);
                                            ("value", M.read (| M.read (| block_value2 |) |))
                                          ]
                                      ]
                                  |)));
                              fun γ =>
                                ltac:(M.monadic
                                  (M.alloc (| Value.StructTuple "core::option::Option::None" [] |)))
                            ]
                          |)
                        |) in
                      let push_value :=
                        M.alloc (|
                          Value.StructRecord
                            "specs::mtable::MemoryTableEntry"
                            [
                              ("eid", M.read (| eid |));
                              ("offset",
                                BinOp.Panic.add (|
                                  Integer.U32,
                                  M.read (| sp_before_execution |),
                                  Value.Integer 1
                                |));
                              ("ltype", Value.StructTuple "specs::mtable::LocationType::Stack" []);
                              ("atype", Value.StructTuple "specs::mtable::AccessType::Write" []);
                              ("vtype", M.read (| M.read (| vtype |) |));
                              ("is_mutable", Value.Bool true);
                              ("value", M.read (| M.read (| value |) |))
                            ]
                        |) in
                      M.alloc (|
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path "slice")
                              [
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  [
                                    Ty.path "specs::mtable::MemoryTableEntry";
                                    Ty.path "alloc::alloc::Global"
                                  ]
                              ],
                            "concat",
                            [ Ty.path "specs::mtable::MemoryTableEntry" ]
                          |),
                          [
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::ops::deref::Deref",
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  [
                                    Ty.apply
                                      (Ty.path "alloc::vec::Vec")
                                      [
                                        Ty.path "specs::mtable::MemoryTableEntry";
                                        Ty.path "alloc::alloc::Global"
                                      ];
                                    Ty.path "alloc::alloc::Global"
                                  ],
                                [],
                                "deref",
                                []
                              |),
                              [
                                M.alloc (|
                                  M.call_closure (|
                                    M.get_associated_function (|
                                      Ty.apply
                                        (Ty.path "slice")
                                        [
                                          Ty.apply
                                            (Ty.path "alloc::vec::Vec")
                                            [
                                              Ty.path "specs::mtable::MemoryTableEntry";
                                              Ty.path "alloc::alloc::Global"
                                            ]
                                        ],
                                      "into_vec",
                                      [ Ty.path "alloc::alloc::Global" ]
                                    |),
                                    [
                                      (* Unsize *)
                                      M.pointer_coercion
                                        (M.read (|
                                          M.call_closure (|
                                            M.get_associated_function (|
                                              Ty.apply
                                                (Ty.path "alloc::boxed::Box")
                                                [
                                                  Ty.apply
                                                    (Ty.path "array")
                                                    [
                                                      Ty.apply
                                                        (Ty.path "alloc::vec::Vec")
                                                        [
                                                          Ty.path "specs::mtable::MemoryTableEntry";
                                                          Ty.path "alloc::alloc::Global"
                                                        ]
                                                    ];
                                                  Ty.path "alloc::alloc::Global"
                                                ],
                                              "new",
                                              []
                                            |),
                                            [
                                              M.alloc (|
                                                Value.Array
                                                  [
                                                    M.call_closure (|
                                                      M.get_associated_function (|
                                                        Ty.apply
                                                          (Ty.path "slice")
                                                          [
                                                            Ty.path
                                                              "specs::mtable::MemoryTableEntry"
                                                          ],
                                                        "into_vec",
                                                        [ Ty.path "alloc::alloc::Global" ]
                                                      |),
                                                      [
                                                        (* Unsize *)
                                                        M.pointer_coercion
                                                          (M.read (|
                                                            M.call_closure (|
                                                              M.get_associated_function (|
                                                                Ty.apply
                                                                  (Ty.path "alloc::boxed::Box")
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path "array")
                                                                      [
                                                                        Ty.path
                                                                          "specs::mtable::MemoryTableEntry"
                                                                      ];
                                                                    Ty.path "alloc::alloc::Global"
                                                                  ],
                                                                "new",
                                                                []
                                                              |),
                                                              [
                                                                M.alloc (|
                                                                  Value.Array
                                                                    [
                                                                      M.read (|
                                                                        load_address_from_stack
                                                                      |);
                                                                      M.read (| load_value1 |)
                                                                    ]
                                                                |)
                                                              ]
                                                            |)
                                                          |))
                                                      ]
                                                    |);
                                                    M.call_closure (|
                                                      M.get_associated_function (|
                                                        Ty.apply
                                                          (Ty.path "core::option::Option")
                                                          [
                                                            Ty.path
                                                              "specs::mtable::MemoryTableEntry"
                                                          ],
                                                        "map_or",
                                                        [
                                                          Ty.apply
                                                            (Ty.path "alloc::vec::Vec")
                                                            [
                                                              Ty.path
                                                                "specs::mtable::MemoryTableEntry";
                                                              Ty.path "alloc::alloc::Global"
                                                            ];
                                                          Ty.function
                                                            [
                                                              Ty.tuple
                                                                [
                                                                  Ty.path
                                                                    "specs::mtable::MemoryTableEntry"
                                                                ]
                                                            ]
                                                            (Ty.apply
                                                              (Ty.path "alloc::vec::Vec")
                                                              [
                                                                Ty.path
                                                                  "specs::mtable::MemoryTableEntry";
                                                                Ty.path "alloc::alloc::Global"
                                                              ])
                                                        ]
                                                      |),
                                                      [
                                                        M.read (| load_value2 |);
                                                        M.call_closure (|
                                                          M.get_associated_function (|
                                                            Ty.apply
                                                              (Ty.path "alloc::vec::Vec")
                                                              [
                                                                Ty.path
                                                                  "specs::mtable::MemoryTableEntry";
                                                                Ty.path "alloc::alloc::Global"
                                                              ],
                                                            "new",
                                                            []
                                                          |),
                                                          []
                                                        |);
                                                        M.closure
                                                          (fun γ =>
                                                            ltac:(M.monadic
                                                              match γ with
                                                              | [ α0 ] =>
                                                                M.match_operator (|
                                                                  M.alloc (| α0 |),
                                                                  [
                                                                    fun γ =>
                                                                      ltac:(M.monadic
                                                                        (let v := M.copy (| γ |) in
                                                                        M.call_closure (|
                                                                          M.get_associated_function (|
                                                                            Ty.apply
                                                                              (Ty.path "slice")
                                                                              [
                                                                                Ty.path
                                                                                  "specs::mtable::MemoryTableEntry"
                                                                              ],
                                                                            "into_vec",
                                                                            [
                                                                              Ty.path
                                                                                "alloc::alloc::Global"
                                                                            ]
                                                                          |),
                                                                          [
                                                                            (* Unsize *)
                                                                            M.pointer_coercion
                                                                              (M.read (|
                                                                                M.call_closure (|
                                                                                  M.get_associated_function (|
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "alloc::boxed::Box")
                                                                                      [
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "array")
                                                                                          [
                                                                                            Ty.path
                                                                                              "specs::mtable::MemoryTableEntry"
                                                                                          ];
                                                                                        Ty.path
                                                                                          "alloc::alloc::Global"
                                                                                      ],
                                                                                    "new",
                                                                                    []
                                                                                  |),
                                                                                  [
                                                                                    M.alloc (|
                                                                                      Value.Array
                                                                                        [
                                                                                          M.read (|
                                                                                            v
                                                                                          |)
                                                                                        ]
                                                                                    |)
                                                                                  ]
                                                                                |)
                                                                              |))
                                                                          ]
                                                                        |)))
                                                                  ]
                                                                |)
                                                              | _ => M.impossible (||)
                                                              end))
                                                      ]
                                                    |);
                                                    M.call_closure (|
                                                      M.get_associated_function (|
                                                        Ty.apply
                                                          (Ty.path "slice")
                                                          [
                                                            Ty.path
                                                              "specs::mtable::MemoryTableEntry"
                                                          ],
                                                        "into_vec",
                                                        [ Ty.path "alloc::alloc::Global" ]
                                                      |),
                                                      [
                                                        (* Unsize *)
                                                        M.pointer_coercion
                                                          (M.read (|
                                                            M.call_closure (|
                                                              M.get_associated_function (|
                                                                Ty.apply
                                                                  (Ty.path "alloc::boxed::Box")
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path "array")
                                                                      [
                                                                        Ty.path
                                                                          "specs::mtable::MemoryTableEntry"
                                                                      ];
                                                                    Ty.path "alloc::alloc::Global"
                                                                  ],
                                                                "new",
                                                                []
                                                              |),
                                                              [
                                                                M.alloc (|
                                                                  Value.Array
                                                                    [ M.read (| push_value |) ]
                                                                |)
                                                              ]
                                                            |)
                                                          |))
                                                      ]
                                                    |)
                                                  ]
                                              |)
                                            ]
                                          |)
                                        |))
                                    ]
                                  |)
                                |)
                              ]
                            |)
                          ]
                        |)
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_record_field (|
                          γ,
                          "specs::step::StepInfo::Store",
                          "vtype"
                        |) in
                      let γ1_1 :=
                        M.SubPointer.get_struct_record_field (|
                          γ,
                          "specs::step::StepInfo::Store",
                          "store_size"
                        |) in
                      let γ1_2 :=
                        M.SubPointer.get_struct_record_field (|
                          γ,
                          "specs::step::StepInfo::Store",
                          "raw_address"
                        |) in
                      let γ1_3 :=
                        M.SubPointer.get_struct_record_field (|
                          γ,
                          "specs::step::StepInfo::Store",
                          "effective_address"
                        |) in
                      let γ1_4 :=
                        M.SubPointer.get_struct_record_field (|
                          γ,
                          "specs::step::StepInfo::Store",
                          "value"
                        |) in
                      let γ1_5 :=
                        M.SubPointer.get_struct_record_field (|
                          γ,
                          "specs::step::StepInfo::Store",
                          "pre_block_value1"
                        |) in
                      let γ1_6 :=
                        M.SubPointer.get_struct_record_field (|
                          γ,
                          "specs::step::StepInfo::Store",
                          "updated_block_value1"
                        |) in
                      let γ1_7 :=
                        M.SubPointer.get_struct_record_field (|
                          γ,
                          "specs::step::StepInfo::Store",
                          "pre_block_value2"
                        |) in
                      let γ1_8 :=
                        M.SubPointer.get_struct_record_field (|
                          γ,
                          "specs::step::StepInfo::Store",
                          "updated_block_value2"
                        |) in
                      let vtype := M.alloc (| γ1_0 |) in
                      let store_size := M.alloc (| γ1_1 |) in
                      let raw_address := M.alloc (| γ1_2 |) in
                      let effective_address := M.alloc (| γ1_3 |) in
                      let value := M.alloc (| γ1_4 |) in
                      let pre_block_value1 := M.alloc (| γ1_5 |) in
                      let updated_block_value1 := M.alloc (| γ1_6 |) in
                      let pre_block_value2 := M.alloc (| γ1_7 |) in
                      let updated_block_value2 := M.alloc (| γ1_8 |) in
                      let load_value_from_stack :=
                        M.alloc (|
                          Value.StructRecord
                            "specs::mtable::MemoryTableEntry"
                            [
                              ("eid", M.read (| eid |));
                              ("offset",
                                BinOp.Panic.add (|
                                  Integer.U32,
                                  M.read (| sp_before_execution |),
                                  Value.Integer 1
                                |));
                              ("ltype", Value.StructTuple "specs::mtable::LocationType::Stack" []);
                              ("atype", Value.StructTuple "specs::mtable::AccessType::Read" []);
                              ("vtype", M.read (| M.read (| vtype |) |));
                              ("is_mutable", Value.Bool true);
                              ("value", M.read (| M.read (| value |) |))
                            ]
                        |) in
                      let load_address_from_stack :=
                        M.alloc (|
                          Value.StructRecord
                            "specs::mtable::MemoryTableEntry"
                            [
                              ("eid", M.read (| eid |));
                              ("offset",
                                BinOp.Panic.add (|
                                  Integer.U32,
                                  M.read (| sp_before_execution |),
                                  Value.Integer 2
                                |));
                              ("ltype", Value.StructTuple "specs::mtable::LocationType::Stack" []);
                              ("atype", Value.StructTuple "specs::mtable::AccessType::Read" []);
                              ("vtype", Value.StructTuple "specs::mtable::VarType::I32" []);
                              ("is_mutable", Value.Bool true);
                              ("value", M.rust_cast (M.read (| M.read (| raw_address |) |)))
                            ]
                        |) in
                      let load_value1 :=
                        M.alloc (|
                          Value.StructRecord
                            "specs::mtable::MemoryTableEntry"
                            [
                              ("eid", M.read (| eid |));
                              ("offset",
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "core::ops::arith::Div",
                                    Ty.apply (Ty.path "&") [ Ty.path "u32" ],
                                    [ Ty.path "u32" ],
                                    "div",
                                    []
                                  |),
                                  [ M.read (| effective_address |); Value.Integer 8 ]
                                |));
                              ("ltype", Value.StructTuple "specs::mtable::LocationType::Heap" []);
                              ("atype", Value.StructTuple "specs::mtable::AccessType::Read" []);
                              ("vtype", Value.StructTuple "specs::mtable::VarType::I64" []);
                              ("is_mutable", Value.Bool true);
                              ("value", M.read (| M.read (| pre_block_value1 |) |))
                            ]
                        |) in
                      let write_value1 :=
                        M.alloc (|
                          Value.StructRecord
                            "specs::mtable::MemoryTableEntry"
                            [
                              ("eid", M.read (| eid |));
                              ("offset",
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "core::ops::arith::Div",
                                    Ty.apply (Ty.path "&") [ Ty.path "u32" ],
                                    [ Ty.path "u32" ],
                                    "div",
                                    []
                                  |),
                                  [ M.read (| effective_address |); Value.Integer 8 ]
                                |));
                              ("ltype", Value.StructTuple "specs::mtable::LocationType::Heap" []);
                              ("atype", Value.StructTuple "specs::mtable::AccessType::Write" []);
                              ("vtype", Value.StructTuple "specs::mtable::VarType::I64" []);
                              ("is_mutable", Value.Bool true);
                              ("value", M.read (| M.read (| updated_block_value1 |) |))
                            ]
                        |) in
                      M.match_operator (|
                        M.alloc (| Value.Tuple [] |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ :=
                                M.use
                                  (M.alloc (|
                                    BinOp.Pure.gt
                                      (BinOp.Panic.add (|
                                        Integer.U32,
                                        BinOp.Panic.rem (|
                                          Integer.U32,
                                          M.read (| M.read (| effective_address |) |),
                                          Value.Integer 8
                                        |),
                                        M.rust_cast
                                          (M.call_closure (|
                                            M.get_associated_function (|
                                              Ty.path "specs::mtable::MemoryStoreSize",
                                              "byte_size",
                                              []
                                            |),
                                            [ M.read (| store_size |) ]
                                          |))
                                      |))
                                      (Value.Integer 8)
                                  |)) in
                              let _ :=
                                M.is_constant_or_break_match (|
                                  M.read (| γ |),
                                  Value.Bool true
                                |) in
                              let load_value2 :=
                                M.alloc (|
                                  Value.StructRecord
                                    "specs::mtable::MemoryTableEntry"
                                    [
                                      ("eid", M.read (| eid |));
                                      ("offset",
                                        BinOp.Panic.add (|
                                          Integer.U32,
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "core::ops::arith::Div",
                                              Ty.apply (Ty.path "&") [ Ty.path "u32" ],
                                              [ Ty.path "u32" ],
                                              "div",
                                              []
                                            |),
                                            [ M.read (| effective_address |); Value.Integer 8 ]
                                          |),
                                          Value.Integer 1
                                        |));
                                      ("ltype",
                                        Value.StructTuple "specs::mtable::LocationType::Heap" []);
                                      ("atype",
                                        Value.StructTuple "specs::mtable::AccessType::Read" []);
                                      ("vtype", Value.StructTuple "specs::mtable::VarType::I64" []);
                                      ("is_mutable", Value.Bool true);
                                      ("value", M.read (| M.read (| pre_block_value2 |) |))
                                    ]
                                |) in
                              let write_value2 :=
                                M.alloc (|
                                  Value.StructRecord
                                    "specs::mtable::MemoryTableEntry"
                                    [
                                      ("eid", M.read (| eid |));
                                      ("offset",
                                        BinOp.Panic.add (|
                                          Integer.U32,
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "core::ops::arith::Div",
                                              Ty.apply (Ty.path "&") [ Ty.path "u32" ],
                                              [ Ty.path "u32" ],
                                              "div",
                                              []
                                            |),
                                            [ M.read (| effective_address |); Value.Integer 8 ]
                                          |),
                                          Value.Integer 1
                                        |));
                                      ("ltype",
                                        Value.StructTuple "specs::mtable::LocationType::Heap" []);
                                      ("atype",
                                        Value.StructTuple "specs::mtable::AccessType::Write" []);
                                      ("vtype", Value.StructTuple "specs::mtable::VarType::I64" []);
                                      ("is_mutable", Value.Bool true);
                                      ("value", M.read (| M.read (| updated_block_value2 |) |))
                                    ]
                                |) in
                              M.alloc (|
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.apply
                                      (Ty.path "slice")
                                      [ Ty.path "specs::mtable::MemoryTableEntry" ],
                                    "into_vec",
                                    [ Ty.path "alloc::alloc::Global" ]
                                  |),
                                  [
                                    (* Unsize *)
                                    M.pointer_coercion
                                      (M.read (|
                                        M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.apply
                                              (Ty.path "alloc::boxed::Box")
                                              [
                                                Ty.apply
                                                  (Ty.path "array")
                                                  [ Ty.path "specs::mtable::MemoryTableEntry" ];
                                                Ty.path "alloc::alloc::Global"
                                              ],
                                            "new",
                                            []
                                          |),
                                          [
                                            M.alloc (|
                                              Value.Array
                                                [
                                                  M.read (| load_value_from_stack |);
                                                  M.read (| load_address_from_stack |);
                                                  M.read (| load_value1 |);
                                                  M.read (| write_value1 |);
                                                  M.read (| load_value2 |);
                                                  M.read (| write_value2 |)
                                                ]
                                            |)
                                          ]
                                        |)
                                      |))
                                  ]
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (M.alloc (|
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.apply
                                      (Ty.path "slice")
                                      [ Ty.path "specs::mtable::MemoryTableEntry" ],
                                    "into_vec",
                                    [ Ty.path "alloc::alloc::Global" ]
                                  |),
                                  [
                                    (* Unsize *)
                                    M.pointer_coercion
                                      (M.read (|
                                        M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.apply
                                              (Ty.path "alloc::boxed::Box")
                                              [
                                                Ty.apply
                                                  (Ty.path "array")
                                                  [ Ty.path "specs::mtable::MemoryTableEntry" ];
                                                Ty.path "alloc::alloc::Global"
                                              ],
                                            "new",
                                            []
                                          |),
                                          [
                                            M.alloc (|
                                              Value.Array
                                                [
                                                  M.read (| load_value_from_stack |);
                                                  M.read (| load_address_from_stack |);
                                                  M.read (| load_value1 |);
                                                  M.read (| write_value1 |)
                                                ]
                                            |)
                                          ]
                                        |)
                                      |))
                                  ]
                                |)
                              |)))
                        ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      M.alloc (|
                        M.call_closure (|
                          M.get_function (|
                            "delphinus_zkwasm::runtime::mem_op_from_stack_only_step",
                            []
                          |),
                          [
                            M.read (| sp_before_execution |);
                            M.read (| eid |);
                            Value.StructTuple "specs::mtable::VarType::I32" [];
                            Value.StructTuple "specs::mtable::VarType::I32" [];
                            (* Unsize *) M.pointer_coercion (M.alloc (| Value.Array [] |));
                            (* Unsize *)
                            M.pointer_coercion
                              (M.alloc (|
                                Value.Array
                                  [
                                    M.rust_cast
                                      (M.read (|
                                        M.use
                                          (M.SubPointer.get_struct_record_field (|
                                            M.read (| event |),
                                            "specs::etable::EventTableEntry",
                                            "allocated_memory_pages"
                                          |))
                                      |))
                                  ]
                              |))
                          ]
                        |)
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_record_field (|
                          γ,
                          "specs::step::StepInfo::MemoryGrow",
                          "grow_size"
                        |) in
                      let γ1_1 :=
                        M.SubPointer.get_struct_record_field (|
                          γ,
                          "specs::step::StepInfo::MemoryGrow",
                          "result"
                        |) in
                      let grow_size := M.alloc (| γ1_0 |) in
                      let result := M.alloc (| γ1_1 |) in
                      M.alloc (|
                        M.call_closure (|
                          M.get_function (|
                            "delphinus_zkwasm::runtime::mem_op_from_stack_only_step",
                            []
                          |),
                          [
                            M.read (| sp_before_execution |);
                            M.read (| eid |);
                            Value.StructTuple "specs::mtable::VarType::I32" [];
                            Value.StructTuple "specs::mtable::VarType::I32" [];
                            (* Unsize *)
                            M.pointer_coercion
                              (M.alloc (|
                                Value.Array
                                  [ M.rust_cast (M.rust_cast (M.read (| M.read (| grow_size |) |)))
                                  ]
                              |));
                            (* Unsize *)
                            M.pointer_coercion
                              (M.alloc (|
                                Value.Array
                                  [ M.rust_cast (M.rust_cast (M.read (| M.read (| result |) |))) ]
                              |))
                          ]
                        |)
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_record_field (|
                          γ,
                          "specs::step::StepInfo::I32Const",
                          "value"
                        |) in
                      let value := M.alloc (| γ1_0 |) in
                      M.alloc (|
                        M.call_closure (|
                          M.get_function (|
                            "delphinus_zkwasm::runtime::mem_op_from_stack_only_step",
                            []
                          |),
                          [
                            M.read (| sp_before_execution |);
                            M.read (| eid |);
                            Value.StructTuple "specs::mtable::VarType::I32" [];
                            Value.StructTuple "specs::mtable::VarType::I32" [];
                            (* Unsize *) M.pointer_coercion (M.alloc (| Value.Array [] |));
                            (* Unsize *)
                            M.pointer_coercion
                              (M.alloc (|
                                Value.Array
                                  [ M.rust_cast (M.rust_cast (M.read (| M.read (| value |) |))) ]
                              |))
                          ]
                        |)
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (M.find_or_pattern (|
                        γ,
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ := M.read (| γ |) in
                              let γ1_0 :=
                                M.SubPointer.get_struct_record_field (|
                                  γ,
                                  "specs::step::StepInfo::I32BinOp",
                                  "left"
                                |) in
                              let γ1_1 :=
                                M.SubPointer.get_struct_record_field (|
                                  γ,
                                  "specs::step::StepInfo::I32BinOp",
                                  "right"
                                |) in
                              let γ1_2 :=
                                M.SubPointer.get_struct_record_field (|
                                  γ,
                                  "specs::step::StepInfo::I32BinOp",
                                  "value"
                                |) in
                              let left := M.alloc (| γ1_0 |) in
                              let right := M.alloc (| γ1_1 |) in
                              let value := M.alloc (| γ1_2 |) in
                              Value.Tuple [ left; right; value ]));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ := M.read (| γ |) in
                              let γ1_0 :=
                                M.SubPointer.get_struct_record_field (|
                                  γ,
                                  "specs::step::StepInfo::I32BinShiftOp",
                                  "left"
                                |) in
                              let γ1_1 :=
                                M.SubPointer.get_struct_record_field (|
                                  γ,
                                  "specs::step::StepInfo::I32BinShiftOp",
                                  "right"
                                |) in
                              let γ1_2 :=
                                M.SubPointer.get_struct_record_field (|
                                  γ,
                                  "specs::step::StepInfo::I32BinShiftOp",
                                  "value"
                                |) in
                              let left := M.alloc (| γ1_0 |) in
                              let right := M.alloc (| γ1_1 |) in
                              let value := M.alloc (| γ1_2 |) in
                              Value.Tuple [ left; right; value ]));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ := M.read (| γ |) in
                              let γ1_0 :=
                                M.SubPointer.get_struct_record_field (|
                                  γ,
                                  "specs::step::StepInfo::I32BinBitOp",
                                  "left"
                                |) in
                              let γ1_1 :=
                                M.SubPointer.get_struct_record_field (|
                                  γ,
                                  "specs::step::StepInfo::I32BinBitOp",
                                  "right"
                                |) in
                              let γ1_2 :=
                                M.SubPointer.get_struct_record_field (|
                                  γ,
                                  "specs::step::StepInfo::I32BinBitOp",
                                  "value"
                                |) in
                              let left := M.alloc (| γ1_0 |) in
                              let right := M.alloc (| γ1_1 |) in
                              let value := M.alloc (| γ1_2 |) in
                              Value.Tuple [ left; right; value ]))
                        ],
                        M.closure
                          (fun γ =>
                            ltac:(M.monadic
                              match γ with
                              | [ _ as left; _ as right; value ] =>
                                M.alloc (|
                                  M.call_closure (|
                                    M.get_function (|
                                      "delphinus_zkwasm::runtime::mem_op_from_stack_only_step",
                                      []
                                    |),
                                    [
                                      M.read (| sp_before_execution |);
                                      M.read (| eid |);
                                      Value.StructTuple "specs::mtable::VarType::I32" [];
                                      Value.StructTuple "specs::mtable::VarType::I32" [];
                                      (* Unsize *)
                                      M.pointer_coercion
                                        (M.alloc (|
                                          Value.Array
                                            [
                                              M.rust_cast
                                                (M.rust_cast (M.read (| M.read (| right |) |)));
                                              M.rust_cast
                                                (M.rust_cast (M.read (| M.read (| left |) |)))
                                            ]
                                        |));
                                      (* Unsize *)
                                      M.pointer_coercion
                                        (M.alloc (|
                                          Value.Array
                                            [
                                              M.rust_cast
                                                (M.rust_cast (M.read (| M.read (| value |) |)))
                                            ]
                                        |))
                                    ]
                                  |)
                                |)
                              | _ => M.impossible (||)
                              end))
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_record_field (|
                          γ,
                          "specs::step::StepInfo::I32Comp",
                          "left"
                        |) in
                      let γ1_1 :=
                        M.SubPointer.get_struct_record_field (|
                          γ,
                          "specs::step::StepInfo::I32Comp",
                          "right"
                        |) in
                      let γ1_2 :=
                        M.SubPointer.get_struct_record_field (|
                          γ,
                          "specs::step::StepInfo::I32Comp",
                          "value"
                        |) in
                      let left := M.alloc (| γ1_0 |) in
                      let right := M.alloc (| γ1_1 |) in
                      let value := M.alloc (| γ1_2 |) in
                      M.alloc (|
                        M.call_closure (|
                          M.get_function (|
                            "delphinus_zkwasm::runtime::mem_op_from_stack_only_step",
                            []
                          |),
                          [
                            M.read (| sp_before_execution |);
                            M.read (| eid |);
                            Value.StructTuple "specs::mtable::VarType::I32" [];
                            Value.StructTuple "specs::mtable::VarType::I32" [];
                            (* Unsize *)
                            M.pointer_coercion
                              (M.alloc (|
                                Value.Array
                                  [
                                    M.rust_cast (M.rust_cast (M.read (| M.read (| right |) |)));
                                    M.rust_cast (M.rust_cast (M.read (| M.read (| left |) |)))
                                  ]
                              |));
                            (* Unsize *)
                            M.pointer_coercion
                              (M.alloc (|
                                Value.Array
                                  [ M.rust_cast (M.rust_cast (M.read (| M.read (| value |) |))) ]
                              |))
                          ]
                        |)
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (M.find_or_pattern (|
                        γ,
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ := M.read (| γ |) in
                              let γ1_0 :=
                                M.SubPointer.get_struct_record_field (|
                                  γ,
                                  "specs::step::StepInfo::I64BinOp",
                                  "left"
                                |) in
                              let γ1_1 :=
                                M.SubPointer.get_struct_record_field (|
                                  γ,
                                  "specs::step::StepInfo::I64BinOp",
                                  "right"
                                |) in
                              let γ1_2 :=
                                M.SubPointer.get_struct_record_field (|
                                  γ,
                                  "specs::step::StepInfo::I64BinOp",
                                  "value"
                                |) in
                              let left := M.alloc (| γ1_0 |) in
                              let right := M.alloc (| γ1_1 |) in
                              let value := M.alloc (| γ1_2 |) in
                              Value.Tuple [ left; right; value ]));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ := M.read (| γ |) in
                              let γ1_0 :=
                                M.SubPointer.get_struct_record_field (|
                                  γ,
                                  "specs::step::StepInfo::I64BinShiftOp",
                                  "left"
                                |) in
                              let γ1_1 :=
                                M.SubPointer.get_struct_record_field (|
                                  γ,
                                  "specs::step::StepInfo::I64BinShiftOp",
                                  "right"
                                |) in
                              let γ1_2 :=
                                M.SubPointer.get_struct_record_field (|
                                  γ,
                                  "specs::step::StepInfo::I64BinShiftOp",
                                  "value"
                                |) in
                              let left := M.alloc (| γ1_0 |) in
                              let right := M.alloc (| γ1_1 |) in
                              let value := M.alloc (| γ1_2 |) in
                              Value.Tuple [ left; right; value ]));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ := M.read (| γ |) in
                              let γ1_0 :=
                                M.SubPointer.get_struct_record_field (|
                                  γ,
                                  "specs::step::StepInfo::I64BinBitOp",
                                  "left"
                                |) in
                              let γ1_1 :=
                                M.SubPointer.get_struct_record_field (|
                                  γ,
                                  "specs::step::StepInfo::I64BinBitOp",
                                  "right"
                                |) in
                              let γ1_2 :=
                                M.SubPointer.get_struct_record_field (|
                                  γ,
                                  "specs::step::StepInfo::I64BinBitOp",
                                  "value"
                                |) in
                              let left := M.alloc (| γ1_0 |) in
                              let right := M.alloc (| γ1_1 |) in
                              let value := M.alloc (| γ1_2 |) in
                              Value.Tuple [ left; right; value ]))
                        ],
                        M.closure
                          (fun γ =>
                            ltac:(M.monadic
                              match γ with
                              | [ _ as left; _ as right; value ] =>
                                M.alloc (|
                                  M.call_closure (|
                                    M.get_function (|
                                      "delphinus_zkwasm::runtime::mem_op_from_stack_only_step",
                                      []
                                    |),
                                    [
                                      M.read (| sp_before_execution |);
                                      M.read (| eid |);
                                      Value.StructTuple "specs::mtable::VarType::I64" [];
                                      Value.StructTuple "specs::mtable::VarType::I64" [];
                                      (* Unsize *)
                                      M.pointer_coercion
                                        (M.alloc (|
                                          Value.Array
                                            [
                                              M.rust_cast (M.read (| M.read (| right |) |));
                                              M.rust_cast (M.read (| M.read (| left |) |))
                                            ]
                                        |));
                                      (* Unsize *)
                                      M.pointer_coercion
                                        (M.alloc (|
                                          Value.Array
                                            [ M.rust_cast (M.read (| M.read (| value |) |)) ]
                                        |))
                                    ]
                                  |)
                                |)
                              | _ => M.impossible (||)
                              end))
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_record_field (|
                          γ,
                          "specs::step::StepInfo::I64Const",
                          "value"
                        |) in
                      let value := M.alloc (| γ1_0 |) in
                      M.alloc (|
                        M.call_closure (|
                          M.get_function (|
                            "delphinus_zkwasm::runtime::mem_op_from_stack_only_step",
                            []
                          |),
                          [
                            M.read (| sp_before_execution |);
                            M.read (| eid |);
                            Value.StructTuple "specs::mtable::VarType::I64" [];
                            Value.StructTuple "specs::mtable::VarType::I64" [];
                            (* Unsize *) M.pointer_coercion (M.alloc (| Value.Array [] |));
                            (* Unsize *)
                            M.pointer_coercion
                              (M.alloc (|
                                Value.Array [ M.rust_cast (M.read (| M.read (| value |) |)) ]
                              |))
                          ]
                        |)
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_record_field (|
                          γ,
                          "specs::step::StepInfo::I64Comp",
                          "left"
                        |) in
                      let γ1_1 :=
                        M.SubPointer.get_struct_record_field (|
                          γ,
                          "specs::step::StepInfo::I64Comp",
                          "right"
                        |) in
                      let γ1_2 :=
                        M.SubPointer.get_struct_record_field (|
                          γ,
                          "specs::step::StepInfo::I64Comp",
                          "value"
                        |) in
                      let left := M.alloc (| γ1_0 |) in
                      let right := M.alloc (| γ1_1 |) in
                      let value := M.alloc (| γ1_2 |) in
                      M.alloc (|
                        M.call_closure (|
                          M.get_function (|
                            "delphinus_zkwasm::runtime::mem_op_from_stack_only_step",
                            []
                          |),
                          [
                            M.read (| sp_before_execution |);
                            M.read (| eid |);
                            Value.StructTuple "specs::mtable::VarType::I64" [];
                            Value.StructTuple "specs::mtable::VarType::I32" [];
                            (* Unsize *)
                            M.pointer_coercion
                              (M.alloc (|
                                Value.Array
                                  [
                                    M.rust_cast (M.read (| M.read (| right |) |));
                                    M.rust_cast (M.read (| M.read (| left |) |))
                                  ]
                              |));
                            (* Unsize *)
                            M.pointer_coercion
                              (M.alloc (|
                                Value.Array
                                  [ M.rust_cast (M.rust_cast (M.read (| M.read (| value |) |))) ]
                              |))
                          ]
                        |)
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_record_field (|
                          γ,
                          "specs::step::StepInfo::UnaryOp",
                          "vtype"
                        |) in
                      let γ1_1 :=
                        M.SubPointer.get_struct_record_field (|
                          γ,
                          "specs::step::StepInfo::UnaryOp",
                          "operand"
                        |) in
                      let γ1_2 :=
                        M.SubPointer.get_struct_record_field (|
                          γ,
                          "specs::step::StepInfo::UnaryOp",
                          "result"
                        |) in
                      let vtype := M.alloc (| γ1_0 |) in
                      let operand := M.alloc (| γ1_1 |) in
                      let result := M.alloc (| γ1_2 |) in
                      M.alloc (|
                        M.call_closure (|
                          M.get_function (|
                            "delphinus_zkwasm::runtime::mem_op_from_stack_only_step",
                            []
                          |),
                          [
                            M.read (| sp_before_execution |);
                            M.read (| eid |);
                            M.read (| M.read (| vtype |) |);
                            M.read (| M.read (| vtype |) |);
                            (* Unsize *)
                            M.pointer_coercion
                              (M.alloc (| Value.Array [ M.read (| M.read (| operand |) |) ] |));
                            (* Unsize *)
                            M.pointer_coercion
                              (M.alloc (| Value.Array [ M.read (| M.read (| result |) |) ] |))
                          ]
                        |)
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_record_field (|
                          γ,
                          "specs::step::StepInfo::Test",
                          "vtype"
                        |) in
                      let γ1_1 :=
                        M.SubPointer.get_struct_record_field (|
                          γ,
                          "specs::step::StepInfo::Test",
                          "value"
                        |) in
                      let γ1_2 :=
                        M.SubPointer.get_struct_record_field (|
                          γ,
                          "specs::step::StepInfo::Test",
                          "result"
                        |) in
                      let vtype := M.alloc (| γ1_0 |) in
                      let value := M.alloc (| γ1_1 |) in
                      let result := M.alloc (| γ1_2 |) in
                      M.alloc (|
                        M.call_closure (|
                          M.get_function (|
                            "delphinus_zkwasm::runtime::mem_op_from_stack_only_step",
                            []
                          |),
                          [
                            M.read (| sp_before_execution |);
                            M.read (| eid |);
                            M.read (| M.read (| vtype |) |);
                            Value.StructTuple "specs::mtable::VarType::I32" [];
                            (* Unsize *)
                            M.pointer_coercion
                              (M.alloc (| Value.Array [ M.read (| M.read (| value |) |) ] |));
                            (* Unsize *)
                            M.pointer_coercion
                              (M.alloc (|
                                Value.Array
                                  [ M.rust_cast (M.rust_cast (M.read (| M.read (| result |) |))) ]
                              |))
                          ]
                        |)
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_record_field (|
                          γ,
                          "specs::step::StepInfo::I32WrapI64",
                          "value"
                        |) in
                      let γ1_1 :=
                        M.SubPointer.get_struct_record_field (|
                          γ,
                          "specs::step::StepInfo::I32WrapI64",
                          "result"
                        |) in
                      let value := M.alloc (| γ1_0 |) in
                      let result := M.alloc (| γ1_1 |) in
                      M.alloc (|
                        M.call_closure (|
                          M.get_function (|
                            "delphinus_zkwasm::runtime::mem_op_from_stack_only_step",
                            []
                          |),
                          [
                            M.read (| sp_before_execution |);
                            M.read (| eid |);
                            Value.StructTuple "specs::mtable::VarType::I64" [];
                            Value.StructTuple "specs::mtable::VarType::I32" [];
                            (* Unsize *)
                            M.pointer_coercion
                              (M.alloc (|
                                Value.Array [ M.rust_cast (M.read (| M.read (| value |) |)) ]
                              |));
                            (* Unsize *)
                            M.pointer_coercion
                              (M.alloc (|
                                Value.Array
                                  [ M.rust_cast (M.rust_cast (M.read (| M.read (| result |) |))) ]
                              |))
                          ]
                        |)
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_record_field (|
                          γ,
                          "specs::step::StepInfo::I64ExtendI32",
                          "value"
                        |) in
                      let γ1_1 :=
                        M.SubPointer.get_struct_record_field (|
                          γ,
                          "specs::step::StepInfo::I64ExtendI32",
                          "result"
                        |) in
                      let value := M.alloc (| γ1_0 |) in
                      let result := M.alloc (| γ1_1 |) in
                      M.alloc (|
                        M.call_closure (|
                          M.get_function (|
                            "delphinus_zkwasm::runtime::mem_op_from_stack_only_step",
                            []
                          |),
                          [
                            M.read (| sp_before_execution |);
                            M.read (| eid |);
                            Value.StructTuple "specs::mtable::VarType::I32" [];
                            Value.StructTuple "specs::mtable::VarType::I64" [];
                            (* Unsize *)
                            M.pointer_coercion
                              (M.alloc (|
                                Value.Array
                                  [ M.rust_cast (M.rust_cast (M.read (| M.read (| value |) |))) ]
                              |));
                            (* Unsize *)
                            M.pointer_coercion
                              (M.alloc (|
                                Value.Array [ M.rust_cast (M.read (| M.read (| result |) |)) ]
                              |))
                          ]
                        |)
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (M.find_or_pattern (|
                        γ,
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ := M.read (| γ |) in
                              let γ1_0 :=
                                M.SubPointer.get_struct_record_field (|
                                  γ,
                                  "specs::step::StepInfo::I32SignExtendI8",
                                  "value"
                                |) in
                              let γ1_1 :=
                                M.SubPointer.get_struct_record_field (|
                                  γ,
                                  "specs::step::StepInfo::I32SignExtendI8",
                                  "result"
                                |) in
                              let value := M.alloc (| γ1_0 |) in
                              let result := M.alloc (| γ1_1 |) in
                              Value.Tuple [ value; result ]));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ := M.read (| γ |) in
                              let γ1_0 :=
                                M.SubPointer.get_struct_record_field (|
                                  γ,
                                  "specs::step::StepInfo::I32SignExtendI16",
                                  "value"
                                |) in
                              let γ1_1 :=
                                M.SubPointer.get_struct_record_field (|
                                  γ,
                                  "specs::step::StepInfo::I32SignExtendI16",
                                  "result"
                                |) in
                              let value := M.alloc (| γ1_0 |) in
                              let result := M.alloc (| γ1_1 |) in
                              Value.Tuple [ value; result ]))
                        ],
                        M.closure
                          (fun γ =>
                            ltac:(M.monadic
                              match γ with
                              | [ value; result ] =>
                                M.alloc (|
                                  M.call_closure (|
                                    M.get_function (|
                                      "delphinus_zkwasm::runtime::mem_op_from_stack_only_step",
                                      []
                                    |),
                                    [
                                      M.read (| sp_before_execution |);
                                      M.read (| eid |);
                                      Value.StructTuple "specs::mtable::VarType::I32" [];
                                      Value.StructTuple "specs::mtable::VarType::I32" [];
                                      (* Unsize *)
                                      M.pointer_coercion
                                        (M.alloc (|
                                          Value.Array
                                            [
                                              M.rust_cast
                                                (M.rust_cast (M.read (| M.read (| value |) |)))
                                            ]
                                        |));
                                      (* Unsize *)
                                      M.pointer_coercion
                                        (M.alloc (|
                                          Value.Array
                                            [
                                              M.rust_cast
                                                (M.rust_cast (M.read (| M.read (| result |) |)))
                                            ]
                                        |))
                                    ]
                                  |)
                                |)
                              | _ => M.impossible (||)
                              end))
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (M.find_or_pattern (|
                        γ,
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ := M.read (| γ |) in
                              let γ1_0 :=
                                M.SubPointer.get_struct_record_field (|
                                  γ,
                                  "specs::step::StepInfo::I64SignExtendI8",
                                  "value"
                                |) in
                              let γ1_1 :=
                                M.SubPointer.get_struct_record_field (|
                                  γ,
                                  "specs::step::StepInfo::I64SignExtendI8",
                                  "result"
                                |) in
                              let value := M.alloc (| γ1_0 |) in
                              let result := M.alloc (| γ1_1 |) in
                              Value.Tuple [ value; result ]));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ := M.read (| γ |) in
                              let γ1_0 :=
                                M.SubPointer.get_struct_record_field (|
                                  γ,
                                  "specs::step::StepInfo::I64SignExtendI16",
                                  "value"
                                |) in
                              let γ1_1 :=
                                M.SubPointer.get_struct_record_field (|
                                  γ,
                                  "specs::step::StepInfo::I64SignExtendI16",
                                  "result"
                                |) in
                              let value := M.alloc (| γ1_0 |) in
                              let result := M.alloc (| γ1_1 |) in
                              Value.Tuple [ value; result ]));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ := M.read (| γ |) in
                              let γ1_0 :=
                                M.SubPointer.get_struct_record_field (|
                                  γ,
                                  "specs::step::StepInfo::I64SignExtendI32",
                                  "value"
                                |) in
                              let γ1_1 :=
                                M.SubPointer.get_struct_record_field (|
                                  γ,
                                  "specs::step::StepInfo::I64SignExtendI32",
                                  "result"
                                |) in
                              let value := M.alloc (| γ1_0 |) in
                              let result := M.alloc (| γ1_1 |) in
                              Value.Tuple [ value; result ]))
                        ],
                        M.closure
                          (fun γ =>
                            ltac:(M.monadic
                              match γ with
                              | [ value; result ] =>
                                M.alloc (|
                                  M.call_closure (|
                                    M.get_function (|
                                      "delphinus_zkwasm::runtime::mem_op_from_stack_only_step",
                                      []
                                    |),
                                    [
                                      M.read (| sp_before_execution |);
                                      M.read (| eid |);
                                      Value.StructTuple "specs::mtable::VarType::I64" [];
                                      Value.StructTuple "specs::mtable::VarType::I64" [];
                                      (* Unsize *)
                                      M.pointer_coercion
                                        (M.alloc (|
                                          Value.Array
                                            [ M.rust_cast (M.read (| M.read (| value |) |)) ]
                                        |));
                                      (* Unsize *)
                                      M.pointer_coercion
                                        (M.alloc (|
                                          Value.Array
                                            [ M.rust_cast (M.read (| M.read (| result |) |)) ]
                                        |))
                                    ]
                                  |)
                                |)
                              | _ => M.impossible (||)
                              end))
                      |)))
                ]
              |)
            |)))
        |)))
    | _, _ => M.impossible
    end.
  
  (*
  pub(crate) fn mem_op_from_stack_only_step(
      sp_before_execution: u32,
      eid: u32,
      inputs_type: VarType,
      outputs_type: VarType,
      pop_value: &[u64],
      push_value: &[u64],
  ) -> Vec<MemoryTableEntry> {
      let mut mem_op = vec![];
      let mut sp = sp_before_execution;
  
      for i in 0..pop_value.len() {
          mem_op.push(MemoryTableEntry {
              eid,
              offset: sp + 1,
              ltype: LocationType::Stack,
              atype: AccessType::Read,
              vtype: inputs_type,
              is_mutable: true,
              value: pop_value[i],
          });
          sp = sp + 1;
      }
  
      for i in 0..push_value.len() {
          mem_op.push(MemoryTableEntry {
              eid,
              offset: sp,
              ltype: LocationType::Stack,
              atype: AccessType::Write,
              vtype: outputs_type,
              is_mutable: true,
              value: push_value[i],
          });
          sp = sp - 1;
      }
  
      mem_op
  }
  *)
  Definition mem_op_from_stack_only_step (τ : list Ty.t) (α : list Value.t) : M :=
    match τ, α with
    | [], [ sp_before_execution; eid; inputs_type; outputs_type; pop_value; push_value ] =>
      ltac:(M.monadic
        (let sp_before_execution := M.alloc (| sp_before_execution |) in
        let eid := M.alloc (| eid |) in
        let inputs_type := M.alloc (| inputs_type |) in
        let outputs_type := M.alloc (| outputs_type |) in
        let pop_value := M.alloc (| pop_value |) in
        let push_value := M.alloc (| push_value |) in
        M.read (|
          let mem_op :=
            M.alloc (|
              M.call_closure (|
                M.get_associated_function (|
                  Ty.apply
                    (Ty.path "alloc::vec::Vec")
                    [ Ty.path "specs::mtable::MemoryTableEntry"; Ty.path "alloc::alloc::Global" ],
                  "new",
                  []
                |),
                []
              |)
            |) in
          let sp := M.copy (| sp_before_execution |) in
          let _ :=
            M.use
              (M.match_operator (|
                M.alloc (|
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::iter::traits::collect::IntoIterator",
                      Ty.apply (Ty.path "core::ops::range::Range") [ Ty.path "usize" ],
                      [],
                      "into_iter",
                      []
                    |),
                    [
                      Value.StructRecord
                        "core::ops::range::Range"
                        [
                          ("start", Value.Integer 0);
                          ("end_",
                            M.call_closure (|
                              M.get_associated_function (|
                                Ty.apply (Ty.path "slice") [ Ty.path "u64" ],
                                "len",
                                []
                              |),
                              [ M.read (| pop_value |) ]
                            |))
                        ]
                    ]
                  |)
                |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let iter := M.copy (| γ |) in
                      M.loop (|
                        ltac:(M.monadic
                          (let _ :=
                            M.match_operator (|
                              M.alloc (|
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "core::iter::traits::iterator::Iterator",
                                    Ty.apply
                                      (Ty.path "core::ops::range::Range")
                                      [ Ty.path "usize" ],
                                    [],
                                    "next",
                                    []
                                  |),
                                  [ iter ]
                                |)
                              |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (M.alloc (| M.never_to_any (| M.read (| M.break (||) |) |) |)));
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ0_0 :=
                                      M.SubPointer.get_struct_tuple_field (|
                                        γ,
                                        "core::option::Option::Some",
                                        0
                                      |) in
                                    let i := M.copy (| γ0_0 |) in
                                    let _ :=
                                      M.alloc (|
                                        M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              [
                                                Ty.path "specs::mtable::MemoryTableEntry";
                                                Ty.path "alloc::alloc::Global"
                                              ],
                                            "push",
                                            []
                                          |),
                                          [
                                            mem_op;
                                            Value.StructRecord
                                              "specs::mtable::MemoryTableEntry"
                                              [
                                                ("eid", M.read (| eid |));
                                                ("offset",
                                                  BinOp.Panic.add (|
                                                    Integer.U32,
                                                    M.read (| sp |),
                                                    Value.Integer 1
                                                  |));
                                                ("ltype",
                                                  Value.StructTuple
                                                    "specs::mtable::LocationType::Stack"
                                                    []);
                                                ("atype",
                                                  Value.StructTuple
                                                    "specs::mtable::AccessType::Read"
                                                    []);
                                                ("vtype", M.read (| inputs_type |));
                                                ("is_mutable", Value.Bool true);
                                                ("value",
                                                  M.read (|
                                                    M.SubPointer.get_array_field (|
                                                      M.read (| pop_value |),
                                                      i
                                                    |)
                                                  |))
                                              ]
                                          ]
                                        |)
                                      |) in
                                    let _ :=
                                      M.write (|
                                        sp,
                                        BinOp.Panic.add (|
                                          Integer.U32,
                                          M.read (| sp |),
                                          Value.Integer 1
                                        |)
                                      |) in
                                    M.alloc (| Value.Tuple [] |)))
                              ]
                            |) in
                          M.alloc (| Value.Tuple [] |)))
                      |)))
                ]
              |)) in
          let _ :=
            M.use
              (M.match_operator (|
                M.alloc (|
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::iter::traits::collect::IntoIterator",
                      Ty.apply (Ty.path "core::ops::range::Range") [ Ty.path "usize" ],
                      [],
                      "into_iter",
                      []
                    |),
                    [
                      Value.StructRecord
                        "core::ops::range::Range"
                        [
                          ("start", Value.Integer 0);
                          ("end_",
                            M.call_closure (|
                              M.get_associated_function (|
                                Ty.apply (Ty.path "slice") [ Ty.path "u64" ],
                                "len",
                                []
                              |),
                              [ M.read (| push_value |) ]
                            |))
                        ]
                    ]
                  |)
                |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let iter := M.copy (| γ |) in
                      M.loop (|
                        ltac:(M.monadic
                          (let _ :=
                            M.match_operator (|
                              M.alloc (|
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "core::iter::traits::iterator::Iterator",
                                    Ty.apply
                                      (Ty.path "core::ops::range::Range")
                                      [ Ty.path "usize" ],
                                    [],
                                    "next",
                                    []
                                  |),
                                  [ iter ]
                                |)
                              |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (M.alloc (| M.never_to_any (| M.read (| M.break (||) |) |) |)));
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ0_0 :=
                                      M.SubPointer.get_struct_tuple_field (|
                                        γ,
                                        "core::option::Option::Some",
                                        0
                                      |) in
                                    let i := M.copy (| γ0_0 |) in
                                    let _ :=
                                      M.alloc (|
                                        M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              [
                                                Ty.path "specs::mtable::MemoryTableEntry";
                                                Ty.path "alloc::alloc::Global"
                                              ],
                                            "push",
                                            []
                                          |),
                                          [
                                            mem_op;
                                            Value.StructRecord
                                              "specs::mtable::MemoryTableEntry"
                                              [
                                                ("eid", M.read (| eid |));
                                                ("offset", M.read (| sp |));
                                                ("ltype",
                                                  Value.StructTuple
                                                    "specs::mtable::LocationType::Stack"
                                                    []);
                                                ("atype",
                                                  Value.StructTuple
                                                    "specs::mtable::AccessType::Write"
                                                    []);
                                                ("vtype", M.read (| outputs_type |));
                                                ("is_mutable", Value.Bool true);
                                                ("value",
                                                  M.read (|
                                                    M.SubPointer.get_array_field (|
                                                      M.read (| push_value |),
                                                      i
                                                    |)
                                                  |))
                                              ]
                                          ]
                                        |)
                                      |) in
                                    let _ :=
                                      M.write (|
                                        sp,
                                        BinOp.Panic.sub (|
                                          Integer.U32,
                                          M.read (| sp |),
                                          Value.Integer 1
                                        |)
                                      |) in
                                    M.alloc (| Value.Tuple [] |)))
                              ]
                            |) in
                          M.alloc (| Value.Tuple [] |)))
                      |)))
                ]
              |)) in
          mem_op
        |)))
    | _, _ => M.impossible
    end.
End runtime.
