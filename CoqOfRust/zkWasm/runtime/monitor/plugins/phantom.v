(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module runtime.
  Module monitor.
    Module plugins.
      Module phantom.
        (* StructRecord
          {
            name := "PhantomHelper";
            ty_params := [];
            fields :=
              [
                ("phantom_regex",
                  Ty.apply
                    (Ty.path "alloc::vec::Vec")
                    [ Ty.path "regex::regex::string::Regex"; Ty.path "alloc::alloc::Global" ]);
                ("phantom_functions",
                  Ty.apply
                    (Ty.path "std::collections::hash::set::HashSet")
                    [ Ty.path "u32"; Ty.path "std::hash::random::RandomState" ]);
                ("wasm_input", Ty.path "wasmi::func::FuncRef");
                ("frame",
                  Ty.apply
                    (Ty.path "alloc::vec::Vec")
                    [ Ty.path "u32"; Ty.path "alloc::alloc::Global" ])
              ];
          } *)
        
        Module Impl_delphinus_zkwasm_runtime_monitor_plugins_phantom_PhantomHelper.
          Definition Self : Ty.t :=
            Ty.path "delphinus_zkwasm::runtime::monitor::plugins::phantom::PhantomHelper".
          
          (*
              pub fn new(phantom_regex: &Vec<String>, wasm_input: FuncRef) -> Self {
                  Self {
                      phantom_regex: phantom_regex
                          .iter()
                          .map(|s| Regex::new(s).unwrap())
                          .collect::<Vec<_>>(),
                      phantom_functions: HashSet::new(),
          
                      wasm_input,
          
                      frame: Vec::new(),
                  }
              }
          *)
          Definition new (τ : list Ty.t) (α : list Value.t) : M :=
            match τ, α with
            | [], [ phantom_regex; wasm_input ] =>
              ltac:(M.monadic
                (let phantom_regex := M.alloc (| phantom_regex |) in
                let wasm_input := M.alloc (| wasm_input |) in
                Value.StructRecord
                  "delphinus_zkwasm::runtime::monitor::plugins::phantom::PhantomHelper"
                  [
                    ("phantom_regex",
                      M.call_closure (|
                        M.get_trait_method (|
                          "core::iter::traits::iterator::Iterator",
                          Ty.apply
                            (Ty.path "core::iter::adapters::map::Map")
                            [
                              Ty.apply
                                (Ty.path "core::slice::iter::Iter")
                                [ Ty.path "alloc::string::String" ];
                              Ty.function
                                [
                                  Ty.tuple
                                    [ Ty.apply (Ty.path "&") [ Ty.path "alloc::string::String" ] ]
                                ]
                                (Ty.path "regex::regex::string::Regex")
                            ],
                          [],
                          "collect",
                          [
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              [
                                Ty.path "regex::regex::string::Regex";
                                Ty.path "alloc::alloc::Global"
                              ]
                          ]
                        |),
                        [
                          M.call_closure (|
                            M.get_trait_method (|
                              "core::iter::traits::iterator::Iterator",
                              Ty.apply
                                (Ty.path "core::slice::iter::Iter")
                                [ Ty.path "alloc::string::String" ],
                              [],
                              "map",
                              [
                                Ty.path "regex::regex::string::Regex";
                                Ty.function
                                  [
                                    Ty.tuple
                                      [ Ty.apply (Ty.path "&") [ Ty.path "alloc::string::String" ] ]
                                  ]
                                  (Ty.path "regex::regex::string::Regex")
                              ]
                            |),
                            [
                              M.call_closure (|
                                M.get_associated_function (|
                                  Ty.apply (Ty.path "slice") [ Ty.path "alloc::string::String" ],
                                  "iter",
                                  []
                                |),
                                [
                                  M.call_closure (|
                                    M.get_trait_method (|
                                      "core::ops::deref::Deref",
                                      Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        [
                                          Ty.path "alloc::string::String";
                                          Ty.path "alloc::alloc::Global"
                                        ],
                                      [],
                                      "deref",
                                      []
                                    |),
                                    [ M.read (| phantom_regex |) ]
                                  |)
                                ]
                              |);
                              M.closure
                                (fun γ =>
                                  ltac:(M.monadic
                                    match γ with
                                    | [ α0 ] =>
                                      M.match_operator (|
                                        M.alloc (| α0 |),
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let s := M.copy (| γ |) in
                                              M.call_closure (|
                                                M.get_associated_function (|
                                                  Ty.apply
                                                    (Ty.path "core::result::Result")
                                                    [
                                                      Ty.path "regex::regex::string::Regex";
                                                      Ty.path "regex::error::Error"
                                                    ],
                                                  "unwrap",
                                                  []
                                                |),
                                                [
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.path "regex::regex::string::Regex",
                                                      "new",
                                                      []
                                                    |),
                                                    [
                                                      M.call_closure (|
                                                        M.get_trait_method (|
                                                          "core::ops::deref::Deref",
                                                          Ty.path "alloc::string::String",
                                                          [],
                                                          "deref",
                                                          []
                                                        |),
                                                        [ M.read (| s |) ]
                                                      |)
                                                    ]
                                                  |)
                                                ]
                                              |)))
                                        ]
                                      |)
                                    | _ => M.impossible (||)
                                    end))
                            ]
                          |)
                        ]
                      |));
                    ("phantom_functions",
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.apply
                            (Ty.path "std::collections::hash::set::HashSet")
                            [ Ty.path "u32"; Ty.path "std::hash::random::RandomState" ],
                          "new",
                          []
                        |),
                        []
                      |));
                    ("wasm_input", M.read (| wasm_input |));
                    ("frame",
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            [ Ty.path "u32"; Ty.path "alloc::alloc::Global" ],
                          "new",
                          []
                        |),
                        []
                      |))
                  ]))
            | _, _ => M.impossible
            end.
          
          Axiom AssociatedFunction_new : M.IsAssociatedFunction Self "new" new.
          
          (*
              pub(in crate::runtime::monitor) fn is_in_phantom_function(&self) -> bool {
                  self.frame.len() > 0
              }
          *)
          Definition is_in_phantom_function (τ : list Ty.t) (α : list Value.t) : M :=
            match τ, α with
            | [], [ self ] =>
              ltac:(M.monadic
                (let self := M.alloc (| self |) in
                BinOp.Pure.gt
                  (M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        [ Ty.path "u32"; Ty.path "alloc::alloc::Global" ],
                      "len",
                      []
                    |),
                    [
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "delphinus_zkwasm::runtime::monitor::plugins::phantom::PhantomHelper",
                        "frame"
                      |)
                    ]
                  |))
                  (Value.Integer 0)))
            | _, _ => M.impossible
            end.
          
          Axiom AssociatedFunction_is_in_phantom_function :
            M.IsAssociatedFunction Self "is_in_phantom_function" is_in_phantom_function.
          
          (*
              pub(in crate::runtime::monitor) fn is_phantom_function(&self, func_index: u32) -> bool {
                  self.phantom_functions.contains(&func_index)
              }
          *)
          Definition is_phantom_function (τ : list Ty.t) (α : list Value.t) : M :=
            match τ, α with
            | [], [ self; func_index ] =>
              ltac:(M.monadic
                (let self := M.alloc (| self |) in
                let func_index := M.alloc (| func_index |) in
                M.call_closure (|
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path "std::collections::hash::set::HashSet")
                      [ Ty.path "u32"; Ty.path "std::hash::random::RandomState" ],
                    "contains",
                    [ Ty.path "u32" ]
                  |),
                  [
                    M.SubPointer.get_struct_record_field (|
                      M.read (| self |),
                      "delphinus_zkwasm::runtime::monitor::plugins::phantom::PhantomHelper",
                      "phantom_functions"
                    |);
                    func_index
                  ]
                |)))
            | _, _ => M.impossible
            end.
          
          Axiom AssociatedFunction_is_phantom_function :
            M.IsAssociatedFunction Self "is_phantom_function" is_phantom_function.
          
          (*
              pub(in crate::runtime::monitor) fn wasm_input_func_idx(&self, module_ref: &ModuleRef) -> u32 {
                  module_ref.func_index_by_func_ref(&self.wasm_input)
              }
          *)
          Definition wasm_input_func_idx (τ : list Ty.t) (α : list Value.t) : M :=
            match τ, α with
            | [], [ self; module_ref ] =>
              ltac:(M.monadic
                (let self := M.alloc (| self |) in
                let module_ref := M.alloc (| module_ref |) in
                M.call_closure (|
                  M.get_associated_function (|
                    Ty.path "wasmi::module::ModuleInstance",
                    "func_index_by_func_ref",
                    []
                  |),
                  [
                    M.call_closure (|
                      M.get_trait_method (|
                        "core::ops::deref::Deref",
                        Ty.path "wasmi::module::ModuleRef",
                        [],
                        "deref",
                        []
                      |),
                      [ M.read (| module_ref |) ]
                    |);
                    M.SubPointer.get_struct_record_field (|
                      M.read (| self |),
                      "delphinus_zkwasm::runtime::monitor::plugins::phantom::PhantomHelper",
                      "wasm_input"
                    |)
                  ]
                |)))
            | _, _ => M.impossible
            end.
          
          Axiom AssociatedFunction_wasm_input_func_idx :
            M.IsAssociatedFunction Self "wasm_input_func_idx" wasm_input_func_idx.
          
          (*
              pub(in crate::runtime::monitor) fn push_frame(&mut self, sp: u32) {
                  self.frame.push(sp)
              }
          *)
          Definition push_frame (τ : list Ty.t) (α : list Value.t) : M :=
            match τ, α with
            | [], [ self; sp ] =>
              ltac:(M.monadic
                (let self := M.alloc (| self |) in
                let sp := M.alloc (| sp |) in
                M.call_closure (|
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      [ Ty.path "u32"; Ty.path "alloc::alloc::Global" ],
                    "push",
                    []
                  |),
                  [
                    M.SubPointer.get_struct_record_field (|
                      M.read (| self |),
                      "delphinus_zkwasm::runtime::monitor::plugins::phantom::PhantomHelper",
                      "frame"
                    |);
                    M.read (| sp |)
                  ]
                |)))
            | _, _ => M.impossible
            end.
          
          Axiom AssociatedFunction_push_frame : M.IsAssociatedFunction Self "push_frame" push_frame.
          
          (*
              pub(in crate::runtime::monitor) fn pop_frame(&mut self) -> Option<u32> {
                  self.frame.pop()
              }
          *)
          Definition pop_frame (τ : list Ty.t) (α : list Value.t) : M :=
            match τ, α with
            | [], [ self ] =>
              ltac:(M.monadic
                (let self := M.alloc (| self |) in
                M.call_closure (|
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      [ Ty.path "u32"; Ty.path "alloc::alloc::Global" ],
                    "pop",
                    []
                  |),
                  [
                    M.SubPointer.get_struct_record_field (|
                      M.read (| self |),
                      "delphinus_zkwasm::runtime::monitor::plugins::phantom::PhantomHelper",
                      "frame"
                    |)
                  ]
                |)))
            | _, _ => M.impossible
            end.
          
          Axiom AssociatedFunction_pop_frame : M.IsAssociatedFunction Self "pop_frame" pop_frame.
        End Impl_delphinus_zkwasm_runtime_monitor_plugins_phantom_PhantomHelper.
        
        Module Impl_wasmi_monitor_Monitor_for_delphinus_zkwasm_runtime_monitor_plugins_phantom_PhantomHelper.
          Definition Self : Ty.t :=
            Ty.path "delphinus_zkwasm::runtime::monitor::plugins::phantom::PhantomHelper".
          
          (*
              fn register_module(
                  &mut self,
                  _module: &Module,
                  module_ref: &ModuleRef,
                  _entry: &str,
              ) -> Result<(), wasmi::Error> {
                  module_ref
                      .exports
                      .borrow()
                      .iter()
                      .for_each(|(name, export)| {
                          if export.as_func().is_some()
                              && self.phantom_regex.iter().any(|re| re.is_match(name))
                          {
                              self.phantom_functions
                                  .insert(module_ref.func_index_by_func_ref(export.as_func().unwrap()));
                          }
                      });
          
                  Ok(())
              }
          *)
          Definition register_module (τ : list Ty.t) (α : list Value.t) : M :=
            match τ, α with
            | [], [ self; _module; module_ref; _entry ] =>
              ltac:(M.monadic
                (let self := M.alloc (| self |) in
                let _module := M.alloc (| _module |) in
                let module_ref := M.alloc (| module_ref |) in
                let _entry := M.alloc (| _entry |) in
                M.read (|
                  let _ :=
                    M.alloc (|
                      M.call_closure (|
                        M.get_trait_method (|
                          "core::iter::traits::iterator::Iterator",
                          Ty.apply
                            (Ty.path "alloc::collections::btree::map::Iter")
                            [ Ty.path "alloc::string::String"; Ty.path "wasmi::module::ExternVal" ],
                          [],
                          "for_each",
                          [
                            Ty.function
                              [
                                Ty.tuple
                                  [
                                    Ty.tuple
                                      [
                                        Ty.apply (Ty.path "&") [ Ty.path "alloc::string::String" ];
                                        Ty.apply
                                          (Ty.path "&")
                                          [ Ty.path "wasmi::module::ExternVal" ]
                                      ]
                                  ]
                              ]
                              (Ty.tuple [])
                          ]
                        |),
                        [
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.apply
                                (Ty.path "alloc::collections::btree::map::BTreeMap")
                                [
                                  Ty.path "alloc::string::String";
                                  Ty.path "wasmi::module::ExternVal";
                                  Ty.path "alloc::alloc::Global"
                                ],
                              "iter",
                              []
                            |),
                            [
                              M.call_closure (|
                                M.get_trait_method (|
                                  "core::ops::deref::Deref",
                                  Ty.apply
                                    (Ty.path "core::cell::Ref")
                                    [
                                      Ty.apply
                                        (Ty.path "alloc::collections::btree::map::BTreeMap")
                                        [
                                          Ty.path "alloc::string::String";
                                          Ty.path "wasmi::module::ExternVal";
                                          Ty.path "alloc::alloc::Global"
                                        ]
                                    ],
                                  [],
                                  "deref",
                                  []
                                |),
                                [
                                  M.alloc (|
                                    M.call_closure (|
                                      M.get_associated_function (|
                                        Ty.apply
                                          (Ty.path "core::cell::RefCell")
                                          [
                                            Ty.apply
                                              (Ty.path "alloc::collections::btree::map::BTreeMap")
                                              [
                                                Ty.path "alloc::string::String";
                                                Ty.path "wasmi::module::ExternVal";
                                                Ty.path "alloc::alloc::Global"
                                              ]
                                          ],
                                        "borrow",
                                        []
                                      |),
                                      [
                                        M.SubPointer.get_struct_record_field (|
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "core::ops::deref::Deref",
                                              Ty.path "wasmi::module::ModuleRef",
                                              [],
                                              "deref",
                                              []
                                            |),
                                            [ M.read (| module_ref |) ]
                                          |),
                                          "wasmi::module::ModuleInstance",
                                          "exports"
                                        |)
                                      ]
                                    |)
                                  |)
                                ]
                              |)
                            ]
                          |);
                          M.closure
                            (fun γ =>
                              ltac:(M.monadic
                                match γ with
                                | [ α0 ] =>
                                  M.match_operator (|
                                    M.alloc (| α0 |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                                          let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                                          let name := M.copy (| γ0_0 |) in
                                          let export := M.copy (| γ0_1 |) in
                                          M.read (|
                                            M.match_operator (|
                                              M.alloc (| Value.Tuple [] |),
                                              [
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (let γ :=
                                                      M.use
                                                        (M.alloc (|
                                                          LogicalOp.and (|
                                                            M.call_closure (|
                                                              M.get_associated_function (|
                                                                Ty.apply
                                                                  (Ty.path "core::option::Option")
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path "&")
                                                                      [
                                                                        Ty.path
                                                                          "wasmi::func::FuncRef"
                                                                      ]
                                                                  ],
                                                                "is_some",
                                                                []
                                                              |),
                                                              [
                                                                M.alloc (|
                                                                  M.call_closure (|
                                                                    M.get_associated_function (|
                                                                      Ty.path
                                                                        "wasmi::module::ExternVal",
                                                                      "as_func",
                                                                      []
                                                                    |),
                                                                    [ M.read (| export |) ]
                                                                  |)
                                                                |)
                                                              ]
                                                            |),
                                                            ltac:(M.monadic
                                                              (M.call_closure (|
                                                                M.get_trait_method (|
                                                                  "core::iter::traits::iterator::Iterator",
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "core::slice::iter::Iter")
                                                                    [
                                                                      Ty.path
                                                                        "regex::regex::string::Regex"
                                                                    ],
                                                                  [],
                                                                  "any",
                                                                  [
                                                                    Ty.function
                                                                      [
                                                                        Ty.tuple
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path "&")
                                                                              [
                                                                                Ty.path
                                                                                  "regex::regex::string::Regex"
                                                                              ]
                                                                          ]
                                                                      ]
                                                                      (Ty.path "bool")
                                                                  ]
                                                                |),
                                                                [
                                                                  M.alloc (|
                                                                    M.call_closure (|
                                                                      M.get_associated_function (|
                                                                        Ty.apply
                                                                          (Ty.path "slice")
                                                                          [
                                                                            Ty.path
                                                                              "regex::regex::string::Regex"
                                                                          ],
                                                                        "iter",
                                                                        []
                                                                      |),
                                                                      [
                                                                        M.call_closure (|
                                                                          M.get_trait_method (|
                                                                            "core::ops::deref::Deref",
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "alloc::vec::Vec")
                                                                              [
                                                                                Ty.path
                                                                                  "regex::regex::string::Regex";
                                                                                Ty.path
                                                                                  "alloc::alloc::Global"
                                                                              ],
                                                                            [],
                                                                            "deref",
                                                                            []
                                                                          |),
                                                                          [
                                                                            M.SubPointer.get_struct_record_field (|
                                                                              M.read (| self |),
                                                                              "delphinus_zkwasm::runtime::monitor::plugins::phantom::PhantomHelper",
                                                                              "phantom_regex"
                                                                            |)
                                                                          ]
                                                                        |)
                                                                      ]
                                                                    |)
                                                                  |);
                                                                  M.closure
                                                                    (fun γ =>
                                                                      ltac:(M.monadic
                                                                        match γ with
                                                                        | [ α0 ] =>
                                                                          M.match_operator (|
                                                                            M.alloc (| α0 |),
                                                                            [
                                                                              fun γ =>
                                                                                ltac:(M.monadic
                                                                                  (let re :=
                                                                                    M.copy (|
                                                                                      γ
                                                                                    |) in
                                                                                  M.call_closure (|
                                                                                    M.get_associated_function (|
                                                                                      Ty.path
                                                                                        "regex::regex::string::Regex",
                                                                                      "is_match",
                                                                                      []
                                                                                    |),
                                                                                    [
                                                                                      M.read (|
                                                                                        re
                                                                                      |);
                                                                                      M.call_closure (|
                                                                                        M.get_trait_method (|
                                                                                          "core::ops::deref::Deref",
                                                                                          Ty.path
                                                                                            "alloc::string::String",
                                                                                          [],
                                                                                          "deref",
                                                                                          []
                                                                                        |),
                                                                                        [
                                                                                          M.read (|
                                                                                            name
                                                                                          |)
                                                                                        ]
                                                                                      |)
                                                                                    ]
                                                                                  |)))
                                                                            ]
                                                                          |)
                                                                        | _ => M.impossible (||)
                                                                        end))
                                                                ]
                                                              |)))
                                                          |)
                                                        |)) in
                                                    let _ :=
                                                      M.is_constant_or_break_match (|
                                                        M.read (| γ |),
                                                        Value.Bool true
                                                      |) in
                                                    let _ :=
                                                      M.alloc (|
                                                        M.call_closure (|
                                                          M.get_associated_function (|
                                                            Ty.apply
                                                              (Ty.path
                                                                "std::collections::hash::set::HashSet")
                                                              [
                                                                Ty.path "u32";
                                                                Ty.path
                                                                  "std::hash::random::RandomState"
                                                              ],
                                                            "insert",
                                                            []
                                                          |),
                                                          [
                                                            M.SubPointer.get_struct_record_field (|
                                                              M.read (| self |),
                                                              "delphinus_zkwasm::runtime::monitor::plugins::phantom::PhantomHelper",
                                                              "phantom_functions"
                                                            |);
                                                            M.call_closure (|
                                                              M.get_associated_function (|
                                                                Ty.path
                                                                  "wasmi::module::ModuleInstance",
                                                                "func_index_by_func_ref",
                                                                []
                                                              |),
                                                              [
                                                                M.call_closure (|
                                                                  M.get_trait_method (|
                                                                    "core::ops::deref::Deref",
                                                                    Ty.path
                                                                      "wasmi::module::ModuleRef",
                                                                    [],
                                                                    "deref",
                                                                    []
                                                                  |),
                                                                  [ M.read (| module_ref |) ]
                                                                |);
                                                                M.call_closure (|
                                                                  M.get_associated_function (|
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "core::option::Option")
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path "&")
                                                                          [
                                                                            Ty.path
                                                                              "wasmi::func::FuncRef"
                                                                          ]
                                                                      ],
                                                                    "unwrap",
                                                                    []
                                                                  |),
                                                                  [
                                                                    M.call_closure (|
                                                                      M.get_associated_function (|
                                                                        Ty.path
                                                                          "wasmi::module::ExternVal",
                                                                        "as_func",
                                                                        []
                                                                      |),
                                                                      [ M.read (| export |) ]
                                                                    |)
                                                                  ]
                                                                |)
                                                              ]
                                                            |)
                                                          ]
                                                        |)
                                                      |) in
                                                    M.alloc (| Value.Tuple [] |)));
                                                fun γ =>
                                                  ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                              ]
                                            |)
                                          |)))
                                    ]
                                  |)
                                | _ => M.impossible (||)
                                end))
                        ]
                      |)
                    |) in
                  M.alloc (| Value.StructTuple "core::result::Result::Ok" [ Value.Tuple [] ] |)
                |)))
            | _, _ => M.impossible
            end.
          
          Axiom Implements :
            M.IsTraitInstance
              "wasmi::monitor::Monitor"
              Self
              (* Trait polymorphic types *) []
              (* Instance *) [ ("register_module", InstanceField.Method register_module) ].
        End Impl_wasmi_monitor_Monitor_for_delphinus_zkwasm_runtime_monitor_plugins_phantom_PhantomHelper.
      End phantom.
    End plugins.
  End monitor.
End runtime.
