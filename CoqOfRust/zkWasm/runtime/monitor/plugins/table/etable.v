(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module runtime.
  Module monitor.
    Module plugins.
      Module table.
        Module etable.
          (* StructRecord
            {
              name := "ETable";
              ty_params := [];
              fields :=
                [
                  ("eid", Ty.path "u32");
                  ("slices",
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      [ Ty.path "specs::etable::EventTableBackend"; Ty.path "alloc::alloc::Global"
                      ]);
                  ("entries",
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      [ Ty.path "specs::etable::EventTableEntry"; Ty.path "alloc::alloc::Global" ]);
                  ("capacity", Ty.path "u32");
                  ("backend", Ty.path "specs::TraceBackend")
                ];
            } *)
          
          Module Impl_delphinus_zkwasm_runtime_monitor_plugins_table_etable_ETable.
            Definition Self : Ty.t :=
              Ty.path "delphinus_zkwasm::runtime::monitor::plugins::table::etable::ETable".
            
            (*
                pub(crate) fn new(capacity: u32, backend: TraceBackend) -> Self {
                    Self {
                        eid: 0,
                        slices: Vec::default(),
                        entries: Vec::with_capacity(capacity as usize),
                        capacity,
                        backend,
                    }
                }
            *)
            Definition new (τ : list Ty.t) (α : list Value.t) : M :=
              match τ, α with
              | [], [ capacity; backend ] =>
                ltac:(M.monadic
                  (let capacity := M.alloc (| capacity |) in
                  let backend := M.alloc (| backend |) in
                  Value.StructRecord
                    "delphinus_zkwasm::runtime::monitor::plugins::table::etable::ETable"
                    [
                      ("eid", Value.Integer 0);
                      ("slices",
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::default::Default",
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              [
                                Ty.path "specs::etable::EventTableBackend";
                                Ty.path "alloc::alloc::Global"
                              ],
                            [],
                            "default",
                            []
                          |),
                          []
                        |));
                      ("entries",
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              [
                                Ty.path "specs::etable::EventTableEntry";
                                Ty.path "alloc::alloc::Global"
                              ],
                            "with_capacity",
                            []
                          |),
                          [ M.rust_cast (M.read (| capacity |)) ]
                        |));
                      ("capacity", M.read (| capacity |));
                      ("backend", M.read (| backend |))
                    ]))
              | _, _ => M.impossible
              end.
            
            Axiom AssociatedFunction_new : M.IsAssociatedFunction Self "new" new.
            
            (*
                fn flush(&mut self) {
                    let empty = Vec::with_capacity(self.capacity as usize);
                    let entries = std::mem::replace(&mut self.entries, empty);
            
                    let event_table = match &self.backend {
                        TraceBackend::File(write_file_fn) => {
                            let path = write_file_fn(self.slices.len(), &EventTable::new(entries));
            
                            EventTableBackend::Json(path)
                        }
                        TraceBackend::Memory => EventTableBackend::Memory(EventTable::new(entries)),
                    };
            
                    self.slices.push(event_table);
                }
            *)
            Definition flush (τ : list Ty.t) (α : list Value.t) : M :=
              match τ, α with
              | [], [ self ] =>
                ltac:(M.monadic
                  (let self := M.alloc (| self |) in
                  M.read (|
                    let empty :=
                      M.alloc (|
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              [
                                Ty.path "specs::etable::EventTableEntry";
                                Ty.path "alloc::alloc::Global"
                              ],
                            "with_capacity",
                            []
                          |),
                          [
                            M.rust_cast
                              (M.read (|
                                M.SubPointer.get_struct_record_field (|
                                  M.read (| self |),
                                  "delphinus_zkwasm::runtime::monitor::plugins::table::etable::ETable",
                                  "capacity"
                                |)
                              |))
                          ]
                        |)
                      |) in
                    let entries :=
                      M.alloc (|
                        M.call_closure (|
                          M.get_function (|
                            "core::mem::replace",
                            [
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                [
                                  Ty.path "specs::etable::EventTableEntry";
                                  Ty.path "alloc::alloc::Global"
                                ]
                            ]
                          |),
                          [
                            M.SubPointer.get_struct_record_field (|
                              M.read (| self |),
                              "delphinus_zkwasm::runtime::monitor::plugins::table::etable::ETable",
                              "entries"
                            |);
                            M.read (| empty |)
                          ]
                        |)
                      |) in
                    let event_table :=
                      M.copy (|
                        M.match_operator (|
                          M.alloc (|
                            M.SubPointer.get_struct_record_field (|
                              M.read (| self |),
                              "delphinus_zkwasm::runtime::monitor::plugins::table::etable::ETable",
                              "backend"
                            |)
                          |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ := M.read (| γ |) in
                                let γ1_0 :=
                                  M.SubPointer.get_struct_tuple_field (|
                                    γ,
                                    "specs::TraceBackend::File",
                                    0
                                  |) in
                                let write_file_fn := M.alloc (| γ1_0 |) in
                                let path :=
                                  M.alloc (|
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::ops::function::Fn",
                                        Ty.apply
                                          (Ty.path "alloc::boxed::Box")
                                          [
                                            Ty.dyn
                                              [
                                                ("existential predicate with variables", []);
                                                ("existential predicate with variables", [])
                                              ];
                                            Ty.path "alloc::alloc::Global"
                                          ],
                                        [
                                          Ty.tuple
                                            [
                                              Ty.path "usize";
                                              Ty.apply
                                                (Ty.path "&")
                                                [ Ty.path "specs::etable::EventTable" ]
                                            ]
                                        ],
                                        "call",
                                        []
                                      |),
                                      [
                                        M.read (| write_file_fn |);
                                        Value.Tuple
                                          [
                                            M.call_closure (|
                                              M.get_associated_function (|
                                                Ty.apply
                                                  (Ty.path "alloc::vec::Vec")
                                                  [
                                                    Ty.path "specs::etable::EventTableBackend";
                                                    Ty.path "alloc::alloc::Global"
                                                  ],
                                                "len",
                                                []
                                              |),
                                              [
                                                M.SubPointer.get_struct_record_field (|
                                                  M.read (| self |),
                                                  "delphinus_zkwasm::runtime::monitor::plugins::table::etable::ETable",
                                                  "slices"
                                                |)
                                              ]
                                            |);
                                            M.alloc (|
                                              M.call_closure (|
                                                M.get_associated_function (|
                                                  Ty.path "specs::etable::EventTable",
                                                  "new",
                                                  []
                                                |),
                                                [ M.read (| entries |) ]
                                              |)
                                            |)
                                          ]
                                      ]
                                    |)
                                  |) in
                                M.alloc (|
                                  Value.StructTuple
                                    "specs::etable::EventTableBackend::Json"
                                    [ M.read (| path |) ]
                                |)));
                            fun γ =>
                              ltac:(M.monadic
                                (let γ := M.read (| γ |) in
                                M.alloc (|
                                  Value.StructTuple
                                    "specs::etable::EventTableBackend::Memory"
                                    [
                                      M.call_closure (|
                                        M.get_associated_function (|
                                          Ty.path "specs::etable::EventTable",
                                          "new",
                                          []
                                        |),
                                        [ M.read (| entries |) ]
                                      |)
                                    ]
                                |)))
                          ]
                        |)
                      |) in
                    let _ :=
                      M.alloc (|
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              [
                                Ty.path "specs::etable::EventTableBackend";
                                Ty.path "alloc::alloc::Global"
                              ],
                            "push",
                            []
                          |),
                          [
                            M.SubPointer.get_struct_record_field (|
                              M.read (| self |),
                              "delphinus_zkwasm::runtime::monitor::plugins::table::etable::ETable",
                              "slices"
                            |);
                            M.read (| event_table |)
                          ]
                        |)
                      |) in
                    M.alloc (| Value.Tuple [] |)
                  |)))
              | _, _ => M.impossible
              end.
            
            Axiom AssociatedFunction_flush : M.IsAssociatedFunction Self "flush" flush.
            
            (*
                pub(crate) fn push(
                    &mut self,
                    fid: u32,
                    iid: u32,
                    sp: u32,
                    allocated_memory_pages: u32,
                    last_jump_eid: u32,
                    step_info: StepInfo,
                ) {
                    if self.entries.len() == self.capacity as usize {
                        self.flush();
                    }
            
                    self.eid += 1;
            
                    let sp = (DEFAULT_VALUE_STACK_LIMIT as u32)
                        .checked_sub(sp)
                        .unwrap()
                        .checked_sub(1)
                        .unwrap();
            
                    let eentry = EventTableEntry {
                        eid: self.eid,
                        fid,
                        iid,
                        sp,
                        allocated_memory_pages,
                        last_jump_eid,
                        step_info,
                    };
            
                    self.entries.push(eentry);
                }
            *)
            Definition push (τ : list Ty.t) (α : list Value.t) : M :=
              match τ, α with
              | [], [ self; fid; iid; sp; allocated_memory_pages; last_jump_eid; step_info ] =>
                ltac:(M.monadic
                  (let self := M.alloc (| self |) in
                  let fid := M.alloc (| fid |) in
                  let iid := M.alloc (| iid |) in
                  let sp := M.alloc (| sp |) in
                  let allocated_memory_pages := M.alloc (| allocated_memory_pages |) in
                  let last_jump_eid := M.alloc (| last_jump_eid |) in
                  let step_info := M.alloc (| step_info |) in
                  M.read (|
                    let _ :=
                      M.match_operator (|
                        M.alloc (| Value.Tuple [] |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ :=
                                M.use
                                  (M.alloc (|
                                    BinOp.Pure.eq
                                      (M.call_closure (|
                                        M.get_associated_function (|
                                          Ty.apply
                                            (Ty.path "alloc::vec::Vec")
                                            [
                                              Ty.path "specs::etable::EventTableEntry";
                                              Ty.path "alloc::alloc::Global"
                                            ],
                                          "len",
                                          []
                                        |),
                                        [
                                          M.SubPointer.get_struct_record_field (|
                                            M.read (| self |),
                                            "delphinus_zkwasm::runtime::monitor::plugins::table::etable::ETable",
                                            "entries"
                                          |)
                                        ]
                                      |))
                                      (M.rust_cast
                                        (M.read (|
                                          M.SubPointer.get_struct_record_field (|
                                            M.read (| self |),
                                            "delphinus_zkwasm::runtime::monitor::plugins::table::etable::ETable",
                                            "capacity"
                                          |)
                                        |)))
                                  |)) in
                              let _ :=
                                M.is_constant_or_break_match (|
                                  M.read (| γ |),
                                  Value.Bool true
                                |) in
                              let _ :=
                                M.alloc (|
                                  M.call_closure (|
                                    M.get_associated_function (|
                                      Ty.path
                                        "delphinus_zkwasm::runtime::monitor::plugins::table::etable::ETable",
                                      "flush",
                                      []
                                    |),
                                    [ M.read (| self |) ]
                                  |)
                                |) in
                              M.alloc (| Value.Tuple [] |)));
                          fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                        ]
                      |) in
                    let _ :=
                      let β :=
                        M.SubPointer.get_struct_record_field (|
                          M.read (| self |),
                          "delphinus_zkwasm::runtime::monitor::plugins::table::etable::ETable",
                          "eid"
                        |) in
                      M.write (|
                        β,
                        BinOp.Panic.add (| Integer.U32, M.read (| β |), Value.Integer 1 |)
                      |) in
                    let sp :=
                      M.alloc (|
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.apply (Ty.path "core::option::Option") [ Ty.path "u32" ],
                            "unwrap",
                            []
                          |),
                          [
                            M.call_closure (|
                              M.get_associated_function (| Ty.path "u32", "checked_sub", [] |),
                              [
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.apply (Ty.path "core::option::Option") [ Ty.path "u32" ],
                                    "unwrap",
                                    []
                                  |),
                                  [
                                    M.call_closure (|
                                      M.get_associated_function (|
                                        Ty.path "u32",
                                        "checked_sub",
                                        []
                                      |),
                                      [
                                        M.rust_cast
                                          (M.read (|
                                            M.get_constant (|
                                              "wasmi::runner::DEFAULT_VALUE_STACK_LIMIT"
                                            |)
                                          |));
                                        M.read (| sp |)
                                      ]
                                    |)
                                  ]
                                |);
                                Value.Integer 1
                              ]
                            |)
                          ]
                        |)
                      |) in
                    let eentry :=
                      M.alloc (|
                        Value.StructRecord
                          "specs::etable::EventTableEntry"
                          [
                            ("eid",
                              M.read (|
                                M.SubPointer.get_struct_record_field (|
                                  M.read (| self |),
                                  "delphinus_zkwasm::runtime::monitor::plugins::table::etable::ETable",
                                  "eid"
                                |)
                              |));
                            ("fid", M.read (| fid |));
                            ("iid", M.read (| iid |));
                            ("sp", M.read (| sp |));
                            ("allocated_memory_pages", M.read (| allocated_memory_pages |));
                            ("last_jump_eid", M.read (| last_jump_eid |));
                            ("step_info", M.read (| step_info |))
                          ]
                      |) in
                    let _ :=
                      M.alloc (|
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              [
                                Ty.path "specs::etable::EventTableEntry";
                                Ty.path "alloc::alloc::Global"
                              ],
                            "push",
                            []
                          |),
                          [
                            M.SubPointer.get_struct_record_field (|
                              M.read (| self |),
                              "delphinus_zkwasm::runtime::monitor::plugins::table::etable::ETable",
                              "entries"
                            |);
                            M.read (| eentry |)
                          ]
                        |)
                      |) in
                    M.alloc (| Value.Tuple [] |)
                  |)))
              | _, _ => M.impossible
              end.
            
            Axiom AssociatedFunction_push : M.IsAssociatedFunction Self "push" push.
            
            (*
                pub(super) fn entries(&self) -> &[EventTableEntry] {
                    &self.entries
                }
            *)
            Definition entries (τ : list Ty.t) (α : list Value.t) : M :=
              match τ, α with
              | [], [ self ] =>
                ltac:(M.monadic
                  (let self := M.alloc (| self |) in
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::ops::deref::Deref",
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        [ Ty.path "specs::etable::EventTableEntry"; Ty.path "alloc::alloc::Global"
                        ],
                      [],
                      "deref",
                      []
                    |),
                    [
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "delphinus_zkwasm::runtime::monitor::plugins::table::etable::ETable",
                        "entries"
                      |)
                    ]
                  |)))
              | _, _ => M.impossible
              end.
            
            Axiom AssociatedFunction_entries : M.IsAssociatedFunction Self "entries" entries.
            
            (*
                pub(crate) fn entries_mut(&mut self) -> &mut Vec<EventTableEntry> {
                    &mut self.entries
                }
            *)
            Definition entries_mut (τ : list Ty.t) (α : list Value.t) : M :=
              match τ, α with
              | [], [ self ] =>
                ltac:(M.monadic
                  (let self := M.alloc (| self |) in
                  M.SubPointer.get_struct_record_field (|
                    M.read (| self |),
                    "delphinus_zkwasm::runtime::monitor::plugins::table::etable::ETable",
                    "entries"
                  |)))
              | _, _ => M.impossible
              end.
            
            Axiom AssociatedFunction_entries_mut :
              M.IsAssociatedFunction Self "entries_mut" entries_mut.
            
            (*
                pub fn finalized(mut self) -> Vec<EventTableBackend> {
                    self.flush();
            
                    self.slices
                }
            *)
            Definition finalized (τ : list Ty.t) (α : list Value.t) : M :=
              match τ, α with
              | [], [ self ] =>
                ltac:(M.monadic
                  (let self := M.alloc (| self |) in
                  M.read (|
                    let _ :=
                      M.alloc (|
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.path
                              "delphinus_zkwasm::runtime::monitor::plugins::table::etable::ETable",
                            "flush",
                            []
                          |),
                          [ self ]
                        |)
                      |) in
                    M.SubPointer.get_struct_record_field (|
                      self,
                      "delphinus_zkwasm::runtime::monitor::plugins::table::etable::ETable",
                      "slices"
                    |)
                  |)))
              | _, _ => M.impossible
              end.
            
            Axiom AssociatedFunction_finalized : M.IsAssociatedFunction Self "finalized" finalized.
          End Impl_delphinus_zkwasm_runtime_monitor_plugins_table_etable_ETable.
        End etable.
      End table.
    End plugins.
  End monitor.
End runtime.
