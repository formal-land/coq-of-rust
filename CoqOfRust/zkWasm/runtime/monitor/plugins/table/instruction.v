(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module runtime.
  Module monitor.
    Module plugins.
      Module table.
        Module instruction.
          (* StructRecord
            {
              name := "FuncDesc";
              ty_params := [];
              fields :=
                [
                  ("ftype", Ty.path "specs::types::FunctionType");
                  ("signature", Ty.path "wasmi::types::Signature")
                ];
            } *)
          
          Module Impl_core_fmt_Debug_for_delphinus_zkwasm_runtime_monitor_plugins_table_instruction_FuncDesc.
            Definition Self : Ty.t :=
              Ty.path "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::FuncDesc".
            
            (* Debug *)
            Definition fmt (τ : list Ty.t) (α : list Value.t) : M :=
              match τ, α with
              | [], [ self; f ] =>
                ltac:(M.monadic
                  (let self := M.alloc (| self |) in
                  let f := M.alloc (| f |) in
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.path "core::fmt::Formatter",
                      "debug_struct_field2_finish",
                      []
                    |),
                    [
                      M.read (| f |);
                      M.read (| Value.String "FuncDesc" |);
                      M.read (| Value.String "ftype" |);
                      (* Unsize *)
                      M.pointer_coercion
                        (M.SubPointer.get_struct_record_field (|
                          M.read (| self |),
                          "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::FuncDesc",
                          "ftype"
                        |));
                      M.read (| Value.String "signature" |);
                      (* Unsize *)
                      M.pointer_coercion
                        (M.alloc (|
                          M.SubPointer.get_struct_record_field (|
                            M.read (| self |),
                            "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::FuncDesc",
                            "signature"
                          |)
                        |))
                    ]
                  |)))
              | _, _ => M.impossible
              end.
            
            Axiom Implements :
              M.IsTraitInstance
                "core::fmt::Debug"
                Self
                (* Trait polymorphic types *) []
                (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
          End Impl_core_fmt_Debug_for_delphinus_zkwasm_runtime_monitor_plugins_table_instruction_FuncDesc.
          
          (* StructTuple
            {
              name := "PhantomFunction";
              ty_params := [];
              fields := [];
            } *)
          
          Module Impl_delphinus_zkwasm_runtime_monitor_plugins_table_instruction_PhantomFunction.
            Definition Self : Ty.t :=
              Ty.path
                "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::PhantomFunction".
            
            (*
                pub fn build_phantom_function_instructions(
                    sig: &Signature,
                    // Wasm Image Function Id
                    wasm_input_function_idx: u32,
                ) -> Vec<Instruction<'static>> {
                    let mut instructions = vec![];
            
                    if sig.return_type().is_some() {
                        instructions.push(Instruction::I32Const(0));
            
                        instructions.push(Instruction::Call(wasm_input_function_idx));
            
                        if sig.return_type() != Some(wasmi::ValueType::I64) {
                            instructions.push(Instruction::I32WrapI64);
                        }
                    }
            
                    instructions.push(Instruction::Return(DropKeep {
                        drop: sig.params().len() as u32,
                        keep: if let Some(t) = sig.return_type() {
                            Keep::Single(t.into_elements())
                        } else {
                            Keep::None
                        },
                    }));
            
                    instructions
                }
            *)
            Definition build_phantom_function_instructions (τ : list Ty.t) (α : list Value.t) : M :=
              match τ, α with
              | [], [ sig; wasm_input_function_idx ] =>
                ltac:(M.monadic
                  (let sig := M.alloc (| sig |) in
                  let wasm_input_function_idx := M.alloc (| wasm_input_function_idx |) in
                  M.read (|
                    let instructions :=
                      M.alloc (|
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              [ Ty.path "wasmi::isa::Instruction"; Ty.path "alloc::alloc::Global" ],
                            "new",
                            []
                          |),
                          []
                        |)
                      |) in
                    let _ :=
                      M.match_operator (|
                        M.alloc (| Value.Tuple [] |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ :=
                                M.use
                                  (M.alloc (|
                                    M.call_closure (|
                                      M.get_associated_function (|
                                        Ty.apply
                                          (Ty.path "core::option::Option")
                                          [ Ty.path "wasmi_core::value::ValueType" ],
                                        "is_some",
                                        []
                                      |),
                                      [
                                        M.alloc (|
                                          M.call_closure (|
                                            M.get_associated_function (|
                                              Ty.path "wasmi::types::Signature",
                                              "return_type",
                                              []
                                            |),
                                            [ M.read (| sig |) ]
                                          |)
                                        |)
                                      ]
                                    |)
                                  |)) in
                              let _ :=
                                M.is_constant_or_break_match (|
                                  M.read (| γ |),
                                  Value.Bool true
                                |) in
                              let _ :=
                                M.alloc (|
                                  M.call_closure (|
                                    M.get_associated_function (|
                                      Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        [
                                          Ty.path "wasmi::isa::Instruction";
                                          Ty.path "alloc::alloc::Global"
                                        ],
                                      "push",
                                      []
                                    |),
                                    [
                                      instructions;
                                      Value.StructTuple
                                        "wasmi::isa::Instruction::I32Const"
                                        [ Value.Integer 0 ]
                                    ]
                                  |)
                                |) in
                              let _ :=
                                M.alloc (|
                                  M.call_closure (|
                                    M.get_associated_function (|
                                      Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        [
                                          Ty.path "wasmi::isa::Instruction";
                                          Ty.path "alloc::alloc::Global"
                                        ],
                                      "push",
                                      []
                                    |),
                                    [
                                      instructions;
                                      Value.StructTuple
                                        "wasmi::isa::Instruction::Call"
                                        [ M.read (| wasm_input_function_idx |) ]
                                    ]
                                  |)
                                |) in
                              M.match_operator (|
                                M.alloc (| Value.Tuple [] |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ :=
                                        M.use
                                          (M.alloc (|
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "core::cmp::PartialEq",
                                                Ty.apply
                                                  (Ty.path "core::option::Option")
                                                  [ Ty.path "wasmi_core::value::ValueType" ],
                                                [
                                                  Ty.apply
                                                    (Ty.path "core::option::Option")
                                                    [ Ty.path "wasmi_core::value::ValueType" ]
                                                ],
                                                "ne",
                                                []
                                              |),
                                              [
                                                M.alloc (|
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.path "wasmi::types::Signature",
                                                      "return_type",
                                                      []
                                                    |),
                                                    [ M.read (| sig |) ]
                                                  |)
                                                |);
                                                M.alloc (|
                                                  Value.StructTuple
                                                    "core::option::Option::Some"
                                                    [
                                                      Value.StructTuple
                                                        "wasmi_core::value::ValueType::I64"
                                                        []
                                                    ]
                                                |)
                                              ]
                                            |)
                                          |)) in
                                      let _ :=
                                        M.is_constant_or_break_match (|
                                          M.read (| γ |),
                                          Value.Bool true
                                        |) in
                                      let _ :=
                                        M.alloc (|
                                          M.call_closure (|
                                            M.get_associated_function (|
                                              Ty.apply
                                                (Ty.path "alloc::vec::Vec")
                                                [
                                                  Ty.path "wasmi::isa::Instruction";
                                                  Ty.path "alloc::alloc::Global"
                                                ],
                                              "push",
                                              []
                                            |),
                                            [
                                              instructions;
                                              Value.StructTuple
                                                "wasmi::isa::Instruction::I32WrapI64"
                                                []
                                            ]
                                          |)
                                        |) in
                                      M.alloc (| Value.Tuple [] |)));
                                  fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                ]
                              |)));
                          fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                        ]
                      |) in
                    let _ :=
                      M.alloc (|
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              [ Ty.path "wasmi::isa::Instruction"; Ty.path "alloc::alloc::Global" ],
                            "push",
                            []
                          |),
                          [
                            instructions;
                            Value.StructTuple
                              "wasmi::isa::Instruction::Return"
                              [
                                Value.StructRecord
                                  "wasmi::isa::DropKeep"
                                  [
                                    ("drop",
                                      M.rust_cast
                                        (M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.apply
                                              (Ty.path "slice")
                                              [ Ty.path "wasmi_core::value::ValueType" ],
                                            "len",
                                            []
                                          |),
                                          [
                                            M.call_closure (|
                                              M.get_associated_function (|
                                                Ty.path "wasmi::types::Signature",
                                                "params",
                                                []
                                              |),
                                              [ M.read (| sig |) ]
                                            |)
                                          ]
                                        |)));
                                    ("keep",
                                      M.read (|
                                        M.match_operator (|
                                          M.alloc (| Value.Tuple [] |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let γ :=
                                                  M.alloc (|
                                                    M.call_closure (|
                                                      M.get_associated_function (|
                                                        Ty.path "wasmi::types::Signature",
                                                        "return_type",
                                                        []
                                                      |),
                                                      [ M.read (| sig |) ]
                                                    |)
                                                  |) in
                                                let γ0_0 :=
                                                  M.SubPointer.get_struct_tuple_field (|
                                                    γ,
                                                    "core::option::Option::Some",
                                                    0
                                                  |) in
                                                let t := M.copy (| γ0_0 |) in
                                                M.alloc (|
                                                  Value.StructTuple
                                                    "wasmi::isa::Keep::Single"
                                                    [
                                                      M.call_closure (|
                                                        M.get_associated_function (|
                                                          Ty.path "wasmi_core::value::ValueType",
                                                          "into_elements",
                                                          []
                                                        |),
                                                        [ M.read (| t |) ]
                                                      |)
                                                    ]
                                                |)));
                                            fun γ =>
                                              ltac:(M.monadic
                                                (M.alloc (|
                                                  Value.StructTuple "wasmi::isa::Keep::None" []
                                                |)))
                                          ]
                                        |)
                                      |))
                                  ]
                              ]
                          ]
                        |)
                      |) in
                    instructions
                  |)))
              | _, _ => M.impossible
              end.
            
            Axiom AssociatedFunction_build_phantom_function_instructions :
              M.IsAssociatedFunction
                Self
                "build_phantom_function_instructions"
                build_phantom_function_instructions.
          End Impl_delphinus_zkwasm_runtime_monitor_plugins_table_instruction_PhantomFunction.
          
          (* Trait *)
          (* Empty module 'InstructionIntoOpcode' *)
          
          Module Impl_delphinus_zkwasm_runtime_monitor_plugins_table_instruction_InstructionIntoOpcode_for_wasmi_isa_Instruction.
            Definition Self : Ty.t := Ty.path "wasmi::isa::Instruction".
            
            (*
                fn into_opcode<'b>(self, function_mapping: &impl Fn(u32) -> &'b FuncDesc) -> Opcode {
                    match self {
                        Instruction::GetLocal(offset, typ) => Opcode::LocalGet {
                            offset: offset as u64,
                            vtype: typ.into(),
                        },
                        Instruction::SetLocal(offset, typ) => Opcode::LocalSet {
                            offset: offset as u64,
                            vtype: typ.into(),
                        },
                        Instruction::TeeLocal(offset, typ) => Opcode::LocalTee {
                            offset: offset as u64,
                            vtype: typ.into(),
                        },
                        Instruction::Br(Target { dst_pc, drop_keep }) => Opcode::Br {
                            drop: drop_keep.drop,
                            keep: if let Keep::Single(t) = drop_keep.keep {
                                vec![t.into()]
                            } else {
                                vec![]
                            },
                            dst_pc,
                        },
                        Instruction::BrIfEqz(Target { dst_pc, drop_keep }) => Opcode::BrIfEqz {
                            drop: drop_keep.drop,
                            keep: if let Keep::Single(t) = drop_keep.keep {
                                vec![t.into()]
                            } else {
                                vec![]
                            },
                            dst_pc,
                        },
                        Instruction::BrIfNez(Target { dst_pc, drop_keep }) => Opcode::BrIf {
                            drop: drop_keep.drop,
                            keep: if let Keep::Single(t) = drop_keep.keep {
                                vec![t.into()]
                            } else {
                                vec![]
                            },
                            dst_pc,
                        },
                        Instruction::BrTable(targets) => Opcode::BrTable {
                            targets: targets
                                .stream
                                .iter()
                                .map(|t| {
                                    if let InstructionInternal::BrTableTarget(target) = t {
                                        let keep_type = match target.drop_keep.keep {
                                            Keep::None => vec![],
                                            Keep::Single(t) => vec![t.into()],
                                        };
            
                                        BrTarget {
                                            drop: target.drop_keep.drop,
                                            keep: keep_type,
                                            dst_pc: target.dst_pc,
                                        }
                                    } else {
                                        unreachable!()
                                    }
                                })
                                .collect(),
                        },
                        Instruction::Unreachable => Opcode::Unreachable,
                        Instruction::Return(drop_keep) => Opcode::Return {
                            drop: drop_keep.drop,
                            keep: if let Keep::Single(t) = drop_keep.keep {
                                vec![t.into()]
                            } else {
                                vec![]
                            },
                        },
                        Instruction::Call(func_index) => {
                            let func_desc = function_mapping(func_index);
            
                            match &func_desc.ftype {
                                specs::types::FunctionType::WasmFunction => Opcode::Call { index: func_index },
                                specs::types::FunctionType::HostFunction {
                                    plugin,
                                    function_index,
                                    function_name,
                                    op_index_in_plugin,
                                } => Opcode::InternalHostCall {
                                    plugin: *plugin,
                                    function_index: *function_index,
                                    function_name: function_name.clone(),
                                    op_index_in_plugin: *op_index_in_plugin,
                                },
                                specs::types::FunctionType::HostFunctionExternal { op, sig, .. } => {
                                    Opcode::ExternalHostCall { op: *op, sig: *sig }
                                }
                            }
                        }
                        Instruction::CallIndirect(idx) => Opcode::CallIndirect { type_idx: idx },
                        Instruction::Drop => Opcode::Drop,
                        Instruction::Select(_) => Opcode::Select,
                        Instruction::GetGlobal(idx) => Opcode::GlobalGet { idx: idx as u64 },
                        Instruction::SetGlobal(idx) => Opcode::GlobalSet { idx: idx as u64 },
                        Instruction::I32Load(offset) => Opcode::Load {
                            offset,
                            vtype: VarType::I32,
                            size: MemoryReadSize::U32,
                        },
                        Instruction::I64Load(offset) => Opcode::Load {
                            offset,
                            vtype: VarType::I64,
                            size: MemoryReadSize::I64,
                        },
                        Instruction::F32Load(_) => todo!(),
                        Instruction::F64Load(_) => todo!(),
                        Instruction::I32Load8S(offset) => Opcode::Load {
                            offset,
                            vtype: VarType::I32,
                            size: MemoryReadSize::S8,
                        },
                        Instruction::I32Load8U(offset) => Opcode::Load {
                            offset,
                            vtype: VarType::I32,
                            size: MemoryReadSize::U8,
                        },
                        Instruction::I32Load16S(offset) => Opcode::Load {
                            offset,
                            vtype: VarType::I32,
                            size: MemoryReadSize::S16,
                        },
                        Instruction::I32Load16U(offset) => Opcode::Load {
                            offset,
                            vtype: VarType::I32,
                            size: MemoryReadSize::U16,
                        },
                        Instruction::I64Load8S(offset) => Opcode::Load {
                            offset,
                            vtype: VarType::I64,
                            size: MemoryReadSize::S8,
                        },
                        Instruction::I64Load8U(offset) => Opcode::Load {
                            offset,
                            vtype: VarType::I64,
                            size: MemoryReadSize::U8,
                        },
                        Instruction::I64Load16S(offset) => Opcode::Load {
                            offset,
                            vtype: VarType::I64,
                            size: MemoryReadSize::S16,
                        },
                        Instruction::I64Load16U(offset) => Opcode::Load {
                            offset,
                            vtype: VarType::I64,
                            size: MemoryReadSize::U16,
                        },
                        Instruction::I64Load32S(offset) => Opcode::Load {
                            offset,
                            vtype: VarType::I64,
                            size: MemoryReadSize::S32,
                        },
                        Instruction::I64Load32U(offset) => Opcode::Load {
                            offset,
                            vtype: VarType::I64,
                            size: MemoryReadSize::U32,
                        },
                        Instruction::I32Store(offset) => Opcode::Store {
                            offset,
                            vtype: VarType::I32,
                            size: MemoryStoreSize::Byte32,
                        },
                        Instruction::I64Store(offset) => Opcode::Store {
                            offset,
                            vtype: VarType::I64,
                            size: MemoryStoreSize::Byte64,
                        },
                        Instruction::F32Store(_) => todo!(),
                        Instruction::F64Store(_) => todo!(),
                        Instruction::I32Store8(offset) => Opcode::Store {
                            offset,
                            vtype: VarType::I32,
                            size: MemoryStoreSize::Byte8,
                        },
                        Instruction::I32Store16(offset) => Opcode::Store {
                            offset,
                            vtype: VarType::I32,
                            size: MemoryStoreSize::Byte16,
                        },
                        Instruction::I64Store8(offset) => Opcode::Store {
                            offset,
                            vtype: VarType::I64,
                            size: MemoryStoreSize::Byte8,
                        },
                        Instruction::I64Store16(offset) => Opcode::Store {
                            offset,
                            vtype: VarType::I64,
                            size: MemoryStoreSize::Byte16,
                        },
                        Instruction::I64Store32(offset) => Opcode::Store {
                            offset,
                            vtype: VarType::I64,
                            size: MemoryStoreSize::Byte32,
                        },
                        Instruction::CurrentMemory => Opcode::MemorySize,
                        Instruction::GrowMemory => Opcode::MemoryGrow,
                        Instruction::I32Const(v) => Opcode::Const {
                            vtype: VarType::I32,
                            value: v as u32 as u64,
                        },
                        Instruction::I64Const(v) => Opcode::Const {
                            vtype: VarType::I64,
                            value: v as u64,
                        },
                        Instruction::F32Const(_) => todo!(),
                        Instruction::F64Const(_) => todo!(),
                        Instruction::I32Eqz => Opcode::Test {
                            class: TestOp::Eqz,
                            vtype: VarType::I32,
                        },
                        Instruction::I32Eq => Opcode::Rel {
                            class: RelOp::Eq,
                            vtype: VarType::I32,
                        },
                        Instruction::I32Ne => Opcode::Rel {
                            class: RelOp::Ne,
                            vtype: VarType::I32,
                        },
                        Instruction::I32LtS => Opcode::Rel {
                            class: RelOp::SignedLt,
                            vtype: VarType::I32,
                        },
                        Instruction::I32LtU => Opcode::Rel {
                            class: RelOp::UnsignedLt,
                            vtype: VarType::I32,
                        },
                        Instruction::I32GtS => Opcode::Rel {
                            class: RelOp::SignedGt,
                            vtype: VarType::I32,
                        },
                        Instruction::I32GtU => Opcode::Rel {
                            class: RelOp::UnsignedGt,
                            vtype: VarType::I32,
                        },
                        Instruction::I32LeS => Opcode::Rel {
                            class: RelOp::SignedLe,
                            vtype: VarType::I32,
                        },
                        Instruction::I32LeU => Opcode::Rel {
                            class: RelOp::UnsignedLe,
                            vtype: VarType::I32,
                        },
                        Instruction::I32GeS => Opcode::Rel {
                            class: RelOp::SignedGe,
                            vtype: VarType::I32,
                        },
                        Instruction::I32GeU => Opcode::Rel {
                            class: RelOp::UnsignedGe,
                            vtype: VarType::I32,
                        },
                        Instruction::I64Eqz => Opcode::Test {
                            class: TestOp::Eqz,
                            vtype: VarType::I64,
                        },
                        Instruction::I64Eq => Opcode::Rel {
                            class: RelOp::Eq,
                            vtype: VarType::I64,
                        },
                        Instruction::I64Ne => Opcode::Rel {
                            class: RelOp::Ne,
                            vtype: VarType::I64,
                        },
                        Instruction::I64LtS => Opcode::Rel {
                            class: RelOp::SignedLt,
                            vtype: VarType::I64,
                        },
                        Instruction::I64LtU => Opcode::Rel {
                            class: RelOp::UnsignedLt,
                            vtype: VarType::I64,
                        },
                        Instruction::I64GtS => Opcode::Rel {
                            class: RelOp::SignedGt,
                            vtype: VarType::I64,
                        },
                        Instruction::I64GtU => Opcode::Rel {
                            class: RelOp::UnsignedGt,
                            vtype: VarType::I64,
                        },
                        Instruction::I64LeS => Opcode::Rel {
                            class: RelOp::SignedLe,
                            vtype: VarType::I64,
                        },
                        Instruction::I64LeU => Opcode::Rel {
                            class: RelOp::UnsignedLe,
                            vtype: VarType::I64,
                        },
                        Instruction::I64GeS => Opcode::Rel {
                            class: RelOp::SignedGe,
                            vtype: VarType::I64,
                        },
                        Instruction::I64GeU => Opcode::Rel {
                            class: RelOp::UnsignedGe,
                            vtype: VarType::I64,
                        },
                        Instruction::F32Eq => todo!(),
                        Instruction::F32Ne => todo!(),
                        Instruction::F32Lt => todo!(),
                        Instruction::F32Gt => todo!(),
                        Instruction::F32Le => todo!(),
                        Instruction::F32Ge => todo!(),
                        Instruction::F64Eq => todo!(),
                        Instruction::F64Ne => todo!(),
                        Instruction::F64Lt => todo!(),
                        Instruction::F64Gt => todo!(),
                        Instruction::F64Le => todo!(),
                        Instruction::F64Ge => todo!(),
                        Instruction::I32Clz => Opcode::Unary {
                            class: UnaryOp::Clz,
                            vtype: VarType::I32,
                        },
                        Instruction::I32Ctz => Opcode::Unary {
                            class: UnaryOp::Ctz,
                            vtype: VarType::I32,
                        },
                        Instruction::I32Popcnt => Opcode::Unary {
                            class: UnaryOp::Popcnt,
                            vtype: VarType::I32,
                        },
                        Instruction::I32Add => Opcode::Bin {
                            class: BinOp::Add,
                            vtype: VarType::I32,
                        },
                        Instruction::I32Sub => Opcode::Bin {
                            class: BinOp::Sub,
                            vtype: VarType::I32,
                        },
                        Instruction::I32Mul => Opcode::Bin {
                            class: BinOp::Mul,
                            vtype: VarType::I32,
                        },
                        Instruction::I32DivS => Opcode::Bin {
                            class: BinOp::SignedDiv,
                            vtype: VarType::I32,
                        },
                        Instruction::I32DivU => Opcode::Bin {
                            class: BinOp::UnsignedDiv,
                            vtype: VarType::I32,
                        },
                        Instruction::I32RemS => Opcode::Bin {
                            class: BinOp::SignedRem,
                            vtype: VarType::I32,
                        },
                        Instruction::I32RemU => Opcode::Bin {
                            class: BinOp::UnsignedRem,
                            vtype: VarType::I32,
                        },
                        Instruction::I32And => Opcode::BinBit {
                            class: BitOp::And,
                            vtype: VarType::I32,
                        },
                        Instruction::I32Or => Opcode::BinBit {
                            class: BitOp::Or,
                            vtype: VarType::I32,
                        },
                        Instruction::I32Xor => Opcode::BinBit {
                            class: BitOp::Xor,
                            vtype: VarType::I32,
                        },
                        Instruction::I32Shl => Opcode::BinShift {
                            class: ShiftOp::Shl,
                            vtype: VarType::I32,
                        },
                        Instruction::I32ShrS => Opcode::BinShift {
                            class: ShiftOp::SignedShr,
                            vtype: VarType::I32,
                        },
                        Instruction::I32ShrU => Opcode::BinShift {
                            class: ShiftOp::UnsignedShr,
                            vtype: VarType::I32,
                        },
                        Instruction::I32Rotl => Opcode::BinShift {
                            class: ShiftOp::Rotl,
                            vtype: VarType::I32,
                        },
                        Instruction::I32Rotr => Opcode::BinShift {
                            class: ShiftOp::Rotr,
                            vtype: VarType::I32,
                        },
                        Instruction::I64Clz => Opcode::Unary {
                            class: UnaryOp::Clz,
                            vtype: VarType::I64,
                        },
                        Instruction::I64Ctz => Opcode::Unary {
                            class: UnaryOp::Ctz,
                            vtype: VarType::I64,
                        },
                        Instruction::I64Popcnt => Opcode::Unary {
                            class: UnaryOp::Popcnt,
                            vtype: VarType::I64,
                        },
                        Instruction::I64Add => Opcode::Bin {
                            class: BinOp::Add,
                            vtype: VarType::I64,
                        },
                        Instruction::I64Sub => Opcode::Bin {
                            class: BinOp::Sub,
                            vtype: VarType::I64,
                        },
                        Instruction::I64Mul => Opcode::Bin {
                            class: BinOp::Mul,
                            vtype: VarType::I64,
                        },
                        Instruction::I64DivS => Opcode::Bin {
                            class: BinOp::SignedDiv,
                            vtype: VarType::I64,
                        },
                        Instruction::I64DivU => Opcode::Bin {
                            class: BinOp::UnsignedDiv,
                            vtype: VarType::I64,
                        },
                        Instruction::I64RemS => Opcode::Bin {
                            class: BinOp::SignedRem,
                            vtype: VarType::I64,
                        },
                        Instruction::I64RemU => Opcode::Bin {
                            class: BinOp::UnsignedRem,
                            vtype: VarType::I64,
                        },
                        Instruction::I64And => Opcode::BinBit {
                            class: BitOp::And,
                            vtype: VarType::I64,
                        },
                        Instruction::I64Or => Opcode::BinBit {
                            class: BitOp::Or,
                            vtype: VarType::I64,
                        },
                        Instruction::I64Xor => Opcode::BinBit {
                            class: BitOp::Xor,
                            vtype: VarType::I64,
                        },
                        Instruction::I64Shl => Opcode::BinShift {
                            class: ShiftOp::Shl,
                            vtype: VarType::I64,
                        },
                        Instruction::I64ShrS => Opcode::BinShift {
                            class: ShiftOp::SignedShr,
                            vtype: VarType::I64,
                        },
                        Instruction::I64ShrU => Opcode::BinShift {
                            class: ShiftOp::UnsignedShr,
                            vtype: VarType::I64,
                        },
                        Instruction::I64Rotl => Opcode::BinShift {
                            class: ShiftOp::Rotl,
                            vtype: VarType::I64,
                        },
                        Instruction::I64Rotr => Opcode::BinShift {
                            class: ShiftOp::Rotr,
                            vtype: VarType::I64,
                        },
                        Instruction::F32Abs => todo!(),
                        Instruction::F32Neg => todo!(),
                        Instruction::F32Ceil => todo!(),
                        Instruction::F32Floor => todo!(),
                        Instruction::F32Trunc => todo!(),
                        Instruction::F32Nearest => todo!(),
                        Instruction::F32Sqrt => todo!(),
                        Instruction::F32Add => todo!(),
                        Instruction::F32Sub => todo!(),
                        Instruction::F32Mul => todo!(),
                        Instruction::F32Div => todo!(),
                        Instruction::F32Min => todo!(),
                        Instruction::F32Max => todo!(),
                        Instruction::F32Copysign => todo!(),
                        Instruction::F64Abs => todo!(),
                        Instruction::F64Neg => todo!(),
                        Instruction::F64Ceil => todo!(),
                        Instruction::F64Floor => todo!(),
                        Instruction::F64Trunc => todo!(),
                        Instruction::F64Nearest => todo!(),
                        Instruction::F64Sqrt => todo!(),
                        Instruction::F64Add => todo!(),
                        Instruction::F64Sub => todo!(),
                        Instruction::F64Mul => todo!(),
                        Instruction::F64Div => todo!(),
                        Instruction::F64Min => todo!(),
                        Instruction::F64Max => todo!(),
                        Instruction::F64Copysign => todo!(),
                        Instruction::I32WrapI64 => Opcode::Conversion {
                            class: ConversionOp::I32WrapI64,
                        },
                        Instruction::I32TruncSF32 => todo!(),
                        Instruction::I32TruncUF32 => todo!(),
                        Instruction::I32TruncSF64 => todo!(),
                        Instruction::I32TruncUF64 => todo!(),
                        Instruction::I64ExtendSI32 => Opcode::Conversion {
                            class: ConversionOp::I64ExtendI32s,
                        },
                        Instruction::I64ExtendUI32 => Opcode::Conversion {
                            class: ConversionOp::I64ExtendI32u,
                        },
                        Instruction::I64TruncSF32 => todo!(),
                        Instruction::I64TruncUF32 => todo!(),
                        Instruction::I64TruncSF64 => todo!(),
                        Instruction::I64TruncUF64 => todo!(),
                        Instruction::F32ConvertSI32 => todo!(),
                        Instruction::F32ConvertUI32 => todo!(),
                        Instruction::F32ConvertSI64 => todo!(),
                        Instruction::F32ConvertUI64 => todo!(),
                        Instruction::F32DemoteF64 => todo!(),
                        Instruction::F64ConvertSI32 => todo!(),
                        Instruction::F64ConvertUI32 => todo!(),
                        Instruction::F64ConvertSI64 => todo!(),
                        Instruction::F64ConvertUI64 => todo!(),
                        Instruction::F64PromoteF32 => todo!(),
                        Instruction::I32ReinterpretF32 => todo!(),
                        Instruction::I64ReinterpretF64 => todo!(),
                        Instruction::F32ReinterpretI32 => todo!(),
                        Instruction::F64ReinterpretI64 => todo!(),
                        Instruction::I32Extend8S => Opcode::Conversion {
                            class: ConversionOp::I32Extend8S,
                        },
                        Instruction::I32Extend16S => Opcode::Conversion {
                            class: ConversionOp::I32Extend16S,
                        },
                        Instruction::I64Extend8S => Opcode::Conversion {
                            class: ConversionOp::I64Extend8S,
                        },
                        Instruction::I64Extend16S => Opcode::Conversion {
                            class: ConversionOp::I64Extend16S,
                        },
                        Instruction::I64Extend32S => Opcode::Conversion {
                            class: ConversionOp::I64Extend32S,
                        },
                    }
                }
            *)
            Definition into_opcode (τ : list Ty.t) (α : list Value.t) : M :=
              match τ, α with
              | [ impl_Fn_u32__arrow__'b_FuncDesc ], [ self; function_mapping ] =>
                ltac:(M.monadic
                  (let self := M.alloc (| self |) in
                  let function_mapping := M.alloc (| function_mapping |) in
                  M.read (|
                    M.match_operator (|
                      self,
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "wasmi::isa::Instruction::GetLocal",
                                0
                              |) in
                            let γ0_1 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "wasmi::isa::Instruction::GetLocal",
                                1
                              |) in
                            let offset := M.copy (| γ0_0 |) in
                            let typ := M.copy (| γ0_1 |) in
                            M.alloc (|
                              Value.StructRecord
                                "specs::itable::Opcode::LocalGet"
                                [
                                  ("offset", M.rust_cast (M.read (| offset |)));
                                  ("vtype",
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::convert::Into",
                                        Ty.path "parity_wasm::elements::types::ValueType",
                                        [ Ty.path "specs::mtable::VarType" ],
                                        "into",
                                        []
                                      |),
                                      [ M.read (| typ |) ]
                                    |))
                                ]
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "wasmi::isa::Instruction::SetLocal",
                                0
                              |) in
                            let γ0_1 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "wasmi::isa::Instruction::SetLocal",
                                1
                              |) in
                            let offset := M.copy (| γ0_0 |) in
                            let typ := M.copy (| γ0_1 |) in
                            M.alloc (|
                              Value.StructRecord
                                "specs::itable::Opcode::LocalSet"
                                [
                                  ("offset", M.rust_cast (M.read (| offset |)));
                                  ("vtype",
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::convert::Into",
                                        Ty.path "parity_wasm::elements::types::ValueType",
                                        [ Ty.path "specs::mtable::VarType" ],
                                        "into",
                                        []
                                      |),
                                      [ M.read (| typ |) ]
                                    |))
                                ]
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "wasmi::isa::Instruction::TeeLocal",
                                0
                              |) in
                            let γ0_1 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "wasmi::isa::Instruction::TeeLocal",
                                1
                              |) in
                            let offset := M.copy (| γ0_0 |) in
                            let typ := M.copy (| γ0_1 |) in
                            M.alloc (|
                              Value.StructRecord
                                "specs::itable::Opcode::LocalTee"
                                [
                                  ("offset", M.rust_cast (M.read (| offset |)));
                                  ("vtype",
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::convert::Into",
                                        Ty.path "parity_wasm::elements::types::ValueType",
                                        [ Ty.path "specs::mtable::VarType" ],
                                        "into",
                                        []
                                      |),
                                      [ M.read (| typ |) ]
                                    |))
                                ]
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "wasmi::isa::Instruction::Br",
                                0
                              |) in
                            let γ1_0 :=
                              M.SubPointer.get_struct_record_field (|
                                γ0_0,
                                "wasmi::isa::Target",
                                "dst_pc"
                              |) in
                            let γ1_1 :=
                              M.SubPointer.get_struct_record_field (|
                                γ0_0,
                                "wasmi::isa::Target",
                                "drop_keep"
                              |) in
                            let dst_pc := M.copy (| γ1_0 |) in
                            let drop_keep := M.copy (| γ1_1 |) in
                            M.alloc (|
                              Value.StructRecord
                                "specs::itable::Opcode::Br"
                                [
                                  ("drop",
                                    M.read (|
                                      M.SubPointer.get_struct_record_field (|
                                        drop_keep,
                                        "wasmi::isa::DropKeep",
                                        "drop"
                                      |)
                                    |));
                                  ("keep",
                                    M.read (|
                                      M.match_operator (|
                                        M.alloc (| Value.Tuple [] |),
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let γ :=
                                                M.SubPointer.get_struct_record_field (|
                                                  drop_keep,
                                                  "wasmi::isa::DropKeep",
                                                  "keep"
                                                |) in
                                              let γ0_0 :=
                                                M.SubPointer.get_struct_tuple_field (|
                                                  γ,
                                                  "wasmi::isa::Keep::Single",
                                                  0
                                                |) in
                                              let t := M.copy (| γ0_0 |) in
                                              M.alloc (|
                                                M.call_closure (|
                                                  M.get_associated_function (|
                                                    Ty.apply
                                                      (Ty.path "slice")
                                                      [ Ty.path "specs::types::ValueType" ],
                                                    "into_vec",
                                                    [ Ty.path "alloc::alloc::Global" ]
                                                  |),
                                                  [
                                                    (* Unsize *)
                                                    M.pointer_coercion
                                                      (M.read (|
                                                        M.call_closure (|
                                                          M.get_associated_function (|
                                                            Ty.apply
                                                              (Ty.path "alloc::boxed::Box")
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "array")
                                                                  [
                                                                    Ty.path
                                                                      "specs::types::ValueType"
                                                                  ];
                                                                Ty.path "alloc::alloc::Global"
                                                              ],
                                                            "new",
                                                            []
                                                          |),
                                                          [
                                                            M.alloc (|
                                                              Value.Array
                                                                [
                                                                  M.call_closure (|
                                                                    M.get_trait_method (|
                                                                      "core::convert::Into",
                                                                      Ty.path
                                                                        "parity_wasm::elements::types::ValueType",
                                                                      [
                                                                        Ty.path
                                                                          "specs::types::ValueType"
                                                                      ],
                                                                      "into",
                                                                      []
                                                                    |),
                                                                    [ M.read (| t |) ]
                                                                  |)
                                                                ]
                                                            |)
                                                          ]
                                                        |)
                                                      |))
                                                  ]
                                                |)
                                              |)));
                                          fun γ =>
                                            ltac:(M.monadic
                                              (M.alloc (|
                                                M.call_closure (|
                                                  M.get_associated_function (|
                                                    Ty.apply
                                                      (Ty.path "alloc::vec::Vec")
                                                      [
                                                        Ty.path "specs::types::ValueType";
                                                        Ty.path "alloc::alloc::Global"
                                                      ],
                                                    "new",
                                                    []
                                                  |),
                                                  []
                                                |)
                                              |)))
                                        ]
                                      |)
                                    |));
                                  ("dst_pc", M.read (| dst_pc |))
                                ]
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "wasmi::isa::Instruction::BrIfEqz",
                                0
                              |) in
                            let γ1_0 :=
                              M.SubPointer.get_struct_record_field (|
                                γ0_0,
                                "wasmi::isa::Target",
                                "dst_pc"
                              |) in
                            let γ1_1 :=
                              M.SubPointer.get_struct_record_field (|
                                γ0_0,
                                "wasmi::isa::Target",
                                "drop_keep"
                              |) in
                            let dst_pc := M.copy (| γ1_0 |) in
                            let drop_keep := M.copy (| γ1_1 |) in
                            M.alloc (|
                              Value.StructRecord
                                "specs::itable::Opcode::BrIfEqz"
                                [
                                  ("drop",
                                    M.read (|
                                      M.SubPointer.get_struct_record_field (|
                                        drop_keep,
                                        "wasmi::isa::DropKeep",
                                        "drop"
                                      |)
                                    |));
                                  ("keep",
                                    M.read (|
                                      M.match_operator (|
                                        M.alloc (| Value.Tuple [] |),
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let γ :=
                                                M.SubPointer.get_struct_record_field (|
                                                  drop_keep,
                                                  "wasmi::isa::DropKeep",
                                                  "keep"
                                                |) in
                                              let γ0_0 :=
                                                M.SubPointer.get_struct_tuple_field (|
                                                  γ,
                                                  "wasmi::isa::Keep::Single",
                                                  0
                                                |) in
                                              let t := M.copy (| γ0_0 |) in
                                              M.alloc (|
                                                M.call_closure (|
                                                  M.get_associated_function (|
                                                    Ty.apply
                                                      (Ty.path "slice")
                                                      [ Ty.path "specs::types::ValueType" ],
                                                    "into_vec",
                                                    [ Ty.path "alloc::alloc::Global" ]
                                                  |),
                                                  [
                                                    (* Unsize *)
                                                    M.pointer_coercion
                                                      (M.read (|
                                                        M.call_closure (|
                                                          M.get_associated_function (|
                                                            Ty.apply
                                                              (Ty.path "alloc::boxed::Box")
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "array")
                                                                  [
                                                                    Ty.path
                                                                      "specs::types::ValueType"
                                                                  ];
                                                                Ty.path "alloc::alloc::Global"
                                                              ],
                                                            "new",
                                                            []
                                                          |),
                                                          [
                                                            M.alloc (|
                                                              Value.Array
                                                                [
                                                                  M.call_closure (|
                                                                    M.get_trait_method (|
                                                                      "core::convert::Into",
                                                                      Ty.path
                                                                        "parity_wasm::elements::types::ValueType",
                                                                      [
                                                                        Ty.path
                                                                          "specs::types::ValueType"
                                                                      ],
                                                                      "into",
                                                                      []
                                                                    |),
                                                                    [ M.read (| t |) ]
                                                                  |)
                                                                ]
                                                            |)
                                                          ]
                                                        |)
                                                      |))
                                                  ]
                                                |)
                                              |)));
                                          fun γ =>
                                            ltac:(M.monadic
                                              (M.alloc (|
                                                M.call_closure (|
                                                  M.get_associated_function (|
                                                    Ty.apply
                                                      (Ty.path "alloc::vec::Vec")
                                                      [
                                                        Ty.path "specs::types::ValueType";
                                                        Ty.path "alloc::alloc::Global"
                                                      ],
                                                    "new",
                                                    []
                                                  |),
                                                  []
                                                |)
                                              |)))
                                        ]
                                      |)
                                    |));
                                  ("dst_pc", M.read (| dst_pc |))
                                ]
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "wasmi::isa::Instruction::BrIfNez",
                                0
                              |) in
                            let γ1_0 :=
                              M.SubPointer.get_struct_record_field (|
                                γ0_0,
                                "wasmi::isa::Target",
                                "dst_pc"
                              |) in
                            let γ1_1 :=
                              M.SubPointer.get_struct_record_field (|
                                γ0_0,
                                "wasmi::isa::Target",
                                "drop_keep"
                              |) in
                            let dst_pc := M.copy (| γ1_0 |) in
                            let drop_keep := M.copy (| γ1_1 |) in
                            M.alloc (|
                              Value.StructRecord
                                "specs::itable::Opcode::BrIf"
                                [
                                  ("drop",
                                    M.read (|
                                      M.SubPointer.get_struct_record_field (|
                                        drop_keep,
                                        "wasmi::isa::DropKeep",
                                        "drop"
                                      |)
                                    |));
                                  ("keep",
                                    M.read (|
                                      M.match_operator (|
                                        M.alloc (| Value.Tuple [] |),
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let γ :=
                                                M.SubPointer.get_struct_record_field (|
                                                  drop_keep,
                                                  "wasmi::isa::DropKeep",
                                                  "keep"
                                                |) in
                                              let γ0_0 :=
                                                M.SubPointer.get_struct_tuple_field (|
                                                  γ,
                                                  "wasmi::isa::Keep::Single",
                                                  0
                                                |) in
                                              let t := M.copy (| γ0_0 |) in
                                              M.alloc (|
                                                M.call_closure (|
                                                  M.get_associated_function (|
                                                    Ty.apply
                                                      (Ty.path "slice")
                                                      [ Ty.path "specs::types::ValueType" ],
                                                    "into_vec",
                                                    [ Ty.path "alloc::alloc::Global" ]
                                                  |),
                                                  [
                                                    (* Unsize *)
                                                    M.pointer_coercion
                                                      (M.read (|
                                                        M.call_closure (|
                                                          M.get_associated_function (|
                                                            Ty.apply
                                                              (Ty.path "alloc::boxed::Box")
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "array")
                                                                  [
                                                                    Ty.path
                                                                      "specs::types::ValueType"
                                                                  ];
                                                                Ty.path "alloc::alloc::Global"
                                                              ],
                                                            "new",
                                                            []
                                                          |),
                                                          [
                                                            M.alloc (|
                                                              Value.Array
                                                                [
                                                                  M.call_closure (|
                                                                    M.get_trait_method (|
                                                                      "core::convert::Into",
                                                                      Ty.path
                                                                        "parity_wasm::elements::types::ValueType",
                                                                      [
                                                                        Ty.path
                                                                          "specs::types::ValueType"
                                                                      ],
                                                                      "into",
                                                                      []
                                                                    |),
                                                                    [ M.read (| t |) ]
                                                                  |)
                                                                ]
                                                            |)
                                                          ]
                                                        |)
                                                      |))
                                                  ]
                                                |)
                                              |)));
                                          fun γ =>
                                            ltac:(M.monadic
                                              (M.alloc (|
                                                M.call_closure (|
                                                  M.get_associated_function (|
                                                    Ty.apply
                                                      (Ty.path "alloc::vec::Vec")
                                                      [
                                                        Ty.path "specs::types::ValueType";
                                                        Ty.path "alloc::alloc::Global"
                                                      ],
                                                    "new",
                                                    []
                                                  |),
                                                  []
                                                |)
                                              |)))
                                        ]
                                      |)
                                    |));
                                  ("dst_pc", M.read (| dst_pc |))
                                ]
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "wasmi::isa::Instruction::BrTable",
                                0
                              |) in
                            let targets := M.copy (| γ0_0 |) in
                            M.alloc (|
                              Value.StructRecord
                                "specs::itable::Opcode::BrTable"
                                [
                                  ("targets",
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::iter::traits::iterator::Iterator",
                                        Ty.apply
                                          (Ty.path "core::iter::adapters::map::Map")
                                          [
                                            Ty.apply
                                              (Ty.path "core::slice::iter::Iter")
                                              [ Ty.path "wasmi::isa::InstructionInternal" ];
                                            Ty.function
                                              [
                                                Ty.tuple
                                                  [
                                                    Ty.apply
                                                      (Ty.path "&")
                                                      [ Ty.path "wasmi::isa::InstructionInternal" ]
                                                  ]
                                              ]
                                              (Ty.path "specs::itable::BrTarget")
                                          ],
                                        [],
                                        "collect",
                                        [
                                          Ty.apply
                                            (Ty.path "alloc::vec::Vec")
                                            [
                                              Ty.path "specs::itable::BrTarget";
                                              Ty.path "alloc::alloc::Global"
                                            ]
                                        ]
                                      |),
                                      [
                                        M.call_closure (|
                                          M.get_trait_method (|
                                            "core::iter::traits::iterator::Iterator",
                                            Ty.apply
                                              (Ty.path "core::slice::iter::Iter")
                                              [ Ty.path "wasmi::isa::InstructionInternal" ],
                                            [],
                                            "map",
                                            [
                                              Ty.path "specs::itable::BrTarget";
                                              Ty.function
                                                [
                                                  Ty.tuple
                                                    [
                                                      Ty.apply
                                                        (Ty.path "&")
                                                        [ Ty.path "wasmi::isa::InstructionInternal"
                                                        ]
                                                    ]
                                                ]
                                                (Ty.path "specs::itable::BrTarget")
                                            ]
                                          |),
                                          [
                                            M.call_closure (|
                                              M.get_associated_function (|
                                                Ty.apply
                                                  (Ty.path "slice")
                                                  [ Ty.path "wasmi::isa::InstructionInternal" ],
                                                "iter",
                                                []
                                              |),
                                              [
                                                M.read (|
                                                  M.SubPointer.get_struct_record_field (|
                                                    targets,
                                                    "wasmi::isa::BrTargets",
                                                    "stream"
                                                  |)
                                                |)
                                              ]
                                            |);
                                            M.closure
                                              (fun γ =>
                                                ltac:(M.monadic
                                                  match γ with
                                                  | [ α0 ] =>
                                                    M.match_operator (|
                                                      M.alloc (| α0 |),
                                                      [
                                                        fun γ =>
                                                          ltac:(M.monadic
                                                            (let t := M.copy (| γ |) in
                                                            M.read (|
                                                              M.match_operator (|
                                                                M.alloc (| Value.Tuple [] |),
                                                                [
                                                                  fun γ =>
                                                                    ltac:(M.monadic
                                                                      (let γ := t in
                                                                      let γ := M.read (| γ |) in
                                                                      let γ1_0 :=
                                                                        M.SubPointer.get_struct_tuple_field (|
                                                                          γ,
                                                                          "wasmi::isa::InstructionInternal::BrTableTarget",
                                                                          0
                                                                        |) in
                                                                      let target :=
                                                                        M.alloc (| γ1_0 |) in
                                                                      let keep_type :=
                                                                        M.copy (|
                                                                          M.match_operator (|
                                                                            M.SubPointer.get_struct_record_field (|
                                                                              M.SubPointer.get_struct_record_field (|
                                                                                M.read (| target |),
                                                                                "wasmi::isa::Target",
                                                                                "drop_keep"
                                                                              |),
                                                                              "wasmi::isa::DropKeep",
                                                                              "keep"
                                                                            |),
                                                                            [
                                                                              fun γ =>
                                                                                ltac:(M.monadic
                                                                                  (M.alloc (|
                                                                                    M.call_closure (|
                                                                                      M.get_associated_function (|
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "alloc::vec::Vec")
                                                                                          [
                                                                                            Ty.path
                                                                                              "specs::types::ValueType";
                                                                                            Ty.path
                                                                                              "alloc::alloc::Global"
                                                                                          ],
                                                                                        "new",
                                                                                        []
                                                                                      |),
                                                                                      []
                                                                                    |)
                                                                                  |)));
                                                                              fun γ =>
                                                                                ltac:(M.monadic
                                                                                  (let γ0_0 :=
                                                                                    M.SubPointer.get_struct_tuple_field (|
                                                                                      γ,
                                                                                      "wasmi::isa::Keep::Single",
                                                                                      0
                                                                                    |) in
                                                                                  let t :=
                                                                                    M.copy (|
                                                                                      γ0_0
                                                                                    |) in
                                                                                  M.alloc (|
                                                                                    M.call_closure (|
                                                                                      M.get_associated_function (|
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "slice")
                                                                                          [
                                                                                            Ty.path
                                                                                              "specs::types::ValueType"
                                                                                          ],
                                                                                        "into_vec",
                                                                                        [
                                                                                          Ty.path
                                                                                            "alloc::alloc::Global"
                                                                                        ]
                                                                                      |),
                                                                                      [
                                                                                        (* Unsize *)
                                                                                        M.pointer_coercion
                                                                                          (M.read (|
                                                                                            M.call_closure (|
                                                                                              M.get_associated_function (|
                                                                                                Ty.apply
                                                                                                  (Ty.path
                                                                                                    "alloc::boxed::Box")
                                                                                                  [
                                                                                                    Ty.apply
                                                                                                      (Ty.path
                                                                                                        "array")
                                                                                                      [
                                                                                                        Ty.path
                                                                                                          "specs::types::ValueType"
                                                                                                      ];
                                                                                                    Ty.path
                                                                                                      "alloc::alloc::Global"
                                                                                                  ],
                                                                                                "new",
                                                                                                []
                                                                                              |),
                                                                                              [
                                                                                                M.alloc (|
                                                                                                  Value.Array
                                                                                                    [
                                                                                                      M.call_closure (|
                                                                                                        M.get_trait_method (|
                                                                                                          "core::convert::Into",
                                                                                                          Ty.path
                                                                                                            "parity_wasm::elements::types::ValueType",
                                                                                                          [
                                                                                                            Ty.path
                                                                                                              "specs::types::ValueType"
                                                                                                          ],
                                                                                                          "into",
                                                                                                          []
                                                                                                        |),
                                                                                                        [
                                                                                                          M.read (|
                                                                                                            t
                                                                                                          |)
                                                                                                        ]
                                                                                                      |)
                                                                                                    ]
                                                                                                |)
                                                                                              ]
                                                                                            |)
                                                                                          |))
                                                                                      ]
                                                                                    |)
                                                                                  |)))
                                                                            ]
                                                                          |)
                                                                        |) in
                                                                      M.alloc (|
                                                                        Value.StructRecord
                                                                          "specs::itable::BrTarget"
                                                                          [
                                                                            ("drop",
                                                                              M.read (|
                                                                                M.SubPointer.get_struct_record_field (|
                                                                                  M.SubPointer.get_struct_record_field (|
                                                                                    M.read (|
                                                                                      target
                                                                                    |),
                                                                                    "wasmi::isa::Target",
                                                                                    "drop_keep"
                                                                                  |),
                                                                                  "wasmi::isa::DropKeep",
                                                                                  "drop"
                                                                                |)
                                                                              |));
                                                                            ("keep",
                                                                              M.read (|
                                                                                keep_type
                                                                              |));
                                                                            ("dst_pc",
                                                                              M.read (|
                                                                                M.SubPointer.get_struct_record_field (|
                                                                                  M.read (|
                                                                                    target
                                                                                  |),
                                                                                  "wasmi::isa::Target",
                                                                                  "dst_pc"
                                                                                |)
                                                                              |))
                                                                          ]
                                                                      |)));
                                                                  fun γ =>
                                                                    ltac:(M.monadic
                                                                      (M.alloc (|
                                                                        M.never_to_any (|
                                                                          M.call_closure (|
                                                                            M.get_function (|
                                                                              "core::panicking::panic",
                                                                              []
                                                                            |),
                                                                            [
                                                                              M.read (|
                                                                                Value.String
                                                                                  "internal error: entered unreachable code"
                                                                              |)
                                                                            ]
                                                                          |)
                                                                        |)
                                                                      |)))
                                                                ]
                                                              |)
                                                            |)))
                                                      ]
                                                    |)
                                                  | _ => M.impossible (||)
                                                  end))
                                          ]
                                        |)
                                      ]
                                    |))
                                ]
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (M.alloc (|
                              Value.StructTuple "specs::itable::Opcode::Unreachable" []
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "wasmi::isa::Instruction::Return",
                                0
                              |) in
                            let drop_keep := M.copy (| γ0_0 |) in
                            M.alloc (|
                              Value.StructRecord
                                "specs::itable::Opcode::Return"
                                [
                                  ("drop",
                                    M.read (|
                                      M.SubPointer.get_struct_record_field (|
                                        drop_keep,
                                        "wasmi::isa::DropKeep",
                                        "drop"
                                      |)
                                    |));
                                  ("keep",
                                    M.read (|
                                      M.match_operator (|
                                        M.alloc (| Value.Tuple [] |),
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let γ :=
                                                M.SubPointer.get_struct_record_field (|
                                                  drop_keep,
                                                  "wasmi::isa::DropKeep",
                                                  "keep"
                                                |) in
                                              let γ0_0 :=
                                                M.SubPointer.get_struct_tuple_field (|
                                                  γ,
                                                  "wasmi::isa::Keep::Single",
                                                  0
                                                |) in
                                              let t := M.copy (| γ0_0 |) in
                                              M.alloc (|
                                                M.call_closure (|
                                                  M.get_associated_function (|
                                                    Ty.apply
                                                      (Ty.path "slice")
                                                      [ Ty.path "specs::types::ValueType" ],
                                                    "into_vec",
                                                    [ Ty.path "alloc::alloc::Global" ]
                                                  |),
                                                  [
                                                    (* Unsize *)
                                                    M.pointer_coercion
                                                      (M.read (|
                                                        M.call_closure (|
                                                          M.get_associated_function (|
                                                            Ty.apply
                                                              (Ty.path "alloc::boxed::Box")
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "array")
                                                                  [
                                                                    Ty.path
                                                                      "specs::types::ValueType"
                                                                  ];
                                                                Ty.path "alloc::alloc::Global"
                                                              ],
                                                            "new",
                                                            []
                                                          |),
                                                          [
                                                            M.alloc (|
                                                              Value.Array
                                                                [
                                                                  M.call_closure (|
                                                                    M.get_trait_method (|
                                                                      "core::convert::Into",
                                                                      Ty.path
                                                                        "parity_wasm::elements::types::ValueType",
                                                                      [
                                                                        Ty.path
                                                                          "specs::types::ValueType"
                                                                      ],
                                                                      "into",
                                                                      []
                                                                    |),
                                                                    [ M.read (| t |) ]
                                                                  |)
                                                                ]
                                                            |)
                                                          ]
                                                        |)
                                                      |))
                                                  ]
                                                |)
                                              |)));
                                          fun γ =>
                                            ltac:(M.monadic
                                              (M.alloc (|
                                                M.call_closure (|
                                                  M.get_associated_function (|
                                                    Ty.apply
                                                      (Ty.path "alloc::vec::Vec")
                                                      [
                                                        Ty.path "specs::types::ValueType";
                                                        Ty.path "alloc::alloc::Global"
                                                      ],
                                                    "new",
                                                    []
                                                  |),
                                                  []
                                                |)
                                              |)))
                                        ]
                                      |)
                                    |))
                                ]
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "wasmi::isa::Instruction::Call",
                                0
                              |) in
                            let func_index := M.copy (| γ0_0 |) in
                            let func_desc :=
                              M.alloc (|
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "core::ops::function::Fn",
                                    impl_Fn_u32__arrow__'b_FuncDesc,
                                    [ Ty.tuple [ Ty.path "u32" ] ],
                                    "call",
                                    []
                                  |),
                                  [
                                    M.read (| function_mapping |);
                                    Value.Tuple [ M.read (| func_index |) ]
                                  ]
                                |)
                              |) in
                            M.match_operator (|
                              M.alloc (|
                                M.SubPointer.get_struct_record_field (|
                                  M.read (| func_desc |),
                                  "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::FuncDesc",
                                  "ftype"
                                |)
                              |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ := M.read (| γ |) in
                                    M.alloc (|
                                      Value.StructRecord
                                        "specs::itable::Opcode::Call"
                                        [ ("index", M.read (| func_index |)) ]
                                    |)));
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ := M.read (| γ |) in
                                    let γ1_0 :=
                                      M.SubPointer.get_struct_record_field (|
                                        γ,
                                        "specs::types::FunctionType::HostFunction",
                                        "plugin"
                                      |) in
                                    let γ1_1 :=
                                      M.SubPointer.get_struct_record_field (|
                                        γ,
                                        "specs::types::FunctionType::HostFunction",
                                        "function_index"
                                      |) in
                                    let γ1_2 :=
                                      M.SubPointer.get_struct_record_field (|
                                        γ,
                                        "specs::types::FunctionType::HostFunction",
                                        "function_name"
                                      |) in
                                    let γ1_3 :=
                                      M.SubPointer.get_struct_record_field (|
                                        γ,
                                        "specs::types::FunctionType::HostFunction",
                                        "op_index_in_plugin"
                                      |) in
                                    let plugin := M.alloc (| γ1_0 |) in
                                    let function_index := M.alloc (| γ1_1 |) in
                                    let function_name := M.alloc (| γ1_2 |) in
                                    let op_index_in_plugin := M.alloc (| γ1_3 |) in
                                    M.alloc (|
                                      Value.StructRecord
                                        "specs::itable::Opcode::InternalHostCall"
                                        [
                                          ("plugin", M.read (| M.read (| plugin |) |));
                                          ("function_index",
                                            M.read (| M.read (| function_index |) |));
                                          ("function_name",
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "core::clone::Clone",
                                                Ty.path "alloc::string::String",
                                                [],
                                                "clone",
                                                []
                                              |),
                                              [ M.read (| function_name |) ]
                                            |));
                                          ("op_index_in_plugin",
                                            M.read (| M.read (| op_index_in_plugin |) |))
                                        ]
                                    |)));
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ := M.read (| γ |) in
                                    let γ1_0 :=
                                      M.SubPointer.get_struct_record_field (|
                                        γ,
                                        "specs::types::FunctionType::HostFunctionExternal",
                                        "op"
                                      |) in
                                    let γ1_1 :=
                                      M.SubPointer.get_struct_record_field (|
                                        γ,
                                        "specs::types::FunctionType::HostFunctionExternal",
                                        "sig"
                                      |) in
                                    let op := M.alloc (| γ1_0 |) in
                                    let sig := M.alloc (| γ1_1 |) in
                                    M.alloc (|
                                      Value.StructRecord
                                        "specs::itable::Opcode::ExternalHostCall"
                                        [
                                          ("op", M.read (| M.read (| op |) |));
                                          ("sig", M.read (| M.read (| sig |) |))
                                        ]
                                    |)))
                              ]
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "wasmi::isa::Instruction::CallIndirect",
                                0
                              |) in
                            let idx := M.copy (| γ0_0 |) in
                            M.alloc (|
                              Value.StructRecord
                                "specs::itable::Opcode::CallIndirect"
                                [ ("type_idx", M.read (| idx |)) ]
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (M.alloc (| Value.StructTuple "specs::itable::Opcode::Drop" [] |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "wasmi::isa::Instruction::Select",
                                0
                              |) in
                            M.alloc (| Value.StructTuple "specs::itable::Opcode::Select" [] |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "wasmi::isa::Instruction::GetGlobal",
                                0
                              |) in
                            let idx := M.copy (| γ0_0 |) in
                            M.alloc (|
                              Value.StructRecord
                                "specs::itable::Opcode::GlobalGet"
                                [ ("idx", M.rust_cast (M.read (| idx |))) ]
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "wasmi::isa::Instruction::SetGlobal",
                                0
                              |) in
                            let idx := M.copy (| γ0_0 |) in
                            M.alloc (|
                              Value.StructRecord
                                "specs::itable::Opcode::GlobalSet"
                                [ ("idx", M.rust_cast (M.read (| idx |))) ]
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "wasmi::isa::Instruction::I32Load",
                                0
                              |) in
                            let offset := M.copy (| γ0_0 |) in
                            M.alloc (|
                              Value.StructRecord
                                "specs::itable::Opcode::Load"
                                [
                                  ("offset", M.read (| offset |));
                                  ("vtype", Value.StructTuple "specs::mtable::VarType::I32" []);
                                  ("size",
                                    Value.StructTuple "specs::mtable::MemoryReadSize::U32" [])
                                ]
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "wasmi::isa::Instruction::I64Load",
                                0
                              |) in
                            let offset := M.copy (| γ0_0 |) in
                            M.alloc (|
                              Value.StructRecord
                                "specs::itable::Opcode::Load"
                                [
                                  ("offset", M.read (| offset |));
                                  ("vtype", Value.StructTuple "specs::mtable::VarType::I64" []);
                                  ("size",
                                    Value.StructTuple "specs::mtable::MemoryReadSize::I64" [])
                                ]
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "wasmi::isa::Instruction::F32Load",
                                0
                              |) in
                            M.alloc (|
                              M.never_to_any (|
                                M.call_closure (|
                                  M.get_function (| "core::panicking::panic", [] |),
                                  [ M.read (| Value.String "not yet implemented" |) ]
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "wasmi::isa::Instruction::F64Load",
                                0
                              |) in
                            M.alloc (|
                              M.never_to_any (|
                                M.call_closure (|
                                  M.get_function (| "core::panicking::panic", [] |),
                                  [ M.read (| Value.String "not yet implemented" |) ]
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "wasmi::isa::Instruction::I32Load8S",
                                0
                              |) in
                            let offset := M.copy (| γ0_0 |) in
                            M.alloc (|
                              Value.StructRecord
                                "specs::itable::Opcode::Load"
                                [
                                  ("offset", M.read (| offset |));
                                  ("vtype", Value.StructTuple "specs::mtable::VarType::I32" []);
                                  ("size", Value.StructTuple "specs::mtable::MemoryReadSize::S8" [])
                                ]
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "wasmi::isa::Instruction::I32Load8U",
                                0
                              |) in
                            let offset := M.copy (| γ0_0 |) in
                            M.alloc (|
                              Value.StructRecord
                                "specs::itable::Opcode::Load"
                                [
                                  ("offset", M.read (| offset |));
                                  ("vtype", Value.StructTuple "specs::mtable::VarType::I32" []);
                                  ("size", Value.StructTuple "specs::mtable::MemoryReadSize::U8" [])
                                ]
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "wasmi::isa::Instruction::I32Load16S",
                                0
                              |) in
                            let offset := M.copy (| γ0_0 |) in
                            M.alloc (|
                              Value.StructRecord
                                "specs::itable::Opcode::Load"
                                [
                                  ("offset", M.read (| offset |));
                                  ("vtype", Value.StructTuple "specs::mtable::VarType::I32" []);
                                  ("size",
                                    Value.StructTuple "specs::mtable::MemoryReadSize::S16" [])
                                ]
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "wasmi::isa::Instruction::I32Load16U",
                                0
                              |) in
                            let offset := M.copy (| γ0_0 |) in
                            M.alloc (|
                              Value.StructRecord
                                "specs::itable::Opcode::Load"
                                [
                                  ("offset", M.read (| offset |));
                                  ("vtype", Value.StructTuple "specs::mtable::VarType::I32" []);
                                  ("size",
                                    Value.StructTuple "specs::mtable::MemoryReadSize::U16" [])
                                ]
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "wasmi::isa::Instruction::I64Load8S",
                                0
                              |) in
                            let offset := M.copy (| γ0_0 |) in
                            M.alloc (|
                              Value.StructRecord
                                "specs::itable::Opcode::Load"
                                [
                                  ("offset", M.read (| offset |));
                                  ("vtype", Value.StructTuple "specs::mtable::VarType::I64" []);
                                  ("size", Value.StructTuple "specs::mtable::MemoryReadSize::S8" [])
                                ]
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "wasmi::isa::Instruction::I64Load8U",
                                0
                              |) in
                            let offset := M.copy (| γ0_0 |) in
                            M.alloc (|
                              Value.StructRecord
                                "specs::itable::Opcode::Load"
                                [
                                  ("offset", M.read (| offset |));
                                  ("vtype", Value.StructTuple "specs::mtable::VarType::I64" []);
                                  ("size", Value.StructTuple "specs::mtable::MemoryReadSize::U8" [])
                                ]
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "wasmi::isa::Instruction::I64Load16S",
                                0
                              |) in
                            let offset := M.copy (| γ0_0 |) in
                            M.alloc (|
                              Value.StructRecord
                                "specs::itable::Opcode::Load"
                                [
                                  ("offset", M.read (| offset |));
                                  ("vtype", Value.StructTuple "specs::mtable::VarType::I64" []);
                                  ("size",
                                    Value.StructTuple "specs::mtable::MemoryReadSize::S16" [])
                                ]
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "wasmi::isa::Instruction::I64Load16U",
                                0
                              |) in
                            let offset := M.copy (| γ0_0 |) in
                            M.alloc (|
                              Value.StructRecord
                                "specs::itable::Opcode::Load"
                                [
                                  ("offset", M.read (| offset |));
                                  ("vtype", Value.StructTuple "specs::mtable::VarType::I64" []);
                                  ("size",
                                    Value.StructTuple "specs::mtable::MemoryReadSize::U16" [])
                                ]
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "wasmi::isa::Instruction::I64Load32S",
                                0
                              |) in
                            let offset := M.copy (| γ0_0 |) in
                            M.alloc (|
                              Value.StructRecord
                                "specs::itable::Opcode::Load"
                                [
                                  ("offset", M.read (| offset |));
                                  ("vtype", Value.StructTuple "specs::mtable::VarType::I64" []);
                                  ("size",
                                    Value.StructTuple "specs::mtable::MemoryReadSize::S32" [])
                                ]
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "wasmi::isa::Instruction::I64Load32U",
                                0
                              |) in
                            let offset := M.copy (| γ0_0 |) in
                            M.alloc (|
                              Value.StructRecord
                                "specs::itable::Opcode::Load"
                                [
                                  ("offset", M.read (| offset |));
                                  ("vtype", Value.StructTuple "specs::mtable::VarType::I64" []);
                                  ("size",
                                    Value.StructTuple "specs::mtable::MemoryReadSize::U32" [])
                                ]
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "wasmi::isa::Instruction::I32Store",
                                0
                              |) in
                            let offset := M.copy (| γ0_0 |) in
                            M.alloc (|
                              Value.StructRecord
                                "specs::itable::Opcode::Store"
                                [
                                  ("offset", M.read (| offset |));
                                  ("vtype", Value.StructTuple "specs::mtable::VarType::I32" []);
                                  ("size",
                                    Value.StructTuple "specs::mtable::MemoryStoreSize::Byte32" [])
                                ]
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "wasmi::isa::Instruction::I64Store",
                                0
                              |) in
                            let offset := M.copy (| γ0_0 |) in
                            M.alloc (|
                              Value.StructRecord
                                "specs::itable::Opcode::Store"
                                [
                                  ("offset", M.read (| offset |));
                                  ("vtype", Value.StructTuple "specs::mtable::VarType::I64" []);
                                  ("size",
                                    Value.StructTuple "specs::mtable::MemoryStoreSize::Byte64" [])
                                ]
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "wasmi::isa::Instruction::F32Store",
                                0
                              |) in
                            M.alloc (|
                              M.never_to_any (|
                                M.call_closure (|
                                  M.get_function (| "core::panicking::panic", [] |),
                                  [ M.read (| Value.String "not yet implemented" |) ]
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "wasmi::isa::Instruction::F64Store",
                                0
                              |) in
                            M.alloc (|
                              M.never_to_any (|
                                M.call_closure (|
                                  M.get_function (| "core::panicking::panic", [] |),
                                  [ M.read (| Value.String "not yet implemented" |) ]
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "wasmi::isa::Instruction::I32Store8",
                                0
                              |) in
                            let offset := M.copy (| γ0_0 |) in
                            M.alloc (|
                              Value.StructRecord
                                "specs::itable::Opcode::Store"
                                [
                                  ("offset", M.read (| offset |));
                                  ("vtype", Value.StructTuple "specs::mtable::VarType::I32" []);
                                  ("size",
                                    Value.StructTuple "specs::mtable::MemoryStoreSize::Byte8" [])
                                ]
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "wasmi::isa::Instruction::I32Store16",
                                0
                              |) in
                            let offset := M.copy (| γ0_0 |) in
                            M.alloc (|
                              Value.StructRecord
                                "specs::itable::Opcode::Store"
                                [
                                  ("offset", M.read (| offset |));
                                  ("vtype", Value.StructTuple "specs::mtable::VarType::I32" []);
                                  ("size",
                                    Value.StructTuple "specs::mtable::MemoryStoreSize::Byte16" [])
                                ]
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "wasmi::isa::Instruction::I64Store8",
                                0
                              |) in
                            let offset := M.copy (| γ0_0 |) in
                            M.alloc (|
                              Value.StructRecord
                                "specs::itable::Opcode::Store"
                                [
                                  ("offset", M.read (| offset |));
                                  ("vtype", Value.StructTuple "specs::mtable::VarType::I64" []);
                                  ("size",
                                    Value.StructTuple "specs::mtable::MemoryStoreSize::Byte8" [])
                                ]
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "wasmi::isa::Instruction::I64Store16",
                                0
                              |) in
                            let offset := M.copy (| γ0_0 |) in
                            M.alloc (|
                              Value.StructRecord
                                "specs::itable::Opcode::Store"
                                [
                                  ("offset", M.read (| offset |));
                                  ("vtype", Value.StructTuple "specs::mtable::VarType::I64" []);
                                  ("size",
                                    Value.StructTuple "specs::mtable::MemoryStoreSize::Byte16" [])
                                ]
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "wasmi::isa::Instruction::I64Store32",
                                0
                              |) in
                            let offset := M.copy (| γ0_0 |) in
                            M.alloc (|
                              Value.StructRecord
                                "specs::itable::Opcode::Store"
                                [
                                  ("offset", M.read (| offset |));
                                  ("vtype", Value.StructTuple "specs::mtable::VarType::I64" []);
                                  ("size",
                                    Value.StructTuple "specs::mtable::MemoryStoreSize::Byte32" [])
                                ]
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (M.alloc (|
                              Value.StructTuple "specs::itable::Opcode::MemorySize" []
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (M.alloc (|
                              Value.StructTuple "specs::itable::Opcode::MemoryGrow" []
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "wasmi::isa::Instruction::I32Const",
                                0
                              |) in
                            let v := M.copy (| γ0_0 |) in
                            M.alloc (|
                              Value.StructRecord
                                "specs::itable::Opcode::Const"
                                [
                                  ("vtype", Value.StructTuple "specs::mtable::VarType::I32" []);
                                  ("value", M.rust_cast (M.rust_cast (M.read (| v |))))
                                ]
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "wasmi::isa::Instruction::I64Const",
                                0
                              |) in
                            let v := M.copy (| γ0_0 |) in
                            M.alloc (|
                              Value.StructRecord
                                "specs::itable::Opcode::Const"
                                [
                                  ("vtype", Value.StructTuple "specs::mtable::VarType::I64" []);
                                  ("value", M.rust_cast (M.read (| v |)))
                                ]
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "wasmi::isa::Instruction::F32Const",
                                0
                              |) in
                            M.alloc (|
                              M.never_to_any (|
                                M.call_closure (|
                                  M.get_function (| "core::panicking::panic", [] |),
                                  [ M.read (| Value.String "not yet implemented" |) ]
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "wasmi::isa::Instruction::F64Const",
                                0
                              |) in
                            M.alloc (|
                              M.never_to_any (|
                                M.call_closure (|
                                  M.get_function (| "core::panicking::panic", [] |),
                                  [ M.read (| Value.String "not yet implemented" |) ]
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (M.alloc (|
                              Value.StructRecord
                                "specs::itable::Opcode::Test"
                                [
                                  ("class", Value.StructTuple "specs::itable::TestOp::Eqz" []);
                                  ("vtype", Value.StructTuple "specs::mtable::VarType::I32" [])
                                ]
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (M.alloc (|
                              Value.StructRecord
                                "specs::itable::Opcode::Rel"
                                [
                                  ("class", Value.StructTuple "specs::itable::RelOp::Eq" []);
                                  ("vtype", Value.StructTuple "specs::mtable::VarType::I32" [])
                                ]
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (M.alloc (|
                              Value.StructRecord
                                "specs::itable::Opcode::Rel"
                                [
                                  ("class", Value.StructTuple "specs::itable::RelOp::Ne" []);
                                  ("vtype", Value.StructTuple "specs::mtable::VarType::I32" [])
                                ]
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (M.alloc (|
                              Value.StructRecord
                                "specs::itable::Opcode::Rel"
                                [
                                  ("class", Value.StructTuple "specs::itable::RelOp::SignedLt" []);
                                  ("vtype", Value.StructTuple "specs::mtable::VarType::I32" [])
                                ]
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (M.alloc (|
                              Value.StructRecord
                                "specs::itable::Opcode::Rel"
                                [
                                  ("class",
                                    Value.StructTuple "specs::itable::RelOp::UnsignedLt" []);
                                  ("vtype", Value.StructTuple "specs::mtable::VarType::I32" [])
                                ]
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (M.alloc (|
                              Value.StructRecord
                                "specs::itable::Opcode::Rel"
                                [
                                  ("class", Value.StructTuple "specs::itable::RelOp::SignedGt" []);
                                  ("vtype", Value.StructTuple "specs::mtable::VarType::I32" [])
                                ]
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (M.alloc (|
                              Value.StructRecord
                                "specs::itable::Opcode::Rel"
                                [
                                  ("class",
                                    Value.StructTuple "specs::itable::RelOp::UnsignedGt" []);
                                  ("vtype", Value.StructTuple "specs::mtable::VarType::I32" [])
                                ]
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (M.alloc (|
                              Value.StructRecord
                                "specs::itable::Opcode::Rel"
                                [
                                  ("class", Value.StructTuple "specs::itable::RelOp::SignedLe" []);
                                  ("vtype", Value.StructTuple "specs::mtable::VarType::I32" [])
                                ]
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (M.alloc (|
                              Value.StructRecord
                                "specs::itable::Opcode::Rel"
                                [
                                  ("class",
                                    Value.StructTuple "specs::itable::RelOp::UnsignedLe" []);
                                  ("vtype", Value.StructTuple "specs::mtable::VarType::I32" [])
                                ]
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (M.alloc (|
                              Value.StructRecord
                                "specs::itable::Opcode::Rel"
                                [
                                  ("class", Value.StructTuple "specs::itable::RelOp::SignedGe" []);
                                  ("vtype", Value.StructTuple "specs::mtable::VarType::I32" [])
                                ]
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (M.alloc (|
                              Value.StructRecord
                                "specs::itable::Opcode::Rel"
                                [
                                  ("class",
                                    Value.StructTuple "specs::itable::RelOp::UnsignedGe" []);
                                  ("vtype", Value.StructTuple "specs::mtable::VarType::I32" [])
                                ]
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (M.alloc (|
                              Value.StructRecord
                                "specs::itable::Opcode::Test"
                                [
                                  ("class", Value.StructTuple "specs::itable::TestOp::Eqz" []);
                                  ("vtype", Value.StructTuple "specs::mtable::VarType::I64" [])
                                ]
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (M.alloc (|
                              Value.StructRecord
                                "specs::itable::Opcode::Rel"
                                [
                                  ("class", Value.StructTuple "specs::itable::RelOp::Eq" []);
                                  ("vtype", Value.StructTuple "specs::mtable::VarType::I64" [])
                                ]
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (M.alloc (|
                              Value.StructRecord
                                "specs::itable::Opcode::Rel"
                                [
                                  ("class", Value.StructTuple "specs::itable::RelOp::Ne" []);
                                  ("vtype", Value.StructTuple "specs::mtable::VarType::I64" [])
                                ]
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (M.alloc (|
                              Value.StructRecord
                                "specs::itable::Opcode::Rel"
                                [
                                  ("class", Value.StructTuple "specs::itable::RelOp::SignedLt" []);
                                  ("vtype", Value.StructTuple "specs::mtable::VarType::I64" [])
                                ]
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (M.alloc (|
                              Value.StructRecord
                                "specs::itable::Opcode::Rel"
                                [
                                  ("class",
                                    Value.StructTuple "specs::itable::RelOp::UnsignedLt" []);
                                  ("vtype", Value.StructTuple "specs::mtable::VarType::I64" [])
                                ]
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (M.alloc (|
                              Value.StructRecord
                                "specs::itable::Opcode::Rel"
                                [
                                  ("class", Value.StructTuple "specs::itable::RelOp::SignedGt" []);
                                  ("vtype", Value.StructTuple "specs::mtable::VarType::I64" [])
                                ]
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (M.alloc (|
                              Value.StructRecord
                                "specs::itable::Opcode::Rel"
                                [
                                  ("class",
                                    Value.StructTuple "specs::itable::RelOp::UnsignedGt" []);
                                  ("vtype", Value.StructTuple "specs::mtable::VarType::I64" [])
                                ]
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (M.alloc (|
                              Value.StructRecord
                                "specs::itable::Opcode::Rel"
                                [
                                  ("class", Value.StructTuple "specs::itable::RelOp::SignedLe" []);
                                  ("vtype", Value.StructTuple "specs::mtable::VarType::I64" [])
                                ]
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (M.alloc (|
                              Value.StructRecord
                                "specs::itable::Opcode::Rel"
                                [
                                  ("class",
                                    Value.StructTuple "specs::itable::RelOp::UnsignedLe" []);
                                  ("vtype", Value.StructTuple "specs::mtable::VarType::I64" [])
                                ]
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (M.alloc (|
                              Value.StructRecord
                                "specs::itable::Opcode::Rel"
                                [
                                  ("class", Value.StructTuple "specs::itable::RelOp::SignedGe" []);
                                  ("vtype", Value.StructTuple "specs::mtable::VarType::I64" [])
                                ]
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (M.alloc (|
                              Value.StructRecord
                                "specs::itable::Opcode::Rel"
                                [
                                  ("class",
                                    Value.StructTuple "specs::itable::RelOp::UnsignedGe" []);
                                  ("vtype", Value.StructTuple "specs::mtable::VarType::I64" [])
                                ]
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (M.alloc (|
                              M.never_to_any (|
                                M.call_closure (|
                                  M.get_function (| "core::panicking::panic", [] |),
                                  [ M.read (| Value.String "not yet implemented" |) ]
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (M.alloc (|
                              M.never_to_any (|
                                M.call_closure (|
                                  M.get_function (| "core::panicking::panic", [] |),
                                  [ M.read (| Value.String "not yet implemented" |) ]
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (M.alloc (|
                              M.never_to_any (|
                                M.call_closure (|
                                  M.get_function (| "core::panicking::panic", [] |),
                                  [ M.read (| Value.String "not yet implemented" |) ]
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (M.alloc (|
                              M.never_to_any (|
                                M.call_closure (|
                                  M.get_function (| "core::panicking::panic", [] |),
                                  [ M.read (| Value.String "not yet implemented" |) ]
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (M.alloc (|
                              M.never_to_any (|
                                M.call_closure (|
                                  M.get_function (| "core::panicking::panic", [] |),
                                  [ M.read (| Value.String "not yet implemented" |) ]
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (M.alloc (|
                              M.never_to_any (|
                                M.call_closure (|
                                  M.get_function (| "core::panicking::panic", [] |),
                                  [ M.read (| Value.String "not yet implemented" |) ]
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (M.alloc (|
                              M.never_to_any (|
                                M.call_closure (|
                                  M.get_function (| "core::panicking::panic", [] |),
                                  [ M.read (| Value.String "not yet implemented" |) ]
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (M.alloc (|
                              M.never_to_any (|
                                M.call_closure (|
                                  M.get_function (| "core::panicking::panic", [] |),
                                  [ M.read (| Value.String "not yet implemented" |) ]
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (M.alloc (|
                              M.never_to_any (|
                                M.call_closure (|
                                  M.get_function (| "core::panicking::panic", [] |),
                                  [ M.read (| Value.String "not yet implemented" |) ]
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (M.alloc (|
                              M.never_to_any (|
                                M.call_closure (|
                                  M.get_function (| "core::panicking::panic", [] |),
                                  [ M.read (| Value.String "not yet implemented" |) ]
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (M.alloc (|
                              M.never_to_any (|
                                M.call_closure (|
                                  M.get_function (| "core::panicking::panic", [] |),
                                  [ M.read (| Value.String "not yet implemented" |) ]
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (M.alloc (|
                              M.never_to_any (|
                                M.call_closure (|
                                  M.get_function (| "core::panicking::panic", [] |),
                                  [ M.read (| Value.String "not yet implemented" |) ]
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (M.alloc (|
                              Value.StructRecord
                                "specs::itable::Opcode::Unary"
                                [
                                  ("class", Value.StructTuple "specs::itable::UnaryOp::Clz" []);
                                  ("vtype", Value.StructTuple "specs::mtable::VarType::I32" [])
                                ]
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (M.alloc (|
                              Value.StructRecord
                                "specs::itable::Opcode::Unary"
                                [
                                  ("class", Value.StructTuple "specs::itable::UnaryOp::Ctz" []);
                                  ("vtype", Value.StructTuple "specs::mtable::VarType::I32" [])
                                ]
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (M.alloc (|
                              Value.StructRecord
                                "specs::itable::Opcode::Unary"
                                [
                                  ("class", Value.StructTuple "specs::itable::UnaryOp::Popcnt" []);
                                  ("vtype", Value.StructTuple "specs::mtable::VarType::I32" [])
                                ]
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (M.alloc (|
                              Value.StructRecord
                                "specs::itable::Opcode::Bin"
                                [
                                  ("class", Value.StructTuple "specs::itable::BinOp::Add" []);
                                  ("vtype", Value.StructTuple "specs::mtable::VarType::I32" [])
                                ]
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (M.alloc (|
                              Value.StructRecord
                                "specs::itable::Opcode::Bin"
                                [
                                  ("class", Value.StructTuple "specs::itable::BinOp::Sub" []);
                                  ("vtype", Value.StructTuple "specs::mtable::VarType::I32" [])
                                ]
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (M.alloc (|
                              Value.StructRecord
                                "specs::itable::Opcode::Bin"
                                [
                                  ("class", Value.StructTuple "specs::itable::BinOp::Mul" []);
                                  ("vtype", Value.StructTuple "specs::mtable::VarType::I32" [])
                                ]
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (M.alloc (|
                              Value.StructRecord
                                "specs::itable::Opcode::Bin"
                                [
                                  ("class", Value.StructTuple "specs::itable::BinOp::SignedDiv" []);
                                  ("vtype", Value.StructTuple "specs::mtable::VarType::I32" [])
                                ]
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (M.alloc (|
                              Value.StructRecord
                                "specs::itable::Opcode::Bin"
                                [
                                  ("class",
                                    Value.StructTuple "specs::itable::BinOp::UnsignedDiv" []);
                                  ("vtype", Value.StructTuple "specs::mtable::VarType::I32" [])
                                ]
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (M.alloc (|
                              Value.StructRecord
                                "specs::itable::Opcode::Bin"
                                [
                                  ("class", Value.StructTuple "specs::itable::BinOp::SignedRem" []);
                                  ("vtype", Value.StructTuple "specs::mtable::VarType::I32" [])
                                ]
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (M.alloc (|
                              Value.StructRecord
                                "specs::itable::Opcode::Bin"
                                [
                                  ("class",
                                    Value.StructTuple "specs::itable::BinOp::UnsignedRem" []);
                                  ("vtype", Value.StructTuple "specs::mtable::VarType::I32" [])
                                ]
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (M.alloc (|
                              Value.StructRecord
                                "specs::itable::Opcode::BinBit"
                                [
                                  ("class", Value.StructTuple "specs::itable::BitOp::And" []);
                                  ("vtype", Value.StructTuple "specs::mtable::VarType::I32" [])
                                ]
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (M.alloc (|
                              Value.StructRecord
                                "specs::itable::Opcode::BinBit"
                                [
                                  ("class", Value.StructTuple "specs::itable::BitOp::Or" []);
                                  ("vtype", Value.StructTuple "specs::mtable::VarType::I32" [])
                                ]
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (M.alloc (|
                              Value.StructRecord
                                "specs::itable::Opcode::BinBit"
                                [
                                  ("class", Value.StructTuple "specs::itable::BitOp::Xor" []);
                                  ("vtype", Value.StructTuple "specs::mtable::VarType::I32" [])
                                ]
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (M.alloc (|
                              Value.StructRecord
                                "specs::itable::Opcode::BinShift"
                                [
                                  ("class", Value.StructTuple "specs::itable::ShiftOp::Shl" []);
                                  ("vtype", Value.StructTuple "specs::mtable::VarType::I32" [])
                                ]
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (M.alloc (|
                              Value.StructRecord
                                "specs::itable::Opcode::BinShift"
                                [
                                  ("class",
                                    Value.StructTuple "specs::itable::ShiftOp::SignedShr" []);
                                  ("vtype", Value.StructTuple "specs::mtable::VarType::I32" [])
                                ]
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (M.alloc (|
                              Value.StructRecord
                                "specs::itable::Opcode::BinShift"
                                [
                                  ("class",
                                    Value.StructTuple "specs::itable::ShiftOp::UnsignedShr" []);
                                  ("vtype", Value.StructTuple "specs::mtable::VarType::I32" [])
                                ]
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (M.alloc (|
                              Value.StructRecord
                                "specs::itable::Opcode::BinShift"
                                [
                                  ("class", Value.StructTuple "specs::itable::ShiftOp::Rotl" []);
                                  ("vtype", Value.StructTuple "specs::mtable::VarType::I32" [])
                                ]
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (M.alloc (|
                              Value.StructRecord
                                "specs::itable::Opcode::BinShift"
                                [
                                  ("class", Value.StructTuple "specs::itable::ShiftOp::Rotr" []);
                                  ("vtype", Value.StructTuple "specs::mtable::VarType::I32" [])
                                ]
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (M.alloc (|
                              Value.StructRecord
                                "specs::itable::Opcode::Unary"
                                [
                                  ("class", Value.StructTuple "specs::itable::UnaryOp::Clz" []);
                                  ("vtype", Value.StructTuple "specs::mtable::VarType::I64" [])
                                ]
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (M.alloc (|
                              Value.StructRecord
                                "specs::itable::Opcode::Unary"
                                [
                                  ("class", Value.StructTuple "specs::itable::UnaryOp::Ctz" []);
                                  ("vtype", Value.StructTuple "specs::mtable::VarType::I64" [])
                                ]
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (M.alloc (|
                              Value.StructRecord
                                "specs::itable::Opcode::Unary"
                                [
                                  ("class", Value.StructTuple "specs::itable::UnaryOp::Popcnt" []);
                                  ("vtype", Value.StructTuple "specs::mtable::VarType::I64" [])
                                ]
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (M.alloc (|
                              Value.StructRecord
                                "specs::itable::Opcode::Bin"
                                [
                                  ("class", Value.StructTuple "specs::itable::BinOp::Add" []);
                                  ("vtype", Value.StructTuple "specs::mtable::VarType::I64" [])
                                ]
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (M.alloc (|
                              Value.StructRecord
                                "specs::itable::Opcode::Bin"
                                [
                                  ("class", Value.StructTuple "specs::itable::BinOp::Sub" []);
                                  ("vtype", Value.StructTuple "specs::mtable::VarType::I64" [])
                                ]
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (M.alloc (|
                              Value.StructRecord
                                "specs::itable::Opcode::Bin"
                                [
                                  ("class", Value.StructTuple "specs::itable::BinOp::Mul" []);
                                  ("vtype", Value.StructTuple "specs::mtable::VarType::I64" [])
                                ]
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (M.alloc (|
                              Value.StructRecord
                                "specs::itable::Opcode::Bin"
                                [
                                  ("class", Value.StructTuple "specs::itable::BinOp::SignedDiv" []);
                                  ("vtype", Value.StructTuple "specs::mtable::VarType::I64" [])
                                ]
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (M.alloc (|
                              Value.StructRecord
                                "specs::itable::Opcode::Bin"
                                [
                                  ("class",
                                    Value.StructTuple "specs::itable::BinOp::UnsignedDiv" []);
                                  ("vtype", Value.StructTuple "specs::mtable::VarType::I64" [])
                                ]
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (M.alloc (|
                              Value.StructRecord
                                "specs::itable::Opcode::Bin"
                                [
                                  ("class", Value.StructTuple "specs::itable::BinOp::SignedRem" []);
                                  ("vtype", Value.StructTuple "specs::mtable::VarType::I64" [])
                                ]
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (M.alloc (|
                              Value.StructRecord
                                "specs::itable::Opcode::Bin"
                                [
                                  ("class",
                                    Value.StructTuple "specs::itable::BinOp::UnsignedRem" []);
                                  ("vtype", Value.StructTuple "specs::mtable::VarType::I64" [])
                                ]
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (M.alloc (|
                              Value.StructRecord
                                "specs::itable::Opcode::BinBit"
                                [
                                  ("class", Value.StructTuple "specs::itable::BitOp::And" []);
                                  ("vtype", Value.StructTuple "specs::mtable::VarType::I64" [])
                                ]
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (M.alloc (|
                              Value.StructRecord
                                "specs::itable::Opcode::BinBit"
                                [
                                  ("class", Value.StructTuple "specs::itable::BitOp::Or" []);
                                  ("vtype", Value.StructTuple "specs::mtable::VarType::I64" [])
                                ]
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (M.alloc (|
                              Value.StructRecord
                                "specs::itable::Opcode::BinBit"
                                [
                                  ("class", Value.StructTuple "specs::itable::BitOp::Xor" []);
                                  ("vtype", Value.StructTuple "specs::mtable::VarType::I64" [])
                                ]
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (M.alloc (|
                              Value.StructRecord
                                "specs::itable::Opcode::BinShift"
                                [
                                  ("class", Value.StructTuple "specs::itable::ShiftOp::Shl" []);
                                  ("vtype", Value.StructTuple "specs::mtable::VarType::I64" [])
                                ]
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (M.alloc (|
                              Value.StructRecord
                                "specs::itable::Opcode::BinShift"
                                [
                                  ("class",
                                    Value.StructTuple "specs::itable::ShiftOp::SignedShr" []);
                                  ("vtype", Value.StructTuple "specs::mtable::VarType::I64" [])
                                ]
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (M.alloc (|
                              Value.StructRecord
                                "specs::itable::Opcode::BinShift"
                                [
                                  ("class",
                                    Value.StructTuple "specs::itable::ShiftOp::UnsignedShr" []);
                                  ("vtype", Value.StructTuple "specs::mtable::VarType::I64" [])
                                ]
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (M.alloc (|
                              Value.StructRecord
                                "specs::itable::Opcode::BinShift"
                                [
                                  ("class", Value.StructTuple "specs::itable::ShiftOp::Rotl" []);
                                  ("vtype", Value.StructTuple "specs::mtable::VarType::I64" [])
                                ]
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (M.alloc (|
                              Value.StructRecord
                                "specs::itable::Opcode::BinShift"
                                [
                                  ("class", Value.StructTuple "specs::itable::ShiftOp::Rotr" []);
                                  ("vtype", Value.StructTuple "specs::mtable::VarType::I64" [])
                                ]
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (M.alloc (|
                              M.never_to_any (|
                                M.call_closure (|
                                  M.get_function (| "core::panicking::panic", [] |),
                                  [ M.read (| Value.String "not yet implemented" |) ]
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (M.alloc (|
                              M.never_to_any (|
                                M.call_closure (|
                                  M.get_function (| "core::panicking::panic", [] |),
                                  [ M.read (| Value.String "not yet implemented" |) ]
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (M.alloc (|
                              M.never_to_any (|
                                M.call_closure (|
                                  M.get_function (| "core::panicking::panic", [] |),
                                  [ M.read (| Value.String "not yet implemented" |) ]
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (M.alloc (|
                              M.never_to_any (|
                                M.call_closure (|
                                  M.get_function (| "core::panicking::panic", [] |),
                                  [ M.read (| Value.String "not yet implemented" |) ]
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (M.alloc (|
                              M.never_to_any (|
                                M.call_closure (|
                                  M.get_function (| "core::panicking::panic", [] |),
                                  [ M.read (| Value.String "not yet implemented" |) ]
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (M.alloc (|
                              M.never_to_any (|
                                M.call_closure (|
                                  M.get_function (| "core::panicking::panic", [] |),
                                  [ M.read (| Value.String "not yet implemented" |) ]
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (M.alloc (|
                              M.never_to_any (|
                                M.call_closure (|
                                  M.get_function (| "core::panicking::panic", [] |),
                                  [ M.read (| Value.String "not yet implemented" |) ]
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (M.alloc (|
                              M.never_to_any (|
                                M.call_closure (|
                                  M.get_function (| "core::panicking::panic", [] |),
                                  [ M.read (| Value.String "not yet implemented" |) ]
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (M.alloc (|
                              M.never_to_any (|
                                M.call_closure (|
                                  M.get_function (| "core::panicking::panic", [] |),
                                  [ M.read (| Value.String "not yet implemented" |) ]
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (M.alloc (|
                              M.never_to_any (|
                                M.call_closure (|
                                  M.get_function (| "core::panicking::panic", [] |),
                                  [ M.read (| Value.String "not yet implemented" |) ]
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (M.alloc (|
                              M.never_to_any (|
                                M.call_closure (|
                                  M.get_function (| "core::panicking::panic", [] |),
                                  [ M.read (| Value.String "not yet implemented" |) ]
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (M.alloc (|
                              M.never_to_any (|
                                M.call_closure (|
                                  M.get_function (| "core::panicking::panic", [] |),
                                  [ M.read (| Value.String "not yet implemented" |) ]
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (M.alloc (|
                              M.never_to_any (|
                                M.call_closure (|
                                  M.get_function (| "core::panicking::panic", [] |),
                                  [ M.read (| Value.String "not yet implemented" |) ]
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (M.alloc (|
                              M.never_to_any (|
                                M.call_closure (|
                                  M.get_function (| "core::panicking::panic", [] |),
                                  [ M.read (| Value.String "not yet implemented" |) ]
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (M.alloc (|
                              M.never_to_any (|
                                M.call_closure (|
                                  M.get_function (| "core::panicking::panic", [] |),
                                  [ M.read (| Value.String "not yet implemented" |) ]
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (M.alloc (|
                              M.never_to_any (|
                                M.call_closure (|
                                  M.get_function (| "core::panicking::panic", [] |),
                                  [ M.read (| Value.String "not yet implemented" |) ]
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (M.alloc (|
                              M.never_to_any (|
                                M.call_closure (|
                                  M.get_function (| "core::panicking::panic", [] |),
                                  [ M.read (| Value.String "not yet implemented" |) ]
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (M.alloc (|
                              M.never_to_any (|
                                M.call_closure (|
                                  M.get_function (| "core::panicking::panic", [] |),
                                  [ M.read (| Value.String "not yet implemented" |) ]
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (M.alloc (|
                              M.never_to_any (|
                                M.call_closure (|
                                  M.get_function (| "core::panicking::panic", [] |),
                                  [ M.read (| Value.String "not yet implemented" |) ]
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (M.alloc (|
                              M.never_to_any (|
                                M.call_closure (|
                                  M.get_function (| "core::panicking::panic", [] |),
                                  [ M.read (| Value.String "not yet implemented" |) ]
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (M.alloc (|
                              M.never_to_any (|
                                M.call_closure (|
                                  M.get_function (| "core::panicking::panic", [] |),
                                  [ M.read (| Value.String "not yet implemented" |) ]
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (M.alloc (|
                              M.never_to_any (|
                                M.call_closure (|
                                  M.get_function (| "core::panicking::panic", [] |),
                                  [ M.read (| Value.String "not yet implemented" |) ]
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (M.alloc (|
                              M.never_to_any (|
                                M.call_closure (|
                                  M.get_function (| "core::panicking::panic", [] |),
                                  [ M.read (| Value.String "not yet implemented" |) ]
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (M.alloc (|
                              M.never_to_any (|
                                M.call_closure (|
                                  M.get_function (| "core::panicking::panic", [] |),
                                  [ M.read (| Value.String "not yet implemented" |) ]
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (M.alloc (|
                              M.never_to_any (|
                                M.call_closure (|
                                  M.get_function (| "core::panicking::panic", [] |),
                                  [ M.read (| Value.String "not yet implemented" |) ]
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (M.alloc (|
                              M.never_to_any (|
                                M.call_closure (|
                                  M.get_function (| "core::panicking::panic", [] |),
                                  [ M.read (| Value.String "not yet implemented" |) ]
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (M.alloc (|
                              M.never_to_any (|
                                M.call_closure (|
                                  M.get_function (| "core::panicking::panic", [] |),
                                  [ M.read (| Value.String "not yet implemented" |) ]
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (M.alloc (|
                              M.never_to_any (|
                                M.call_closure (|
                                  M.get_function (| "core::panicking::panic", [] |),
                                  [ M.read (| Value.String "not yet implemented" |) ]
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (M.alloc (|
                              Value.StructRecord
                                "specs::itable::Opcode::Conversion"
                                [
                                  ("class",
                                    Value.StructTuple "specs::itable::ConversionOp::I32WrapI64" [])
                                ]
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (M.alloc (|
                              M.never_to_any (|
                                M.call_closure (|
                                  M.get_function (| "core::panicking::panic", [] |),
                                  [ M.read (| Value.String "not yet implemented" |) ]
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (M.alloc (|
                              M.never_to_any (|
                                M.call_closure (|
                                  M.get_function (| "core::panicking::panic", [] |),
                                  [ M.read (| Value.String "not yet implemented" |) ]
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (M.alloc (|
                              M.never_to_any (|
                                M.call_closure (|
                                  M.get_function (| "core::panicking::panic", [] |),
                                  [ M.read (| Value.String "not yet implemented" |) ]
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (M.alloc (|
                              M.never_to_any (|
                                M.call_closure (|
                                  M.get_function (| "core::panicking::panic", [] |),
                                  [ M.read (| Value.String "not yet implemented" |) ]
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (M.alloc (|
                              Value.StructRecord
                                "specs::itable::Opcode::Conversion"
                                [
                                  ("class",
                                    Value.StructTuple
                                      "specs::itable::ConversionOp::I64ExtendI32s"
                                      [])
                                ]
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (M.alloc (|
                              Value.StructRecord
                                "specs::itable::Opcode::Conversion"
                                [
                                  ("class",
                                    Value.StructTuple
                                      "specs::itable::ConversionOp::I64ExtendI32u"
                                      [])
                                ]
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (M.alloc (|
                              M.never_to_any (|
                                M.call_closure (|
                                  M.get_function (| "core::panicking::panic", [] |),
                                  [ M.read (| Value.String "not yet implemented" |) ]
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (M.alloc (|
                              M.never_to_any (|
                                M.call_closure (|
                                  M.get_function (| "core::panicking::panic", [] |),
                                  [ M.read (| Value.String "not yet implemented" |) ]
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (M.alloc (|
                              M.never_to_any (|
                                M.call_closure (|
                                  M.get_function (| "core::panicking::panic", [] |),
                                  [ M.read (| Value.String "not yet implemented" |) ]
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (M.alloc (|
                              M.never_to_any (|
                                M.call_closure (|
                                  M.get_function (| "core::panicking::panic", [] |),
                                  [ M.read (| Value.String "not yet implemented" |) ]
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (M.alloc (|
                              M.never_to_any (|
                                M.call_closure (|
                                  M.get_function (| "core::panicking::panic", [] |),
                                  [ M.read (| Value.String "not yet implemented" |) ]
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (M.alloc (|
                              M.never_to_any (|
                                M.call_closure (|
                                  M.get_function (| "core::panicking::panic", [] |),
                                  [ M.read (| Value.String "not yet implemented" |) ]
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (M.alloc (|
                              M.never_to_any (|
                                M.call_closure (|
                                  M.get_function (| "core::panicking::panic", [] |),
                                  [ M.read (| Value.String "not yet implemented" |) ]
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (M.alloc (|
                              M.never_to_any (|
                                M.call_closure (|
                                  M.get_function (| "core::panicking::panic", [] |),
                                  [ M.read (| Value.String "not yet implemented" |) ]
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (M.alloc (|
                              M.never_to_any (|
                                M.call_closure (|
                                  M.get_function (| "core::panicking::panic", [] |),
                                  [ M.read (| Value.String "not yet implemented" |) ]
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (M.alloc (|
                              M.never_to_any (|
                                M.call_closure (|
                                  M.get_function (| "core::panicking::panic", [] |),
                                  [ M.read (| Value.String "not yet implemented" |) ]
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (M.alloc (|
                              M.never_to_any (|
                                M.call_closure (|
                                  M.get_function (| "core::panicking::panic", [] |),
                                  [ M.read (| Value.String "not yet implemented" |) ]
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (M.alloc (|
                              M.never_to_any (|
                                M.call_closure (|
                                  M.get_function (| "core::panicking::panic", [] |),
                                  [ M.read (| Value.String "not yet implemented" |) ]
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (M.alloc (|
                              M.never_to_any (|
                                M.call_closure (|
                                  M.get_function (| "core::panicking::panic", [] |),
                                  [ M.read (| Value.String "not yet implemented" |) ]
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (M.alloc (|
                              M.never_to_any (|
                                M.call_closure (|
                                  M.get_function (| "core::panicking::panic", [] |),
                                  [ M.read (| Value.String "not yet implemented" |) ]
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (M.alloc (|
                              M.never_to_any (|
                                M.call_closure (|
                                  M.get_function (| "core::panicking::panic", [] |),
                                  [ M.read (| Value.String "not yet implemented" |) ]
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (M.alloc (|
                              M.never_to_any (|
                                M.call_closure (|
                                  M.get_function (| "core::panicking::panic", [] |),
                                  [ M.read (| Value.String "not yet implemented" |) ]
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (M.alloc (|
                              M.never_to_any (|
                                M.call_closure (|
                                  M.get_function (| "core::panicking::panic", [] |),
                                  [ M.read (| Value.String "not yet implemented" |) ]
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (M.alloc (|
                              M.never_to_any (|
                                M.call_closure (|
                                  M.get_function (| "core::panicking::panic", [] |),
                                  [ M.read (| Value.String "not yet implemented" |) ]
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (M.alloc (|
                              Value.StructRecord
                                "specs::itable::Opcode::Conversion"
                                [
                                  ("class",
                                    Value.StructTuple "specs::itable::ConversionOp::I32Extend8S" [])
                                ]
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (M.alloc (|
                              Value.StructRecord
                                "specs::itable::Opcode::Conversion"
                                [
                                  ("class",
                                    Value.StructTuple
                                      "specs::itable::ConversionOp::I32Extend16S"
                                      [])
                                ]
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (M.alloc (|
                              Value.StructRecord
                                "specs::itable::Opcode::Conversion"
                                [
                                  ("class",
                                    Value.StructTuple "specs::itable::ConversionOp::I64Extend8S" [])
                                ]
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (M.alloc (|
                              Value.StructRecord
                                "specs::itable::Opcode::Conversion"
                                [
                                  ("class",
                                    Value.StructTuple
                                      "specs::itable::ConversionOp::I64Extend16S"
                                      [])
                                ]
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (M.alloc (|
                              Value.StructRecord
                                "specs::itable::Opcode::Conversion"
                                [
                                  ("class",
                                    Value.StructTuple
                                      "specs::itable::ConversionOp::I64Extend32S"
                                      [])
                                ]
                            |)))
                      ]
                    |)
                  |)))
              | _, _ => M.impossible
              end.
            
            Axiom Implements :
              M.IsTraitInstance
                "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::InstructionIntoOpcode"
                Self
                (* Trait polymorphic types *) []
                (* Instance *) [ ("into_opcode", InstanceField.Method into_opcode) ].
          End Impl_delphinus_zkwasm_runtime_monitor_plugins_table_instruction_InstructionIntoOpcode_for_wasmi_isa_Instruction.
          
          (*
          Enum RunInstructionTracePre
          {
            ty_params := [];
            variants :=
              [
                {
                  name := "BrIfEqz";
                  item := StructRecord [ ("value", Ty.path "i32") ];
                  discriminant := None;
                };
                {
                  name := "BrIfNez";
                  item := StructRecord [ ("value", Ty.path "i32") ];
                  discriminant := None;
                };
                {
                  name := "BrTable";
                  item := StructRecord [ ("index", Ty.path "i32") ];
                  discriminant := None;
                };
                {
                  name := "Call";
                  item := StructTuple [];
                  discriminant := None;
                };
                {
                  name := "CallIndirect";
                  item :=
                    StructRecord
                      [
                        ("table_idx", Ty.path "u32");
                        ("type_idx", Ty.path "u32");
                        ("offset", Ty.path "u32")
                      ];
                  discriminant := None;
                };
                {
                  name := "SetLocal";
                  item :=
                    StructRecord
                      [
                        ("depth", Ty.path "u32");
                        ("value", Ty.path "wasmi::runner::ValueInternal");
                        ("vtype", Ty.path "parity_wasm::elements::types::ValueType")
                      ];
                  discriminant := None;
                };
                {
                  name := "SetGlobal";
                  item := StructTuple [];
                  discriminant := None;
                };
                {
                  name := "Load";
                  item :=
                    StructRecord
                      [
                        ("offset", Ty.path "u32");
                        ("raw_address", Ty.path "u32");
                        ("effective_address",
                          Ty.apply (Ty.path "core::option::Option") [ Ty.path "u32" ]);
                        ("vtype", Ty.path "parity_wasm::elements::types::ValueType");
                        ("load_size", Ty.path "specs::mtable::MemoryReadSize")
                      ];
                  discriminant := None;
                };
                {
                  name := "Store";
                  item :=
                    StructRecord
                      [
                        ("offset", Ty.path "u32");
                        ("raw_address", Ty.path "u32");
                        ("effective_address",
                          Ty.apply (Ty.path "core::option::Option") [ Ty.path "u32" ]);
                        ("value", Ty.path "u64");
                        ("vtype", Ty.path "parity_wasm::elements::types::ValueType");
                        ("store_size", Ty.path "specs::mtable::MemoryStoreSize");
                        ("pre_block_value1",
                          Ty.apply (Ty.path "core::option::Option") [ Ty.path "u64" ]);
                        ("pre_block_value2",
                          Ty.apply (Ty.path "core::option::Option") [ Ty.path "u64" ])
                      ];
                  discriminant := None;
                };
                {
                  name := "GrowMemory";
                  item := StructTuple [ Ty.path "i32" ];
                  discriminant := None;
                };
                {
                  name := "I32BinOp";
                  item := StructRecord [ ("left", Ty.path "i32"); ("right", Ty.path "i32") ];
                  discriminant := None;
                };
                {
                  name := "I64BinOp";
                  item := StructRecord [ ("left", Ty.path "i64"); ("right", Ty.path "i64") ];
                  discriminant := None;
                };
                {
                  name := "I32Single";
                  item := StructTuple [ Ty.path "i32" ];
                  discriminant := None;
                };
                {
                  name := "I32Comp";
                  item := StructRecord [ ("left", Ty.path "i32"); ("right", Ty.path "i32") ];
                  discriminant := None;
                };
                {
                  name := "I64Single";
                  item := StructTuple [ Ty.path "i64" ];
                  discriminant := None;
                };
                {
                  name := "I64Comp";
                  item := StructRecord [ ("left", Ty.path "i64"); ("right", Ty.path "i64") ];
                  discriminant := None;
                };
                {
                  name := "I32WrapI64";
                  item := StructRecord [ ("value", Ty.path "i64") ];
                  discriminant := None;
                };
                {
                  name := "I64ExtendI32";
                  item := StructRecord [ ("value", Ty.path "i32"); ("sign", Ty.path "bool") ];
                  discriminant := None;
                };
                {
                  name := "I32SignExtendI8";
                  item := StructRecord [ ("value", Ty.path "i32") ];
                  discriminant := None;
                };
                {
                  name := "I32SignExtendI16";
                  item := StructRecord [ ("value", Ty.path "i32") ];
                  discriminant := None;
                };
                {
                  name := "I64SignExtendI8";
                  item := StructRecord [ ("value", Ty.path "i64") ];
                  discriminant := None;
                };
                {
                  name := "I64SignExtendI16";
                  item := StructRecord [ ("value", Ty.path "i64") ];
                  discriminant := None;
                };
                {
                  name := "I64SignExtendI32";
                  item := StructRecord [ ("value", Ty.path "i64") ];
                  discriminant := None;
                };
                {
                  name := "UnaryOp";
                  item :=
                    StructRecord
                      [ ("operand", Ty.path "u64"); ("vtype", Ty.path "specs::mtable::VarType") ];
                  discriminant := None;
                };
                {
                  name := "Drop";
                  item := StructTuple [];
                  discriminant := None;
                };
                {
                  name := "Select";
                  item :=
                    StructRecord
                      [ ("val1", Ty.path "u64"); ("val2", Ty.path "u64"); ("cond", Ty.path "u64") ];
                  discriminant := None;
                }
              ];
          }
          *)
          
          (*
          pub(super) fn run_instruction_pre(
              value_stack: &ValueStack,
              function_context: &FunctionContext,
              instructions: &isa::Instruction,
          ) -> Option<RunInstructionTracePre> {
              match *instructions {
                  isa::Instruction::GetLocal(..) => None,
                  isa::Instruction::SetLocal(depth, vtype) => {
                      let value = value_stack.top();
                      Some(RunInstructionTracePre::SetLocal {
                          depth,
                          value: value.clone(),
                          vtype,
                      })
                  }
                  isa::Instruction::TeeLocal(..) => None,
                  isa::Instruction::GetGlobal(..) => None,
                  isa::Instruction::SetGlobal(..) => Some(RunInstructionTracePre::SetGlobal),
          
                  isa::Instruction::Br(_) => None,
                  isa::Instruction::BrIfEqz(_) => Some(RunInstructionTracePre::BrIfEqz {
                      value: <_>::from_value_internal( *value_stack.top()),
                  }),
                  isa::Instruction::BrIfNez(_) => Some(RunInstructionTracePre::BrIfNez {
                      value: <_>::from_value_internal( *value_stack.top()),
                  }),
                  isa::Instruction::BrTable(_) => Some(RunInstructionTracePre::BrTable {
                      index: <_>::from_value_internal( *value_stack.top()),
                  }),
          
                  isa::Instruction::Unreachable => None,
                  isa::Instruction::Return(..) => None,
          
                  isa::Instruction::Call(..) => Some(RunInstructionTracePre::Call),
                  isa::Instruction::CallIndirect(type_idx) => {
                      let table_idx = DEFAULT_TABLE_INDEX;
                      let offset = <_>::from_value_internal( *value_stack.top());
          
                      Some(RunInstructionTracePre::CallIndirect {
                          table_idx,
                          type_idx,
                          offset,
                      })
                  }
          
                  isa::Instruction::Drop => Some(RunInstructionTracePre::Drop),
                  isa::Instruction::Select(vtype) => Some(RunInstructionTracePre::Select {
                      cond: from_value_internal_to_u64_with_typ(VarType::I32, *value_stack.pick(1)),
                      val2: from_value_internal_to_u64_with_typ(vtype.into(), *value_stack.pick(2)),
                      val1: from_value_internal_to_u64_with_typ(vtype.into(), *value_stack.pick(3)),
                  }),
          
                  isa::Instruction::I32Load(offset)
                  | isa::Instruction::I32Load8S(offset)
                  | isa::Instruction::I32Load8U(offset)
                  | isa::Instruction::I32Load16S(offset)
                  | isa::Instruction::I32Load16U(offset) => {
                      let load_size = match *instructions {
                          isa::Instruction::I32Load(..) => MemoryReadSize::U32,
                          isa::Instruction::I32Load8S(..) => MemoryReadSize::S8,
                          isa::Instruction::I32Load8U(..) => MemoryReadSize::U8,
                          isa::Instruction::I32Load16S(..) => MemoryReadSize::S16,
                          isa::Instruction::I32Load16U(..) => MemoryReadSize::U16,
                          _ => unreachable!(),
                      };
          
                      let raw_address = <_>::from_value_internal( *value_stack.top());
                      let address = effective_address(offset, raw_address).map_or(None, |addr| Some(addr));
          
                      Some(RunInstructionTracePre::Load {
                          offset,
                          raw_address,
                          effective_address: address,
                          vtype: parity_wasm::elements::ValueType::I32,
                          load_size,
                      })
                  }
                  isa::Instruction::I64Load(offset)
                  | isa::Instruction::I64Load8S(offset)
                  | isa::Instruction::I64Load8U(offset)
                  | isa::Instruction::I64Load16S(offset)
                  | isa::Instruction::I64Load16U(offset)
                  | isa::Instruction::I64Load32S(offset)
                  | isa::Instruction::I64Load32U(offset) => {
                      let load_size = match *instructions {
                          isa::Instruction::I64Load(..) => MemoryReadSize::I64,
                          isa::Instruction::I64Load8S(..) => MemoryReadSize::S8,
                          isa::Instruction::I64Load8U(..) => MemoryReadSize::U8,
                          isa::Instruction::I64Load16S(..) => MemoryReadSize::S16,
                          isa::Instruction::I64Load16U(..) => MemoryReadSize::U16,
                          isa::Instruction::I64Load32S(..) => MemoryReadSize::S32,
                          isa::Instruction::I64Load32U(..) => MemoryReadSize::U32,
                          _ => unreachable!(),
                      };
                      let raw_address = <_>::from_value_internal( *value_stack.top());
                      let address = effective_address(offset, raw_address).map_or(None, |addr| Some(addr));
          
                      Some(RunInstructionTracePre::Load {
                          offset,
                          raw_address,
                          effective_address: address,
                          vtype: parity_wasm::elements::ValueType::I64,
                          load_size,
                      })
                  }
                  isa::Instruction::I32Store(offset)
                  | isa::Instruction::I32Store8(offset)
                  | isa::Instruction::I32Store16(offset) => {
                      let store_size = match *instructions {
                          isa::Instruction::I32Store8(_) => MemoryStoreSize::Byte8,
                          isa::Instruction::I32Store16(_) => MemoryStoreSize::Byte16,
                          isa::Instruction::I32Store(_) => MemoryStoreSize::Byte32,
                          _ => unreachable!(),
                      };
          
                      let value: u32 = <_>::from_value_internal( *value_stack.pick(1));
                      let raw_address = <_>::from_value_internal( *value_stack.pick(2));
                      let address = effective_address(offset, raw_address).map_or(None, |addr| Some(addr));
          
                      let pre_block_value1 = address.map(|address| {
                          let mut buf = [0u8; 8];
                          function_context
                              .memory
                              .clone()
                              .unwrap()
                              .get_into(address / 8 * 8, &mut buf)
                              .unwrap();
                          u64::from_le_bytes(buf)
                      });
          
                      let pre_block_value2 = address
                          .map(|address| {
                              if store_size.byte_size() as u32 + address % 8 > 8 {
                                  let mut buf = [0u8; 8];
                                  function_context
                                      .memory
                                      .clone()
                                      .unwrap()
                                      .get_into((address / 8 + 1) * 8, &mut buf)
                                      .unwrap();
                                  Some(u64::from_le_bytes(buf))
                              } else {
                                  None
                              }
                          })
                          .flatten();
          
                      Some(RunInstructionTracePre::Store {
                          offset,
                          raw_address,
                          effective_address: address,
                          value: value as u64,
                          vtype: parity_wasm::elements::ValueType::I32,
                          store_size,
                          pre_block_value1,
                          pre_block_value2,
                      })
                  }
                  isa::Instruction::I64Store(offset)
                  | isa::Instruction::I64Store8(offset)
                  | isa::Instruction::I64Store16(offset)
                  | isa::Instruction::I64Store32(offset) => {
                      let store_size = match *instructions {
                          isa::Instruction::I64Store(..) => MemoryStoreSize::Byte64,
                          isa::Instruction::I64Store8(..) => MemoryStoreSize::Byte8,
                          isa::Instruction::I64Store16(..) => MemoryStoreSize::Byte16,
                          isa::Instruction::I64Store32(..) => MemoryStoreSize::Byte32,
                          _ => unreachable!(),
                      };
          
                      let value = <_>::from_value_internal( *value_stack.pick(1));
                      let raw_address = <_>::from_value_internal( *value_stack.pick(2));
                      let address = effective_address(offset, raw_address).map_or(None, |addr| Some(addr));
          
                      let pre_block_value1 = address.map(|address| {
                          let mut buf = [0u8; 8];
                          function_context
                              .memory
                              .clone()
                              .unwrap()
                              .get_into(address / 8 * 8, &mut buf)
                              .unwrap();
                          u64::from_le_bytes(buf)
                      });
          
                      let pre_block_value2 = address
                          .map(|address| {
                              if store_size.byte_size() as u32 + address % 8 > 8 {
                                  let mut buf = [0u8; 8];
                                  function_context
                                      .memory
                                      .clone()
                                      .unwrap()
                                      .get_into((address / 8 + 1) * 8, &mut buf)
                                      .unwrap();
                                  Some(u64::from_le_bytes(buf))
                              } else {
                                  None
                              }
                          })
                          .flatten();
          
                      Some(RunInstructionTracePre::Store {
                          offset,
                          raw_address,
                          effective_address: address,
                          value,
                          vtype: parity_wasm::elements::ValueType::I64,
                          store_size,
                          pre_block_value1,
                          pre_block_value2,
                      })
                  }
          
                  isa::Instruction::CurrentMemory => None,
                  isa::Instruction::GrowMemory => Some(RunInstructionTracePre::GrowMemory(
                      <_>::from_value_internal( *value_stack.pick(1)),
                  )),
          
                  isa::Instruction::I32Const(_) => None,
                  isa::Instruction::I64Const(_) => None,
          
                  isa::Instruction::I32Eqz => Some(RunInstructionTracePre::I32Single(
                      <_>::from_value_internal( *value_stack.pick(1)),
                  )),
                  isa::Instruction::I64Eqz => Some(RunInstructionTracePre::I64Single(
                      <_>::from_value_internal( *value_stack.pick(1)),
                  )),
          
                  isa::Instruction::I32Eq
                  | isa::Instruction::I32Ne
                  | isa::Instruction::I32GtS
                  | isa::Instruction::I32GtU
                  | isa::Instruction::I32GeS
                  | isa::Instruction::I32GeU
                  | isa::Instruction::I32LtU
                  | isa::Instruction::I32LeU
                  | isa::Instruction::I32LtS
                  | isa::Instruction::I32LeS => Some(RunInstructionTracePre::I32Comp {
                      left: <_>::from_value_internal( *value_stack.pick(2)),
                      right: <_>::from_value_internal( *value_stack.pick(1)),
                  }),
          
                  isa::Instruction::I64Eq
                  | isa::Instruction::I64Ne
                  | isa::Instruction::I64GtS
                  | isa::Instruction::I64GtU
                  | isa::Instruction::I64GeS
                  | isa::Instruction::I64GeU
                  | isa::Instruction::I64LtU
                  | isa::Instruction::I64LeU
                  | isa::Instruction::I64LtS
                  | isa::Instruction::I64LeS => Some(RunInstructionTracePre::I64Comp {
                      left: <_>::from_value_internal( *value_stack.pick(2)),
                      right: <_>::from_value_internal( *value_stack.pick(1)),
                  }),
          
                  isa::Instruction::I32Add
                  | isa::Instruction::I32Sub
                  | isa::Instruction::I32Mul
                  | isa::Instruction::I32DivS
                  | isa::Instruction::I32DivU
                  | isa::Instruction::I32RemS
                  | isa::Instruction::I32RemU
                  | isa::Instruction::I32Shl
                  | isa::Instruction::I32ShrU
                  | isa::Instruction::I32ShrS
                  | isa::Instruction::I32And
                  | isa::Instruction::I32Or
                  | isa::Instruction::I32Xor
                  | isa::Instruction::I32Rotl
                  | isa::Instruction::I32Rotr => Some(RunInstructionTracePre::I32BinOp {
                      left: <_>::from_value_internal( *value_stack.pick(2)),
                      right: <_>::from_value_internal( *value_stack.pick(1)),
                  }),
          
                  isa::Instruction::I64Add
                  | isa::Instruction::I64Sub
                  | isa::Instruction::I64Mul
                  | isa::Instruction::I64DivS
                  | isa::Instruction::I64DivU
                  | isa::Instruction::I64RemS
                  | isa::Instruction::I64RemU
                  | isa::Instruction::I64Shl
                  | isa::Instruction::I64ShrU
                  | isa::Instruction::I64ShrS
                  | isa::Instruction::I64And
                  | isa::Instruction::I64Or
                  | isa::Instruction::I64Xor
                  | isa::Instruction::I64Rotl
                  | isa::Instruction::I64Rotr => Some(RunInstructionTracePre::I64BinOp {
                      left: <_>::from_value_internal( *value_stack.pick(2)),
                      right: <_>::from_value_internal( *value_stack.pick(1)),
                  }),
          
                  isa::Instruction::I32Ctz | isa::Instruction::I32Clz | isa::Instruction::I32Popcnt => {
                      Some(RunInstructionTracePre::UnaryOp {
                          operand: from_value_internal_to_u64_with_typ(VarType::I32, *value_stack.pick(1)),
                          vtype: VarType::I32,
                      })
                  }
                  isa::Instruction::I64Ctz | isa::Instruction::I64Clz | isa::Instruction::I64Popcnt => {
                      Some(RunInstructionTracePre::UnaryOp {
                          operand: from_value_internal_to_u64_with_typ(VarType::I64, *value_stack.pick(1)),
                          vtype: VarType::I64,
                      })
                  }
          
                  isa::Instruction::I32WrapI64 => Some(RunInstructionTracePre::I32WrapI64 {
                      value: <_>::from_value_internal( *value_stack.pick(1)),
                  }),
                  isa::Instruction::I64ExtendUI32 => Some(RunInstructionTracePre::I64ExtendI32 {
                      value: <_>::from_value_internal( *value_stack.pick(1)),
                      sign: false,
                  }),
                  isa::Instruction::I64ExtendSI32 => Some(RunInstructionTracePre::I64ExtendI32 {
                      value: <_>::from_value_internal( *value_stack.pick(1)),
                      sign: true,
                  }),
                  isa::Instruction::I32Extend8S => Some(RunInstructionTracePre::I32SignExtendI8 {
                      value: <_>::from_value_internal( *value_stack.pick(1)),
                  }),
                  isa::Instruction::I32Extend16S => Some(RunInstructionTracePre::I32SignExtendI16 {
                      value: <_>::from_value_internal( *value_stack.pick(1)),
                  }),
                  isa::Instruction::I64Extend8S => Some(RunInstructionTracePre::I64SignExtendI8 {
                      value: <_>::from_value_internal( *value_stack.pick(1)),
                  }),
                  isa::Instruction::I64Extend16S => Some(RunInstructionTracePre::I64SignExtendI16 {
                      value: <_>::from_value_internal( *value_stack.pick(1)),
                  }),
                  isa::Instruction::I64Extend32S => Some(RunInstructionTracePre::I64SignExtendI32 {
                      value: <_>::from_value_internal( *value_stack.pick(1)),
                  }),
          
                  _ => {
                      println!("{:?}", *instructions);
                      unimplemented!()
                  }
              }
          }
          *)
          Definition run_instruction_pre (τ : list Ty.t) (α : list Value.t) : M :=
            match τ, α with
            | [], [ value_stack; function_context; instructions ] =>
              ltac:(M.monadic
                (let value_stack := M.alloc (| value_stack |) in
                let function_context := M.alloc (| function_context |) in
                let instructions := M.alloc (| instructions |) in
                M.read (|
                  M.match_operator (|
                    M.read (| instructions |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (M.alloc (| Value.StructTuple "core::option::Option::None" [] |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "wasmi::isa::Instruction::SetLocal",
                              0
                            |) in
                          let γ0_1 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "wasmi::isa::Instruction::SetLocal",
                              1
                            |) in
                          let depth := M.copy (| γ0_0 |) in
                          let vtype := M.copy (| γ0_1 |) in
                          let value :=
                            M.alloc (|
                              M.call_closure (|
                                M.get_associated_function (|
                                  Ty.path "wasmi::runner::ValueStack",
                                  "top",
                                  []
                                |),
                                [ M.read (| value_stack |) ]
                              |)
                            |) in
                          M.alloc (|
                            Value.StructTuple
                              "core::option::Option::Some"
                              [
                                Value.StructRecord
                                  "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::RunInstructionTracePre::SetLocal"
                                  [
                                    ("depth", M.read (| depth |));
                                    ("value",
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "core::clone::Clone",
                                          Ty.path "wasmi::runner::ValueInternal",
                                          [],
                                          "clone",
                                          []
                                        |),
                                        [ M.read (| value |) ]
                                      |));
                                    ("vtype", M.read (| vtype |))
                                  ]
                              ]
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (M.alloc (| Value.StructTuple "core::option::Option::None" [] |)));
                      fun γ =>
                        ltac:(M.monadic
                          (M.alloc (| Value.StructTuple "core::option::Option::None" [] |)));
                      fun γ =>
                        ltac:(M.monadic
                          (M.alloc (|
                            Value.StructTuple
                              "core::option::Option::Some"
                              [
                                Value.StructTuple
                                  "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::RunInstructionTracePre::SetGlobal"
                                  []
                              ]
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "wasmi::isa::Instruction::Br",
                              0
                            |) in
                          M.alloc (| Value.StructTuple "core::option::Option::None" [] |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "wasmi::isa::Instruction::BrIfEqz",
                              0
                            |) in
                          M.alloc (|
                            Value.StructTuple
                              "core::option::Option::Some"
                              [
                                Value.StructRecord
                                  "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::RunInstructionTracePre::BrIfEqz"
                                  [
                                    ("value",
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "wasmi::runner::FromValueInternal",
                                          Ty.path "i32",
                                          [],
                                          "from_value_internal",
                                          []
                                        |),
                                        [
                                          M.read (|
                                            M.call_closure (|
                                              M.get_associated_function (|
                                                Ty.path "wasmi::runner::ValueStack",
                                                "top",
                                                []
                                              |),
                                              [ M.read (| value_stack |) ]
                                            |)
                                          |)
                                        ]
                                      |))
                                  ]
                              ]
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "wasmi::isa::Instruction::BrIfNez",
                              0
                            |) in
                          M.alloc (|
                            Value.StructTuple
                              "core::option::Option::Some"
                              [
                                Value.StructRecord
                                  "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::RunInstructionTracePre::BrIfNez"
                                  [
                                    ("value",
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "wasmi::runner::FromValueInternal",
                                          Ty.path "i32",
                                          [],
                                          "from_value_internal",
                                          []
                                        |),
                                        [
                                          M.read (|
                                            M.call_closure (|
                                              M.get_associated_function (|
                                                Ty.path "wasmi::runner::ValueStack",
                                                "top",
                                                []
                                              |),
                                              [ M.read (| value_stack |) ]
                                            |)
                                          |)
                                        ]
                                      |))
                                  ]
                              ]
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "wasmi::isa::Instruction::BrTable",
                              0
                            |) in
                          M.alloc (|
                            Value.StructTuple
                              "core::option::Option::Some"
                              [
                                Value.StructRecord
                                  "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::RunInstructionTracePre::BrTable"
                                  [
                                    ("index",
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "wasmi::runner::FromValueInternal",
                                          Ty.path "i32",
                                          [],
                                          "from_value_internal",
                                          []
                                        |),
                                        [
                                          M.read (|
                                            M.call_closure (|
                                              M.get_associated_function (|
                                                Ty.path "wasmi::runner::ValueStack",
                                                "top",
                                                []
                                              |),
                                              [ M.read (| value_stack |) ]
                                            |)
                                          |)
                                        ]
                                      |))
                                  ]
                              ]
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (M.alloc (| Value.StructTuple "core::option::Option::None" [] |)));
                      fun γ =>
                        ltac:(M.monadic
                          (M.alloc (| Value.StructTuple "core::option::Option::None" [] |)));
                      fun γ =>
                        ltac:(M.monadic
                          (M.alloc (|
                            Value.StructTuple
                              "core::option::Option::Some"
                              [
                                Value.StructTuple
                                  "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::RunInstructionTracePre::Call"
                                  []
                              ]
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "wasmi::isa::Instruction::CallIndirect",
                              0
                            |) in
                          let type_idx := M.copy (| γ0_0 |) in
                          let table_idx :=
                            M.copy (|
                              M.get_constant (|
                                "delphinus_zkwasm::runtime::monitor::plugins::table::DEFAULT_TABLE_INDEX"
                              |)
                            |) in
                          let offset :=
                            M.alloc (|
                              M.call_closure (|
                                M.get_trait_method (|
                                  "wasmi::runner::FromValueInternal",
                                  Ty.path "u32",
                                  [],
                                  "from_value_internal",
                                  []
                                |),
                                [
                                  M.read (|
                                    M.call_closure (|
                                      M.get_associated_function (|
                                        Ty.path "wasmi::runner::ValueStack",
                                        "top",
                                        []
                                      |),
                                      [ M.read (| value_stack |) ]
                                    |)
                                  |)
                                ]
                              |)
                            |) in
                          M.alloc (|
                            Value.StructTuple
                              "core::option::Option::Some"
                              [
                                Value.StructRecord
                                  "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::RunInstructionTracePre::CallIndirect"
                                  [
                                    ("table_idx", M.read (| table_idx |));
                                    ("type_idx", M.read (| type_idx |));
                                    ("offset", M.read (| offset |))
                                  ]
                              ]
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (M.alloc (|
                            Value.StructTuple
                              "core::option::Option::Some"
                              [
                                Value.StructTuple
                                  "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::RunInstructionTracePre::Drop"
                                  []
                              ]
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "wasmi::isa::Instruction::Select",
                              0
                            |) in
                          let vtype := M.copy (| γ0_0 |) in
                          M.alloc (|
                            Value.StructTuple
                              "core::option::Option::Some"
                              [
                                Value.StructRecord
                                  "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::RunInstructionTracePre::Select"
                                  [
                                    ("cond",
                                      M.call_closure (|
                                        M.get_function (|
                                          "wasmi::runner::from_value_internal_to_u64_with_typ",
                                          []
                                        |),
                                        [
                                          Value.StructTuple "specs::mtable::VarType::I32" [];
                                          M.read (|
                                            M.call_closure (|
                                              M.get_associated_function (|
                                                Ty.path "wasmi::runner::ValueStack",
                                                "pick",
                                                []
                                              |),
                                              [ M.read (| value_stack |); Value.Integer 1 ]
                                            |)
                                          |)
                                        ]
                                      |));
                                    ("val2",
                                      M.call_closure (|
                                        M.get_function (|
                                          "wasmi::runner::from_value_internal_to_u64_with_typ",
                                          []
                                        |),
                                        [
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "core::convert::Into",
                                              Ty.path "parity_wasm::elements::types::ValueType",
                                              [ Ty.path "specs::mtable::VarType" ],
                                              "into",
                                              []
                                            |),
                                            [ M.read (| vtype |) ]
                                          |);
                                          M.read (|
                                            M.call_closure (|
                                              M.get_associated_function (|
                                                Ty.path "wasmi::runner::ValueStack",
                                                "pick",
                                                []
                                              |),
                                              [ M.read (| value_stack |); Value.Integer 2 ]
                                            |)
                                          |)
                                        ]
                                      |));
                                    ("val1",
                                      M.call_closure (|
                                        M.get_function (|
                                          "wasmi::runner::from_value_internal_to_u64_with_typ",
                                          []
                                        |),
                                        [
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "core::convert::Into",
                                              Ty.path "parity_wasm::elements::types::ValueType",
                                              [ Ty.path "specs::mtable::VarType" ],
                                              "into",
                                              []
                                            |),
                                            [ M.read (| vtype |) ]
                                          |);
                                          M.read (|
                                            M.call_closure (|
                                              M.get_associated_function (|
                                                Ty.path "wasmi::runner::ValueStack",
                                                "pick",
                                                []
                                              |),
                                              [ M.read (| value_stack |); Value.Integer 3 ]
                                            |)
                                          |)
                                        ]
                                      |))
                                  ]
                              ]
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (M.find_or_pattern (|
                            γ,
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ0_0 :=
                                    M.SubPointer.get_struct_tuple_field (|
                                      γ,
                                      "wasmi::isa::Instruction::I32Load",
                                      0
                                    |) in
                                  let offset := M.copy (| γ0_0 |) in
                                  Value.Tuple [ offset ]));
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ0_0 :=
                                    M.SubPointer.get_struct_tuple_field (|
                                      γ,
                                      "wasmi::isa::Instruction::I32Load8S",
                                      0
                                    |) in
                                  let offset := M.copy (| γ0_0 |) in
                                  Value.Tuple [ offset ]));
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ0_0 :=
                                    M.SubPointer.get_struct_tuple_field (|
                                      γ,
                                      "wasmi::isa::Instruction::I32Load8U",
                                      0
                                    |) in
                                  let offset := M.copy (| γ0_0 |) in
                                  Value.Tuple [ offset ]));
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ0_0 :=
                                    M.SubPointer.get_struct_tuple_field (|
                                      γ,
                                      "wasmi::isa::Instruction::I32Load16S",
                                      0
                                    |) in
                                  let offset := M.copy (| γ0_0 |) in
                                  Value.Tuple [ offset ]));
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ0_0 :=
                                    M.SubPointer.get_struct_tuple_field (|
                                      γ,
                                      "wasmi::isa::Instruction::I32Load16U",
                                      0
                                    |) in
                                  let offset := M.copy (| γ0_0 |) in
                                  Value.Tuple [ offset ]))
                            ],
                            M.closure
                              (fun γ =>
                                ltac:(M.monadic
                                  match γ with
                                  | [ offset ] =>
                                    let load_size :=
                                      M.copy (|
                                        M.match_operator (|
                                          M.read (| instructions |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (M.alloc (|
                                                  Value.StructTuple
                                                    "specs::mtable::MemoryReadSize::U32"
                                                    []
                                                |)));
                                            fun γ =>
                                              ltac:(M.monadic
                                                (M.alloc (|
                                                  Value.StructTuple
                                                    "specs::mtable::MemoryReadSize::S8"
                                                    []
                                                |)));
                                            fun γ =>
                                              ltac:(M.monadic
                                                (M.alloc (|
                                                  Value.StructTuple
                                                    "specs::mtable::MemoryReadSize::U8"
                                                    []
                                                |)));
                                            fun γ =>
                                              ltac:(M.monadic
                                                (M.alloc (|
                                                  Value.StructTuple
                                                    "specs::mtable::MemoryReadSize::S16"
                                                    []
                                                |)));
                                            fun γ =>
                                              ltac:(M.monadic
                                                (M.alloc (|
                                                  Value.StructTuple
                                                    "specs::mtable::MemoryReadSize::U16"
                                                    []
                                                |)));
                                            fun γ =>
                                              ltac:(M.monadic
                                                (M.alloc (|
                                                  M.never_to_any (|
                                                    M.call_closure (|
                                                      M.get_function (|
                                                        "core::panicking::panic",
                                                        []
                                                      |),
                                                      [
                                                        M.read (|
                                                          Value.String
                                                            "internal error: entered unreachable code"
                                                        |)
                                                      ]
                                                    |)
                                                  |)
                                                |)))
                                          ]
                                        |)
                                      |) in
                                    let raw_address :=
                                      M.alloc (|
                                        M.call_closure (|
                                          M.get_trait_method (|
                                            "wasmi::runner::FromValueInternal",
                                            Ty.path "u32",
                                            [],
                                            "from_value_internal",
                                            []
                                          |),
                                          [
                                            M.read (|
                                              M.call_closure (|
                                                M.get_associated_function (|
                                                  Ty.path "wasmi::runner::ValueStack",
                                                  "top",
                                                  []
                                                |),
                                                [ M.read (| value_stack |) ]
                                              |)
                                            |)
                                          ]
                                        |)
                                      |) in
                                    let address :=
                                      M.alloc (|
                                        M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.apply
                                              (Ty.path "core::result::Result")
                                              [ Ty.path "u32"; Ty.path "wasmi_core::trap::TrapCode"
                                              ],
                                            "map_or",
                                            [
                                              Ty.apply
                                                (Ty.path "core::option::Option")
                                                [ Ty.path "u32" ];
                                              Ty.function
                                                [ Ty.tuple [ Ty.path "u32" ] ]
                                                (Ty.apply
                                                  (Ty.path "core::option::Option")
                                                  [ Ty.path "u32" ])
                                            ]
                                          |),
                                          [
                                            M.call_closure (|
                                              M.get_function (|
                                                "wasmi::runner::effective_address",
                                                []
                                              |),
                                              [ M.read (| offset |); M.read (| raw_address |) ]
                                            |);
                                            Value.StructTuple "core::option::Option::None" [];
                                            M.closure
                                              (fun γ =>
                                                ltac:(M.monadic
                                                  match γ with
                                                  | [ α0 ] =>
                                                    M.match_operator (|
                                                      M.alloc (| α0 |),
                                                      [
                                                        fun γ =>
                                                          ltac:(M.monadic
                                                            (let addr := M.copy (| γ |) in
                                                            Value.StructTuple
                                                              "core::option::Option::Some"
                                                              [ M.read (| addr |) ]))
                                                      ]
                                                    |)
                                                  | _ => M.impossible (||)
                                                  end))
                                          ]
                                        |)
                                      |) in
                                    M.alloc (|
                                      Value.StructTuple
                                        "core::option::Option::Some"
                                        [
                                          Value.StructRecord
                                            "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::RunInstructionTracePre::Load"
                                            [
                                              ("offset", M.read (| offset |));
                                              ("raw_address", M.read (| raw_address |));
                                              ("effective_address", M.read (| address |));
                                              ("vtype",
                                                Value.StructTuple
                                                  "parity_wasm::elements::types::ValueType::I32"
                                                  []);
                                              ("load_size", M.read (| load_size |))
                                            ]
                                        ]
                                    |)
                                  | _ => M.impossible (||)
                                  end))
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (M.find_or_pattern (|
                            γ,
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ0_0 :=
                                    M.SubPointer.get_struct_tuple_field (|
                                      γ,
                                      "wasmi::isa::Instruction::I64Load",
                                      0
                                    |) in
                                  let offset := M.copy (| γ0_0 |) in
                                  Value.Tuple [ offset ]));
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ0_0 :=
                                    M.SubPointer.get_struct_tuple_field (|
                                      γ,
                                      "wasmi::isa::Instruction::I64Load8S",
                                      0
                                    |) in
                                  let offset := M.copy (| γ0_0 |) in
                                  Value.Tuple [ offset ]));
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ0_0 :=
                                    M.SubPointer.get_struct_tuple_field (|
                                      γ,
                                      "wasmi::isa::Instruction::I64Load8U",
                                      0
                                    |) in
                                  let offset := M.copy (| γ0_0 |) in
                                  Value.Tuple [ offset ]));
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ0_0 :=
                                    M.SubPointer.get_struct_tuple_field (|
                                      γ,
                                      "wasmi::isa::Instruction::I64Load16S",
                                      0
                                    |) in
                                  let offset := M.copy (| γ0_0 |) in
                                  Value.Tuple [ offset ]));
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ0_0 :=
                                    M.SubPointer.get_struct_tuple_field (|
                                      γ,
                                      "wasmi::isa::Instruction::I64Load16U",
                                      0
                                    |) in
                                  let offset := M.copy (| γ0_0 |) in
                                  Value.Tuple [ offset ]));
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ0_0 :=
                                    M.SubPointer.get_struct_tuple_field (|
                                      γ,
                                      "wasmi::isa::Instruction::I64Load32S",
                                      0
                                    |) in
                                  let offset := M.copy (| γ0_0 |) in
                                  Value.Tuple [ offset ]));
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ0_0 :=
                                    M.SubPointer.get_struct_tuple_field (|
                                      γ,
                                      "wasmi::isa::Instruction::I64Load32U",
                                      0
                                    |) in
                                  let offset := M.copy (| γ0_0 |) in
                                  Value.Tuple [ offset ]))
                            ],
                            M.closure
                              (fun γ =>
                                ltac:(M.monadic
                                  match γ with
                                  | [ offset ] =>
                                    let load_size :=
                                      M.copy (|
                                        M.match_operator (|
                                          M.read (| instructions |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (M.alloc (|
                                                  Value.StructTuple
                                                    "specs::mtable::MemoryReadSize::I64"
                                                    []
                                                |)));
                                            fun γ =>
                                              ltac:(M.monadic
                                                (M.alloc (|
                                                  Value.StructTuple
                                                    "specs::mtable::MemoryReadSize::S8"
                                                    []
                                                |)));
                                            fun γ =>
                                              ltac:(M.monadic
                                                (M.alloc (|
                                                  Value.StructTuple
                                                    "specs::mtable::MemoryReadSize::U8"
                                                    []
                                                |)));
                                            fun γ =>
                                              ltac:(M.monadic
                                                (M.alloc (|
                                                  Value.StructTuple
                                                    "specs::mtable::MemoryReadSize::S16"
                                                    []
                                                |)));
                                            fun γ =>
                                              ltac:(M.monadic
                                                (M.alloc (|
                                                  Value.StructTuple
                                                    "specs::mtable::MemoryReadSize::U16"
                                                    []
                                                |)));
                                            fun γ =>
                                              ltac:(M.monadic
                                                (M.alloc (|
                                                  Value.StructTuple
                                                    "specs::mtable::MemoryReadSize::S32"
                                                    []
                                                |)));
                                            fun γ =>
                                              ltac:(M.monadic
                                                (M.alloc (|
                                                  Value.StructTuple
                                                    "specs::mtable::MemoryReadSize::U32"
                                                    []
                                                |)));
                                            fun γ =>
                                              ltac:(M.monadic
                                                (M.alloc (|
                                                  M.never_to_any (|
                                                    M.call_closure (|
                                                      M.get_function (|
                                                        "core::panicking::panic",
                                                        []
                                                      |),
                                                      [
                                                        M.read (|
                                                          Value.String
                                                            "internal error: entered unreachable code"
                                                        |)
                                                      ]
                                                    |)
                                                  |)
                                                |)))
                                          ]
                                        |)
                                      |) in
                                    let raw_address :=
                                      M.alloc (|
                                        M.call_closure (|
                                          M.get_trait_method (|
                                            "wasmi::runner::FromValueInternal",
                                            Ty.path "u32",
                                            [],
                                            "from_value_internal",
                                            []
                                          |),
                                          [
                                            M.read (|
                                              M.call_closure (|
                                                M.get_associated_function (|
                                                  Ty.path "wasmi::runner::ValueStack",
                                                  "top",
                                                  []
                                                |),
                                                [ M.read (| value_stack |) ]
                                              |)
                                            |)
                                          ]
                                        |)
                                      |) in
                                    let address :=
                                      M.alloc (|
                                        M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.apply
                                              (Ty.path "core::result::Result")
                                              [ Ty.path "u32"; Ty.path "wasmi_core::trap::TrapCode"
                                              ],
                                            "map_or",
                                            [
                                              Ty.apply
                                                (Ty.path "core::option::Option")
                                                [ Ty.path "u32" ];
                                              Ty.function
                                                [ Ty.tuple [ Ty.path "u32" ] ]
                                                (Ty.apply
                                                  (Ty.path "core::option::Option")
                                                  [ Ty.path "u32" ])
                                            ]
                                          |),
                                          [
                                            M.call_closure (|
                                              M.get_function (|
                                                "wasmi::runner::effective_address",
                                                []
                                              |),
                                              [ M.read (| offset |); M.read (| raw_address |) ]
                                            |);
                                            Value.StructTuple "core::option::Option::None" [];
                                            M.closure
                                              (fun γ =>
                                                ltac:(M.monadic
                                                  match γ with
                                                  | [ α0 ] =>
                                                    M.match_operator (|
                                                      M.alloc (| α0 |),
                                                      [
                                                        fun γ =>
                                                          ltac:(M.monadic
                                                            (let addr := M.copy (| γ |) in
                                                            Value.StructTuple
                                                              "core::option::Option::Some"
                                                              [ M.read (| addr |) ]))
                                                      ]
                                                    |)
                                                  | _ => M.impossible (||)
                                                  end))
                                          ]
                                        |)
                                      |) in
                                    M.alloc (|
                                      Value.StructTuple
                                        "core::option::Option::Some"
                                        [
                                          Value.StructRecord
                                            "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::RunInstructionTracePre::Load"
                                            [
                                              ("offset", M.read (| offset |));
                                              ("raw_address", M.read (| raw_address |));
                                              ("effective_address", M.read (| address |));
                                              ("vtype",
                                                Value.StructTuple
                                                  "parity_wasm::elements::types::ValueType::I64"
                                                  []);
                                              ("load_size", M.read (| load_size |))
                                            ]
                                        ]
                                    |)
                                  | _ => M.impossible (||)
                                  end))
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (M.find_or_pattern (|
                            γ,
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ0_0 :=
                                    M.SubPointer.get_struct_tuple_field (|
                                      γ,
                                      "wasmi::isa::Instruction::I32Store",
                                      0
                                    |) in
                                  let offset := M.copy (| γ0_0 |) in
                                  Value.Tuple [ offset ]));
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ0_0 :=
                                    M.SubPointer.get_struct_tuple_field (|
                                      γ,
                                      "wasmi::isa::Instruction::I32Store8",
                                      0
                                    |) in
                                  let offset := M.copy (| γ0_0 |) in
                                  Value.Tuple [ offset ]));
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ0_0 :=
                                    M.SubPointer.get_struct_tuple_field (|
                                      γ,
                                      "wasmi::isa::Instruction::I32Store16",
                                      0
                                    |) in
                                  let offset := M.copy (| γ0_0 |) in
                                  Value.Tuple [ offset ]))
                            ],
                            M.closure
                              (fun γ =>
                                ltac:(M.monadic
                                  match γ with
                                  | [ offset ] =>
                                    let store_size :=
                                      M.copy (|
                                        M.match_operator (|
                                          M.read (| instructions |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let γ0_0 :=
                                                  M.SubPointer.get_struct_tuple_field (|
                                                    γ,
                                                    "wasmi::isa::Instruction::I32Store8",
                                                    0
                                                  |) in
                                                M.alloc (|
                                                  Value.StructTuple
                                                    "specs::mtable::MemoryStoreSize::Byte8"
                                                    []
                                                |)));
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let γ0_0 :=
                                                  M.SubPointer.get_struct_tuple_field (|
                                                    γ,
                                                    "wasmi::isa::Instruction::I32Store16",
                                                    0
                                                  |) in
                                                M.alloc (|
                                                  Value.StructTuple
                                                    "specs::mtable::MemoryStoreSize::Byte16"
                                                    []
                                                |)));
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let γ0_0 :=
                                                  M.SubPointer.get_struct_tuple_field (|
                                                    γ,
                                                    "wasmi::isa::Instruction::I32Store",
                                                    0
                                                  |) in
                                                M.alloc (|
                                                  Value.StructTuple
                                                    "specs::mtable::MemoryStoreSize::Byte32"
                                                    []
                                                |)));
                                            fun γ =>
                                              ltac:(M.monadic
                                                (M.alloc (|
                                                  M.never_to_any (|
                                                    M.call_closure (|
                                                      M.get_function (|
                                                        "core::panicking::panic",
                                                        []
                                                      |),
                                                      [
                                                        M.read (|
                                                          Value.String
                                                            "internal error: entered unreachable code"
                                                        |)
                                                      ]
                                                    |)
                                                  |)
                                                |)))
                                          ]
                                        |)
                                      |) in
                                    let value :=
                                      M.alloc (|
                                        M.call_closure (|
                                          M.get_trait_method (|
                                            "wasmi::runner::FromValueInternal",
                                            Ty.path "u32",
                                            [],
                                            "from_value_internal",
                                            []
                                          |),
                                          [
                                            M.read (|
                                              M.call_closure (|
                                                M.get_associated_function (|
                                                  Ty.path "wasmi::runner::ValueStack",
                                                  "pick",
                                                  []
                                                |),
                                                [ M.read (| value_stack |); Value.Integer 1 ]
                                              |)
                                            |)
                                          ]
                                        |)
                                      |) in
                                    let raw_address :=
                                      M.alloc (|
                                        M.call_closure (|
                                          M.get_trait_method (|
                                            "wasmi::runner::FromValueInternal",
                                            Ty.path "u32",
                                            [],
                                            "from_value_internal",
                                            []
                                          |),
                                          [
                                            M.read (|
                                              M.call_closure (|
                                                M.get_associated_function (|
                                                  Ty.path "wasmi::runner::ValueStack",
                                                  "pick",
                                                  []
                                                |),
                                                [ M.read (| value_stack |); Value.Integer 2 ]
                                              |)
                                            |)
                                          ]
                                        |)
                                      |) in
                                    let address :=
                                      M.alloc (|
                                        M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.apply
                                              (Ty.path "core::result::Result")
                                              [ Ty.path "u32"; Ty.path "wasmi_core::trap::TrapCode"
                                              ],
                                            "map_or",
                                            [
                                              Ty.apply
                                                (Ty.path "core::option::Option")
                                                [ Ty.path "u32" ];
                                              Ty.function
                                                [ Ty.tuple [ Ty.path "u32" ] ]
                                                (Ty.apply
                                                  (Ty.path "core::option::Option")
                                                  [ Ty.path "u32" ])
                                            ]
                                          |),
                                          [
                                            M.call_closure (|
                                              M.get_function (|
                                                "wasmi::runner::effective_address",
                                                []
                                              |),
                                              [ M.read (| offset |); M.read (| raw_address |) ]
                                            |);
                                            Value.StructTuple "core::option::Option::None" [];
                                            M.closure
                                              (fun γ =>
                                                ltac:(M.monadic
                                                  match γ with
                                                  | [ α0 ] =>
                                                    M.match_operator (|
                                                      M.alloc (| α0 |),
                                                      [
                                                        fun γ =>
                                                          ltac:(M.monadic
                                                            (let addr := M.copy (| γ |) in
                                                            Value.StructTuple
                                                              "core::option::Option::Some"
                                                              [ M.read (| addr |) ]))
                                                      ]
                                                    |)
                                                  | _ => M.impossible (||)
                                                  end))
                                          ]
                                        |)
                                      |) in
                                    let pre_block_value1 :=
                                      M.alloc (|
                                        M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.apply
                                              (Ty.path "core::option::Option")
                                              [ Ty.path "u32" ],
                                            "map",
                                            [
                                              Ty.path "u64";
                                              Ty.function
                                                [ Ty.tuple [ Ty.path "u32" ] ]
                                                (Ty.path "u64")
                                            ]
                                          |),
                                          [
                                            M.read (| address |);
                                            M.closure
                                              (fun γ =>
                                                ltac:(M.monadic
                                                  match γ with
                                                  | [ α0 ] =>
                                                    M.match_operator (|
                                                      M.alloc (| α0 |),
                                                      [
                                                        fun γ =>
                                                          ltac:(M.monadic
                                                            (let address := M.copy (| γ |) in
                                                            M.read (|
                                                              let buf :=
                                                                M.alloc (|
                                                                  repeat (Value.Integer 0) 8
                                                                |) in
                                                              let _ :=
                                                                M.alloc (|
                                                                  M.call_closure (|
                                                                    M.get_associated_function (|
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "core::result::Result")
                                                                        [
                                                                          Ty.tuple [];
                                                                          Ty.path "wasmi::Error"
                                                                        ],
                                                                      "unwrap",
                                                                      []
                                                                    |),
                                                                    [
                                                                      M.call_closure (|
                                                                        M.get_associated_function (|
                                                                          Ty.path
                                                                            "wasmi::memory::MemoryInstance",
                                                                          "get_into",
                                                                          []
                                                                        |),
                                                                        [
                                                                          M.call_closure (|
                                                                            M.get_trait_method (|
                                                                              "core::ops::deref::Deref",
                                                                              Ty.path
                                                                                "wasmi::memory::MemoryRef",
                                                                              [],
                                                                              "deref",
                                                                              []
                                                                            |),
                                                                            [
                                                                              M.alloc (|
                                                                                M.call_closure (|
                                                                                  M.get_associated_function (|
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "core::option::Option")
                                                                                      [
                                                                                        Ty.path
                                                                                          "wasmi::memory::MemoryRef"
                                                                                      ],
                                                                                    "unwrap",
                                                                                    []
                                                                                  |),
                                                                                  [
                                                                                    M.call_closure (|
                                                                                      M.get_trait_method (|
                                                                                        "core::clone::Clone",
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "core::option::Option")
                                                                                          [
                                                                                            Ty.path
                                                                                              "wasmi::memory::MemoryRef"
                                                                                          ],
                                                                                        [],
                                                                                        "clone",
                                                                                        []
                                                                                      |),
                                                                                      [
                                                                                        M.SubPointer.get_struct_record_field (|
                                                                                          M.read (|
                                                                                            function_context
                                                                                          |),
                                                                                          "wasmi::runner::FunctionContext",
                                                                                          "memory"
                                                                                        |)
                                                                                      ]
                                                                                    |)
                                                                                  ]
                                                                                |)
                                                                              |)
                                                                            ]
                                                                          |);
                                                                          BinOp.Panic.mul (|
                                                                            Integer.U32,
                                                                            BinOp.Panic.div (|
                                                                              Integer.U32,
                                                                              M.read (| address |),
                                                                              Value.Integer 8
                                                                            |),
                                                                            Value.Integer 8
                                                                          |);
                                                                          (* Unsize *)
                                                                          M.pointer_coercion buf
                                                                        ]
                                                                      |)
                                                                    ]
                                                                  |)
                                                                |) in
                                                              M.alloc (|
                                                                M.call_closure (|
                                                                  M.get_associated_function (|
                                                                    Ty.path "u64",
                                                                    "from_le_bytes",
                                                                    []
                                                                  |),
                                                                  [ M.read (| buf |) ]
                                                                |)
                                                              |)
                                                            |)))
                                                      ]
                                                    |)
                                                  | _ => M.impossible (||)
                                                  end))
                                          ]
                                        |)
                                      |) in
                                    let pre_block_value2 :=
                                      M.alloc (|
                                        M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.apply
                                              (Ty.path "core::option::Option")
                                              [
                                                Ty.apply
                                                  (Ty.path "core::option::Option")
                                                  [ Ty.path "u64" ]
                                              ],
                                            "flatten",
                                            []
                                          |),
                                          [
                                            M.call_closure (|
                                              M.get_associated_function (|
                                                Ty.apply
                                                  (Ty.path "core::option::Option")
                                                  [ Ty.path "u32" ],
                                                "map",
                                                [
                                                  Ty.apply
                                                    (Ty.path "core::option::Option")
                                                    [ Ty.path "u64" ];
                                                  Ty.function
                                                    [ Ty.tuple [ Ty.path "u32" ] ]
                                                    (Ty.apply
                                                      (Ty.path "core::option::Option")
                                                      [ Ty.path "u64" ])
                                                ]
                                              |),
                                              [
                                                M.read (| address |);
                                                M.closure
                                                  (fun γ =>
                                                    ltac:(M.monadic
                                                      match γ with
                                                      | [ α0 ] =>
                                                        M.match_operator (|
                                                          M.alloc (| α0 |),
                                                          [
                                                            fun γ =>
                                                              ltac:(M.monadic
                                                                (let address := M.copy (| γ |) in
                                                                M.read (|
                                                                  M.match_operator (|
                                                                    M.alloc (| Value.Tuple [] |),
                                                                    [
                                                                      fun γ =>
                                                                        ltac:(M.monadic
                                                                          (let γ :=
                                                                            M.use
                                                                              (M.alloc (|
                                                                                BinOp.Pure.gt
                                                                                  (BinOp.Panic.add (|
                                                                                    Integer.U32,
                                                                                    M.rust_cast
                                                                                      (M.call_closure (|
                                                                                        M.get_associated_function (|
                                                                                          Ty.path
                                                                                            "specs::mtable::MemoryStoreSize",
                                                                                          "byte_size",
                                                                                          []
                                                                                        |),
                                                                                        [ store_size
                                                                                        ]
                                                                                      |)),
                                                                                    BinOp.Panic.rem (|
                                                                                      Integer.U32,
                                                                                      M.read (|
                                                                                        address
                                                                                      |),
                                                                                      Value.Integer
                                                                                        8
                                                                                    |)
                                                                                  |))
                                                                                  (Value.Integer 8)
                                                                              |)) in
                                                                          let _ :=
                                                                            M.is_constant_or_break_match (|
                                                                              M.read (| γ |),
                                                                              Value.Bool true
                                                                            |) in
                                                                          let buf :=
                                                                            M.alloc (|
                                                                              repeat
                                                                                (Value.Integer 0)
                                                                                8
                                                                            |) in
                                                                          let _ :=
                                                                            M.alloc (|
                                                                              M.call_closure (|
                                                                                M.get_associated_function (|
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "core::result::Result")
                                                                                    [
                                                                                      Ty.tuple [];
                                                                                      Ty.path
                                                                                        "wasmi::Error"
                                                                                    ],
                                                                                  "unwrap",
                                                                                  []
                                                                                |),
                                                                                [
                                                                                  M.call_closure (|
                                                                                    M.get_associated_function (|
                                                                                      Ty.path
                                                                                        "wasmi::memory::MemoryInstance",
                                                                                      "get_into",
                                                                                      []
                                                                                    |),
                                                                                    [
                                                                                      M.call_closure (|
                                                                                        M.get_trait_method (|
                                                                                          "core::ops::deref::Deref",
                                                                                          Ty.path
                                                                                            "wasmi::memory::MemoryRef",
                                                                                          [],
                                                                                          "deref",
                                                                                          []
                                                                                        |),
                                                                                        [
                                                                                          M.alloc (|
                                                                                            M.call_closure (|
                                                                                              M.get_associated_function (|
                                                                                                Ty.apply
                                                                                                  (Ty.path
                                                                                                    "core::option::Option")
                                                                                                  [
                                                                                                    Ty.path
                                                                                                      "wasmi::memory::MemoryRef"
                                                                                                  ],
                                                                                                "unwrap",
                                                                                                []
                                                                                              |),
                                                                                              [
                                                                                                M.call_closure (|
                                                                                                  M.get_trait_method (|
                                                                                                    "core::clone::Clone",
                                                                                                    Ty.apply
                                                                                                      (Ty.path
                                                                                                        "core::option::Option")
                                                                                                      [
                                                                                                        Ty.path
                                                                                                          "wasmi::memory::MemoryRef"
                                                                                                      ],
                                                                                                    [],
                                                                                                    "clone",
                                                                                                    []
                                                                                                  |),
                                                                                                  [
                                                                                                    M.SubPointer.get_struct_record_field (|
                                                                                                      M.read (|
                                                                                                        function_context
                                                                                                      |),
                                                                                                      "wasmi::runner::FunctionContext",
                                                                                                      "memory"
                                                                                                    |)
                                                                                                  ]
                                                                                                |)
                                                                                              ]
                                                                                            |)
                                                                                          |)
                                                                                        ]
                                                                                      |);
                                                                                      BinOp.Panic.mul (|
                                                                                        Integer.U32,
                                                                                        BinOp.Panic.add (|
                                                                                          Integer.U32,
                                                                                          BinOp.Panic.div (|
                                                                                            Integer.U32,
                                                                                            M.read (|
                                                                                              address
                                                                                            |),
                                                                                            Value.Integer
                                                                                              8
                                                                                          |),
                                                                                          Value.Integer
                                                                                            1
                                                                                        |),
                                                                                        Value.Integer
                                                                                          8
                                                                                      |);
                                                                                      (* Unsize *)
                                                                                      M.pointer_coercion
                                                                                        buf
                                                                                    ]
                                                                                  |)
                                                                                ]
                                                                              |)
                                                                            |) in
                                                                          M.alloc (|
                                                                            Value.StructTuple
                                                                              "core::option::Option::Some"
                                                                              [
                                                                                M.call_closure (|
                                                                                  M.get_associated_function (|
                                                                                    Ty.path "u64",
                                                                                    "from_le_bytes",
                                                                                    []
                                                                                  |),
                                                                                  [ M.read (| buf |)
                                                                                  ]
                                                                                |)
                                                                              ]
                                                                          |)));
                                                                      fun γ =>
                                                                        ltac:(M.monadic
                                                                          (M.alloc (|
                                                                            Value.StructTuple
                                                                              "core::option::Option::None"
                                                                              []
                                                                          |)))
                                                                    ]
                                                                  |)
                                                                |)))
                                                          ]
                                                        |)
                                                      | _ => M.impossible (||)
                                                      end))
                                              ]
                                            |)
                                          ]
                                        |)
                                      |) in
                                    M.alloc (|
                                      Value.StructTuple
                                        "core::option::Option::Some"
                                        [
                                          Value.StructRecord
                                            "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::RunInstructionTracePre::Store"
                                            [
                                              ("offset", M.read (| offset |));
                                              ("raw_address", M.read (| raw_address |));
                                              ("effective_address", M.read (| address |));
                                              ("value", M.rust_cast (M.read (| value |)));
                                              ("vtype",
                                                Value.StructTuple
                                                  "parity_wasm::elements::types::ValueType::I32"
                                                  []);
                                              ("store_size", M.read (| store_size |));
                                              ("pre_block_value1", M.read (| pre_block_value1 |));
                                              ("pre_block_value2", M.read (| pre_block_value2 |))
                                            ]
                                        ]
                                    |)
                                  | _ => M.impossible (||)
                                  end))
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (M.find_or_pattern (|
                            γ,
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ0_0 :=
                                    M.SubPointer.get_struct_tuple_field (|
                                      γ,
                                      "wasmi::isa::Instruction::I64Store",
                                      0
                                    |) in
                                  let offset := M.copy (| γ0_0 |) in
                                  Value.Tuple [ offset ]));
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ0_0 :=
                                    M.SubPointer.get_struct_tuple_field (|
                                      γ,
                                      "wasmi::isa::Instruction::I64Store8",
                                      0
                                    |) in
                                  let offset := M.copy (| γ0_0 |) in
                                  Value.Tuple [ offset ]));
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ0_0 :=
                                    M.SubPointer.get_struct_tuple_field (|
                                      γ,
                                      "wasmi::isa::Instruction::I64Store16",
                                      0
                                    |) in
                                  let offset := M.copy (| γ0_0 |) in
                                  Value.Tuple [ offset ]));
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ0_0 :=
                                    M.SubPointer.get_struct_tuple_field (|
                                      γ,
                                      "wasmi::isa::Instruction::I64Store32",
                                      0
                                    |) in
                                  let offset := M.copy (| γ0_0 |) in
                                  Value.Tuple [ offset ]))
                            ],
                            M.closure
                              (fun γ =>
                                ltac:(M.monadic
                                  match γ with
                                  | [ offset ] =>
                                    let store_size :=
                                      M.copy (|
                                        M.match_operator (|
                                          M.read (| instructions |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (M.alloc (|
                                                  Value.StructTuple
                                                    "specs::mtable::MemoryStoreSize::Byte64"
                                                    []
                                                |)));
                                            fun γ =>
                                              ltac:(M.monadic
                                                (M.alloc (|
                                                  Value.StructTuple
                                                    "specs::mtable::MemoryStoreSize::Byte8"
                                                    []
                                                |)));
                                            fun γ =>
                                              ltac:(M.monadic
                                                (M.alloc (|
                                                  Value.StructTuple
                                                    "specs::mtable::MemoryStoreSize::Byte16"
                                                    []
                                                |)));
                                            fun γ =>
                                              ltac:(M.monadic
                                                (M.alloc (|
                                                  Value.StructTuple
                                                    "specs::mtable::MemoryStoreSize::Byte32"
                                                    []
                                                |)));
                                            fun γ =>
                                              ltac:(M.monadic
                                                (M.alloc (|
                                                  M.never_to_any (|
                                                    M.call_closure (|
                                                      M.get_function (|
                                                        "core::panicking::panic",
                                                        []
                                                      |),
                                                      [
                                                        M.read (|
                                                          Value.String
                                                            "internal error: entered unreachable code"
                                                        |)
                                                      ]
                                                    |)
                                                  |)
                                                |)))
                                          ]
                                        |)
                                      |) in
                                    let value :=
                                      M.alloc (|
                                        M.call_closure (|
                                          M.get_trait_method (|
                                            "wasmi::runner::FromValueInternal",
                                            Ty.path "u64",
                                            [],
                                            "from_value_internal",
                                            []
                                          |),
                                          [
                                            M.read (|
                                              M.call_closure (|
                                                M.get_associated_function (|
                                                  Ty.path "wasmi::runner::ValueStack",
                                                  "pick",
                                                  []
                                                |),
                                                [ M.read (| value_stack |); Value.Integer 1 ]
                                              |)
                                            |)
                                          ]
                                        |)
                                      |) in
                                    let raw_address :=
                                      M.alloc (|
                                        M.call_closure (|
                                          M.get_trait_method (|
                                            "wasmi::runner::FromValueInternal",
                                            Ty.path "u32",
                                            [],
                                            "from_value_internal",
                                            []
                                          |),
                                          [
                                            M.read (|
                                              M.call_closure (|
                                                M.get_associated_function (|
                                                  Ty.path "wasmi::runner::ValueStack",
                                                  "pick",
                                                  []
                                                |),
                                                [ M.read (| value_stack |); Value.Integer 2 ]
                                              |)
                                            |)
                                          ]
                                        |)
                                      |) in
                                    let address :=
                                      M.alloc (|
                                        M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.apply
                                              (Ty.path "core::result::Result")
                                              [ Ty.path "u32"; Ty.path "wasmi_core::trap::TrapCode"
                                              ],
                                            "map_or",
                                            [
                                              Ty.apply
                                                (Ty.path "core::option::Option")
                                                [ Ty.path "u32" ];
                                              Ty.function
                                                [ Ty.tuple [ Ty.path "u32" ] ]
                                                (Ty.apply
                                                  (Ty.path "core::option::Option")
                                                  [ Ty.path "u32" ])
                                            ]
                                          |),
                                          [
                                            M.call_closure (|
                                              M.get_function (|
                                                "wasmi::runner::effective_address",
                                                []
                                              |),
                                              [ M.read (| offset |); M.read (| raw_address |) ]
                                            |);
                                            Value.StructTuple "core::option::Option::None" [];
                                            M.closure
                                              (fun γ =>
                                                ltac:(M.monadic
                                                  match γ with
                                                  | [ α0 ] =>
                                                    M.match_operator (|
                                                      M.alloc (| α0 |),
                                                      [
                                                        fun γ =>
                                                          ltac:(M.monadic
                                                            (let addr := M.copy (| γ |) in
                                                            Value.StructTuple
                                                              "core::option::Option::Some"
                                                              [ M.read (| addr |) ]))
                                                      ]
                                                    |)
                                                  | _ => M.impossible (||)
                                                  end))
                                          ]
                                        |)
                                      |) in
                                    let pre_block_value1 :=
                                      M.alloc (|
                                        M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.apply
                                              (Ty.path "core::option::Option")
                                              [ Ty.path "u32" ],
                                            "map",
                                            [
                                              Ty.path "u64";
                                              Ty.function
                                                [ Ty.tuple [ Ty.path "u32" ] ]
                                                (Ty.path "u64")
                                            ]
                                          |),
                                          [
                                            M.read (| address |);
                                            M.closure
                                              (fun γ =>
                                                ltac:(M.monadic
                                                  match γ with
                                                  | [ α0 ] =>
                                                    M.match_operator (|
                                                      M.alloc (| α0 |),
                                                      [
                                                        fun γ =>
                                                          ltac:(M.monadic
                                                            (let address := M.copy (| γ |) in
                                                            M.read (|
                                                              let buf :=
                                                                M.alloc (|
                                                                  repeat (Value.Integer 0) 8
                                                                |) in
                                                              let _ :=
                                                                M.alloc (|
                                                                  M.call_closure (|
                                                                    M.get_associated_function (|
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "core::result::Result")
                                                                        [
                                                                          Ty.tuple [];
                                                                          Ty.path "wasmi::Error"
                                                                        ],
                                                                      "unwrap",
                                                                      []
                                                                    |),
                                                                    [
                                                                      M.call_closure (|
                                                                        M.get_associated_function (|
                                                                          Ty.path
                                                                            "wasmi::memory::MemoryInstance",
                                                                          "get_into",
                                                                          []
                                                                        |),
                                                                        [
                                                                          M.call_closure (|
                                                                            M.get_trait_method (|
                                                                              "core::ops::deref::Deref",
                                                                              Ty.path
                                                                                "wasmi::memory::MemoryRef",
                                                                              [],
                                                                              "deref",
                                                                              []
                                                                            |),
                                                                            [
                                                                              M.alloc (|
                                                                                M.call_closure (|
                                                                                  M.get_associated_function (|
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "core::option::Option")
                                                                                      [
                                                                                        Ty.path
                                                                                          "wasmi::memory::MemoryRef"
                                                                                      ],
                                                                                    "unwrap",
                                                                                    []
                                                                                  |),
                                                                                  [
                                                                                    M.call_closure (|
                                                                                      M.get_trait_method (|
                                                                                        "core::clone::Clone",
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "core::option::Option")
                                                                                          [
                                                                                            Ty.path
                                                                                              "wasmi::memory::MemoryRef"
                                                                                          ],
                                                                                        [],
                                                                                        "clone",
                                                                                        []
                                                                                      |),
                                                                                      [
                                                                                        M.SubPointer.get_struct_record_field (|
                                                                                          M.read (|
                                                                                            function_context
                                                                                          |),
                                                                                          "wasmi::runner::FunctionContext",
                                                                                          "memory"
                                                                                        |)
                                                                                      ]
                                                                                    |)
                                                                                  ]
                                                                                |)
                                                                              |)
                                                                            ]
                                                                          |);
                                                                          BinOp.Panic.mul (|
                                                                            Integer.U32,
                                                                            BinOp.Panic.div (|
                                                                              Integer.U32,
                                                                              M.read (| address |),
                                                                              Value.Integer 8
                                                                            |),
                                                                            Value.Integer 8
                                                                          |);
                                                                          (* Unsize *)
                                                                          M.pointer_coercion buf
                                                                        ]
                                                                      |)
                                                                    ]
                                                                  |)
                                                                |) in
                                                              M.alloc (|
                                                                M.call_closure (|
                                                                  M.get_associated_function (|
                                                                    Ty.path "u64",
                                                                    "from_le_bytes",
                                                                    []
                                                                  |),
                                                                  [ M.read (| buf |) ]
                                                                |)
                                                              |)
                                                            |)))
                                                      ]
                                                    |)
                                                  | _ => M.impossible (||)
                                                  end))
                                          ]
                                        |)
                                      |) in
                                    let pre_block_value2 :=
                                      M.alloc (|
                                        M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.apply
                                              (Ty.path "core::option::Option")
                                              [
                                                Ty.apply
                                                  (Ty.path "core::option::Option")
                                                  [ Ty.path "u64" ]
                                              ],
                                            "flatten",
                                            []
                                          |),
                                          [
                                            M.call_closure (|
                                              M.get_associated_function (|
                                                Ty.apply
                                                  (Ty.path "core::option::Option")
                                                  [ Ty.path "u32" ],
                                                "map",
                                                [
                                                  Ty.apply
                                                    (Ty.path "core::option::Option")
                                                    [ Ty.path "u64" ];
                                                  Ty.function
                                                    [ Ty.tuple [ Ty.path "u32" ] ]
                                                    (Ty.apply
                                                      (Ty.path "core::option::Option")
                                                      [ Ty.path "u64" ])
                                                ]
                                              |),
                                              [
                                                M.read (| address |);
                                                M.closure
                                                  (fun γ =>
                                                    ltac:(M.monadic
                                                      match γ with
                                                      | [ α0 ] =>
                                                        M.match_operator (|
                                                          M.alloc (| α0 |),
                                                          [
                                                            fun γ =>
                                                              ltac:(M.monadic
                                                                (let address := M.copy (| γ |) in
                                                                M.read (|
                                                                  M.match_operator (|
                                                                    M.alloc (| Value.Tuple [] |),
                                                                    [
                                                                      fun γ =>
                                                                        ltac:(M.monadic
                                                                          (let γ :=
                                                                            M.use
                                                                              (M.alloc (|
                                                                                BinOp.Pure.gt
                                                                                  (BinOp.Panic.add (|
                                                                                    Integer.U32,
                                                                                    M.rust_cast
                                                                                      (M.call_closure (|
                                                                                        M.get_associated_function (|
                                                                                          Ty.path
                                                                                            "specs::mtable::MemoryStoreSize",
                                                                                          "byte_size",
                                                                                          []
                                                                                        |),
                                                                                        [ store_size
                                                                                        ]
                                                                                      |)),
                                                                                    BinOp.Panic.rem (|
                                                                                      Integer.U32,
                                                                                      M.read (|
                                                                                        address
                                                                                      |),
                                                                                      Value.Integer
                                                                                        8
                                                                                    |)
                                                                                  |))
                                                                                  (Value.Integer 8)
                                                                              |)) in
                                                                          let _ :=
                                                                            M.is_constant_or_break_match (|
                                                                              M.read (| γ |),
                                                                              Value.Bool true
                                                                            |) in
                                                                          let buf :=
                                                                            M.alloc (|
                                                                              repeat
                                                                                (Value.Integer 0)
                                                                                8
                                                                            |) in
                                                                          let _ :=
                                                                            M.alloc (|
                                                                              M.call_closure (|
                                                                                M.get_associated_function (|
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "core::result::Result")
                                                                                    [
                                                                                      Ty.tuple [];
                                                                                      Ty.path
                                                                                        "wasmi::Error"
                                                                                    ],
                                                                                  "unwrap",
                                                                                  []
                                                                                |),
                                                                                [
                                                                                  M.call_closure (|
                                                                                    M.get_associated_function (|
                                                                                      Ty.path
                                                                                        "wasmi::memory::MemoryInstance",
                                                                                      "get_into",
                                                                                      []
                                                                                    |),
                                                                                    [
                                                                                      M.call_closure (|
                                                                                        M.get_trait_method (|
                                                                                          "core::ops::deref::Deref",
                                                                                          Ty.path
                                                                                            "wasmi::memory::MemoryRef",
                                                                                          [],
                                                                                          "deref",
                                                                                          []
                                                                                        |),
                                                                                        [
                                                                                          M.alloc (|
                                                                                            M.call_closure (|
                                                                                              M.get_associated_function (|
                                                                                                Ty.apply
                                                                                                  (Ty.path
                                                                                                    "core::option::Option")
                                                                                                  [
                                                                                                    Ty.path
                                                                                                      "wasmi::memory::MemoryRef"
                                                                                                  ],
                                                                                                "unwrap",
                                                                                                []
                                                                                              |),
                                                                                              [
                                                                                                M.call_closure (|
                                                                                                  M.get_trait_method (|
                                                                                                    "core::clone::Clone",
                                                                                                    Ty.apply
                                                                                                      (Ty.path
                                                                                                        "core::option::Option")
                                                                                                      [
                                                                                                        Ty.path
                                                                                                          "wasmi::memory::MemoryRef"
                                                                                                      ],
                                                                                                    [],
                                                                                                    "clone",
                                                                                                    []
                                                                                                  |),
                                                                                                  [
                                                                                                    M.SubPointer.get_struct_record_field (|
                                                                                                      M.read (|
                                                                                                        function_context
                                                                                                      |),
                                                                                                      "wasmi::runner::FunctionContext",
                                                                                                      "memory"
                                                                                                    |)
                                                                                                  ]
                                                                                                |)
                                                                                              ]
                                                                                            |)
                                                                                          |)
                                                                                        ]
                                                                                      |);
                                                                                      BinOp.Panic.mul (|
                                                                                        Integer.U32,
                                                                                        BinOp.Panic.add (|
                                                                                          Integer.U32,
                                                                                          BinOp.Panic.div (|
                                                                                            Integer.U32,
                                                                                            M.read (|
                                                                                              address
                                                                                            |),
                                                                                            Value.Integer
                                                                                              8
                                                                                          |),
                                                                                          Value.Integer
                                                                                            1
                                                                                        |),
                                                                                        Value.Integer
                                                                                          8
                                                                                      |);
                                                                                      (* Unsize *)
                                                                                      M.pointer_coercion
                                                                                        buf
                                                                                    ]
                                                                                  |)
                                                                                ]
                                                                              |)
                                                                            |) in
                                                                          M.alloc (|
                                                                            Value.StructTuple
                                                                              "core::option::Option::Some"
                                                                              [
                                                                                M.call_closure (|
                                                                                  M.get_associated_function (|
                                                                                    Ty.path "u64",
                                                                                    "from_le_bytes",
                                                                                    []
                                                                                  |),
                                                                                  [ M.read (| buf |)
                                                                                  ]
                                                                                |)
                                                                              ]
                                                                          |)));
                                                                      fun γ =>
                                                                        ltac:(M.monadic
                                                                          (M.alloc (|
                                                                            Value.StructTuple
                                                                              "core::option::Option::None"
                                                                              []
                                                                          |)))
                                                                    ]
                                                                  |)
                                                                |)))
                                                          ]
                                                        |)
                                                      | _ => M.impossible (||)
                                                      end))
                                              ]
                                            |)
                                          ]
                                        |)
                                      |) in
                                    M.alloc (|
                                      Value.StructTuple
                                        "core::option::Option::Some"
                                        [
                                          Value.StructRecord
                                            "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::RunInstructionTracePre::Store"
                                            [
                                              ("offset", M.read (| offset |));
                                              ("raw_address", M.read (| raw_address |));
                                              ("effective_address", M.read (| address |));
                                              ("value", M.read (| value |));
                                              ("vtype",
                                                Value.StructTuple
                                                  "parity_wasm::elements::types::ValueType::I64"
                                                  []);
                                              ("store_size", M.read (| store_size |));
                                              ("pre_block_value1", M.read (| pre_block_value1 |));
                                              ("pre_block_value2", M.read (| pre_block_value2 |))
                                            ]
                                        ]
                                    |)
                                  | _ => M.impossible (||)
                                  end))
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (M.alloc (| Value.StructTuple "core::option::Option::None" [] |)));
                      fun γ =>
                        ltac:(M.monadic
                          (M.alloc (|
                            Value.StructTuple
                              "core::option::Option::Some"
                              [
                                Value.StructTuple
                                  "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::RunInstructionTracePre::GrowMemory"
                                  [
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "wasmi::runner::FromValueInternal",
                                        Ty.path "i32",
                                        [],
                                        "from_value_internal",
                                        []
                                      |),
                                      [
                                        M.read (|
                                          M.call_closure (|
                                            M.get_associated_function (|
                                              Ty.path "wasmi::runner::ValueStack",
                                              "pick",
                                              []
                                            |),
                                            [ M.read (| value_stack |); Value.Integer 1 ]
                                          |)
                                        |)
                                      ]
                                    |)
                                  ]
                              ]
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "wasmi::isa::Instruction::I32Const",
                              0
                            |) in
                          M.alloc (| Value.StructTuple "core::option::Option::None" [] |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "wasmi::isa::Instruction::I64Const",
                              0
                            |) in
                          M.alloc (| Value.StructTuple "core::option::Option::None" [] |)));
                      fun γ =>
                        ltac:(M.monadic
                          (M.alloc (|
                            Value.StructTuple
                              "core::option::Option::Some"
                              [
                                Value.StructTuple
                                  "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::RunInstructionTracePre::I32Single"
                                  [
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "wasmi::runner::FromValueInternal",
                                        Ty.path "i32",
                                        [],
                                        "from_value_internal",
                                        []
                                      |),
                                      [
                                        M.read (|
                                          M.call_closure (|
                                            M.get_associated_function (|
                                              Ty.path "wasmi::runner::ValueStack",
                                              "pick",
                                              []
                                            |),
                                            [ M.read (| value_stack |); Value.Integer 1 ]
                                          |)
                                        |)
                                      ]
                                    |)
                                  ]
                              ]
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (M.alloc (|
                            Value.StructTuple
                              "core::option::Option::Some"
                              [
                                Value.StructTuple
                                  "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::RunInstructionTracePre::I64Single"
                                  [
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "wasmi::runner::FromValueInternal",
                                        Ty.path "i64",
                                        [],
                                        "from_value_internal",
                                        []
                                      |),
                                      [
                                        M.read (|
                                          M.call_closure (|
                                            M.get_associated_function (|
                                              Ty.path "wasmi::runner::ValueStack",
                                              "pick",
                                              []
                                            |),
                                            [ M.read (| value_stack |); Value.Integer 1 ]
                                          |)
                                        |)
                                      ]
                                    |)
                                  ]
                              ]
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (M.find_or_pattern (|
                            γ,
                            [
                              fun γ => ltac:(M.monadic (Value.Tuple []));
                              fun γ => ltac:(M.monadic (Value.Tuple []));
                              fun γ => ltac:(M.monadic (Value.Tuple []));
                              fun γ => ltac:(M.monadic (Value.Tuple []));
                              fun γ => ltac:(M.monadic (Value.Tuple []));
                              fun γ => ltac:(M.monadic (Value.Tuple []));
                              fun γ => ltac:(M.monadic (Value.Tuple []));
                              fun γ => ltac:(M.monadic (Value.Tuple []));
                              fun γ => ltac:(M.monadic (Value.Tuple []));
                              fun γ => ltac:(M.monadic (Value.Tuple []))
                            ],
                            M.closure
                              (fun γ =>
                                ltac:(M.monadic
                                  match γ with
                                  | [] =>
                                    M.alloc (|
                                      Value.StructTuple
                                        "core::option::Option::Some"
                                        [
                                          Value.StructRecord
                                            "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::RunInstructionTracePre::I32Comp"
                                            [
                                              ("left",
                                                M.call_closure (|
                                                  M.get_trait_method (|
                                                    "wasmi::runner::FromValueInternal",
                                                    Ty.path "i32",
                                                    [],
                                                    "from_value_internal",
                                                    []
                                                  |),
                                                  [
                                                    M.read (|
                                                      M.call_closure (|
                                                        M.get_associated_function (|
                                                          Ty.path "wasmi::runner::ValueStack",
                                                          "pick",
                                                          []
                                                        |),
                                                        [ M.read (| value_stack |); Value.Integer 2
                                                        ]
                                                      |)
                                                    |)
                                                  ]
                                                |));
                                              ("right",
                                                M.call_closure (|
                                                  M.get_trait_method (|
                                                    "wasmi::runner::FromValueInternal",
                                                    Ty.path "i32",
                                                    [],
                                                    "from_value_internal",
                                                    []
                                                  |),
                                                  [
                                                    M.read (|
                                                      M.call_closure (|
                                                        M.get_associated_function (|
                                                          Ty.path "wasmi::runner::ValueStack",
                                                          "pick",
                                                          []
                                                        |),
                                                        [ M.read (| value_stack |); Value.Integer 1
                                                        ]
                                                      |)
                                                    |)
                                                  ]
                                                |))
                                            ]
                                        ]
                                    |)
                                  | _ => M.impossible (||)
                                  end))
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (M.find_or_pattern (|
                            γ,
                            [
                              fun γ => ltac:(M.monadic (Value.Tuple []));
                              fun γ => ltac:(M.monadic (Value.Tuple []));
                              fun γ => ltac:(M.monadic (Value.Tuple []));
                              fun γ => ltac:(M.monadic (Value.Tuple []));
                              fun γ => ltac:(M.monadic (Value.Tuple []));
                              fun γ => ltac:(M.monadic (Value.Tuple []));
                              fun γ => ltac:(M.monadic (Value.Tuple []));
                              fun γ => ltac:(M.monadic (Value.Tuple []));
                              fun γ => ltac:(M.monadic (Value.Tuple []));
                              fun γ => ltac:(M.monadic (Value.Tuple []))
                            ],
                            M.closure
                              (fun γ =>
                                ltac:(M.monadic
                                  match γ with
                                  | [] =>
                                    M.alloc (|
                                      Value.StructTuple
                                        "core::option::Option::Some"
                                        [
                                          Value.StructRecord
                                            "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::RunInstructionTracePre::I64Comp"
                                            [
                                              ("left",
                                                M.call_closure (|
                                                  M.get_trait_method (|
                                                    "wasmi::runner::FromValueInternal",
                                                    Ty.path "i64",
                                                    [],
                                                    "from_value_internal",
                                                    []
                                                  |),
                                                  [
                                                    M.read (|
                                                      M.call_closure (|
                                                        M.get_associated_function (|
                                                          Ty.path "wasmi::runner::ValueStack",
                                                          "pick",
                                                          []
                                                        |),
                                                        [ M.read (| value_stack |); Value.Integer 2
                                                        ]
                                                      |)
                                                    |)
                                                  ]
                                                |));
                                              ("right",
                                                M.call_closure (|
                                                  M.get_trait_method (|
                                                    "wasmi::runner::FromValueInternal",
                                                    Ty.path "i64",
                                                    [],
                                                    "from_value_internal",
                                                    []
                                                  |),
                                                  [
                                                    M.read (|
                                                      M.call_closure (|
                                                        M.get_associated_function (|
                                                          Ty.path "wasmi::runner::ValueStack",
                                                          "pick",
                                                          []
                                                        |),
                                                        [ M.read (| value_stack |); Value.Integer 1
                                                        ]
                                                      |)
                                                    |)
                                                  ]
                                                |))
                                            ]
                                        ]
                                    |)
                                  | _ => M.impossible (||)
                                  end))
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (M.find_or_pattern (|
                            γ,
                            [
                              fun γ => ltac:(M.monadic (Value.Tuple []));
                              fun γ => ltac:(M.monadic (Value.Tuple []));
                              fun γ => ltac:(M.monadic (Value.Tuple []));
                              fun γ => ltac:(M.monadic (Value.Tuple []));
                              fun γ => ltac:(M.monadic (Value.Tuple []));
                              fun γ => ltac:(M.monadic (Value.Tuple []));
                              fun γ => ltac:(M.monadic (Value.Tuple []));
                              fun γ => ltac:(M.monadic (Value.Tuple []));
                              fun γ => ltac:(M.monadic (Value.Tuple []));
                              fun γ => ltac:(M.monadic (Value.Tuple []));
                              fun γ => ltac:(M.monadic (Value.Tuple []));
                              fun γ => ltac:(M.monadic (Value.Tuple []));
                              fun γ => ltac:(M.monadic (Value.Tuple []));
                              fun γ => ltac:(M.monadic (Value.Tuple []));
                              fun γ => ltac:(M.monadic (Value.Tuple []))
                            ],
                            M.closure
                              (fun γ =>
                                ltac:(M.monadic
                                  match γ with
                                  | [] =>
                                    M.alloc (|
                                      Value.StructTuple
                                        "core::option::Option::Some"
                                        [
                                          Value.StructRecord
                                            "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::RunInstructionTracePre::I32BinOp"
                                            [
                                              ("left",
                                                M.call_closure (|
                                                  M.get_trait_method (|
                                                    "wasmi::runner::FromValueInternal",
                                                    Ty.path "i32",
                                                    [],
                                                    "from_value_internal",
                                                    []
                                                  |),
                                                  [
                                                    M.read (|
                                                      M.call_closure (|
                                                        M.get_associated_function (|
                                                          Ty.path "wasmi::runner::ValueStack",
                                                          "pick",
                                                          []
                                                        |),
                                                        [ M.read (| value_stack |); Value.Integer 2
                                                        ]
                                                      |)
                                                    |)
                                                  ]
                                                |));
                                              ("right",
                                                M.call_closure (|
                                                  M.get_trait_method (|
                                                    "wasmi::runner::FromValueInternal",
                                                    Ty.path "i32",
                                                    [],
                                                    "from_value_internal",
                                                    []
                                                  |),
                                                  [
                                                    M.read (|
                                                      M.call_closure (|
                                                        M.get_associated_function (|
                                                          Ty.path "wasmi::runner::ValueStack",
                                                          "pick",
                                                          []
                                                        |),
                                                        [ M.read (| value_stack |); Value.Integer 1
                                                        ]
                                                      |)
                                                    |)
                                                  ]
                                                |))
                                            ]
                                        ]
                                    |)
                                  | _ => M.impossible (||)
                                  end))
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (M.find_or_pattern (|
                            γ,
                            [
                              fun γ => ltac:(M.monadic (Value.Tuple []));
                              fun γ => ltac:(M.monadic (Value.Tuple []));
                              fun γ => ltac:(M.monadic (Value.Tuple []));
                              fun γ => ltac:(M.monadic (Value.Tuple []));
                              fun γ => ltac:(M.monadic (Value.Tuple []));
                              fun γ => ltac:(M.monadic (Value.Tuple []));
                              fun γ => ltac:(M.monadic (Value.Tuple []));
                              fun γ => ltac:(M.monadic (Value.Tuple []));
                              fun γ => ltac:(M.monadic (Value.Tuple []));
                              fun γ => ltac:(M.monadic (Value.Tuple []));
                              fun γ => ltac:(M.monadic (Value.Tuple []));
                              fun γ => ltac:(M.monadic (Value.Tuple []));
                              fun γ => ltac:(M.monadic (Value.Tuple []));
                              fun γ => ltac:(M.monadic (Value.Tuple []));
                              fun γ => ltac:(M.monadic (Value.Tuple []))
                            ],
                            M.closure
                              (fun γ =>
                                ltac:(M.monadic
                                  match γ with
                                  | [] =>
                                    M.alloc (|
                                      Value.StructTuple
                                        "core::option::Option::Some"
                                        [
                                          Value.StructRecord
                                            "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::RunInstructionTracePre::I64BinOp"
                                            [
                                              ("left",
                                                M.call_closure (|
                                                  M.get_trait_method (|
                                                    "wasmi::runner::FromValueInternal",
                                                    Ty.path "i64",
                                                    [],
                                                    "from_value_internal",
                                                    []
                                                  |),
                                                  [
                                                    M.read (|
                                                      M.call_closure (|
                                                        M.get_associated_function (|
                                                          Ty.path "wasmi::runner::ValueStack",
                                                          "pick",
                                                          []
                                                        |),
                                                        [ M.read (| value_stack |); Value.Integer 2
                                                        ]
                                                      |)
                                                    |)
                                                  ]
                                                |));
                                              ("right",
                                                M.call_closure (|
                                                  M.get_trait_method (|
                                                    "wasmi::runner::FromValueInternal",
                                                    Ty.path "i64",
                                                    [],
                                                    "from_value_internal",
                                                    []
                                                  |),
                                                  [
                                                    M.read (|
                                                      M.call_closure (|
                                                        M.get_associated_function (|
                                                          Ty.path "wasmi::runner::ValueStack",
                                                          "pick",
                                                          []
                                                        |),
                                                        [ M.read (| value_stack |); Value.Integer 1
                                                        ]
                                                      |)
                                                    |)
                                                  ]
                                                |))
                                            ]
                                        ]
                                    |)
                                  | _ => M.impossible (||)
                                  end))
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (M.find_or_pattern (|
                            γ,
                            [
                              fun γ => ltac:(M.monadic (Value.Tuple []));
                              fun γ => ltac:(M.monadic (Value.Tuple []));
                              fun γ => ltac:(M.monadic (Value.Tuple []))
                            ],
                            M.closure
                              (fun γ =>
                                ltac:(M.monadic
                                  match γ with
                                  | [] =>
                                    M.alloc (|
                                      Value.StructTuple
                                        "core::option::Option::Some"
                                        [
                                          Value.StructRecord
                                            "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::RunInstructionTracePre::UnaryOp"
                                            [
                                              ("operand",
                                                M.call_closure (|
                                                  M.get_function (|
                                                    "wasmi::runner::from_value_internal_to_u64_with_typ",
                                                    []
                                                  |),
                                                  [
                                                    Value.StructTuple
                                                      "specs::mtable::VarType::I32"
                                                      [];
                                                    M.read (|
                                                      M.call_closure (|
                                                        M.get_associated_function (|
                                                          Ty.path "wasmi::runner::ValueStack",
                                                          "pick",
                                                          []
                                                        |),
                                                        [ M.read (| value_stack |); Value.Integer 1
                                                        ]
                                                      |)
                                                    |)
                                                  ]
                                                |));
                                              ("vtype",
                                                Value.StructTuple "specs::mtable::VarType::I32" [])
                                            ]
                                        ]
                                    |)
                                  | _ => M.impossible (||)
                                  end))
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (M.find_or_pattern (|
                            γ,
                            [
                              fun γ => ltac:(M.monadic (Value.Tuple []));
                              fun γ => ltac:(M.monadic (Value.Tuple []));
                              fun γ => ltac:(M.monadic (Value.Tuple []))
                            ],
                            M.closure
                              (fun γ =>
                                ltac:(M.monadic
                                  match γ with
                                  | [] =>
                                    M.alloc (|
                                      Value.StructTuple
                                        "core::option::Option::Some"
                                        [
                                          Value.StructRecord
                                            "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::RunInstructionTracePre::UnaryOp"
                                            [
                                              ("operand",
                                                M.call_closure (|
                                                  M.get_function (|
                                                    "wasmi::runner::from_value_internal_to_u64_with_typ",
                                                    []
                                                  |),
                                                  [
                                                    Value.StructTuple
                                                      "specs::mtable::VarType::I64"
                                                      [];
                                                    M.read (|
                                                      M.call_closure (|
                                                        M.get_associated_function (|
                                                          Ty.path "wasmi::runner::ValueStack",
                                                          "pick",
                                                          []
                                                        |),
                                                        [ M.read (| value_stack |); Value.Integer 1
                                                        ]
                                                      |)
                                                    |)
                                                  ]
                                                |));
                                              ("vtype",
                                                Value.StructTuple "specs::mtable::VarType::I64" [])
                                            ]
                                        ]
                                    |)
                                  | _ => M.impossible (||)
                                  end))
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (M.alloc (|
                            Value.StructTuple
                              "core::option::Option::Some"
                              [
                                Value.StructRecord
                                  "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::RunInstructionTracePre::I32WrapI64"
                                  [
                                    ("value",
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "wasmi::runner::FromValueInternal",
                                          Ty.path "i64",
                                          [],
                                          "from_value_internal",
                                          []
                                        |),
                                        [
                                          M.read (|
                                            M.call_closure (|
                                              M.get_associated_function (|
                                                Ty.path "wasmi::runner::ValueStack",
                                                "pick",
                                                []
                                              |),
                                              [ M.read (| value_stack |); Value.Integer 1 ]
                                            |)
                                          |)
                                        ]
                                      |))
                                  ]
                              ]
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (M.alloc (|
                            Value.StructTuple
                              "core::option::Option::Some"
                              [
                                Value.StructRecord
                                  "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::RunInstructionTracePre::I64ExtendI32"
                                  [
                                    ("value",
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "wasmi::runner::FromValueInternal",
                                          Ty.path "i32",
                                          [],
                                          "from_value_internal",
                                          []
                                        |),
                                        [
                                          M.read (|
                                            M.call_closure (|
                                              M.get_associated_function (|
                                                Ty.path "wasmi::runner::ValueStack",
                                                "pick",
                                                []
                                              |),
                                              [ M.read (| value_stack |); Value.Integer 1 ]
                                            |)
                                          |)
                                        ]
                                      |));
                                    ("sign", Value.Bool false)
                                  ]
                              ]
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (M.alloc (|
                            Value.StructTuple
                              "core::option::Option::Some"
                              [
                                Value.StructRecord
                                  "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::RunInstructionTracePre::I64ExtendI32"
                                  [
                                    ("value",
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "wasmi::runner::FromValueInternal",
                                          Ty.path "i32",
                                          [],
                                          "from_value_internal",
                                          []
                                        |),
                                        [
                                          M.read (|
                                            M.call_closure (|
                                              M.get_associated_function (|
                                                Ty.path "wasmi::runner::ValueStack",
                                                "pick",
                                                []
                                              |),
                                              [ M.read (| value_stack |); Value.Integer 1 ]
                                            |)
                                          |)
                                        ]
                                      |));
                                    ("sign", Value.Bool true)
                                  ]
                              ]
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (M.alloc (|
                            Value.StructTuple
                              "core::option::Option::Some"
                              [
                                Value.StructRecord
                                  "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::RunInstructionTracePre::I32SignExtendI8"
                                  [
                                    ("value",
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "wasmi::runner::FromValueInternal",
                                          Ty.path "i32",
                                          [],
                                          "from_value_internal",
                                          []
                                        |),
                                        [
                                          M.read (|
                                            M.call_closure (|
                                              M.get_associated_function (|
                                                Ty.path "wasmi::runner::ValueStack",
                                                "pick",
                                                []
                                              |),
                                              [ M.read (| value_stack |); Value.Integer 1 ]
                                            |)
                                          |)
                                        ]
                                      |))
                                  ]
                              ]
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (M.alloc (|
                            Value.StructTuple
                              "core::option::Option::Some"
                              [
                                Value.StructRecord
                                  "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::RunInstructionTracePre::I32SignExtendI16"
                                  [
                                    ("value",
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "wasmi::runner::FromValueInternal",
                                          Ty.path "i32",
                                          [],
                                          "from_value_internal",
                                          []
                                        |),
                                        [
                                          M.read (|
                                            M.call_closure (|
                                              M.get_associated_function (|
                                                Ty.path "wasmi::runner::ValueStack",
                                                "pick",
                                                []
                                              |),
                                              [ M.read (| value_stack |); Value.Integer 1 ]
                                            |)
                                          |)
                                        ]
                                      |))
                                  ]
                              ]
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (M.alloc (|
                            Value.StructTuple
                              "core::option::Option::Some"
                              [
                                Value.StructRecord
                                  "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::RunInstructionTracePre::I64SignExtendI8"
                                  [
                                    ("value",
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "wasmi::runner::FromValueInternal",
                                          Ty.path "i64",
                                          [],
                                          "from_value_internal",
                                          []
                                        |),
                                        [
                                          M.read (|
                                            M.call_closure (|
                                              M.get_associated_function (|
                                                Ty.path "wasmi::runner::ValueStack",
                                                "pick",
                                                []
                                              |),
                                              [ M.read (| value_stack |); Value.Integer 1 ]
                                            |)
                                          |)
                                        ]
                                      |))
                                  ]
                              ]
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (M.alloc (|
                            Value.StructTuple
                              "core::option::Option::Some"
                              [
                                Value.StructRecord
                                  "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::RunInstructionTracePre::I64SignExtendI16"
                                  [
                                    ("value",
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "wasmi::runner::FromValueInternal",
                                          Ty.path "i64",
                                          [],
                                          "from_value_internal",
                                          []
                                        |),
                                        [
                                          M.read (|
                                            M.call_closure (|
                                              M.get_associated_function (|
                                                Ty.path "wasmi::runner::ValueStack",
                                                "pick",
                                                []
                                              |),
                                              [ M.read (| value_stack |); Value.Integer 1 ]
                                            |)
                                          |)
                                        ]
                                      |))
                                  ]
                              ]
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (M.alloc (|
                            Value.StructTuple
                              "core::option::Option::Some"
                              [
                                Value.StructRecord
                                  "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::RunInstructionTracePre::I64SignExtendI32"
                                  [
                                    ("value",
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "wasmi::runner::FromValueInternal",
                                          Ty.path "i64",
                                          [],
                                          "from_value_internal",
                                          []
                                        |),
                                        [
                                          M.read (|
                                            M.call_closure (|
                                              M.get_associated_function (|
                                                Ty.path "wasmi::runner::ValueStack",
                                                "pick",
                                                []
                                              |),
                                              [ M.read (| value_stack |); Value.Integer 1 ]
                                            |)
                                          |)
                                        ]
                                      |))
                                  ]
                              ]
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let _ :=
                            let _ :=
                              M.alloc (|
                                M.call_closure (|
                                  M.get_function (| "std::io::stdio::_print", [] |),
                                  [
                                    M.call_closure (|
                                      M.get_associated_function (|
                                        Ty.path "core::fmt::Arguments",
                                        "new_v1",
                                        []
                                      |),
                                      [
                                        (* Unsize *)
                                        M.pointer_coercion
                                          (M.alloc (|
                                            Value.Array
                                              [
                                                M.read (| Value.String "" |);
                                                M.read (| Value.String "
" |)
                                              ]
                                          |));
                                        (* Unsize *)
                                        M.pointer_coercion
                                          (M.alloc (|
                                            Value.Array
                                              [
                                                M.call_closure (|
                                                  M.get_associated_function (|
                                                    Ty.path "core::fmt::rt::Argument",
                                                    "new_debug",
                                                    [ Ty.path "wasmi::isa::Instruction" ]
                                                  |),
                                                  [ M.read (| instructions |) ]
                                                |)
                                              ]
                                          |))
                                      ]
                                    |)
                                  ]
                                |)
                              |) in
                            M.alloc (| Value.Tuple [] |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.call_closure (|
                                M.get_function (| "core::panicking::panic", [] |),
                                [ M.read (| Value.String "not implemented" |) ]
                              |)
                            |)
                          |)))
                    ]
                  |)
                |)))
            | _, _ => M.impossible
            end.
          
          Module Impl_delphinus_zkwasm_runtime_monitor_plugins_table_TablePlugin.
            Definition Self : Ty.t :=
              Ty.path "delphinus_zkwasm::runtime::monitor::plugins::table::TablePlugin".
            
            (*
                pub(super) fn run_instruction_post(
                    &self,
                    module_ref: &ModuleRef,
                    current_event: Option<RunInstructionTracePre>,
                    value_stack: &ValueStack,
                    context: &FunctionContext,
                    instructions: &isa::Instruction,
                ) -> StepInfo {
                    match *instructions {
                        isa::Instruction::GetLocal(depth, vtype) => StepInfo::GetLocal {
                            depth,
                            value: from_value_internal_to_u64_with_typ(vtype.into(), *value_stack.top()),
                            vtype: vtype.into(),
                        },
                        isa::Instruction::SetLocal(..) => {
                            if let RunInstructionTracePre::SetLocal {
                                depth,
                                value,
                                vtype,
                            } = current_event.unwrap()
                            {
                                StepInfo::SetLocal {
                                    depth,
                                    value: from_value_internal_to_u64_with_typ(vtype.into(), value),
                                    vtype: vtype.into(),
                                }
                            } else {
                                unreachable!()
                            }
                        }
                        isa::Instruction::TeeLocal(depth, vtype) => StepInfo::TeeLocal {
                            depth,
                            value: from_value_internal_to_u64_with_typ(vtype.into(), *value_stack.top()),
                            vtype: vtype.into(),
                        },
                        isa::Instruction::GetGlobal(idx) => {
                            let global_ref = context.module().global_by_index(idx).unwrap();
                            let is_mutable = global_ref.is_mutable();
                            let vtype: VarType = global_ref.value_type().into_elements().into();
                            let value = from_value_internal_to_u64_with_typ(
                                vtype.into(),
                                ValueInternal::from(global_ref.get()),
                            );
            
                            StepInfo::GetGlobal {
                                idx,
                                vtype,
                                is_mutable,
                                value,
                            }
                        }
                        isa::Instruction::SetGlobal(idx) => {
                            let global_ref = context.module().global_by_index(idx).unwrap();
                            let is_mutable = global_ref.is_mutable();
                            let vtype: VarType = global_ref.value_type().into_elements().into();
                            let value = from_value_internal_to_u64_with_typ(
                                vtype.into(),
                                ValueInternal::from(global_ref.get()),
                            );
            
                            StepInfo::SetGlobal {
                                idx,
                                vtype,
                                is_mutable,
                                value,
                            }
                        }
            
                        isa::Instruction::Br(target) => StepInfo::Br {
                            dst_pc: target.dst_pc,
                            drop: target.drop_keep.drop,
                            keep: if let Keep::Single(t) = target.drop_keep.keep {
                                vec![t.into()]
                            } else {
                                vec![]
                            },
                            keep_values: match target.drop_keep.keep {
                                Keep::Single(t) => vec![from_value_internal_to_u64_with_typ(
                                    t.into(),
                                    *value_stack.top(),
                                )],
                                Keep::None => vec![],
                            },
                        },
                        isa::Instruction::BrIfEqz(target) => {
                            if let RunInstructionTracePre::BrIfEqz { value } = current_event.unwrap() {
                                StepInfo::BrIfEqz {
                                    condition: value,
                                    dst_pc: target.dst_pc,
                                    drop: target.drop_keep.drop,
                                    keep: if let Keep::Single(t) = target.drop_keep.keep {
                                        vec![t.into()]
                                    } else {
                                        vec![]
                                    },
                                    keep_values: match target.drop_keep.keep {
                                        Keep::Single(t) => vec![from_value_internal_to_u64_with_typ(
                                            t.into(),
                                            *value_stack.top(),
                                        )],
                                        Keep::None => vec![],
                                    },
                                }
                            } else {
                                unreachable!()
                            }
                        }
                        isa::Instruction::BrIfNez(target) => {
                            if let RunInstructionTracePre::BrIfNez { value } = current_event.unwrap() {
                                StepInfo::BrIfNez {
                                    condition: value,
                                    dst_pc: target.dst_pc,
                                    drop: target.drop_keep.drop,
                                    keep: if let Keep::Single(t) = target.drop_keep.keep {
                                        vec![t.into()]
                                    } else {
                                        vec![]
                                    },
                                    keep_values: match target.drop_keep.keep {
                                        Keep::Single(t) => vec![from_value_internal_to_u64_with_typ(
                                            t.into(),
                                            *value_stack.top(),
                                        )],
                                        Keep::None => vec![],
                                    },
                                }
                            } else {
                                unreachable!()
                            }
                        }
                        isa::Instruction::BrTable(targets) => {
                            if let RunInstructionTracePre::BrTable { index } = current_event.unwrap() {
                                StepInfo::BrTable {
                                    index,
                                    dst_pc: targets.get(index as u32).dst_pc,
                                    drop: targets.get(index as u32).drop_keep.drop,
                                    keep: if let Keep::Single(t) = targets.get(index as u32).drop_keep.keep {
                                        vec![t.into()]
                                    } else {
                                        vec![]
                                    },
                                    keep_values: match targets.get(index as u32).drop_keep.keep {
                                        Keep::Single(t) => vec![from_value_internal_to_u64_with_typ(
                                            t.into(),
                                            *value_stack.top(),
                                        )],
                                        Keep::None => vec![],
                                    },
                                }
                            } else {
                                unreachable!()
                            }
                        }
            
                        isa::Instruction::Return(DropKeep { drop, keep }) => {
                            let mut drop_values = vec![];
            
                            for i in 1..=drop {
                                drop_values.push( *value_stack.pick(i as usize));
                            }
            
                            StepInfo::Return {
                                drop,
                                keep: if let Keep::Single(t) = keep {
                                    vec![t.into()]
                                } else {
                                    vec![]
                                },
                                keep_values: match keep {
                                    Keep::Single(t) => vec![from_value_internal_to_u64_with_typ(
                                        t.into(),
                                        *value_stack.top(),
                                    )],
                                    Keep::None => vec![],
                                },
                            }
                        }
            
                        isa::Instruction::Drop => {
                            if let RunInstructionTracePre::Drop = current_event.unwrap() {
                                StepInfo::Drop
                            } else {
                                unreachable!()
                            }
                        }
                        isa::Instruction::Select(vtype) => {
                            if let RunInstructionTracePre::Select { val1, val2, cond } = current_event.unwrap()
                            {
                                StepInfo::Select {
                                    val1,
                                    val2,
                                    cond,
                                    result: from_value_internal_to_u64_with_typ(
                                        vtype.into(),
                                        *value_stack.top(),
                                    ),
                                    vtype: vtype.into(),
                                }
                            } else {
                                unreachable!()
                            }
                        }
            
                        isa::Instruction::Call(index) => {
                            if let RunInstructionTracePre::Call = current_event.unwrap() {
                                let desc = &self.function_table[index as usize];
            
                                match &desc.ftype {
                                    specs::types::FunctionType::WasmFunction => StepInfo::Call { index },
                                    specs::types::FunctionType::HostFunction {
                                        plugin,
                                        function_index: host_function_idx,
                                        function_name,
                                        op_index_in_plugin,
                                    } => {
                                        let params_len = desc.signature.params().len();
                                        let mut args: Vec<u64> = vec![];
                                        let signature: specs::host_function::Signature =
                                            desc.signature.clone().into();
                                        let params = signature.params.clone();
            
                                        for i in 0..params_len {
                                            args.push(from_value_internal_to_u64_with_typ(
                                                (params[i]).into(),
                                                *value_stack.pick(params_len - i),
                                            ));
                                        }
                                        StepInfo::CallHost {
                                            plugin: *plugin,
                                            host_function_idx: *host_function_idx,
                                            function_name: function_name.clone(),
                                            args,
                                            ret_val: None,
                                            signature,
                                            op_index_in_plugin: *op_index_in_plugin,
                                        }
                                    }
                                    specs::types::FunctionType::HostFunctionExternal { op, sig, .. } => {
                                        StepInfo::ExternalHostCall {
                                            op: *op,
                                            value: match sig {
                                                ExternalHostCallSignature::Argument => {
                                                    Some(from_value_internal_to_u64_with_typ(
                                                        VarType::I64,
                                                        *value_stack.top(),
                                                    ))
                                                }
                                                ExternalHostCallSignature::Return => None,
                                            },
                                            sig: *sig,
                                        }
                                    }
                                }
                            } else {
                                unreachable!()
                            }
                        }
                        isa::Instruction::CallIndirect(_) => {
                            if let RunInstructionTracePre::CallIndirect {
                                table_idx,
                                type_idx,
                                offset,
                            } = current_event.unwrap()
                            {
                                let table = context
                                    .module()
                                    .table_by_index(DEFAULT_TABLE_INDEX)
                                    .unwrap();
                                let func_ref = table.get(offset).unwrap().unwrap();
                                let func_index = module_ref.func_index_by_func_ref(&func_ref);
            
                                StepInfo::CallIndirect {
                                    table_index: table_idx,
                                    type_index: type_idx,
                                    offset,
                                    func_index,
                                }
                            } else {
                                unreachable!()
                            }
                        }
            
                        isa::Instruction::I32Load(..)
                        | isa::Instruction::I32Load8U(..)
                        | isa::Instruction::I32Load8S(..)
                        | isa::Instruction::I32Load16U(..)
                        | isa::Instruction::I32Load16S(..)
                        | isa::Instruction::I64Load(..)
                        | isa::Instruction::I64Load8U(..)
                        | isa::Instruction::I64Load8S(..)
                        | isa::Instruction::I64Load16U(..)
                        | isa::Instruction::I64Load16S(..)
                        | isa::Instruction::I64Load32U(..)
                        | isa::Instruction::I64Load32S(..) => {
                            if let RunInstructionTracePre::Load {
                                offset,
                                raw_address,
                                effective_address,
                                vtype,
                                load_size,
                            } = current_event.unwrap()
                            {
                                let block_value1 = {
                                    let mut buf = [0u8; 8];
                                    context
                                        .memory
                                        .clone()
                                        .unwrap()
                                        .get_into(effective_address.unwrap() / 8 * 8, &mut buf)
                                        .unwrap();
                                    u64::from_le_bytes(buf)
                                };
            
                                let block_value2 =
                                    if effective_address.unwrap() % 8 + load_size.byte_size() as u32 > 8 {
                                        let mut buf = [0u8; 8];
                                        context
                                            .memory
                                            .clone()
                                            .unwrap()
                                            .get_into((effective_address.unwrap() / 8 + 1) * 8, &mut buf)
                                            .unwrap();
                                        u64::from_le_bytes(buf)
                                    } else {
                                        0
                                    };
            
                                StepInfo::Load {
                                    vtype: vtype.into(),
                                    load_size,
                                    offset,
                                    raw_address,
                                    effective_address: effective_address.unwrap(),
                                    value: from_value_internal_to_u64_with_typ(
                                        vtype.into(),
                                        *value_stack.top(),
                                    ),
                                    block_value1,
                                    block_value2,
                                }
                            } else {
                                unreachable!()
                            }
                        }
                        isa::Instruction::I32Store(..)
                        | isa::Instruction::I32Store8(..)
                        | isa::Instruction::I32Store16(..)
                        | isa::Instruction::I64Store(..)
                        | isa::Instruction::I64Store8(..)
                        | isa::Instruction::I64Store16(..)
                        | isa::Instruction::I64Store32(..) => {
                            if let RunInstructionTracePre::Store {
                                offset,
                                raw_address,
                                effective_address,
                                value,
                                vtype,
                                store_size,
                                pre_block_value1,
                                pre_block_value2,
                            } = current_event.unwrap()
                            {
                                let updated_block_value1 = {
                                    let mut buf = [0u8; 8];
                                    context
                                        .memory
                                        .clone()
                                        .unwrap()
                                        .get_into(effective_address.unwrap() / 8 * 8, &mut buf)
                                        .unwrap();
                                    u64::from_le_bytes(buf)
                                };
            
                                let updated_block_value2 =
                                    if effective_address.unwrap() % 8 + store_size.byte_size() as u32 > 8 {
                                        let mut buf = [0u8; 8];
                                        context
                                            .memory
                                            .clone()
                                            .unwrap()
                                            .get_into((effective_address.unwrap() / 8 + 1) * 8, &mut buf)
                                            .unwrap();
                                        u64::from_le_bytes(buf)
                                    } else {
                                        0
                                    };
            
                                StepInfo::Store {
                                    vtype: vtype.into(),
                                    store_size,
                                    offset,
                                    raw_address,
                                    effective_address: effective_address.unwrap(),
                                    value: value as u64,
                                    pre_block_value1: pre_block_value1.unwrap(),
                                    pre_block_value2: pre_block_value2.unwrap_or(0u64),
                                    updated_block_value1,
                                    updated_block_value2,
                                }
                            } else {
                                unreachable!()
                            }
                        }
            
                        isa::Instruction::CurrentMemory => StepInfo::MemorySize,
                        isa::Instruction::GrowMemory => {
                            if let RunInstructionTracePre::GrowMemory(grow_size) = current_event.unwrap() {
                                StepInfo::MemoryGrow {
                                    grow_size,
                                    result: <_>::from_value_internal( *value_stack.top()),
                                }
                            } else {
                                unreachable!()
                            }
                        }
            
                        isa::Instruction::I32Const(value) => StepInfo::I32Const { value },
                        isa::Instruction::I64Const(value) => StepInfo::I64Const { value },
            
                        isa::Instruction::I32Eqz => {
                            if let RunInstructionTracePre::I32Single(value) = current_event.unwrap() {
                                StepInfo::Test {
                                    vtype: VarType::I32,
                                    value: value as u32 as u64,
                                    result: <_>::from_value_internal( *value_stack.top()),
                                }
                            } else {
                                unreachable!()
                            }
                        }
                        isa::Instruction::I32Eq => {
                            if let RunInstructionTracePre::I32Comp { left, right } = current_event.unwrap() {
                                StepInfo::I32Comp {
                                    class: RelOp::Eq,
                                    left,
                                    right,
                                    value: <_>::from_value_internal( *value_stack.top()),
                                }
                            } else {
                                unreachable!()
                            }
                        }
                        isa::Instruction::I32Ne => {
                            if let RunInstructionTracePre::I32Comp { left, right } = current_event.unwrap() {
                                StepInfo::I32Comp {
                                    class: RelOp::Ne,
                                    left,
                                    right,
                                    value: <_>::from_value_internal( *value_stack.top()),
                                }
                            } else {
                                unreachable!()
                            }
                        }
                        isa::Instruction::I32GtS => {
                            if let RunInstructionTracePre::I32Comp { left, right } = current_event.unwrap() {
                                StepInfo::I32Comp {
                                    class: RelOp::SignedGt,
                                    left,
                                    right,
                                    value: <_>::from_value_internal( *value_stack.top()),
                                }
                            } else {
                                unreachable!()
                            }
                        }
                        isa::Instruction::I32GtU => {
                            if let RunInstructionTracePre::I32Comp { left, right } = current_event.unwrap() {
                                StepInfo::I32Comp {
                                    class: RelOp::UnsignedGt,
                                    left,
                                    right,
                                    value: <_>::from_value_internal( *value_stack.top()),
                                }
                            } else {
                                unreachable!()
                            }
                        }
                        isa::Instruction::I32GeS => {
                            if let RunInstructionTracePre::I32Comp { left, right } = current_event.unwrap() {
                                StepInfo::I32Comp {
                                    class: RelOp::SignedGe,
                                    left,
                                    right,
                                    value: <_>::from_value_internal( *value_stack.top()),
                                }
                            } else {
                                unreachable!()
                            }
                        }
                        isa::Instruction::I32GeU => {
                            if let RunInstructionTracePre::I32Comp { left, right } = current_event.unwrap() {
                                StepInfo::I32Comp {
                                    class: RelOp::UnsignedGe,
                                    left,
                                    right,
                                    value: <_>::from_value_internal( *value_stack.top()),
                                }
                            } else {
                                unreachable!()
                            }
                        }
                        isa::Instruction::I32LtS => {
                            if let RunInstructionTracePre::I32Comp { left, right } = current_event.unwrap() {
                                StepInfo::I32Comp {
                                    class: RelOp::SignedLt,
                                    left,
                                    right,
                                    value: <_>::from_value_internal( *value_stack.top()),
                                }
                            } else {
                                unreachable!()
                            }
                        }
                        isa::Instruction::I32LtU => {
                            if let RunInstructionTracePre::I32Comp { left, right } = current_event.unwrap() {
                                StepInfo::I32Comp {
                                    class: RelOp::UnsignedLt,
                                    left,
                                    right,
                                    value: <_>::from_value_internal( *value_stack.top()),
                                }
                            } else {
                                unreachable!()
                            }
                        }
                        isa::Instruction::I32LeS => {
                            if let RunInstructionTracePre::I32Comp { left, right } = current_event.unwrap() {
                                StepInfo::I32Comp {
                                    class: RelOp::SignedLe,
                                    left,
                                    right,
                                    value: <_>::from_value_internal( *value_stack.top()),
                                }
                            } else {
                                unreachable!()
                            }
                        }
                        isa::Instruction::I32LeU => {
                            if let RunInstructionTracePre::I32Comp { left, right } = current_event.unwrap() {
                                StepInfo::I32Comp {
                                    class: RelOp::UnsignedLe,
                                    left,
                                    right,
                                    value: <_>::from_value_internal( *value_stack.top()),
                                }
                            } else {
                                unreachable!()
                            }
                        }
            
                        isa::Instruction::I64Eqz => {
                            if let RunInstructionTracePre::I64Single(value) = current_event.unwrap() {
                                StepInfo::Test {
                                    vtype: VarType::I64,
                                    value: value as u64,
                                    result: <_>::from_value_internal( *value_stack.top()),
                                }
                            } else {
                                unreachable!()
                            }
                        }
                        isa::Instruction::I64Eq => {
                            if let RunInstructionTracePre::I64Comp { left, right } = current_event.unwrap() {
                                StepInfo::I64Comp {
                                    class: RelOp::Eq,
                                    left,
                                    right,
                                    value: <_>::from_value_internal( *value_stack.top()),
                                }
                            } else {
                                unreachable!()
                            }
                        }
                        isa::Instruction::I64Ne => {
                            if let RunInstructionTracePre::I64Comp { left, right } = current_event.unwrap() {
                                StepInfo::I64Comp {
                                    class: RelOp::Ne,
                                    left,
                                    right,
                                    value: <_>::from_value_internal( *value_stack.top()),
                                }
                            } else {
                                unreachable!()
                            }
                        }
                        isa::Instruction::I64GtS => {
                            if let RunInstructionTracePre::I64Comp { left, right } = current_event.unwrap() {
                                StepInfo::I64Comp {
                                    class: RelOp::SignedGt,
                                    left,
                                    right,
                                    value: <_>::from_value_internal( *value_stack.top()),
                                }
                            } else {
                                unreachable!()
                            }
                        }
                        isa::Instruction::I64GtU => {
                            if let RunInstructionTracePre::I64Comp { left, right } = current_event.unwrap() {
                                StepInfo::I64Comp {
                                    class: RelOp::UnsignedGt,
                                    left,
                                    right,
                                    value: <_>::from_value_internal( *value_stack.top()),
                                }
                            } else {
                                unreachable!()
                            }
                        }
                        isa::Instruction::I64LtU => {
                            if let RunInstructionTracePre::I64Comp { left, right } = current_event.unwrap() {
                                StepInfo::I64Comp {
                                    class: RelOp::UnsignedLt,
                                    left,
                                    right,
                                    value: <_>::from_value_internal( *value_stack.top()),
                                }
                            } else {
                                unreachable!()
                            }
                        }
                        isa::Instruction::I64LtS => {
                            if let RunInstructionTracePre::I64Comp { left, right } = current_event.unwrap() {
                                StepInfo::I64Comp {
                                    class: RelOp::SignedLt,
                                    left,
                                    right,
                                    value: <_>::from_value_internal( *value_stack.top()),
                                }
                            } else {
                                unreachable!()
                            }
                        }
                        isa::Instruction::I64LeU => {
                            if let RunInstructionTracePre::I64Comp { left, right } = current_event.unwrap() {
                                StepInfo::I64Comp {
                                    class: RelOp::UnsignedLe,
                                    left,
                                    right,
                                    value: <_>::from_value_internal( *value_stack.top()),
                                }
                            } else {
                                unreachable!()
                            }
                        }
                        isa::Instruction::I64LeS => {
                            if let RunInstructionTracePre::I64Comp { left, right } = current_event.unwrap() {
                                StepInfo::I64Comp {
                                    class: RelOp::SignedLe,
                                    left,
                                    right,
                                    value: <_>::from_value_internal( *value_stack.top()),
                                }
                            } else {
                                unreachable!()
                            }
                        }
                        isa::Instruction::I64GeU => {
                            if let RunInstructionTracePre::I64Comp { left, right } = current_event.unwrap() {
                                StepInfo::I64Comp {
                                    class: RelOp::UnsignedGe,
                                    left,
                                    right,
                                    value: <_>::from_value_internal( *value_stack.top()),
                                }
                            } else {
                                unreachable!()
                            }
                        }
                        isa::Instruction::I64GeS => {
                            if let RunInstructionTracePre::I64Comp { left, right } = current_event.unwrap() {
                                StepInfo::I64Comp {
                                    class: RelOp::SignedGe,
                                    left,
                                    right,
                                    value: <_>::from_value_internal( *value_stack.top()),
                                }
                            } else {
                                unreachable!()
                            }
                        }
            
                        isa::Instruction::I32Add => {
                            if let RunInstructionTracePre::I32BinOp { left, right } = current_event.unwrap() {
                                StepInfo::I32BinOp {
                                    class: BinOp::Add,
                                    left,
                                    right,
                                    value: <_>::from_value_internal( *value_stack.top()),
                                }
                            } else {
                                unreachable!()
                            }
                        }
                        isa::Instruction::I32Sub => {
                            if let RunInstructionTracePre::I32BinOp { left, right } = current_event.unwrap() {
                                StepInfo::I32BinOp {
                                    class: BinOp::Sub,
                                    left,
                                    right,
                                    value: <_>::from_value_internal( *value_stack.top()),
                                }
                            } else {
                                unreachable!()
                            }
                        }
                        isa::Instruction::I32Mul => {
                            if let RunInstructionTracePre::I32BinOp { left, right } = current_event.unwrap() {
                                StepInfo::I32BinOp {
                                    class: BinOp::Mul,
                                    left,
                                    right,
                                    value: <_>::from_value_internal( *value_stack.top()),
                                }
                            } else {
                                unreachable!()
                            }
                        }
                        isa::Instruction::I32DivU => {
                            if let RunInstructionTracePre::I32BinOp { left, right } = current_event.unwrap() {
                                StepInfo::I32BinOp {
                                    class: BinOp::UnsignedDiv,
                                    left,
                                    right,
                                    value: <_>::from_value_internal( *value_stack.top()),
                                }
                            } else {
                                unreachable!()
                            }
                        }
                        isa::Instruction::I32RemU => {
                            if let RunInstructionTracePre::I32BinOp { left, right } = current_event.unwrap() {
                                StepInfo::I32BinOp {
                                    class: BinOp::UnsignedRem,
                                    left,
                                    right,
                                    value: <_>::from_value_internal( *value_stack.top()),
                                }
                            } else {
                                unreachable!()
                            }
                        }
                        isa::Instruction::I32DivS => {
                            if let RunInstructionTracePre::I32BinOp { left, right } = current_event.unwrap() {
                                StepInfo::I32BinOp {
                                    class: BinOp::SignedDiv,
                                    left,
                                    right,
                                    value: <_>::from_value_internal( *value_stack.top()),
                                }
                            } else {
                                unreachable!()
                            }
                        }
                        isa::Instruction::I32RemS => {
                            if let RunInstructionTracePre::I32BinOp { left, right } = current_event.unwrap() {
                                StepInfo::I32BinOp {
                                    class: BinOp::SignedRem,
                                    left,
                                    right,
                                    value: <_>::from_value_internal( *value_stack.top()),
                                }
                            } else {
                                unreachable!()
                            }
                        }
                        isa::Instruction::I32And => {
                            if let RunInstructionTracePre::I32BinOp { left, right } = current_event.unwrap() {
                                StepInfo::I32BinBitOp {
                                    class: BitOp::And,
                                    left,
                                    right,
                                    value: <_>::from_value_internal( *value_stack.top()),
                                }
                            } else {
                                unreachable!()
                            }
                        }
                        isa::Instruction::I32Or => {
                            if let RunInstructionTracePre::I32BinOp { left, right } = current_event.unwrap() {
                                StepInfo::I32BinBitOp {
                                    class: BitOp::Or,
                                    left,
                                    right,
                                    value: <_>::from_value_internal( *value_stack.top()),
                                }
                            } else {
                                unreachable!()
                            }
                        }
                        isa::Instruction::I32Xor => {
                            if let RunInstructionTracePre::I32BinOp { left, right } = current_event.unwrap() {
                                StepInfo::I32BinBitOp {
                                    class: BitOp::Xor,
                                    left,
                                    right,
                                    value: <_>::from_value_internal( *value_stack.top()),
                                }
                            } else {
                                unreachable!()
                            }
                        }
                        isa::Instruction::I32Shl => {
                            if let RunInstructionTracePre::I32BinOp { left, right } = current_event.unwrap() {
                                StepInfo::I32BinShiftOp {
                                    class: ShiftOp::Shl,
                                    left,
                                    right,
                                    value: <_>::from_value_internal( *value_stack.top()),
                                }
                            } else {
                                unreachable!()
                            }
                        }
                        isa::Instruction::I32ShrU => {
                            if let RunInstructionTracePre::I32BinOp { left, right } = current_event.unwrap() {
                                StepInfo::I32BinShiftOp {
                                    class: ShiftOp::UnsignedShr,
                                    left,
                                    right,
                                    value: <_>::from_value_internal( *value_stack.top()),
                                }
                            } else {
                                unreachable!()
                            }
                        }
                        isa::Instruction::I32ShrS => {
                            if let RunInstructionTracePre::I32BinOp { left, right } = current_event.unwrap() {
                                StepInfo::I32BinShiftOp {
                                    class: ShiftOp::SignedShr,
                                    left,
                                    right,
                                    value: <_>::from_value_internal( *value_stack.top()),
                                }
                            } else {
                                unreachable!()
                            }
                        }
                        isa::Instruction::I32Rotl => {
                            if let RunInstructionTracePre::I32BinOp { left, right } = current_event.unwrap() {
                                StepInfo::I32BinShiftOp {
                                    class: ShiftOp::Rotl,
                                    left,
                                    right,
                                    value: <_>::from_value_internal( *value_stack.top()),
                                }
                            } else {
                                unreachable!()
                            }
                        }
                        isa::Instruction::I32Rotr => {
                            if let RunInstructionTracePre::I32BinOp { left, right } = current_event.unwrap() {
                                StepInfo::I32BinShiftOp {
                                    class: ShiftOp::Rotr,
                                    left,
                                    right,
                                    value: <_>::from_value_internal( *value_stack.top()),
                                }
                            } else {
                                unreachable!()
                            }
                        }
                        isa::Instruction::I64Add => {
                            if let RunInstructionTracePre::I64BinOp { left, right } = current_event.unwrap() {
                                StepInfo::I64BinOp {
                                    class: BinOp::Add,
                                    left,
                                    right,
                                    value: <_>::from_value_internal( *value_stack.top()),
                                }
                            } else {
                                unreachable!()
                            }
                        }
                        isa::Instruction::I64Sub => {
                            if let RunInstructionTracePre::I64BinOp { left, right } = current_event.unwrap() {
                                StepInfo::I64BinOp {
                                    class: BinOp::Sub,
                                    left,
                                    right,
                                    value: <_>::from_value_internal( *value_stack.top()),
                                }
                            } else {
                                unreachable!()
                            }
                        }
                        isa::Instruction::I64Mul => {
                            if let RunInstructionTracePre::I64BinOp { left, right } = current_event.unwrap() {
                                StepInfo::I64BinOp {
                                    class: BinOp::Mul,
                                    left,
                                    right,
                                    value: <_>::from_value_internal( *value_stack.top()),
                                }
                            } else {
                                unreachable!()
                            }
                        }
                        isa::Instruction::I64DivU => {
                            if let RunInstructionTracePre::I64BinOp { left, right } = current_event.unwrap() {
                                StepInfo::I64BinOp {
                                    class: BinOp::UnsignedDiv,
                                    left,
                                    right,
                                    value: <_>::from_value_internal( *value_stack.top()),
                                }
                            } else {
                                unreachable!()
                            }
                        }
                        isa::Instruction::I64RemU => {
                            if let RunInstructionTracePre::I64BinOp { left, right } = current_event.unwrap() {
                                StepInfo::I64BinOp {
                                    class: BinOp::UnsignedRem,
                                    left,
                                    right,
                                    value: <_>::from_value_internal( *value_stack.top()),
                                }
                            } else {
                                unreachable!()
                            }
                        }
                        isa::Instruction::I64DivS => {
                            if let RunInstructionTracePre::I64BinOp { left, right } = current_event.unwrap() {
                                StepInfo::I64BinOp {
                                    class: BinOp::SignedDiv,
                                    left,
                                    right,
                                    value: <_>::from_value_internal( *value_stack.top()),
                                }
                            } else {
                                unreachable!()
                            }
                        }
                        isa::Instruction::I64RemS => {
                            if let RunInstructionTracePre::I64BinOp { left, right } = current_event.unwrap() {
                                StepInfo::I64BinOp {
                                    class: BinOp::SignedRem,
                                    left,
                                    right,
                                    value: <_>::from_value_internal( *value_stack.top()),
                                }
                            } else {
                                unreachable!()
                            }
                        }
                        isa::Instruction::I64And => {
                            if let RunInstructionTracePre::I64BinOp { left, right } = current_event.unwrap() {
                                StepInfo::I64BinBitOp {
                                    class: BitOp::And,
                                    left,
                                    right,
                                    value: <_>::from_value_internal( *value_stack.top()),
                                }
                            } else {
                                unreachable!()
                            }
                        }
                        isa::Instruction::I64Or => {
                            if let RunInstructionTracePre::I64BinOp { left, right } = current_event.unwrap() {
                                StepInfo::I64BinBitOp {
                                    class: BitOp::Or,
                                    left,
                                    right,
                                    value: <_>::from_value_internal( *value_stack.top()),
                                }
                            } else {
                                unreachable!()
                            }
                        }
                        isa::Instruction::I64Xor => {
                            if let RunInstructionTracePre::I64BinOp { left, right } = current_event.unwrap() {
                                StepInfo::I64BinBitOp {
                                    class: BitOp::Xor,
                                    left,
                                    right,
                                    value: <_>::from_value_internal( *value_stack.top()),
                                }
                            } else {
                                unreachable!()
                            }
                        }
                        isa::Instruction::I64Shl => {
                            if let RunInstructionTracePre::I64BinOp { left, right } = current_event.unwrap() {
                                StepInfo::I64BinShiftOp {
                                    class: ShiftOp::Shl,
                                    left,
                                    right,
                                    value: <_>::from_value_internal( *value_stack.top()),
                                }
                            } else {
                                unreachable!()
                            }
                        }
                        isa::Instruction::I64ShrU => {
                            if let RunInstructionTracePre::I64BinOp { left, right } = current_event.unwrap() {
                                StepInfo::I64BinShiftOp {
                                    class: ShiftOp::UnsignedShr,
                                    left,
                                    right,
                                    value: <_>::from_value_internal( *value_stack.top()),
                                }
                            } else {
                                unreachable!()
                            }
                        }
                        isa::Instruction::I64ShrS => {
                            if let RunInstructionTracePre::I64BinOp { left, right } = current_event.unwrap() {
                                StepInfo::I64BinShiftOp {
                                    class: ShiftOp::SignedShr,
                                    left,
                                    right,
                                    value: <_>::from_value_internal( *value_stack.top()),
                                }
                            } else {
                                unreachable!()
                            }
                        }
                        isa::Instruction::I64Rotl => {
                            if let RunInstructionTracePre::I64BinOp { left, right } = current_event.unwrap() {
                                StepInfo::I64BinShiftOp {
                                    class: ShiftOp::Rotl,
                                    left,
                                    right,
                                    value: <_>::from_value_internal( *value_stack.top()),
                                }
                            } else {
                                unreachable!()
                            }
                        }
                        isa::Instruction::I64Rotr => {
                            if let RunInstructionTracePre::I64BinOp { left, right } = current_event.unwrap() {
                                StepInfo::I64BinShiftOp {
                                    class: ShiftOp::Rotr,
                                    left,
                                    right,
                                    value: <_>::from_value_internal( *value_stack.top()),
                                }
                            } else {
                                unreachable!()
                            }
                        }
            
                        isa::Instruction::I32Ctz
                        | isa::Instruction::I32Clz
                        | isa::Instruction::I32Popcnt
                        | isa::Instruction::I64Ctz
                        | isa::Instruction::I64Clz
                        | isa::Instruction::I64Popcnt => {
                            if let RunInstructionTracePre::UnaryOp { operand, vtype } = current_event.unwrap() {
                                StepInfo::UnaryOp {
                                    class: UnaryOp::from(instructions.clone()),
                                    vtype,
                                    operand,
                                    result: from_value_internal_to_u64_with_typ(vtype, *value_stack.top()),
                                }
                            } else {
                                unreachable!()
                            }
                        }
            
                        isa::Instruction::I32WrapI64 => {
                            if let RunInstructionTracePre::I32WrapI64 { value } = current_event.unwrap() {
                                StepInfo::I32WrapI64 {
                                    value,
                                    result: <_>::from_value_internal( *value_stack.top()),
                                }
                            } else {
                                unreachable!()
                            }
                        }
                        isa::Instruction::I64ExtendSI32 | isa::Instruction::I64ExtendUI32 => {
                            if let RunInstructionTracePre::I64ExtendI32 { value, sign } = current_event.unwrap()
                            {
                                StepInfo::I64ExtendI32 {
                                    value,
                                    result: <_>::from_value_internal( *value_stack.top()),
                                    sign,
                                }
                            } else {
                                unreachable!()
                            }
                        }
                        isa::Instruction::I32Extend8S => {
                            if let RunInstructionTracePre::I32SignExtendI8 { value } = current_event.unwrap() {
                                StepInfo::I32SignExtendI8 {
                                    value,
                                    result: <_>::from_value_internal( *value_stack.top()),
                                }
                            } else {
                                unreachable!()
                            }
                        }
                        isa::Instruction::I32Extend16S => {
                            if let RunInstructionTracePre::I32SignExtendI16 { value } = current_event.unwrap() {
                                StepInfo::I32SignExtendI16 {
                                    value,
                                    result: <_>::from_value_internal( *value_stack.top()),
                                }
                            } else {
                                unreachable!()
                            }
                        }
                        isa::Instruction::I64Extend8S => {
                            if let RunInstructionTracePre::I64SignExtendI8 { value } = current_event.unwrap() {
                                StepInfo::I64SignExtendI8 {
                                    value,
                                    result: <_>::from_value_internal( *value_stack.top()),
                                }
                            } else {
                                unreachable!()
                            }
                        }
                        isa::Instruction::I64Extend16S => {
                            if let RunInstructionTracePre::I64SignExtendI16 { value } = current_event.unwrap() {
                                StepInfo::I64SignExtendI16 {
                                    value,
                                    result: <_>::from_value_internal( *value_stack.top()),
                                }
                            } else {
                                unreachable!()
                            }
                        }
                        isa::Instruction::I64Extend32S => {
                            if let RunInstructionTracePre::I64SignExtendI32 { value } = current_event.unwrap() {
                                StepInfo::I64SignExtendI32 {
                                    value,
                                    result: <_>::from_value_internal( *value_stack.top()),
                                }
                            } else {
                                unreachable!()
                            }
                        }
            
                        _ => {
                            println!("{:?}", instructions);
                            unimplemented!()
                        }
                    }
                }
            *)
            Definition run_instruction_post (τ : list Ty.t) (α : list Value.t) : M :=
              match τ, α with
              | [], [ self; module_ref; current_event; value_stack; context; instructions ] =>
                ltac:(M.monadic
                  (let self := M.alloc (| self |) in
                  let module_ref := M.alloc (| module_ref |) in
                  let current_event := M.alloc (| current_event |) in
                  let value_stack := M.alloc (| value_stack |) in
                  let context := M.alloc (| context |) in
                  let instructions := M.alloc (| instructions |) in
                  M.read (|
                    M.match_operator (|
                      M.read (| instructions |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "wasmi::isa::Instruction::GetLocal",
                                0
                              |) in
                            let γ0_1 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "wasmi::isa::Instruction::GetLocal",
                                1
                              |) in
                            let depth := M.copy (| γ0_0 |) in
                            let vtype := M.copy (| γ0_1 |) in
                            M.alloc (|
                              Value.StructRecord
                                "specs::step::StepInfo::GetLocal"
                                [
                                  ("depth", M.read (| depth |));
                                  ("value",
                                    M.call_closure (|
                                      M.get_function (|
                                        "wasmi::runner::from_value_internal_to_u64_with_typ",
                                        []
                                      |),
                                      [
                                        M.call_closure (|
                                          M.get_trait_method (|
                                            "core::convert::Into",
                                            Ty.path "parity_wasm::elements::types::ValueType",
                                            [ Ty.path "specs::mtable::VarType" ],
                                            "into",
                                            []
                                          |),
                                          [ M.read (| vtype |) ]
                                        |);
                                        M.read (|
                                          M.call_closure (|
                                            M.get_associated_function (|
                                              Ty.path "wasmi::runner::ValueStack",
                                              "top",
                                              []
                                            |),
                                            [ M.read (| value_stack |) ]
                                          |)
                                        |)
                                      ]
                                    |));
                                  ("vtype",
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::convert::Into",
                                        Ty.path "parity_wasm::elements::types::ValueType",
                                        [ Ty.path "specs::mtable::VarType" ],
                                        "into",
                                        []
                                      |),
                                      [ M.read (| vtype |) ]
                                    |))
                                ]
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (M.match_operator (|
                              M.alloc (| Value.Tuple [] |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ :=
                                      M.alloc (|
                                        M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.apply
                                              (Ty.path "core::option::Option")
                                              [
                                                Ty.path
                                                  "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::RunInstructionTracePre"
                                              ],
                                            "unwrap",
                                            []
                                          |),
                                          [ M.read (| current_event |) ]
                                        |)
                                      |) in
                                    let γ0_0 :=
                                      M.SubPointer.get_struct_record_field (|
                                        γ,
                                        "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::RunInstructionTracePre::SetLocal",
                                        "depth"
                                      |) in
                                    let γ0_1 :=
                                      M.SubPointer.get_struct_record_field (|
                                        γ,
                                        "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::RunInstructionTracePre::SetLocal",
                                        "value"
                                      |) in
                                    let γ0_2 :=
                                      M.SubPointer.get_struct_record_field (|
                                        γ,
                                        "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::RunInstructionTracePre::SetLocal",
                                        "vtype"
                                      |) in
                                    let depth := M.copy (| γ0_0 |) in
                                    let value := M.copy (| γ0_1 |) in
                                    let vtype := M.copy (| γ0_2 |) in
                                    M.alloc (|
                                      Value.StructRecord
                                        "specs::step::StepInfo::SetLocal"
                                        [
                                          ("depth", M.read (| depth |));
                                          ("value",
                                            M.call_closure (|
                                              M.get_function (|
                                                "wasmi::runner::from_value_internal_to_u64_with_typ",
                                                []
                                              |),
                                              [
                                                M.call_closure (|
                                                  M.get_trait_method (|
                                                    "core::convert::Into",
                                                    Ty.path
                                                      "parity_wasm::elements::types::ValueType",
                                                    [ Ty.path "specs::mtable::VarType" ],
                                                    "into",
                                                    []
                                                  |),
                                                  [ M.read (| vtype |) ]
                                                |);
                                                M.read (| value |)
                                              ]
                                            |));
                                          ("vtype",
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "core::convert::Into",
                                                Ty.path "parity_wasm::elements::types::ValueType",
                                                [ Ty.path "specs::mtable::VarType" ],
                                                "into",
                                                []
                                              |),
                                              [ M.read (| vtype |) ]
                                            |))
                                        ]
                                    |)));
                                fun γ =>
                                  ltac:(M.monadic
                                    (M.alloc (|
                                      M.never_to_any (|
                                        M.call_closure (|
                                          M.get_function (| "core::panicking::panic", [] |),
                                          [
                                            M.read (|
                                              Value.String
                                                "internal error: entered unreachable code"
                                            |)
                                          ]
                                        |)
                                      |)
                                    |)))
                              ]
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "wasmi::isa::Instruction::TeeLocal",
                                0
                              |) in
                            let γ0_1 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "wasmi::isa::Instruction::TeeLocal",
                                1
                              |) in
                            let depth := M.copy (| γ0_0 |) in
                            let vtype := M.copy (| γ0_1 |) in
                            M.alloc (|
                              Value.StructRecord
                                "specs::step::StepInfo::TeeLocal"
                                [
                                  ("depth", M.read (| depth |));
                                  ("value",
                                    M.call_closure (|
                                      M.get_function (|
                                        "wasmi::runner::from_value_internal_to_u64_with_typ",
                                        []
                                      |),
                                      [
                                        M.call_closure (|
                                          M.get_trait_method (|
                                            "core::convert::Into",
                                            Ty.path "parity_wasm::elements::types::ValueType",
                                            [ Ty.path "specs::mtable::VarType" ],
                                            "into",
                                            []
                                          |),
                                          [ M.read (| vtype |) ]
                                        |);
                                        M.read (|
                                          M.call_closure (|
                                            M.get_associated_function (|
                                              Ty.path "wasmi::runner::ValueStack",
                                              "top",
                                              []
                                            |),
                                            [ M.read (| value_stack |) ]
                                          |)
                                        |)
                                      ]
                                    |));
                                  ("vtype",
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::convert::Into",
                                        Ty.path "parity_wasm::elements::types::ValueType",
                                        [ Ty.path "specs::mtable::VarType" ],
                                        "into",
                                        []
                                      |),
                                      [ M.read (| vtype |) ]
                                    |))
                                ]
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "wasmi::isa::Instruction::GetGlobal",
                                0
                              |) in
                            let idx := M.copy (| γ0_0 |) in
                            let global_ref :=
                              M.alloc (|
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.apply
                                      (Ty.path "core::option::Option")
                                      [ Ty.path "wasmi::global::GlobalRef" ],
                                    "unwrap",
                                    []
                                  |),
                                  [
                                    M.call_closure (|
                                      M.get_associated_function (|
                                        Ty.path "wasmi::module::ModuleInstance",
                                        "global_by_index",
                                        []
                                      |),
                                      [
                                        M.call_closure (|
                                          M.get_trait_method (|
                                            "core::ops::deref::Deref",
                                            Ty.path "wasmi::module::ModuleRef",
                                            [],
                                            "deref",
                                            []
                                          |),
                                          [
                                            M.alloc (|
                                              M.call_closure (|
                                                M.get_associated_function (|
                                                  Ty.path "wasmi::runner::FunctionContext",
                                                  "module",
                                                  []
                                                |),
                                                [ M.read (| context |) ]
                                              |)
                                            |)
                                          ]
                                        |);
                                        M.read (| idx |)
                                      ]
                                    |)
                                  ]
                                |)
                              |) in
                            let is_mutable :=
                              M.alloc (|
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.path "wasmi::global::GlobalInstance",
                                    "is_mutable",
                                    []
                                  |),
                                  [
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::ops::deref::Deref",
                                        Ty.path "wasmi::global::GlobalRef",
                                        [],
                                        "deref",
                                        []
                                      |),
                                      [ global_ref ]
                                    |)
                                  ]
                                |)
                              |) in
                            let vtype :=
                              M.alloc (|
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "core::convert::Into",
                                    Ty.path "parity_wasm::elements::types::ValueType",
                                    [ Ty.path "specs::mtable::VarType" ],
                                    "into",
                                    []
                                  |),
                                  [
                                    M.call_closure (|
                                      M.get_associated_function (|
                                        Ty.path "wasmi_core::value::ValueType",
                                        "into_elements",
                                        []
                                      |),
                                      [
                                        M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.path "wasmi::global::GlobalInstance",
                                            "value_type",
                                            []
                                          |),
                                          [
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "core::ops::deref::Deref",
                                                Ty.path "wasmi::global::GlobalRef",
                                                [],
                                                "deref",
                                                []
                                              |),
                                              [ global_ref ]
                                            |)
                                          ]
                                        |)
                                      ]
                                    |)
                                  ]
                                |)
                              |) in
                            let value :=
                              M.alloc (|
                                M.call_closure (|
                                  M.get_function (|
                                    "wasmi::runner::from_value_internal_to_u64_with_typ",
                                    []
                                  |),
                                  [
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::convert::Into",
                                        Ty.path "specs::mtable::VarType",
                                        [ Ty.path "specs::mtable::VarType" ],
                                        "into",
                                        []
                                      |),
                                      [ M.read (| vtype |) ]
                                    |);
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::convert::From",
                                        Ty.path "wasmi::runner::ValueInternal",
                                        [ Ty.path "wasmi_core::value::Value" ],
                                        "from",
                                        []
                                      |),
                                      [
                                        M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.path "wasmi::global::GlobalInstance",
                                            "get",
                                            []
                                          |),
                                          [
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "core::ops::deref::Deref",
                                                Ty.path "wasmi::global::GlobalRef",
                                                [],
                                                "deref",
                                                []
                                              |),
                                              [ global_ref ]
                                            |)
                                          ]
                                        |)
                                      ]
                                    |)
                                  ]
                                |)
                              |) in
                            M.alloc (|
                              Value.StructRecord
                                "specs::step::StepInfo::GetGlobal"
                                [
                                  ("idx", M.read (| idx |));
                                  ("vtype", M.read (| vtype |));
                                  ("is_mutable", M.read (| is_mutable |));
                                  ("value", M.read (| value |))
                                ]
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "wasmi::isa::Instruction::SetGlobal",
                                0
                              |) in
                            let idx := M.copy (| γ0_0 |) in
                            let global_ref :=
                              M.alloc (|
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.apply
                                      (Ty.path "core::option::Option")
                                      [ Ty.path "wasmi::global::GlobalRef" ],
                                    "unwrap",
                                    []
                                  |),
                                  [
                                    M.call_closure (|
                                      M.get_associated_function (|
                                        Ty.path "wasmi::module::ModuleInstance",
                                        "global_by_index",
                                        []
                                      |),
                                      [
                                        M.call_closure (|
                                          M.get_trait_method (|
                                            "core::ops::deref::Deref",
                                            Ty.path "wasmi::module::ModuleRef",
                                            [],
                                            "deref",
                                            []
                                          |),
                                          [
                                            M.alloc (|
                                              M.call_closure (|
                                                M.get_associated_function (|
                                                  Ty.path "wasmi::runner::FunctionContext",
                                                  "module",
                                                  []
                                                |),
                                                [ M.read (| context |) ]
                                              |)
                                            |)
                                          ]
                                        |);
                                        M.read (| idx |)
                                      ]
                                    |)
                                  ]
                                |)
                              |) in
                            let is_mutable :=
                              M.alloc (|
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.path "wasmi::global::GlobalInstance",
                                    "is_mutable",
                                    []
                                  |),
                                  [
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::ops::deref::Deref",
                                        Ty.path "wasmi::global::GlobalRef",
                                        [],
                                        "deref",
                                        []
                                      |),
                                      [ global_ref ]
                                    |)
                                  ]
                                |)
                              |) in
                            let vtype :=
                              M.alloc (|
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "core::convert::Into",
                                    Ty.path "parity_wasm::elements::types::ValueType",
                                    [ Ty.path "specs::mtable::VarType" ],
                                    "into",
                                    []
                                  |),
                                  [
                                    M.call_closure (|
                                      M.get_associated_function (|
                                        Ty.path "wasmi_core::value::ValueType",
                                        "into_elements",
                                        []
                                      |),
                                      [
                                        M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.path "wasmi::global::GlobalInstance",
                                            "value_type",
                                            []
                                          |),
                                          [
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "core::ops::deref::Deref",
                                                Ty.path "wasmi::global::GlobalRef",
                                                [],
                                                "deref",
                                                []
                                              |),
                                              [ global_ref ]
                                            |)
                                          ]
                                        |)
                                      ]
                                    |)
                                  ]
                                |)
                              |) in
                            let value :=
                              M.alloc (|
                                M.call_closure (|
                                  M.get_function (|
                                    "wasmi::runner::from_value_internal_to_u64_with_typ",
                                    []
                                  |),
                                  [
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::convert::Into",
                                        Ty.path "specs::mtable::VarType",
                                        [ Ty.path "specs::mtable::VarType" ],
                                        "into",
                                        []
                                      |),
                                      [ M.read (| vtype |) ]
                                    |);
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::convert::From",
                                        Ty.path "wasmi::runner::ValueInternal",
                                        [ Ty.path "wasmi_core::value::Value" ],
                                        "from",
                                        []
                                      |),
                                      [
                                        M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.path "wasmi::global::GlobalInstance",
                                            "get",
                                            []
                                          |),
                                          [
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "core::ops::deref::Deref",
                                                Ty.path "wasmi::global::GlobalRef",
                                                [],
                                                "deref",
                                                []
                                              |),
                                              [ global_ref ]
                                            |)
                                          ]
                                        |)
                                      ]
                                    |)
                                  ]
                                |)
                              |) in
                            M.alloc (|
                              Value.StructRecord
                                "specs::step::StepInfo::SetGlobal"
                                [
                                  ("idx", M.read (| idx |));
                                  ("vtype", M.read (| vtype |));
                                  ("is_mutable", M.read (| is_mutable |));
                                  ("value", M.read (| value |))
                                ]
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "wasmi::isa::Instruction::Br",
                                0
                              |) in
                            let target := M.copy (| γ0_0 |) in
                            M.alloc (|
                              Value.StructRecord
                                "specs::step::StepInfo::Br"
                                [
                                  ("dst_pc",
                                    M.read (|
                                      M.SubPointer.get_struct_record_field (|
                                        target,
                                        "wasmi::isa::Target",
                                        "dst_pc"
                                      |)
                                    |));
                                  ("drop",
                                    M.read (|
                                      M.SubPointer.get_struct_record_field (|
                                        M.SubPointer.get_struct_record_field (|
                                          target,
                                          "wasmi::isa::Target",
                                          "drop_keep"
                                        |),
                                        "wasmi::isa::DropKeep",
                                        "drop"
                                      |)
                                    |));
                                  ("keep",
                                    M.read (|
                                      M.match_operator (|
                                        M.alloc (| Value.Tuple [] |),
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let γ :=
                                                M.SubPointer.get_struct_record_field (|
                                                  M.SubPointer.get_struct_record_field (|
                                                    target,
                                                    "wasmi::isa::Target",
                                                    "drop_keep"
                                                  |),
                                                  "wasmi::isa::DropKeep",
                                                  "keep"
                                                |) in
                                              let γ0_0 :=
                                                M.SubPointer.get_struct_tuple_field (|
                                                  γ,
                                                  "wasmi::isa::Keep::Single",
                                                  0
                                                |) in
                                              let t := M.copy (| γ0_0 |) in
                                              M.alloc (|
                                                M.call_closure (|
                                                  M.get_associated_function (|
                                                    Ty.apply
                                                      (Ty.path "slice")
                                                      [ Ty.path "specs::types::ValueType" ],
                                                    "into_vec",
                                                    [ Ty.path "alloc::alloc::Global" ]
                                                  |),
                                                  [
                                                    (* Unsize *)
                                                    M.pointer_coercion
                                                      (M.read (|
                                                        M.call_closure (|
                                                          M.get_associated_function (|
                                                            Ty.apply
                                                              (Ty.path "alloc::boxed::Box")
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "array")
                                                                  [
                                                                    Ty.path
                                                                      "specs::types::ValueType"
                                                                  ];
                                                                Ty.path "alloc::alloc::Global"
                                                              ],
                                                            "new",
                                                            []
                                                          |),
                                                          [
                                                            M.alloc (|
                                                              Value.Array
                                                                [
                                                                  M.call_closure (|
                                                                    M.get_trait_method (|
                                                                      "core::convert::Into",
                                                                      Ty.path
                                                                        "parity_wasm::elements::types::ValueType",
                                                                      [
                                                                        Ty.path
                                                                          "specs::types::ValueType"
                                                                      ],
                                                                      "into",
                                                                      []
                                                                    |),
                                                                    [ M.read (| t |) ]
                                                                  |)
                                                                ]
                                                            |)
                                                          ]
                                                        |)
                                                      |))
                                                  ]
                                                |)
                                              |)));
                                          fun γ =>
                                            ltac:(M.monadic
                                              (M.alloc (|
                                                M.call_closure (|
                                                  M.get_associated_function (|
                                                    Ty.apply
                                                      (Ty.path "alloc::vec::Vec")
                                                      [
                                                        Ty.path "specs::types::ValueType";
                                                        Ty.path "alloc::alloc::Global"
                                                      ],
                                                    "new",
                                                    []
                                                  |),
                                                  []
                                                |)
                                              |)))
                                        ]
                                      |)
                                    |));
                                  ("keep_values",
                                    M.read (|
                                      M.match_operator (|
                                        M.SubPointer.get_struct_record_field (|
                                          M.SubPointer.get_struct_record_field (|
                                            target,
                                            "wasmi::isa::Target",
                                            "drop_keep"
                                          |),
                                          "wasmi::isa::DropKeep",
                                          "keep"
                                        |),
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let γ0_0 :=
                                                M.SubPointer.get_struct_tuple_field (|
                                                  γ,
                                                  "wasmi::isa::Keep::Single",
                                                  0
                                                |) in
                                              let t := M.copy (| γ0_0 |) in
                                              M.alloc (|
                                                M.call_closure (|
                                                  M.get_associated_function (|
                                                    Ty.apply (Ty.path "slice") [ Ty.path "u64" ],
                                                    "into_vec",
                                                    [ Ty.path "alloc::alloc::Global" ]
                                                  |),
                                                  [
                                                    (* Unsize *)
                                                    M.pointer_coercion
                                                      (M.read (|
                                                        M.call_closure (|
                                                          M.get_associated_function (|
                                                            Ty.apply
                                                              (Ty.path "alloc::boxed::Box")
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "array")
                                                                  [ Ty.path "u64" ];
                                                                Ty.path "alloc::alloc::Global"
                                                              ],
                                                            "new",
                                                            []
                                                          |),
                                                          [
                                                            M.alloc (|
                                                              Value.Array
                                                                [
                                                                  M.call_closure (|
                                                                    M.get_function (|
                                                                      "wasmi::runner::from_value_internal_to_u64_with_typ",
                                                                      []
                                                                    |),
                                                                    [
                                                                      M.call_closure (|
                                                                        M.get_trait_method (|
                                                                          "core::convert::Into",
                                                                          Ty.path
                                                                            "parity_wasm::elements::types::ValueType",
                                                                          [
                                                                            Ty.path
                                                                              "specs::mtable::VarType"
                                                                          ],
                                                                          "into",
                                                                          []
                                                                        |),
                                                                        [ M.read (| t |) ]
                                                                      |);
                                                                      M.read (|
                                                                        M.call_closure (|
                                                                          M.get_associated_function (|
                                                                            Ty.path
                                                                              "wasmi::runner::ValueStack",
                                                                            "top",
                                                                            []
                                                                          |),
                                                                          [ M.read (| value_stack |)
                                                                          ]
                                                                        |)
                                                                      |)
                                                                    ]
                                                                  |)
                                                                ]
                                                            |)
                                                          ]
                                                        |)
                                                      |))
                                                  ]
                                                |)
                                              |)));
                                          fun γ =>
                                            ltac:(M.monadic
                                              (M.alloc (|
                                                M.call_closure (|
                                                  M.get_associated_function (|
                                                    Ty.apply
                                                      (Ty.path "alloc::vec::Vec")
                                                      [
                                                        Ty.path "u64";
                                                        Ty.path "alloc::alloc::Global"
                                                      ],
                                                    "new",
                                                    []
                                                  |),
                                                  []
                                                |)
                                              |)))
                                        ]
                                      |)
                                    |))
                                ]
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "wasmi::isa::Instruction::BrIfEqz",
                                0
                              |) in
                            let target := M.copy (| γ0_0 |) in
                            M.match_operator (|
                              M.alloc (| Value.Tuple [] |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ :=
                                      M.alloc (|
                                        M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.apply
                                              (Ty.path "core::option::Option")
                                              [
                                                Ty.path
                                                  "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::RunInstructionTracePre"
                                              ],
                                            "unwrap",
                                            []
                                          |),
                                          [ M.read (| current_event |) ]
                                        |)
                                      |) in
                                    let γ0_0 :=
                                      M.SubPointer.get_struct_record_field (|
                                        γ,
                                        "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::RunInstructionTracePre::BrIfEqz",
                                        "value"
                                      |) in
                                    let value := M.copy (| γ0_0 |) in
                                    M.alloc (|
                                      Value.StructRecord
                                        "specs::step::StepInfo::BrIfEqz"
                                        [
                                          ("condition", M.read (| value |));
                                          ("dst_pc",
                                            M.read (|
                                              M.SubPointer.get_struct_record_field (|
                                                target,
                                                "wasmi::isa::Target",
                                                "dst_pc"
                                              |)
                                            |));
                                          ("drop",
                                            M.read (|
                                              M.SubPointer.get_struct_record_field (|
                                                M.SubPointer.get_struct_record_field (|
                                                  target,
                                                  "wasmi::isa::Target",
                                                  "drop_keep"
                                                |),
                                                "wasmi::isa::DropKeep",
                                                "drop"
                                              |)
                                            |));
                                          ("keep",
                                            M.read (|
                                              M.match_operator (|
                                                M.alloc (| Value.Tuple [] |),
                                                [
                                                  fun γ =>
                                                    ltac:(M.monadic
                                                      (let γ :=
                                                        M.SubPointer.get_struct_record_field (|
                                                          M.SubPointer.get_struct_record_field (|
                                                            target,
                                                            "wasmi::isa::Target",
                                                            "drop_keep"
                                                          |),
                                                          "wasmi::isa::DropKeep",
                                                          "keep"
                                                        |) in
                                                      let γ0_0 :=
                                                        M.SubPointer.get_struct_tuple_field (|
                                                          γ,
                                                          "wasmi::isa::Keep::Single",
                                                          0
                                                        |) in
                                                      let t := M.copy (| γ0_0 |) in
                                                      M.alloc (|
                                                        M.call_closure (|
                                                          M.get_associated_function (|
                                                            Ty.apply
                                                              (Ty.path "slice")
                                                              [ Ty.path "specs::types::ValueType" ],
                                                            "into_vec",
                                                            [ Ty.path "alloc::alloc::Global" ]
                                                          |),
                                                          [
                                                            (* Unsize *)
                                                            M.pointer_coercion
                                                              (M.read (|
                                                                M.call_closure (|
                                                                  M.get_associated_function (|
                                                                    Ty.apply
                                                                      (Ty.path "alloc::boxed::Box")
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path "array")
                                                                          [
                                                                            Ty.path
                                                                              "specs::types::ValueType"
                                                                          ];
                                                                        Ty.path
                                                                          "alloc::alloc::Global"
                                                                      ],
                                                                    "new",
                                                                    []
                                                                  |),
                                                                  [
                                                                    M.alloc (|
                                                                      Value.Array
                                                                        [
                                                                          M.call_closure (|
                                                                            M.get_trait_method (|
                                                                              "core::convert::Into",
                                                                              Ty.path
                                                                                "parity_wasm::elements::types::ValueType",
                                                                              [
                                                                                Ty.path
                                                                                  "specs::types::ValueType"
                                                                              ],
                                                                              "into",
                                                                              []
                                                                            |),
                                                                            [ M.read (| t |) ]
                                                                          |)
                                                                        ]
                                                                    |)
                                                                  ]
                                                                |)
                                                              |))
                                                          ]
                                                        |)
                                                      |)));
                                                  fun γ =>
                                                    ltac:(M.monadic
                                                      (M.alloc (|
                                                        M.call_closure (|
                                                          M.get_associated_function (|
                                                            Ty.apply
                                                              (Ty.path "alloc::vec::Vec")
                                                              [
                                                                Ty.path "specs::types::ValueType";
                                                                Ty.path "alloc::alloc::Global"
                                                              ],
                                                            "new",
                                                            []
                                                          |),
                                                          []
                                                        |)
                                                      |)))
                                                ]
                                              |)
                                            |));
                                          ("keep_values",
                                            M.read (|
                                              M.match_operator (|
                                                M.SubPointer.get_struct_record_field (|
                                                  M.SubPointer.get_struct_record_field (|
                                                    target,
                                                    "wasmi::isa::Target",
                                                    "drop_keep"
                                                  |),
                                                  "wasmi::isa::DropKeep",
                                                  "keep"
                                                |),
                                                [
                                                  fun γ =>
                                                    ltac:(M.monadic
                                                      (let γ0_0 :=
                                                        M.SubPointer.get_struct_tuple_field (|
                                                          γ,
                                                          "wasmi::isa::Keep::Single",
                                                          0
                                                        |) in
                                                      let t := M.copy (| γ0_0 |) in
                                                      M.alloc (|
                                                        M.call_closure (|
                                                          M.get_associated_function (|
                                                            Ty.apply
                                                              (Ty.path "slice")
                                                              [ Ty.path "u64" ],
                                                            "into_vec",
                                                            [ Ty.path "alloc::alloc::Global" ]
                                                          |),
                                                          [
                                                            (* Unsize *)
                                                            M.pointer_coercion
                                                              (M.read (|
                                                                M.call_closure (|
                                                                  M.get_associated_function (|
                                                                    Ty.apply
                                                                      (Ty.path "alloc::boxed::Box")
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path "array")
                                                                          [ Ty.path "u64" ];
                                                                        Ty.path
                                                                          "alloc::alloc::Global"
                                                                      ],
                                                                    "new",
                                                                    []
                                                                  |),
                                                                  [
                                                                    M.alloc (|
                                                                      Value.Array
                                                                        [
                                                                          M.call_closure (|
                                                                            M.get_function (|
                                                                              "wasmi::runner::from_value_internal_to_u64_with_typ",
                                                                              []
                                                                            |),
                                                                            [
                                                                              M.call_closure (|
                                                                                M.get_trait_method (|
                                                                                  "core::convert::Into",
                                                                                  Ty.path
                                                                                    "parity_wasm::elements::types::ValueType",
                                                                                  [
                                                                                    Ty.path
                                                                                      "specs::mtable::VarType"
                                                                                  ],
                                                                                  "into",
                                                                                  []
                                                                                |),
                                                                                [ M.read (| t |) ]
                                                                              |);
                                                                              M.read (|
                                                                                M.call_closure (|
                                                                                  M.get_associated_function (|
                                                                                    Ty.path
                                                                                      "wasmi::runner::ValueStack",
                                                                                    "top",
                                                                                    []
                                                                                  |),
                                                                                  [
                                                                                    M.read (|
                                                                                      value_stack
                                                                                    |)
                                                                                  ]
                                                                                |)
                                                                              |)
                                                                            ]
                                                                          |)
                                                                        ]
                                                                    |)
                                                                  ]
                                                                |)
                                                              |))
                                                          ]
                                                        |)
                                                      |)));
                                                  fun γ =>
                                                    ltac:(M.monadic
                                                      (M.alloc (|
                                                        M.call_closure (|
                                                          M.get_associated_function (|
                                                            Ty.apply
                                                              (Ty.path "alloc::vec::Vec")
                                                              [
                                                                Ty.path "u64";
                                                                Ty.path "alloc::alloc::Global"
                                                              ],
                                                            "new",
                                                            []
                                                          |),
                                                          []
                                                        |)
                                                      |)))
                                                ]
                                              |)
                                            |))
                                        ]
                                    |)));
                                fun γ =>
                                  ltac:(M.monadic
                                    (M.alloc (|
                                      M.never_to_any (|
                                        M.call_closure (|
                                          M.get_function (| "core::panicking::panic", [] |),
                                          [
                                            M.read (|
                                              Value.String
                                                "internal error: entered unreachable code"
                                            |)
                                          ]
                                        |)
                                      |)
                                    |)))
                              ]
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "wasmi::isa::Instruction::BrIfNez",
                                0
                              |) in
                            let target := M.copy (| γ0_0 |) in
                            M.match_operator (|
                              M.alloc (| Value.Tuple [] |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ :=
                                      M.alloc (|
                                        M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.apply
                                              (Ty.path "core::option::Option")
                                              [
                                                Ty.path
                                                  "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::RunInstructionTracePre"
                                              ],
                                            "unwrap",
                                            []
                                          |),
                                          [ M.read (| current_event |) ]
                                        |)
                                      |) in
                                    let γ0_0 :=
                                      M.SubPointer.get_struct_record_field (|
                                        γ,
                                        "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::RunInstructionTracePre::BrIfNez",
                                        "value"
                                      |) in
                                    let value := M.copy (| γ0_0 |) in
                                    M.alloc (|
                                      Value.StructRecord
                                        "specs::step::StepInfo::BrIfNez"
                                        [
                                          ("condition", M.read (| value |));
                                          ("dst_pc",
                                            M.read (|
                                              M.SubPointer.get_struct_record_field (|
                                                target,
                                                "wasmi::isa::Target",
                                                "dst_pc"
                                              |)
                                            |));
                                          ("drop",
                                            M.read (|
                                              M.SubPointer.get_struct_record_field (|
                                                M.SubPointer.get_struct_record_field (|
                                                  target,
                                                  "wasmi::isa::Target",
                                                  "drop_keep"
                                                |),
                                                "wasmi::isa::DropKeep",
                                                "drop"
                                              |)
                                            |));
                                          ("keep",
                                            M.read (|
                                              M.match_operator (|
                                                M.alloc (| Value.Tuple [] |),
                                                [
                                                  fun γ =>
                                                    ltac:(M.monadic
                                                      (let γ :=
                                                        M.SubPointer.get_struct_record_field (|
                                                          M.SubPointer.get_struct_record_field (|
                                                            target,
                                                            "wasmi::isa::Target",
                                                            "drop_keep"
                                                          |),
                                                          "wasmi::isa::DropKeep",
                                                          "keep"
                                                        |) in
                                                      let γ0_0 :=
                                                        M.SubPointer.get_struct_tuple_field (|
                                                          γ,
                                                          "wasmi::isa::Keep::Single",
                                                          0
                                                        |) in
                                                      let t := M.copy (| γ0_0 |) in
                                                      M.alloc (|
                                                        M.call_closure (|
                                                          M.get_associated_function (|
                                                            Ty.apply
                                                              (Ty.path "slice")
                                                              [ Ty.path "specs::types::ValueType" ],
                                                            "into_vec",
                                                            [ Ty.path "alloc::alloc::Global" ]
                                                          |),
                                                          [
                                                            (* Unsize *)
                                                            M.pointer_coercion
                                                              (M.read (|
                                                                M.call_closure (|
                                                                  M.get_associated_function (|
                                                                    Ty.apply
                                                                      (Ty.path "alloc::boxed::Box")
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path "array")
                                                                          [
                                                                            Ty.path
                                                                              "specs::types::ValueType"
                                                                          ];
                                                                        Ty.path
                                                                          "alloc::alloc::Global"
                                                                      ],
                                                                    "new",
                                                                    []
                                                                  |),
                                                                  [
                                                                    M.alloc (|
                                                                      Value.Array
                                                                        [
                                                                          M.call_closure (|
                                                                            M.get_trait_method (|
                                                                              "core::convert::Into",
                                                                              Ty.path
                                                                                "parity_wasm::elements::types::ValueType",
                                                                              [
                                                                                Ty.path
                                                                                  "specs::types::ValueType"
                                                                              ],
                                                                              "into",
                                                                              []
                                                                            |),
                                                                            [ M.read (| t |) ]
                                                                          |)
                                                                        ]
                                                                    |)
                                                                  ]
                                                                |)
                                                              |))
                                                          ]
                                                        |)
                                                      |)));
                                                  fun γ =>
                                                    ltac:(M.monadic
                                                      (M.alloc (|
                                                        M.call_closure (|
                                                          M.get_associated_function (|
                                                            Ty.apply
                                                              (Ty.path "alloc::vec::Vec")
                                                              [
                                                                Ty.path "specs::types::ValueType";
                                                                Ty.path "alloc::alloc::Global"
                                                              ],
                                                            "new",
                                                            []
                                                          |),
                                                          []
                                                        |)
                                                      |)))
                                                ]
                                              |)
                                            |));
                                          ("keep_values",
                                            M.read (|
                                              M.match_operator (|
                                                M.SubPointer.get_struct_record_field (|
                                                  M.SubPointer.get_struct_record_field (|
                                                    target,
                                                    "wasmi::isa::Target",
                                                    "drop_keep"
                                                  |),
                                                  "wasmi::isa::DropKeep",
                                                  "keep"
                                                |),
                                                [
                                                  fun γ =>
                                                    ltac:(M.monadic
                                                      (let γ0_0 :=
                                                        M.SubPointer.get_struct_tuple_field (|
                                                          γ,
                                                          "wasmi::isa::Keep::Single",
                                                          0
                                                        |) in
                                                      let t := M.copy (| γ0_0 |) in
                                                      M.alloc (|
                                                        M.call_closure (|
                                                          M.get_associated_function (|
                                                            Ty.apply
                                                              (Ty.path "slice")
                                                              [ Ty.path "u64" ],
                                                            "into_vec",
                                                            [ Ty.path "alloc::alloc::Global" ]
                                                          |),
                                                          [
                                                            (* Unsize *)
                                                            M.pointer_coercion
                                                              (M.read (|
                                                                M.call_closure (|
                                                                  M.get_associated_function (|
                                                                    Ty.apply
                                                                      (Ty.path "alloc::boxed::Box")
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path "array")
                                                                          [ Ty.path "u64" ];
                                                                        Ty.path
                                                                          "alloc::alloc::Global"
                                                                      ],
                                                                    "new",
                                                                    []
                                                                  |),
                                                                  [
                                                                    M.alloc (|
                                                                      Value.Array
                                                                        [
                                                                          M.call_closure (|
                                                                            M.get_function (|
                                                                              "wasmi::runner::from_value_internal_to_u64_with_typ",
                                                                              []
                                                                            |),
                                                                            [
                                                                              M.call_closure (|
                                                                                M.get_trait_method (|
                                                                                  "core::convert::Into",
                                                                                  Ty.path
                                                                                    "parity_wasm::elements::types::ValueType",
                                                                                  [
                                                                                    Ty.path
                                                                                      "specs::mtable::VarType"
                                                                                  ],
                                                                                  "into",
                                                                                  []
                                                                                |),
                                                                                [ M.read (| t |) ]
                                                                              |);
                                                                              M.read (|
                                                                                M.call_closure (|
                                                                                  M.get_associated_function (|
                                                                                    Ty.path
                                                                                      "wasmi::runner::ValueStack",
                                                                                    "top",
                                                                                    []
                                                                                  |),
                                                                                  [
                                                                                    M.read (|
                                                                                      value_stack
                                                                                    |)
                                                                                  ]
                                                                                |)
                                                                              |)
                                                                            ]
                                                                          |)
                                                                        ]
                                                                    |)
                                                                  ]
                                                                |)
                                                              |))
                                                          ]
                                                        |)
                                                      |)));
                                                  fun γ =>
                                                    ltac:(M.monadic
                                                      (M.alloc (|
                                                        M.call_closure (|
                                                          M.get_associated_function (|
                                                            Ty.apply
                                                              (Ty.path "alloc::vec::Vec")
                                                              [
                                                                Ty.path "u64";
                                                                Ty.path "alloc::alloc::Global"
                                                              ],
                                                            "new",
                                                            []
                                                          |),
                                                          []
                                                        |)
                                                      |)))
                                                ]
                                              |)
                                            |))
                                        ]
                                    |)));
                                fun γ =>
                                  ltac:(M.monadic
                                    (M.alloc (|
                                      M.never_to_any (|
                                        M.call_closure (|
                                          M.get_function (| "core::panicking::panic", [] |),
                                          [
                                            M.read (|
                                              Value.String
                                                "internal error: entered unreachable code"
                                            |)
                                          ]
                                        |)
                                      |)
                                    |)))
                              ]
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "wasmi::isa::Instruction::BrTable",
                                0
                              |) in
                            let targets := M.copy (| γ0_0 |) in
                            M.match_operator (|
                              M.alloc (| Value.Tuple [] |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ :=
                                      M.alloc (|
                                        M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.apply
                                              (Ty.path "core::option::Option")
                                              [
                                                Ty.path
                                                  "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::RunInstructionTracePre"
                                              ],
                                            "unwrap",
                                            []
                                          |),
                                          [ M.read (| current_event |) ]
                                        |)
                                      |) in
                                    let γ0_0 :=
                                      M.SubPointer.get_struct_record_field (|
                                        γ,
                                        "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::RunInstructionTracePre::BrTable",
                                        "index"
                                      |) in
                                    let index := M.copy (| γ0_0 |) in
                                    M.alloc (|
                                      Value.StructRecord
                                        "specs::step::StepInfo::BrTable"
                                        [
                                          ("index", M.read (| index |));
                                          ("dst_pc",
                                            M.read (|
                                              M.SubPointer.get_struct_record_field (|
                                                M.alloc (|
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.path "wasmi::isa::BrTargets",
                                                      "get",
                                                      []
                                                    |),
                                                    [ targets; M.rust_cast (M.read (| index |)) ]
                                                  |)
                                                |),
                                                "wasmi::isa::Target",
                                                "dst_pc"
                                              |)
                                            |));
                                          ("drop",
                                            M.read (|
                                              M.SubPointer.get_struct_record_field (|
                                                M.SubPointer.get_struct_record_field (|
                                                  M.alloc (|
                                                    M.call_closure (|
                                                      M.get_associated_function (|
                                                        Ty.path "wasmi::isa::BrTargets",
                                                        "get",
                                                        []
                                                      |),
                                                      [ targets; M.rust_cast (M.read (| index |)) ]
                                                    |)
                                                  |),
                                                  "wasmi::isa::Target",
                                                  "drop_keep"
                                                |),
                                                "wasmi::isa::DropKeep",
                                                "drop"
                                              |)
                                            |));
                                          ("keep",
                                            M.read (|
                                              M.match_operator (|
                                                M.alloc (| Value.Tuple [] |),
                                                [
                                                  fun γ =>
                                                    ltac:(M.monadic
                                                      (let γ :=
                                                        M.SubPointer.get_struct_record_field (|
                                                          M.SubPointer.get_struct_record_field (|
                                                            M.alloc (|
                                                              M.call_closure (|
                                                                M.get_associated_function (|
                                                                  Ty.path "wasmi::isa::BrTargets",
                                                                  "get",
                                                                  []
                                                                |),
                                                                [
                                                                  targets;
                                                                  M.rust_cast (M.read (| index |))
                                                                ]
                                                              |)
                                                            |),
                                                            "wasmi::isa::Target",
                                                            "drop_keep"
                                                          |),
                                                          "wasmi::isa::DropKeep",
                                                          "keep"
                                                        |) in
                                                      let γ0_0 :=
                                                        M.SubPointer.get_struct_tuple_field (|
                                                          γ,
                                                          "wasmi::isa::Keep::Single",
                                                          0
                                                        |) in
                                                      let t := M.copy (| γ0_0 |) in
                                                      M.alloc (|
                                                        M.call_closure (|
                                                          M.get_associated_function (|
                                                            Ty.apply
                                                              (Ty.path "slice")
                                                              [ Ty.path "specs::types::ValueType" ],
                                                            "into_vec",
                                                            [ Ty.path "alloc::alloc::Global" ]
                                                          |),
                                                          [
                                                            (* Unsize *)
                                                            M.pointer_coercion
                                                              (M.read (|
                                                                M.call_closure (|
                                                                  M.get_associated_function (|
                                                                    Ty.apply
                                                                      (Ty.path "alloc::boxed::Box")
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path "array")
                                                                          [
                                                                            Ty.path
                                                                              "specs::types::ValueType"
                                                                          ];
                                                                        Ty.path
                                                                          "alloc::alloc::Global"
                                                                      ],
                                                                    "new",
                                                                    []
                                                                  |),
                                                                  [
                                                                    M.alloc (|
                                                                      Value.Array
                                                                        [
                                                                          M.call_closure (|
                                                                            M.get_trait_method (|
                                                                              "core::convert::Into",
                                                                              Ty.path
                                                                                "parity_wasm::elements::types::ValueType",
                                                                              [
                                                                                Ty.path
                                                                                  "specs::types::ValueType"
                                                                              ],
                                                                              "into",
                                                                              []
                                                                            |),
                                                                            [ M.read (| t |) ]
                                                                          |)
                                                                        ]
                                                                    |)
                                                                  ]
                                                                |)
                                                              |))
                                                          ]
                                                        |)
                                                      |)));
                                                  fun γ =>
                                                    ltac:(M.monadic
                                                      (M.alloc (|
                                                        M.call_closure (|
                                                          M.get_associated_function (|
                                                            Ty.apply
                                                              (Ty.path "alloc::vec::Vec")
                                                              [
                                                                Ty.path "specs::types::ValueType";
                                                                Ty.path "alloc::alloc::Global"
                                                              ],
                                                            "new",
                                                            []
                                                          |),
                                                          []
                                                        |)
                                                      |)))
                                                ]
                                              |)
                                            |));
                                          ("keep_values",
                                            M.read (|
                                              M.match_operator (|
                                                M.SubPointer.get_struct_record_field (|
                                                  M.SubPointer.get_struct_record_field (|
                                                    M.alloc (|
                                                      M.call_closure (|
                                                        M.get_associated_function (|
                                                          Ty.path "wasmi::isa::BrTargets",
                                                          "get",
                                                          []
                                                        |),
                                                        [ targets; M.rust_cast (M.read (| index |))
                                                        ]
                                                      |)
                                                    |),
                                                    "wasmi::isa::Target",
                                                    "drop_keep"
                                                  |),
                                                  "wasmi::isa::DropKeep",
                                                  "keep"
                                                |),
                                                [
                                                  fun γ =>
                                                    ltac:(M.monadic
                                                      (let γ0_0 :=
                                                        M.SubPointer.get_struct_tuple_field (|
                                                          γ,
                                                          "wasmi::isa::Keep::Single",
                                                          0
                                                        |) in
                                                      let t := M.copy (| γ0_0 |) in
                                                      M.alloc (|
                                                        M.call_closure (|
                                                          M.get_associated_function (|
                                                            Ty.apply
                                                              (Ty.path "slice")
                                                              [ Ty.path "u64" ],
                                                            "into_vec",
                                                            [ Ty.path "alloc::alloc::Global" ]
                                                          |),
                                                          [
                                                            (* Unsize *)
                                                            M.pointer_coercion
                                                              (M.read (|
                                                                M.call_closure (|
                                                                  M.get_associated_function (|
                                                                    Ty.apply
                                                                      (Ty.path "alloc::boxed::Box")
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path "array")
                                                                          [ Ty.path "u64" ];
                                                                        Ty.path
                                                                          "alloc::alloc::Global"
                                                                      ],
                                                                    "new",
                                                                    []
                                                                  |),
                                                                  [
                                                                    M.alloc (|
                                                                      Value.Array
                                                                        [
                                                                          M.call_closure (|
                                                                            M.get_function (|
                                                                              "wasmi::runner::from_value_internal_to_u64_with_typ",
                                                                              []
                                                                            |),
                                                                            [
                                                                              M.call_closure (|
                                                                                M.get_trait_method (|
                                                                                  "core::convert::Into",
                                                                                  Ty.path
                                                                                    "parity_wasm::elements::types::ValueType",
                                                                                  [
                                                                                    Ty.path
                                                                                      "specs::mtable::VarType"
                                                                                  ],
                                                                                  "into",
                                                                                  []
                                                                                |),
                                                                                [ M.read (| t |) ]
                                                                              |);
                                                                              M.read (|
                                                                                M.call_closure (|
                                                                                  M.get_associated_function (|
                                                                                    Ty.path
                                                                                      "wasmi::runner::ValueStack",
                                                                                    "top",
                                                                                    []
                                                                                  |),
                                                                                  [
                                                                                    M.read (|
                                                                                      value_stack
                                                                                    |)
                                                                                  ]
                                                                                |)
                                                                              |)
                                                                            ]
                                                                          |)
                                                                        ]
                                                                    |)
                                                                  ]
                                                                |)
                                                              |))
                                                          ]
                                                        |)
                                                      |)));
                                                  fun γ =>
                                                    ltac:(M.monadic
                                                      (M.alloc (|
                                                        M.call_closure (|
                                                          M.get_associated_function (|
                                                            Ty.apply
                                                              (Ty.path "alloc::vec::Vec")
                                                              [
                                                                Ty.path "u64";
                                                                Ty.path "alloc::alloc::Global"
                                                              ],
                                                            "new",
                                                            []
                                                          |),
                                                          []
                                                        |)
                                                      |)))
                                                ]
                                              |)
                                            |))
                                        ]
                                    |)));
                                fun γ =>
                                  ltac:(M.monadic
                                    (M.alloc (|
                                      M.never_to_any (|
                                        M.call_closure (|
                                          M.get_function (| "core::panicking::panic", [] |),
                                          [
                                            M.read (|
                                              Value.String
                                                "internal error: entered unreachable code"
                                            |)
                                          ]
                                        |)
                                      |)
                                    |)))
                              ]
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "wasmi::isa::Instruction::Return",
                                0
                              |) in
                            let γ1_0 :=
                              M.SubPointer.get_struct_record_field (|
                                γ0_0,
                                "wasmi::isa::DropKeep",
                                "drop"
                              |) in
                            let γ1_1 :=
                              M.SubPointer.get_struct_record_field (|
                                γ0_0,
                                "wasmi::isa::DropKeep",
                                "keep"
                              |) in
                            let drop := M.copy (| γ1_0 |) in
                            let keep := M.copy (| γ1_1 |) in
                            let drop_values :=
                              M.alloc (|
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.apply
                                      (Ty.path "alloc::vec::Vec")
                                      [
                                        Ty.path "wasmi::runner::ValueInternal";
                                        Ty.path "alloc::alloc::Global"
                                      ],
                                    "new",
                                    []
                                  |),
                                  []
                                |)
                              |) in
                            let _ :=
                              M.use
                                (M.match_operator (|
                                  M.alloc (|
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::iter::traits::collect::IntoIterator",
                                        Ty.apply
                                          (Ty.path "core::ops::range::RangeInclusive")
                                          [ Ty.path "u32" ],
                                        [],
                                        "into_iter",
                                        []
                                      |),
                                      [
                                        M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.apply
                                              (Ty.path "core::ops::range::RangeInclusive")
                                              [ Ty.path "u32" ],
                                            "new",
                                            []
                                          |),
                                          [ Value.Integer 1; M.read (| drop |) ]
                                        |)
                                      ]
                                    |)
                                  |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let iter := M.copy (| γ |) in
                                        M.loop (|
                                          ltac:(M.monadic
                                            (let _ :=
                                              M.match_operator (|
                                                M.alloc (|
                                                  M.call_closure (|
                                                    M.get_trait_method (|
                                                      "core::iter::traits::iterator::Iterator",
                                                      Ty.apply
                                                        (Ty.path "core::ops::range::RangeInclusive")
                                                        [ Ty.path "u32" ],
                                                      [],
                                                      "next",
                                                      []
                                                    |),
                                                    [ iter ]
                                                  |)
                                                |),
                                                [
                                                  fun γ =>
                                                    ltac:(M.monadic
                                                      (M.alloc (|
                                                        M.never_to_any (|
                                                          M.read (| M.break (||) |)
                                                        |)
                                                      |)));
                                                  fun γ =>
                                                    ltac:(M.monadic
                                                      (let γ0_0 :=
                                                        M.SubPointer.get_struct_tuple_field (|
                                                          γ,
                                                          "core::option::Option::Some",
                                                          0
                                                        |) in
                                                      let i := M.copy (| γ0_0 |) in
                                                      let _ :=
                                                        M.alloc (|
                                                          M.call_closure (|
                                                            M.get_associated_function (|
                                                              Ty.apply
                                                                (Ty.path "alloc::vec::Vec")
                                                                [
                                                                  Ty.path
                                                                    "wasmi::runner::ValueInternal";
                                                                  Ty.path "alloc::alloc::Global"
                                                                ],
                                                              "push",
                                                              []
                                                            |),
                                                            [
                                                              drop_values;
                                                              M.read (|
                                                                M.call_closure (|
                                                                  M.get_associated_function (|
                                                                    Ty.path
                                                                      "wasmi::runner::ValueStack",
                                                                    "pick",
                                                                    []
                                                                  |),
                                                                  [
                                                                    M.read (| value_stack |);
                                                                    M.rust_cast (M.read (| i |))
                                                                  ]
                                                                |)
                                                              |)
                                                            ]
                                                          |)
                                                        |) in
                                                      M.alloc (| Value.Tuple [] |)))
                                                ]
                                              |) in
                                            M.alloc (| Value.Tuple [] |)))
                                        |)))
                                  ]
                                |)) in
                            M.alloc (|
                              Value.StructRecord
                                "specs::step::StepInfo::Return"
                                [
                                  ("drop", M.read (| drop |));
                                  ("keep",
                                    M.read (|
                                      M.match_operator (|
                                        M.alloc (| Value.Tuple [] |),
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let γ := keep in
                                              let γ0_0 :=
                                                M.SubPointer.get_struct_tuple_field (|
                                                  γ,
                                                  "wasmi::isa::Keep::Single",
                                                  0
                                                |) in
                                              let t := M.copy (| γ0_0 |) in
                                              M.alloc (|
                                                M.call_closure (|
                                                  M.get_associated_function (|
                                                    Ty.apply
                                                      (Ty.path "slice")
                                                      [ Ty.path "specs::types::ValueType" ],
                                                    "into_vec",
                                                    [ Ty.path "alloc::alloc::Global" ]
                                                  |),
                                                  [
                                                    (* Unsize *)
                                                    M.pointer_coercion
                                                      (M.read (|
                                                        M.call_closure (|
                                                          M.get_associated_function (|
                                                            Ty.apply
                                                              (Ty.path "alloc::boxed::Box")
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "array")
                                                                  [
                                                                    Ty.path
                                                                      "specs::types::ValueType"
                                                                  ];
                                                                Ty.path "alloc::alloc::Global"
                                                              ],
                                                            "new",
                                                            []
                                                          |),
                                                          [
                                                            M.alloc (|
                                                              Value.Array
                                                                [
                                                                  M.call_closure (|
                                                                    M.get_trait_method (|
                                                                      "core::convert::Into",
                                                                      Ty.path
                                                                        "parity_wasm::elements::types::ValueType",
                                                                      [
                                                                        Ty.path
                                                                          "specs::types::ValueType"
                                                                      ],
                                                                      "into",
                                                                      []
                                                                    |),
                                                                    [ M.read (| t |) ]
                                                                  |)
                                                                ]
                                                            |)
                                                          ]
                                                        |)
                                                      |))
                                                  ]
                                                |)
                                              |)));
                                          fun γ =>
                                            ltac:(M.monadic
                                              (M.alloc (|
                                                M.call_closure (|
                                                  M.get_associated_function (|
                                                    Ty.apply
                                                      (Ty.path "alloc::vec::Vec")
                                                      [
                                                        Ty.path "specs::types::ValueType";
                                                        Ty.path "alloc::alloc::Global"
                                                      ],
                                                    "new",
                                                    []
                                                  |),
                                                  []
                                                |)
                                              |)))
                                        ]
                                      |)
                                    |));
                                  ("keep_values",
                                    M.read (|
                                      M.match_operator (|
                                        keep,
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let γ0_0 :=
                                                M.SubPointer.get_struct_tuple_field (|
                                                  γ,
                                                  "wasmi::isa::Keep::Single",
                                                  0
                                                |) in
                                              let t := M.copy (| γ0_0 |) in
                                              M.alloc (|
                                                M.call_closure (|
                                                  M.get_associated_function (|
                                                    Ty.apply (Ty.path "slice") [ Ty.path "u64" ],
                                                    "into_vec",
                                                    [ Ty.path "alloc::alloc::Global" ]
                                                  |),
                                                  [
                                                    (* Unsize *)
                                                    M.pointer_coercion
                                                      (M.read (|
                                                        M.call_closure (|
                                                          M.get_associated_function (|
                                                            Ty.apply
                                                              (Ty.path "alloc::boxed::Box")
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "array")
                                                                  [ Ty.path "u64" ];
                                                                Ty.path "alloc::alloc::Global"
                                                              ],
                                                            "new",
                                                            []
                                                          |),
                                                          [
                                                            M.alloc (|
                                                              Value.Array
                                                                [
                                                                  M.call_closure (|
                                                                    M.get_function (|
                                                                      "wasmi::runner::from_value_internal_to_u64_with_typ",
                                                                      []
                                                                    |),
                                                                    [
                                                                      M.call_closure (|
                                                                        M.get_trait_method (|
                                                                          "core::convert::Into",
                                                                          Ty.path
                                                                            "parity_wasm::elements::types::ValueType",
                                                                          [
                                                                            Ty.path
                                                                              "specs::mtable::VarType"
                                                                          ],
                                                                          "into",
                                                                          []
                                                                        |),
                                                                        [ M.read (| t |) ]
                                                                      |);
                                                                      M.read (|
                                                                        M.call_closure (|
                                                                          M.get_associated_function (|
                                                                            Ty.path
                                                                              "wasmi::runner::ValueStack",
                                                                            "top",
                                                                            []
                                                                          |),
                                                                          [ M.read (| value_stack |)
                                                                          ]
                                                                        |)
                                                                      |)
                                                                    ]
                                                                  |)
                                                                ]
                                                            |)
                                                          ]
                                                        |)
                                                      |))
                                                  ]
                                                |)
                                              |)));
                                          fun γ =>
                                            ltac:(M.monadic
                                              (M.alloc (|
                                                M.call_closure (|
                                                  M.get_associated_function (|
                                                    Ty.apply
                                                      (Ty.path "alloc::vec::Vec")
                                                      [
                                                        Ty.path "u64";
                                                        Ty.path "alloc::alloc::Global"
                                                      ],
                                                    "new",
                                                    []
                                                  |),
                                                  []
                                                |)
                                              |)))
                                        ]
                                      |)
                                    |))
                                ]
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (M.match_operator (|
                              M.alloc (| Value.Tuple [] |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ :=
                                      M.alloc (|
                                        M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.apply
                                              (Ty.path "core::option::Option")
                                              [
                                                Ty.path
                                                  "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::RunInstructionTracePre"
                                              ],
                                            "unwrap",
                                            []
                                          |),
                                          [ M.read (| current_event |) ]
                                        |)
                                      |) in
                                    M.alloc (|
                                      Value.StructTuple "specs::step::StepInfo::Drop" []
                                    |)));
                                fun γ =>
                                  ltac:(M.monadic
                                    (M.alloc (|
                                      M.never_to_any (|
                                        M.call_closure (|
                                          M.get_function (| "core::panicking::panic", [] |),
                                          [
                                            M.read (|
                                              Value.String
                                                "internal error: entered unreachable code"
                                            |)
                                          ]
                                        |)
                                      |)
                                    |)))
                              ]
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "wasmi::isa::Instruction::Select",
                                0
                              |) in
                            let vtype := M.copy (| γ0_0 |) in
                            M.match_operator (|
                              M.alloc (| Value.Tuple [] |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ :=
                                      M.alloc (|
                                        M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.apply
                                              (Ty.path "core::option::Option")
                                              [
                                                Ty.path
                                                  "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::RunInstructionTracePre"
                                              ],
                                            "unwrap",
                                            []
                                          |),
                                          [ M.read (| current_event |) ]
                                        |)
                                      |) in
                                    let γ0_0 :=
                                      M.SubPointer.get_struct_record_field (|
                                        γ,
                                        "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::RunInstructionTracePre::Select",
                                        "val1"
                                      |) in
                                    let γ0_1 :=
                                      M.SubPointer.get_struct_record_field (|
                                        γ,
                                        "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::RunInstructionTracePre::Select",
                                        "val2"
                                      |) in
                                    let γ0_2 :=
                                      M.SubPointer.get_struct_record_field (|
                                        γ,
                                        "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::RunInstructionTracePre::Select",
                                        "cond"
                                      |) in
                                    let val1 := M.copy (| γ0_0 |) in
                                    let val2 := M.copy (| γ0_1 |) in
                                    let cond := M.copy (| γ0_2 |) in
                                    M.alloc (|
                                      Value.StructRecord
                                        "specs::step::StepInfo::Select"
                                        [
                                          ("val1", M.read (| val1 |));
                                          ("val2", M.read (| val2 |));
                                          ("cond", M.read (| cond |));
                                          ("result",
                                            M.call_closure (|
                                              M.get_function (|
                                                "wasmi::runner::from_value_internal_to_u64_with_typ",
                                                []
                                              |),
                                              [
                                                M.call_closure (|
                                                  M.get_trait_method (|
                                                    "core::convert::Into",
                                                    Ty.path
                                                      "parity_wasm::elements::types::ValueType",
                                                    [ Ty.path "specs::mtable::VarType" ],
                                                    "into",
                                                    []
                                                  |),
                                                  [ M.read (| vtype |) ]
                                                |);
                                                M.read (|
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.path "wasmi::runner::ValueStack",
                                                      "top",
                                                      []
                                                    |),
                                                    [ M.read (| value_stack |) ]
                                                  |)
                                                |)
                                              ]
                                            |));
                                          ("vtype",
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "core::convert::Into",
                                                Ty.path "parity_wasm::elements::types::ValueType",
                                                [ Ty.path "specs::mtable::VarType" ],
                                                "into",
                                                []
                                              |),
                                              [ M.read (| vtype |) ]
                                            |))
                                        ]
                                    |)));
                                fun γ =>
                                  ltac:(M.monadic
                                    (M.alloc (|
                                      M.never_to_any (|
                                        M.call_closure (|
                                          M.get_function (| "core::panicking::panic", [] |),
                                          [
                                            M.read (|
                                              Value.String
                                                "internal error: entered unreachable code"
                                            |)
                                          ]
                                        |)
                                      |)
                                    |)))
                              ]
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "wasmi::isa::Instruction::Call",
                                0
                              |) in
                            let index := M.copy (| γ0_0 |) in
                            M.match_operator (|
                              M.alloc (| Value.Tuple [] |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ :=
                                      M.alloc (|
                                        M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.apply
                                              (Ty.path "core::option::Option")
                                              [
                                                Ty.path
                                                  "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::RunInstructionTracePre"
                                              ],
                                            "unwrap",
                                            []
                                          |),
                                          [ M.read (| current_event |) ]
                                        |)
                                      |) in
                                    let desc :=
                                      M.alloc (|
                                        M.call_closure (|
                                          M.get_trait_method (|
                                            "core::ops::index::Index",
                                            Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              [
                                                Ty.path
                                                  "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::FuncDesc";
                                                Ty.path "alloc::alloc::Global"
                                              ],
                                            [ Ty.path "usize" ],
                                            "index",
                                            []
                                          |),
                                          [
                                            M.SubPointer.get_struct_record_field (|
                                              M.read (| self |),
                                              "delphinus_zkwasm::runtime::monitor::plugins::table::TablePlugin",
                                              "function_table"
                                            |);
                                            M.rust_cast (M.read (| index |))
                                          ]
                                        |)
                                      |) in
                                    M.match_operator (|
                                      M.alloc (|
                                        M.SubPointer.get_struct_record_field (|
                                          M.read (| desc |),
                                          "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::FuncDesc",
                                          "ftype"
                                        |)
                                      |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let γ := M.read (| γ |) in
                                            M.alloc (|
                                              Value.StructRecord
                                                "specs::step::StepInfo::Call"
                                                [ ("index", M.read (| index |)) ]
                                            |)));
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let γ := M.read (| γ |) in
                                            let γ1_0 :=
                                              M.SubPointer.get_struct_record_field (|
                                                γ,
                                                "specs::types::FunctionType::HostFunction",
                                                "plugin"
                                              |) in
                                            let γ1_1 :=
                                              M.SubPointer.get_struct_record_field (|
                                                γ,
                                                "specs::types::FunctionType::HostFunction",
                                                "function_index"
                                              |) in
                                            let γ1_2 :=
                                              M.SubPointer.get_struct_record_field (|
                                                γ,
                                                "specs::types::FunctionType::HostFunction",
                                                "function_name"
                                              |) in
                                            let γ1_3 :=
                                              M.SubPointer.get_struct_record_field (|
                                                γ,
                                                "specs::types::FunctionType::HostFunction",
                                                "op_index_in_plugin"
                                              |) in
                                            let plugin := M.alloc (| γ1_0 |) in
                                            let host_function_idx := M.alloc (| γ1_1 |) in
                                            let function_name := M.alloc (| γ1_2 |) in
                                            let op_index_in_plugin := M.alloc (| γ1_3 |) in
                                            let params_len :=
                                              M.alloc (|
                                                M.call_closure (|
                                                  M.get_associated_function (|
                                                    Ty.apply
                                                      (Ty.path "slice")
                                                      [ Ty.path "wasmi_core::value::ValueType" ],
                                                    "len",
                                                    []
                                                  |),
                                                  [
                                                    M.call_closure (|
                                                      M.get_associated_function (|
                                                        Ty.path "wasmi::types::Signature",
                                                        "params",
                                                        []
                                                      |),
                                                      [
                                                        M.SubPointer.get_struct_record_field (|
                                                          M.read (| desc |),
                                                          "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::FuncDesc",
                                                          "signature"
                                                        |)
                                                      ]
                                                    |)
                                                  ]
                                                |)
                                              |) in
                                            let args :=
                                              M.alloc (|
                                                M.call_closure (|
                                                  M.get_associated_function (|
                                                    Ty.apply
                                                      (Ty.path "alloc::vec::Vec")
                                                      [
                                                        Ty.path "u64";
                                                        Ty.path "alloc::alloc::Global"
                                                      ],
                                                    "new",
                                                    []
                                                  |),
                                                  []
                                                |)
                                              |) in
                                            let signature :=
                                              M.alloc (|
                                                M.call_closure (|
                                                  M.get_trait_method (|
                                                    "core::convert::Into",
                                                    Ty.path "wasmi::types::Signature",
                                                    [ Ty.path "specs::host_function::Signature" ],
                                                    "into",
                                                    []
                                                  |),
                                                  [
                                                    M.call_closure (|
                                                      M.get_trait_method (|
                                                        "core::clone::Clone",
                                                        Ty.path "wasmi::types::Signature",
                                                        [],
                                                        "clone",
                                                        []
                                                      |),
                                                      [
                                                        M.SubPointer.get_struct_record_field (|
                                                          M.read (| desc |),
                                                          "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::FuncDesc",
                                                          "signature"
                                                        |)
                                                      ]
                                                    |)
                                                  ]
                                                |)
                                              |) in
                                            let params :=
                                              M.alloc (|
                                                M.call_closure (|
                                                  M.get_trait_method (|
                                                    "core::clone::Clone",
                                                    Ty.apply
                                                      (Ty.path "alloc::vec::Vec")
                                                      [
                                                        Ty.path "specs::types::ValueType";
                                                        Ty.path "alloc::alloc::Global"
                                                      ],
                                                    [],
                                                    "clone",
                                                    []
                                                  |),
                                                  [
                                                    M.SubPointer.get_struct_record_field (|
                                                      signature,
                                                      "specs::host_function::Signature",
                                                      "params"
                                                    |)
                                                  ]
                                                |)
                                              |) in
                                            let _ :=
                                              M.use
                                                (M.match_operator (|
                                                  M.alloc (|
                                                    M.call_closure (|
                                                      M.get_trait_method (|
                                                        "core::iter::traits::collect::IntoIterator",
                                                        Ty.apply
                                                          (Ty.path "core::ops::range::Range")
                                                          [ Ty.path "usize" ],
                                                        [],
                                                        "into_iter",
                                                        []
                                                      |),
                                                      [
                                                        Value.StructRecord
                                                          "core::ops::range::Range"
                                                          [
                                                            ("start", Value.Integer 0);
                                                            ("end_", M.read (| params_len |))
                                                          ]
                                                      ]
                                                    |)
                                                  |),
                                                  [
                                                    fun γ =>
                                                      ltac:(M.monadic
                                                        (let iter := M.copy (| γ |) in
                                                        M.loop (|
                                                          ltac:(M.monadic
                                                            (let _ :=
                                                              M.match_operator (|
                                                                M.alloc (|
                                                                  M.call_closure (|
                                                                    M.get_trait_method (|
                                                                      "core::iter::traits::iterator::Iterator",
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "core::ops::range::Range")
                                                                        [ Ty.path "usize" ],
                                                                      [],
                                                                      "next",
                                                                      []
                                                                    |),
                                                                    [ iter ]
                                                                  |)
                                                                |),
                                                                [
                                                                  fun γ =>
                                                                    ltac:(M.monadic
                                                                      (M.alloc (|
                                                                        M.never_to_any (|
                                                                          M.read (| M.break (||) |)
                                                                        |)
                                                                      |)));
                                                                  fun γ =>
                                                                    ltac:(M.monadic
                                                                      (let γ0_0 :=
                                                                        M.SubPointer.get_struct_tuple_field (|
                                                                          γ,
                                                                          "core::option::Option::Some",
                                                                          0
                                                                        |) in
                                                                      let i := M.copy (| γ0_0 |) in
                                                                      let _ :=
                                                                        M.alloc (|
                                                                          M.call_closure (|
                                                                            M.get_associated_function (|
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "alloc::vec::Vec")
                                                                                [
                                                                                  Ty.path "u64";
                                                                                  Ty.path
                                                                                    "alloc::alloc::Global"
                                                                                ],
                                                                              "push",
                                                                              []
                                                                            |),
                                                                            [
                                                                              args;
                                                                              M.call_closure (|
                                                                                M.get_function (|
                                                                                  "wasmi::runner::from_value_internal_to_u64_with_typ",
                                                                                  []
                                                                                |),
                                                                                [
                                                                                  M.call_closure (|
                                                                                    M.get_trait_method (|
                                                                                      "core::convert::Into",
                                                                                      Ty.path
                                                                                        "specs::types::ValueType",
                                                                                      [
                                                                                        Ty.path
                                                                                          "specs::mtable::VarType"
                                                                                      ],
                                                                                      "into",
                                                                                      []
                                                                                    |),
                                                                                    [
                                                                                      M.read (|
                                                                                        M.call_closure (|
                                                                                          M.get_trait_method (|
                                                                                            "core::ops::index::Index",
                                                                                            Ty.apply
                                                                                              (Ty.path
                                                                                                "alloc::vec::Vec")
                                                                                              [
                                                                                                Ty.path
                                                                                                  "specs::types::ValueType";
                                                                                                Ty.path
                                                                                                  "alloc::alloc::Global"
                                                                                              ],
                                                                                            [
                                                                                              Ty.path
                                                                                                "usize"
                                                                                            ],
                                                                                            "index",
                                                                                            []
                                                                                          |),
                                                                                          [
                                                                                            params;
                                                                                            M.read (|
                                                                                              i
                                                                                            |)
                                                                                          ]
                                                                                        |)
                                                                                      |)
                                                                                    ]
                                                                                  |);
                                                                                  M.read (|
                                                                                    M.call_closure (|
                                                                                      M.get_associated_function (|
                                                                                        Ty.path
                                                                                          "wasmi::runner::ValueStack",
                                                                                        "pick",
                                                                                        []
                                                                                      |),
                                                                                      [
                                                                                        M.read (|
                                                                                          value_stack
                                                                                        |);
                                                                                        BinOp.Panic.sub (|
                                                                                          Integer.Usize,
                                                                                          M.read (|
                                                                                            params_len
                                                                                          |),
                                                                                          M.read (|
                                                                                            i
                                                                                          |)
                                                                                        |)
                                                                                      ]
                                                                                    |)
                                                                                  |)
                                                                                ]
                                                                              |)
                                                                            ]
                                                                          |)
                                                                        |) in
                                                                      M.alloc (| Value.Tuple [] |)))
                                                                ]
                                                              |) in
                                                            M.alloc (| Value.Tuple [] |)))
                                                        |)))
                                                  ]
                                                |)) in
                                            M.alloc (|
                                              Value.StructRecord
                                                "specs::step::StepInfo::CallHost"
                                                [
                                                  ("plugin", M.read (| M.read (| plugin |) |));
                                                  ("host_function_idx",
                                                    M.read (| M.read (| host_function_idx |) |));
                                                  ("function_name",
                                                    M.call_closure (|
                                                      M.get_trait_method (|
                                                        "core::clone::Clone",
                                                        Ty.path "alloc::string::String",
                                                        [],
                                                        "clone",
                                                        []
                                                      |),
                                                      [ M.read (| function_name |) ]
                                                    |));
                                                  ("args", M.read (| args |));
                                                  ("ret_val",
                                                    Value.StructTuple
                                                      "core::option::Option::None"
                                                      []);
                                                  ("signature", M.read (| signature |));
                                                  ("op_index_in_plugin",
                                                    M.read (| M.read (| op_index_in_plugin |) |))
                                                ]
                                            |)));
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let γ := M.read (| γ |) in
                                            let γ1_0 :=
                                              M.SubPointer.get_struct_record_field (|
                                                γ,
                                                "specs::types::FunctionType::HostFunctionExternal",
                                                "op"
                                              |) in
                                            let γ1_1 :=
                                              M.SubPointer.get_struct_record_field (|
                                                γ,
                                                "specs::types::FunctionType::HostFunctionExternal",
                                                "sig"
                                              |) in
                                            let op := M.alloc (| γ1_0 |) in
                                            let sig := M.alloc (| γ1_1 |) in
                                            M.alloc (|
                                              Value.StructRecord
                                                "specs::step::StepInfo::ExternalHostCall"
                                                [
                                                  ("op", M.read (| M.read (| op |) |));
                                                  ("value",
                                                    M.read (|
                                                      M.match_operator (|
                                                        sig,
                                                        [
                                                          fun γ =>
                                                            ltac:(M.monadic
                                                              (let γ := M.read (| γ |) in
                                                              M.alloc (|
                                                                Value.StructTuple
                                                                  "core::option::Option::Some"
                                                                  [
                                                                    M.call_closure (|
                                                                      M.get_function (|
                                                                        "wasmi::runner::from_value_internal_to_u64_with_typ",
                                                                        []
                                                                      |),
                                                                      [
                                                                        Value.StructTuple
                                                                          "specs::mtable::VarType::I64"
                                                                          [];
                                                                        M.read (|
                                                                          M.call_closure (|
                                                                            M.get_associated_function (|
                                                                              Ty.path
                                                                                "wasmi::runner::ValueStack",
                                                                              "top",
                                                                              []
                                                                            |),
                                                                            [
                                                                              M.read (|
                                                                                value_stack
                                                                              |)
                                                                            ]
                                                                          |)
                                                                        |)
                                                                      ]
                                                                    |)
                                                                  ]
                                                              |)));
                                                          fun γ =>
                                                            ltac:(M.monadic
                                                              (let γ := M.read (| γ |) in
                                                              M.alloc (|
                                                                Value.StructTuple
                                                                  "core::option::Option::None"
                                                                  []
                                                              |)))
                                                        ]
                                                      |)
                                                    |));
                                                  ("sig", M.read (| M.read (| sig |) |))
                                                ]
                                            |)))
                                      ]
                                    |)));
                                fun γ =>
                                  ltac:(M.monadic
                                    (M.alloc (|
                                      M.never_to_any (|
                                        M.call_closure (|
                                          M.get_function (| "core::panicking::panic", [] |),
                                          [
                                            M.read (|
                                              Value.String
                                                "internal error: entered unreachable code"
                                            |)
                                          ]
                                        |)
                                      |)
                                    |)))
                              ]
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "wasmi::isa::Instruction::CallIndirect",
                                0
                              |) in
                            M.match_operator (|
                              M.alloc (| Value.Tuple [] |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ :=
                                      M.alloc (|
                                        M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.apply
                                              (Ty.path "core::option::Option")
                                              [
                                                Ty.path
                                                  "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::RunInstructionTracePre"
                                              ],
                                            "unwrap",
                                            []
                                          |),
                                          [ M.read (| current_event |) ]
                                        |)
                                      |) in
                                    let γ0_0 :=
                                      M.SubPointer.get_struct_record_field (|
                                        γ,
                                        "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::RunInstructionTracePre::CallIndirect",
                                        "table_idx"
                                      |) in
                                    let γ0_1 :=
                                      M.SubPointer.get_struct_record_field (|
                                        γ,
                                        "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::RunInstructionTracePre::CallIndirect",
                                        "type_idx"
                                      |) in
                                    let γ0_2 :=
                                      M.SubPointer.get_struct_record_field (|
                                        γ,
                                        "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::RunInstructionTracePre::CallIndirect",
                                        "offset"
                                      |) in
                                    let table_idx := M.copy (| γ0_0 |) in
                                    let type_idx := M.copy (| γ0_1 |) in
                                    let offset := M.copy (| γ0_2 |) in
                                    let table :=
                                      M.alloc (|
                                        M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.apply
                                              (Ty.path "core::option::Option")
                                              [ Ty.path "wasmi::table::TableRef" ],
                                            "unwrap",
                                            []
                                          |),
                                          [
                                            M.call_closure (|
                                              M.get_associated_function (|
                                                Ty.path "wasmi::module::ModuleInstance",
                                                "table_by_index",
                                                []
                                              |),
                                              [
                                                M.call_closure (|
                                                  M.get_trait_method (|
                                                    "core::ops::deref::Deref",
                                                    Ty.path "wasmi::module::ModuleRef",
                                                    [],
                                                    "deref",
                                                    []
                                                  |),
                                                  [
                                                    M.alloc (|
                                                      M.call_closure (|
                                                        M.get_associated_function (|
                                                          Ty.path "wasmi::runner::FunctionContext",
                                                          "module",
                                                          []
                                                        |),
                                                        [ M.read (| context |) ]
                                                      |)
                                                    |)
                                                  ]
                                                |);
                                                M.read (|
                                                  M.get_constant (|
                                                    "delphinus_zkwasm::runtime::monitor::plugins::table::DEFAULT_TABLE_INDEX"
                                                  |)
                                                |)
                                              ]
                                            |)
                                          ]
                                        |)
                                      |) in
                                    let func_ref :=
                                      M.alloc (|
                                        M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.apply
                                              (Ty.path "core::option::Option")
                                              [ Ty.path "wasmi::func::FuncRef" ],
                                            "unwrap",
                                            []
                                          |),
                                          [
                                            M.call_closure (|
                                              M.get_associated_function (|
                                                Ty.apply
                                                  (Ty.path "core::result::Result")
                                                  [
                                                    Ty.apply
                                                      (Ty.path "core::option::Option")
                                                      [ Ty.path "wasmi::func::FuncRef" ];
                                                    Ty.path "wasmi::Error"
                                                  ],
                                                "unwrap",
                                                []
                                              |),
                                              [
                                                M.call_closure (|
                                                  M.get_associated_function (|
                                                    Ty.path "wasmi::table::TableInstance",
                                                    "get",
                                                    []
                                                  |),
                                                  [
                                                    M.call_closure (|
                                                      M.get_trait_method (|
                                                        "core::ops::deref::Deref",
                                                        Ty.path "wasmi::table::TableRef",
                                                        [],
                                                        "deref",
                                                        []
                                                      |),
                                                      [ table ]
                                                    |);
                                                    M.read (| offset |)
                                                  ]
                                                |)
                                              ]
                                            |)
                                          ]
                                        |)
                                      |) in
                                    let func_index :=
                                      M.alloc (|
                                        M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.path "wasmi::module::ModuleInstance",
                                            "func_index_by_func_ref",
                                            []
                                          |),
                                          [
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "core::ops::deref::Deref",
                                                Ty.path "wasmi::module::ModuleRef",
                                                [],
                                                "deref",
                                                []
                                              |),
                                              [ M.read (| module_ref |) ]
                                            |);
                                            func_ref
                                          ]
                                        |)
                                      |) in
                                    M.alloc (|
                                      Value.StructRecord
                                        "specs::step::StepInfo::CallIndirect"
                                        [
                                          ("table_index", M.read (| table_idx |));
                                          ("type_index", M.read (| type_idx |));
                                          ("offset", M.read (| offset |));
                                          ("func_index", M.read (| func_index |))
                                        ]
                                    |)));
                                fun γ =>
                                  ltac:(M.monadic
                                    (M.alloc (|
                                      M.never_to_any (|
                                        M.call_closure (|
                                          M.get_function (| "core::panicking::panic", [] |),
                                          [
                                            M.read (|
                                              Value.String
                                                "internal error: entered unreachable code"
                                            |)
                                          ]
                                        |)
                                      |)
                                    |)))
                              ]
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (M.find_or_pattern (|
                              γ,
                              [
                                fun γ => ltac:(M.monadic (Value.Tuple []));
                                fun γ => ltac:(M.monadic (Value.Tuple []));
                                fun γ => ltac:(M.monadic (Value.Tuple []));
                                fun γ => ltac:(M.monadic (Value.Tuple []));
                                fun γ => ltac:(M.monadic (Value.Tuple []));
                                fun γ => ltac:(M.monadic (Value.Tuple []));
                                fun γ => ltac:(M.monadic (Value.Tuple []));
                                fun γ => ltac:(M.monadic (Value.Tuple []));
                                fun γ => ltac:(M.monadic (Value.Tuple []));
                                fun γ => ltac:(M.monadic (Value.Tuple []));
                                fun γ => ltac:(M.monadic (Value.Tuple []));
                                fun γ => ltac:(M.monadic (Value.Tuple []))
                              ],
                              M.closure
                                (fun γ =>
                                  ltac:(M.monadic
                                    match γ with
                                    | [] =>
                                      M.match_operator (|
                                        M.alloc (| Value.Tuple [] |),
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let γ :=
                                                M.alloc (|
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.apply
                                                        (Ty.path "core::option::Option")
                                                        [
                                                          Ty.path
                                                            "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::RunInstructionTracePre"
                                                        ],
                                                      "unwrap",
                                                      []
                                                    |),
                                                    [ M.read (| current_event |) ]
                                                  |)
                                                |) in
                                              let γ0_0 :=
                                                M.SubPointer.get_struct_record_field (|
                                                  γ,
                                                  "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::RunInstructionTracePre::Load",
                                                  "offset"
                                                |) in
                                              let γ0_1 :=
                                                M.SubPointer.get_struct_record_field (|
                                                  γ,
                                                  "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::RunInstructionTracePre::Load",
                                                  "raw_address"
                                                |) in
                                              let γ0_2 :=
                                                M.SubPointer.get_struct_record_field (|
                                                  γ,
                                                  "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::RunInstructionTracePre::Load",
                                                  "effective_address"
                                                |) in
                                              let γ0_3 :=
                                                M.SubPointer.get_struct_record_field (|
                                                  γ,
                                                  "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::RunInstructionTracePre::Load",
                                                  "vtype"
                                                |) in
                                              let γ0_4 :=
                                                M.SubPointer.get_struct_record_field (|
                                                  γ,
                                                  "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::RunInstructionTracePre::Load",
                                                  "load_size"
                                                |) in
                                              let offset := M.copy (| γ0_0 |) in
                                              let raw_address := M.copy (| γ0_1 |) in
                                              let effective_address := M.copy (| γ0_2 |) in
                                              let vtype := M.copy (| γ0_3 |) in
                                              let load_size := M.copy (| γ0_4 |) in
                                              let block_value1 :=
                                                M.copy (|
                                                  let buf :=
                                                    M.alloc (| repeat (Value.Integer 0) 8 |) in
                                                  let _ :=
                                                    M.alloc (|
                                                      M.call_closure (|
                                                        M.get_associated_function (|
                                                          Ty.apply
                                                            (Ty.path "core::result::Result")
                                                            [ Ty.tuple []; Ty.path "wasmi::Error" ],
                                                          "unwrap",
                                                          []
                                                        |),
                                                        [
                                                          M.call_closure (|
                                                            M.get_associated_function (|
                                                              Ty.path
                                                                "wasmi::memory::MemoryInstance",
                                                              "get_into",
                                                              []
                                                            |),
                                                            [
                                                              M.call_closure (|
                                                                M.get_trait_method (|
                                                                  "core::ops::deref::Deref",
                                                                  Ty.path
                                                                    "wasmi::memory::MemoryRef",
                                                                  [],
                                                                  "deref",
                                                                  []
                                                                |),
                                                                [
                                                                  M.alloc (|
                                                                    M.call_closure (|
                                                                      M.get_associated_function (|
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "core::option::Option")
                                                                          [
                                                                            Ty.path
                                                                              "wasmi::memory::MemoryRef"
                                                                          ],
                                                                        "unwrap",
                                                                        []
                                                                      |),
                                                                      [
                                                                        M.call_closure (|
                                                                          M.get_trait_method (|
                                                                            "core::clone::Clone",
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "core::option::Option")
                                                                              [
                                                                                Ty.path
                                                                                  "wasmi::memory::MemoryRef"
                                                                              ],
                                                                            [],
                                                                            "clone",
                                                                            []
                                                                          |),
                                                                          [
                                                                            M.SubPointer.get_struct_record_field (|
                                                                              M.read (| context |),
                                                                              "wasmi::runner::FunctionContext",
                                                                              "memory"
                                                                            |)
                                                                          ]
                                                                        |)
                                                                      ]
                                                                    |)
                                                                  |)
                                                                ]
                                                              |);
                                                              BinOp.Panic.mul (|
                                                                Integer.U32,
                                                                BinOp.Panic.div (|
                                                                  Integer.U32,
                                                                  M.call_closure (|
                                                                    M.get_associated_function (|
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "core::option::Option")
                                                                        [ Ty.path "u32" ],
                                                                      "unwrap",
                                                                      []
                                                                    |),
                                                                    [ M.read (| effective_address |)
                                                                    ]
                                                                  |),
                                                                  Value.Integer 8
                                                                |),
                                                                Value.Integer 8
                                                              |);
                                                              (* Unsize *) M.pointer_coercion buf
                                                            ]
                                                          |)
                                                        ]
                                                      |)
                                                    |) in
                                                  M.alloc (|
                                                    M.call_closure (|
                                                      M.get_associated_function (|
                                                        Ty.path "u64",
                                                        "from_le_bytes",
                                                        []
                                                      |),
                                                      [ M.read (| buf |) ]
                                                    |)
                                                  |)
                                                |) in
                                              let block_value2 :=
                                                M.copy (|
                                                  M.match_operator (|
                                                    M.alloc (| Value.Tuple [] |),
                                                    [
                                                      fun γ =>
                                                        ltac:(M.monadic
                                                          (let γ :=
                                                            M.use
                                                              (M.alloc (|
                                                                BinOp.Pure.gt
                                                                  (BinOp.Panic.add (|
                                                                    Integer.U32,
                                                                    BinOp.Panic.rem (|
                                                                      Integer.U32,
                                                                      M.call_closure (|
                                                                        M.get_associated_function (|
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "core::option::Option")
                                                                            [ Ty.path "u32" ],
                                                                          "unwrap",
                                                                          []
                                                                        |),
                                                                        [
                                                                          M.read (|
                                                                            effective_address
                                                                          |)
                                                                        ]
                                                                      |),
                                                                      Value.Integer 8
                                                                    |),
                                                                    M.read (|
                                                                      M.use
                                                                        (M.alloc (|
                                                                          M.call_closure (|
                                                                            M.get_associated_function (|
                                                                              Ty.path
                                                                                "specs::mtable::MemoryReadSize",
                                                                              "byte_size",
                                                                              []
                                                                            |),
                                                                            [ load_size ]
                                                                          |)
                                                                        |))
                                                                    |)
                                                                  |))
                                                                  (Value.Integer 8)
                                                              |)) in
                                                          let _ :=
                                                            M.is_constant_or_break_match (|
                                                              M.read (| γ |),
                                                              Value.Bool true
                                                            |) in
                                                          let buf :=
                                                            M.alloc (|
                                                              repeat (Value.Integer 0) 8
                                                            |) in
                                                          let _ :=
                                                            M.alloc (|
                                                              M.call_closure (|
                                                                M.get_associated_function (|
                                                                  Ty.apply
                                                                    (Ty.path "core::result::Result")
                                                                    [
                                                                      Ty.tuple [];
                                                                      Ty.path "wasmi::Error"
                                                                    ],
                                                                  "unwrap",
                                                                  []
                                                                |),
                                                                [
                                                                  M.call_closure (|
                                                                    M.get_associated_function (|
                                                                      Ty.path
                                                                        "wasmi::memory::MemoryInstance",
                                                                      "get_into",
                                                                      []
                                                                    |),
                                                                    [
                                                                      M.call_closure (|
                                                                        M.get_trait_method (|
                                                                          "core::ops::deref::Deref",
                                                                          Ty.path
                                                                            "wasmi::memory::MemoryRef",
                                                                          [],
                                                                          "deref",
                                                                          []
                                                                        |),
                                                                        [
                                                                          M.alloc (|
                                                                            M.call_closure (|
                                                                              M.get_associated_function (|
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "core::option::Option")
                                                                                  [
                                                                                    Ty.path
                                                                                      "wasmi::memory::MemoryRef"
                                                                                  ],
                                                                                "unwrap",
                                                                                []
                                                                              |),
                                                                              [
                                                                                M.call_closure (|
                                                                                  M.get_trait_method (|
                                                                                    "core::clone::Clone",
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "core::option::Option")
                                                                                      [
                                                                                        Ty.path
                                                                                          "wasmi::memory::MemoryRef"
                                                                                      ],
                                                                                    [],
                                                                                    "clone",
                                                                                    []
                                                                                  |),
                                                                                  [
                                                                                    M.SubPointer.get_struct_record_field (|
                                                                                      M.read (|
                                                                                        context
                                                                                      |),
                                                                                      "wasmi::runner::FunctionContext",
                                                                                      "memory"
                                                                                    |)
                                                                                  ]
                                                                                |)
                                                                              ]
                                                                            |)
                                                                          |)
                                                                        ]
                                                                      |);
                                                                      BinOp.Panic.mul (|
                                                                        Integer.U32,
                                                                        BinOp.Panic.add (|
                                                                          Integer.U32,
                                                                          BinOp.Panic.div (|
                                                                            Integer.U32,
                                                                            M.call_closure (|
                                                                              M.get_associated_function (|
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "core::option::Option")
                                                                                  [ Ty.path "u32" ],
                                                                                "unwrap",
                                                                                []
                                                                              |),
                                                                              [
                                                                                M.read (|
                                                                                  effective_address
                                                                                |)
                                                                              ]
                                                                            |),
                                                                            Value.Integer 8
                                                                          |),
                                                                          Value.Integer 1
                                                                        |),
                                                                        Value.Integer 8
                                                                      |);
                                                                      (* Unsize *)
                                                                      M.pointer_coercion buf
                                                                    ]
                                                                  |)
                                                                ]
                                                              |)
                                                            |) in
                                                          M.alloc (|
                                                            M.call_closure (|
                                                              M.get_associated_function (|
                                                                Ty.path "u64",
                                                                "from_le_bytes",
                                                                []
                                                              |),
                                                              [ M.read (| buf |) ]
                                                            |)
                                                          |)));
                                                      fun γ =>
                                                        ltac:(M.monadic
                                                          (M.alloc (| Value.Integer 0 |)))
                                                    ]
                                                  |)
                                                |) in
                                              M.alloc (|
                                                Value.StructRecord
                                                  "specs::step::StepInfo::Load"
                                                  [
                                                    ("vtype",
                                                      M.call_closure (|
                                                        M.get_trait_method (|
                                                          "core::convert::Into",
                                                          Ty.path
                                                            "parity_wasm::elements::types::ValueType",
                                                          [ Ty.path "specs::mtable::VarType" ],
                                                          "into",
                                                          []
                                                        |),
                                                        [ M.read (| vtype |) ]
                                                      |));
                                                    ("load_size", M.read (| load_size |));
                                                    ("offset", M.read (| offset |));
                                                    ("raw_address", M.read (| raw_address |));
                                                    ("effective_address",
                                                      M.call_closure (|
                                                        M.get_associated_function (|
                                                          Ty.apply
                                                            (Ty.path "core::option::Option")
                                                            [ Ty.path "u32" ],
                                                          "unwrap",
                                                          []
                                                        |),
                                                        [ M.read (| effective_address |) ]
                                                      |));
                                                    ("value",
                                                      M.call_closure (|
                                                        M.get_function (|
                                                          "wasmi::runner::from_value_internal_to_u64_with_typ",
                                                          []
                                                        |),
                                                        [
                                                          M.call_closure (|
                                                            M.get_trait_method (|
                                                              "core::convert::Into",
                                                              Ty.path
                                                                "parity_wasm::elements::types::ValueType",
                                                              [ Ty.path "specs::mtable::VarType" ],
                                                              "into",
                                                              []
                                                            |),
                                                            [ M.read (| vtype |) ]
                                                          |);
                                                          M.read (|
                                                            M.call_closure (|
                                                              M.get_associated_function (|
                                                                Ty.path "wasmi::runner::ValueStack",
                                                                "top",
                                                                []
                                                              |),
                                                              [ M.read (| value_stack |) ]
                                                            |)
                                                          |)
                                                        ]
                                                      |));
                                                    ("block_value1", M.read (| block_value1 |));
                                                    ("block_value2", M.read (| block_value2 |))
                                                  ]
                                              |)));
                                          fun γ =>
                                            ltac:(M.monadic
                                              (M.alloc (|
                                                M.never_to_any (|
                                                  M.call_closure (|
                                                    M.get_function (|
                                                      "core::panicking::panic",
                                                      []
                                                    |),
                                                    [
                                                      M.read (|
                                                        Value.String
                                                          "internal error: entered unreachable code"
                                                      |)
                                                    ]
                                                  |)
                                                |)
                                              |)))
                                        ]
                                      |)
                                    | _ => M.impossible (||)
                                    end))
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (M.find_or_pattern (|
                              γ,
                              [
                                fun γ => ltac:(M.monadic (Value.Tuple []));
                                fun γ => ltac:(M.monadic (Value.Tuple []));
                                fun γ => ltac:(M.monadic (Value.Tuple []));
                                fun γ => ltac:(M.monadic (Value.Tuple []));
                                fun γ => ltac:(M.monadic (Value.Tuple []));
                                fun γ => ltac:(M.monadic (Value.Tuple []));
                                fun γ => ltac:(M.monadic (Value.Tuple []))
                              ],
                              M.closure
                                (fun γ =>
                                  ltac:(M.monadic
                                    match γ with
                                    | [] =>
                                      M.match_operator (|
                                        M.alloc (| Value.Tuple [] |),
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let γ :=
                                                M.alloc (|
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.apply
                                                        (Ty.path "core::option::Option")
                                                        [
                                                          Ty.path
                                                            "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::RunInstructionTracePre"
                                                        ],
                                                      "unwrap",
                                                      []
                                                    |),
                                                    [ M.read (| current_event |) ]
                                                  |)
                                                |) in
                                              let γ0_0 :=
                                                M.SubPointer.get_struct_record_field (|
                                                  γ,
                                                  "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::RunInstructionTracePre::Store",
                                                  "offset"
                                                |) in
                                              let γ0_1 :=
                                                M.SubPointer.get_struct_record_field (|
                                                  γ,
                                                  "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::RunInstructionTracePre::Store",
                                                  "raw_address"
                                                |) in
                                              let γ0_2 :=
                                                M.SubPointer.get_struct_record_field (|
                                                  γ,
                                                  "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::RunInstructionTracePre::Store",
                                                  "effective_address"
                                                |) in
                                              let γ0_3 :=
                                                M.SubPointer.get_struct_record_field (|
                                                  γ,
                                                  "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::RunInstructionTracePre::Store",
                                                  "value"
                                                |) in
                                              let γ0_4 :=
                                                M.SubPointer.get_struct_record_field (|
                                                  γ,
                                                  "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::RunInstructionTracePre::Store",
                                                  "vtype"
                                                |) in
                                              let γ0_5 :=
                                                M.SubPointer.get_struct_record_field (|
                                                  γ,
                                                  "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::RunInstructionTracePre::Store",
                                                  "store_size"
                                                |) in
                                              let γ0_6 :=
                                                M.SubPointer.get_struct_record_field (|
                                                  γ,
                                                  "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::RunInstructionTracePre::Store",
                                                  "pre_block_value1"
                                                |) in
                                              let γ0_7 :=
                                                M.SubPointer.get_struct_record_field (|
                                                  γ,
                                                  "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::RunInstructionTracePre::Store",
                                                  "pre_block_value2"
                                                |) in
                                              let offset := M.copy (| γ0_0 |) in
                                              let raw_address := M.copy (| γ0_1 |) in
                                              let effective_address := M.copy (| γ0_2 |) in
                                              let value := M.copy (| γ0_3 |) in
                                              let vtype := M.copy (| γ0_4 |) in
                                              let store_size := M.copy (| γ0_5 |) in
                                              let pre_block_value1 := M.copy (| γ0_6 |) in
                                              let pre_block_value2 := M.copy (| γ0_7 |) in
                                              let updated_block_value1 :=
                                                M.copy (|
                                                  let buf :=
                                                    M.alloc (| repeat (Value.Integer 0) 8 |) in
                                                  let _ :=
                                                    M.alloc (|
                                                      M.call_closure (|
                                                        M.get_associated_function (|
                                                          Ty.apply
                                                            (Ty.path "core::result::Result")
                                                            [ Ty.tuple []; Ty.path "wasmi::Error" ],
                                                          "unwrap",
                                                          []
                                                        |),
                                                        [
                                                          M.call_closure (|
                                                            M.get_associated_function (|
                                                              Ty.path
                                                                "wasmi::memory::MemoryInstance",
                                                              "get_into",
                                                              []
                                                            |),
                                                            [
                                                              M.call_closure (|
                                                                M.get_trait_method (|
                                                                  "core::ops::deref::Deref",
                                                                  Ty.path
                                                                    "wasmi::memory::MemoryRef",
                                                                  [],
                                                                  "deref",
                                                                  []
                                                                |),
                                                                [
                                                                  M.alloc (|
                                                                    M.call_closure (|
                                                                      M.get_associated_function (|
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "core::option::Option")
                                                                          [
                                                                            Ty.path
                                                                              "wasmi::memory::MemoryRef"
                                                                          ],
                                                                        "unwrap",
                                                                        []
                                                                      |),
                                                                      [
                                                                        M.call_closure (|
                                                                          M.get_trait_method (|
                                                                            "core::clone::Clone",
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "core::option::Option")
                                                                              [
                                                                                Ty.path
                                                                                  "wasmi::memory::MemoryRef"
                                                                              ],
                                                                            [],
                                                                            "clone",
                                                                            []
                                                                          |),
                                                                          [
                                                                            M.SubPointer.get_struct_record_field (|
                                                                              M.read (| context |),
                                                                              "wasmi::runner::FunctionContext",
                                                                              "memory"
                                                                            |)
                                                                          ]
                                                                        |)
                                                                      ]
                                                                    |)
                                                                  |)
                                                                ]
                                                              |);
                                                              BinOp.Panic.mul (|
                                                                Integer.U32,
                                                                BinOp.Panic.div (|
                                                                  Integer.U32,
                                                                  M.call_closure (|
                                                                    M.get_associated_function (|
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "core::option::Option")
                                                                        [ Ty.path "u32" ],
                                                                      "unwrap",
                                                                      []
                                                                    |),
                                                                    [ M.read (| effective_address |)
                                                                    ]
                                                                  |),
                                                                  Value.Integer 8
                                                                |),
                                                                Value.Integer 8
                                                              |);
                                                              (* Unsize *) M.pointer_coercion buf
                                                            ]
                                                          |)
                                                        ]
                                                      |)
                                                    |) in
                                                  M.alloc (|
                                                    M.call_closure (|
                                                      M.get_associated_function (|
                                                        Ty.path "u64",
                                                        "from_le_bytes",
                                                        []
                                                      |),
                                                      [ M.read (| buf |) ]
                                                    |)
                                                  |)
                                                |) in
                                              let updated_block_value2 :=
                                                M.copy (|
                                                  M.match_operator (|
                                                    M.alloc (| Value.Tuple [] |),
                                                    [
                                                      fun γ =>
                                                        ltac:(M.monadic
                                                          (let γ :=
                                                            M.use
                                                              (M.alloc (|
                                                                BinOp.Pure.gt
                                                                  (BinOp.Panic.add (|
                                                                    Integer.U32,
                                                                    BinOp.Panic.rem (|
                                                                      Integer.U32,
                                                                      M.call_closure (|
                                                                        M.get_associated_function (|
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "core::option::Option")
                                                                            [ Ty.path "u32" ],
                                                                          "unwrap",
                                                                          []
                                                                        |),
                                                                        [
                                                                          M.read (|
                                                                            effective_address
                                                                          |)
                                                                        ]
                                                                      |),
                                                                      Value.Integer 8
                                                                    |),
                                                                    M.rust_cast
                                                                      (M.call_closure (|
                                                                        M.get_associated_function (|
                                                                          Ty.path
                                                                            "specs::mtable::MemoryStoreSize",
                                                                          "byte_size",
                                                                          []
                                                                        |),
                                                                        [ store_size ]
                                                                      |))
                                                                  |))
                                                                  (Value.Integer 8)
                                                              |)) in
                                                          let _ :=
                                                            M.is_constant_or_break_match (|
                                                              M.read (| γ |),
                                                              Value.Bool true
                                                            |) in
                                                          let buf :=
                                                            M.alloc (|
                                                              repeat (Value.Integer 0) 8
                                                            |) in
                                                          let _ :=
                                                            M.alloc (|
                                                              M.call_closure (|
                                                                M.get_associated_function (|
                                                                  Ty.apply
                                                                    (Ty.path "core::result::Result")
                                                                    [
                                                                      Ty.tuple [];
                                                                      Ty.path "wasmi::Error"
                                                                    ],
                                                                  "unwrap",
                                                                  []
                                                                |),
                                                                [
                                                                  M.call_closure (|
                                                                    M.get_associated_function (|
                                                                      Ty.path
                                                                        "wasmi::memory::MemoryInstance",
                                                                      "get_into",
                                                                      []
                                                                    |),
                                                                    [
                                                                      M.call_closure (|
                                                                        M.get_trait_method (|
                                                                          "core::ops::deref::Deref",
                                                                          Ty.path
                                                                            "wasmi::memory::MemoryRef",
                                                                          [],
                                                                          "deref",
                                                                          []
                                                                        |),
                                                                        [
                                                                          M.alloc (|
                                                                            M.call_closure (|
                                                                              M.get_associated_function (|
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "core::option::Option")
                                                                                  [
                                                                                    Ty.path
                                                                                      "wasmi::memory::MemoryRef"
                                                                                  ],
                                                                                "unwrap",
                                                                                []
                                                                              |),
                                                                              [
                                                                                M.call_closure (|
                                                                                  M.get_trait_method (|
                                                                                    "core::clone::Clone",
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "core::option::Option")
                                                                                      [
                                                                                        Ty.path
                                                                                          "wasmi::memory::MemoryRef"
                                                                                      ],
                                                                                    [],
                                                                                    "clone",
                                                                                    []
                                                                                  |),
                                                                                  [
                                                                                    M.SubPointer.get_struct_record_field (|
                                                                                      M.read (|
                                                                                        context
                                                                                      |),
                                                                                      "wasmi::runner::FunctionContext",
                                                                                      "memory"
                                                                                    |)
                                                                                  ]
                                                                                |)
                                                                              ]
                                                                            |)
                                                                          |)
                                                                        ]
                                                                      |);
                                                                      BinOp.Panic.mul (|
                                                                        Integer.U32,
                                                                        BinOp.Panic.add (|
                                                                          Integer.U32,
                                                                          BinOp.Panic.div (|
                                                                            Integer.U32,
                                                                            M.call_closure (|
                                                                              M.get_associated_function (|
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "core::option::Option")
                                                                                  [ Ty.path "u32" ],
                                                                                "unwrap",
                                                                                []
                                                                              |),
                                                                              [
                                                                                M.read (|
                                                                                  effective_address
                                                                                |)
                                                                              ]
                                                                            |),
                                                                            Value.Integer 8
                                                                          |),
                                                                          Value.Integer 1
                                                                        |),
                                                                        Value.Integer 8
                                                                      |);
                                                                      (* Unsize *)
                                                                      M.pointer_coercion buf
                                                                    ]
                                                                  |)
                                                                ]
                                                              |)
                                                            |) in
                                                          M.alloc (|
                                                            M.call_closure (|
                                                              M.get_associated_function (|
                                                                Ty.path "u64",
                                                                "from_le_bytes",
                                                                []
                                                              |),
                                                              [ M.read (| buf |) ]
                                                            |)
                                                          |)));
                                                      fun γ =>
                                                        ltac:(M.monadic
                                                          (M.alloc (| Value.Integer 0 |)))
                                                    ]
                                                  |)
                                                |) in
                                              M.alloc (|
                                                Value.StructRecord
                                                  "specs::step::StepInfo::Store"
                                                  [
                                                    ("vtype",
                                                      M.call_closure (|
                                                        M.get_trait_method (|
                                                          "core::convert::Into",
                                                          Ty.path
                                                            "parity_wasm::elements::types::ValueType",
                                                          [ Ty.path "specs::mtable::VarType" ],
                                                          "into",
                                                          []
                                                        |),
                                                        [ M.read (| vtype |) ]
                                                      |));
                                                    ("store_size", M.read (| store_size |));
                                                    ("offset", M.read (| offset |));
                                                    ("raw_address", M.read (| raw_address |));
                                                    ("effective_address",
                                                      M.call_closure (|
                                                        M.get_associated_function (|
                                                          Ty.apply
                                                            (Ty.path "core::option::Option")
                                                            [ Ty.path "u32" ],
                                                          "unwrap",
                                                          []
                                                        |),
                                                        [ M.read (| effective_address |) ]
                                                      |));
                                                    ("value", M.read (| M.use value |));
                                                    ("pre_block_value1",
                                                      M.call_closure (|
                                                        M.get_associated_function (|
                                                          Ty.apply
                                                            (Ty.path "core::option::Option")
                                                            [ Ty.path "u64" ],
                                                          "unwrap",
                                                          []
                                                        |),
                                                        [ M.read (| pre_block_value1 |) ]
                                                      |));
                                                    ("pre_block_value2",
                                                      M.call_closure (|
                                                        M.get_associated_function (|
                                                          Ty.apply
                                                            (Ty.path "core::option::Option")
                                                            [ Ty.path "u64" ],
                                                          "unwrap_or",
                                                          []
                                                        |),
                                                        [
                                                          M.read (| pre_block_value2 |);
                                                          Value.Integer 0
                                                        ]
                                                      |));
                                                    ("updated_block_value1",
                                                      M.read (| updated_block_value1 |));
                                                    ("updated_block_value2",
                                                      M.read (| updated_block_value2 |))
                                                  ]
                                              |)));
                                          fun γ =>
                                            ltac:(M.monadic
                                              (M.alloc (|
                                                M.never_to_any (|
                                                  M.call_closure (|
                                                    M.get_function (|
                                                      "core::panicking::panic",
                                                      []
                                                    |),
                                                    [
                                                      M.read (|
                                                        Value.String
                                                          "internal error: entered unreachable code"
                                                      |)
                                                    ]
                                                  |)
                                                |)
                                              |)))
                                        ]
                                      |)
                                    | _ => M.impossible (||)
                                    end))
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (M.alloc (|
                              Value.StructTuple "specs::step::StepInfo::MemorySize" []
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (M.match_operator (|
                              M.alloc (| Value.Tuple [] |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ :=
                                      M.alloc (|
                                        M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.apply
                                              (Ty.path "core::option::Option")
                                              [
                                                Ty.path
                                                  "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::RunInstructionTracePre"
                                              ],
                                            "unwrap",
                                            []
                                          |),
                                          [ M.read (| current_event |) ]
                                        |)
                                      |) in
                                    let γ0_0 :=
                                      M.SubPointer.get_struct_tuple_field (|
                                        γ,
                                        "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::RunInstructionTracePre::GrowMemory",
                                        0
                                      |) in
                                    let grow_size := M.copy (| γ0_0 |) in
                                    M.alloc (|
                                      Value.StructRecord
                                        "specs::step::StepInfo::MemoryGrow"
                                        [
                                          ("grow_size", M.read (| grow_size |));
                                          ("result",
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "wasmi::runner::FromValueInternal",
                                                Ty.path "i32",
                                                [],
                                                "from_value_internal",
                                                []
                                              |),
                                              [
                                                M.read (|
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.path "wasmi::runner::ValueStack",
                                                      "top",
                                                      []
                                                    |),
                                                    [ M.read (| value_stack |) ]
                                                  |)
                                                |)
                                              ]
                                            |))
                                        ]
                                    |)));
                                fun γ =>
                                  ltac:(M.monadic
                                    (M.alloc (|
                                      M.never_to_any (|
                                        M.call_closure (|
                                          M.get_function (| "core::panicking::panic", [] |),
                                          [
                                            M.read (|
                                              Value.String
                                                "internal error: entered unreachable code"
                                            |)
                                          ]
                                        |)
                                      |)
                                    |)))
                              ]
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "wasmi::isa::Instruction::I32Const",
                                0
                              |) in
                            let value := M.copy (| γ0_0 |) in
                            M.alloc (|
                              Value.StructRecord
                                "specs::step::StepInfo::I32Const"
                                [ ("value", M.read (| value |)) ]
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "wasmi::isa::Instruction::I64Const",
                                0
                              |) in
                            let value := M.copy (| γ0_0 |) in
                            M.alloc (|
                              Value.StructRecord
                                "specs::step::StepInfo::I64Const"
                                [ ("value", M.read (| value |)) ]
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (M.match_operator (|
                              M.alloc (| Value.Tuple [] |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ :=
                                      M.alloc (|
                                        M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.apply
                                              (Ty.path "core::option::Option")
                                              [
                                                Ty.path
                                                  "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::RunInstructionTracePre"
                                              ],
                                            "unwrap",
                                            []
                                          |),
                                          [ M.read (| current_event |) ]
                                        |)
                                      |) in
                                    let γ0_0 :=
                                      M.SubPointer.get_struct_tuple_field (|
                                        γ,
                                        "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::RunInstructionTracePre::I32Single",
                                        0
                                      |) in
                                    let value := M.copy (| γ0_0 |) in
                                    M.alloc (|
                                      Value.StructRecord
                                        "specs::step::StepInfo::Test"
                                        [
                                          ("vtype",
                                            Value.StructTuple "specs::mtable::VarType::I32" []);
                                          ("value", M.rust_cast (M.rust_cast (M.read (| value |))));
                                          ("result",
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "wasmi::runner::FromValueInternal",
                                                Ty.path "i32",
                                                [],
                                                "from_value_internal",
                                                []
                                              |),
                                              [
                                                M.read (|
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.path "wasmi::runner::ValueStack",
                                                      "top",
                                                      []
                                                    |),
                                                    [ M.read (| value_stack |) ]
                                                  |)
                                                |)
                                              ]
                                            |))
                                        ]
                                    |)));
                                fun γ =>
                                  ltac:(M.monadic
                                    (M.alloc (|
                                      M.never_to_any (|
                                        M.call_closure (|
                                          M.get_function (| "core::panicking::panic", [] |),
                                          [
                                            M.read (|
                                              Value.String
                                                "internal error: entered unreachable code"
                                            |)
                                          ]
                                        |)
                                      |)
                                    |)))
                              ]
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (M.match_operator (|
                              M.alloc (| Value.Tuple [] |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ :=
                                      M.alloc (|
                                        M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.apply
                                              (Ty.path "core::option::Option")
                                              [
                                                Ty.path
                                                  "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::RunInstructionTracePre"
                                              ],
                                            "unwrap",
                                            []
                                          |),
                                          [ M.read (| current_event |) ]
                                        |)
                                      |) in
                                    let γ0_0 :=
                                      M.SubPointer.get_struct_record_field (|
                                        γ,
                                        "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::RunInstructionTracePre::I32Comp",
                                        "left"
                                      |) in
                                    let γ0_1 :=
                                      M.SubPointer.get_struct_record_field (|
                                        γ,
                                        "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::RunInstructionTracePre::I32Comp",
                                        "right"
                                      |) in
                                    let left := M.copy (| γ0_0 |) in
                                    let right := M.copy (| γ0_1 |) in
                                    M.alloc (|
                                      Value.StructRecord
                                        "specs::step::StepInfo::I32Comp"
                                        [
                                          ("class",
                                            Value.StructTuple "specs::itable::RelOp::Eq" []);
                                          ("left", M.read (| left |));
                                          ("right", M.read (| right |));
                                          ("value",
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "wasmi::runner::FromValueInternal",
                                                Ty.path "bool",
                                                [],
                                                "from_value_internal",
                                                []
                                              |),
                                              [
                                                M.read (|
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.path "wasmi::runner::ValueStack",
                                                      "top",
                                                      []
                                                    |),
                                                    [ M.read (| value_stack |) ]
                                                  |)
                                                |)
                                              ]
                                            |))
                                        ]
                                    |)));
                                fun γ =>
                                  ltac:(M.monadic
                                    (M.alloc (|
                                      M.never_to_any (|
                                        M.call_closure (|
                                          M.get_function (| "core::panicking::panic", [] |),
                                          [
                                            M.read (|
                                              Value.String
                                                "internal error: entered unreachable code"
                                            |)
                                          ]
                                        |)
                                      |)
                                    |)))
                              ]
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (M.match_operator (|
                              M.alloc (| Value.Tuple [] |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ :=
                                      M.alloc (|
                                        M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.apply
                                              (Ty.path "core::option::Option")
                                              [
                                                Ty.path
                                                  "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::RunInstructionTracePre"
                                              ],
                                            "unwrap",
                                            []
                                          |),
                                          [ M.read (| current_event |) ]
                                        |)
                                      |) in
                                    let γ0_0 :=
                                      M.SubPointer.get_struct_record_field (|
                                        γ,
                                        "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::RunInstructionTracePre::I32Comp",
                                        "left"
                                      |) in
                                    let γ0_1 :=
                                      M.SubPointer.get_struct_record_field (|
                                        γ,
                                        "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::RunInstructionTracePre::I32Comp",
                                        "right"
                                      |) in
                                    let left := M.copy (| γ0_0 |) in
                                    let right := M.copy (| γ0_1 |) in
                                    M.alloc (|
                                      Value.StructRecord
                                        "specs::step::StepInfo::I32Comp"
                                        [
                                          ("class",
                                            Value.StructTuple "specs::itable::RelOp::Ne" []);
                                          ("left", M.read (| left |));
                                          ("right", M.read (| right |));
                                          ("value",
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "wasmi::runner::FromValueInternal",
                                                Ty.path "bool",
                                                [],
                                                "from_value_internal",
                                                []
                                              |),
                                              [
                                                M.read (|
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.path "wasmi::runner::ValueStack",
                                                      "top",
                                                      []
                                                    |),
                                                    [ M.read (| value_stack |) ]
                                                  |)
                                                |)
                                              ]
                                            |))
                                        ]
                                    |)));
                                fun γ =>
                                  ltac:(M.monadic
                                    (M.alloc (|
                                      M.never_to_any (|
                                        M.call_closure (|
                                          M.get_function (| "core::panicking::panic", [] |),
                                          [
                                            M.read (|
                                              Value.String
                                                "internal error: entered unreachable code"
                                            |)
                                          ]
                                        |)
                                      |)
                                    |)))
                              ]
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (M.match_operator (|
                              M.alloc (| Value.Tuple [] |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ :=
                                      M.alloc (|
                                        M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.apply
                                              (Ty.path "core::option::Option")
                                              [
                                                Ty.path
                                                  "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::RunInstructionTracePre"
                                              ],
                                            "unwrap",
                                            []
                                          |),
                                          [ M.read (| current_event |) ]
                                        |)
                                      |) in
                                    let γ0_0 :=
                                      M.SubPointer.get_struct_record_field (|
                                        γ,
                                        "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::RunInstructionTracePre::I32Comp",
                                        "left"
                                      |) in
                                    let γ0_1 :=
                                      M.SubPointer.get_struct_record_field (|
                                        γ,
                                        "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::RunInstructionTracePre::I32Comp",
                                        "right"
                                      |) in
                                    let left := M.copy (| γ0_0 |) in
                                    let right := M.copy (| γ0_1 |) in
                                    M.alloc (|
                                      Value.StructRecord
                                        "specs::step::StepInfo::I32Comp"
                                        [
                                          ("class",
                                            Value.StructTuple "specs::itable::RelOp::SignedGt" []);
                                          ("left", M.read (| left |));
                                          ("right", M.read (| right |));
                                          ("value",
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "wasmi::runner::FromValueInternal",
                                                Ty.path "bool",
                                                [],
                                                "from_value_internal",
                                                []
                                              |),
                                              [
                                                M.read (|
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.path "wasmi::runner::ValueStack",
                                                      "top",
                                                      []
                                                    |),
                                                    [ M.read (| value_stack |) ]
                                                  |)
                                                |)
                                              ]
                                            |))
                                        ]
                                    |)));
                                fun γ =>
                                  ltac:(M.monadic
                                    (M.alloc (|
                                      M.never_to_any (|
                                        M.call_closure (|
                                          M.get_function (| "core::panicking::panic", [] |),
                                          [
                                            M.read (|
                                              Value.String
                                                "internal error: entered unreachable code"
                                            |)
                                          ]
                                        |)
                                      |)
                                    |)))
                              ]
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (M.match_operator (|
                              M.alloc (| Value.Tuple [] |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ :=
                                      M.alloc (|
                                        M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.apply
                                              (Ty.path "core::option::Option")
                                              [
                                                Ty.path
                                                  "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::RunInstructionTracePre"
                                              ],
                                            "unwrap",
                                            []
                                          |),
                                          [ M.read (| current_event |) ]
                                        |)
                                      |) in
                                    let γ0_0 :=
                                      M.SubPointer.get_struct_record_field (|
                                        γ,
                                        "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::RunInstructionTracePre::I32Comp",
                                        "left"
                                      |) in
                                    let γ0_1 :=
                                      M.SubPointer.get_struct_record_field (|
                                        γ,
                                        "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::RunInstructionTracePre::I32Comp",
                                        "right"
                                      |) in
                                    let left := M.copy (| γ0_0 |) in
                                    let right := M.copy (| γ0_1 |) in
                                    M.alloc (|
                                      Value.StructRecord
                                        "specs::step::StepInfo::I32Comp"
                                        [
                                          ("class",
                                            Value.StructTuple
                                              "specs::itable::RelOp::UnsignedGt"
                                              []);
                                          ("left", M.read (| left |));
                                          ("right", M.read (| right |));
                                          ("value",
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "wasmi::runner::FromValueInternal",
                                                Ty.path "bool",
                                                [],
                                                "from_value_internal",
                                                []
                                              |),
                                              [
                                                M.read (|
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.path "wasmi::runner::ValueStack",
                                                      "top",
                                                      []
                                                    |),
                                                    [ M.read (| value_stack |) ]
                                                  |)
                                                |)
                                              ]
                                            |))
                                        ]
                                    |)));
                                fun γ =>
                                  ltac:(M.monadic
                                    (M.alloc (|
                                      M.never_to_any (|
                                        M.call_closure (|
                                          M.get_function (| "core::panicking::panic", [] |),
                                          [
                                            M.read (|
                                              Value.String
                                                "internal error: entered unreachable code"
                                            |)
                                          ]
                                        |)
                                      |)
                                    |)))
                              ]
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (M.match_operator (|
                              M.alloc (| Value.Tuple [] |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ :=
                                      M.alloc (|
                                        M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.apply
                                              (Ty.path "core::option::Option")
                                              [
                                                Ty.path
                                                  "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::RunInstructionTracePre"
                                              ],
                                            "unwrap",
                                            []
                                          |),
                                          [ M.read (| current_event |) ]
                                        |)
                                      |) in
                                    let γ0_0 :=
                                      M.SubPointer.get_struct_record_field (|
                                        γ,
                                        "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::RunInstructionTracePre::I32Comp",
                                        "left"
                                      |) in
                                    let γ0_1 :=
                                      M.SubPointer.get_struct_record_field (|
                                        γ,
                                        "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::RunInstructionTracePre::I32Comp",
                                        "right"
                                      |) in
                                    let left := M.copy (| γ0_0 |) in
                                    let right := M.copy (| γ0_1 |) in
                                    M.alloc (|
                                      Value.StructRecord
                                        "specs::step::StepInfo::I32Comp"
                                        [
                                          ("class",
                                            Value.StructTuple "specs::itable::RelOp::SignedGe" []);
                                          ("left", M.read (| left |));
                                          ("right", M.read (| right |));
                                          ("value",
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "wasmi::runner::FromValueInternal",
                                                Ty.path "bool",
                                                [],
                                                "from_value_internal",
                                                []
                                              |),
                                              [
                                                M.read (|
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.path "wasmi::runner::ValueStack",
                                                      "top",
                                                      []
                                                    |),
                                                    [ M.read (| value_stack |) ]
                                                  |)
                                                |)
                                              ]
                                            |))
                                        ]
                                    |)));
                                fun γ =>
                                  ltac:(M.monadic
                                    (M.alloc (|
                                      M.never_to_any (|
                                        M.call_closure (|
                                          M.get_function (| "core::panicking::panic", [] |),
                                          [
                                            M.read (|
                                              Value.String
                                                "internal error: entered unreachable code"
                                            |)
                                          ]
                                        |)
                                      |)
                                    |)))
                              ]
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (M.match_operator (|
                              M.alloc (| Value.Tuple [] |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ :=
                                      M.alloc (|
                                        M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.apply
                                              (Ty.path "core::option::Option")
                                              [
                                                Ty.path
                                                  "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::RunInstructionTracePre"
                                              ],
                                            "unwrap",
                                            []
                                          |),
                                          [ M.read (| current_event |) ]
                                        |)
                                      |) in
                                    let γ0_0 :=
                                      M.SubPointer.get_struct_record_field (|
                                        γ,
                                        "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::RunInstructionTracePre::I32Comp",
                                        "left"
                                      |) in
                                    let γ0_1 :=
                                      M.SubPointer.get_struct_record_field (|
                                        γ,
                                        "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::RunInstructionTracePre::I32Comp",
                                        "right"
                                      |) in
                                    let left := M.copy (| γ0_0 |) in
                                    let right := M.copy (| γ0_1 |) in
                                    M.alloc (|
                                      Value.StructRecord
                                        "specs::step::StepInfo::I32Comp"
                                        [
                                          ("class",
                                            Value.StructTuple
                                              "specs::itable::RelOp::UnsignedGe"
                                              []);
                                          ("left", M.read (| left |));
                                          ("right", M.read (| right |));
                                          ("value",
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "wasmi::runner::FromValueInternal",
                                                Ty.path "bool",
                                                [],
                                                "from_value_internal",
                                                []
                                              |),
                                              [
                                                M.read (|
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.path "wasmi::runner::ValueStack",
                                                      "top",
                                                      []
                                                    |),
                                                    [ M.read (| value_stack |) ]
                                                  |)
                                                |)
                                              ]
                                            |))
                                        ]
                                    |)));
                                fun γ =>
                                  ltac:(M.monadic
                                    (M.alloc (|
                                      M.never_to_any (|
                                        M.call_closure (|
                                          M.get_function (| "core::panicking::panic", [] |),
                                          [
                                            M.read (|
                                              Value.String
                                                "internal error: entered unreachable code"
                                            |)
                                          ]
                                        |)
                                      |)
                                    |)))
                              ]
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (M.match_operator (|
                              M.alloc (| Value.Tuple [] |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ :=
                                      M.alloc (|
                                        M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.apply
                                              (Ty.path "core::option::Option")
                                              [
                                                Ty.path
                                                  "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::RunInstructionTracePre"
                                              ],
                                            "unwrap",
                                            []
                                          |),
                                          [ M.read (| current_event |) ]
                                        |)
                                      |) in
                                    let γ0_0 :=
                                      M.SubPointer.get_struct_record_field (|
                                        γ,
                                        "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::RunInstructionTracePre::I32Comp",
                                        "left"
                                      |) in
                                    let γ0_1 :=
                                      M.SubPointer.get_struct_record_field (|
                                        γ,
                                        "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::RunInstructionTracePre::I32Comp",
                                        "right"
                                      |) in
                                    let left := M.copy (| γ0_0 |) in
                                    let right := M.copy (| γ0_1 |) in
                                    M.alloc (|
                                      Value.StructRecord
                                        "specs::step::StepInfo::I32Comp"
                                        [
                                          ("class",
                                            Value.StructTuple "specs::itable::RelOp::SignedLt" []);
                                          ("left", M.read (| left |));
                                          ("right", M.read (| right |));
                                          ("value",
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "wasmi::runner::FromValueInternal",
                                                Ty.path "bool",
                                                [],
                                                "from_value_internal",
                                                []
                                              |),
                                              [
                                                M.read (|
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.path "wasmi::runner::ValueStack",
                                                      "top",
                                                      []
                                                    |),
                                                    [ M.read (| value_stack |) ]
                                                  |)
                                                |)
                                              ]
                                            |))
                                        ]
                                    |)));
                                fun γ =>
                                  ltac:(M.monadic
                                    (M.alloc (|
                                      M.never_to_any (|
                                        M.call_closure (|
                                          M.get_function (| "core::panicking::panic", [] |),
                                          [
                                            M.read (|
                                              Value.String
                                                "internal error: entered unreachable code"
                                            |)
                                          ]
                                        |)
                                      |)
                                    |)))
                              ]
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (M.match_operator (|
                              M.alloc (| Value.Tuple [] |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ :=
                                      M.alloc (|
                                        M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.apply
                                              (Ty.path "core::option::Option")
                                              [
                                                Ty.path
                                                  "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::RunInstructionTracePre"
                                              ],
                                            "unwrap",
                                            []
                                          |),
                                          [ M.read (| current_event |) ]
                                        |)
                                      |) in
                                    let γ0_0 :=
                                      M.SubPointer.get_struct_record_field (|
                                        γ,
                                        "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::RunInstructionTracePre::I32Comp",
                                        "left"
                                      |) in
                                    let γ0_1 :=
                                      M.SubPointer.get_struct_record_field (|
                                        γ,
                                        "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::RunInstructionTracePre::I32Comp",
                                        "right"
                                      |) in
                                    let left := M.copy (| γ0_0 |) in
                                    let right := M.copy (| γ0_1 |) in
                                    M.alloc (|
                                      Value.StructRecord
                                        "specs::step::StepInfo::I32Comp"
                                        [
                                          ("class",
                                            Value.StructTuple
                                              "specs::itable::RelOp::UnsignedLt"
                                              []);
                                          ("left", M.read (| left |));
                                          ("right", M.read (| right |));
                                          ("value",
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "wasmi::runner::FromValueInternal",
                                                Ty.path "bool",
                                                [],
                                                "from_value_internal",
                                                []
                                              |),
                                              [
                                                M.read (|
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.path "wasmi::runner::ValueStack",
                                                      "top",
                                                      []
                                                    |),
                                                    [ M.read (| value_stack |) ]
                                                  |)
                                                |)
                                              ]
                                            |))
                                        ]
                                    |)));
                                fun γ =>
                                  ltac:(M.monadic
                                    (M.alloc (|
                                      M.never_to_any (|
                                        M.call_closure (|
                                          M.get_function (| "core::panicking::panic", [] |),
                                          [
                                            M.read (|
                                              Value.String
                                                "internal error: entered unreachable code"
                                            |)
                                          ]
                                        |)
                                      |)
                                    |)))
                              ]
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (M.match_operator (|
                              M.alloc (| Value.Tuple [] |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ :=
                                      M.alloc (|
                                        M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.apply
                                              (Ty.path "core::option::Option")
                                              [
                                                Ty.path
                                                  "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::RunInstructionTracePre"
                                              ],
                                            "unwrap",
                                            []
                                          |),
                                          [ M.read (| current_event |) ]
                                        |)
                                      |) in
                                    let γ0_0 :=
                                      M.SubPointer.get_struct_record_field (|
                                        γ,
                                        "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::RunInstructionTracePre::I32Comp",
                                        "left"
                                      |) in
                                    let γ0_1 :=
                                      M.SubPointer.get_struct_record_field (|
                                        γ,
                                        "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::RunInstructionTracePre::I32Comp",
                                        "right"
                                      |) in
                                    let left := M.copy (| γ0_0 |) in
                                    let right := M.copy (| γ0_1 |) in
                                    M.alloc (|
                                      Value.StructRecord
                                        "specs::step::StepInfo::I32Comp"
                                        [
                                          ("class",
                                            Value.StructTuple "specs::itable::RelOp::SignedLe" []);
                                          ("left", M.read (| left |));
                                          ("right", M.read (| right |));
                                          ("value",
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "wasmi::runner::FromValueInternal",
                                                Ty.path "bool",
                                                [],
                                                "from_value_internal",
                                                []
                                              |),
                                              [
                                                M.read (|
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.path "wasmi::runner::ValueStack",
                                                      "top",
                                                      []
                                                    |),
                                                    [ M.read (| value_stack |) ]
                                                  |)
                                                |)
                                              ]
                                            |))
                                        ]
                                    |)));
                                fun γ =>
                                  ltac:(M.monadic
                                    (M.alloc (|
                                      M.never_to_any (|
                                        M.call_closure (|
                                          M.get_function (| "core::panicking::panic", [] |),
                                          [
                                            M.read (|
                                              Value.String
                                                "internal error: entered unreachable code"
                                            |)
                                          ]
                                        |)
                                      |)
                                    |)))
                              ]
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (M.match_operator (|
                              M.alloc (| Value.Tuple [] |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ :=
                                      M.alloc (|
                                        M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.apply
                                              (Ty.path "core::option::Option")
                                              [
                                                Ty.path
                                                  "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::RunInstructionTracePre"
                                              ],
                                            "unwrap",
                                            []
                                          |),
                                          [ M.read (| current_event |) ]
                                        |)
                                      |) in
                                    let γ0_0 :=
                                      M.SubPointer.get_struct_record_field (|
                                        γ,
                                        "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::RunInstructionTracePre::I32Comp",
                                        "left"
                                      |) in
                                    let γ0_1 :=
                                      M.SubPointer.get_struct_record_field (|
                                        γ,
                                        "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::RunInstructionTracePre::I32Comp",
                                        "right"
                                      |) in
                                    let left := M.copy (| γ0_0 |) in
                                    let right := M.copy (| γ0_1 |) in
                                    M.alloc (|
                                      Value.StructRecord
                                        "specs::step::StepInfo::I32Comp"
                                        [
                                          ("class",
                                            Value.StructTuple
                                              "specs::itable::RelOp::UnsignedLe"
                                              []);
                                          ("left", M.read (| left |));
                                          ("right", M.read (| right |));
                                          ("value",
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "wasmi::runner::FromValueInternal",
                                                Ty.path "bool",
                                                [],
                                                "from_value_internal",
                                                []
                                              |),
                                              [
                                                M.read (|
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.path "wasmi::runner::ValueStack",
                                                      "top",
                                                      []
                                                    |),
                                                    [ M.read (| value_stack |) ]
                                                  |)
                                                |)
                                              ]
                                            |))
                                        ]
                                    |)));
                                fun γ =>
                                  ltac:(M.monadic
                                    (M.alloc (|
                                      M.never_to_any (|
                                        M.call_closure (|
                                          M.get_function (| "core::panicking::panic", [] |),
                                          [
                                            M.read (|
                                              Value.String
                                                "internal error: entered unreachable code"
                                            |)
                                          ]
                                        |)
                                      |)
                                    |)))
                              ]
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (M.match_operator (|
                              M.alloc (| Value.Tuple [] |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ :=
                                      M.alloc (|
                                        M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.apply
                                              (Ty.path "core::option::Option")
                                              [
                                                Ty.path
                                                  "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::RunInstructionTracePre"
                                              ],
                                            "unwrap",
                                            []
                                          |),
                                          [ M.read (| current_event |) ]
                                        |)
                                      |) in
                                    let γ0_0 :=
                                      M.SubPointer.get_struct_tuple_field (|
                                        γ,
                                        "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::RunInstructionTracePre::I64Single",
                                        0
                                      |) in
                                    let value := M.copy (| γ0_0 |) in
                                    M.alloc (|
                                      Value.StructRecord
                                        "specs::step::StepInfo::Test"
                                        [
                                          ("vtype",
                                            Value.StructTuple "specs::mtable::VarType::I64" []);
                                          ("value", M.rust_cast (M.read (| value |)));
                                          ("result",
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "wasmi::runner::FromValueInternal",
                                                Ty.path "i32",
                                                [],
                                                "from_value_internal",
                                                []
                                              |),
                                              [
                                                M.read (|
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.path "wasmi::runner::ValueStack",
                                                      "top",
                                                      []
                                                    |),
                                                    [ M.read (| value_stack |) ]
                                                  |)
                                                |)
                                              ]
                                            |))
                                        ]
                                    |)));
                                fun γ =>
                                  ltac:(M.monadic
                                    (M.alloc (|
                                      M.never_to_any (|
                                        M.call_closure (|
                                          M.get_function (| "core::panicking::panic", [] |),
                                          [
                                            M.read (|
                                              Value.String
                                                "internal error: entered unreachable code"
                                            |)
                                          ]
                                        |)
                                      |)
                                    |)))
                              ]
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (M.match_operator (|
                              M.alloc (| Value.Tuple [] |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ :=
                                      M.alloc (|
                                        M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.apply
                                              (Ty.path "core::option::Option")
                                              [
                                                Ty.path
                                                  "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::RunInstructionTracePre"
                                              ],
                                            "unwrap",
                                            []
                                          |),
                                          [ M.read (| current_event |) ]
                                        |)
                                      |) in
                                    let γ0_0 :=
                                      M.SubPointer.get_struct_record_field (|
                                        γ,
                                        "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::RunInstructionTracePre::I64Comp",
                                        "left"
                                      |) in
                                    let γ0_1 :=
                                      M.SubPointer.get_struct_record_field (|
                                        γ,
                                        "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::RunInstructionTracePre::I64Comp",
                                        "right"
                                      |) in
                                    let left := M.copy (| γ0_0 |) in
                                    let right := M.copy (| γ0_1 |) in
                                    M.alloc (|
                                      Value.StructRecord
                                        "specs::step::StepInfo::I64Comp"
                                        [
                                          ("class",
                                            Value.StructTuple "specs::itable::RelOp::Eq" []);
                                          ("left", M.read (| left |));
                                          ("right", M.read (| right |));
                                          ("value",
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "wasmi::runner::FromValueInternal",
                                                Ty.path "bool",
                                                [],
                                                "from_value_internal",
                                                []
                                              |),
                                              [
                                                M.read (|
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.path "wasmi::runner::ValueStack",
                                                      "top",
                                                      []
                                                    |),
                                                    [ M.read (| value_stack |) ]
                                                  |)
                                                |)
                                              ]
                                            |))
                                        ]
                                    |)));
                                fun γ =>
                                  ltac:(M.monadic
                                    (M.alloc (|
                                      M.never_to_any (|
                                        M.call_closure (|
                                          M.get_function (| "core::panicking::panic", [] |),
                                          [
                                            M.read (|
                                              Value.String
                                                "internal error: entered unreachable code"
                                            |)
                                          ]
                                        |)
                                      |)
                                    |)))
                              ]
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (M.match_operator (|
                              M.alloc (| Value.Tuple [] |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ :=
                                      M.alloc (|
                                        M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.apply
                                              (Ty.path "core::option::Option")
                                              [
                                                Ty.path
                                                  "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::RunInstructionTracePre"
                                              ],
                                            "unwrap",
                                            []
                                          |),
                                          [ M.read (| current_event |) ]
                                        |)
                                      |) in
                                    let γ0_0 :=
                                      M.SubPointer.get_struct_record_field (|
                                        γ,
                                        "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::RunInstructionTracePre::I64Comp",
                                        "left"
                                      |) in
                                    let γ0_1 :=
                                      M.SubPointer.get_struct_record_field (|
                                        γ,
                                        "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::RunInstructionTracePre::I64Comp",
                                        "right"
                                      |) in
                                    let left := M.copy (| γ0_0 |) in
                                    let right := M.copy (| γ0_1 |) in
                                    M.alloc (|
                                      Value.StructRecord
                                        "specs::step::StepInfo::I64Comp"
                                        [
                                          ("class",
                                            Value.StructTuple "specs::itable::RelOp::Ne" []);
                                          ("left", M.read (| left |));
                                          ("right", M.read (| right |));
                                          ("value",
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "wasmi::runner::FromValueInternal",
                                                Ty.path "bool",
                                                [],
                                                "from_value_internal",
                                                []
                                              |),
                                              [
                                                M.read (|
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.path "wasmi::runner::ValueStack",
                                                      "top",
                                                      []
                                                    |),
                                                    [ M.read (| value_stack |) ]
                                                  |)
                                                |)
                                              ]
                                            |))
                                        ]
                                    |)));
                                fun γ =>
                                  ltac:(M.monadic
                                    (M.alloc (|
                                      M.never_to_any (|
                                        M.call_closure (|
                                          M.get_function (| "core::panicking::panic", [] |),
                                          [
                                            M.read (|
                                              Value.String
                                                "internal error: entered unreachable code"
                                            |)
                                          ]
                                        |)
                                      |)
                                    |)))
                              ]
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (M.match_operator (|
                              M.alloc (| Value.Tuple [] |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ :=
                                      M.alloc (|
                                        M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.apply
                                              (Ty.path "core::option::Option")
                                              [
                                                Ty.path
                                                  "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::RunInstructionTracePre"
                                              ],
                                            "unwrap",
                                            []
                                          |),
                                          [ M.read (| current_event |) ]
                                        |)
                                      |) in
                                    let γ0_0 :=
                                      M.SubPointer.get_struct_record_field (|
                                        γ,
                                        "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::RunInstructionTracePre::I64Comp",
                                        "left"
                                      |) in
                                    let γ0_1 :=
                                      M.SubPointer.get_struct_record_field (|
                                        γ,
                                        "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::RunInstructionTracePre::I64Comp",
                                        "right"
                                      |) in
                                    let left := M.copy (| γ0_0 |) in
                                    let right := M.copy (| γ0_1 |) in
                                    M.alloc (|
                                      Value.StructRecord
                                        "specs::step::StepInfo::I64Comp"
                                        [
                                          ("class",
                                            Value.StructTuple "specs::itable::RelOp::SignedGt" []);
                                          ("left", M.read (| left |));
                                          ("right", M.read (| right |));
                                          ("value",
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "wasmi::runner::FromValueInternal",
                                                Ty.path "bool",
                                                [],
                                                "from_value_internal",
                                                []
                                              |),
                                              [
                                                M.read (|
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.path "wasmi::runner::ValueStack",
                                                      "top",
                                                      []
                                                    |),
                                                    [ M.read (| value_stack |) ]
                                                  |)
                                                |)
                                              ]
                                            |))
                                        ]
                                    |)));
                                fun γ =>
                                  ltac:(M.monadic
                                    (M.alloc (|
                                      M.never_to_any (|
                                        M.call_closure (|
                                          M.get_function (| "core::panicking::panic", [] |),
                                          [
                                            M.read (|
                                              Value.String
                                                "internal error: entered unreachable code"
                                            |)
                                          ]
                                        |)
                                      |)
                                    |)))
                              ]
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (M.match_operator (|
                              M.alloc (| Value.Tuple [] |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ :=
                                      M.alloc (|
                                        M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.apply
                                              (Ty.path "core::option::Option")
                                              [
                                                Ty.path
                                                  "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::RunInstructionTracePre"
                                              ],
                                            "unwrap",
                                            []
                                          |),
                                          [ M.read (| current_event |) ]
                                        |)
                                      |) in
                                    let γ0_0 :=
                                      M.SubPointer.get_struct_record_field (|
                                        γ,
                                        "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::RunInstructionTracePre::I64Comp",
                                        "left"
                                      |) in
                                    let γ0_1 :=
                                      M.SubPointer.get_struct_record_field (|
                                        γ,
                                        "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::RunInstructionTracePre::I64Comp",
                                        "right"
                                      |) in
                                    let left := M.copy (| γ0_0 |) in
                                    let right := M.copy (| γ0_1 |) in
                                    M.alloc (|
                                      Value.StructRecord
                                        "specs::step::StepInfo::I64Comp"
                                        [
                                          ("class",
                                            Value.StructTuple
                                              "specs::itable::RelOp::UnsignedGt"
                                              []);
                                          ("left", M.read (| left |));
                                          ("right", M.read (| right |));
                                          ("value",
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "wasmi::runner::FromValueInternal",
                                                Ty.path "bool",
                                                [],
                                                "from_value_internal",
                                                []
                                              |),
                                              [
                                                M.read (|
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.path "wasmi::runner::ValueStack",
                                                      "top",
                                                      []
                                                    |),
                                                    [ M.read (| value_stack |) ]
                                                  |)
                                                |)
                                              ]
                                            |))
                                        ]
                                    |)));
                                fun γ =>
                                  ltac:(M.monadic
                                    (M.alloc (|
                                      M.never_to_any (|
                                        M.call_closure (|
                                          M.get_function (| "core::panicking::panic", [] |),
                                          [
                                            M.read (|
                                              Value.String
                                                "internal error: entered unreachable code"
                                            |)
                                          ]
                                        |)
                                      |)
                                    |)))
                              ]
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (M.match_operator (|
                              M.alloc (| Value.Tuple [] |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ :=
                                      M.alloc (|
                                        M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.apply
                                              (Ty.path "core::option::Option")
                                              [
                                                Ty.path
                                                  "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::RunInstructionTracePre"
                                              ],
                                            "unwrap",
                                            []
                                          |),
                                          [ M.read (| current_event |) ]
                                        |)
                                      |) in
                                    let γ0_0 :=
                                      M.SubPointer.get_struct_record_field (|
                                        γ,
                                        "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::RunInstructionTracePre::I64Comp",
                                        "left"
                                      |) in
                                    let γ0_1 :=
                                      M.SubPointer.get_struct_record_field (|
                                        γ,
                                        "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::RunInstructionTracePre::I64Comp",
                                        "right"
                                      |) in
                                    let left := M.copy (| γ0_0 |) in
                                    let right := M.copy (| γ0_1 |) in
                                    M.alloc (|
                                      Value.StructRecord
                                        "specs::step::StepInfo::I64Comp"
                                        [
                                          ("class",
                                            Value.StructTuple
                                              "specs::itable::RelOp::UnsignedLt"
                                              []);
                                          ("left", M.read (| left |));
                                          ("right", M.read (| right |));
                                          ("value",
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "wasmi::runner::FromValueInternal",
                                                Ty.path "bool",
                                                [],
                                                "from_value_internal",
                                                []
                                              |),
                                              [
                                                M.read (|
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.path "wasmi::runner::ValueStack",
                                                      "top",
                                                      []
                                                    |),
                                                    [ M.read (| value_stack |) ]
                                                  |)
                                                |)
                                              ]
                                            |))
                                        ]
                                    |)));
                                fun γ =>
                                  ltac:(M.monadic
                                    (M.alloc (|
                                      M.never_to_any (|
                                        M.call_closure (|
                                          M.get_function (| "core::panicking::panic", [] |),
                                          [
                                            M.read (|
                                              Value.String
                                                "internal error: entered unreachable code"
                                            |)
                                          ]
                                        |)
                                      |)
                                    |)))
                              ]
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (M.match_operator (|
                              M.alloc (| Value.Tuple [] |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ :=
                                      M.alloc (|
                                        M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.apply
                                              (Ty.path "core::option::Option")
                                              [
                                                Ty.path
                                                  "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::RunInstructionTracePre"
                                              ],
                                            "unwrap",
                                            []
                                          |),
                                          [ M.read (| current_event |) ]
                                        |)
                                      |) in
                                    let γ0_0 :=
                                      M.SubPointer.get_struct_record_field (|
                                        γ,
                                        "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::RunInstructionTracePre::I64Comp",
                                        "left"
                                      |) in
                                    let γ0_1 :=
                                      M.SubPointer.get_struct_record_field (|
                                        γ,
                                        "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::RunInstructionTracePre::I64Comp",
                                        "right"
                                      |) in
                                    let left := M.copy (| γ0_0 |) in
                                    let right := M.copy (| γ0_1 |) in
                                    M.alloc (|
                                      Value.StructRecord
                                        "specs::step::StepInfo::I64Comp"
                                        [
                                          ("class",
                                            Value.StructTuple "specs::itable::RelOp::SignedLt" []);
                                          ("left", M.read (| left |));
                                          ("right", M.read (| right |));
                                          ("value",
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "wasmi::runner::FromValueInternal",
                                                Ty.path "bool",
                                                [],
                                                "from_value_internal",
                                                []
                                              |),
                                              [
                                                M.read (|
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.path "wasmi::runner::ValueStack",
                                                      "top",
                                                      []
                                                    |),
                                                    [ M.read (| value_stack |) ]
                                                  |)
                                                |)
                                              ]
                                            |))
                                        ]
                                    |)));
                                fun γ =>
                                  ltac:(M.monadic
                                    (M.alloc (|
                                      M.never_to_any (|
                                        M.call_closure (|
                                          M.get_function (| "core::panicking::panic", [] |),
                                          [
                                            M.read (|
                                              Value.String
                                                "internal error: entered unreachable code"
                                            |)
                                          ]
                                        |)
                                      |)
                                    |)))
                              ]
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (M.match_operator (|
                              M.alloc (| Value.Tuple [] |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ :=
                                      M.alloc (|
                                        M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.apply
                                              (Ty.path "core::option::Option")
                                              [
                                                Ty.path
                                                  "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::RunInstructionTracePre"
                                              ],
                                            "unwrap",
                                            []
                                          |),
                                          [ M.read (| current_event |) ]
                                        |)
                                      |) in
                                    let γ0_0 :=
                                      M.SubPointer.get_struct_record_field (|
                                        γ,
                                        "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::RunInstructionTracePre::I64Comp",
                                        "left"
                                      |) in
                                    let γ0_1 :=
                                      M.SubPointer.get_struct_record_field (|
                                        γ,
                                        "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::RunInstructionTracePre::I64Comp",
                                        "right"
                                      |) in
                                    let left := M.copy (| γ0_0 |) in
                                    let right := M.copy (| γ0_1 |) in
                                    M.alloc (|
                                      Value.StructRecord
                                        "specs::step::StepInfo::I64Comp"
                                        [
                                          ("class",
                                            Value.StructTuple
                                              "specs::itable::RelOp::UnsignedLe"
                                              []);
                                          ("left", M.read (| left |));
                                          ("right", M.read (| right |));
                                          ("value",
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "wasmi::runner::FromValueInternal",
                                                Ty.path "bool",
                                                [],
                                                "from_value_internal",
                                                []
                                              |),
                                              [
                                                M.read (|
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.path "wasmi::runner::ValueStack",
                                                      "top",
                                                      []
                                                    |),
                                                    [ M.read (| value_stack |) ]
                                                  |)
                                                |)
                                              ]
                                            |))
                                        ]
                                    |)));
                                fun γ =>
                                  ltac:(M.monadic
                                    (M.alloc (|
                                      M.never_to_any (|
                                        M.call_closure (|
                                          M.get_function (| "core::panicking::panic", [] |),
                                          [
                                            M.read (|
                                              Value.String
                                                "internal error: entered unreachable code"
                                            |)
                                          ]
                                        |)
                                      |)
                                    |)))
                              ]
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (M.match_operator (|
                              M.alloc (| Value.Tuple [] |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ :=
                                      M.alloc (|
                                        M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.apply
                                              (Ty.path "core::option::Option")
                                              [
                                                Ty.path
                                                  "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::RunInstructionTracePre"
                                              ],
                                            "unwrap",
                                            []
                                          |),
                                          [ M.read (| current_event |) ]
                                        |)
                                      |) in
                                    let γ0_0 :=
                                      M.SubPointer.get_struct_record_field (|
                                        γ,
                                        "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::RunInstructionTracePre::I64Comp",
                                        "left"
                                      |) in
                                    let γ0_1 :=
                                      M.SubPointer.get_struct_record_field (|
                                        γ,
                                        "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::RunInstructionTracePre::I64Comp",
                                        "right"
                                      |) in
                                    let left := M.copy (| γ0_0 |) in
                                    let right := M.copy (| γ0_1 |) in
                                    M.alloc (|
                                      Value.StructRecord
                                        "specs::step::StepInfo::I64Comp"
                                        [
                                          ("class",
                                            Value.StructTuple "specs::itable::RelOp::SignedLe" []);
                                          ("left", M.read (| left |));
                                          ("right", M.read (| right |));
                                          ("value",
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "wasmi::runner::FromValueInternal",
                                                Ty.path "bool",
                                                [],
                                                "from_value_internal",
                                                []
                                              |),
                                              [
                                                M.read (|
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.path "wasmi::runner::ValueStack",
                                                      "top",
                                                      []
                                                    |),
                                                    [ M.read (| value_stack |) ]
                                                  |)
                                                |)
                                              ]
                                            |))
                                        ]
                                    |)));
                                fun γ =>
                                  ltac:(M.monadic
                                    (M.alloc (|
                                      M.never_to_any (|
                                        M.call_closure (|
                                          M.get_function (| "core::panicking::panic", [] |),
                                          [
                                            M.read (|
                                              Value.String
                                                "internal error: entered unreachable code"
                                            |)
                                          ]
                                        |)
                                      |)
                                    |)))
                              ]
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (M.match_operator (|
                              M.alloc (| Value.Tuple [] |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ :=
                                      M.alloc (|
                                        M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.apply
                                              (Ty.path "core::option::Option")
                                              [
                                                Ty.path
                                                  "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::RunInstructionTracePre"
                                              ],
                                            "unwrap",
                                            []
                                          |),
                                          [ M.read (| current_event |) ]
                                        |)
                                      |) in
                                    let γ0_0 :=
                                      M.SubPointer.get_struct_record_field (|
                                        γ,
                                        "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::RunInstructionTracePre::I64Comp",
                                        "left"
                                      |) in
                                    let γ0_1 :=
                                      M.SubPointer.get_struct_record_field (|
                                        γ,
                                        "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::RunInstructionTracePre::I64Comp",
                                        "right"
                                      |) in
                                    let left := M.copy (| γ0_0 |) in
                                    let right := M.copy (| γ0_1 |) in
                                    M.alloc (|
                                      Value.StructRecord
                                        "specs::step::StepInfo::I64Comp"
                                        [
                                          ("class",
                                            Value.StructTuple
                                              "specs::itable::RelOp::UnsignedGe"
                                              []);
                                          ("left", M.read (| left |));
                                          ("right", M.read (| right |));
                                          ("value",
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "wasmi::runner::FromValueInternal",
                                                Ty.path "bool",
                                                [],
                                                "from_value_internal",
                                                []
                                              |),
                                              [
                                                M.read (|
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.path "wasmi::runner::ValueStack",
                                                      "top",
                                                      []
                                                    |),
                                                    [ M.read (| value_stack |) ]
                                                  |)
                                                |)
                                              ]
                                            |))
                                        ]
                                    |)));
                                fun γ =>
                                  ltac:(M.monadic
                                    (M.alloc (|
                                      M.never_to_any (|
                                        M.call_closure (|
                                          M.get_function (| "core::panicking::panic", [] |),
                                          [
                                            M.read (|
                                              Value.String
                                                "internal error: entered unreachable code"
                                            |)
                                          ]
                                        |)
                                      |)
                                    |)))
                              ]
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (M.match_operator (|
                              M.alloc (| Value.Tuple [] |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ :=
                                      M.alloc (|
                                        M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.apply
                                              (Ty.path "core::option::Option")
                                              [
                                                Ty.path
                                                  "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::RunInstructionTracePre"
                                              ],
                                            "unwrap",
                                            []
                                          |),
                                          [ M.read (| current_event |) ]
                                        |)
                                      |) in
                                    let γ0_0 :=
                                      M.SubPointer.get_struct_record_field (|
                                        γ,
                                        "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::RunInstructionTracePre::I64Comp",
                                        "left"
                                      |) in
                                    let γ0_1 :=
                                      M.SubPointer.get_struct_record_field (|
                                        γ,
                                        "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::RunInstructionTracePre::I64Comp",
                                        "right"
                                      |) in
                                    let left := M.copy (| γ0_0 |) in
                                    let right := M.copy (| γ0_1 |) in
                                    M.alloc (|
                                      Value.StructRecord
                                        "specs::step::StepInfo::I64Comp"
                                        [
                                          ("class",
                                            Value.StructTuple "specs::itable::RelOp::SignedGe" []);
                                          ("left", M.read (| left |));
                                          ("right", M.read (| right |));
                                          ("value",
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "wasmi::runner::FromValueInternal",
                                                Ty.path "bool",
                                                [],
                                                "from_value_internal",
                                                []
                                              |),
                                              [
                                                M.read (|
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.path "wasmi::runner::ValueStack",
                                                      "top",
                                                      []
                                                    |),
                                                    [ M.read (| value_stack |) ]
                                                  |)
                                                |)
                                              ]
                                            |))
                                        ]
                                    |)));
                                fun γ =>
                                  ltac:(M.monadic
                                    (M.alloc (|
                                      M.never_to_any (|
                                        M.call_closure (|
                                          M.get_function (| "core::panicking::panic", [] |),
                                          [
                                            M.read (|
                                              Value.String
                                                "internal error: entered unreachable code"
                                            |)
                                          ]
                                        |)
                                      |)
                                    |)))
                              ]
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (M.match_operator (|
                              M.alloc (| Value.Tuple [] |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ :=
                                      M.alloc (|
                                        M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.apply
                                              (Ty.path "core::option::Option")
                                              [
                                                Ty.path
                                                  "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::RunInstructionTracePre"
                                              ],
                                            "unwrap",
                                            []
                                          |),
                                          [ M.read (| current_event |) ]
                                        |)
                                      |) in
                                    let γ0_0 :=
                                      M.SubPointer.get_struct_record_field (|
                                        γ,
                                        "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::RunInstructionTracePre::I32BinOp",
                                        "left"
                                      |) in
                                    let γ0_1 :=
                                      M.SubPointer.get_struct_record_field (|
                                        γ,
                                        "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::RunInstructionTracePre::I32BinOp",
                                        "right"
                                      |) in
                                    let left := M.copy (| γ0_0 |) in
                                    let right := M.copy (| γ0_1 |) in
                                    M.alloc (|
                                      Value.StructRecord
                                        "specs::step::StepInfo::I32BinOp"
                                        [
                                          ("class",
                                            Value.StructTuple "specs::itable::BinOp::Add" []);
                                          ("left", M.read (| left |));
                                          ("right", M.read (| right |));
                                          ("value",
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "wasmi::runner::FromValueInternal",
                                                Ty.path "i32",
                                                [],
                                                "from_value_internal",
                                                []
                                              |),
                                              [
                                                M.read (|
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.path "wasmi::runner::ValueStack",
                                                      "top",
                                                      []
                                                    |),
                                                    [ M.read (| value_stack |) ]
                                                  |)
                                                |)
                                              ]
                                            |))
                                        ]
                                    |)));
                                fun γ =>
                                  ltac:(M.monadic
                                    (M.alloc (|
                                      M.never_to_any (|
                                        M.call_closure (|
                                          M.get_function (| "core::panicking::panic", [] |),
                                          [
                                            M.read (|
                                              Value.String
                                                "internal error: entered unreachable code"
                                            |)
                                          ]
                                        |)
                                      |)
                                    |)))
                              ]
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (M.match_operator (|
                              M.alloc (| Value.Tuple [] |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ :=
                                      M.alloc (|
                                        M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.apply
                                              (Ty.path "core::option::Option")
                                              [
                                                Ty.path
                                                  "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::RunInstructionTracePre"
                                              ],
                                            "unwrap",
                                            []
                                          |),
                                          [ M.read (| current_event |) ]
                                        |)
                                      |) in
                                    let γ0_0 :=
                                      M.SubPointer.get_struct_record_field (|
                                        γ,
                                        "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::RunInstructionTracePre::I32BinOp",
                                        "left"
                                      |) in
                                    let γ0_1 :=
                                      M.SubPointer.get_struct_record_field (|
                                        γ,
                                        "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::RunInstructionTracePre::I32BinOp",
                                        "right"
                                      |) in
                                    let left := M.copy (| γ0_0 |) in
                                    let right := M.copy (| γ0_1 |) in
                                    M.alloc (|
                                      Value.StructRecord
                                        "specs::step::StepInfo::I32BinOp"
                                        [
                                          ("class",
                                            Value.StructTuple "specs::itable::BinOp::Sub" []);
                                          ("left", M.read (| left |));
                                          ("right", M.read (| right |));
                                          ("value",
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "wasmi::runner::FromValueInternal",
                                                Ty.path "i32",
                                                [],
                                                "from_value_internal",
                                                []
                                              |),
                                              [
                                                M.read (|
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.path "wasmi::runner::ValueStack",
                                                      "top",
                                                      []
                                                    |),
                                                    [ M.read (| value_stack |) ]
                                                  |)
                                                |)
                                              ]
                                            |))
                                        ]
                                    |)));
                                fun γ =>
                                  ltac:(M.monadic
                                    (M.alloc (|
                                      M.never_to_any (|
                                        M.call_closure (|
                                          M.get_function (| "core::panicking::panic", [] |),
                                          [
                                            M.read (|
                                              Value.String
                                                "internal error: entered unreachable code"
                                            |)
                                          ]
                                        |)
                                      |)
                                    |)))
                              ]
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (M.match_operator (|
                              M.alloc (| Value.Tuple [] |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ :=
                                      M.alloc (|
                                        M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.apply
                                              (Ty.path "core::option::Option")
                                              [
                                                Ty.path
                                                  "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::RunInstructionTracePre"
                                              ],
                                            "unwrap",
                                            []
                                          |),
                                          [ M.read (| current_event |) ]
                                        |)
                                      |) in
                                    let γ0_0 :=
                                      M.SubPointer.get_struct_record_field (|
                                        γ,
                                        "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::RunInstructionTracePre::I32BinOp",
                                        "left"
                                      |) in
                                    let γ0_1 :=
                                      M.SubPointer.get_struct_record_field (|
                                        γ,
                                        "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::RunInstructionTracePre::I32BinOp",
                                        "right"
                                      |) in
                                    let left := M.copy (| γ0_0 |) in
                                    let right := M.copy (| γ0_1 |) in
                                    M.alloc (|
                                      Value.StructRecord
                                        "specs::step::StepInfo::I32BinOp"
                                        [
                                          ("class",
                                            Value.StructTuple "specs::itable::BinOp::Mul" []);
                                          ("left", M.read (| left |));
                                          ("right", M.read (| right |));
                                          ("value",
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "wasmi::runner::FromValueInternal",
                                                Ty.path "i32",
                                                [],
                                                "from_value_internal",
                                                []
                                              |),
                                              [
                                                M.read (|
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.path "wasmi::runner::ValueStack",
                                                      "top",
                                                      []
                                                    |),
                                                    [ M.read (| value_stack |) ]
                                                  |)
                                                |)
                                              ]
                                            |))
                                        ]
                                    |)));
                                fun γ =>
                                  ltac:(M.monadic
                                    (M.alloc (|
                                      M.never_to_any (|
                                        M.call_closure (|
                                          M.get_function (| "core::panicking::panic", [] |),
                                          [
                                            M.read (|
                                              Value.String
                                                "internal error: entered unreachable code"
                                            |)
                                          ]
                                        |)
                                      |)
                                    |)))
                              ]
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (M.match_operator (|
                              M.alloc (| Value.Tuple [] |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ :=
                                      M.alloc (|
                                        M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.apply
                                              (Ty.path "core::option::Option")
                                              [
                                                Ty.path
                                                  "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::RunInstructionTracePre"
                                              ],
                                            "unwrap",
                                            []
                                          |),
                                          [ M.read (| current_event |) ]
                                        |)
                                      |) in
                                    let γ0_0 :=
                                      M.SubPointer.get_struct_record_field (|
                                        γ,
                                        "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::RunInstructionTracePre::I32BinOp",
                                        "left"
                                      |) in
                                    let γ0_1 :=
                                      M.SubPointer.get_struct_record_field (|
                                        γ,
                                        "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::RunInstructionTracePre::I32BinOp",
                                        "right"
                                      |) in
                                    let left := M.copy (| γ0_0 |) in
                                    let right := M.copy (| γ0_1 |) in
                                    M.alloc (|
                                      Value.StructRecord
                                        "specs::step::StepInfo::I32BinOp"
                                        [
                                          ("class",
                                            Value.StructTuple
                                              "specs::itable::BinOp::UnsignedDiv"
                                              []);
                                          ("left", M.read (| left |));
                                          ("right", M.read (| right |));
                                          ("value",
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "wasmi::runner::FromValueInternal",
                                                Ty.path "i32",
                                                [],
                                                "from_value_internal",
                                                []
                                              |),
                                              [
                                                M.read (|
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.path "wasmi::runner::ValueStack",
                                                      "top",
                                                      []
                                                    |),
                                                    [ M.read (| value_stack |) ]
                                                  |)
                                                |)
                                              ]
                                            |))
                                        ]
                                    |)));
                                fun γ =>
                                  ltac:(M.monadic
                                    (M.alloc (|
                                      M.never_to_any (|
                                        M.call_closure (|
                                          M.get_function (| "core::panicking::panic", [] |),
                                          [
                                            M.read (|
                                              Value.String
                                                "internal error: entered unreachable code"
                                            |)
                                          ]
                                        |)
                                      |)
                                    |)))
                              ]
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (M.match_operator (|
                              M.alloc (| Value.Tuple [] |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ :=
                                      M.alloc (|
                                        M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.apply
                                              (Ty.path "core::option::Option")
                                              [
                                                Ty.path
                                                  "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::RunInstructionTracePre"
                                              ],
                                            "unwrap",
                                            []
                                          |),
                                          [ M.read (| current_event |) ]
                                        |)
                                      |) in
                                    let γ0_0 :=
                                      M.SubPointer.get_struct_record_field (|
                                        γ,
                                        "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::RunInstructionTracePre::I32BinOp",
                                        "left"
                                      |) in
                                    let γ0_1 :=
                                      M.SubPointer.get_struct_record_field (|
                                        γ,
                                        "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::RunInstructionTracePre::I32BinOp",
                                        "right"
                                      |) in
                                    let left := M.copy (| γ0_0 |) in
                                    let right := M.copy (| γ0_1 |) in
                                    M.alloc (|
                                      Value.StructRecord
                                        "specs::step::StepInfo::I32BinOp"
                                        [
                                          ("class",
                                            Value.StructTuple
                                              "specs::itable::BinOp::UnsignedRem"
                                              []);
                                          ("left", M.read (| left |));
                                          ("right", M.read (| right |));
                                          ("value",
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "wasmi::runner::FromValueInternal",
                                                Ty.path "i32",
                                                [],
                                                "from_value_internal",
                                                []
                                              |),
                                              [
                                                M.read (|
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.path "wasmi::runner::ValueStack",
                                                      "top",
                                                      []
                                                    |),
                                                    [ M.read (| value_stack |) ]
                                                  |)
                                                |)
                                              ]
                                            |))
                                        ]
                                    |)));
                                fun γ =>
                                  ltac:(M.monadic
                                    (M.alloc (|
                                      M.never_to_any (|
                                        M.call_closure (|
                                          M.get_function (| "core::panicking::panic", [] |),
                                          [
                                            M.read (|
                                              Value.String
                                                "internal error: entered unreachable code"
                                            |)
                                          ]
                                        |)
                                      |)
                                    |)))
                              ]
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (M.match_operator (|
                              M.alloc (| Value.Tuple [] |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ :=
                                      M.alloc (|
                                        M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.apply
                                              (Ty.path "core::option::Option")
                                              [
                                                Ty.path
                                                  "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::RunInstructionTracePre"
                                              ],
                                            "unwrap",
                                            []
                                          |),
                                          [ M.read (| current_event |) ]
                                        |)
                                      |) in
                                    let γ0_0 :=
                                      M.SubPointer.get_struct_record_field (|
                                        γ,
                                        "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::RunInstructionTracePre::I32BinOp",
                                        "left"
                                      |) in
                                    let γ0_1 :=
                                      M.SubPointer.get_struct_record_field (|
                                        γ,
                                        "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::RunInstructionTracePre::I32BinOp",
                                        "right"
                                      |) in
                                    let left := M.copy (| γ0_0 |) in
                                    let right := M.copy (| γ0_1 |) in
                                    M.alloc (|
                                      Value.StructRecord
                                        "specs::step::StepInfo::I32BinOp"
                                        [
                                          ("class",
                                            Value.StructTuple "specs::itable::BinOp::SignedDiv" []);
                                          ("left", M.read (| left |));
                                          ("right", M.read (| right |));
                                          ("value",
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "wasmi::runner::FromValueInternal",
                                                Ty.path "i32",
                                                [],
                                                "from_value_internal",
                                                []
                                              |),
                                              [
                                                M.read (|
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.path "wasmi::runner::ValueStack",
                                                      "top",
                                                      []
                                                    |),
                                                    [ M.read (| value_stack |) ]
                                                  |)
                                                |)
                                              ]
                                            |))
                                        ]
                                    |)));
                                fun γ =>
                                  ltac:(M.monadic
                                    (M.alloc (|
                                      M.never_to_any (|
                                        M.call_closure (|
                                          M.get_function (| "core::panicking::panic", [] |),
                                          [
                                            M.read (|
                                              Value.String
                                                "internal error: entered unreachable code"
                                            |)
                                          ]
                                        |)
                                      |)
                                    |)))
                              ]
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (M.match_operator (|
                              M.alloc (| Value.Tuple [] |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ :=
                                      M.alloc (|
                                        M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.apply
                                              (Ty.path "core::option::Option")
                                              [
                                                Ty.path
                                                  "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::RunInstructionTracePre"
                                              ],
                                            "unwrap",
                                            []
                                          |),
                                          [ M.read (| current_event |) ]
                                        |)
                                      |) in
                                    let γ0_0 :=
                                      M.SubPointer.get_struct_record_field (|
                                        γ,
                                        "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::RunInstructionTracePre::I32BinOp",
                                        "left"
                                      |) in
                                    let γ0_1 :=
                                      M.SubPointer.get_struct_record_field (|
                                        γ,
                                        "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::RunInstructionTracePre::I32BinOp",
                                        "right"
                                      |) in
                                    let left := M.copy (| γ0_0 |) in
                                    let right := M.copy (| γ0_1 |) in
                                    M.alloc (|
                                      Value.StructRecord
                                        "specs::step::StepInfo::I32BinOp"
                                        [
                                          ("class",
                                            Value.StructTuple "specs::itable::BinOp::SignedRem" []);
                                          ("left", M.read (| left |));
                                          ("right", M.read (| right |));
                                          ("value",
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "wasmi::runner::FromValueInternal",
                                                Ty.path "i32",
                                                [],
                                                "from_value_internal",
                                                []
                                              |),
                                              [
                                                M.read (|
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.path "wasmi::runner::ValueStack",
                                                      "top",
                                                      []
                                                    |),
                                                    [ M.read (| value_stack |) ]
                                                  |)
                                                |)
                                              ]
                                            |))
                                        ]
                                    |)));
                                fun γ =>
                                  ltac:(M.monadic
                                    (M.alloc (|
                                      M.never_to_any (|
                                        M.call_closure (|
                                          M.get_function (| "core::panicking::panic", [] |),
                                          [
                                            M.read (|
                                              Value.String
                                                "internal error: entered unreachable code"
                                            |)
                                          ]
                                        |)
                                      |)
                                    |)))
                              ]
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (M.match_operator (|
                              M.alloc (| Value.Tuple [] |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ :=
                                      M.alloc (|
                                        M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.apply
                                              (Ty.path "core::option::Option")
                                              [
                                                Ty.path
                                                  "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::RunInstructionTracePre"
                                              ],
                                            "unwrap",
                                            []
                                          |),
                                          [ M.read (| current_event |) ]
                                        |)
                                      |) in
                                    let γ0_0 :=
                                      M.SubPointer.get_struct_record_field (|
                                        γ,
                                        "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::RunInstructionTracePre::I32BinOp",
                                        "left"
                                      |) in
                                    let γ0_1 :=
                                      M.SubPointer.get_struct_record_field (|
                                        γ,
                                        "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::RunInstructionTracePre::I32BinOp",
                                        "right"
                                      |) in
                                    let left := M.copy (| γ0_0 |) in
                                    let right := M.copy (| γ0_1 |) in
                                    M.alloc (|
                                      Value.StructRecord
                                        "specs::step::StepInfo::I32BinBitOp"
                                        [
                                          ("class",
                                            Value.StructTuple "specs::itable::BitOp::And" []);
                                          ("left", M.read (| left |));
                                          ("right", M.read (| right |));
                                          ("value",
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "wasmi::runner::FromValueInternal",
                                                Ty.path "i32",
                                                [],
                                                "from_value_internal",
                                                []
                                              |),
                                              [
                                                M.read (|
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.path "wasmi::runner::ValueStack",
                                                      "top",
                                                      []
                                                    |),
                                                    [ M.read (| value_stack |) ]
                                                  |)
                                                |)
                                              ]
                                            |))
                                        ]
                                    |)));
                                fun γ =>
                                  ltac:(M.monadic
                                    (M.alloc (|
                                      M.never_to_any (|
                                        M.call_closure (|
                                          M.get_function (| "core::panicking::panic", [] |),
                                          [
                                            M.read (|
                                              Value.String
                                                "internal error: entered unreachable code"
                                            |)
                                          ]
                                        |)
                                      |)
                                    |)))
                              ]
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (M.match_operator (|
                              M.alloc (| Value.Tuple [] |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ :=
                                      M.alloc (|
                                        M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.apply
                                              (Ty.path "core::option::Option")
                                              [
                                                Ty.path
                                                  "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::RunInstructionTracePre"
                                              ],
                                            "unwrap",
                                            []
                                          |),
                                          [ M.read (| current_event |) ]
                                        |)
                                      |) in
                                    let γ0_0 :=
                                      M.SubPointer.get_struct_record_field (|
                                        γ,
                                        "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::RunInstructionTracePre::I32BinOp",
                                        "left"
                                      |) in
                                    let γ0_1 :=
                                      M.SubPointer.get_struct_record_field (|
                                        γ,
                                        "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::RunInstructionTracePre::I32BinOp",
                                        "right"
                                      |) in
                                    let left := M.copy (| γ0_0 |) in
                                    let right := M.copy (| γ0_1 |) in
                                    M.alloc (|
                                      Value.StructRecord
                                        "specs::step::StepInfo::I32BinBitOp"
                                        [
                                          ("class",
                                            Value.StructTuple "specs::itable::BitOp::Or" []);
                                          ("left", M.read (| left |));
                                          ("right", M.read (| right |));
                                          ("value",
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "wasmi::runner::FromValueInternal",
                                                Ty.path "i32",
                                                [],
                                                "from_value_internal",
                                                []
                                              |),
                                              [
                                                M.read (|
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.path "wasmi::runner::ValueStack",
                                                      "top",
                                                      []
                                                    |),
                                                    [ M.read (| value_stack |) ]
                                                  |)
                                                |)
                                              ]
                                            |))
                                        ]
                                    |)));
                                fun γ =>
                                  ltac:(M.monadic
                                    (M.alloc (|
                                      M.never_to_any (|
                                        M.call_closure (|
                                          M.get_function (| "core::panicking::panic", [] |),
                                          [
                                            M.read (|
                                              Value.String
                                                "internal error: entered unreachable code"
                                            |)
                                          ]
                                        |)
                                      |)
                                    |)))
                              ]
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (M.match_operator (|
                              M.alloc (| Value.Tuple [] |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ :=
                                      M.alloc (|
                                        M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.apply
                                              (Ty.path "core::option::Option")
                                              [
                                                Ty.path
                                                  "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::RunInstructionTracePre"
                                              ],
                                            "unwrap",
                                            []
                                          |),
                                          [ M.read (| current_event |) ]
                                        |)
                                      |) in
                                    let γ0_0 :=
                                      M.SubPointer.get_struct_record_field (|
                                        γ,
                                        "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::RunInstructionTracePre::I32BinOp",
                                        "left"
                                      |) in
                                    let γ0_1 :=
                                      M.SubPointer.get_struct_record_field (|
                                        γ,
                                        "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::RunInstructionTracePre::I32BinOp",
                                        "right"
                                      |) in
                                    let left := M.copy (| γ0_0 |) in
                                    let right := M.copy (| γ0_1 |) in
                                    M.alloc (|
                                      Value.StructRecord
                                        "specs::step::StepInfo::I32BinBitOp"
                                        [
                                          ("class",
                                            Value.StructTuple "specs::itable::BitOp::Xor" []);
                                          ("left", M.read (| left |));
                                          ("right", M.read (| right |));
                                          ("value",
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "wasmi::runner::FromValueInternal",
                                                Ty.path "i32",
                                                [],
                                                "from_value_internal",
                                                []
                                              |),
                                              [
                                                M.read (|
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.path "wasmi::runner::ValueStack",
                                                      "top",
                                                      []
                                                    |),
                                                    [ M.read (| value_stack |) ]
                                                  |)
                                                |)
                                              ]
                                            |))
                                        ]
                                    |)));
                                fun γ =>
                                  ltac:(M.monadic
                                    (M.alloc (|
                                      M.never_to_any (|
                                        M.call_closure (|
                                          M.get_function (| "core::panicking::panic", [] |),
                                          [
                                            M.read (|
                                              Value.String
                                                "internal error: entered unreachable code"
                                            |)
                                          ]
                                        |)
                                      |)
                                    |)))
                              ]
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (M.match_operator (|
                              M.alloc (| Value.Tuple [] |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ :=
                                      M.alloc (|
                                        M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.apply
                                              (Ty.path "core::option::Option")
                                              [
                                                Ty.path
                                                  "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::RunInstructionTracePre"
                                              ],
                                            "unwrap",
                                            []
                                          |),
                                          [ M.read (| current_event |) ]
                                        |)
                                      |) in
                                    let γ0_0 :=
                                      M.SubPointer.get_struct_record_field (|
                                        γ,
                                        "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::RunInstructionTracePre::I32BinOp",
                                        "left"
                                      |) in
                                    let γ0_1 :=
                                      M.SubPointer.get_struct_record_field (|
                                        γ,
                                        "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::RunInstructionTracePre::I32BinOp",
                                        "right"
                                      |) in
                                    let left := M.copy (| γ0_0 |) in
                                    let right := M.copy (| γ0_1 |) in
                                    M.alloc (|
                                      Value.StructRecord
                                        "specs::step::StepInfo::I32BinShiftOp"
                                        [
                                          ("class",
                                            Value.StructTuple "specs::itable::ShiftOp::Shl" []);
                                          ("left", M.read (| left |));
                                          ("right", M.read (| right |));
                                          ("value",
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "wasmi::runner::FromValueInternal",
                                                Ty.path "i32",
                                                [],
                                                "from_value_internal",
                                                []
                                              |),
                                              [
                                                M.read (|
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.path "wasmi::runner::ValueStack",
                                                      "top",
                                                      []
                                                    |),
                                                    [ M.read (| value_stack |) ]
                                                  |)
                                                |)
                                              ]
                                            |))
                                        ]
                                    |)));
                                fun γ =>
                                  ltac:(M.monadic
                                    (M.alloc (|
                                      M.never_to_any (|
                                        M.call_closure (|
                                          M.get_function (| "core::panicking::panic", [] |),
                                          [
                                            M.read (|
                                              Value.String
                                                "internal error: entered unreachable code"
                                            |)
                                          ]
                                        |)
                                      |)
                                    |)))
                              ]
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (M.match_operator (|
                              M.alloc (| Value.Tuple [] |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ :=
                                      M.alloc (|
                                        M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.apply
                                              (Ty.path "core::option::Option")
                                              [
                                                Ty.path
                                                  "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::RunInstructionTracePre"
                                              ],
                                            "unwrap",
                                            []
                                          |),
                                          [ M.read (| current_event |) ]
                                        |)
                                      |) in
                                    let γ0_0 :=
                                      M.SubPointer.get_struct_record_field (|
                                        γ,
                                        "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::RunInstructionTracePre::I32BinOp",
                                        "left"
                                      |) in
                                    let γ0_1 :=
                                      M.SubPointer.get_struct_record_field (|
                                        γ,
                                        "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::RunInstructionTracePre::I32BinOp",
                                        "right"
                                      |) in
                                    let left := M.copy (| γ0_0 |) in
                                    let right := M.copy (| γ0_1 |) in
                                    M.alloc (|
                                      Value.StructRecord
                                        "specs::step::StepInfo::I32BinShiftOp"
                                        [
                                          ("class",
                                            Value.StructTuple
                                              "specs::itable::ShiftOp::UnsignedShr"
                                              []);
                                          ("left", M.read (| left |));
                                          ("right", M.read (| right |));
                                          ("value",
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "wasmi::runner::FromValueInternal",
                                                Ty.path "i32",
                                                [],
                                                "from_value_internal",
                                                []
                                              |),
                                              [
                                                M.read (|
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.path "wasmi::runner::ValueStack",
                                                      "top",
                                                      []
                                                    |),
                                                    [ M.read (| value_stack |) ]
                                                  |)
                                                |)
                                              ]
                                            |))
                                        ]
                                    |)));
                                fun γ =>
                                  ltac:(M.monadic
                                    (M.alloc (|
                                      M.never_to_any (|
                                        M.call_closure (|
                                          M.get_function (| "core::panicking::panic", [] |),
                                          [
                                            M.read (|
                                              Value.String
                                                "internal error: entered unreachable code"
                                            |)
                                          ]
                                        |)
                                      |)
                                    |)))
                              ]
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (M.match_operator (|
                              M.alloc (| Value.Tuple [] |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ :=
                                      M.alloc (|
                                        M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.apply
                                              (Ty.path "core::option::Option")
                                              [
                                                Ty.path
                                                  "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::RunInstructionTracePre"
                                              ],
                                            "unwrap",
                                            []
                                          |),
                                          [ M.read (| current_event |) ]
                                        |)
                                      |) in
                                    let γ0_0 :=
                                      M.SubPointer.get_struct_record_field (|
                                        γ,
                                        "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::RunInstructionTracePre::I32BinOp",
                                        "left"
                                      |) in
                                    let γ0_1 :=
                                      M.SubPointer.get_struct_record_field (|
                                        γ,
                                        "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::RunInstructionTracePre::I32BinOp",
                                        "right"
                                      |) in
                                    let left := M.copy (| γ0_0 |) in
                                    let right := M.copy (| γ0_1 |) in
                                    M.alloc (|
                                      Value.StructRecord
                                        "specs::step::StepInfo::I32BinShiftOp"
                                        [
                                          ("class",
                                            Value.StructTuple
                                              "specs::itable::ShiftOp::SignedShr"
                                              []);
                                          ("left", M.read (| left |));
                                          ("right", M.read (| right |));
                                          ("value",
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "wasmi::runner::FromValueInternal",
                                                Ty.path "i32",
                                                [],
                                                "from_value_internal",
                                                []
                                              |),
                                              [
                                                M.read (|
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.path "wasmi::runner::ValueStack",
                                                      "top",
                                                      []
                                                    |),
                                                    [ M.read (| value_stack |) ]
                                                  |)
                                                |)
                                              ]
                                            |))
                                        ]
                                    |)));
                                fun γ =>
                                  ltac:(M.monadic
                                    (M.alloc (|
                                      M.never_to_any (|
                                        M.call_closure (|
                                          M.get_function (| "core::panicking::panic", [] |),
                                          [
                                            M.read (|
                                              Value.String
                                                "internal error: entered unreachable code"
                                            |)
                                          ]
                                        |)
                                      |)
                                    |)))
                              ]
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (M.match_operator (|
                              M.alloc (| Value.Tuple [] |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ :=
                                      M.alloc (|
                                        M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.apply
                                              (Ty.path "core::option::Option")
                                              [
                                                Ty.path
                                                  "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::RunInstructionTracePre"
                                              ],
                                            "unwrap",
                                            []
                                          |),
                                          [ M.read (| current_event |) ]
                                        |)
                                      |) in
                                    let γ0_0 :=
                                      M.SubPointer.get_struct_record_field (|
                                        γ,
                                        "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::RunInstructionTracePre::I32BinOp",
                                        "left"
                                      |) in
                                    let γ0_1 :=
                                      M.SubPointer.get_struct_record_field (|
                                        γ,
                                        "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::RunInstructionTracePre::I32BinOp",
                                        "right"
                                      |) in
                                    let left := M.copy (| γ0_0 |) in
                                    let right := M.copy (| γ0_1 |) in
                                    M.alloc (|
                                      Value.StructRecord
                                        "specs::step::StepInfo::I32BinShiftOp"
                                        [
                                          ("class",
                                            Value.StructTuple "specs::itable::ShiftOp::Rotl" []);
                                          ("left", M.read (| left |));
                                          ("right", M.read (| right |));
                                          ("value",
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "wasmi::runner::FromValueInternal",
                                                Ty.path "i32",
                                                [],
                                                "from_value_internal",
                                                []
                                              |),
                                              [
                                                M.read (|
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.path "wasmi::runner::ValueStack",
                                                      "top",
                                                      []
                                                    |),
                                                    [ M.read (| value_stack |) ]
                                                  |)
                                                |)
                                              ]
                                            |))
                                        ]
                                    |)));
                                fun γ =>
                                  ltac:(M.monadic
                                    (M.alloc (|
                                      M.never_to_any (|
                                        M.call_closure (|
                                          M.get_function (| "core::panicking::panic", [] |),
                                          [
                                            M.read (|
                                              Value.String
                                                "internal error: entered unreachable code"
                                            |)
                                          ]
                                        |)
                                      |)
                                    |)))
                              ]
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (M.match_operator (|
                              M.alloc (| Value.Tuple [] |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ :=
                                      M.alloc (|
                                        M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.apply
                                              (Ty.path "core::option::Option")
                                              [
                                                Ty.path
                                                  "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::RunInstructionTracePre"
                                              ],
                                            "unwrap",
                                            []
                                          |),
                                          [ M.read (| current_event |) ]
                                        |)
                                      |) in
                                    let γ0_0 :=
                                      M.SubPointer.get_struct_record_field (|
                                        γ,
                                        "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::RunInstructionTracePre::I32BinOp",
                                        "left"
                                      |) in
                                    let γ0_1 :=
                                      M.SubPointer.get_struct_record_field (|
                                        γ,
                                        "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::RunInstructionTracePre::I32BinOp",
                                        "right"
                                      |) in
                                    let left := M.copy (| γ0_0 |) in
                                    let right := M.copy (| γ0_1 |) in
                                    M.alloc (|
                                      Value.StructRecord
                                        "specs::step::StepInfo::I32BinShiftOp"
                                        [
                                          ("class",
                                            Value.StructTuple "specs::itable::ShiftOp::Rotr" []);
                                          ("left", M.read (| left |));
                                          ("right", M.read (| right |));
                                          ("value",
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "wasmi::runner::FromValueInternal",
                                                Ty.path "i32",
                                                [],
                                                "from_value_internal",
                                                []
                                              |),
                                              [
                                                M.read (|
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.path "wasmi::runner::ValueStack",
                                                      "top",
                                                      []
                                                    |),
                                                    [ M.read (| value_stack |) ]
                                                  |)
                                                |)
                                              ]
                                            |))
                                        ]
                                    |)));
                                fun γ =>
                                  ltac:(M.monadic
                                    (M.alloc (|
                                      M.never_to_any (|
                                        M.call_closure (|
                                          M.get_function (| "core::panicking::panic", [] |),
                                          [
                                            M.read (|
                                              Value.String
                                                "internal error: entered unreachable code"
                                            |)
                                          ]
                                        |)
                                      |)
                                    |)))
                              ]
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (M.match_operator (|
                              M.alloc (| Value.Tuple [] |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ :=
                                      M.alloc (|
                                        M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.apply
                                              (Ty.path "core::option::Option")
                                              [
                                                Ty.path
                                                  "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::RunInstructionTracePre"
                                              ],
                                            "unwrap",
                                            []
                                          |),
                                          [ M.read (| current_event |) ]
                                        |)
                                      |) in
                                    let γ0_0 :=
                                      M.SubPointer.get_struct_record_field (|
                                        γ,
                                        "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::RunInstructionTracePre::I64BinOp",
                                        "left"
                                      |) in
                                    let γ0_1 :=
                                      M.SubPointer.get_struct_record_field (|
                                        γ,
                                        "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::RunInstructionTracePre::I64BinOp",
                                        "right"
                                      |) in
                                    let left := M.copy (| γ0_0 |) in
                                    let right := M.copy (| γ0_1 |) in
                                    M.alloc (|
                                      Value.StructRecord
                                        "specs::step::StepInfo::I64BinOp"
                                        [
                                          ("class",
                                            Value.StructTuple "specs::itable::BinOp::Add" []);
                                          ("left", M.read (| left |));
                                          ("right", M.read (| right |));
                                          ("value",
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "wasmi::runner::FromValueInternal",
                                                Ty.path "i64",
                                                [],
                                                "from_value_internal",
                                                []
                                              |),
                                              [
                                                M.read (|
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.path "wasmi::runner::ValueStack",
                                                      "top",
                                                      []
                                                    |),
                                                    [ M.read (| value_stack |) ]
                                                  |)
                                                |)
                                              ]
                                            |))
                                        ]
                                    |)));
                                fun γ =>
                                  ltac:(M.monadic
                                    (M.alloc (|
                                      M.never_to_any (|
                                        M.call_closure (|
                                          M.get_function (| "core::panicking::panic", [] |),
                                          [
                                            M.read (|
                                              Value.String
                                                "internal error: entered unreachable code"
                                            |)
                                          ]
                                        |)
                                      |)
                                    |)))
                              ]
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (M.match_operator (|
                              M.alloc (| Value.Tuple [] |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ :=
                                      M.alloc (|
                                        M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.apply
                                              (Ty.path "core::option::Option")
                                              [
                                                Ty.path
                                                  "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::RunInstructionTracePre"
                                              ],
                                            "unwrap",
                                            []
                                          |),
                                          [ M.read (| current_event |) ]
                                        |)
                                      |) in
                                    let γ0_0 :=
                                      M.SubPointer.get_struct_record_field (|
                                        γ,
                                        "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::RunInstructionTracePre::I64BinOp",
                                        "left"
                                      |) in
                                    let γ0_1 :=
                                      M.SubPointer.get_struct_record_field (|
                                        γ,
                                        "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::RunInstructionTracePre::I64BinOp",
                                        "right"
                                      |) in
                                    let left := M.copy (| γ0_0 |) in
                                    let right := M.copy (| γ0_1 |) in
                                    M.alloc (|
                                      Value.StructRecord
                                        "specs::step::StepInfo::I64BinOp"
                                        [
                                          ("class",
                                            Value.StructTuple "specs::itable::BinOp::Sub" []);
                                          ("left", M.read (| left |));
                                          ("right", M.read (| right |));
                                          ("value",
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "wasmi::runner::FromValueInternal",
                                                Ty.path "i64",
                                                [],
                                                "from_value_internal",
                                                []
                                              |),
                                              [
                                                M.read (|
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.path "wasmi::runner::ValueStack",
                                                      "top",
                                                      []
                                                    |),
                                                    [ M.read (| value_stack |) ]
                                                  |)
                                                |)
                                              ]
                                            |))
                                        ]
                                    |)));
                                fun γ =>
                                  ltac:(M.monadic
                                    (M.alloc (|
                                      M.never_to_any (|
                                        M.call_closure (|
                                          M.get_function (| "core::panicking::panic", [] |),
                                          [
                                            M.read (|
                                              Value.String
                                                "internal error: entered unreachable code"
                                            |)
                                          ]
                                        |)
                                      |)
                                    |)))
                              ]
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (M.match_operator (|
                              M.alloc (| Value.Tuple [] |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ :=
                                      M.alloc (|
                                        M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.apply
                                              (Ty.path "core::option::Option")
                                              [
                                                Ty.path
                                                  "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::RunInstructionTracePre"
                                              ],
                                            "unwrap",
                                            []
                                          |),
                                          [ M.read (| current_event |) ]
                                        |)
                                      |) in
                                    let γ0_0 :=
                                      M.SubPointer.get_struct_record_field (|
                                        γ,
                                        "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::RunInstructionTracePre::I64BinOp",
                                        "left"
                                      |) in
                                    let γ0_1 :=
                                      M.SubPointer.get_struct_record_field (|
                                        γ,
                                        "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::RunInstructionTracePre::I64BinOp",
                                        "right"
                                      |) in
                                    let left := M.copy (| γ0_0 |) in
                                    let right := M.copy (| γ0_1 |) in
                                    M.alloc (|
                                      Value.StructRecord
                                        "specs::step::StepInfo::I64BinOp"
                                        [
                                          ("class",
                                            Value.StructTuple "specs::itable::BinOp::Mul" []);
                                          ("left", M.read (| left |));
                                          ("right", M.read (| right |));
                                          ("value",
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "wasmi::runner::FromValueInternal",
                                                Ty.path "i64",
                                                [],
                                                "from_value_internal",
                                                []
                                              |),
                                              [
                                                M.read (|
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.path "wasmi::runner::ValueStack",
                                                      "top",
                                                      []
                                                    |),
                                                    [ M.read (| value_stack |) ]
                                                  |)
                                                |)
                                              ]
                                            |))
                                        ]
                                    |)));
                                fun γ =>
                                  ltac:(M.monadic
                                    (M.alloc (|
                                      M.never_to_any (|
                                        M.call_closure (|
                                          M.get_function (| "core::panicking::panic", [] |),
                                          [
                                            M.read (|
                                              Value.String
                                                "internal error: entered unreachable code"
                                            |)
                                          ]
                                        |)
                                      |)
                                    |)))
                              ]
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (M.match_operator (|
                              M.alloc (| Value.Tuple [] |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ :=
                                      M.alloc (|
                                        M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.apply
                                              (Ty.path "core::option::Option")
                                              [
                                                Ty.path
                                                  "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::RunInstructionTracePre"
                                              ],
                                            "unwrap",
                                            []
                                          |),
                                          [ M.read (| current_event |) ]
                                        |)
                                      |) in
                                    let γ0_0 :=
                                      M.SubPointer.get_struct_record_field (|
                                        γ,
                                        "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::RunInstructionTracePre::I64BinOp",
                                        "left"
                                      |) in
                                    let γ0_1 :=
                                      M.SubPointer.get_struct_record_field (|
                                        γ,
                                        "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::RunInstructionTracePre::I64BinOp",
                                        "right"
                                      |) in
                                    let left := M.copy (| γ0_0 |) in
                                    let right := M.copy (| γ0_1 |) in
                                    M.alloc (|
                                      Value.StructRecord
                                        "specs::step::StepInfo::I64BinOp"
                                        [
                                          ("class",
                                            Value.StructTuple
                                              "specs::itable::BinOp::UnsignedDiv"
                                              []);
                                          ("left", M.read (| left |));
                                          ("right", M.read (| right |));
                                          ("value",
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "wasmi::runner::FromValueInternal",
                                                Ty.path "i64",
                                                [],
                                                "from_value_internal",
                                                []
                                              |),
                                              [
                                                M.read (|
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.path "wasmi::runner::ValueStack",
                                                      "top",
                                                      []
                                                    |),
                                                    [ M.read (| value_stack |) ]
                                                  |)
                                                |)
                                              ]
                                            |))
                                        ]
                                    |)));
                                fun γ =>
                                  ltac:(M.monadic
                                    (M.alloc (|
                                      M.never_to_any (|
                                        M.call_closure (|
                                          M.get_function (| "core::panicking::panic", [] |),
                                          [
                                            M.read (|
                                              Value.String
                                                "internal error: entered unreachable code"
                                            |)
                                          ]
                                        |)
                                      |)
                                    |)))
                              ]
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (M.match_operator (|
                              M.alloc (| Value.Tuple [] |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ :=
                                      M.alloc (|
                                        M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.apply
                                              (Ty.path "core::option::Option")
                                              [
                                                Ty.path
                                                  "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::RunInstructionTracePre"
                                              ],
                                            "unwrap",
                                            []
                                          |),
                                          [ M.read (| current_event |) ]
                                        |)
                                      |) in
                                    let γ0_0 :=
                                      M.SubPointer.get_struct_record_field (|
                                        γ,
                                        "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::RunInstructionTracePre::I64BinOp",
                                        "left"
                                      |) in
                                    let γ0_1 :=
                                      M.SubPointer.get_struct_record_field (|
                                        γ,
                                        "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::RunInstructionTracePre::I64BinOp",
                                        "right"
                                      |) in
                                    let left := M.copy (| γ0_0 |) in
                                    let right := M.copy (| γ0_1 |) in
                                    M.alloc (|
                                      Value.StructRecord
                                        "specs::step::StepInfo::I64BinOp"
                                        [
                                          ("class",
                                            Value.StructTuple
                                              "specs::itable::BinOp::UnsignedRem"
                                              []);
                                          ("left", M.read (| left |));
                                          ("right", M.read (| right |));
                                          ("value",
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "wasmi::runner::FromValueInternal",
                                                Ty.path "i64",
                                                [],
                                                "from_value_internal",
                                                []
                                              |),
                                              [
                                                M.read (|
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.path "wasmi::runner::ValueStack",
                                                      "top",
                                                      []
                                                    |),
                                                    [ M.read (| value_stack |) ]
                                                  |)
                                                |)
                                              ]
                                            |))
                                        ]
                                    |)));
                                fun γ =>
                                  ltac:(M.monadic
                                    (M.alloc (|
                                      M.never_to_any (|
                                        M.call_closure (|
                                          M.get_function (| "core::panicking::panic", [] |),
                                          [
                                            M.read (|
                                              Value.String
                                                "internal error: entered unreachable code"
                                            |)
                                          ]
                                        |)
                                      |)
                                    |)))
                              ]
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (M.match_operator (|
                              M.alloc (| Value.Tuple [] |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ :=
                                      M.alloc (|
                                        M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.apply
                                              (Ty.path "core::option::Option")
                                              [
                                                Ty.path
                                                  "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::RunInstructionTracePre"
                                              ],
                                            "unwrap",
                                            []
                                          |),
                                          [ M.read (| current_event |) ]
                                        |)
                                      |) in
                                    let γ0_0 :=
                                      M.SubPointer.get_struct_record_field (|
                                        γ,
                                        "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::RunInstructionTracePre::I64BinOp",
                                        "left"
                                      |) in
                                    let γ0_1 :=
                                      M.SubPointer.get_struct_record_field (|
                                        γ,
                                        "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::RunInstructionTracePre::I64BinOp",
                                        "right"
                                      |) in
                                    let left := M.copy (| γ0_0 |) in
                                    let right := M.copy (| γ0_1 |) in
                                    M.alloc (|
                                      Value.StructRecord
                                        "specs::step::StepInfo::I64BinOp"
                                        [
                                          ("class",
                                            Value.StructTuple "specs::itable::BinOp::SignedDiv" []);
                                          ("left", M.read (| left |));
                                          ("right", M.read (| right |));
                                          ("value",
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "wasmi::runner::FromValueInternal",
                                                Ty.path "i64",
                                                [],
                                                "from_value_internal",
                                                []
                                              |),
                                              [
                                                M.read (|
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.path "wasmi::runner::ValueStack",
                                                      "top",
                                                      []
                                                    |),
                                                    [ M.read (| value_stack |) ]
                                                  |)
                                                |)
                                              ]
                                            |))
                                        ]
                                    |)));
                                fun γ =>
                                  ltac:(M.monadic
                                    (M.alloc (|
                                      M.never_to_any (|
                                        M.call_closure (|
                                          M.get_function (| "core::panicking::panic", [] |),
                                          [
                                            M.read (|
                                              Value.String
                                                "internal error: entered unreachable code"
                                            |)
                                          ]
                                        |)
                                      |)
                                    |)))
                              ]
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (M.match_operator (|
                              M.alloc (| Value.Tuple [] |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ :=
                                      M.alloc (|
                                        M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.apply
                                              (Ty.path "core::option::Option")
                                              [
                                                Ty.path
                                                  "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::RunInstructionTracePre"
                                              ],
                                            "unwrap",
                                            []
                                          |),
                                          [ M.read (| current_event |) ]
                                        |)
                                      |) in
                                    let γ0_0 :=
                                      M.SubPointer.get_struct_record_field (|
                                        γ,
                                        "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::RunInstructionTracePre::I64BinOp",
                                        "left"
                                      |) in
                                    let γ0_1 :=
                                      M.SubPointer.get_struct_record_field (|
                                        γ,
                                        "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::RunInstructionTracePre::I64BinOp",
                                        "right"
                                      |) in
                                    let left := M.copy (| γ0_0 |) in
                                    let right := M.copy (| γ0_1 |) in
                                    M.alloc (|
                                      Value.StructRecord
                                        "specs::step::StepInfo::I64BinOp"
                                        [
                                          ("class",
                                            Value.StructTuple "specs::itable::BinOp::SignedRem" []);
                                          ("left", M.read (| left |));
                                          ("right", M.read (| right |));
                                          ("value",
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "wasmi::runner::FromValueInternal",
                                                Ty.path "i64",
                                                [],
                                                "from_value_internal",
                                                []
                                              |),
                                              [
                                                M.read (|
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.path "wasmi::runner::ValueStack",
                                                      "top",
                                                      []
                                                    |),
                                                    [ M.read (| value_stack |) ]
                                                  |)
                                                |)
                                              ]
                                            |))
                                        ]
                                    |)));
                                fun γ =>
                                  ltac:(M.monadic
                                    (M.alloc (|
                                      M.never_to_any (|
                                        M.call_closure (|
                                          M.get_function (| "core::panicking::panic", [] |),
                                          [
                                            M.read (|
                                              Value.String
                                                "internal error: entered unreachable code"
                                            |)
                                          ]
                                        |)
                                      |)
                                    |)))
                              ]
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (M.match_operator (|
                              M.alloc (| Value.Tuple [] |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ :=
                                      M.alloc (|
                                        M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.apply
                                              (Ty.path "core::option::Option")
                                              [
                                                Ty.path
                                                  "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::RunInstructionTracePre"
                                              ],
                                            "unwrap",
                                            []
                                          |),
                                          [ M.read (| current_event |) ]
                                        |)
                                      |) in
                                    let γ0_0 :=
                                      M.SubPointer.get_struct_record_field (|
                                        γ,
                                        "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::RunInstructionTracePre::I64BinOp",
                                        "left"
                                      |) in
                                    let γ0_1 :=
                                      M.SubPointer.get_struct_record_field (|
                                        γ,
                                        "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::RunInstructionTracePre::I64BinOp",
                                        "right"
                                      |) in
                                    let left := M.copy (| γ0_0 |) in
                                    let right := M.copy (| γ0_1 |) in
                                    M.alloc (|
                                      Value.StructRecord
                                        "specs::step::StepInfo::I64BinBitOp"
                                        [
                                          ("class",
                                            Value.StructTuple "specs::itable::BitOp::And" []);
                                          ("left", M.read (| left |));
                                          ("right", M.read (| right |));
                                          ("value",
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "wasmi::runner::FromValueInternal",
                                                Ty.path "i64",
                                                [],
                                                "from_value_internal",
                                                []
                                              |),
                                              [
                                                M.read (|
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.path "wasmi::runner::ValueStack",
                                                      "top",
                                                      []
                                                    |),
                                                    [ M.read (| value_stack |) ]
                                                  |)
                                                |)
                                              ]
                                            |))
                                        ]
                                    |)));
                                fun γ =>
                                  ltac:(M.monadic
                                    (M.alloc (|
                                      M.never_to_any (|
                                        M.call_closure (|
                                          M.get_function (| "core::panicking::panic", [] |),
                                          [
                                            M.read (|
                                              Value.String
                                                "internal error: entered unreachable code"
                                            |)
                                          ]
                                        |)
                                      |)
                                    |)))
                              ]
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (M.match_operator (|
                              M.alloc (| Value.Tuple [] |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ :=
                                      M.alloc (|
                                        M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.apply
                                              (Ty.path "core::option::Option")
                                              [
                                                Ty.path
                                                  "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::RunInstructionTracePre"
                                              ],
                                            "unwrap",
                                            []
                                          |),
                                          [ M.read (| current_event |) ]
                                        |)
                                      |) in
                                    let γ0_0 :=
                                      M.SubPointer.get_struct_record_field (|
                                        γ,
                                        "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::RunInstructionTracePre::I64BinOp",
                                        "left"
                                      |) in
                                    let γ0_1 :=
                                      M.SubPointer.get_struct_record_field (|
                                        γ,
                                        "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::RunInstructionTracePre::I64BinOp",
                                        "right"
                                      |) in
                                    let left := M.copy (| γ0_0 |) in
                                    let right := M.copy (| γ0_1 |) in
                                    M.alloc (|
                                      Value.StructRecord
                                        "specs::step::StepInfo::I64BinBitOp"
                                        [
                                          ("class",
                                            Value.StructTuple "specs::itable::BitOp::Or" []);
                                          ("left", M.read (| left |));
                                          ("right", M.read (| right |));
                                          ("value",
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "wasmi::runner::FromValueInternal",
                                                Ty.path "i64",
                                                [],
                                                "from_value_internal",
                                                []
                                              |),
                                              [
                                                M.read (|
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.path "wasmi::runner::ValueStack",
                                                      "top",
                                                      []
                                                    |),
                                                    [ M.read (| value_stack |) ]
                                                  |)
                                                |)
                                              ]
                                            |))
                                        ]
                                    |)));
                                fun γ =>
                                  ltac:(M.monadic
                                    (M.alloc (|
                                      M.never_to_any (|
                                        M.call_closure (|
                                          M.get_function (| "core::panicking::panic", [] |),
                                          [
                                            M.read (|
                                              Value.String
                                                "internal error: entered unreachable code"
                                            |)
                                          ]
                                        |)
                                      |)
                                    |)))
                              ]
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (M.match_operator (|
                              M.alloc (| Value.Tuple [] |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ :=
                                      M.alloc (|
                                        M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.apply
                                              (Ty.path "core::option::Option")
                                              [
                                                Ty.path
                                                  "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::RunInstructionTracePre"
                                              ],
                                            "unwrap",
                                            []
                                          |),
                                          [ M.read (| current_event |) ]
                                        |)
                                      |) in
                                    let γ0_0 :=
                                      M.SubPointer.get_struct_record_field (|
                                        γ,
                                        "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::RunInstructionTracePre::I64BinOp",
                                        "left"
                                      |) in
                                    let γ0_1 :=
                                      M.SubPointer.get_struct_record_field (|
                                        γ,
                                        "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::RunInstructionTracePre::I64BinOp",
                                        "right"
                                      |) in
                                    let left := M.copy (| γ0_0 |) in
                                    let right := M.copy (| γ0_1 |) in
                                    M.alloc (|
                                      Value.StructRecord
                                        "specs::step::StepInfo::I64BinBitOp"
                                        [
                                          ("class",
                                            Value.StructTuple "specs::itable::BitOp::Xor" []);
                                          ("left", M.read (| left |));
                                          ("right", M.read (| right |));
                                          ("value",
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "wasmi::runner::FromValueInternal",
                                                Ty.path "i64",
                                                [],
                                                "from_value_internal",
                                                []
                                              |),
                                              [
                                                M.read (|
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.path "wasmi::runner::ValueStack",
                                                      "top",
                                                      []
                                                    |),
                                                    [ M.read (| value_stack |) ]
                                                  |)
                                                |)
                                              ]
                                            |))
                                        ]
                                    |)));
                                fun γ =>
                                  ltac:(M.monadic
                                    (M.alloc (|
                                      M.never_to_any (|
                                        M.call_closure (|
                                          M.get_function (| "core::panicking::panic", [] |),
                                          [
                                            M.read (|
                                              Value.String
                                                "internal error: entered unreachable code"
                                            |)
                                          ]
                                        |)
                                      |)
                                    |)))
                              ]
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (M.match_operator (|
                              M.alloc (| Value.Tuple [] |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ :=
                                      M.alloc (|
                                        M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.apply
                                              (Ty.path "core::option::Option")
                                              [
                                                Ty.path
                                                  "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::RunInstructionTracePre"
                                              ],
                                            "unwrap",
                                            []
                                          |),
                                          [ M.read (| current_event |) ]
                                        |)
                                      |) in
                                    let γ0_0 :=
                                      M.SubPointer.get_struct_record_field (|
                                        γ,
                                        "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::RunInstructionTracePre::I64BinOp",
                                        "left"
                                      |) in
                                    let γ0_1 :=
                                      M.SubPointer.get_struct_record_field (|
                                        γ,
                                        "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::RunInstructionTracePre::I64BinOp",
                                        "right"
                                      |) in
                                    let left := M.copy (| γ0_0 |) in
                                    let right := M.copy (| γ0_1 |) in
                                    M.alloc (|
                                      Value.StructRecord
                                        "specs::step::StepInfo::I64BinShiftOp"
                                        [
                                          ("class",
                                            Value.StructTuple "specs::itable::ShiftOp::Shl" []);
                                          ("left", M.read (| left |));
                                          ("right", M.read (| right |));
                                          ("value",
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "wasmi::runner::FromValueInternal",
                                                Ty.path "i64",
                                                [],
                                                "from_value_internal",
                                                []
                                              |),
                                              [
                                                M.read (|
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.path "wasmi::runner::ValueStack",
                                                      "top",
                                                      []
                                                    |),
                                                    [ M.read (| value_stack |) ]
                                                  |)
                                                |)
                                              ]
                                            |))
                                        ]
                                    |)));
                                fun γ =>
                                  ltac:(M.monadic
                                    (M.alloc (|
                                      M.never_to_any (|
                                        M.call_closure (|
                                          M.get_function (| "core::panicking::panic", [] |),
                                          [
                                            M.read (|
                                              Value.String
                                                "internal error: entered unreachable code"
                                            |)
                                          ]
                                        |)
                                      |)
                                    |)))
                              ]
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (M.match_operator (|
                              M.alloc (| Value.Tuple [] |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ :=
                                      M.alloc (|
                                        M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.apply
                                              (Ty.path "core::option::Option")
                                              [
                                                Ty.path
                                                  "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::RunInstructionTracePre"
                                              ],
                                            "unwrap",
                                            []
                                          |),
                                          [ M.read (| current_event |) ]
                                        |)
                                      |) in
                                    let γ0_0 :=
                                      M.SubPointer.get_struct_record_field (|
                                        γ,
                                        "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::RunInstructionTracePre::I64BinOp",
                                        "left"
                                      |) in
                                    let γ0_1 :=
                                      M.SubPointer.get_struct_record_field (|
                                        γ,
                                        "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::RunInstructionTracePre::I64BinOp",
                                        "right"
                                      |) in
                                    let left := M.copy (| γ0_0 |) in
                                    let right := M.copy (| γ0_1 |) in
                                    M.alloc (|
                                      Value.StructRecord
                                        "specs::step::StepInfo::I64BinShiftOp"
                                        [
                                          ("class",
                                            Value.StructTuple
                                              "specs::itable::ShiftOp::UnsignedShr"
                                              []);
                                          ("left", M.read (| left |));
                                          ("right", M.read (| right |));
                                          ("value",
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "wasmi::runner::FromValueInternal",
                                                Ty.path "i64",
                                                [],
                                                "from_value_internal",
                                                []
                                              |),
                                              [
                                                M.read (|
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.path "wasmi::runner::ValueStack",
                                                      "top",
                                                      []
                                                    |),
                                                    [ M.read (| value_stack |) ]
                                                  |)
                                                |)
                                              ]
                                            |))
                                        ]
                                    |)));
                                fun γ =>
                                  ltac:(M.monadic
                                    (M.alloc (|
                                      M.never_to_any (|
                                        M.call_closure (|
                                          M.get_function (| "core::panicking::panic", [] |),
                                          [
                                            M.read (|
                                              Value.String
                                                "internal error: entered unreachable code"
                                            |)
                                          ]
                                        |)
                                      |)
                                    |)))
                              ]
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (M.match_operator (|
                              M.alloc (| Value.Tuple [] |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ :=
                                      M.alloc (|
                                        M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.apply
                                              (Ty.path "core::option::Option")
                                              [
                                                Ty.path
                                                  "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::RunInstructionTracePre"
                                              ],
                                            "unwrap",
                                            []
                                          |),
                                          [ M.read (| current_event |) ]
                                        |)
                                      |) in
                                    let γ0_0 :=
                                      M.SubPointer.get_struct_record_field (|
                                        γ,
                                        "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::RunInstructionTracePre::I64BinOp",
                                        "left"
                                      |) in
                                    let γ0_1 :=
                                      M.SubPointer.get_struct_record_field (|
                                        γ,
                                        "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::RunInstructionTracePre::I64BinOp",
                                        "right"
                                      |) in
                                    let left := M.copy (| γ0_0 |) in
                                    let right := M.copy (| γ0_1 |) in
                                    M.alloc (|
                                      Value.StructRecord
                                        "specs::step::StepInfo::I64BinShiftOp"
                                        [
                                          ("class",
                                            Value.StructTuple
                                              "specs::itable::ShiftOp::SignedShr"
                                              []);
                                          ("left", M.read (| left |));
                                          ("right", M.read (| right |));
                                          ("value",
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "wasmi::runner::FromValueInternal",
                                                Ty.path "i64",
                                                [],
                                                "from_value_internal",
                                                []
                                              |),
                                              [
                                                M.read (|
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.path "wasmi::runner::ValueStack",
                                                      "top",
                                                      []
                                                    |),
                                                    [ M.read (| value_stack |) ]
                                                  |)
                                                |)
                                              ]
                                            |))
                                        ]
                                    |)));
                                fun γ =>
                                  ltac:(M.monadic
                                    (M.alloc (|
                                      M.never_to_any (|
                                        M.call_closure (|
                                          M.get_function (| "core::panicking::panic", [] |),
                                          [
                                            M.read (|
                                              Value.String
                                                "internal error: entered unreachable code"
                                            |)
                                          ]
                                        |)
                                      |)
                                    |)))
                              ]
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (M.match_operator (|
                              M.alloc (| Value.Tuple [] |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ :=
                                      M.alloc (|
                                        M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.apply
                                              (Ty.path "core::option::Option")
                                              [
                                                Ty.path
                                                  "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::RunInstructionTracePre"
                                              ],
                                            "unwrap",
                                            []
                                          |),
                                          [ M.read (| current_event |) ]
                                        |)
                                      |) in
                                    let γ0_0 :=
                                      M.SubPointer.get_struct_record_field (|
                                        γ,
                                        "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::RunInstructionTracePre::I64BinOp",
                                        "left"
                                      |) in
                                    let γ0_1 :=
                                      M.SubPointer.get_struct_record_field (|
                                        γ,
                                        "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::RunInstructionTracePre::I64BinOp",
                                        "right"
                                      |) in
                                    let left := M.copy (| γ0_0 |) in
                                    let right := M.copy (| γ0_1 |) in
                                    M.alloc (|
                                      Value.StructRecord
                                        "specs::step::StepInfo::I64BinShiftOp"
                                        [
                                          ("class",
                                            Value.StructTuple "specs::itable::ShiftOp::Rotl" []);
                                          ("left", M.read (| left |));
                                          ("right", M.read (| right |));
                                          ("value",
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "wasmi::runner::FromValueInternal",
                                                Ty.path "i64",
                                                [],
                                                "from_value_internal",
                                                []
                                              |),
                                              [
                                                M.read (|
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.path "wasmi::runner::ValueStack",
                                                      "top",
                                                      []
                                                    |),
                                                    [ M.read (| value_stack |) ]
                                                  |)
                                                |)
                                              ]
                                            |))
                                        ]
                                    |)));
                                fun γ =>
                                  ltac:(M.monadic
                                    (M.alloc (|
                                      M.never_to_any (|
                                        M.call_closure (|
                                          M.get_function (| "core::panicking::panic", [] |),
                                          [
                                            M.read (|
                                              Value.String
                                                "internal error: entered unreachable code"
                                            |)
                                          ]
                                        |)
                                      |)
                                    |)))
                              ]
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (M.match_operator (|
                              M.alloc (| Value.Tuple [] |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ :=
                                      M.alloc (|
                                        M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.apply
                                              (Ty.path "core::option::Option")
                                              [
                                                Ty.path
                                                  "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::RunInstructionTracePre"
                                              ],
                                            "unwrap",
                                            []
                                          |),
                                          [ M.read (| current_event |) ]
                                        |)
                                      |) in
                                    let γ0_0 :=
                                      M.SubPointer.get_struct_record_field (|
                                        γ,
                                        "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::RunInstructionTracePre::I64BinOp",
                                        "left"
                                      |) in
                                    let γ0_1 :=
                                      M.SubPointer.get_struct_record_field (|
                                        γ,
                                        "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::RunInstructionTracePre::I64BinOp",
                                        "right"
                                      |) in
                                    let left := M.copy (| γ0_0 |) in
                                    let right := M.copy (| γ0_1 |) in
                                    M.alloc (|
                                      Value.StructRecord
                                        "specs::step::StepInfo::I64BinShiftOp"
                                        [
                                          ("class",
                                            Value.StructTuple "specs::itable::ShiftOp::Rotr" []);
                                          ("left", M.read (| left |));
                                          ("right", M.read (| right |));
                                          ("value",
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "wasmi::runner::FromValueInternal",
                                                Ty.path "i64",
                                                [],
                                                "from_value_internal",
                                                []
                                              |),
                                              [
                                                M.read (|
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.path "wasmi::runner::ValueStack",
                                                      "top",
                                                      []
                                                    |),
                                                    [ M.read (| value_stack |) ]
                                                  |)
                                                |)
                                              ]
                                            |))
                                        ]
                                    |)));
                                fun γ =>
                                  ltac:(M.monadic
                                    (M.alloc (|
                                      M.never_to_any (|
                                        M.call_closure (|
                                          M.get_function (| "core::panicking::panic", [] |),
                                          [
                                            M.read (|
                                              Value.String
                                                "internal error: entered unreachable code"
                                            |)
                                          ]
                                        |)
                                      |)
                                    |)))
                              ]
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (M.find_or_pattern (|
                              γ,
                              [
                                fun γ => ltac:(M.monadic (Value.Tuple []));
                                fun γ => ltac:(M.monadic (Value.Tuple []));
                                fun γ => ltac:(M.monadic (Value.Tuple []));
                                fun γ => ltac:(M.monadic (Value.Tuple []));
                                fun γ => ltac:(M.monadic (Value.Tuple []));
                                fun γ => ltac:(M.monadic (Value.Tuple []))
                              ],
                              M.closure
                                (fun γ =>
                                  ltac:(M.monadic
                                    match γ with
                                    | [] =>
                                      M.match_operator (|
                                        M.alloc (| Value.Tuple [] |),
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let γ :=
                                                M.alloc (|
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.apply
                                                        (Ty.path "core::option::Option")
                                                        [
                                                          Ty.path
                                                            "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::RunInstructionTracePre"
                                                        ],
                                                      "unwrap",
                                                      []
                                                    |),
                                                    [ M.read (| current_event |) ]
                                                  |)
                                                |) in
                                              let γ0_0 :=
                                                M.SubPointer.get_struct_record_field (|
                                                  γ,
                                                  "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::RunInstructionTracePre::UnaryOp",
                                                  "operand"
                                                |) in
                                              let γ0_1 :=
                                                M.SubPointer.get_struct_record_field (|
                                                  γ,
                                                  "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::RunInstructionTracePre::UnaryOp",
                                                  "vtype"
                                                |) in
                                              let operand := M.copy (| γ0_0 |) in
                                              let vtype := M.copy (| γ0_1 |) in
                                              M.alloc (|
                                                Value.StructRecord
                                                  "specs::step::StepInfo::UnaryOp"
                                                  [
                                                    ("class",
                                                      M.call_closure (|
                                                        M.get_trait_method (|
                                                          "core::convert::From",
                                                          Ty.path "specs::itable::UnaryOp",
                                                          [ Ty.path "wasmi::isa::Instruction" ],
                                                          "from",
                                                          []
                                                        |),
                                                        [
                                                          M.call_closure (|
                                                            M.get_trait_method (|
                                                              "core::clone::Clone",
                                                              Ty.path "wasmi::isa::Instruction",
                                                              [],
                                                              "clone",
                                                              []
                                                            |),
                                                            [ M.read (| instructions |) ]
                                                          |)
                                                        ]
                                                      |));
                                                    ("vtype", M.read (| vtype |));
                                                    ("operand", M.read (| operand |));
                                                    ("result",
                                                      M.call_closure (|
                                                        M.get_function (|
                                                          "wasmi::runner::from_value_internal_to_u64_with_typ",
                                                          []
                                                        |),
                                                        [
                                                          M.read (| vtype |);
                                                          M.read (|
                                                            M.call_closure (|
                                                              M.get_associated_function (|
                                                                Ty.path "wasmi::runner::ValueStack",
                                                                "top",
                                                                []
                                                              |),
                                                              [ M.read (| value_stack |) ]
                                                            |)
                                                          |)
                                                        ]
                                                      |))
                                                  ]
                                              |)));
                                          fun γ =>
                                            ltac:(M.monadic
                                              (M.alloc (|
                                                M.never_to_any (|
                                                  M.call_closure (|
                                                    M.get_function (|
                                                      "core::panicking::panic",
                                                      []
                                                    |),
                                                    [
                                                      M.read (|
                                                        Value.String
                                                          "internal error: entered unreachable code"
                                                      |)
                                                    ]
                                                  |)
                                                |)
                                              |)))
                                        ]
                                      |)
                                    | _ => M.impossible (||)
                                    end))
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (M.match_operator (|
                              M.alloc (| Value.Tuple [] |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ :=
                                      M.alloc (|
                                        M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.apply
                                              (Ty.path "core::option::Option")
                                              [
                                                Ty.path
                                                  "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::RunInstructionTracePre"
                                              ],
                                            "unwrap",
                                            []
                                          |),
                                          [ M.read (| current_event |) ]
                                        |)
                                      |) in
                                    let γ0_0 :=
                                      M.SubPointer.get_struct_record_field (|
                                        γ,
                                        "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::RunInstructionTracePre::I32WrapI64",
                                        "value"
                                      |) in
                                    let value := M.copy (| γ0_0 |) in
                                    M.alloc (|
                                      Value.StructRecord
                                        "specs::step::StepInfo::I32WrapI64"
                                        [
                                          ("value", M.read (| value |));
                                          ("result",
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "wasmi::runner::FromValueInternal",
                                                Ty.path "i32",
                                                [],
                                                "from_value_internal",
                                                []
                                              |),
                                              [
                                                M.read (|
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.path "wasmi::runner::ValueStack",
                                                      "top",
                                                      []
                                                    |),
                                                    [ M.read (| value_stack |) ]
                                                  |)
                                                |)
                                              ]
                                            |))
                                        ]
                                    |)));
                                fun γ =>
                                  ltac:(M.monadic
                                    (M.alloc (|
                                      M.never_to_any (|
                                        M.call_closure (|
                                          M.get_function (| "core::panicking::panic", [] |),
                                          [
                                            M.read (|
                                              Value.String
                                                "internal error: entered unreachable code"
                                            |)
                                          ]
                                        |)
                                      |)
                                    |)))
                              ]
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (M.find_or_pattern (|
                              γ,
                              [
                                fun γ => ltac:(M.monadic (Value.Tuple []));
                                fun γ => ltac:(M.monadic (Value.Tuple []))
                              ],
                              M.closure
                                (fun γ =>
                                  ltac:(M.monadic
                                    match γ with
                                    | [] =>
                                      M.match_operator (|
                                        M.alloc (| Value.Tuple [] |),
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let γ :=
                                                M.alloc (|
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.apply
                                                        (Ty.path "core::option::Option")
                                                        [
                                                          Ty.path
                                                            "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::RunInstructionTracePre"
                                                        ],
                                                      "unwrap",
                                                      []
                                                    |),
                                                    [ M.read (| current_event |) ]
                                                  |)
                                                |) in
                                              let γ0_0 :=
                                                M.SubPointer.get_struct_record_field (|
                                                  γ,
                                                  "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::RunInstructionTracePre::I64ExtendI32",
                                                  "value"
                                                |) in
                                              let γ0_1 :=
                                                M.SubPointer.get_struct_record_field (|
                                                  γ,
                                                  "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::RunInstructionTracePre::I64ExtendI32",
                                                  "sign"
                                                |) in
                                              let value := M.copy (| γ0_0 |) in
                                              let sign := M.copy (| γ0_1 |) in
                                              M.alloc (|
                                                Value.StructRecord
                                                  "specs::step::StepInfo::I64ExtendI32"
                                                  [
                                                    ("value", M.read (| value |));
                                                    ("result",
                                                      M.call_closure (|
                                                        M.get_trait_method (|
                                                          "wasmi::runner::FromValueInternal",
                                                          Ty.path "i64",
                                                          [],
                                                          "from_value_internal",
                                                          []
                                                        |),
                                                        [
                                                          M.read (|
                                                            M.call_closure (|
                                                              M.get_associated_function (|
                                                                Ty.path "wasmi::runner::ValueStack",
                                                                "top",
                                                                []
                                                              |),
                                                              [ M.read (| value_stack |) ]
                                                            |)
                                                          |)
                                                        ]
                                                      |));
                                                    ("sign", M.read (| sign |))
                                                  ]
                                              |)));
                                          fun γ =>
                                            ltac:(M.monadic
                                              (M.alloc (|
                                                M.never_to_any (|
                                                  M.call_closure (|
                                                    M.get_function (|
                                                      "core::panicking::panic",
                                                      []
                                                    |),
                                                    [
                                                      M.read (|
                                                        Value.String
                                                          "internal error: entered unreachable code"
                                                      |)
                                                    ]
                                                  |)
                                                |)
                                              |)))
                                        ]
                                      |)
                                    | _ => M.impossible (||)
                                    end))
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (M.match_operator (|
                              M.alloc (| Value.Tuple [] |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ :=
                                      M.alloc (|
                                        M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.apply
                                              (Ty.path "core::option::Option")
                                              [
                                                Ty.path
                                                  "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::RunInstructionTracePre"
                                              ],
                                            "unwrap",
                                            []
                                          |),
                                          [ M.read (| current_event |) ]
                                        |)
                                      |) in
                                    let γ0_0 :=
                                      M.SubPointer.get_struct_record_field (|
                                        γ,
                                        "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::RunInstructionTracePre::I32SignExtendI8",
                                        "value"
                                      |) in
                                    let value := M.copy (| γ0_0 |) in
                                    M.alloc (|
                                      Value.StructRecord
                                        "specs::step::StepInfo::I32SignExtendI8"
                                        [
                                          ("value", M.read (| value |));
                                          ("result",
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "wasmi::runner::FromValueInternal",
                                                Ty.path "i32",
                                                [],
                                                "from_value_internal",
                                                []
                                              |),
                                              [
                                                M.read (|
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.path "wasmi::runner::ValueStack",
                                                      "top",
                                                      []
                                                    |),
                                                    [ M.read (| value_stack |) ]
                                                  |)
                                                |)
                                              ]
                                            |))
                                        ]
                                    |)));
                                fun γ =>
                                  ltac:(M.monadic
                                    (M.alloc (|
                                      M.never_to_any (|
                                        M.call_closure (|
                                          M.get_function (| "core::panicking::panic", [] |),
                                          [
                                            M.read (|
                                              Value.String
                                                "internal error: entered unreachable code"
                                            |)
                                          ]
                                        |)
                                      |)
                                    |)))
                              ]
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (M.match_operator (|
                              M.alloc (| Value.Tuple [] |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ :=
                                      M.alloc (|
                                        M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.apply
                                              (Ty.path "core::option::Option")
                                              [
                                                Ty.path
                                                  "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::RunInstructionTracePre"
                                              ],
                                            "unwrap",
                                            []
                                          |),
                                          [ M.read (| current_event |) ]
                                        |)
                                      |) in
                                    let γ0_0 :=
                                      M.SubPointer.get_struct_record_field (|
                                        γ,
                                        "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::RunInstructionTracePre::I32SignExtendI16",
                                        "value"
                                      |) in
                                    let value := M.copy (| γ0_0 |) in
                                    M.alloc (|
                                      Value.StructRecord
                                        "specs::step::StepInfo::I32SignExtendI16"
                                        [
                                          ("value", M.read (| value |));
                                          ("result",
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "wasmi::runner::FromValueInternal",
                                                Ty.path "i32",
                                                [],
                                                "from_value_internal",
                                                []
                                              |),
                                              [
                                                M.read (|
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.path "wasmi::runner::ValueStack",
                                                      "top",
                                                      []
                                                    |),
                                                    [ M.read (| value_stack |) ]
                                                  |)
                                                |)
                                              ]
                                            |))
                                        ]
                                    |)));
                                fun γ =>
                                  ltac:(M.monadic
                                    (M.alloc (|
                                      M.never_to_any (|
                                        M.call_closure (|
                                          M.get_function (| "core::panicking::panic", [] |),
                                          [
                                            M.read (|
                                              Value.String
                                                "internal error: entered unreachable code"
                                            |)
                                          ]
                                        |)
                                      |)
                                    |)))
                              ]
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (M.match_operator (|
                              M.alloc (| Value.Tuple [] |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ :=
                                      M.alloc (|
                                        M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.apply
                                              (Ty.path "core::option::Option")
                                              [
                                                Ty.path
                                                  "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::RunInstructionTracePre"
                                              ],
                                            "unwrap",
                                            []
                                          |),
                                          [ M.read (| current_event |) ]
                                        |)
                                      |) in
                                    let γ0_0 :=
                                      M.SubPointer.get_struct_record_field (|
                                        γ,
                                        "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::RunInstructionTracePre::I64SignExtendI8",
                                        "value"
                                      |) in
                                    let value := M.copy (| γ0_0 |) in
                                    M.alloc (|
                                      Value.StructRecord
                                        "specs::step::StepInfo::I64SignExtendI8"
                                        [
                                          ("value", M.read (| value |));
                                          ("result",
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "wasmi::runner::FromValueInternal",
                                                Ty.path "i64",
                                                [],
                                                "from_value_internal",
                                                []
                                              |),
                                              [
                                                M.read (|
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.path "wasmi::runner::ValueStack",
                                                      "top",
                                                      []
                                                    |),
                                                    [ M.read (| value_stack |) ]
                                                  |)
                                                |)
                                              ]
                                            |))
                                        ]
                                    |)));
                                fun γ =>
                                  ltac:(M.monadic
                                    (M.alloc (|
                                      M.never_to_any (|
                                        M.call_closure (|
                                          M.get_function (| "core::panicking::panic", [] |),
                                          [
                                            M.read (|
                                              Value.String
                                                "internal error: entered unreachable code"
                                            |)
                                          ]
                                        |)
                                      |)
                                    |)))
                              ]
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (M.match_operator (|
                              M.alloc (| Value.Tuple [] |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ :=
                                      M.alloc (|
                                        M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.apply
                                              (Ty.path "core::option::Option")
                                              [
                                                Ty.path
                                                  "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::RunInstructionTracePre"
                                              ],
                                            "unwrap",
                                            []
                                          |),
                                          [ M.read (| current_event |) ]
                                        |)
                                      |) in
                                    let γ0_0 :=
                                      M.SubPointer.get_struct_record_field (|
                                        γ,
                                        "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::RunInstructionTracePre::I64SignExtendI16",
                                        "value"
                                      |) in
                                    let value := M.copy (| γ0_0 |) in
                                    M.alloc (|
                                      Value.StructRecord
                                        "specs::step::StepInfo::I64SignExtendI16"
                                        [
                                          ("value", M.read (| value |));
                                          ("result",
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "wasmi::runner::FromValueInternal",
                                                Ty.path "i64",
                                                [],
                                                "from_value_internal",
                                                []
                                              |),
                                              [
                                                M.read (|
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.path "wasmi::runner::ValueStack",
                                                      "top",
                                                      []
                                                    |),
                                                    [ M.read (| value_stack |) ]
                                                  |)
                                                |)
                                              ]
                                            |))
                                        ]
                                    |)));
                                fun γ =>
                                  ltac:(M.monadic
                                    (M.alloc (|
                                      M.never_to_any (|
                                        M.call_closure (|
                                          M.get_function (| "core::panicking::panic", [] |),
                                          [
                                            M.read (|
                                              Value.String
                                                "internal error: entered unreachable code"
                                            |)
                                          ]
                                        |)
                                      |)
                                    |)))
                              ]
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (M.match_operator (|
                              M.alloc (| Value.Tuple [] |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ :=
                                      M.alloc (|
                                        M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.apply
                                              (Ty.path "core::option::Option")
                                              [
                                                Ty.path
                                                  "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::RunInstructionTracePre"
                                              ],
                                            "unwrap",
                                            []
                                          |),
                                          [ M.read (| current_event |) ]
                                        |)
                                      |) in
                                    let γ0_0 :=
                                      M.SubPointer.get_struct_record_field (|
                                        γ,
                                        "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::RunInstructionTracePre::I64SignExtendI32",
                                        "value"
                                      |) in
                                    let value := M.copy (| γ0_0 |) in
                                    M.alloc (|
                                      Value.StructRecord
                                        "specs::step::StepInfo::I64SignExtendI32"
                                        [
                                          ("value", M.read (| value |));
                                          ("result",
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "wasmi::runner::FromValueInternal",
                                                Ty.path "i64",
                                                [],
                                                "from_value_internal",
                                                []
                                              |),
                                              [
                                                M.read (|
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.path "wasmi::runner::ValueStack",
                                                      "top",
                                                      []
                                                    |),
                                                    [ M.read (| value_stack |) ]
                                                  |)
                                                |)
                                              ]
                                            |))
                                        ]
                                    |)));
                                fun γ =>
                                  ltac:(M.monadic
                                    (M.alloc (|
                                      M.never_to_any (|
                                        M.call_closure (|
                                          M.get_function (| "core::panicking::panic", [] |),
                                          [
                                            M.read (|
                                              Value.String
                                                "internal error: entered unreachable code"
                                            |)
                                          ]
                                        |)
                                      |)
                                    |)))
                              ]
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let _ :=
                              let _ :=
                                M.alloc (|
                                  M.call_closure (|
                                    M.get_function (| "std::io::stdio::_print", [] |),
                                    [
                                      M.call_closure (|
                                        M.get_associated_function (|
                                          Ty.path "core::fmt::Arguments",
                                          "new_v1",
                                          []
                                        |),
                                        [
                                          (* Unsize *)
                                          M.pointer_coercion
                                            (M.alloc (|
                                              Value.Array
                                                [
                                                  M.read (| Value.String "" |);
                                                  M.read (| Value.String "
" |)
                                                ]
                                            |));
                                          (* Unsize *)
                                          M.pointer_coercion
                                            (M.alloc (|
                                              Value.Array
                                                [
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.path "core::fmt::rt::Argument",
                                                      "new_debug",
                                                      [
                                                        Ty.apply
                                                          (Ty.path "&")
                                                          [ Ty.path "wasmi::isa::Instruction" ]
                                                      ]
                                                    |),
                                                    [ instructions ]
                                                  |)
                                                ]
                                            |))
                                        ]
                                      |)
                                    ]
                                  |)
                                |) in
                              M.alloc (| Value.Tuple [] |) in
                            M.alloc (|
                              M.never_to_any (|
                                M.call_closure (|
                                  M.get_function (| "core::panicking::panic", [] |),
                                  [ M.read (| Value.String "not implemented" |) ]
                                |)
                              |)
                            |)))
                      ]
                    |)
                  |)))
              | _, _ => M.impossible
              end.
            
            Axiom AssociatedFunction_run_instruction_post :
              M.IsAssociatedFunction Self "run_instruction_post" run_instruction_post.
          End Impl_delphinus_zkwasm_runtime_monitor_plugins_table_TablePlugin.
        End instruction.
      End table.
    End plugins.
  End monitor.
End runtime.
