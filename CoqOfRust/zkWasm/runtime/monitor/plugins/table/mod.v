(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module runtime.
  Module monitor.
    Module plugins.
      Module table.
        Definition value_DEFAULT_MEMORY_INDEX : Value.t :=
          M.run ltac:(M.monadic (M.alloc (| Value.Integer 0 |))).
        
        Definition value_DEFAULT_TABLE_INDEX : Value.t :=
          M.run ltac:(M.monadic (M.alloc (| Value.Integer 0 |))).
        
        (* StructRecord
          {
            name := "TablePlugin";
            ty_params := [];
            fields :=
              [
                ("phantom_helper",
                  Ty.path "delphinus_zkwasm::runtime::monitor::plugins::phantom::PhantomHelper");
                ("host_function_desc",
                  Ty.apply
                    (Ty.path "std::collections::hash::map::HashMap")
                    [
                      Ty.path "usize";
                      Ty.path "specs::host_function::HostFunctionDesc";
                      Ty.path "std::hash::random::RandomState"
                    ]);
                ("function_table",
                  Ty.apply
                    (Ty.path "alloc::vec::Vec")
                    [
                      Ty.path
                        "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::FuncDesc";
                      Ty.path "alloc::alloc::Global"
                    ]);
                ("itable", Ty.path "specs::itable::InstructionTableInternal");
                ("elements",
                  Ty.apply
                    (Ty.path "alloc::vec::Vec")
                    [ Ty.path "specs::brtable::ElemEntry"; Ty.path "alloc::alloc::Global" ]);
                ("configure_table", Ty.path "specs::configure_table::ConfigureTable");
                ("init_memory_table",
                  Ty.apply
                    (Ty.path "alloc::vec::Vec")
                    [ Ty.path "specs::imtable::InitMemoryTableEntry"; Ty.path "alloc::alloc::Global"
                    ]);
                ("static_frame_table",
                  Ty.apply
                    (Ty.path "alloc::vec::Vec")
                    [ Ty.path "specs::jtable::StaticFrameEntry"; Ty.path "alloc::alloc::Global" ]);
                ("start_fid", Ty.apply (Ty.path "core::option::Option") [ Ty.path "u32" ]);
                ("etable",
                  Ty.path "delphinus_zkwasm::runtime::monitor::plugins::table::etable::ETable");
                ("frame_table", Ty.path "specs::jtable::JumpTable");
                ("last_jump_eid",
                  Ty.apply
                    (Ty.path "alloc::vec::Vec")
                    [ Ty.path "u32"; Ty.path "alloc::alloc::Global" ]);
                ("module_ref",
                  Ty.apply (Ty.path "core::option::Option") [ Ty.path "wasmi::module::ModuleRef" ]);
                ("unresolved_event",
                  Ty.apply
                    (Ty.path "core::option::Option")
                    [
                      Ty.path
                        "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::RunInstructionTracePre"
                    ])
              ];
          } *)
        
        Module Impl_delphinus_zkwasm_runtime_monitor_plugins_table_TablePlugin.
          Definition Self : Ty.t :=
            Ty.path "delphinus_zkwasm::runtime::monitor::plugins::table::TablePlugin".
          
          (*
              pub fn new(
                  k: u32,
                  host_function_desc: HashMap<usize, HostFunctionDesc>,
                  phantom_regex: &Vec<String>,
                  wasm_input: FuncRef,
                  backend: TraceBackend,
              ) -> Self {
                  Self {
                      host_function_desc,
          
                      phantom_helper: PhantomHelper::new(phantom_regex, wasm_input),
          
                      itable: InstructionTableInternal::default(),
                      elements: vec![],
                      configure_table: ConfigureTable::default(),
                      init_memory_table: vec![],
                      function_table: vec![],
                      static_frame_table: vec![],
                      start_fid: None,
          
                      last_jump_eid: vec![],
                      etable: ETable::new(compute_slice_capability(k), backend),
                      frame_table: JumpTable::default(),
          
                      module_ref: None,
                      unresolved_event: None,
                  }
              }
          *)
          Definition new (τ : list Ty.t) (α : list Value.t) : M :=
            match τ, α with
            | [], [ k; host_function_desc; phantom_regex; wasm_input; backend ] =>
              ltac:(M.monadic
                (let k := M.alloc (| k |) in
                let host_function_desc := M.alloc (| host_function_desc |) in
                let phantom_regex := M.alloc (| phantom_regex |) in
                let wasm_input := M.alloc (| wasm_input |) in
                let backend := M.alloc (| backend |) in
                Value.StructRecord
                  "delphinus_zkwasm::runtime::monitor::plugins::table::TablePlugin"
                  [
                    ("host_function_desc", M.read (| host_function_desc |));
                    ("phantom_helper",
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.path
                            "delphinus_zkwasm::runtime::monitor::plugins::phantom::PhantomHelper",
                          "new",
                          []
                        |),
                        [ M.read (| phantom_regex |); M.read (| wasm_input |) ]
                      |));
                    ("itable",
                      M.call_closure (|
                        M.get_trait_method (|
                          "core::default::Default",
                          Ty.path "specs::itable::InstructionTableInternal",
                          [],
                          "default",
                          []
                        |),
                        []
                      |));
                    ("elements",
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            [ Ty.path "specs::brtable::ElemEntry"; Ty.path "alloc::alloc::Global" ],
                          "new",
                          []
                        |),
                        []
                      |));
                    ("configure_table",
                      M.call_closure (|
                        M.get_trait_method (|
                          "core::default::Default",
                          Ty.path "specs::configure_table::ConfigureTable",
                          [],
                          "default",
                          []
                        |),
                        []
                      |));
                    ("init_memory_table",
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            [
                              Ty.path "specs::imtable::InitMemoryTableEntry";
                              Ty.path "alloc::alloc::Global"
                            ],
                          "new",
                          []
                        |),
                        []
                      |));
                    ("function_table",
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            [
                              Ty.path
                                "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::FuncDesc";
                              Ty.path "alloc::alloc::Global"
                            ],
                          "new",
                          []
                        |),
                        []
                      |));
                    ("static_frame_table",
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            [
                              Ty.path "specs::jtable::StaticFrameEntry";
                              Ty.path "alloc::alloc::Global"
                            ],
                          "new",
                          []
                        |),
                        []
                      |));
                    ("start_fid", Value.StructTuple "core::option::Option::None" []);
                    ("last_jump_eid",
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            [ Ty.path "u32"; Ty.path "alloc::alloc::Global" ],
                          "new",
                          []
                        |),
                        []
                      |));
                    ("etable",
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.path
                            "delphinus_zkwasm::runtime::monitor::plugins::table::etable::ETable",
                          "new",
                          []
                        |),
                        [
                          M.call_closure (|
                            M.get_function (|
                              "delphinus_zkwasm::circuits::compute_slice_capability",
                              []
                            |),
                            [ M.read (| k |) ]
                          |);
                          M.read (| backend |)
                        ]
                      |));
                    ("frame_table",
                      M.call_closure (|
                        M.get_trait_method (|
                          "core::default::Default",
                          Ty.path "specs::jtable::JumpTable",
                          [],
                          "default",
                          []
                        |),
                        []
                      |));
                    ("module_ref", Value.StructTuple "core::option::Option::None" []);
                    ("unresolved_event", Value.StructTuple "core::option::Option::None" [])
                  ]))
            | _, _ => M.impossible
            end.
          
          Axiom AssociatedFunction_new : M.IsAssociatedFunction Self "new" new.
          
          (*
              pub fn into_compilation_table(&self) -> CompilationTable {
                  let itable: InstructionTable = self.itable.clone().into();
                  let imtable = InitMemoryTable::new(self.init_memory_table.clone());
                  let br_table = Arc::new(itable.create_brtable());
                  let elem_table = Arc::new(ElemTable::new(self.elements.clone()));
                  let configure_table = Arc::new(self.configure_table.clone());
                  let static_jtable = Arc::new(self.static_frame_table.clone().try_into().expect(&format!(
                      "The number of static frame entries should be {}",
                      STATIC_FRAME_ENTRY_NUMBER
                  )));
                  let initialization_state = Arc::new(InitializationState {
                      eid: 1,
                      fid: self.start_fid.unwrap(),
                      iid: 0,
                      frame_id: 0,
                      sp: DEFAULT_VALUE_STACK_LIMIT as u32 - 1,
          
                      host_public_inputs: 1,
                      context_in_index: 1,
                      context_out_index: 1,
                      external_host_call_call_index: 1,
          
                      initial_memory_pages: configure_table.init_memory_pages,
                      maximal_memory_pages: configure_table.maximal_memory_pages,
          
                      #[cfg(feature = "continuation")]
                      jops: num_bigint::BigUint::from(0u64),
          
                      #[cfg(not(feature = "continuation"))]
                      _phantom: core::marker::PhantomData,
                  });
          
                  CompilationTable {
                      itable: Arc::new(itable),
                      imtable: Arc::new(imtable),
                      br_table,
                      elem_table,
                      configure_table,
                      static_jtable,
                      initialization_state,
                  }
              }
          *)
          Definition into_compilation_table (τ : list Ty.t) (α : list Value.t) : M :=
            match τ, α with
            | [], [ self ] =>
              ltac:(M.monadic
                (let self := M.alloc (| self |) in
                M.read (|
                  let itable :=
                    M.alloc (|
                      M.call_closure (|
                        M.get_trait_method (|
                          "core::convert::Into",
                          Ty.path "specs::itable::InstructionTableInternal",
                          [ Ty.path "specs::itable::InstructionTable" ],
                          "into",
                          []
                        |),
                        [
                          M.call_closure (|
                            M.get_trait_method (|
                              "core::clone::Clone",
                              Ty.path "specs::itable::InstructionTableInternal",
                              [],
                              "clone",
                              []
                            |),
                            [
                              M.SubPointer.get_struct_record_field (|
                                M.read (| self |),
                                "delphinus_zkwasm::runtime::monitor::plugins::table::TablePlugin",
                                "itable"
                              |)
                            ]
                          |)
                        ]
                      |)
                    |) in
                  let imtable :=
                    M.alloc (|
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.path "specs::imtable::InitMemoryTable",
                          "new",
                          []
                        |),
                        [
                          M.call_closure (|
                            M.get_trait_method (|
                              "core::clone::Clone",
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                [
                                  Ty.path "specs::imtable::InitMemoryTableEntry";
                                  Ty.path "alloc::alloc::Global"
                                ],
                              [],
                              "clone",
                              []
                            |),
                            [
                              M.SubPointer.get_struct_record_field (|
                                M.read (| self |),
                                "delphinus_zkwasm::runtime::monitor::plugins::table::TablePlugin",
                                "init_memory_table"
                              |)
                            ]
                          |)
                        ]
                      |)
                    |) in
                  let br_table :=
                    M.alloc (|
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.apply
                            (Ty.path "alloc::sync::Arc")
                            [ Ty.path "specs::brtable::BrTable"; Ty.path "alloc::alloc::Global" ],
                          "new",
                          []
                        |),
                        [
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.path "specs::itable::InstructionTable",
                              "create_brtable",
                              []
                            |),
                            [ itable ]
                          |)
                        ]
                      |)
                    |) in
                  let elem_table :=
                    M.alloc (|
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.apply
                            (Ty.path "alloc::sync::Arc")
                            [ Ty.path "specs::brtable::ElemTable"; Ty.path "alloc::alloc::Global" ],
                          "new",
                          []
                        |),
                        [
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.path "specs::brtable::ElemTable",
                              "new",
                              []
                            |),
                            [
                              M.call_closure (|
                                M.get_trait_method (|
                                  "core::clone::Clone",
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    [
                                      Ty.path "specs::brtable::ElemEntry";
                                      Ty.path "alloc::alloc::Global"
                                    ],
                                  [],
                                  "clone",
                                  []
                                |),
                                [
                                  M.SubPointer.get_struct_record_field (|
                                    M.read (| self |),
                                    "delphinus_zkwasm::runtime::monitor::plugins::table::TablePlugin",
                                    "elements"
                                  |)
                                ]
                              |)
                            ]
                          |)
                        ]
                      |)
                    |) in
                  let configure_table :=
                    M.alloc (|
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.apply
                            (Ty.path "alloc::sync::Arc")
                            [
                              Ty.path "specs::configure_table::ConfigureTable";
                              Ty.path "alloc::alloc::Global"
                            ],
                          "new",
                          []
                        |),
                        [
                          M.call_closure (|
                            M.get_trait_method (|
                              "core::clone::Clone",
                              Ty.path "specs::configure_table::ConfigureTable",
                              [],
                              "clone",
                              []
                            |),
                            [
                              M.SubPointer.get_struct_record_field (|
                                M.read (| self |),
                                "delphinus_zkwasm::runtime::monitor::plugins::table::TablePlugin",
                                "configure_table"
                              |)
                            ]
                          |)
                        ]
                      |)
                    |) in
                  let static_jtable :=
                    M.alloc (|
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.apply
                            (Ty.path "alloc::sync::Arc")
                            [
                              Ty.apply
                                (Ty.path "array")
                                [ Ty.path "specs::jtable::StaticFrameEntry" ];
                              Ty.path "alloc::alloc::Global"
                            ],
                          "new",
                          []
                        |),
                        [
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.apply
                                (Ty.path "core::result::Result")
                                [
                                  Ty.apply
                                    (Ty.path "array")
                                    [ Ty.path "specs::jtable::StaticFrameEntry" ];
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    [
                                      Ty.path "specs::jtable::StaticFrameEntry";
                                      Ty.path "alloc::alloc::Global"
                                    ]
                                ],
                              "expect",
                              []
                            |),
                            [
                              M.call_closure (|
                                M.get_trait_method (|
                                  "core::convert::TryInto",
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    [
                                      Ty.path "specs::jtable::StaticFrameEntry";
                                      Ty.path "alloc::alloc::Global"
                                    ],
                                  [
                                    Ty.apply
                                      (Ty.path "array")
                                      [ Ty.path "specs::jtable::StaticFrameEntry" ]
                                  ],
                                  "try_into",
                                  []
                                |),
                                [
                                  M.call_closure (|
                                    M.get_trait_method (|
                                      "core::clone::Clone",
                                      Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        [
                                          Ty.path "specs::jtable::StaticFrameEntry";
                                          Ty.path "alloc::alloc::Global"
                                        ],
                                      [],
                                      "clone",
                                      []
                                    |),
                                    [
                                      M.SubPointer.get_struct_record_field (|
                                        M.read (| self |),
                                        "delphinus_zkwasm::runtime::monitor::plugins::table::TablePlugin",
                                        "static_frame_table"
                                      |)
                                    ]
                                  |)
                                ]
                              |);
                              M.call_closure (|
                                M.get_trait_method (|
                                  "core::ops::deref::Deref",
                                  Ty.path "alloc::string::String",
                                  [],
                                  "deref",
                                  []
                                |),
                                [
                                  let res :=
                                    M.alloc (|
                                      M.call_closure (|
                                        M.get_function (| "alloc::fmt::format", [] |),
                                        [
                                          M.call_closure (|
                                            M.get_associated_function (|
                                              Ty.path "core::fmt::Arguments",
                                              "new_v1",
                                              []
                                            |),
                                            [
                                              (* Unsize *)
                                              M.pointer_coercion
                                                (M.alloc (|
                                                  Value.Array
                                                    [
                                                      M.read (|
                                                        Value.String
                                                          "The number of static frame entries should be "
                                                      |)
                                                    ]
                                                |));
                                              (* Unsize *)
                                              M.pointer_coercion
                                                (M.alloc (|
                                                  Value.Array
                                                    [
                                                      M.call_closure (|
                                                        M.get_associated_function (|
                                                          Ty.path "core::fmt::rt::Argument",
                                                          "new_display",
                                                          [ Ty.path "usize" ]
                                                        |),
                                                        [
                                                          M.get_constant (|
                                                            "specs::jtable::STATIC_FRAME_ENTRY_NUMBER"
                                                          |)
                                                        ]
                                                      |)
                                                    ]
                                                |))
                                            ]
                                          |)
                                        ]
                                      |)
                                    |) in
                                  res
                                ]
                              |)
                            ]
                          |)
                        ]
                      |)
                    |) in
                  let initialization_state :=
                    M.alloc (|
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.apply
                            (Ty.path "alloc::sync::Arc")
                            [
                              Ty.apply
                                (Ty.path "specs::state::InitializationState")
                                [ Ty.path "u32"; Ty.path "num_bigint::biguint::BigUint" ];
                              Ty.path "alloc::alloc::Global"
                            ],
                          "new",
                          []
                        |),
                        [
                          Value.StructRecord
                            "specs::state::InitializationState"
                            [
                              ("eid", Value.Integer 1);
                              ("fid",
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.apply (Ty.path "core::option::Option") [ Ty.path "u32" ],
                                    "unwrap",
                                    []
                                  |),
                                  [
                                    M.read (|
                                      M.SubPointer.get_struct_record_field (|
                                        M.read (| self |),
                                        "delphinus_zkwasm::runtime::monitor::plugins::table::TablePlugin",
                                        "start_fid"
                                      |)
                                    |)
                                  ]
                                |));
                              ("iid", Value.Integer 0);
                              ("frame_id", Value.Integer 0);
                              ("sp",
                                BinOp.Panic.sub (|
                                  Integer.U32,
                                  M.rust_cast
                                    (M.read (|
                                      M.get_constant (|
                                        "wasmi::runner::DEFAULT_VALUE_STACK_LIMIT"
                                      |)
                                    |)),
                                  Value.Integer 1
                                |));
                              ("host_public_inputs", Value.Integer 1);
                              ("context_in_index", Value.Integer 1);
                              ("context_out_index", Value.Integer 1);
                              ("external_host_call_call_index", Value.Integer 1);
                              ("initial_memory_pages",
                                M.read (|
                                  M.SubPointer.get_struct_record_field (|
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::ops::deref::Deref",
                                        Ty.apply
                                          (Ty.path "alloc::sync::Arc")
                                          [
                                            Ty.path "specs::configure_table::ConfigureTable";
                                            Ty.path "alloc::alloc::Global"
                                          ],
                                        [],
                                        "deref",
                                        []
                                      |),
                                      [ configure_table ]
                                    |),
                                    "specs::configure_table::ConfigureTable",
                                    "init_memory_pages"
                                  |)
                                |));
                              ("maximal_memory_pages",
                                M.read (|
                                  M.SubPointer.get_struct_record_field (|
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::ops::deref::Deref",
                                        Ty.apply
                                          (Ty.path "alloc::sync::Arc")
                                          [
                                            Ty.path "specs::configure_table::ConfigureTable";
                                            Ty.path "alloc::alloc::Global"
                                          ],
                                        [],
                                        "deref",
                                        []
                                      |),
                                      [ configure_table ]
                                    |),
                                    "specs::configure_table::ConfigureTable",
                                    "maximal_memory_pages"
                                  |)
                                |));
                              ("_phantom", Value.StructTuple "core::marker::PhantomData" [])
                            ]
                        ]
                      |)
                    |) in
                  M.alloc (|
                    Value.StructRecord
                      "specs::CompilationTable"
                      [
                        ("itable",
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.apply
                                (Ty.path "alloc::sync::Arc")
                                [
                                  Ty.path "specs::itable::InstructionTable";
                                  Ty.path "alloc::alloc::Global"
                                ],
                              "new",
                              []
                            |),
                            [ M.read (| itable |) ]
                          |));
                        ("imtable",
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.apply
                                (Ty.path "alloc::sync::Arc")
                                [
                                  Ty.path "specs::imtable::InitMemoryTable";
                                  Ty.path "alloc::alloc::Global"
                                ],
                              "new",
                              []
                            |),
                            [ M.read (| imtable |) ]
                          |));
                        ("br_table", M.read (| br_table |));
                        ("elem_table", M.read (| elem_table |));
                        ("configure_table", M.read (| configure_table |));
                        ("static_jtable", M.read (| static_jtable |));
                        ("initialization_state", M.read (| initialization_state |))
                      ]
                  |)
                |)))
            | _, _ => M.impossible
            end.
          
          Axiom AssociatedFunction_into_compilation_table :
            M.IsAssociatedFunction Self "into_compilation_table" into_compilation_table.
          
          (*
              pub fn into_tables(self) -> Tables {
                  Tables {
                      compilation_tables: self.into_compilation_table(),
                      execution_tables: ExecutionTable {
                          etable: self.etable.finalized(),
                          jtable: self.frame_table,
                      },
                  }
              }
          *)
          Definition into_tables (τ : list Ty.t) (α : list Value.t) : M :=
            match τ, α with
            | [], [ self ] =>
              ltac:(M.monadic
                (let self := M.alloc (| self |) in
                Value.StructRecord
                  "specs::Tables"
                  [
                    ("compilation_tables",
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.path "delphinus_zkwasm::runtime::monitor::plugins::table::TablePlugin",
                          "into_compilation_table",
                          []
                        |),
                        [ self ]
                      |));
                    ("execution_tables",
                      Value.StructRecord
                        "specs::ExecutionTable"
                        [
                          ("etable",
                            M.call_closure (|
                              M.get_associated_function (|
                                Ty.path
                                  "delphinus_zkwasm::runtime::monitor::plugins::table::etable::ETable",
                                "finalized",
                                []
                              |),
                              [
                                M.read (|
                                  M.SubPointer.get_struct_record_field (|
                                    self,
                                    "delphinus_zkwasm::runtime::monitor::plugins::table::TablePlugin",
                                    "etable"
                                  |)
                                |)
                              ]
                            |));
                          ("jtable",
                            M.read (|
                              M.SubPointer.get_struct_record_field (|
                                self,
                                "delphinus_zkwasm::runtime::monitor::plugins::table::TablePlugin",
                                "frame_table"
                              |)
                            |))
                        ])
                  ]))
            | _, _ => M.impossible
            end.
          
          Axiom AssociatedFunction_into_tables :
            M.IsAssociatedFunction Self "into_tables" into_tables.
          (*
              fn push_frame(&mut self, eid: u32, last_jump_eid: u32, callee_fid: u32, fid: u32, iid: u32) {
                  self.frame_table.push(JumpTableEntry {
                      eid,
                      last_jump_eid,
                      callee_fid,
                      fid,
                      iid,
                  });
          
                  self.last_jump_eid.push(eid);
              }
          *)
          Definition push_frame (τ : list Ty.t) (α : list Value.t) : M :=
            match τ, α with
            | [], [ self; eid; last_jump_eid; callee_fid; fid; iid ] =>
              ltac:(M.monadic
                (let self := M.alloc (| self |) in
                let eid := M.alloc (| eid |) in
                let last_jump_eid := M.alloc (| last_jump_eid |) in
                let callee_fid := M.alloc (| callee_fid |) in
                let fid := M.alloc (| fid |) in
                let iid := M.alloc (| iid |) in
                M.read (|
                  let _ :=
                    M.alloc (|
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.path "specs::jtable::JumpTable",
                          "push",
                          []
                        |),
                        [
                          M.SubPointer.get_struct_record_field (|
                            M.read (| self |),
                            "delphinus_zkwasm::runtime::monitor::plugins::table::TablePlugin",
                            "frame_table"
                          |);
                          Value.StructRecord
                            "specs::jtable::JumpTableEntry"
                            [
                              ("eid", M.read (| eid |));
                              ("last_jump_eid", M.read (| last_jump_eid |));
                              ("callee_fid", M.read (| callee_fid |));
                              ("fid", M.read (| fid |));
                              ("iid", M.read (| iid |))
                            ]
                        ]
                      |)
                    |) in
                  let _ :=
                    M.alloc (|
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            [ Ty.path "u32"; Ty.path "alloc::alloc::Global" ],
                          "push",
                          []
                        |),
                        [
                          M.SubPointer.get_struct_record_field (|
                            M.read (| self |),
                            "delphinus_zkwasm::runtime::monitor::plugins::table::TablePlugin",
                            "last_jump_eid"
                          |);
                          M.read (| eid |)
                        ]
                      |)
                    |) in
                  M.alloc (| Value.Tuple [] |)
                |)))
            | _, _ => M.impossible
            end.
          
          Axiom AssociatedFunction_push_frame : M.IsAssociatedFunction Self "push_frame" push_frame.
          
          (*
              fn pop_frame(&mut self) {
                  self.last_jump_eid.pop();
              }
          *)
          Definition pop_frame (τ : list Ty.t) (α : list Value.t) : M :=
            match τ, α with
            | [], [ self ] =>
              ltac:(M.monadic
                (let self := M.alloc (| self |) in
                M.read (|
                  let _ :=
                    M.alloc (|
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            [ Ty.path "u32"; Ty.path "alloc::alloc::Global" ],
                          "pop",
                          []
                        |),
                        [
                          M.SubPointer.get_struct_record_field (|
                            M.read (| self |),
                            "delphinus_zkwasm::runtime::monitor::plugins::table::TablePlugin",
                            "last_jump_eid"
                          |)
                        ]
                      |)
                    |) in
                  M.alloc (| Value.Tuple [] |)
                |)))
            | _, _ => M.impossible
            end.
          
          Axiom AssociatedFunction_pop_frame : M.IsAssociatedFunction Self "pop_frame" pop_frame.
          
          (*
              pub fn fill_trace(
                  &mut self,
                  current_sp: u32,
                  allocated_memory_pages: u32,
                  fid: u32,
                  callee_sig: &Signature,
                  keep_value: Option<u64>,
                  wasm_input_func_ref: FuncRef,
              ) {
                  let has_return_value = callee_sig.return_type().is_some();
          
                  let last_jump_eid = *self.last_jump_eid.last().unwrap();
          
                  let mut iid = 0;
          
                  let wasm_input_host_func_index = match wasm_input_func_ref.as_internal() {
                      FuncInstanceInternal::Internal { .. } => unreachable!(),
                      FuncInstanceInternal::Host {
                          host_func_index, ..
                      } => host_func_index,
                  };
          
                  if has_return_value {
                      self.etable.push(
                          fid,
                          iid,
                          current_sp,
                          allocated_memory_pages,
                          last_jump_eid,
                          StepInfo::I32Const { value: 0 },
                      );
          
                      iid += 1;
          
                      self.etable.push(
                          fid,
                          iid,
                          current_sp + 1,
                          allocated_memory_pages,
                          last_jump_eid,
                          StepInfo::CallHost {
                              plugin: HostPlugin::HostInput,
                              host_function_idx: *wasm_input_host_func_index,
                              function_name: "wasm_input".to_owned(),
                              signature: specs::host_function::Signature {
                                  params: vec![ValueType::I32],
                                  return_type: Some(ValueType::I64),
                              },
                              args: vec![0],
                              ret_val: Some(keep_value.unwrap()),
                              op_index_in_plugin: 0,
                          },
                      );
          
                      iid += 1;
          
                      if callee_sig.return_type() != Some(wasmi::ValueType::I64) {
                          self.etable.push(
                              fid,
                              iid,
                              current_sp + 1,
                              allocated_memory_pages,
                              last_jump_eid,
                              StepInfo::I32WrapI64 {
                                  value: keep_value.unwrap() as i64,
                                  result: keep_value.unwrap() as i32,
                              },
                          );
          
                          iid += 1;
                      }
                  }
          
                  self.etable.push(
                      fid,
                      iid,
                      current_sp + has_return_value as u32,
                      allocated_memory_pages,
                      last_jump_eid,
                      StepInfo::Return {
                          drop: callee_sig.params().len() as u32,
                          keep: if let Some(t) = callee_sig.return_type() {
                              vec![t.into_elements().into()]
                          } else {
                              vec![]
                          },
                          keep_values: keep_value.map_or(vec![], |v| vec![v]),
                      },
                  );
              }
          *)
          Definition fill_trace (τ : list Ty.t) (α : list Value.t) : M :=
            match τ, α with
            | [],
                [
                  self;
                  current_sp;
                  allocated_memory_pages;
                  fid;
                  callee_sig;
                  keep_value;
                  wasm_input_func_ref
                ] =>
              ltac:(M.monadic
                (let self := M.alloc (| self |) in
                let current_sp := M.alloc (| current_sp |) in
                let allocated_memory_pages := M.alloc (| allocated_memory_pages |) in
                let fid := M.alloc (| fid |) in
                let callee_sig := M.alloc (| callee_sig |) in
                let keep_value := M.alloc (| keep_value |) in
                let wasm_input_func_ref := M.alloc (| wasm_input_func_ref |) in
                M.read (|
                  let has_return_value :=
                    M.alloc (|
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.apply
                            (Ty.path "core::option::Option")
                            [ Ty.path "wasmi_core::value::ValueType" ],
                          "is_some",
                          []
                        |),
                        [
                          M.alloc (|
                            M.call_closure (|
                              M.get_associated_function (|
                                Ty.path "wasmi::types::Signature",
                                "return_type",
                                []
                              |),
                              [ M.read (| callee_sig |) ]
                            |)
                          |)
                        ]
                      |)
                    |) in
                  let last_jump_eid :=
                    M.copy (|
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.apply
                            (Ty.path "core::option::Option")
                            [ Ty.apply (Ty.path "&") [ Ty.path "u32" ] ],
                          "unwrap",
                          []
                        |),
                        [
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.apply (Ty.path "slice") [ Ty.path "u32" ],
                              "last",
                              []
                            |),
                            [
                              M.call_closure (|
                                M.get_trait_method (|
                                  "core::ops::deref::Deref",
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    [ Ty.path "u32"; Ty.path "alloc::alloc::Global" ],
                                  [],
                                  "deref",
                                  []
                                |),
                                [
                                  M.SubPointer.get_struct_record_field (|
                                    M.read (| self |),
                                    "delphinus_zkwasm::runtime::monitor::plugins::table::TablePlugin",
                                    "last_jump_eid"
                                  |)
                                ]
                              |)
                            ]
                          |)
                        ]
                      |)
                    |) in
                  let iid := M.alloc (| Value.Integer 0 |) in
                  let wasm_input_host_func_index :=
                    M.copy (|
                      M.match_operator (|
                        M.alloc (|
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.path "wasmi::func::FuncInstance",
                              "as_internal",
                              []
                            |),
                            [
                              M.call_closure (|
                                M.get_trait_method (|
                                  "core::ops::deref::Deref",
                                  Ty.path "wasmi::func::FuncRef",
                                  [],
                                  "deref",
                                  []
                                |),
                                [ wasm_input_func_ref ]
                              |)
                            ]
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ := M.read (| γ |) in
                              M.alloc (|
                                M.never_to_any (|
                                  M.call_closure (|
                                    M.get_function (| "core::panicking::panic", [] |),
                                    [
                                      M.read (|
                                        Value.String "internal error: entered unreachable code"
                                      |)
                                    ]
                                  |)
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ := M.read (| γ |) in
                              let γ1_0 :=
                                M.SubPointer.get_struct_record_field (|
                                  γ,
                                  "wasmi::func::FuncInstanceInternal::Host",
                                  "host_func_index"
                                |) in
                              let host_func_index := M.alloc (| γ1_0 |) in
                              host_func_index))
                        ]
                      |)
                    |) in
                  let _ :=
                    M.match_operator (|
                      M.alloc (| Value.Tuple [] |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ := M.use has_return_value in
                            let _ :=
                              M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                            let _ :=
                              M.alloc (|
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.path
                                      "delphinus_zkwasm::runtime::monitor::plugins::table::etable::ETable",
                                    "push",
                                    []
                                  |),
                                  [
                                    M.SubPointer.get_struct_record_field (|
                                      M.read (| self |),
                                      "delphinus_zkwasm::runtime::monitor::plugins::table::TablePlugin",
                                      "etable"
                                    |);
                                    M.read (| fid |);
                                    M.read (| iid |);
                                    M.read (| current_sp |);
                                    M.read (| allocated_memory_pages |);
                                    M.read (| last_jump_eid |);
                                    Value.StructRecord
                                      "specs::step::StepInfo::I32Const"
                                      [ ("value", Value.Integer 0) ]
                                  ]
                                |)
                              |) in
                            let _ :=
                              let β := iid in
                              M.write (|
                                β,
                                BinOp.Panic.add (| Integer.U32, M.read (| β |), Value.Integer 1 |)
                              |) in
                            let _ :=
                              M.alloc (|
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.path
                                      "delphinus_zkwasm::runtime::monitor::plugins::table::etable::ETable",
                                    "push",
                                    []
                                  |),
                                  [
                                    M.SubPointer.get_struct_record_field (|
                                      M.read (| self |),
                                      "delphinus_zkwasm::runtime::monitor::plugins::table::TablePlugin",
                                      "etable"
                                    |);
                                    M.read (| fid |);
                                    M.read (| iid |);
                                    BinOp.Panic.add (|
                                      Integer.U32,
                                      M.read (| current_sp |),
                                      Value.Integer 1
                                    |);
                                    M.read (| allocated_memory_pages |);
                                    M.read (| last_jump_eid |);
                                    Value.StructRecord
                                      "specs::step::StepInfo::CallHost"
                                      [
                                        ("plugin",
                                          Value.StructTuple
                                            "specs::host_function::HostPlugin::HostInput"
                                            []);
                                        ("host_function_idx",
                                          M.read (| M.read (| wasm_input_host_func_index |) |));
                                        ("function_name",
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "alloc::borrow::ToOwned",
                                              Ty.path "str",
                                              [],
                                              "to_owned",
                                              []
                                            |),
                                            [ M.read (| Value.String "wasm_input" |) ]
                                          |));
                                        ("signature",
                                          Value.StructRecord
                                            "specs::host_function::Signature"
                                            [
                                              ("params",
                                                M.call_closure (|
                                                  M.get_associated_function (|
                                                    Ty.apply
                                                      (Ty.path "slice")
                                                      [ Ty.path "specs::types::ValueType" ],
                                                    "into_vec",
                                                    [ Ty.path "alloc::alloc::Global" ]
                                                  |),
                                                  [
                                                    (* Unsize *)
                                                    M.pointer_coercion
                                                      (M.read (|
                                                        M.call_closure (|
                                                          M.get_associated_function (|
                                                            Ty.apply
                                                              (Ty.path "alloc::boxed::Box")
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "array")
                                                                  [
                                                                    Ty.path
                                                                      "specs::types::ValueType"
                                                                  ];
                                                                Ty.path "alloc::alloc::Global"
                                                              ],
                                                            "new",
                                                            []
                                                          |),
                                                          [
                                                            M.alloc (|
                                                              Value.Array
                                                                [
                                                                  Value.StructTuple
                                                                    "specs::types::ValueType::I32"
                                                                    []
                                                                ]
                                                            |)
                                                          ]
                                                        |)
                                                      |))
                                                  ]
                                                |));
                                              ("return_type",
                                                Value.StructTuple
                                                  "core::option::Option::Some"
                                                  [
                                                    Value.StructTuple
                                                      "specs::types::ValueType::I64"
                                                      []
                                                  ])
                                            ]);
                                        ("args",
                                          M.call_closure (|
                                            M.get_associated_function (|
                                              Ty.apply (Ty.path "slice") [ Ty.path "u64" ],
                                              "into_vec",
                                              [ Ty.path "alloc::alloc::Global" ]
                                            |),
                                            [
                                              (* Unsize *)
                                              M.pointer_coercion
                                                (M.read (|
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.apply
                                                        (Ty.path "alloc::boxed::Box")
                                                        [
                                                          Ty.apply
                                                            (Ty.path "array")
                                                            [ Ty.path "u64" ];
                                                          Ty.path "alloc::alloc::Global"
                                                        ],
                                                      "new",
                                                      []
                                                    |),
                                                    [ M.alloc (| Value.Array [ Value.Integer 0 ] |)
                                                    ]
                                                  |)
                                                |))
                                            ]
                                          |));
                                        ("ret_val",
                                          Value.StructTuple
                                            "core::option::Option::Some"
                                            [
                                              M.call_closure (|
                                                M.get_associated_function (|
                                                  Ty.apply
                                                    (Ty.path "core::option::Option")
                                                    [ Ty.path "u64" ],
                                                  "unwrap",
                                                  []
                                                |),
                                                [ M.read (| keep_value |) ]
                                              |)
                                            ]);
                                        ("op_index_in_plugin", Value.Integer 0)
                                      ]
                                  ]
                                |)
                              |) in
                            let _ :=
                              let β := iid in
                              M.write (|
                                β,
                                BinOp.Panic.add (| Integer.U32, M.read (| β |), Value.Integer 1 |)
                              |) in
                            M.match_operator (|
                              M.alloc (| Value.Tuple [] |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ :=
                                      M.use
                                        (M.alloc (|
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "core::cmp::PartialEq",
                                              Ty.apply
                                                (Ty.path "core::option::Option")
                                                [ Ty.path "wasmi_core::value::ValueType" ],
                                              [
                                                Ty.apply
                                                  (Ty.path "core::option::Option")
                                                  [ Ty.path "wasmi_core::value::ValueType" ]
                                              ],
                                              "ne",
                                              []
                                            |),
                                            [
                                              M.alloc (|
                                                M.call_closure (|
                                                  M.get_associated_function (|
                                                    Ty.path "wasmi::types::Signature",
                                                    "return_type",
                                                    []
                                                  |),
                                                  [ M.read (| callee_sig |) ]
                                                |)
                                              |);
                                              M.alloc (|
                                                Value.StructTuple
                                                  "core::option::Option::Some"
                                                  [
                                                    Value.StructTuple
                                                      "wasmi_core::value::ValueType::I64"
                                                      []
                                                  ]
                                              |)
                                            ]
                                          |)
                                        |)) in
                                    let _ :=
                                      M.is_constant_or_break_match (|
                                        M.read (| γ |),
                                        Value.Bool true
                                      |) in
                                    let _ :=
                                      M.alloc (|
                                        M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.path
                                              "delphinus_zkwasm::runtime::monitor::plugins::table::etable::ETable",
                                            "push",
                                            []
                                          |),
                                          [
                                            M.SubPointer.get_struct_record_field (|
                                              M.read (| self |),
                                              "delphinus_zkwasm::runtime::monitor::plugins::table::TablePlugin",
                                              "etable"
                                            |);
                                            M.read (| fid |);
                                            M.read (| iid |);
                                            BinOp.Panic.add (|
                                              Integer.U32,
                                              M.read (| current_sp |),
                                              Value.Integer 1
                                            |);
                                            M.read (| allocated_memory_pages |);
                                            M.read (| last_jump_eid |);
                                            Value.StructRecord
                                              "specs::step::StepInfo::I32WrapI64"
                                              [
                                                ("value",
                                                  M.rust_cast
                                                    (M.call_closure (|
                                                      M.get_associated_function (|
                                                        Ty.apply
                                                          (Ty.path "core::option::Option")
                                                          [ Ty.path "u64" ],
                                                        "unwrap",
                                                        []
                                                      |),
                                                      [ M.read (| keep_value |) ]
                                                    |)));
                                                ("result",
                                                  M.rust_cast
                                                    (M.call_closure (|
                                                      M.get_associated_function (|
                                                        Ty.apply
                                                          (Ty.path "core::option::Option")
                                                          [ Ty.path "u64" ],
                                                        "unwrap",
                                                        []
                                                      |),
                                                      [ M.read (| keep_value |) ]
                                                    |)))
                                              ]
                                          ]
                                        |)
                                      |) in
                                    let _ :=
                                      let β := iid in
                                      M.write (|
                                        β,
                                        BinOp.Panic.add (|
                                          Integer.U32,
                                          M.read (| β |),
                                          Value.Integer 1
                                        |)
                                      |) in
                                    M.alloc (| Value.Tuple [] |)));
                                fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                              ]
                            |)));
                        fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                      ]
                    |) in
                  let _ :=
                    M.alloc (|
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.path
                            "delphinus_zkwasm::runtime::monitor::plugins::table::etable::ETable",
                          "push",
                          []
                        |),
                        [
                          M.SubPointer.get_struct_record_field (|
                            M.read (| self |),
                            "delphinus_zkwasm::runtime::monitor::plugins::table::TablePlugin",
                            "etable"
                          |);
                          M.read (| fid |);
                          M.read (| iid |);
                          BinOp.Panic.add (|
                            Integer.U32,
                            M.read (| current_sp |),
                            M.rust_cast (M.read (| has_return_value |))
                          |);
                          M.read (| allocated_memory_pages |);
                          M.read (| last_jump_eid |);
                          Value.StructRecord
                            "specs::step::StepInfo::Return"
                            [
                              ("drop",
                                M.rust_cast
                                  (M.call_closure (|
                                    M.get_associated_function (|
                                      Ty.apply
                                        (Ty.path "slice")
                                        [ Ty.path "wasmi_core::value::ValueType" ],
                                      "len",
                                      []
                                    |),
                                    [
                                      M.call_closure (|
                                        M.get_associated_function (|
                                          Ty.path "wasmi::types::Signature",
                                          "params",
                                          []
                                        |),
                                        [ M.read (| callee_sig |) ]
                                      |)
                                    ]
                                  |)));
                              ("keep",
                                M.read (|
                                  M.match_operator (|
                                    M.alloc (| Value.Tuple [] |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let γ :=
                                            M.alloc (|
                                              M.call_closure (|
                                                M.get_associated_function (|
                                                  Ty.path "wasmi::types::Signature",
                                                  "return_type",
                                                  []
                                                |),
                                                [ M.read (| callee_sig |) ]
                                              |)
                                            |) in
                                          let γ0_0 :=
                                            M.SubPointer.get_struct_tuple_field (|
                                              γ,
                                              "core::option::Option::Some",
                                              0
                                            |) in
                                          let t := M.copy (| γ0_0 |) in
                                          M.alloc (|
                                            M.call_closure (|
                                              M.get_associated_function (|
                                                Ty.apply
                                                  (Ty.path "slice")
                                                  [ Ty.path "specs::types::ValueType" ],
                                                "into_vec",
                                                [ Ty.path "alloc::alloc::Global" ]
                                              |),
                                              [
                                                (* Unsize *)
                                                M.pointer_coercion
                                                  (M.read (|
                                                    M.call_closure (|
                                                      M.get_associated_function (|
                                                        Ty.apply
                                                          (Ty.path "alloc::boxed::Box")
                                                          [
                                                            Ty.apply
                                                              (Ty.path "array")
                                                              [ Ty.path "specs::types::ValueType" ];
                                                            Ty.path "alloc::alloc::Global"
                                                          ],
                                                        "new",
                                                        []
                                                      |),
                                                      [
                                                        M.alloc (|
                                                          Value.Array
                                                            [
                                                              M.call_closure (|
                                                                M.get_trait_method (|
                                                                  "core::convert::Into",
                                                                  Ty.path
                                                                    "parity_wasm::elements::types::ValueType",
                                                                  [
                                                                    Ty.path
                                                                      "specs::types::ValueType"
                                                                  ],
                                                                  "into",
                                                                  []
                                                                |),
                                                                [
                                                                  M.call_closure (|
                                                                    M.get_associated_function (|
                                                                      Ty.path
                                                                        "wasmi_core::value::ValueType",
                                                                      "into_elements",
                                                                      []
                                                                    |),
                                                                    [ M.read (| t |) ]
                                                                  |)
                                                                ]
                                                              |)
                                                            ]
                                                        |)
                                                      ]
                                                    |)
                                                  |))
                                              ]
                                            |)
                                          |)));
                                      fun γ =>
                                        ltac:(M.monadic
                                          (M.alloc (|
                                            M.call_closure (|
                                              M.get_associated_function (|
                                                Ty.apply
                                                  (Ty.path "alloc::vec::Vec")
                                                  [
                                                    Ty.path "specs::types::ValueType";
                                                    Ty.path "alloc::alloc::Global"
                                                  ],
                                                "new",
                                                []
                                              |),
                                              []
                                            |)
                                          |)))
                                    ]
                                  |)
                                |));
                              ("keep_values",
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.apply (Ty.path "core::option::Option") [ Ty.path "u64" ],
                                    "map_or",
                                    [
                                      Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        [ Ty.path "u64"; Ty.path "alloc::alloc::Global" ];
                                      Ty.function
                                        [ Ty.tuple [ Ty.path "u64" ] ]
                                        (Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          [ Ty.path "u64"; Ty.path "alloc::alloc::Global" ])
                                    ]
                                  |),
                                  [
                                    M.read (| keep_value |);
                                    M.call_closure (|
                                      M.get_associated_function (|
                                        Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          [ Ty.path "u64"; Ty.path "alloc::alloc::Global" ],
                                        "new",
                                        []
                                      |),
                                      []
                                    |);
                                    M.closure
                                      (fun γ =>
                                        ltac:(M.monadic
                                          match γ with
                                          | [ α0 ] =>
                                            M.match_operator (|
                                              M.alloc (| α0 |),
                                              [
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (let v := M.copy (| γ |) in
                                                    M.call_closure (|
                                                      M.get_associated_function (|
                                                        Ty.apply
                                                          (Ty.path "slice")
                                                          [ Ty.path "u64" ],
                                                        "into_vec",
                                                        [ Ty.path "alloc::alloc::Global" ]
                                                      |),
                                                      [
                                                        (* Unsize *)
                                                        M.pointer_coercion
                                                          (M.read (|
                                                            M.call_closure (|
                                                              M.get_associated_function (|
                                                                Ty.apply
                                                                  (Ty.path "alloc::boxed::Box")
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path "array")
                                                                      [ Ty.path "u64" ];
                                                                    Ty.path "alloc::alloc::Global"
                                                                  ],
                                                                "new",
                                                                []
                                                              |),
                                                              [
                                                                M.alloc (|
                                                                  Value.Array [ M.read (| v |) ]
                                                                |)
                                                              ]
                                                            |)
                                                          |))
                                                      ]
                                                    |)))
                                              ]
                                            |)
                                          | _ => M.impossible (||)
                                          end))
                                  ]
                                |))
                            ]
                        ]
                      |)
                    |) in
                  M.alloc (| Value.Tuple [] |)
                |)))
            | _, _ => M.impossible
            end.
          
          Axiom AssociatedFunction_fill_trace : M.IsAssociatedFunction Self "fill_trace" fill_trace.
        End Impl_delphinus_zkwasm_runtime_monitor_plugins_table_TablePlugin.
        
        
        Module Impl_wasmi_monitor_Monitor_for_delphinus_zkwasm_runtime_monitor_plugins_table_TablePlugin.
          Definition Self : Ty.t :=
            Ty.path "delphinus_zkwasm::runtime::monitor::plugins::table::TablePlugin".
          
          (*
              fn register_module(
                  &mut self,
                  module: &parity_wasm::elements::Module,
                  module_ref: &wasmi::ModuleRef,
                  entry: &str,
              ) -> Result<(), wasmi::Error> {
                  self.module_ref = Some(module_ref.clone());
          
                  self.phantom_helper
                      .register_module(module, module_ref, entry)?;
          
                  let mut type_idx_of_func = vec![];
          
                  // register static frame entries
                  {
                      let zkmain = module_ref.func_by_name(entry)?;
                      let zkmain_idx = match zkmain.as_internal() {
                          FuncInstanceInternal::Internal { index, .. } => index,
                          _ => unreachable!(),
                      };
          
                      self.static_frame_table.push(StaticFrameEntry {
                          enable: true,
                          frame_id: 0,
                          next_frame_id: 0,
                          callee_fid: *zkmain_idx as u32,
                          fid: 0,
                          iid: 0,
                      });
          
                      if let Some(start_idx) = module.start_section() {
                          self.static_frame_table.push(StaticFrameEntry {
                              enable: true,
                              frame_id: 0,
                              next_frame_id: 0,
                              callee_fid: start_idx,
                              fid: *zkmain_idx as u32,
                              iid: 0,
                          });
          
                          self.start_fid = Some(start_idx);
                      } else {
                          self.static_frame_table.push(StaticFrameEntry {
                              enable: false,
                              frame_id: 0,
                              next_frame_id: 0,
                              callee_fid: 0,
                              fid: 0,
                              iid: 0,
                          });
          
                          self.start_fid = Some( *zkmain_idx as u32);
                      }
                  }
          
                  {
                      for import_entry in module.import_section().map(|s| s.entries()).unwrap_or(&[]) {
                          match *import_entry.external() {
                              External::Function(fn_ty_idx) => {
                                  type_idx_of_func.push(fn_ty_idx);
                              }
                              _ => {}
                          }
                      }
          
                      let funcs = module
                          .function_section()
                          .map(|fs| fs.entries())
                          .unwrap_or(&[]);
          
                      for func in funcs {
                          type_idx_of_func.push(func.type_ref())
                      }
                  }
          
                  // register functions
                  {
                      let mut fid = 0;
          
                      while let Some(ref func) = module_ref.func_by_index(fid) {
                          let ftype = match *func.as_internal() {
                              FuncInstanceInternal::Internal { .. } => FunctionType::WasmFunction,
                              FuncInstanceInternal::Host {
                                  host_func_index, ..
                              } => match self
                                  .host_function_desc
                                  .get(&host_func_index)
                                  .cloned()
                                  .unwrap()
                              {
                                  HostFunctionDesc::Internal {
                                      name,
                                      op_index_in_plugin,
                                      plugin,
                                  } => FunctionType::HostFunction {
                                      plugin,
                                      function_index: host_func_index,
                                      function_name: name,
                                      op_index_in_plugin,
                                  },
                                  HostFunctionDesc::External { name, op, sig } => {
                                      FunctionType::HostFunctionExternal {
                                          function_name: name,
                                          op,
                                          sig,
                                      }
                                  }
                              },
                          };
          
                          self.function_table.push(FuncDesc {
                              ftype,
                              signature: func.signature().clone(),
                          });
          
                          fid += 1;
                      }
          
                      let mut fid = 0;
                      while let Some(ref func) = module_ref.func_by_index(fid) {
                          let function_mapping = |index| self.function_table.get(index as usize).unwrap();
          
                          if self.phantom_helper.is_phantom_function(fid) {
                              let wasm_input_func_idx = self.phantom_helper.wasm_input_func_idx(module_ref);
          
                              let instructions = PhantomFunction::build_phantom_function_instructions(
                                  &func.signature(),
                                  wasm_input_func_idx,
                              );
          
                              for (iid, instruction) in instructions.into_iter().enumerate() {
                                  self.itable.push(
                                      fid,
                                      iid as u32,
                                      instruction.into_opcode(&function_mapping),
                                  );
                              }
                          } else {
                              if let Some(body) = func.body() {
                                  let code = &body.code;
          
                                  let mut iter = code.iterate_from(0);
                                  let mut iid = iter.position();
                                  while let Some(instr) = iter.next() {
                                      self.itable
                                          .push(fid, iid, instr.into_opcode(&function_mapping));
          
                                      iid = iter.position();
                                  }
                              }
                          }
          
                          fid += 1;
                      }
                  }
          
                  // register globals
                  for (global_idx, global_ref) in module_ref.globals().iter().enumerate() {
                      self.init_memory_table.push(InitMemoryTableEntry {
                          is_mutable: global_ref.is_mutable(),
                          ltype: LocationType::Global,
                          offset: global_idx as u32,
                          vtype: global_ref.value_type().into_elements().into(),
                          value: global_ref.get().into(),
                          eid: 0,
                      });
                  }
          
                  // register memory
                  if let Some(memory_ref) = module_ref.memory_by_index(DEFAULT_MEMORY_INDEX) {
                      // one page contains 64KB*1024/8=8192 u64 entries
                      const ENTRIES: u32 = 8192;
          
                      let init_memory_pages = memory_ref.initial().0 as u32;
                      let maximal_memory_pages = memory_ref.maximum().map_or(65536, |max| max.0 as u32);
          
                      self.configure_table = ConfigureTable {
                          init_memory_pages,
                          maximal_memory_pages,
                      };
          
                      for offset in 0..(init_memory_pages * ENTRIES) {
                          let mut buf = [0u8; 8];
                          memory_ref.get_into(offset * 8, &mut buf)?;
          
                          let value = u64::from_le_bytes(buf);
                          if value != 0 {
                              self.init_memory_table.push(InitMemoryTableEntry {
                                  is_mutable: true,
                                  ltype: LocationType::Heap,
                                  offset,
                                  vtype: VarType::I64,
                                  value,
                                  eid: 0,
                              });
                          }
                      }
                  }
          
                  // for data_segment in module.data_section().map(|ds| ds.entries()).unwrap_or(&[]) {
                  //     let offset = data_segment
                  //         .offset()
                  //         .as_ref()
                  //         .expect("passive segments are rejected due to validation");
                  //     let offset_val = match eval_init_expr(offset, &module_ref) {
                  //         RuntimeValue::I32(v) => v as u32,
                  //         _ => panic!("Due to validation data segment offset should evaluate to i32"),
                  //     };
          
                  //     let memory_inst = module_ref
                  //         .memory_by_index(DEFAULT_MEMORY_INDEX)
                  //         .expect("Due to validation default memory should exists");
                  //     memory_inst.set(offset_val, data_segment.value())?;
          
                  //     todo!()
                  // }
          
                  for element_segment in module
                      .elements_section()
                      .map(|es| es.entries())
                      .unwrap_or(&[])
                  {
                      let offset = element_segment
                          .offset()
                          .as_ref()
                          .expect("passive segments are rejected due to validation");
                      let offset_val = match eval_init_expr(offset, &module_ref) {
                          RuntimeValue::I32(v) => v as u32,
                          _ => panic!("Due to validation elem segment offset should evaluate to i32"),
                      };
          
                      let table_inst = module_ref
                          .table_by_index(DEFAULT_TABLE_INDEX)
                          .expect("Due to validation default table should exists");
          
                      // This check is not only for bailing out early, but also to check the case when
                      // segment consist of 0 members.
                      if offset_val as u64 + element_segment.members().len() as u64
                          > table_inst.current_size() as u64
                      {
                          return Err(Error::Instantiation(
                              "elements segment does not fit".to_string(),
                          ));
                      }
          
                      for (j, func_idx) in element_segment.members().iter().enumerate() {
                          self.elements.push(ElemEntry {
                              table_idx: DEFAULT_TABLE_INDEX,
                              type_idx: type_idx_of_func[*func_idx as usize],
                              offset: offset_val + j as u32,
                              func_idx: *func_idx,
                          });
                      }
                  }
          
                  assert_eq!(self.function_table.len(), type_idx_of_func.len());
          
                  Ok(())
              }
          *)
          Definition register_module (τ : list Ty.t) (α : list Value.t) : M :=
            match τ, α with
            | [], [ self; module; module_ref; entry ] =>
              ltac:(M.monadic
                (let self := M.alloc (| self |) in
                let module := M.alloc (| module |) in
                let module_ref := M.alloc (| module_ref |) in
                let entry := M.alloc (| entry |) in
                M.catch_return (|
                  ltac:(M.monadic
                    (M.read (|
                      let _ :=
                        M.write (|
                          M.SubPointer.get_struct_record_field (|
                            M.read (| self |),
                            "delphinus_zkwasm::runtime::monitor::plugins::table::TablePlugin",
                            "module_ref"
                          |),
                          Value.StructTuple
                            "core::option::Option::Some"
                            [
                              M.call_closure (|
                                M.get_trait_method (|
                                  "core::clone::Clone",
                                  Ty.path "wasmi::module::ModuleRef",
                                  [],
                                  "clone",
                                  []
                                |),
                                [ M.read (| module_ref |) ]
                              |)
                            ]
                        |) in
                      let _ :=
                        M.match_operator (|
                          M.alloc (|
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::ops::try_trait::Try",
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  [ Ty.tuple []; Ty.path "wasmi::Error" ],
                                [],
                                "branch",
                                []
                              |),
                              [
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "wasmi::monitor::Monitor",
                                    Ty.path
                                      "delphinus_zkwasm::runtime::monitor::plugins::phantom::PhantomHelper",
                                    [],
                                    "register_module",
                                    []
                                  |),
                                  [
                                    M.SubPointer.get_struct_record_field (|
                                      M.read (| self |),
                                      "delphinus_zkwasm::runtime::monitor::plugins::table::TablePlugin",
                                      "phantom_helper"
                                    |);
                                    M.read (| module |);
                                    M.read (| module_ref |);
                                    M.read (| entry |)
                                  ]
                                |)
                              ]
                            |)
                          |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ0_0 :=
                                  M.SubPointer.get_struct_tuple_field (|
                                    γ,
                                    "core::ops::control_flow::ControlFlow::Break",
                                    0
                                  |) in
                                let residual := M.copy (| γ0_0 |) in
                                M.alloc (|
                                  M.never_to_any (|
                                    M.read (|
                                      M.return_ (|
                                        M.call_closure (|
                                          M.get_trait_method (|
                                            "core::ops::try_trait::FromResidual",
                                            Ty.apply
                                              (Ty.path "core::result::Result")
                                              [ Ty.tuple []; Ty.path "wasmi::Error" ],
                                            [
                                              Ty.apply
                                                (Ty.path "core::result::Result")
                                                [
                                                  Ty.path "core::convert::Infallible";
                                                  Ty.path "wasmi::Error"
                                                ]
                                            ],
                                            "from_residual",
                                            []
                                          |),
                                          [ M.read (| residual |) ]
                                        |)
                                      |)
                                    |)
                                  |)
                                |)));
                            fun γ =>
                              ltac:(M.monadic
                                (let γ0_0 :=
                                  M.SubPointer.get_struct_tuple_field (|
                                    γ,
                                    "core::ops::control_flow::ControlFlow::Continue",
                                    0
                                  |) in
                                let val := M.copy (| γ0_0 |) in
                                val))
                          ]
                        |) in
                      let type_idx_of_func :=
                        M.alloc (|
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                [ Ty.path "u32"; Ty.path "alloc::alloc::Global" ],
                              "new",
                              []
                            |),
                            []
                          |)
                        |) in
                      let _ :=
                        let zkmain :=
                          M.copy (|
                            M.match_operator (|
                              M.alloc (|
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "core::ops::try_trait::Try",
                                    Ty.apply
                                      (Ty.path "core::result::Result")
                                      [ Ty.path "wasmi::func::FuncRef"; Ty.path "wasmi::Error" ],
                                    [],
                                    "branch",
                                    []
                                  |),
                                  [
                                    M.call_closure (|
                                      M.get_associated_function (|
                                        Ty.path "wasmi::module::ModuleInstance",
                                        "func_by_name",
                                        []
                                      |),
                                      [
                                        M.call_closure (|
                                          M.get_trait_method (|
                                            "core::ops::deref::Deref",
                                            Ty.path "wasmi::module::ModuleRef",
                                            [],
                                            "deref",
                                            []
                                          |),
                                          [ M.read (| module_ref |) ]
                                        |);
                                        M.read (| entry |)
                                      ]
                                    |)
                                  ]
                                |)
                              |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ0_0 :=
                                      M.SubPointer.get_struct_tuple_field (|
                                        γ,
                                        "core::ops::control_flow::ControlFlow::Break",
                                        0
                                      |) in
                                    let residual := M.copy (| γ0_0 |) in
                                    M.alloc (|
                                      M.never_to_any (|
                                        M.read (|
                                          M.return_ (|
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "core::ops::try_trait::FromResidual",
                                                Ty.apply
                                                  (Ty.path "core::result::Result")
                                                  [ Ty.tuple []; Ty.path "wasmi::Error" ],
                                                [
                                                  Ty.apply
                                                    (Ty.path "core::result::Result")
                                                    [
                                                      Ty.path "core::convert::Infallible";
                                                      Ty.path "wasmi::Error"
                                                    ]
                                                ],
                                                "from_residual",
                                                []
                                              |),
                                              [ M.read (| residual |) ]
                                            |)
                                          |)
                                        |)
                                      |)
                                    |)));
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ0_0 :=
                                      M.SubPointer.get_struct_tuple_field (|
                                        γ,
                                        "core::ops::control_flow::ControlFlow::Continue",
                                        0
                                      |) in
                                    let val := M.copy (| γ0_0 |) in
                                    val))
                              ]
                            |)
                          |) in
                        let zkmain_idx :=
                          M.copy (|
                            M.match_operator (|
                              M.alloc (|
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.path "wasmi::func::FuncInstance",
                                    "as_internal",
                                    []
                                  |),
                                  [
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::ops::deref::Deref",
                                        Ty.path "wasmi::func::FuncRef",
                                        [],
                                        "deref",
                                        []
                                      |),
                                      [ zkmain ]
                                    |)
                                  ]
                                |)
                              |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ := M.read (| γ |) in
                                    let γ1_0 :=
                                      M.SubPointer.get_struct_record_field (|
                                        γ,
                                        "wasmi::func::FuncInstanceInternal::Internal",
                                        "index"
                                      |) in
                                    let index := M.alloc (| γ1_0 |) in
                                    index));
                                fun γ =>
                                  ltac:(M.monadic
                                    (M.alloc (|
                                      M.never_to_any (|
                                        M.call_closure (|
                                          M.get_function (| "core::panicking::panic", [] |),
                                          [
                                            M.read (|
                                              Value.String
                                                "internal error: entered unreachable code"
                                            |)
                                          ]
                                        |)
                                      |)
                                    |)))
                              ]
                            |)
                          |) in
                        let _ :=
                          M.alloc (|
                            M.call_closure (|
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  [
                                    Ty.path "specs::jtable::StaticFrameEntry";
                                    Ty.path "alloc::alloc::Global"
                                  ],
                                "push",
                                []
                              |),
                              [
                                M.SubPointer.get_struct_record_field (|
                                  M.read (| self |),
                                  "delphinus_zkwasm::runtime::monitor::plugins::table::TablePlugin",
                                  "static_frame_table"
                                |);
                                Value.StructRecord
                                  "specs::jtable::StaticFrameEntry"
                                  [
                                    ("enable", Value.Bool true);
                                    ("frame_id", Value.Integer 0);
                                    ("next_frame_id", Value.Integer 0);
                                    ("callee_fid",
                                      M.rust_cast (M.read (| M.read (| zkmain_idx |) |)));
                                    ("fid", Value.Integer 0);
                                    ("iid", Value.Integer 0)
                                  ]
                              ]
                            |)
                          |) in
                        M.match_operator (|
                          M.alloc (| Value.Tuple [] |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ :=
                                  M.alloc (|
                                    M.call_closure (|
                                      M.get_associated_function (|
                                        Ty.path "parity_wasm::elements::module::Module",
                                        "start_section",
                                        []
                                      |),
                                      [ M.read (| module |) ]
                                    |)
                                  |) in
                                let γ0_0 :=
                                  M.SubPointer.get_struct_tuple_field (|
                                    γ,
                                    "core::option::Option::Some",
                                    0
                                  |) in
                                let start_idx := M.copy (| γ0_0 |) in
                                let _ :=
                                  M.alloc (|
                                    M.call_closure (|
                                      M.get_associated_function (|
                                        Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          [
                                            Ty.path "specs::jtable::StaticFrameEntry";
                                            Ty.path "alloc::alloc::Global"
                                          ],
                                        "push",
                                        []
                                      |),
                                      [
                                        M.SubPointer.get_struct_record_field (|
                                          M.read (| self |),
                                          "delphinus_zkwasm::runtime::monitor::plugins::table::TablePlugin",
                                          "static_frame_table"
                                        |);
                                        Value.StructRecord
                                          "specs::jtable::StaticFrameEntry"
                                          [
                                            ("enable", Value.Bool true);
                                            ("frame_id", Value.Integer 0);
                                            ("next_frame_id", Value.Integer 0);
                                            ("callee_fid", M.read (| start_idx |));
                                            ("fid",
                                              M.rust_cast (M.read (| M.read (| zkmain_idx |) |)));
                                            ("iid", Value.Integer 0)
                                          ]
                                      ]
                                    |)
                                  |) in
                                let _ :=
                                  M.write (|
                                    M.SubPointer.get_struct_record_field (|
                                      M.read (| self |),
                                      "delphinus_zkwasm::runtime::monitor::plugins::table::TablePlugin",
                                      "start_fid"
                                    |),
                                    Value.StructTuple
                                      "core::option::Option::Some"
                                      [ M.read (| start_idx |) ]
                                  |) in
                                M.alloc (| Value.Tuple [] |)));
                            fun γ =>
                              ltac:(M.monadic
                                (let _ :=
                                  M.alloc (|
                                    M.call_closure (|
                                      M.get_associated_function (|
                                        Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          [
                                            Ty.path "specs::jtable::StaticFrameEntry";
                                            Ty.path "alloc::alloc::Global"
                                          ],
                                        "push",
                                        []
                                      |),
                                      [
                                        M.SubPointer.get_struct_record_field (|
                                          M.read (| self |),
                                          "delphinus_zkwasm::runtime::monitor::plugins::table::TablePlugin",
                                          "static_frame_table"
                                        |);
                                        Value.StructRecord
                                          "specs::jtable::StaticFrameEntry"
                                          [
                                            ("enable", Value.Bool false);
                                            ("frame_id", Value.Integer 0);
                                            ("next_frame_id", Value.Integer 0);
                                            ("callee_fid", Value.Integer 0);
                                            ("fid", Value.Integer 0);
                                            ("iid", Value.Integer 0)
                                          ]
                                      ]
                                    |)
                                  |) in
                                let _ :=
                                  M.write (|
                                    M.SubPointer.get_struct_record_field (|
                                      M.read (| self |),
                                      "delphinus_zkwasm::runtime::monitor::plugins::table::TablePlugin",
                                      "start_fid"
                                    |),
                                    Value.StructTuple
                                      "core::option::Option::Some"
                                      [ M.rust_cast (M.read (| M.read (| zkmain_idx |) |)) ]
                                  |) in
                                M.alloc (| Value.Tuple [] |)))
                          ]
                        |) in
                      let _ :=
                        let _ :=
                          M.use
                            (M.match_operator (|
                              M.alloc (|
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "core::iter::traits::collect::IntoIterator",
                                    Ty.apply
                                      (Ty.path "&")
                                      [
                                        Ty.apply
                                          (Ty.path "slice")
                                          [
                                            Ty.path
                                              "parity_wasm::elements::import_entry::ImportEntry"
                                          ]
                                      ],
                                    [],
                                    "into_iter",
                                    []
                                  |),
                                  [
                                    M.call_closure (|
                                      M.get_associated_function (|
                                        Ty.apply
                                          (Ty.path "core::option::Option")
                                          [
                                            Ty.apply
                                              (Ty.path "&")
                                              [
                                                Ty.apply
                                                  (Ty.path "slice")
                                                  [
                                                    Ty.path
                                                      "parity_wasm::elements::import_entry::ImportEntry"
                                                  ]
                                              ]
                                          ],
                                        "unwrap_or",
                                        []
                                      |),
                                      [
                                        M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.apply
                                              (Ty.path "core::option::Option")
                                              [
                                                Ty.apply
                                                  (Ty.path "&")
                                                  [
                                                    Ty.path
                                                      "parity_wasm::elements::section::ImportSection"
                                                  ]
                                              ],
                                            "map",
                                            [
                                              Ty.apply
                                                (Ty.path "&")
                                                [
                                                  Ty.apply
                                                    (Ty.path "slice")
                                                    [
                                                      Ty.path
                                                        "parity_wasm::elements::import_entry::ImportEntry"
                                                    ]
                                                ];
                                              Ty.function
                                                [
                                                  Ty.tuple
                                                    [
                                                      Ty.apply
                                                        (Ty.path "&")
                                                        [
                                                          Ty.path
                                                            "parity_wasm::elements::section::ImportSection"
                                                        ]
                                                    ]
                                                ]
                                                (Ty.apply
                                                  (Ty.path "&")
                                                  [
                                                    Ty.apply
                                                      (Ty.path "slice")
                                                      [
                                                        Ty.path
                                                          "parity_wasm::elements::import_entry::ImportEntry"
                                                      ]
                                                  ])
                                            ]
                                          |),
                                          [
                                            M.call_closure (|
                                              M.get_associated_function (|
                                                Ty.path "parity_wasm::elements::module::Module",
                                                "import_section",
                                                []
                                              |),
                                              [ M.read (| module |) ]
                                            |);
                                            M.closure
                                              (fun γ =>
                                                ltac:(M.monadic
                                                  match γ with
                                                  | [ α0 ] =>
                                                    M.match_operator (|
                                                      M.alloc (| α0 |),
                                                      [
                                                        fun γ =>
                                                          ltac:(M.monadic
                                                            (let s := M.copy (| γ |) in
                                                            M.call_closure (|
                                                              M.get_associated_function (|
                                                                Ty.path
                                                                  "parity_wasm::elements::section::ImportSection",
                                                                "entries",
                                                                []
                                                              |),
                                                              [ M.read (| s |) ]
                                                            |)))
                                                      ]
                                                    |)
                                                  | _ => M.impossible (||)
                                                  end))
                                          ]
                                        |);
                                        (* Unsize *)
                                        M.pointer_coercion (M.alloc (| Value.Array [] |))
                                      ]
                                    |)
                                  ]
                                |)
                              |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let iter := M.copy (| γ |) in
                                    M.loop (|
                                      ltac:(M.monadic
                                        (let _ :=
                                          M.match_operator (|
                                            M.alloc (|
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "core::iter::traits::iterator::Iterator",
                                                  Ty.apply
                                                    (Ty.path "core::slice::iter::Iter")
                                                    [
                                                      Ty.path
                                                        "parity_wasm::elements::import_entry::ImportEntry"
                                                    ],
                                                  [],
                                                  "next",
                                                  []
                                                |),
                                                [ iter ]
                                              |)
                                            |),
                                            [
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (M.alloc (|
                                                    M.never_to_any (| M.read (| M.break (||) |) |)
                                                  |)));
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let γ0_0 :=
                                                    M.SubPointer.get_struct_tuple_field (|
                                                      γ,
                                                      "core::option::Option::Some",
                                                      0
                                                    |) in
                                                  let import_entry := M.copy (| γ0_0 |) in
                                                  M.match_operator (|
                                                    M.call_closure (|
                                                      M.get_associated_function (|
                                                        Ty.path
                                                          "parity_wasm::elements::import_entry::ImportEntry",
                                                        "external",
                                                        []
                                                      |),
                                                      [ M.read (| import_entry |) ]
                                                    |),
                                                    [
                                                      fun γ =>
                                                        ltac:(M.monadic
                                                          (let γ0_0 :=
                                                            M.SubPointer.get_struct_tuple_field (|
                                                              γ,
                                                              "parity_wasm::elements::import_entry::External::Function",
                                                              0
                                                            |) in
                                                          let fn_ty_idx := M.copy (| γ0_0 |) in
                                                          let _ :=
                                                            M.alloc (|
                                                              M.call_closure (|
                                                                M.get_associated_function (|
                                                                  Ty.apply
                                                                    (Ty.path "alloc::vec::Vec")
                                                                    [
                                                                      Ty.path "u32";
                                                                      Ty.path "alloc::alloc::Global"
                                                                    ],
                                                                  "push",
                                                                  []
                                                                |),
                                                                [
                                                                  type_idx_of_func;
                                                                  M.read (| fn_ty_idx |)
                                                                ]
                                                              |)
                                                            |) in
                                                          M.alloc (| Value.Tuple [] |)));
                                                      fun γ =>
                                                        ltac:(M.monadic
                                                          (M.alloc (| Value.Tuple [] |)))
                                                    ]
                                                  |)))
                                            ]
                                          |) in
                                        M.alloc (| Value.Tuple [] |)))
                                    |)))
                              ]
                            |)) in
                        let funcs :=
                          M.alloc (|
                            M.call_closure (|
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path "core::option::Option")
                                  [
                                    Ty.apply
                                      (Ty.path "&")
                                      [
                                        Ty.apply
                                          (Ty.path "slice")
                                          [ Ty.path "parity_wasm::elements::func::Func" ]
                                      ]
                                  ],
                                "unwrap_or",
                                []
                              |),
                              [
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.apply
                                      (Ty.path "core::option::Option")
                                      [
                                        Ty.apply
                                          (Ty.path "&")
                                          [
                                            Ty.path
                                              "parity_wasm::elements::section::FunctionSection"
                                          ]
                                      ],
                                    "map",
                                    [
                                      Ty.apply
                                        (Ty.path "&")
                                        [
                                          Ty.apply
                                            (Ty.path "slice")
                                            [ Ty.path "parity_wasm::elements::func::Func" ]
                                        ];
                                      Ty.function
                                        [
                                          Ty.tuple
                                            [
                                              Ty.apply
                                                (Ty.path "&")
                                                [
                                                  Ty.path
                                                    "parity_wasm::elements::section::FunctionSection"
                                                ]
                                            ]
                                        ]
                                        (Ty.apply
                                          (Ty.path "&")
                                          [
                                            Ty.apply
                                              (Ty.path "slice")
                                              [ Ty.path "parity_wasm::elements::func::Func" ]
                                          ])
                                    ]
                                  |),
                                  [
                                    M.call_closure (|
                                      M.get_associated_function (|
                                        Ty.path "parity_wasm::elements::module::Module",
                                        "function_section",
                                        []
                                      |),
                                      [ M.read (| module |) ]
                                    |);
                                    M.closure
                                      (fun γ =>
                                        ltac:(M.monadic
                                          match γ with
                                          | [ α0 ] =>
                                            M.match_operator (|
                                              M.alloc (| α0 |),
                                              [
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (let fs := M.copy (| γ |) in
                                                    M.call_closure (|
                                                      M.get_associated_function (|
                                                        Ty.path
                                                          "parity_wasm::elements::section::FunctionSection",
                                                        "entries",
                                                        []
                                                      |),
                                                      [ M.read (| fs |) ]
                                                    |)))
                                              ]
                                            |)
                                          | _ => M.impossible (||)
                                          end))
                                  ]
                                |);
                                (* Unsize *) M.pointer_coercion (M.alloc (| Value.Array [] |))
                              ]
                            |)
                          |) in
                        M.use
                          (M.match_operator (|
                            M.alloc (|
                              M.call_closure (|
                                M.get_trait_method (|
                                  "core::iter::traits::collect::IntoIterator",
                                  Ty.apply
                                    (Ty.path "&")
                                    [
                                      Ty.apply
                                        (Ty.path "slice")
                                        [ Ty.path "parity_wasm::elements::func::Func" ]
                                    ],
                                  [],
                                  "into_iter",
                                  []
                                |),
                                [ M.read (| funcs |) ]
                              |)
                            |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let iter := M.copy (| γ |) in
                                  M.loop (|
                                    ltac:(M.monadic
                                      (let _ :=
                                        M.match_operator (|
                                          M.alloc (|
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "core::iter::traits::iterator::Iterator",
                                                Ty.apply
                                                  (Ty.path "core::slice::iter::Iter")
                                                  [ Ty.path "parity_wasm::elements::func::Func" ],
                                                [],
                                                "next",
                                                []
                                              |),
                                              [ iter ]
                                            |)
                                          |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (M.alloc (|
                                                  M.never_to_any (| M.read (| M.break (||) |) |)
                                                |)));
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let γ0_0 :=
                                                  M.SubPointer.get_struct_tuple_field (|
                                                    γ,
                                                    "core::option::Option::Some",
                                                    0
                                                  |) in
                                                let func := M.copy (| γ0_0 |) in
                                                M.alloc (|
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.apply
                                                        (Ty.path "alloc::vec::Vec")
                                                        [
                                                          Ty.path "u32";
                                                          Ty.path "alloc::alloc::Global"
                                                        ],
                                                      "push",
                                                      []
                                                    |),
                                                    [
                                                      type_idx_of_func;
                                                      M.call_closure (|
                                                        M.get_associated_function (|
                                                          Ty.path
                                                            "parity_wasm::elements::func::Func",
                                                          "type_ref",
                                                          []
                                                        |),
                                                        [ M.read (| func |) ]
                                                      |)
                                                    ]
                                                  |)
                                                |)))
                                          ]
                                        |) in
                                      M.alloc (| Value.Tuple [] |)))
                                  |)))
                            ]
                          |)) in
                      let _ :=
                        let fid := M.alloc (| Value.Integer 0 |) in
                        let _ :=
                          M.loop (|
                            ltac:(M.monadic
                              (M.match_operator (|
                                M.alloc (| Value.Tuple [] |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ :=
                                        M.alloc (|
                                          M.call_closure (|
                                            M.get_associated_function (|
                                              Ty.path "wasmi::module::ModuleInstance",
                                              "func_by_index",
                                              []
                                            |),
                                            [
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "core::ops::deref::Deref",
                                                  Ty.path "wasmi::module::ModuleRef",
                                                  [],
                                                  "deref",
                                                  []
                                                |),
                                                [ M.read (| module_ref |) ]
                                              |);
                                              M.read (| fid |)
                                            ]
                                          |)
                                        |) in
                                      let γ0_0 :=
                                        M.SubPointer.get_struct_tuple_field (|
                                          γ,
                                          "core::option::Option::Some",
                                          0
                                        |) in
                                      let func := M.alloc (| γ0_0 |) in
                                      let ftype :=
                                        M.copy (|
                                          M.match_operator (|
                                            M.call_closure (|
                                              M.get_associated_function (|
                                                Ty.path "wasmi::func::FuncInstance",
                                                "as_internal",
                                                []
                                              |),
                                              [
                                                M.call_closure (|
                                                  M.get_trait_method (|
                                                    "core::ops::deref::Deref",
                                                    Ty.path "wasmi::func::FuncRef",
                                                    [],
                                                    "deref",
                                                    []
                                                  |),
                                                  [ M.read (| func |) ]
                                                |)
                                              ]
                                            |),
                                            [
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (M.alloc (|
                                                    Value.StructTuple
                                                      "specs::types::FunctionType::WasmFunction"
                                                      []
                                                  |)));
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let γ0_0 :=
                                                    M.SubPointer.get_struct_record_field (|
                                                      γ,
                                                      "wasmi::func::FuncInstanceInternal::Host",
                                                      "host_func_index"
                                                    |) in
                                                  let host_func_index := M.copy (| γ0_0 |) in
                                                  M.match_operator (|
                                                    M.alloc (|
                                                      M.call_closure (|
                                                        M.get_associated_function (|
                                                          Ty.apply
                                                            (Ty.path "core::option::Option")
                                                            [
                                                              Ty.path
                                                                "specs::host_function::HostFunctionDesc"
                                                            ],
                                                          "unwrap",
                                                          []
                                                        |),
                                                        [
                                                          M.call_closure (|
                                                            M.get_associated_function (|
                                                              Ty.apply
                                                                (Ty.path "core::option::Option")
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path "&")
                                                                    [
                                                                      Ty.path
                                                                        "specs::host_function::HostFunctionDesc"
                                                                    ]
                                                                ],
                                                              "cloned",
                                                              []
                                                            |),
                                                            [
                                                              M.call_closure (|
                                                                M.get_associated_function (|
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "std::collections::hash::map::HashMap")
                                                                    [
                                                                      Ty.path "usize";
                                                                      Ty.path
                                                                        "specs::host_function::HostFunctionDesc";
                                                                      Ty.path
                                                                        "std::hash::random::RandomState"
                                                                    ],
                                                                  "get",
                                                                  [ Ty.path "usize" ]
                                                                |),
                                                                [
                                                                  M.SubPointer.get_struct_record_field (|
                                                                    M.read (| self |),
                                                                    "delphinus_zkwasm::runtime::monitor::plugins::table::TablePlugin",
                                                                    "host_function_desc"
                                                                  |);
                                                                  host_func_index
                                                                ]
                                                              |)
                                                            ]
                                                          |)
                                                        ]
                                                      |)
                                                    |),
                                                    [
                                                      fun γ =>
                                                        ltac:(M.monadic
                                                          (let γ0_0 :=
                                                            M.SubPointer.get_struct_record_field (|
                                                              γ,
                                                              "specs::host_function::HostFunctionDesc::Internal",
                                                              "name"
                                                            |) in
                                                          let γ0_1 :=
                                                            M.SubPointer.get_struct_record_field (|
                                                              γ,
                                                              "specs::host_function::HostFunctionDesc::Internal",
                                                              "op_index_in_plugin"
                                                            |) in
                                                          let γ0_2 :=
                                                            M.SubPointer.get_struct_record_field (|
                                                              γ,
                                                              "specs::host_function::HostFunctionDesc::Internal",
                                                              "plugin"
                                                            |) in
                                                          let name := M.copy (| γ0_0 |) in
                                                          let op_index_in_plugin :=
                                                            M.copy (| γ0_1 |) in
                                                          let plugin := M.copy (| γ0_2 |) in
                                                          M.alloc (|
                                                            Value.StructRecord
                                                              "specs::types::FunctionType::HostFunction"
                                                              [
                                                                ("plugin", M.read (| plugin |));
                                                                ("function_index",
                                                                  M.read (| host_func_index |));
                                                                ("function_name",
                                                                  M.read (| name |));
                                                                ("op_index_in_plugin",
                                                                  M.read (| op_index_in_plugin |))
                                                              ]
                                                          |)));
                                                      fun γ =>
                                                        ltac:(M.monadic
                                                          (let γ0_0 :=
                                                            M.SubPointer.get_struct_record_field (|
                                                              γ,
                                                              "specs::host_function::HostFunctionDesc::External",
                                                              "name"
                                                            |) in
                                                          let γ0_1 :=
                                                            M.SubPointer.get_struct_record_field (|
                                                              γ,
                                                              "specs::host_function::HostFunctionDesc::External",
                                                              "op"
                                                            |) in
                                                          let γ0_2 :=
                                                            M.SubPointer.get_struct_record_field (|
                                                              γ,
                                                              "specs::host_function::HostFunctionDesc::External",
                                                              "sig"
                                                            |) in
                                                          let name := M.copy (| γ0_0 |) in
                                                          let op := M.copy (| γ0_1 |) in
                                                          let sig := M.copy (| γ0_2 |) in
                                                          M.alloc (|
                                                            Value.StructRecord
                                                              "specs::types::FunctionType::HostFunctionExternal"
                                                              [
                                                                ("function_name",
                                                                  M.read (| name |));
                                                                ("op", M.read (| op |));
                                                                ("sig", M.read (| sig |))
                                                              ]
                                                          |)))
                                                    ]
                                                  |)))
                                            ]
                                          |)
                                        |) in
                                      let _ :=
                                        M.alloc (|
                                          M.call_closure (|
                                            M.get_associated_function (|
                                              Ty.apply
                                                (Ty.path "alloc::vec::Vec")
                                                [
                                                  Ty.path
                                                    "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::FuncDesc";
                                                  Ty.path "alloc::alloc::Global"
                                                ],
                                              "push",
                                              []
                                            |),
                                            [
                                              M.SubPointer.get_struct_record_field (|
                                                M.read (| self |),
                                                "delphinus_zkwasm::runtime::monitor::plugins::table::TablePlugin",
                                                "function_table"
                                              |);
                                              Value.StructRecord
                                                "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::FuncDesc"
                                                [
                                                  ("ftype", M.read (| ftype |));
                                                  ("signature",
                                                    M.call_closure (|
                                                      M.get_trait_method (|
                                                        "core::clone::Clone",
                                                        Ty.path "wasmi::types::Signature",
                                                        [],
                                                        "clone",
                                                        []
                                                      |),
                                                      [
                                                        M.call_closure (|
                                                          M.get_associated_function (|
                                                            Ty.path "wasmi::func::FuncInstance",
                                                            "signature",
                                                            []
                                                          |),
                                                          [
                                                            M.call_closure (|
                                                              M.get_trait_method (|
                                                                "core::ops::deref::Deref",
                                                                Ty.path "wasmi::func::FuncRef",
                                                                [],
                                                                "deref",
                                                                []
                                                              |),
                                                              [ M.read (| func |) ]
                                                            |)
                                                          ]
                                                        |)
                                                      ]
                                                    |))
                                                ]
                                            ]
                                          |)
                                        |) in
                                      let _ :=
                                        let β := fid in
                                        M.write (|
                                          β,
                                          BinOp.Panic.add (|
                                            Integer.U32,
                                            M.read (| β |),
                                            Value.Integer 1
                                          |)
                                        |) in
                                      M.alloc (| Value.Tuple [] |)));
                                  fun γ =>
                                    ltac:(M.monadic
                                      (M.alloc (|
                                        M.never_to_any (|
                                          M.read (|
                                            let _ :=
                                              M.alloc (|
                                                M.never_to_any (| M.read (| M.break (||) |) |)
                                              |) in
                                            M.alloc (| Value.Tuple [] |)
                                          |)
                                        |)
                                      |)))
                                ]
                              |)))
                          |) in
                        let fid := M.alloc (| Value.Integer 0 |) in
                        M.loop (|
                          ltac:(M.monadic
                            (M.match_operator (|
                              M.alloc (| Value.Tuple [] |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ :=
                                      M.alloc (|
                                        M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.path "wasmi::module::ModuleInstance",
                                            "func_by_index",
                                            []
                                          |),
                                          [
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "core::ops::deref::Deref",
                                                Ty.path "wasmi::module::ModuleRef",
                                                [],
                                                "deref",
                                                []
                                              |),
                                              [ M.read (| module_ref |) ]
                                            |);
                                            M.read (| fid |)
                                          ]
                                        |)
                                      |) in
                                    let γ0_0 :=
                                      M.SubPointer.get_struct_tuple_field (|
                                        γ,
                                        "core::option::Option::Some",
                                        0
                                      |) in
                                    let func := M.alloc (| γ0_0 |) in
                                    let function_mapping :=
                                      M.alloc (|
                                        M.closure
                                          (fun γ =>
                                            ltac:(M.monadic
                                              match γ with
                                              | [ α0 ] =>
                                                M.match_operator (|
                                                  M.alloc (| α0 |),
                                                  [
                                                    fun γ =>
                                                      ltac:(M.monadic
                                                        (let index := M.copy (| γ |) in
                                                        M.call_closure (|
                                                          M.get_associated_function (|
                                                            Ty.apply
                                                              (Ty.path "core::option::Option")
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "&")
                                                                  [
                                                                    Ty.path
                                                                      "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::FuncDesc"
                                                                  ]
                                                              ],
                                                            "unwrap",
                                                            []
                                                          |),
                                                          [
                                                            M.call_closure (|
                                                              M.get_associated_function (|
                                                                Ty.apply
                                                                  (Ty.path "slice")
                                                                  [
                                                                    Ty.path
                                                                      "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::FuncDesc"
                                                                  ],
                                                                "get",
                                                                [ Ty.path "usize" ]
                                                              |),
                                                              [
                                                                M.call_closure (|
                                                                  M.get_trait_method (|
                                                                    "core::ops::deref::Deref",
                                                                    Ty.apply
                                                                      (Ty.path "alloc::vec::Vec")
                                                                      [
                                                                        Ty.path
                                                                          "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::FuncDesc";
                                                                        Ty.path
                                                                          "alloc::alloc::Global"
                                                                      ],
                                                                    [],
                                                                    "deref",
                                                                    []
                                                                  |),
                                                                  [
                                                                    M.SubPointer.get_struct_record_field (|
                                                                      M.read (| self |),
                                                                      "delphinus_zkwasm::runtime::monitor::plugins::table::TablePlugin",
                                                                      "function_table"
                                                                    |)
                                                                  ]
                                                                |);
                                                                M.rust_cast (M.read (| index |))
                                                              ]
                                                            |)
                                                          ]
                                                        |)))
                                                  ]
                                                |)
                                              | _ => M.impossible (||)
                                              end))
                                      |) in
                                    let _ :=
                                      M.match_operator (|
                                        M.alloc (| Value.Tuple [] |),
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let γ :=
                                                M.use
                                                  (M.alloc (|
                                                    M.call_closure (|
                                                      M.get_associated_function (|
                                                        Ty.path
                                                          "delphinus_zkwasm::runtime::monitor::plugins::phantom::PhantomHelper",
                                                        "is_phantom_function",
                                                        []
                                                      |),
                                                      [
                                                        M.SubPointer.get_struct_record_field (|
                                                          M.read (| self |),
                                                          "delphinus_zkwasm::runtime::monitor::plugins::table::TablePlugin",
                                                          "phantom_helper"
                                                        |);
                                                        M.read (| fid |)
                                                      ]
                                                    |)
                                                  |)) in
                                              let _ :=
                                                M.is_constant_or_break_match (|
                                                  M.read (| γ |),
                                                  Value.Bool true
                                                |) in
                                              let wasm_input_func_idx :=
                                                M.alloc (|
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.path
                                                        "delphinus_zkwasm::runtime::monitor::plugins::phantom::PhantomHelper",
                                                      "wasm_input_func_idx",
                                                      []
                                                    |),
                                                    [
                                                      M.SubPointer.get_struct_record_field (|
                                                        M.read (| self |),
                                                        "delphinus_zkwasm::runtime::monitor::plugins::table::TablePlugin",
                                                        "phantom_helper"
                                                      |);
                                                      M.read (| module_ref |)
                                                    ]
                                                  |)
                                                |) in
                                              let instructions :=
                                                M.alloc (|
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.path
                                                        "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::PhantomFunction",
                                                      "build_phantom_function_instructions",
                                                      []
                                                    |),
                                                    [
                                                      M.call_closure (|
                                                        M.get_associated_function (|
                                                          Ty.path "wasmi::func::FuncInstance",
                                                          "signature",
                                                          []
                                                        |),
                                                        [
                                                          M.call_closure (|
                                                            M.get_trait_method (|
                                                              "core::ops::deref::Deref",
                                                              Ty.path "wasmi::func::FuncRef",
                                                              [],
                                                              "deref",
                                                              []
                                                            |),
                                                            [ M.read (| func |) ]
                                                          |)
                                                        ]
                                                      |);
                                                      M.read (| wasm_input_func_idx |)
                                                    ]
                                                  |)
                                                |) in
                                              M.use
                                                (M.match_operator (|
                                                  M.alloc (|
                                                    M.call_closure (|
                                                      M.get_trait_method (|
                                                        "core::iter::traits::collect::IntoIterator",
                                                        Ty.apply
                                                          (Ty.path
                                                            "core::iter::adapters::enumerate::Enumerate")
                                                          [
                                                            Ty.apply
                                                              (Ty.path
                                                                "alloc::vec::into_iter::IntoIter")
                                                              [
                                                                Ty.path "wasmi::isa::Instruction";
                                                                Ty.path "alloc::alloc::Global"
                                                              ]
                                                          ],
                                                        [],
                                                        "into_iter",
                                                        []
                                                      |),
                                                      [
                                                        M.call_closure (|
                                                          M.get_trait_method (|
                                                            "core::iter::traits::iterator::Iterator",
                                                            Ty.apply
                                                              (Ty.path
                                                                "alloc::vec::into_iter::IntoIter")
                                                              [
                                                                Ty.path "wasmi::isa::Instruction";
                                                                Ty.path "alloc::alloc::Global"
                                                              ],
                                                            [],
                                                            "enumerate",
                                                            []
                                                          |),
                                                          [
                                                            M.call_closure (|
                                                              M.get_trait_method (|
                                                                "core::iter::traits::collect::IntoIterator",
                                                                Ty.apply
                                                                  (Ty.path "alloc::vec::Vec")
                                                                  [
                                                                    Ty.path
                                                                      "wasmi::isa::Instruction";
                                                                    Ty.path "alloc::alloc::Global"
                                                                  ],
                                                                [],
                                                                "into_iter",
                                                                []
                                                              |),
                                                              [ M.read (| instructions |) ]
                                                            |)
                                                          ]
                                                        |)
                                                      ]
                                                    |)
                                                  |),
                                                  [
                                                    fun γ =>
                                                      ltac:(M.monadic
                                                        (let iter := M.copy (| γ |) in
                                                        M.loop (|
                                                          ltac:(M.monadic
                                                            (let _ :=
                                                              M.match_operator (|
                                                                M.alloc (|
                                                                  M.call_closure (|
                                                                    M.get_trait_method (|
                                                                      "core::iter::traits::iterator::Iterator",
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "core::iter::adapters::enumerate::Enumerate")
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "alloc::vec::into_iter::IntoIter")
                                                                            [
                                                                              Ty.path
                                                                                "wasmi::isa::Instruction";
                                                                              Ty.path
                                                                                "alloc::alloc::Global"
                                                                            ]
                                                                        ],
                                                                      [],
                                                                      "next",
                                                                      []
                                                                    |),
                                                                    [ iter ]
                                                                  |)
                                                                |),
                                                                [
                                                                  fun γ =>
                                                                    ltac:(M.monadic
                                                                      (M.alloc (|
                                                                        M.never_to_any (|
                                                                          M.read (| M.break (||) |)
                                                                        |)
                                                                      |)));
                                                                  fun γ =>
                                                                    ltac:(M.monadic
                                                                      (let γ0_0 :=
                                                                        M.SubPointer.get_struct_tuple_field (|
                                                                          γ,
                                                                          "core::option::Option::Some",
                                                                          0
                                                                        |) in
                                                                      let γ1_0 :=
                                                                        M.SubPointer.get_tuple_field (|
                                                                          γ0_0,
                                                                          0
                                                                        |) in
                                                                      let γ1_1 :=
                                                                        M.SubPointer.get_tuple_field (|
                                                                          γ0_0,
                                                                          1
                                                                        |) in
                                                                      let iid :=
                                                                        M.copy (| γ1_0 |) in
                                                                      let instruction :=
                                                                        M.copy (| γ1_1 |) in
                                                                      let _ :=
                                                                        M.alloc (|
                                                                          M.call_closure (|
                                                                            M.get_associated_function (|
                                                                              Ty.path
                                                                                "specs::itable::InstructionTableInternal",
                                                                              "push",
                                                                              []
                                                                            |),
                                                                            [
                                                                              M.SubPointer.get_struct_record_field (|
                                                                                M.read (| self |),
                                                                                "delphinus_zkwasm::runtime::monitor::plugins::table::TablePlugin",
                                                                                "itable"
                                                                              |);
                                                                              M.read (| fid |);
                                                                              M.rust_cast
                                                                                (M.read (| iid |));
                                                                              M.call_closure (|
                                                                                M.get_trait_method (|
                                                                                  "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::InstructionIntoOpcode",
                                                                                  Ty.path
                                                                                    "wasmi::isa::Instruction",
                                                                                  [],
                                                                                  "into_opcode",
                                                                                  [
                                                                                    Ty.function
                                                                                      [
                                                                                        Ty.tuple
                                                                                          [
                                                                                            Ty.path
                                                                                              "u32"
                                                                                          ]
                                                                                      ]
                                                                                      (Ty.apply
                                                                                        (Ty.path
                                                                                          "&")
                                                                                        [
                                                                                          Ty.path
                                                                                            "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::FuncDesc"
                                                                                        ])
                                                                                  ]
                                                                                |),
                                                                                [
                                                                                  M.read (|
                                                                                    instruction
                                                                                  |);
                                                                                  function_mapping
                                                                                ]
                                                                              |)
                                                                            ]
                                                                          |)
                                                                        |) in
                                                                      M.alloc (| Value.Tuple [] |)))
                                                                ]
                                                              |) in
                                                            M.alloc (| Value.Tuple [] |)))
                                                        |)))
                                                  ]
                                                |))));
                                          fun γ =>
                                            ltac:(M.monadic
                                              (M.match_operator (|
                                                M.alloc (| Value.Tuple [] |),
                                                [
                                                  fun γ =>
                                                    ltac:(M.monadic
                                                      (let γ :=
                                                        M.alloc (|
                                                          M.call_closure (|
                                                            M.get_associated_function (|
                                                              Ty.path "wasmi::func::FuncInstance",
                                                              "body",
                                                              []
                                                            |),
                                                            [
                                                              M.call_closure (|
                                                                M.get_trait_method (|
                                                                  "core::ops::deref::Deref",
                                                                  Ty.path "wasmi::func::FuncRef",
                                                                  [],
                                                                  "deref",
                                                                  []
                                                                |),
                                                                [ M.read (| func |) ]
                                                              |)
                                                            ]
                                                          |)
                                                        |) in
                                                      let γ0_0 :=
                                                        M.SubPointer.get_struct_tuple_field (|
                                                          γ,
                                                          "core::option::Option::Some",
                                                          0
                                                        |) in
                                                      let body := M.copy (| γ0_0 |) in
                                                      let code :=
                                                        M.alloc (|
                                                          M.SubPointer.get_struct_record_field (|
                                                            M.call_closure (|
                                                              M.get_trait_method (|
                                                                "core::ops::deref::Deref",
                                                                Ty.apply
                                                                  (Ty.path "alloc::rc::Rc")
                                                                  [
                                                                    Ty.path "wasmi::func::FuncBody";
                                                                    Ty.path "alloc::alloc::Global"
                                                                  ],
                                                                [],
                                                                "deref",
                                                                []
                                                              |),
                                                              [ body ]
                                                            |),
                                                            "wasmi::func::FuncBody",
                                                            "code"
                                                          |)
                                                        |) in
                                                      let iter :=
                                                        M.alloc (|
                                                          M.call_closure (|
                                                            M.get_associated_function (|
                                                              Ty.path "wasmi::isa::Instructions",
                                                              "iterate_from",
                                                              []
                                                            |),
                                                            [ M.read (| code |); Value.Integer 0 ]
                                                          |)
                                                        |) in
                                                      let iid :=
                                                        M.alloc (|
                                                          M.call_closure (|
                                                            M.get_associated_function (|
                                                              Ty.path "wasmi::isa::InstructionIter",
                                                              "position",
                                                              []
                                                            |),
                                                            [ iter ]
                                                          |)
                                                        |) in
                                                      M.loop (|
                                                        ltac:(M.monadic
                                                          (M.match_operator (|
                                                            M.alloc (| Value.Tuple [] |),
                                                            [
                                                              fun γ =>
                                                                ltac:(M.monadic
                                                                  (let γ :=
                                                                    M.alloc (|
                                                                      M.call_closure (|
                                                                        M.get_trait_method (|
                                                                          "core::iter::traits::iterator::Iterator",
                                                                          Ty.path
                                                                            "wasmi::isa::InstructionIter",
                                                                          [],
                                                                          "next",
                                                                          []
                                                                        |),
                                                                        [ iter ]
                                                                      |)
                                                                    |) in
                                                                  let γ0_0 :=
                                                                    M.SubPointer.get_struct_tuple_field (|
                                                                      γ,
                                                                      "core::option::Option::Some",
                                                                      0
                                                                    |) in
                                                                  let instr := M.copy (| γ0_0 |) in
                                                                  let _ :=
                                                                    M.alloc (|
                                                                      M.call_closure (|
                                                                        M.get_associated_function (|
                                                                          Ty.path
                                                                            "specs::itable::InstructionTableInternal",
                                                                          "push",
                                                                          []
                                                                        |),
                                                                        [
                                                                          M.SubPointer.get_struct_record_field (|
                                                                            M.read (| self |),
                                                                            "delphinus_zkwasm::runtime::monitor::plugins::table::TablePlugin",
                                                                            "itable"
                                                                          |);
                                                                          M.read (| fid |);
                                                                          M.read (| iid |);
                                                                          M.call_closure (|
                                                                            M.get_trait_method (|
                                                                              "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::InstructionIntoOpcode",
                                                                              Ty.path
                                                                                "wasmi::isa::Instruction",
                                                                              [],
                                                                              "into_opcode",
                                                                              [
                                                                                Ty.function
                                                                                  [
                                                                                    Ty.tuple
                                                                                      [
                                                                                        Ty.path
                                                                                          "u32"
                                                                                      ]
                                                                                  ]
                                                                                  (Ty.apply
                                                                                    (Ty.path "&")
                                                                                    [
                                                                                      Ty.path
                                                                                        "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::FuncDesc"
                                                                                    ])
                                                                              ]
                                                                            |),
                                                                            [
                                                                              M.read (| instr |);
                                                                              function_mapping
                                                                            ]
                                                                          |)
                                                                        ]
                                                                      |)
                                                                    |) in
                                                                  let _ :=
                                                                    M.write (|
                                                                      iid,
                                                                      M.call_closure (|
                                                                        M.get_associated_function (|
                                                                          Ty.path
                                                                            "wasmi::isa::InstructionIter",
                                                                          "position",
                                                                          []
                                                                        |),
                                                                        [ iter ]
                                                                      |)
                                                                    |) in
                                                                  M.alloc (| Value.Tuple [] |)));
                                                              fun γ =>
                                                                ltac:(M.monadic
                                                                  (M.alloc (|
                                                                    M.never_to_any (|
                                                                      M.read (|
                                                                        let _ :=
                                                                          M.alloc (|
                                                                            M.never_to_any (|
                                                                              M.read (|
                                                                                M.break (||)
                                                                              |)
                                                                            |)
                                                                          |) in
                                                                        M.alloc (| Value.Tuple [] |)
                                                                      |)
                                                                    |)
                                                                  |)))
                                                            ]
                                                          |)))
                                                      |)));
                                                  fun γ =>
                                                    ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                                ]
                                              |)))
                                        ]
                                      |) in
                                    let _ :=
                                      let β := fid in
                                      M.write (|
                                        β,
                                        BinOp.Panic.add (|
                                          Integer.U32,
                                          M.read (| β |),
                                          Value.Integer 1
                                        |)
                                      |) in
                                    M.alloc (| Value.Tuple [] |)));
                                fun γ =>
                                  ltac:(M.monadic
                                    (M.alloc (|
                                      M.never_to_any (|
                                        M.read (|
                                          let _ :=
                                            M.alloc (|
                                              M.never_to_any (| M.read (| M.break (||) |) |)
                                            |) in
                                          M.alloc (| Value.Tuple [] |)
                                        |)
                                      |)
                                    |)))
                              ]
                            |)))
                        |) in
                      let _ :=
                        M.use
                          (M.match_operator (|
                            M.alloc (|
                              M.call_closure (|
                                M.get_trait_method (|
                                  "core::iter::traits::collect::IntoIterator",
                                  Ty.apply
                                    (Ty.path "core::iter::adapters::enumerate::Enumerate")
                                    [
                                      Ty.apply
                                        (Ty.path "core::slice::iter::Iter")
                                        [ Ty.path "wasmi::global::GlobalRef" ]
                                    ],
                                  [],
                                  "into_iter",
                                  []
                                |),
                                [
                                  M.call_closure (|
                                    M.get_trait_method (|
                                      "core::iter::traits::iterator::Iterator",
                                      Ty.apply
                                        (Ty.path "core::slice::iter::Iter")
                                        [ Ty.path "wasmi::global::GlobalRef" ],
                                      [],
                                      "enumerate",
                                      []
                                    |),
                                    [
                                      M.call_closure (|
                                        M.get_associated_function (|
                                          Ty.apply
                                            (Ty.path "slice")
                                            [ Ty.path "wasmi::global::GlobalRef" ],
                                          "iter",
                                          []
                                        |),
                                        [
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "core::ops::deref::Deref",
                                              Ty.apply
                                                (Ty.path "alloc::vec::Vec")
                                                [
                                                  Ty.path "wasmi::global::GlobalRef";
                                                  Ty.path "alloc::alloc::Global"
                                                ],
                                              [],
                                              "deref",
                                              []
                                            |),
                                            [
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "core::ops::deref::Deref",
                                                  Ty.apply
                                                    (Ty.path "core::cell::Ref")
                                                    [
                                                      Ty.apply
                                                        (Ty.path "alloc::vec::Vec")
                                                        [
                                                          Ty.path "wasmi::global::GlobalRef";
                                                          Ty.path "alloc::alloc::Global"
                                                        ]
                                                    ],
                                                  [],
                                                  "deref",
                                                  []
                                                |),
                                                [
                                                  M.alloc (|
                                                    M.call_closure (|
                                                      M.get_associated_function (|
                                                        Ty.path "wasmi::module::ModuleInstance",
                                                        "globals",
                                                        []
                                                      |),
                                                      [
                                                        M.call_closure (|
                                                          M.get_trait_method (|
                                                            "core::ops::deref::Deref",
                                                            Ty.path "wasmi::module::ModuleRef",
                                                            [],
                                                            "deref",
                                                            []
                                                          |),
                                                          [ M.read (| module_ref |) ]
                                                        |)
                                                      ]
                                                    |)
                                                  |)
                                                ]
                                              |)
                                            ]
                                          |)
                                        ]
                                      |)
                                    ]
                                  |)
                                ]
                              |)
                            |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let iter := M.copy (| γ |) in
                                  M.loop (|
                                    ltac:(M.monadic
                                      (let _ :=
                                        M.match_operator (|
                                          M.alloc (|
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "core::iter::traits::iterator::Iterator",
                                                Ty.apply
                                                  (Ty.path
                                                    "core::iter::adapters::enumerate::Enumerate")
                                                  [
                                                    Ty.apply
                                                      (Ty.path "core::slice::iter::Iter")
                                                      [ Ty.path "wasmi::global::GlobalRef" ]
                                                  ],
                                                [],
                                                "next",
                                                []
                                              |),
                                              [ iter ]
                                            |)
                                          |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (M.alloc (|
                                                  M.never_to_any (| M.read (| M.break (||) |) |)
                                                |)));
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let γ0_0 :=
                                                  M.SubPointer.get_struct_tuple_field (|
                                                    γ,
                                                    "core::option::Option::Some",
                                                    0
                                                  |) in
                                                let γ1_0 :=
                                                  M.SubPointer.get_tuple_field (| γ0_0, 0 |) in
                                                let γ1_1 :=
                                                  M.SubPointer.get_tuple_field (| γ0_0, 1 |) in
                                                let global_idx := M.copy (| γ1_0 |) in
                                                let global_ref := M.copy (| γ1_1 |) in
                                                let _ :=
                                                  M.alloc (|
                                                    M.call_closure (|
                                                      M.get_associated_function (|
                                                        Ty.apply
                                                          (Ty.path "alloc::vec::Vec")
                                                          [
                                                            Ty.path
                                                              "specs::imtable::InitMemoryTableEntry";
                                                            Ty.path "alloc::alloc::Global"
                                                          ],
                                                        "push",
                                                        []
                                                      |),
                                                      [
                                                        M.SubPointer.get_struct_record_field (|
                                                          M.read (| self |),
                                                          "delphinus_zkwasm::runtime::monitor::plugins::table::TablePlugin",
                                                          "init_memory_table"
                                                        |);
                                                        Value.StructRecord
                                                          "specs::imtable::InitMemoryTableEntry"
                                                          [
                                                            ("is_mutable",
                                                              M.call_closure (|
                                                                M.get_associated_function (|
                                                                  Ty.path
                                                                    "wasmi::global::GlobalInstance",
                                                                  "is_mutable",
                                                                  []
                                                                |),
                                                                [
                                                                  M.call_closure (|
                                                                    M.get_trait_method (|
                                                                      "core::ops::deref::Deref",
                                                                      Ty.path
                                                                        "wasmi::global::GlobalRef",
                                                                      [],
                                                                      "deref",
                                                                      []
                                                                    |),
                                                                    [ M.read (| global_ref |) ]
                                                                  |)
                                                                ]
                                                              |));
                                                            ("ltype",
                                                              Value.StructTuple
                                                                "specs::mtable::LocationType::Global"
                                                                []);
                                                            ("offset",
                                                              M.rust_cast
                                                                (M.read (| global_idx |)));
                                                            ("vtype",
                                                              M.call_closure (|
                                                                M.get_trait_method (|
                                                                  "core::convert::Into",
                                                                  Ty.path
                                                                    "parity_wasm::elements::types::ValueType",
                                                                  [ Ty.path "specs::mtable::VarType"
                                                                  ],
                                                                  "into",
                                                                  []
                                                                |),
                                                                [
                                                                  M.call_closure (|
                                                                    M.get_associated_function (|
                                                                      Ty.path
                                                                        "wasmi_core::value::ValueType",
                                                                      "into_elements",
                                                                      []
                                                                    |),
                                                                    [
                                                                      M.call_closure (|
                                                                        M.get_associated_function (|
                                                                          Ty.path
                                                                            "wasmi::global::GlobalInstance",
                                                                          "value_type",
                                                                          []
                                                                        |),
                                                                        [
                                                                          M.call_closure (|
                                                                            M.get_trait_method (|
                                                                              "core::ops::deref::Deref",
                                                                              Ty.path
                                                                                "wasmi::global::GlobalRef",
                                                                              [],
                                                                              "deref",
                                                                              []
                                                                            |),
                                                                            [
                                                                              M.read (|
                                                                                global_ref
                                                                              |)
                                                                            ]
                                                                          |)
                                                                        ]
                                                                      |)
                                                                    ]
                                                                  |)
                                                                ]
                                                              |));
                                                            ("value",
                                                              M.call_closure (|
                                                                M.get_trait_method (|
                                                                  "core::convert::Into",
                                                                  Ty.path
                                                                    "wasmi_core::value::Value",
                                                                  [ Ty.path "u64" ],
                                                                  "into",
                                                                  []
                                                                |),
                                                                [
                                                                  M.call_closure (|
                                                                    M.get_associated_function (|
                                                                      Ty.path
                                                                        "wasmi::global::GlobalInstance",
                                                                      "get",
                                                                      []
                                                                    |),
                                                                    [
                                                                      M.call_closure (|
                                                                        M.get_trait_method (|
                                                                          "core::ops::deref::Deref",
                                                                          Ty.path
                                                                            "wasmi::global::GlobalRef",
                                                                          [],
                                                                          "deref",
                                                                          []
                                                                        |),
                                                                        [ M.read (| global_ref |) ]
                                                                      |)
                                                                    ]
                                                                  |)
                                                                ]
                                                              |));
                                                            ("eid", Value.Integer 0)
                                                          ]
                                                      ]
                                                    |)
                                                  |) in
                                                M.alloc (| Value.Tuple [] |)))
                                          ]
                                        |) in
                                      M.alloc (| Value.Tuple [] |)))
                                  |)))
                            ]
                          |)) in
                      let _ :=
                        M.match_operator (|
                          M.alloc (| Value.Tuple [] |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ :=
                                  M.alloc (|
                                    M.call_closure (|
                                      M.get_associated_function (|
                                        Ty.path "wasmi::module::ModuleInstance",
                                        "memory_by_index",
                                        []
                                      |),
                                      [
                                        M.call_closure (|
                                          M.get_trait_method (|
                                            "core::ops::deref::Deref",
                                            Ty.path "wasmi::module::ModuleRef",
                                            [],
                                            "deref",
                                            []
                                          |),
                                          [ M.read (| module_ref |) ]
                                        |);
                                        M.read (|
                                          M.get_constant (|
                                            "delphinus_zkwasm::runtime::monitor::plugins::table::DEFAULT_MEMORY_INDEX"
                                          |)
                                        |)
                                      ]
                                    |)
                                  |) in
                                let γ0_0 :=
                                  M.SubPointer.get_struct_tuple_field (|
                                    γ,
                                    "core::option::Option::Some",
                                    0
                                  |) in
                                let memory_ref := M.copy (| γ0_0 |) in
                                let init_memory_pages :=
                                  M.alloc (|
                                    M.rust_cast
                                      (M.read (|
                                        M.SubPointer.get_struct_tuple_field (|
                                          M.alloc (|
                                            M.call_closure (|
                                              M.get_associated_function (|
                                                Ty.path "wasmi::memory::MemoryInstance",
                                                "initial",
                                                []
                                              |),
                                              [
                                                M.call_closure (|
                                                  M.get_trait_method (|
                                                    "core::ops::deref::Deref",
                                                    Ty.path "wasmi::memory::MemoryRef",
                                                    [],
                                                    "deref",
                                                    []
                                                  |),
                                                  [ memory_ref ]
                                                |)
                                              ]
                                            |)
                                          |),
                                          "memory_units::wasm32::Pages",
                                          0
                                        |)
                                      |))
                                  |) in
                                let maximal_memory_pages :=
                                  M.alloc (|
                                    M.call_closure (|
                                      M.get_associated_function (|
                                        Ty.apply
                                          (Ty.path "core::option::Option")
                                          [ Ty.path "memory_units::wasm32::Pages" ],
                                        "map_or",
                                        [
                                          Ty.path "u32";
                                          Ty.function
                                            [ Ty.tuple [ Ty.path "memory_units::wasm32::Pages" ] ]
                                            (Ty.path "u32")
                                        ]
                                      |),
                                      [
                                        M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.path "wasmi::memory::MemoryInstance",
                                            "maximum",
                                            []
                                          |),
                                          [
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "core::ops::deref::Deref",
                                                Ty.path "wasmi::memory::MemoryRef",
                                                [],
                                                "deref",
                                                []
                                              |),
                                              [ memory_ref ]
                                            |)
                                          ]
                                        |);
                                        Value.Integer 65536;
                                        M.closure
                                          (fun γ =>
                                            ltac:(M.monadic
                                              match γ with
                                              | [ α0 ] =>
                                                M.match_operator (|
                                                  M.alloc (| α0 |),
                                                  [
                                                    fun γ =>
                                                      ltac:(M.monadic
                                                        (let max := M.copy (| γ |) in
                                                        M.rust_cast
                                                          (M.read (|
                                                            M.SubPointer.get_struct_tuple_field (|
                                                              max,
                                                              "memory_units::wasm32::Pages",
                                                              0
                                                            |)
                                                          |))))
                                                  ]
                                                |)
                                              | _ => M.impossible (||)
                                              end))
                                      ]
                                    |)
                                  |) in
                                let _ :=
                                  M.write (|
                                    M.SubPointer.get_struct_record_field (|
                                      M.read (| self |),
                                      "delphinus_zkwasm::runtime::monitor::plugins::table::TablePlugin",
                                      "configure_table"
                                    |),
                                    Value.StructRecord
                                      "specs::configure_table::ConfigureTable"
                                      [
                                        ("init_memory_pages", M.read (| init_memory_pages |));
                                        ("maximal_memory_pages", M.read (| maximal_memory_pages |))
                                      ]
                                  |) in
                                M.use
                                  (M.match_operator (|
                                    M.alloc (|
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "core::iter::traits::collect::IntoIterator",
                                          Ty.apply
                                            (Ty.path "core::ops::range::Range")
                                            [ Ty.path "u32" ],
                                          [],
                                          "into_iter",
                                          []
                                        |),
                                        [
                                          Value.StructRecord
                                            "core::ops::range::Range"
                                            [
                                              ("start", Value.Integer 0);
                                              ("end_",
                                                BinOp.Panic.mul (|
                                                  Integer.U32,
                                                  M.read (| init_memory_pages |),
                                                  M.read (|
                                                    M.get_constant (|
                                                      "delphinus_zkwasm::runtime::monitor::plugins::table::register_module::ENTRIES"
                                                    |)
                                                  |)
                                                |))
                                            ]
                                        ]
                                      |)
                                    |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let iter := M.copy (| γ |) in
                                          M.loop (|
                                            ltac:(M.monadic
                                              (let _ :=
                                                M.match_operator (|
                                                  M.alloc (|
                                                    M.call_closure (|
                                                      M.get_trait_method (|
                                                        "core::iter::traits::iterator::Iterator",
                                                        Ty.apply
                                                          (Ty.path "core::ops::range::Range")
                                                          [ Ty.path "u32" ],
                                                        [],
                                                        "next",
                                                        []
                                                      |),
                                                      [ iter ]
                                                    |)
                                                  |),
                                                  [
                                                    fun γ =>
                                                      ltac:(M.monadic
                                                        (M.alloc (|
                                                          M.never_to_any (|
                                                            M.read (| M.break (||) |)
                                                          |)
                                                        |)));
                                                    fun γ =>
                                                      ltac:(M.monadic
                                                        (let γ0_0 :=
                                                          M.SubPointer.get_struct_tuple_field (|
                                                            γ,
                                                            "core::option::Option::Some",
                                                            0
                                                          |) in
                                                        let offset := M.copy (| γ0_0 |) in
                                                        let buf :=
                                                          M.alloc (|
                                                            repeat (Value.Integer 0) 8
                                                          |) in
                                                        let _ :=
                                                          M.match_operator (|
                                                            M.alloc (|
                                                              M.call_closure (|
                                                                M.get_trait_method (|
                                                                  "core::ops::try_trait::Try",
                                                                  Ty.apply
                                                                    (Ty.path "core::result::Result")
                                                                    [
                                                                      Ty.tuple [];
                                                                      Ty.path "wasmi::Error"
                                                                    ],
                                                                  [],
                                                                  "branch",
                                                                  []
                                                                |),
                                                                [
                                                                  M.call_closure (|
                                                                    M.get_associated_function (|
                                                                      Ty.path
                                                                        "wasmi::memory::MemoryInstance",
                                                                      "get_into",
                                                                      []
                                                                    |),
                                                                    [
                                                                      M.call_closure (|
                                                                        M.get_trait_method (|
                                                                          "core::ops::deref::Deref",
                                                                          Ty.path
                                                                            "wasmi::memory::MemoryRef",
                                                                          [],
                                                                          "deref",
                                                                          []
                                                                        |),
                                                                        [ memory_ref ]
                                                                      |);
                                                                      BinOp.Panic.mul (|
                                                                        Integer.U32,
                                                                        M.read (| offset |),
                                                                        Value.Integer 8
                                                                      |);
                                                                      (* Unsize *)
                                                                      M.pointer_coercion buf
                                                                    ]
                                                                  |)
                                                                ]
                                                              |)
                                                            |),
                                                            [
                                                              fun γ =>
                                                                ltac:(M.monadic
                                                                  (let γ0_0 :=
                                                                    M.SubPointer.get_struct_tuple_field (|
                                                                      γ,
                                                                      "core::ops::control_flow::ControlFlow::Break",
                                                                      0
                                                                    |) in
                                                                  let residual :=
                                                                    M.copy (| γ0_0 |) in
                                                                  M.alloc (|
                                                                    M.never_to_any (|
                                                                      M.read (|
                                                                        M.return_ (|
                                                                          M.call_closure (|
                                                                            M.get_trait_method (|
                                                                              "core::ops::try_trait::FromResidual",
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "core::result::Result")
                                                                                [
                                                                                  Ty.tuple [];
                                                                                  Ty.path
                                                                                    "wasmi::Error"
                                                                                ],
                                                                              [
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "core::result::Result")
                                                                                  [
                                                                                    Ty.path
                                                                                      "core::convert::Infallible";
                                                                                    Ty.path
                                                                                      "wasmi::Error"
                                                                                  ]
                                                                              ],
                                                                              "from_residual",
                                                                              []
                                                                            |),
                                                                            [ M.read (| residual |)
                                                                            ]
                                                                          |)
                                                                        |)
                                                                      |)
                                                                    |)
                                                                  |)));
                                                              fun γ =>
                                                                ltac:(M.monadic
                                                                  (let γ0_0 :=
                                                                    M.SubPointer.get_struct_tuple_field (|
                                                                      γ,
                                                                      "core::ops::control_flow::ControlFlow::Continue",
                                                                      0
                                                                    |) in
                                                                  let val := M.copy (| γ0_0 |) in
                                                                  val))
                                                            ]
                                                          |) in
                                                        let value :=
                                                          M.alloc (|
                                                            M.call_closure (|
                                                              M.get_associated_function (|
                                                                Ty.path "u64",
                                                                "from_le_bytes",
                                                                []
                                                              |),
                                                              [ M.read (| buf |) ]
                                                            |)
                                                          |) in
                                                        M.match_operator (|
                                                          M.alloc (| Value.Tuple [] |),
                                                          [
                                                            fun γ =>
                                                              ltac:(M.monadic
                                                                (let γ :=
                                                                  M.use
                                                                    (M.alloc (|
                                                                      BinOp.Pure.ne
                                                                        (M.read (| value |))
                                                                        (Value.Integer 0)
                                                                    |)) in
                                                                let _ :=
                                                                  M.is_constant_or_break_match (|
                                                                    M.read (| γ |),
                                                                    Value.Bool true
                                                                  |) in
                                                                let _ :=
                                                                  M.alloc (|
                                                                    M.call_closure (|
                                                                      M.get_associated_function (|
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "alloc::vec::Vec")
                                                                          [
                                                                            Ty.path
                                                                              "specs::imtable::InitMemoryTableEntry";
                                                                            Ty.path
                                                                              "alloc::alloc::Global"
                                                                          ],
                                                                        "push",
                                                                        []
                                                                      |),
                                                                      [
                                                                        M.SubPointer.get_struct_record_field (|
                                                                          M.read (| self |),
                                                                          "delphinus_zkwasm::runtime::monitor::plugins::table::TablePlugin",
                                                                          "init_memory_table"
                                                                        |);
                                                                        Value.StructRecord
                                                                          "specs::imtable::InitMemoryTableEntry"
                                                                          [
                                                                            ("is_mutable",
                                                                              Value.Bool true);
                                                                            ("ltype",
                                                                              Value.StructTuple
                                                                                "specs::mtable::LocationType::Heap"
                                                                                []);
                                                                            ("offset",
                                                                              M.read (| offset |));
                                                                            ("vtype",
                                                                              Value.StructTuple
                                                                                "specs::mtable::VarType::I64"
                                                                                []);
                                                                            ("value",
                                                                              M.read (| value |));
                                                                            ("eid", Value.Integer 0)
                                                                          ]
                                                                      ]
                                                                    |)
                                                                  |) in
                                                                M.alloc (| Value.Tuple [] |)));
                                                            fun γ =>
                                                              ltac:(M.monadic
                                                                (M.alloc (| Value.Tuple [] |)))
                                                          ]
                                                        |)))
                                                  ]
                                                |) in
                                              M.alloc (| Value.Tuple [] |)))
                                          |)))
                                    ]
                                  |))));
                            fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                          ]
                        |) in
                      let _ :=
                        M.use
                          (M.match_operator (|
                            M.alloc (|
                              M.call_closure (|
                                M.get_trait_method (|
                                  "core::iter::traits::collect::IntoIterator",
                                  Ty.apply
                                    (Ty.path "&")
                                    [
                                      Ty.apply
                                        (Ty.path "slice")
                                        [ Ty.path "parity_wasm::elements::segment::ElementSegment" ]
                                    ],
                                  [],
                                  "into_iter",
                                  []
                                |),
                                [
                                  M.call_closure (|
                                    M.get_associated_function (|
                                      Ty.apply
                                        (Ty.path "core::option::Option")
                                        [
                                          Ty.apply
                                            (Ty.path "&")
                                            [
                                              Ty.apply
                                                (Ty.path "slice")
                                                [
                                                  Ty.path
                                                    "parity_wasm::elements::segment::ElementSegment"
                                                ]
                                            ]
                                        ],
                                      "unwrap_or",
                                      []
                                    |),
                                    [
                                      M.call_closure (|
                                        M.get_associated_function (|
                                          Ty.apply
                                            (Ty.path "core::option::Option")
                                            [
                                              Ty.apply
                                                (Ty.path "&")
                                                [
                                                  Ty.path
                                                    "parity_wasm::elements::section::ElementSection"
                                                ]
                                            ],
                                          "map",
                                          [
                                            Ty.apply
                                              (Ty.path "&")
                                              [
                                                Ty.apply
                                                  (Ty.path "slice")
                                                  [
                                                    Ty.path
                                                      "parity_wasm::elements::segment::ElementSegment"
                                                  ]
                                              ];
                                            Ty.function
                                              [
                                                Ty.tuple
                                                  [
                                                    Ty.apply
                                                      (Ty.path "&")
                                                      [
                                                        Ty.path
                                                          "parity_wasm::elements::section::ElementSection"
                                                      ]
                                                  ]
                                              ]
                                              (Ty.apply
                                                (Ty.path "&")
                                                [
                                                  Ty.apply
                                                    (Ty.path "slice")
                                                    [
                                                      Ty.path
                                                        "parity_wasm::elements::segment::ElementSegment"
                                                    ]
                                                ])
                                          ]
                                        |),
                                        [
                                          M.call_closure (|
                                            M.get_associated_function (|
                                              Ty.path "parity_wasm::elements::module::Module",
                                              "elements_section",
                                              []
                                            |),
                                            [ M.read (| module |) ]
                                          |);
                                          M.closure
                                            (fun γ =>
                                              ltac:(M.monadic
                                                match γ with
                                                | [ α0 ] =>
                                                  M.match_operator (|
                                                    M.alloc (| α0 |),
                                                    [
                                                      fun γ =>
                                                        ltac:(M.monadic
                                                          (let es := M.copy (| γ |) in
                                                          M.call_closure (|
                                                            M.get_associated_function (|
                                                              Ty.path
                                                                "parity_wasm::elements::section::ElementSection",
                                                              "entries",
                                                              []
                                                            |),
                                                            [ M.read (| es |) ]
                                                          |)))
                                                    ]
                                                  |)
                                                | _ => M.impossible (||)
                                                end))
                                        ]
                                      |);
                                      (* Unsize *) M.pointer_coercion (M.alloc (| Value.Array [] |))
                                    ]
                                  |)
                                ]
                              |)
                            |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let iter := M.copy (| γ |) in
                                  M.loop (|
                                    ltac:(M.monadic
                                      (let _ :=
                                        M.match_operator (|
                                          M.alloc (|
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "core::iter::traits::iterator::Iterator",
                                                Ty.apply
                                                  (Ty.path "core::slice::iter::Iter")
                                                  [
                                                    Ty.path
                                                      "parity_wasm::elements::segment::ElementSegment"
                                                  ],
                                                [],
                                                "next",
                                                []
                                              |),
                                              [ iter ]
                                            |)
                                          |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (M.alloc (|
                                                  M.never_to_any (| M.read (| M.break (||) |) |)
                                                |)));
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let γ0_0 :=
                                                  M.SubPointer.get_struct_tuple_field (|
                                                    γ,
                                                    "core::option::Option::Some",
                                                    0
                                                  |) in
                                                let element_segment := M.copy (| γ0_0 |) in
                                                let offset :=
                                                  M.alloc (|
                                                    M.call_closure (|
                                                      M.get_associated_function (|
                                                        Ty.apply
                                                          (Ty.path "core::option::Option")
                                                          [
                                                            Ty.apply
                                                              (Ty.path "&")
                                                              [
                                                                Ty.path
                                                                  "parity_wasm::elements::ops::InitExpr"
                                                              ]
                                                          ],
                                                        "expect",
                                                        []
                                                      |),
                                                      [
                                                        M.call_closure (|
                                                          M.get_associated_function (|
                                                            Ty.apply
                                                              (Ty.path "core::option::Option")
                                                              [
                                                                Ty.path
                                                                  "parity_wasm::elements::ops::InitExpr"
                                                              ],
                                                            "as_ref",
                                                            []
                                                          |),
                                                          [
                                                            M.call_closure (|
                                                              M.get_associated_function (|
                                                                Ty.path
                                                                  "parity_wasm::elements::segment::ElementSegment",
                                                                "offset",
                                                                []
                                                              |),
                                                              [ M.read (| element_segment |) ]
                                                            |)
                                                          ]
                                                        |);
                                                        M.read (|
                                                          Value.String
                                                            "passive segments are rejected due to validation"
                                                        |)
                                                      ]
                                                    |)
                                                  |) in
                                                let offset_val :=
                                                  M.copy (|
                                                    M.match_operator (|
                                                      M.alloc (|
                                                        M.call_closure (|
                                                          M.get_function (|
                                                            "wasmi::module::eval_init_expr",
                                                            []
                                                          |),
                                                          [
                                                            M.read (| offset |);
                                                            M.call_closure (|
                                                              M.get_trait_method (|
                                                                "core::ops::deref::Deref",
                                                                Ty.path "wasmi::module::ModuleRef",
                                                                [],
                                                                "deref",
                                                                []
                                                              |),
                                                              [ M.read (| module_ref |) ]
                                                            |)
                                                          ]
                                                        |)
                                                      |),
                                                      [
                                                        fun γ =>
                                                          ltac:(M.monadic
                                                            (let γ0_0 :=
                                                              M.SubPointer.get_struct_tuple_field (|
                                                                γ,
                                                                "wasmi_core::value::Value::I32",
                                                                0
                                                              |) in
                                                            let v := M.copy (| γ0_0 |) in
                                                            M.alloc (|
                                                              M.rust_cast (M.read (| v |))
                                                            |)));
                                                        fun γ =>
                                                          ltac:(M.monadic
                                                            (M.alloc (|
                                                              M.never_to_any (|
                                                                M.call_closure (|
                                                                  M.get_function (|
                                                                    "core::panicking::panic_fmt",
                                                                    []
                                                                  |),
                                                                  [
                                                                    M.call_closure (|
                                                                      M.get_associated_function (|
                                                                        Ty.path
                                                                          "core::fmt::Arguments",
                                                                        "new_const",
                                                                        []
                                                                      |),
                                                                      [
                                                                        (* Unsize *)
                                                                        M.pointer_coercion
                                                                          (M.alloc (|
                                                                            Value.Array
                                                                              [
                                                                                M.read (|
                                                                                  Value.String
                                                                                    "Due to validation elem segment offset should evaluate to i32"
                                                                                |)
                                                                              ]
                                                                          |))
                                                                      ]
                                                                    |)
                                                                  ]
                                                                |)
                                                              |)
                                                            |)))
                                                      ]
                                                    |)
                                                  |) in
                                                let table_inst :=
                                                  M.alloc (|
                                                    M.call_closure (|
                                                      M.get_associated_function (|
                                                        Ty.apply
                                                          (Ty.path "core::option::Option")
                                                          [ Ty.path "wasmi::table::TableRef" ],
                                                        "expect",
                                                        []
                                                      |),
                                                      [
                                                        M.call_closure (|
                                                          M.get_associated_function (|
                                                            Ty.path "wasmi::module::ModuleInstance",
                                                            "table_by_index",
                                                            []
                                                          |),
                                                          [
                                                            M.call_closure (|
                                                              M.get_trait_method (|
                                                                "core::ops::deref::Deref",
                                                                Ty.path "wasmi::module::ModuleRef",
                                                                [],
                                                                "deref",
                                                                []
                                                              |),
                                                              [ M.read (| module_ref |) ]
                                                            |);
                                                            M.read (|
                                                              M.get_constant (|
                                                                "delphinus_zkwasm::runtime::monitor::plugins::table::DEFAULT_TABLE_INDEX"
                                                              |)
                                                            |)
                                                          ]
                                                        |);
                                                        M.read (|
                                                          Value.String
                                                            "Due to validation default table should exists"
                                                        |)
                                                      ]
                                                    |)
                                                  |) in
                                                let _ :=
                                                  M.match_operator (|
                                                    M.alloc (| Value.Tuple [] |),
                                                    [
                                                      fun γ =>
                                                        ltac:(M.monadic
                                                          (let γ :=
                                                            M.use
                                                              (M.alloc (|
                                                                BinOp.Pure.gt
                                                                  (BinOp.Panic.add (|
                                                                    Integer.U64,
                                                                    M.rust_cast
                                                                      (M.read (| offset_val |)),
                                                                    M.rust_cast
                                                                      (M.call_closure (|
                                                                        M.get_associated_function (|
                                                                          Ty.apply
                                                                            (Ty.path "slice")
                                                                            [ Ty.path "u32" ],
                                                                          "len",
                                                                          []
                                                                        |),
                                                                        [
                                                                          M.call_closure (|
                                                                            M.get_associated_function (|
                                                                              Ty.path
                                                                                "parity_wasm::elements::segment::ElementSegment",
                                                                              "members",
                                                                              []
                                                                            |),
                                                                            [
                                                                              M.read (|
                                                                                element_segment
                                                                              |)
                                                                            ]
                                                                          |)
                                                                        ]
                                                                      |))
                                                                  |))
                                                                  (M.rust_cast
                                                                    (M.call_closure (|
                                                                      M.get_associated_function (|
                                                                        Ty.path
                                                                          "wasmi::table::TableInstance",
                                                                        "current_size",
                                                                        []
                                                                      |),
                                                                      [
                                                                        M.call_closure (|
                                                                          M.get_trait_method (|
                                                                            "core::ops::deref::Deref",
                                                                            Ty.path
                                                                              "wasmi::table::TableRef",
                                                                            [],
                                                                            "deref",
                                                                            []
                                                                          |),
                                                                          [ table_inst ]
                                                                        |)
                                                                      ]
                                                                    |)))
                                                              |)) in
                                                          let _ :=
                                                            M.is_constant_or_break_match (|
                                                              M.read (| γ |),
                                                              Value.Bool true
                                                            |) in
                                                          M.alloc (|
                                                            M.never_to_any (|
                                                              M.read (|
                                                                M.return_ (|
                                                                  Value.StructTuple
                                                                    "core::result::Result::Err"
                                                                    [
                                                                      Value.StructTuple
                                                                        "wasmi::Error::Instantiation"
                                                                        [
                                                                          M.call_closure (|
                                                                            M.get_trait_method (|
                                                                              "alloc::string::ToString",
                                                                              Ty.path "str",
                                                                              [],
                                                                              "to_string",
                                                                              []
                                                                            |),
                                                                            [
                                                                              M.read (|
                                                                                Value.String
                                                                                  "elements segment does not fit"
                                                                              |)
                                                                            ]
                                                                          |)
                                                                        ]
                                                                    ]
                                                                |)
                                                              |)
                                                            |)
                                                          |)));
                                                      fun γ =>
                                                        ltac:(M.monadic
                                                          (M.alloc (| Value.Tuple [] |)))
                                                    ]
                                                  |) in
                                                M.use
                                                  (M.match_operator (|
                                                    M.alloc (|
                                                      M.call_closure (|
                                                        M.get_trait_method (|
                                                          "core::iter::traits::collect::IntoIterator",
                                                          Ty.apply
                                                            (Ty.path
                                                              "core::iter::adapters::enumerate::Enumerate")
                                                            [
                                                              Ty.apply
                                                                (Ty.path "core::slice::iter::Iter")
                                                                [ Ty.path "u32" ]
                                                            ],
                                                          [],
                                                          "into_iter",
                                                          []
                                                        |),
                                                        [
                                                          M.call_closure (|
                                                            M.get_trait_method (|
                                                              "core::iter::traits::iterator::Iterator",
                                                              Ty.apply
                                                                (Ty.path "core::slice::iter::Iter")
                                                                [ Ty.path "u32" ],
                                                              [],
                                                              "enumerate",
                                                              []
                                                            |),
                                                            [
                                                              M.call_closure (|
                                                                M.get_associated_function (|
                                                                  Ty.apply
                                                                    (Ty.path "slice")
                                                                    [ Ty.path "u32" ],
                                                                  "iter",
                                                                  []
                                                                |),
                                                                [
                                                                  M.call_closure (|
                                                                    M.get_associated_function (|
                                                                      Ty.path
                                                                        "parity_wasm::elements::segment::ElementSegment",
                                                                      "members",
                                                                      []
                                                                    |),
                                                                    [ M.read (| element_segment |) ]
                                                                  |)
                                                                ]
                                                              |)
                                                            ]
                                                          |)
                                                        ]
                                                      |)
                                                    |),
                                                    [
                                                      fun γ =>
                                                        ltac:(M.monadic
                                                          (let iter := M.copy (| γ |) in
                                                          M.loop (|
                                                            ltac:(M.monadic
                                                              (let _ :=
                                                                M.match_operator (|
                                                                  M.alloc (|
                                                                    M.call_closure (|
                                                                      M.get_trait_method (|
                                                                        "core::iter::traits::iterator::Iterator",
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "core::iter::adapters::enumerate::Enumerate")
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "core::slice::iter::Iter")
                                                                              [ Ty.path "u32" ]
                                                                          ],
                                                                        [],
                                                                        "next",
                                                                        []
                                                                      |),
                                                                      [ iter ]
                                                                    |)
                                                                  |),
                                                                  [
                                                                    fun γ =>
                                                                      ltac:(M.monadic
                                                                        (M.alloc (|
                                                                          M.never_to_any (|
                                                                            M.read (|
                                                                              M.break (||)
                                                                            |)
                                                                          |)
                                                                        |)));
                                                                    fun γ =>
                                                                      ltac:(M.monadic
                                                                        (let γ0_0 :=
                                                                          M.SubPointer.get_struct_tuple_field (|
                                                                            γ,
                                                                            "core::option::Option::Some",
                                                                            0
                                                                          |) in
                                                                        let γ1_0 :=
                                                                          M.SubPointer.get_tuple_field (|
                                                                            γ0_0,
                                                                            0
                                                                          |) in
                                                                        let γ1_1 :=
                                                                          M.SubPointer.get_tuple_field (|
                                                                            γ0_0,
                                                                            1
                                                                          |) in
                                                                        let j :=
                                                                          M.copy (| γ1_0 |) in
                                                                        let func_idx :=
                                                                          M.copy (| γ1_1 |) in
                                                                        let _ :=
                                                                          M.alloc (|
                                                                            M.call_closure (|
                                                                              M.get_associated_function (|
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "alloc::vec::Vec")
                                                                                  [
                                                                                    Ty.path
                                                                                      "specs::brtable::ElemEntry";
                                                                                    Ty.path
                                                                                      "alloc::alloc::Global"
                                                                                  ],
                                                                                "push",
                                                                                []
                                                                              |),
                                                                              [
                                                                                M.SubPointer.get_struct_record_field (|
                                                                                  M.read (| self |),
                                                                                  "delphinus_zkwasm::runtime::monitor::plugins::table::TablePlugin",
                                                                                  "elements"
                                                                                |);
                                                                                Value.StructRecord
                                                                                  "specs::brtable::ElemEntry"
                                                                                  [
                                                                                    ("table_idx",
                                                                                      M.read (|
                                                                                        M.get_constant (|
                                                                                          "delphinus_zkwasm::runtime::monitor::plugins::table::DEFAULT_TABLE_INDEX"
                                                                                        |)
                                                                                      |));
                                                                                    ("type_idx",
                                                                                      M.read (|
                                                                                        M.call_closure (|
                                                                                          M.get_trait_method (|
                                                                                            "core::ops::index::Index",
                                                                                            Ty.apply
                                                                                              (Ty.path
                                                                                                "alloc::vec::Vec")
                                                                                              [
                                                                                                Ty.path
                                                                                                  "u32";
                                                                                                Ty.path
                                                                                                  "alloc::alloc::Global"
                                                                                              ],
                                                                                            [
                                                                                              Ty.path
                                                                                                "usize"
                                                                                            ],
                                                                                            "index",
                                                                                            []
                                                                                          |),
                                                                                          [
                                                                                            type_idx_of_func;
                                                                                            M.rust_cast
                                                                                              (M.read (|
                                                                                                M.read (|
                                                                                                  func_idx
                                                                                                |)
                                                                                              |))
                                                                                          ]
                                                                                        |)
                                                                                      |));
                                                                                    ("offset",
                                                                                      BinOp.Panic.add (|
                                                                                        Integer.U32,
                                                                                        M.read (|
                                                                                          offset_val
                                                                                        |),
                                                                                        M.rust_cast
                                                                                          (M.read (|
                                                                                            j
                                                                                          |))
                                                                                      |));
                                                                                    ("func_idx",
                                                                                      M.read (|
                                                                                        M.read (|
                                                                                          func_idx
                                                                                        |)
                                                                                      |))
                                                                                  ]
                                                                              ]
                                                                            |)
                                                                          |) in
                                                                        M.alloc (|
                                                                          Value.Tuple []
                                                                        |)))
                                                                  ]
                                                                |) in
                                                              M.alloc (| Value.Tuple [] |)))
                                                          |)))
                                                    ]
                                                  |))))
                                          ]
                                        |) in
                                      M.alloc (| Value.Tuple [] |)))
                                  |)))
                            ]
                          |)) in
                      let _ :=
                        M.match_operator (|
                          M.alloc (|
                            Value.Tuple
                              [
                                M.alloc (|
                                  M.call_closure (|
                                    M.get_associated_function (|
                                      Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        [
                                          Ty.path
                                            "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::FuncDesc";
                                          Ty.path "alloc::alloc::Global"
                                        ],
                                      "len",
                                      []
                                    |),
                                    [
                                      M.SubPointer.get_struct_record_field (|
                                        M.read (| self |),
                                        "delphinus_zkwasm::runtime::monitor::plugins::table::TablePlugin",
                                        "function_table"
                                      |)
                                    ]
                                  |)
                                |);
                                M.alloc (|
                                  M.call_closure (|
                                    M.get_associated_function (|
                                      Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        [ Ty.path "u32"; Ty.path "alloc::alloc::Global" ],
                                      "len",
                                      []
                                    |),
                                    [ type_idx_of_func ]
                                  |)
                                |)
                              ]
                          |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                                let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                                let left_val := M.copy (| γ0_0 |) in
                                let right_val := M.copy (| γ0_1 |) in
                                M.match_operator (|
                                  M.alloc (| Value.Tuple [] |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ :=
                                          M.use
                                            (M.alloc (|
                                              UnOp.Pure.not
                                                (BinOp.Pure.eq
                                                  (M.read (| M.read (| left_val |) |))
                                                  (M.read (| M.read (| right_val |) |)))
                                            |)) in
                                        let _ :=
                                          M.is_constant_or_break_match (|
                                            M.read (| γ |),
                                            Value.Bool true
                                          |) in
                                        M.alloc (|
                                          M.never_to_any (|
                                            M.read (|
                                              let kind :=
                                                M.alloc (|
                                                  Value.StructTuple
                                                    "core::panicking::AssertKind::Eq"
                                                    []
                                                |) in
                                              M.alloc (|
                                                M.call_closure (|
                                                  M.get_function (|
                                                    "core::panicking::assert_failed",
                                                    [ Ty.path "usize"; Ty.path "usize" ]
                                                  |),
                                                  [
                                                    M.read (| kind |);
                                                    M.read (| left_val |);
                                                    M.read (| right_val |);
                                                    Value.StructTuple
                                                      "core::option::Option::None"
                                                      []
                                                  ]
                                                |)
                                              |)
                                            |)
                                          |)
                                        |)));
                                    fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                  ]
                                |)))
                          ]
                        |) in
                      M.alloc (| Value.StructTuple "core::result::Result::Ok" [ Value.Tuple [] ] |)
                    |)))
                |)))
            | _, _ => M.impossible
            end.
          
          (*
              fn invoke_exported_function_pre_hook(&mut self) {
                  self.last_jump_eid.push(0);
              }
          *)
          Definition invoke_exported_function_pre_hook (τ : list Ty.t) (α : list Value.t) : M :=
            match τ, α with
            | [], [ self ] =>
              ltac:(M.monadic
                (let self := M.alloc (| self |) in
                M.read (|
                  let _ :=
                    M.alloc (|
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            [ Ty.path "u32"; Ty.path "alloc::alloc::Global" ],
                          "push",
                          []
                        |),
                        [
                          M.SubPointer.get_struct_record_field (|
                            M.read (| self |),
                            "delphinus_zkwasm::runtime::monitor::plugins::table::TablePlugin",
                            "last_jump_eid"
                          |);
                          Value.Integer 0
                        ]
                      |)
                    |) in
                  M.alloc (| Value.Tuple [] |)
                |)))
            | _, _ => M.impossible
            end.
          
          (*
              fn invoke_instruction_pre_hook(
                  &mut self,
                  value_stack: &ValueStack,
                  function_context: &FunctionContext,
                  instruction: &Instruction,
              ) {
                  // phantom should do nothing
                  if self.phantom_helper.is_in_phantom_function() {
                      return;
                  }
                  self.unresolved_event = run_instruction_pre(value_stack, function_context, instruction);
              }
          *)
          Definition invoke_instruction_pre_hook (τ : list Ty.t) (α : list Value.t) : M :=
            match τ, α with
            | [], [ self; value_stack; function_context; instruction ] =>
              ltac:(M.monadic
                (let self := M.alloc (| self |) in
                let value_stack := M.alloc (| value_stack |) in
                let function_context := M.alloc (| function_context |) in
                let instruction := M.alloc (| instruction |) in
                M.catch_return (|
                  ltac:(M.monadic
                    (M.read (|
                      let _ :=
                        M.match_operator (|
                          M.alloc (| Value.Tuple [] |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ :=
                                  M.use
                                    (M.alloc (|
                                      M.call_closure (|
                                        M.get_associated_function (|
                                          Ty.path
                                            "delphinus_zkwasm::runtime::monitor::plugins::phantom::PhantomHelper",
                                          "is_in_phantom_function",
                                          []
                                        |),
                                        [
                                          M.SubPointer.get_struct_record_field (|
                                            M.read (| self |),
                                            "delphinus_zkwasm::runtime::monitor::plugins::table::TablePlugin",
                                            "phantom_helper"
                                          |)
                                        ]
                                      |)
                                    |)) in
                                let _ :=
                                  M.is_constant_or_break_match (|
                                    M.read (| γ |),
                                    Value.Bool true
                                  |) in
                                M.alloc (|
                                  M.never_to_any (| M.read (| M.return_ (| Value.Tuple [] |) |) |)
                                |)));
                            fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                          ]
                        |) in
                      let _ :=
                        M.write (|
                          M.SubPointer.get_struct_record_field (|
                            M.read (| self |),
                            "delphinus_zkwasm::runtime::monitor::plugins::table::TablePlugin",
                            "unresolved_event"
                          |),
                          M.call_closure (|
                            M.get_function (|
                              "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::run_instruction_pre",
                              []
                            |),
                            [
                              M.read (| value_stack |);
                              M.read (| function_context |);
                              M.read (| instruction |)
                            ]
                          |)
                        |) in
                      M.alloc (| Value.Tuple [] |)
                    |)))
                |)))
            | _, _ => M.impossible
            end.
          
          (*
              fn invoke_instruction_post_hook(
                  &mut self,
                  fid: u32,
                  iid: u32,
                  sp: u32,
                  allocated_memory_pages: u32,
                  value_stack: &ValueStack,
                  function_context: &FunctionContext,
                  instruction: &Instruction,
                  outcome: &InstructionOutcome,
              ) {
                  if !self.phantom_helper.is_in_phantom_function() {
                      let current_event = self.unresolved_event.take();
          
                      let event = self.run_instruction_post(
                          self.module_ref.as_ref().unwrap(),
                          current_event,
                          value_stack,
                          function_context,
                          instruction,
                      );
          
                      self.etable.push(
                          fid,
                          iid,
                          sp,
                          allocated_memory_pages,
                          *self.last_jump_eid.last().unwrap(),
                          event,
                      );
                  }
          
                  match outcome {
                      InstructionOutcome::ExecuteCall(func_ref) => {
                          if let FuncInstanceInternal::Internal { index, .. } = func_ref.as_internal() {
                              if !self.phantom_helper.is_in_phantom_function() {
                                  let eid = self.etable.entries().last().unwrap().eid;
          
                                  self.push_frame(
                                      eid,
                                      *self.last_jump_eid.last().unwrap(),
                                      *index as u32,
                                      fid,
                                      iid + 1,
                                  );
                              }
          
                              if self.phantom_helper.is_phantom_function( *index as u32) {
                                  if let Some(memory_ref) = function_context.memory() {
                                      let mut buf = memory_ref.buffer_cache.borrow_mut();
          
                                      if buf.is_none() {
                                          *buf = Some((
                                              Pages(allocated_memory_pages as usize),
                                              HashMap::default(),
                                          ));
                                      }
                                  }
                                  self.phantom_helper.push_frame(value_stack.len() as u32);
                              }
                          }
                      }
                      InstructionOutcome::Return(dropkeep) => {
                          if self.phantom_helper.is_phantom_function(fid) {
                              let sp_before = self.phantom_helper.pop_frame().unwrap();
          
                              let wasm_input = self.phantom_helper.wasm_input.clone();
                              let signature = self.function_table[fid as usize].signature.clone();
                              if !self.phantom_helper.is_in_phantom_function() {
                                  let allocated_memory_pages =
                                      if let Some(memory_ref) = function_context.memory() {
                                          let mut buf = memory_ref.buffer_cache.borrow_mut();
          
                                          let pages = buf.as_ref().unwrap().0;
                                          *buf = None;
                                          memory_ref.shrink(pages).unwrap();
          
                                          pages.0
                                      } else {
                                          0
                                      };
          
                                  self.fill_trace(
                                      sp_before,
                                      allocated_memory_pages as u32,
                                      fid,
                                      &signature,
                                      if let Keep::Single(t) = dropkeep.keep {
                                          Some(from_value_internal_to_u64_with_typ(
                                              t.into(),
                                              *value_stack.top(),
                                          ))
                                      } else {
                                          None
                                      },
                                      wasm_input,
                                  )
                              }
                          }
          
                          if !self.phantom_helper.is_in_phantom_function() {
                              self.pop_frame();
                          }
                      }
                      _ => {}
                  }
              }
          *)
          Definition invoke_instruction_post_hook (τ : list Ty.t) (α : list Value.t) : M :=
            match τ, α with
            | [],
                [
                  self;
                  fid;
                  iid;
                  sp;
                  allocated_memory_pages;
                  value_stack;
                  function_context;
                  instruction;
                  outcome
                ] =>
              ltac:(M.monadic
                (let self := M.alloc (| self |) in
                let fid := M.alloc (| fid |) in
                let iid := M.alloc (| iid |) in
                let sp := M.alloc (| sp |) in
                let allocated_memory_pages := M.alloc (| allocated_memory_pages |) in
                let value_stack := M.alloc (| value_stack |) in
                let function_context := M.alloc (| function_context |) in
                let instruction := M.alloc (| instruction |) in
                let outcome := M.alloc (| outcome |) in
                M.read (|
                  let _ :=
                    M.match_operator (|
                      M.alloc (| Value.Tuple [] |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ :=
                              M.use
                                (M.alloc (|
                                  UnOp.Pure.not
                                    (M.call_closure (|
                                      M.get_associated_function (|
                                        Ty.path
                                          "delphinus_zkwasm::runtime::monitor::plugins::phantom::PhantomHelper",
                                        "is_in_phantom_function",
                                        []
                                      |),
                                      [
                                        M.SubPointer.get_struct_record_field (|
                                          M.read (| self |),
                                          "delphinus_zkwasm::runtime::monitor::plugins::table::TablePlugin",
                                          "phantom_helper"
                                        |)
                                      ]
                                    |))
                                |)) in
                            let _ :=
                              M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                            let current_event :=
                              M.alloc (|
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.apply
                                      (Ty.path "core::option::Option")
                                      [
                                        Ty.path
                                          "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::RunInstructionTracePre"
                                      ],
                                    "take",
                                    []
                                  |),
                                  [
                                    M.SubPointer.get_struct_record_field (|
                                      M.read (| self |),
                                      "delphinus_zkwasm::runtime::monitor::plugins::table::TablePlugin",
                                      "unresolved_event"
                                    |)
                                  ]
                                |)
                              |) in
                            let event :=
                              M.alloc (|
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.path
                                      "delphinus_zkwasm::runtime::monitor::plugins::table::TablePlugin",
                                    "run_instruction_post",
                                    []
                                  |),
                                  [
                                    M.read (| self |);
                                    M.call_closure (|
                                      M.get_associated_function (|
                                        Ty.apply
                                          (Ty.path "core::option::Option")
                                          [
                                            Ty.apply
                                              (Ty.path "&")
                                              [ Ty.path "wasmi::module::ModuleRef" ]
                                          ],
                                        "unwrap",
                                        []
                                      |),
                                      [
                                        M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.apply
                                              (Ty.path "core::option::Option")
                                              [ Ty.path "wasmi::module::ModuleRef" ],
                                            "as_ref",
                                            []
                                          |),
                                          [
                                            M.SubPointer.get_struct_record_field (|
                                              M.read (| self |),
                                              "delphinus_zkwasm::runtime::monitor::plugins::table::TablePlugin",
                                              "module_ref"
                                            |)
                                          ]
                                        |)
                                      ]
                                    |);
                                    M.read (| current_event |);
                                    M.read (| value_stack |);
                                    M.read (| function_context |);
                                    M.read (| instruction |)
                                  ]
                                |)
                              |) in
                            let _ :=
                              M.alloc (|
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.path
                                      "delphinus_zkwasm::runtime::monitor::plugins::table::etable::ETable",
                                    "push",
                                    []
                                  |),
                                  [
                                    M.SubPointer.get_struct_record_field (|
                                      M.read (| self |),
                                      "delphinus_zkwasm::runtime::monitor::plugins::table::TablePlugin",
                                      "etable"
                                    |);
                                    M.read (| fid |);
                                    M.read (| iid |);
                                    M.read (| sp |);
                                    M.read (| allocated_memory_pages |);
                                    M.read (|
                                      M.call_closure (|
                                        M.get_associated_function (|
                                          Ty.apply
                                            (Ty.path "core::option::Option")
                                            [ Ty.apply (Ty.path "&") [ Ty.path "u32" ] ],
                                          "unwrap",
                                          []
                                        |),
                                        [
                                          M.call_closure (|
                                            M.get_associated_function (|
                                              Ty.apply (Ty.path "slice") [ Ty.path "u32" ],
                                              "last",
                                              []
                                            |),
                                            [
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "core::ops::deref::Deref",
                                                  Ty.apply
                                                    (Ty.path "alloc::vec::Vec")
                                                    [ Ty.path "u32"; Ty.path "alloc::alloc::Global"
                                                    ],
                                                  [],
                                                  "deref",
                                                  []
                                                |),
                                                [
                                                  M.SubPointer.get_struct_record_field (|
                                                    M.read (| self |),
                                                    "delphinus_zkwasm::runtime::monitor::plugins::table::TablePlugin",
                                                    "last_jump_eid"
                                                  |)
                                                ]
                                              |)
                                            ]
                                          |)
                                        ]
                                      |)
                                    |);
                                    M.read (| event |)
                                  ]
                                |)
                              |) in
                            M.alloc (| Value.Tuple [] |)));
                        fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                      ]
                    |) in
                  M.match_operator (|
                    outcome,
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ := M.read (| γ |) in
                          let γ1_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "wasmi::runner::InstructionOutcome::ExecuteCall",
                              0
                            |) in
                          let func_ref := M.alloc (| γ1_0 |) in
                          M.match_operator (|
                            M.alloc (| Value.Tuple [] |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ :=
                                    M.alloc (|
                                      M.call_closure (|
                                        M.get_associated_function (|
                                          Ty.path "wasmi::func::FuncInstance",
                                          "as_internal",
                                          []
                                        |),
                                        [
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "core::ops::deref::Deref",
                                              Ty.path "wasmi::func::FuncRef",
                                              [],
                                              "deref",
                                              []
                                            |),
                                            [ M.read (| func_ref |) ]
                                          |)
                                        ]
                                      |)
                                    |) in
                                  let γ := M.read (| γ |) in
                                  let γ1_0 :=
                                    M.SubPointer.get_struct_record_field (|
                                      γ,
                                      "wasmi::func::FuncInstanceInternal::Internal",
                                      "index"
                                    |) in
                                  let index := M.alloc (| γ1_0 |) in
                                  let _ :=
                                    M.match_operator (|
                                      M.alloc (| Value.Tuple [] |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let γ :=
                                              M.use
                                                (M.alloc (|
                                                  UnOp.Pure.not
                                                    (M.call_closure (|
                                                      M.get_associated_function (|
                                                        Ty.path
                                                          "delphinus_zkwasm::runtime::monitor::plugins::phantom::PhantomHelper",
                                                        "is_in_phantom_function",
                                                        []
                                                      |),
                                                      [
                                                        M.SubPointer.get_struct_record_field (|
                                                          M.read (| self |),
                                                          "delphinus_zkwasm::runtime::monitor::plugins::table::TablePlugin",
                                                          "phantom_helper"
                                                        |)
                                                      ]
                                                    |))
                                                |)) in
                                            let _ :=
                                              M.is_constant_or_break_match (|
                                                M.read (| γ |),
                                                Value.Bool true
                                              |) in
                                            let eid :=
                                              M.copy (|
                                                M.SubPointer.get_struct_record_field (|
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.apply
                                                        (Ty.path "core::option::Option")
                                                        [
                                                          Ty.apply
                                                            (Ty.path "&")
                                                            [
                                                              Ty.path
                                                                "specs::etable::EventTableEntry"
                                                            ]
                                                        ],
                                                      "unwrap",
                                                      []
                                                    |),
                                                    [
                                                      M.call_closure (|
                                                        M.get_associated_function (|
                                                          Ty.apply
                                                            (Ty.path "slice")
                                                            [
                                                              Ty.path
                                                                "specs::etable::EventTableEntry"
                                                            ],
                                                          "last",
                                                          []
                                                        |),
                                                        [
                                                          M.call_closure (|
                                                            M.get_associated_function (|
                                                              Ty.path
                                                                "delphinus_zkwasm::runtime::monitor::plugins::table::etable::ETable",
                                                              "entries",
                                                              []
                                                            |),
                                                            [
                                                              M.SubPointer.get_struct_record_field (|
                                                                M.read (| self |),
                                                                "delphinus_zkwasm::runtime::monitor::plugins::table::TablePlugin",
                                                                "etable"
                                                              |)
                                                            ]
                                                          |)
                                                        ]
                                                      |)
                                                    ]
                                                  |),
                                                  "specs::etable::EventTableEntry",
                                                  "eid"
                                                |)
                                              |) in
                                            let _ :=
                                              M.alloc (|
                                                M.call_closure (|
                                                  M.get_associated_function (|
                                                    Ty.path
                                                      "delphinus_zkwasm::runtime::monitor::plugins::table::TablePlugin",
                                                    "push_frame",
                                                    []
                                                  |),
                                                  [
                                                    M.read (| self |);
                                                    M.read (| eid |);
                                                    M.read (|
                                                      M.call_closure (|
                                                        M.get_associated_function (|
                                                          Ty.apply
                                                            (Ty.path "core::option::Option")
                                                            [
                                                              Ty.apply
                                                                (Ty.path "&")
                                                                [ Ty.path "u32" ]
                                                            ],
                                                          "unwrap",
                                                          []
                                                        |),
                                                        [
                                                          M.call_closure (|
                                                            M.get_associated_function (|
                                                              Ty.apply
                                                                (Ty.path "slice")
                                                                [ Ty.path "u32" ],
                                                              "last",
                                                              []
                                                            |),
                                                            [
                                                              M.call_closure (|
                                                                M.get_trait_method (|
                                                                  "core::ops::deref::Deref",
                                                                  Ty.apply
                                                                    (Ty.path "alloc::vec::Vec")
                                                                    [
                                                                      Ty.path "u32";
                                                                      Ty.path "alloc::alloc::Global"
                                                                    ],
                                                                  [],
                                                                  "deref",
                                                                  []
                                                                |),
                                                                [
                                                                  M.SubPointer.get_struct_record_field (|
                                                                    M.read (| self |),
                                                                    "delphinus_zkwasm::runtime::monitor::plugins::table::TablePlugin",
                                                                    "last_jump_eid"
                                                                  |)
                                                                ]
                                                              |)
                                                            ]
                                                          |)
                                                        ]
                                                      |)
                                                    |);
                                                    M.rust_cast (M.read (| M.read (| index |) |));
                                                    M.read (| fid |);
                                                    BinOp.Panic.add (|
                                                      Integer.U32,
                                                      M.read (| iid |),
                                                      Value.Integer 1
                                                    |)
                                                  ]
                                                |)
                                              |) in
                                            M.alloc (| Value.Tuple [] |)));
                                        fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                      ]
                                    |) in
                                  M.match_operator (|
                                    M.alloc (| Value.Tuple [] |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let γ :=
                                            M.use
                                              (M.alloc (|
                                                M.call_closure (|
                                                  M.get_associated_function (|
                                                    Ty.path
                                                      "delphinus_zkwasm::runtime::monitor::plugins::phantom::PhantomHelper",
                                                    "is_phantom_function",
                                                    []
                                                  |),
                                                  [
                                                    M.SubPointer.get_struct_record_field (|
                                                      M.read (| self |),
                                                      "delphinus_zkwasm::runtime::monitor::plugins::table::TablePlugin",
                                                      "phantom_helper"
                                                    |);
                                                    M.rust_cast (M.read (| M.read (| index |) |))
                                                  ]
                                                |)
                                              |)) in
                                          let _ :=
                                            M.is_constant_or_break_match (|
                                              M.read (| γ |),
                                              Value.Bool true
                                            |) in
                                          let _ :=
                                            M.match_operator (|
                                              M.alloc (| Value.Tuple [] |),
                                              [
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (let γ :=
                                                      M.alloc (|
                                                        M.call_closure (|
                                                          M.get_associated_function (|
                                                            Ty.path
                                                              "wasmi::runner::FunctionContext",
                                                            "memory",
                                                            []
                                                          |),
                                                          [ M.read (| function_context |) ]
                                                        |)
                                                      |) in
                                                    let γ0_0 :=
                                                      M.SubPointer.get_struct_tuple_field (|
                                                        γ,
                                                        "core::option::Option::Some",
                                                        0
                                                      |) in
                                                    let memory_ref := M.copy (| γ0_0 |) in
                                                    let buf :=
                                                      M.alloc (|
                                                        M.call_closure (|
                                                          M.get_associated_function (|
                                                            Ty.apply
                                                              (Ty.path "core::cell::RefCell")
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "core::option::Option")
                                                                  [
                                                                    Ty.tuple
                                                                      [
                                                                        Ty.path
                                                                          "memory_units::wasm32::Pages";
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "std::collections::hash::map::HashMap")
                                                                          [
                                                                            Ty.path "usize";
                                                                            Ty.path "u8";
                                                                            Ty.path
                                                                              "std::hash::random::RandomState"
                                                                          ]
                                                                      ]
                                                                  ]
                                                              ],
                                                            "borrow_mut",
                                                            []
                                                          |),
                                                          [
                                                            M.SubPointer.get_struct_record_field (|
                                                              M.call_closure (|
                                                                M.get_trait_method (|
                                                                  "core::ops::deref::Deref",
                                                                  Ty.path
                                                                    "wasmi::memory::MemoryRef",
                                                                  [],
                                                                  "deref",
                                                                  []
                                                                |),
                                                                [ M.read (| memory_ref |) ]
                                                              |),
                                                              "wasmi::memory::MemoryInstance",
                                                              "buffer_cache"
                                                            |)
                                                          ]
                                                        |)
                                                      |) in
                                                    M.match_operator (|
                                                      M.alloc (| Value.Tuple [] |),
                                                      [
                                                        fun γ =>
                                                          ltac:(M.monadic
                                                            (let γ :=
                                                              M.use
                                                                (M.alloc (|
                                                                  M.call_closure (|
                                                                    M.get_associated_function (|
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "core::option::Option")
                                                                        [
                                                                          Ty.tuple
                                                                            [
                                                                              Ty.path
                                                                                "memory_units::wasm32::Pages";
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "std::collections::hash::map::HashMap")
                                                                                [
                                                                                  Ty.path "usize";
                                                                                  Ty.path "u8";
                                                                                  Ty.path
                                                                                    "std::hash::random::RandomState"
                                                                                ]
                                                                            ]
                                                                        ],
                                                                      "is_none",
                                                                      []
                                                                    |),
                                                                    [
                                                                      M.call_closure (|
                                                                        M.get_trait_method (|
                                                                          "core::ops::deref::Deref",
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "core::cell::RefMut")
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "core::option::Option")
                                                                                [
                                                                                  Ty.tuple
                                                                                    [
                                                                                      Ty.path
                                                                                        "memory_units::wasm32::Pages";
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "std::collections::hash::map::HashMap")
                                                                                        [
                                                                                          Ty.path
                                                                                            "usize";
                                                                                          Ty.path
                                                                                            "u8";
                                                                                          Ty.path
                                                                                            "std::hash::random::RandomState"
                                                                                        ]
                                                                                    ]
                                                                                ]
                                                                            ],
                                                                          [],
                                                                          "deref",
                                                                          []
                                                                        |),
                                                                        [ buf ]
                                                                      |)
                                                                    ]
                                                                  |)
                                                                |)) in
                                                            let _ :=
                                                              M.is_constant_or_break_match (|
                                                                M.read (| γ |),
                                                                Value.Bool true
                                                              |) in
                                                            let _ :=
                                                              M.write (|
                                                                M.call_closure (|
                                                                  M.get_trait_method (|
                                                                    "core::ops::deref::DerefMut",
                                                                    Ty.apply
                                                                      (Ty.path "core::cell::RefMut")
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "core::option::Option")
                                                                          [
                                                                            Ty.tuple
                                                                              [
                                                                                Ty.path
                                                                                  "memory_units::wasm32::Pages";
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "std::collections::hash::map::HashMap")
                                                                                  [
                                                                                    Ty.path "usize";
                                                                                    Ty.path "u8";
                                                                                    Ty.path
                                                                                      "std::hash::random::RandomState"
                                                                                  ]
                                                                              ]
                                                                          ]
                                                                      ],
                                                                    [],
                                                                    "deref_mut",
                                                                    []
                                                                  |),
                                                                  [ buf ]
                                                                |),
                                                                Value.StructTuple
                                                                  "core::option::Option::Some"
                                                                  [
                                                                    Value.Tuple
                                                                      [
                                                                        Value.StructTuple
                                                                          "memory_units::wasm32::Pages"
                                                                          [
                                                                            M.rust_cast
                                                                              (M.read (|
                                                                                allocated_memory_pages
                                                                              |))
                                                                          ];
                                                                        M.call_closure (|
                                                                          M.get_trait_method (|
                                                                            "core::default::Default",
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "std::collections::hash::map::HashMap")
                                                                              [
                                                                                Ty.path "usize";
                                                                                Ty.path "u8";
                                                                                Ty.path
                                                                                  "std::hash::random::RandomState"
                                                                              ],
                                                                            [],
                                                                            "default",
                                                                            []
                                                                          |),
                                                                          []
                                                                        |)
                                                                      ]
                                                                  ]
                                                              |) in
                                                            M.alloc (| Value.Tuple [] |)));
                                                        fun γ =>
                                                          ltac:(M.monadic
                                                            (M.alloc (| Value.Tuple [] |)))
                                                      ]
                                                    |)));
                                                fun γ =>
                                                  ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                              ]
                                            |) in
                                          let _ :=
                                            M.alloc (|
                                              M.call_closure (|
                                                M.get_associated_function (|
                                                  Ty.path
                                                    "delphinus_zkwasm::runtime::monitor::plugins::phantom::PhantomHelper",
                                                  "push_frame",
                                                  []
                                                |),
                                                [
                                                  M.SubPointer.get_struct_record_field (|
                                                    M.read (| self |),
                                                    "delphinus_zkwasm::runtime::monitor::plugins::table::TablePlugin",
                                                    "phantom_helper"
                                                  |);
                                                  M.rust_cast
                                                    (M.call_closure (|
                                                      M.get_associated_function (|
                                                        Ty.path "wasmi::runner::ValueStack",
                                                        "len",
                                                        []
                                                      |),
                                                      [ M.read (| value_stack |) ]
                                                    |))
                                                ]
                                              |)
                                            |) in
                                          M.alloc (| Value.Tuple [] |)));
                                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                    ]
                                  |)));
                              fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                            ]
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let γ := M.read (| γ |) in
                          let γ1_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "wasmi::runner::InstructionOutcome::Return",
                              0
                            |) in
                          let dropkeep := M.alloc (| γ1_0 |) in
                          let _ :=
                            M.match_operator (|
                              M.alloc (| Value.Tuple [] |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ :=
                                      M.use
                                        (M.alloc (|
                                          M.call_closure (|
                                            M.get_associated_function (|
                                              Ty.path
                                                "delphinus_zkwasm::runtime::monitor::plugins::phantom::PhantomHelper",
                                              "is_phantom_function",
                                              []
                                            |),
                                            [
                                              M.SubPointer.get_struct_record_field (|
                                                M.read (| self |),
                                                "delphinus_zkwasm::runtime::monitor::plugins::table::TablePlugin",
                                                "phantom_helper"
                                              |);
                                              M.read (| fid |)
                                            ]
                                          |)
                                        |)) in
                                    let _ :=
                                      M.is_constant_or_break_match (|
                                        M.read (| γ |),
                                        Value.Bool true
                                      |) in
                                    let sp_before :=
                                      M.alloc (|
                                        M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.apply
                                              (Ty.path "core::option::Option")
                                              [ Ty.path "u32" ],
                                            "unwrap",
                                            []
                                          |),
                                          [
                                            M.call_closure (|
                                              M.get_associated_function (|
                                                Ty.path
                                                  "delphinus_zkwasm::runtime::monitor::plugins::phantom::PhantomHelper",
                                                "pop_frame",
                                                []
                                              |),
                                              [
                                                M.SubPointer.get_struct_record_field (|
                                                  M.read (| self |),
                                                  "delphinus_zkwasm::runtime::monitor::plugins::table::TablePlugin",
                                                  "phantom_helper"
                                                |)
                                              ]
                                            |)
                                          ]
                                        |)
                                      |) in
                                    let wasm_input :=
                                      M.alloc (|
                                        M.call_closure (|
                                          M.get_trait_method (|
                                            "core::clone::Clone",
                                            Ty.path "wasmi::func::FuncRef",
                                            [],
                                            "clone",
                                            []
                                          |),
                                          [
                                            M.SubPointer.get_struct_record_field (|
                                              M.SubPointer.get_struct_record_field (|
                                                M.read (| self |),
                                                "delphinus_zkwasm::runtime::monitor::plugins::table::TablePlugin",
                                                "phantom_helper"
                                              |),
                                              "delphinus_zkwasm::runtime::monitor::plugins::phantom::PhantomHelper",
                                              "wasm_input"
                                            |)
                                          ]
                                        |)
                                      |) in
                                    let signature :=
                                      M.alloc (|
                                        M.call_closure (|
                                          M.get_trait_method (|
                                            "core::clone::Clone",
                                            Ty.path "wasmi::types::Signature",
                                            [],
                                            "clone",
                                            []
                                          |),
                                          [
                                            M.SubPointer.get_struct_record_field (|
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "core::ops::index::Index",
                                                  Ty.apply
                                                    (Ty.path "alloc::vec::Vec")
                                                    [
                                                      Ty.path
                                                        "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::FuncDesc";
                                                      Ty.path "alloc::alloc::Global"
                                                    ],
                                                  [ Ty.path "usize" ],
                                                  "index",
                                                  []
                                                |),
                                                [
                                                  M.SubPointer.get_struct_record_field (|
                                                    M.read (| self |),
                                                    "delphinus_zkwasm::runtime::monitor::plugins::table::TablePlugin",
                                                    "function_table"
                                                  |);
                                                  M.rust_cast (M.read (| fid |))
                                                ]
                                              |),
                                              "delphinus_zkwasm::runtime::monitor::plugins::table::instruction::FuncDesc",
                                              "signature"
                                            |)
                                          ]
                                        |)
                                      |) in
                                    M.match_operator (|
                                      M.alloc (| Value.Tuple [] |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let γ :=
                                              M.use
                                                (M.alloc (|
                                                  UnOp.Pure.not
                                                    (M.call_closure (|
                                                      M.get_associated_function (|
                                                        Ty.path
                                                          "delphinus_zkwasm::runtime::monitor::plugins::phantom::PhantomHelper",
                                                        "is_in_phantom_function",
                                                        []
                                                      |),
                                                      [
                                                        M.SubPointer.get_struct_record_field (|
                                                          M.read (| self |),
                                                          "delphinus_zkwasm::runtime::monitor::plugins::table::TablePlugin",
                                                          "phantom_helper"
                                                        |)
                                                      ]
                                                    |))
                                                |)) in
                                            let _ :=
                                              M.is_constant_or_break_match (|
                                                M.read (| γ |),
                                                Value.Bool true
                                              |) in
                                            let allocated_memory_pages :=
                                              M.copy (|
                                                M.match_operator (|
                                                  M.alloc (| Value.Tuple [] |),
                                                  [
                                                    fun γ =>
                                                      ltac:(M.monadic
                                                        (let γ :=
                                                          M.alloc (|
                                                            M.call_closure (|
                                                              M.get_associated_function (|
                                                                Ty.path
                                                                  "wasmi::runner::FunctionContext",
                                                                "memory",
                                                                []
                                                              |),
                                                              [ M.read (| function_context |) ]
                                                            |)
                                                          |) in
                                                        let γ0_0 :=
                                                          M.SubPointer.get_struct_tuple_field (|
                                                            γ,
                                                            "core::option::Option::Some",
                                                            0
                                                          |) in
                                                        let memory_ref := M.copy (| γ0_0 |) in
                                                        let buf :=
                                                          M.alloc (|
                                                            M.call_closure (|
                                                              M.get_associated_function (|
                                                                Ty.apply
                                                                  (Ty.path "core::cell::RefCell")
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "core::option::Option")
                                                                      [
                                                                        Ty.tuple
                                                                          [
                                                                            Ty.path
                                                                              "memory_units::wasm32::Pages";
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "std::collections::hash::map::HashMap")
                                                                              [
                                                                                Ty.path "usize";
                                                                                Ty.path "u8";
                                                                                Ty.path
                                                                                  "std::hash::random::RandomState"
                                                                              ]
                                                                          ]
                                                                      ]
                                                                  ],
                                                                "borrow_mut",
                                                                []
                                                              |),
                                                              [
                                                                M.SubPointer.get_struct_record_field (|
                                                                  M.call_closure (|
                                                                    M.get_trait_method (|
                                                                      "core::ops::deref::Deref",
                                                                      Ty.path
                                                                        "wasmi::memory::MemoryRef",
                                                                      [],
                                                                      "deref",
                                                                      []
                                                                    |),
                                                                    [ M.read (| memory_ref |) ]
                                                                  |),
                                                                  "wasmi::memory::MemoryInstance",
                                                                  "buffer_cache"
                                                                |)
                                                              ]
                                                            |)
                                                          |) in
                                                        let pages :=
                                                          M.copy (|
                                                            M.SubPointer.get_tuple_field (|
                                                              M.call_closure (|
                                                                M.get_associated_function (|
                                                                  Ty.apply
                                                                    (Ty.path "core::option::Option")
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path "&")
                                                                        [
                                                                          Ty.tuple
                                                                            [
                                                                              Ty.path
                                                                                "memory_units::wasm32::Pages";
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "std::collections::hash::map::HashMap")
                                                                                [
                                                                                  Ty.path "usize";
                                                                                  Ty.path "u8";
                                                                                  Ty.path
                                                                                    "std::hash::random::RandomState"
                                                                                ]
                                                                            ]
                                                                        ]
                                                                    ],
                                                                  "unwrap",
                                                                  []
                                                                |),
                                                                [
                                                                  M.call_closure (|
                                                                    M.get_associated_function (|
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "core::option::Option")
                                                                        [
                                                                          Ty.tuple
                                                                            [
                                                                              Ty.path
                                                                                "memory_units::wasm32::Pages";
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "std::collections::hash::map::HashMap")
                                                                                [
                                                                                  Ty.path "usize";
                                                                                  Ty.path "u8";
                                                                                  Ty.path
                                                                                    "std::hash::random::RandomState"
                                                                                ]
                                                                            ]
                                                                        ],
                                                                      "as_ref",
                                                                      []
                                                                    |),
                                                                    [
                                                                      M.call_closure (|
                                                                        M.get_trait_method (|
                                                                          "core::ops::deref::Deref",
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "core::cell::RefMut")
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "core::option::Option")
                                                                                [
                                                                                  Ty.tuple
                                                                                    [
                                                                                      Ty.path
                                                                                        "memory_units::wasm32::Pages";
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "std::collections::hash::map::HashMap")
                                                                                        [
                                                                                          Ty.path
                                                                                            "usize";
                                                                                          Ty.path
                                                                                            "u8";
                                                                                          Ty.path
                                                                                            "std::hash::random::RandomState"
                                                                                        ]
                                                                                    ]
                                                                                ]
                                                                            ],
                                                                          [],
                                                                          "deref",
                                                                          []
                                                                        |),
                                                                        [ buf ]
                                                                      |)
                                                                    ]
                                                                  |)
                                                                ]
                                                              |),
                                                              0
                                                            |)
                                                          |) in
                                                        let _ :=
                                                          M.write (|
                                                            M.call_closure (|
                                                              M.get_trait_method (|
                                                                "core::ops::deref::DerefMut",
                                                                Ty.apply
                                                                  (Ty.path "core::cell::RefMut")
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "core::option::Option")
                                                                      [
                                                                        Ty.tuple
                                                                          [
                                                                            Ty.path
                                                                              "memory_units::wasm32::Pages";
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "std::collections::hash::map::HashMap")
                                                                              [
                                                                                Ty.path "usize";
                                                                                Ty.path "u8";
                                                                                Ty.path
                                                                                  "std::hash::random::RandomState"
                                                                              ]
                                                                          ]
                                                                      ]
                                                                  ],
                                                                [],
                                                                "deref_mut",
                                                                []
                                                              |),
                                                              [ buf ]
                                                            |),
                                                            Value.StructTuple
                                                              "core::option::Option::None"
                                                              []
                                                          |) in
                                                        let _ :=
                                                          M.alloc (|
                                                            M.call_closure (|
                                                              M.get_associated_function (|
                                                                Ty.apply
                                                                  (Ty.path "core::result::Result")
                                                                  [
                                                                    Ty.tuple [];
                                                                    Ty.path "wasmi::Error"
                                                                  ],
                                                                "unwrap",
                                                                []
                                                              |),
                                                              [
                                                                M.call_closure (|
                                                                  M.get_associated_function (|
                                                                    Ty.path
                                                                      "wasmi::memory::MemoryInstance",
                                                                    "shrink",
                                                                    []
                                                                  |),
                                                                  [
                                                                    M.call_closure (|
                                                                      M.get_trait_method (|
                                                                        "core::ops::deref::Deref",
                                                                        Ty.path
                                                                          "wasmi::memory::MemoryRef",
                                                                        [],
                                                                        "deref",
                                                                        []
                                                                      |),
                                                                      [ M.read (| memory_ref |) ]
                                                                    |);
                                                                    M.read (| pages |)
                                                                  ]
                                                                |)
                                                              ]
                                                            |)
                                                          |) in
                                                        M.SubPointer.get_struct_tuple_field (|
                                                          pages,
                                                          "memory_units::wasm32::Pages",
                                                          0
                                                        |)));
                                                    fun γ =>
                                                      ltac:(M.monadic
                                                        (M.alloc (| Value.Integer 0 |)))
                                                  ]
                                                |)
                                              |) in
                                            M.alloc (|
                                              M.call_closure (|
                                                M.get_associated_function (|
                                                  Ty.path
                                                    "delphinus_zkwasm::runtime::monitor::plugins::table::TablePlugin",
                                                  "fill_trace",
                                                  []
                                                |),
                                                [
                                                  M.read (| self |);
                                                  M.read (| sp_before |);
                                                  M.rust_cast (M.read (| allocated_memory_pages |));
                                                  M.read (| fid |);
                                                  signature;
                                                  M.read (|
                                                    M.match_operator (|
                                                      M.alloc (| Value.Tuple [] |),
                                                      [
                                                        fun γ =>
                                                          ltac:(M.monadic
                                                            (let γ :=
                                                              M.SubPointer.get_struct_record_field (|
                                                                M.read (| dropkeep |),
                                                                "wasmi::isa::DropKeep",
                                                                "keep"
                                                              |) in
                                                            let γ0_0 :=
                                                              M.SubPointer.get_struct_tuple_field (|
                                                                γ,
                                                                "wasmi::isa::Keep::Single",
                                                                0
                                                              |) in
                                                            let t := M.copy (| γ0_0 |) in
                                                            M.alloc (|
                                                              Value.StructTuple
                                                                "core::option::Option::Some"
                                                                [
                                                                  M.call_closure (|
                                                                    M.get_function (|
                                                                      "wasmi::runner::from_value_internal_to_u64_with_typ",
                                                                      []
                                                                    |),
                                                                    [
                                                                      M.call_closure (|
                                                                        M.get_trait_method (|
                                                                          "core::convert::Into",
                                                                          Ty.path
                                                                            "parity_wasm::elements::types::ValueType",
                                                                          [
                                                                            Ty.path
                                                                              "specs::mtable::VarType"
                                                                          ],
                                                                          "into",
                                                                          []
                                                                        |),
                                                                        [ M.read (| t |) ]
                                                                      |);
                                                                      M.read (|
                                                                        M.call_closure (|
                                                                          M.get_associated_function (|
                                                                            Ty.path
                                                                              "wasmi::runner::ValueStack",
                                                                            "top",
                                                                            []
                                                                          |),
                                                                          [ M.read (| value_stack |)
                                                                          ]
                                                                        |)
                                                                      |)
                                                                    ]
                                                                  |)
                                                                ]
                                                            |)));
                                                        fun γ =>
                                                          ltac:(M.monadic
                                                            (M.alloc (|
                                                              Value.StructTuple
                                                                "core::option::Option::None"
                                                                []
                                                            |)))
                                                      ]
                                                    |)
                                                  |);
                                                  M.read (| wasm_input |)
                                                ]
                                              |)
                                            |)));
                                        fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                      ]
                                    |)));
                                fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                              ]
                            |) in
                          M.match_operator (|
                            M.alloc (| Value.Tuple [] |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ :=
                                    M.use
                                      (M.alloc (|
                                        UnOp.Pure.not
                                          (M.call_closure (|
                                            M.get_associated_function (|
                                              Ty.path
                                                "delphinus_zkwasm::runtime::monitor::plugins::phantom::PhantomHelper",
                                              "is_in_phantom_function",
                                              []
                                            |),
                                            [
                                              M.SubPointer.get_struct_record_field (|
                                                M.read (| self |),
                                                "delphinus_zkwasm::runtime::monitor::plugins::table::TablePlugin",
                                                "phantom_helper"
                                              |)
                                            ]
                                          |))
                                      |)) in
                                  let _ :=
                                    M.is_constant_or_break_match (|
                                      M.read (| γ |),
                                      Value.Bool true
                                    |) in
                                  let _ :=
                                    M.alloc (|
                                      M.call_closure (|
                                        M.get_associated_function (|
                                          Ty.path
                                            "delphinus_zkwasm::runtime::monitor::plugins::table::TablePlugin",
                                          "pop_frame",
                                          []
                                        |),
                                        [ M.read (| self |) ]
                                      |)
                                    |) in
                                  M.alloc (| Value.Tuple [] |)));
                              fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                            ]
                          |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |)
                |)))
            | _, _ => M.impossible
            end.
          
          (*
              fn invoke_call_host_post_hook(&mut self, return_value: Option<RuntimeValue>) {
                  if self.phantom_helper.is_in_phantom_function() {
                      return;
                  }
          
                  if let Some(return_value) = return_value {
                      match self.etable.entries_mut().last_mut().unwrap().step_info {
                          StepInfo::CallHost {
                              ref mut ret_val, ..
                          } => {
                              *ret_val = Some(return_value.into());
                          }
                          StepInfo::ExternalHostCall {
                              ref mut value, sig, ..
                          } if sig.is_ret() => {
                              *value = Some(return_value.into());
                          }
                          _ => unreachable!(),
                      }
                  }
              }
          *)
          Definition invoke_call_host_post_hook (τ : list Ty.t) (α : list Value.t) : M :=
            match τ, α with
            | [], [ self; return_value ] =>
              ltac:(M.monadic
                (let self := M.alloc (| self |) in
                let return_value := M.alloc (| return_value |) in
                M.catch_return (|
                  ltac:(M.monadic
                    (M.read (|
                      let _ :=
                        M.match_operator (|
                          M.alloc (| Value.Tuple [] |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ :=
                                  M.use
                                    (M.alloc (|
                                      M.call_closure (|
                                        M.get_associated_function (|
                                          Ty.path
                                            "delphinus_zkwasm::runtime::monitor::plugins::phantom::PhantomHelper",
                                          "is_in_phantom_function",
                                          []
                                        |),
                                        [
                                          M.SubPointer.get_struct_record_field (|
                                            M.read (| self |),
                                            "delphinus_zkwasm::runtime::monitor::plugins::table::TablePlugin",
                                            "phantom_helper"
                                          |)
                                        ]
                                      |)
                                    |)) in
                                let _ :=
                                  M.is_constant_or_break_match (|
                                    M.read (| γ |),
                                    Value.Bool true
                                  |) in
                                M.alloc (|
                                  M.never_to_any (| M.read (| M.return_ (| Value.Tuple [] |) |) |)
                                |)));
                            fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                          ]
                        |) in
                      M.match_operator (|
                        M.alloc (| Value.Tuple [] |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ := return_value in
                              let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::option::Option::Some",
                                  0
                                |) in
                              let return_value := M.copy (| γ0_0 |) in
                              M.match_operator (|
                                M.SubPointer.get_struct_record_field (|
                                  M.call_closure (|
                                    M.get_associated_function (|
                                      Ty.apply
                                        (Ty.path "core::option::Option")
                                        [
                                          Ty.apply
                                            (Ty.path "&mut")
                                            [ Ty.path "specs::etable::EventTableEntry" ]
                                        ],
                                      "unwrap",
                                      []
                                    |),
                                    [
                                      M.call_closure (|
                                        M.get_associated_function (|
                                          Ty.apply
                                            (Ty.path "slice")
                                            [ Ty.path "specs::etable::EventTableEntry" ],
                                          "last_mut",
                                          []
                                        |),
                                        [
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "core::ops::deref::DerefMut",
                                              Ty.apply
                                                (Ty.path "alloc::vec::Vec")
                                                [
                                                  Ty.path "specs::etable::EventTableEntry";
                                                  Ty.path "alloc::alloc::Global"
                                                ],
                                              [],
                                              "deref_mut",
                                              []
                                            |),
                                            [
                                              M.call_closure (|
                                                M.get_associated_function (|
                                                  Ty.path
                                                    "delphinus_zkwasm::runtime::monitor::plugins::table::etable::ETable",
                                                  "entries_mut",
                                                  []
                                                |),
                                                [
                                                  M.SubPointer.get_struct_record_field (|
                                                    M.read (| self |),
                                                    "delphinus_zkwasm::runtime::monitor::plugins::table::TablePlugin",
                                                    "etable"
                                                  |)
                                                ]
                                              |)
                                            ]
                                          |)
                                        ]
                                      |)
                                    ]
                                  |),
                                  "specs::etable::EventTableEntry",
                                  "step_info"
                                |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ0_0 :=
                                        M.SubPointer.get_struct_record_field (|
                                          γ,
                                          "specs::step::StepInfo::CallHost",
                                          "ret_val"
                                        |) in
                                      let ret_val := M.alloc (| γ0_0 |) in
                                      let _ :=
                                        M.write (|
                                          M.read (| ret_val |),
                                          Value.StructTuple
                                            "core::option::Option::Some"
                                            [
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "core::convert::Into",
                                                  Ty.path "wasmi_core::value::Value",
                                                  [ Ty.path "u64" ],
                                                  "into",
                                                  []
                                                |),
                                                [ M.read (| return_value |) ]
                                              |)
                                            ]
                                        |) in
                                      M.alloc (| Value.Tuple [] |)));
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ0_0 :=
                                        M.SubPointer.get_struct_record_field (|
                                          γ,
                                          "specs::step::StepInfo::ExternalHostCall",
                                          "value"
                                        |) in
                                      let γ0_1 :=
                                        M.SubPointer.get_struct_record_field (|
                                          γ,
                                          "specs::step::StepInfo::ExternalHostCall",
                                          "sig"
                                        |) in
                                      let value := M.alloc (| γ0_0 |) in
                                      let sig := M.copy (| γ0_1 |) in
                                      let γ :=
                                        M.alloc (|
                                          M.call_closure (|
                                            M.get_associated_function (|
                                              Ty.path
                                                "specs::external_host_call_table::ExternalHostCallSignature",
                                              "is_ret",
                                              []
                                            |),
                                            [ sig ]
                                          |)
                                        |) in
                                      let _ :=
                                        M.is_constant_or_break_match (|
                                          M.read (| γ |),
                                          Value.Bool true
                                        |) in
                                      let _ :=
                                        M.write (|
                                          M.read (| value |),
                                          Value.StructTuple
                                            "core::option::Option::Some"
                                            [
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "core::convert::Into",
                                                  Ty.path "wasmi_core::value::Value",
                                                  [ Ty.path "u64" ],
                                                  "into",
                                                  []
                                                |),
                                                [ M.read (| return_value |) ]
                                              |)
                                            ]
                                        |) in
                                      M.alloc (| Value.Tuple [] |)));
                                  fun γ =>
                                    ltac:(M.monadic
                                      (M.alloc (|
                                        M.never_to_any (|
                                          M.call_closure (|
                                            M.get_function (| "core::panicking::panic", [] |),
                                            [
                                              M.read (|
                                                Value.String
                                                  "internal error: entered unreachable code"
                                              |)
                                            ]
                                          |)
                                        |)
                                      |)))
                                ]
                              |)));
                          fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                        ]
                      |)
                    |)))
                |)))
            | _, _ => M.impossible
            end.
          
          Axiom Implements :
            M.IsTraitInstance
              "wasmi::monitor::Monitor"
              Self
              (* Trait polymorphic types *) []
              (* Instance *)
              [
                ("register_module", InstanceField.Method register_module);
                ("invoke_exported_function_pre_hook",
                  InstanceField.Method invoke_exported_function_pre_hook);
                ("invoke_instruction_pre_hook", InstanceField.Method invoke_instruction_pre_hook);
                ("invoke_instruction_post_hook", InstanceField.Method invoke_instruction_post_hook);
                ("invoke_call_host_post_hook", InstanceField.Method invoke_call_host_post_hook)
              ].
        End Impl_wasmi_monitor_Monitor_for_delphinus_zkwasm_runtime_monitor_plugins_table_TablePlugin.
      End table.
    End plugins.
  End monitor.
End runtime.
