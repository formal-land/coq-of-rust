(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module runtime.
  Module monitor.
    Module table_monitor.
      (* StructRecord
        {
          name := "TableMonitor";
          ty_params := [];
          fields :=
            [
              ("table_plugin",
                Ty.path "delphinus_zkwasm::runtime::monitor::plugins::table::TablePlugin");
              ("statistic_plugin",
                Ty.path "delphinus_zkwasm::runtime::monitor::plugins::statistic::StatisticPlugin")
            ];
        } *)
      
      Module Impl_delphinus_zkwasm_runtime_monitor_table_monitor_TableMonitor.
        Definition Self : Ty.t :=
          Ty.path "delphinus_zkwasm::runtime::monitor::table_monitor::TableMonitor".
        
        (*
            pub fn new(k: u32, phantom_regex: &Vec<String>, backend: TraceBackend, env: &HostEnv) -> Self {
                let wasm_input = env
                    .resolve_func(
                        "wasm_input",
                        &Signature::new(vec![ValueType::I32], Some(ValueType::I64)),
                    )
                    .expect("Failed to resolve wasm_input function, please make sure it is imported in the wasm image.");
        
                Self {
                    table_plugin: TablePlugin::new(
                        k,
                        env.function_description_table(),
                        phantom_regex,
                        wasm_input.clone(),
                        backend,
                    ),
                    statistic_plugin: StatisticPlugin::new(phantom_regex, wasm_input),
                }
            }
        *)
        Definition new (τ : list Ty.t) (α : list Value.t) : M :=
          match τ, α with
          | [], [ k; phantom_regex; backend; env ] =>
            ltac:(M.monadic
              (let k := M.alloc (| k |) in
              let phantom_regex := M.alloc (| phantom_regex |) in
              let backend := M.alloc (| backend |) in
              let env := M.alloc (| env |) in
              M.read (|
                let wasm_input :=
                  M.alloc (|
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path "core::result::Result")
                          [ Ty.path "wasmi::func::FuncRef"; Ty.path "wasmi::Error" ],
                        "expect",
                        []
                      |),
                      [
                        M.call_closure (|
                          M.get_trait_method (|
                            "wasmi::imports::ModuleImportResolver",
                            Ty.path "delphinus_zkwasm::runtime::host::host_env::HostEnv",
                            [],
                            "resolve_func",
                            []
                          |),
                          [
                            M.read (| env |);
                            M.read (| Value.String "wasm_input" |);
                            M.alloc (|
                              M.call_closure (|
                                M.get_associated_function (|
                                  Ty.path "wasmi::types::Signature",
                                  "new",
                                  [
                                    Ty.apply
                                      (Ty.path "alloc::vec::Vec")
                                      [
                                        Ty.path "wasmi_core::value::ValueType";
                                        Ty.path "alloc::alloc::Global"
                                      ]
                                  ]
                                |),
                                [
                                  M.call_closure (|
                                    M.get_associated_function (|
                                      Ty.apply
                                        (Ty.path "slice")
                                        [ Ty.path "wasmi_core::value::ValueType" ],
                                      "into_vec",
                                      [ Ty.path "alloc::alloc::Global" ]
                                    |),
                                    [
                                      (* Unsize *)
                                      M.pointer_coercion
                                        (M.read (|
                                          M.call_closure (|
                                            M.get_associated_function (|
                                              Ty.apply
                                                (Ty.path "alloc::boxed::Box")
                                                [
                                                  Ty.apply
                                                    (Ty.path "array")
                                                    [ Ty.path "wasmi_core::value::ValueType" ];
                                                  Ty.path "alloc::alloc::Global"
                                                ],
                                              "new",
                                              []
                                            |),
                                            [
                                              M.alloc (|
                                                Value.Array
                                                  [
                                                    Value.StructTuple
                                                      "wasmi_core::value::ValueType::I32"
                                                      []
                                                  ]
                                              |)
                                            ]
                                          |)
                                        |))
                                    ]
                                  |);
                                  Value.StructTuple
                                    "core::option::Option::Some"
                                    [ Value.StructTuple "wasmi_core::value::ValueType::I64" [] ]
                                ]
                              |)
                            |)
                          ]
                        |);
                        M.read (|
                          Value.String
                            "Failed to resolve wasm_input function, please make sure it is imported in the wasm image."
                        |)
                      ]
                    |)
                  |) in
                M.alloc (|
                  Value.StructRecord
                    "delphinus_zkwasm::runtime::monitor::table_monitor::TableMonitor"
                    [
                      ("table_plugin",
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.path
                              "delphinus_zkwasm::runtime::monitor::plugins::table::TablePlugin",
                            "new",
                            []
                          |),
                          [
                            M.read (| k |);
                            M.call_closure (|
                              M.get_associated_function (|
                                Ty.path "delphinus_zkwasm::runtime::host::host_env::HostEnv",
                                "function_description_table",
                                []
                              |),
                              [ M.read (| env |) ]
                            |);
                            M.read (| phantom_regex |);
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::clone::Clone",
                                Ty.path "wasmi::func::FuncRef",
                                [],
                                "clone",
                                []
                              |),
                              [ wasm_input ]
                            |);
                            M.read (| backend |)
                          ]
                        |));
                      ("statistic_plugin",
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.path
                              "delphinus_zkwasm::runtime::monitor::plugins::statistic::StatisticPlugin",
                            "new",
                            []
                          |),
                          [ M.read (| phantom_regex |); M.read (| wasm_input |) ]
                        |))
                    ]
                |)
              |)))
          | _, _ => M.impossible
          end.
        
        Axiom AssociatedFunction_new : M.IsAssociatedFunction Self "new" new.
        
        (*
            pub fn into_compilation_table(self) -> CompilationTable {
                self.table_plugin.into_compilation_table()
            }
        *)
        Definition into_compilation_table (τ : list Ty.t) (α : list Value.t) : M :=
          match τ, α with
          | [], [ self ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              M.call_closure (|
                M.get_associated_function (|
                  Ty.path "delphinus_zkwasm::runtime::monitor::plugins::table::TablePlugin",
                  "into_compilation_table",
                  []
                |),
                [
                  M.SubPointer.get_struct_record_field (|
                    self,
                    "delphinus_zkwasm::runtime::monitor::table_monitor::TableMonitor",
                    "table_plugin"
                  |)
                ]
              |)))
          | _, _ => M.impossible
          end.
        
        Axiom AssociatedFunction_into_compilation_table :
          M.IsAssociatedFunction Self "into_compilation_table" into_compilation_table.
        
        (*
            pub fn into_tables(self) -> Tables {
                self.table_plugin.into_tables()
            }
        *)
        Definition into_tables (τ : list Ty.t) (α : list Value.t) : M :=
          match τ, α with
          | [], [ self ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              M.call_closure (|
                M.get_associated_function (|
                  Ty.path "delphinus_zkwasm::runtime::monitor::plugins::table::TablePlugin",
                  "into_tables",
                  []
                |),
                [
                  M.read (|
                    M.SubPointer.get_struct_record_field (|
                      self,
                      "delphinus_zkwasm::runtime::monitor::table_monitor::TableMonitor",
                      "table_plugin"
                    |)
                  |)
                ]
              |)))
          | _, _ => M.impossible
          end.
        
        Axiom AssociatedFunction_into_tables :
          M.IsAssociatedFunction Self "into_tables" into_tables.
      End Impl_delphinus_zkwasm_runtime_monitor_table_monitor_TableMonitor.
      
      Module Impl_wasmi_monitor_Monitor_for_delphinus_zkwasm_runtime_monitor_table_monitor_TableMonitor.
        Definition Self : Ty.t :=
          Ty.path "delphinus_zkwasm::runtime::monitor::table_monitor::TableMonitor".
        
        (*
            fn register_module(
                &mut self,
                module: &Module,
                module_ref: &ModuleRef,
                entry: &str,
            ) -> Result<(), wasmi::Error> {
                self.table_plugin
                    .register_module(module, module_ref, entry)?;
                self.statistic_plugin
                    .register_module(module, module_ref, entry)?;
        
                Ok(())
            }
        *)
        Definition register_module (τ : list Ty.t) (α : list Value.t) : M :=
          match τ, α with
          | [], [ self; module; module_ref; entry ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              let module := M.alloc (| module |) in
              let module_ref := M.alloc (| module_ref |) in
              let entry := M.alloc (| entry |) in
              M.catch_return (|
                ltac:(M.monadic
                  (M.read (|
                    let _ :=
                      M.match_operator (|
                        M.alloc (|
                          M.call_closure (|
                            M.get_trait_method (|
                              "core::ops::try_trait::Try",
                              Ty.apply
                                (Ty.path "core::result::Result")
                                [ Ty.tuple []; Ty.path "wasmi::Error" ],
                              [],
                              "branch",
                              []
                            |),
                            [
                              M.call_closure (|
                                M.get_trait_method (|
                                  "wasmi::monitor::Monitor",
                                  Ty.path
                                    "delphinus_zkwasm::runtime::monitor::plugins::table::TablePlugin",
                                  [],
                                  "register_module",
                                  []
                                |),
                                [
                                  M.SubPointer.get_struct_record_field (|
                                    M.read (| self |),
                                    "delphinus_zkwasm::runtime::monitor::table_monitor::TableMonitor",
                                    "table_plugin"
                                  |);
                                  M.read (| module |);
                                  M.read (| module_ref |);
                                  M.read (| entry |)
                                ]
                              |)
                            ]
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Break",
                                  0
                                |) in
                              let residual := M.copy (| γ0_0 |) in
                              M.alloc (|
                                M.never_to_any (|
                                  M.read (|
                                    M.return_ (|
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "core::ops::try_trait::FromResidual",
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            [ Ty.tuple []; Ty.path "wasmi::Error" ],
                                          [
                                            Ty.apply
                                              (Ty.path "core::result::Result")
                                              [
                                                Ty.path "core::convert::Infallible";
                                                Ty.path "wasmi::Error"
                                              ]
                                          ],
                                          "from_residual",
                                          []
                                        |),
                                        [ M.read (| residual |) ]
                                      |)
                                    |)
                                  |)
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Continue",
                                  0
                                |) in
                              let val := M.copy (| γ0_0 |) in
                              val))
                        ]
                      |) in
                    let _ :=
                      M.match_operator (|
                        M.alloc (|
                          M.call_closure (|
                            M.get_trait_method (|
                              "core::ops::try_trait::Try",
                              Ty.apply
                                (Ty.path "core::result::Result")
                                [ Ty.tuple []; Ty.path "wasmi::Error" ],
                              [],
                              "branch",
                              []
                            |),
                            [
                              M.call_closure (|
                                M.get_trait_method (|
                                  "wasmi::monitor::Monitor",
                                  Ty.path
                                    "delphinus_zkwasm::runtime::monitor::plugins::statistic::StatisticPlugin",
                                  [],
                                  "register_module",
                                  []
                                |),
                                [
                                  M.SubPointer.get_struct_record_field (|
                                    M.read (| self |),
                                    "delphinus_zkwasm::runtime::monitor::table_monitor::TableMonitor",
                                    "statistic_plugin"
                                  |);
                                  M.read (| module |);
                                  M.read (| module_ref |);
                                  M.read (| entry |)
                                ]
                              |)
                            ]
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Break",
                                  0
                                |) in
                              let residual := M.copy (| γ0_0 |) in
                              M.alloc (|
                                M.never_to_any (|
                                  M.read (|
                                    M.return_ (|
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "core::ops::try_trait::FromResidual",
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            [ Ty.tuple []; Ty.path "wasmi::Error" ],
                                          [
                                            Ty.apply
                                              (Ty.path "core::result::Result")
                                              [
                                                Ty.path "core::convert::Infallible";
                                                Ty.path "wasmi::Error"
                                              ]
                                          ],
                                          "from_residual",
                                          []
                                        |),
                                        [ M.read (| residual |) ]
                                      |)
                                    |)
                                  |)
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Continue",
                                  0
                                |) in
                              let val := M.copy (| γ0_0 |) in
                              val))
                        ]
                      |) in
                    M.alloc (| Value.StructTuple "core::result::Result::Ok" [ Value.Tuple [] ] |)
                  |)))
              |)))
          | _, _ => M.impossible
          end.
        
        (*
            fn invoke_exported_function_pre_hook(&mut self) {
                self.table_plugin.invoke_exported_function_pre_hook();
                self.statistic_plugin.invoke_exported_function_pre_hook();
            }
        *)
        Definition invoke_exported_function_pre_hook (τ : list Ty.t) (α : list Value.t) : M :=
          match τ, α with
          | [], [ self ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              M.read (|
                let _ :=
                  M.alloc (|
                    M.call_closure (|
                      M.get_trait_method (|
                        "wasmi::monitor::Monitor",
                        Ty.path "delphinus_zkwasm::runtime::monitor::plugins::table::TablePlugin",
                        [],
                        "invoke_exported_function_pre_hook",
                        []
                      |),
                      [
                        M.SubPointer.get_struct_record_field (|
                          M.read (| self |),
                          "delphinus_zkwasm::runtime::monitor::table_monitor::TableMonitor",
                          "table_plugin"
                        |)
                      ]
                    |)
                  |) in
                let _ :=
                  M.alloc (|
                    M.call_closure (|
                      M.get_trait_method (|
                        "wasmi::monitor::Monitor",
                        Ty.path
                          "delphinus_zkwasm::runtime::monitor::plugins::statistic::StatisticPlugin",
                        [],
                        "invoke_exported_function_pre_hook",
                        []
                      |),
                      [
                        M.SubPointer.get_struct_record_field (|
                          M.read (| self |),
                          "delphinus_zkwasm::runtime::monitor::table_monitor::TableMonitor",
                          "statistic_plugin"
                        |)
                      ]
                    |)
                  |) in
                M.alloc (| Value.Tuple [] |)
              |)))
          | _, _ => M.impossible
          end.
        
        (*
            fn invoke_instruction_pre_hook(
                &mut self,
                value_stack: &ValueStack,
                function_context: &FunctionContext,
                instruction: &Instruction,
            ) {
                self.table_plugin
                    .invoke_instruction_pre_hook(value_stack, function_context, instruction);
                self.statistic_plugin.invoke_instruction_pre_hook(
                    value_stack,
                    function_context,
                    instruction,
                );
            }
        *)
        Definition invoke_instruction_pre_hook (τ : list Ty.t) (α : list Value.t) : M :=
          match τ, α with
          | [], [ self; value_stack; function_context; instruction ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              let value_stack := M.alloc (| value_stack |) in
              let function_context := M.alloc (| function_context |) in
              let instruction := M.alloc (| instruction |) in
              M.read (|
                let _ :=
                  M.alloc (|
                    M.call_closure (|
                      M.get_trait_method (|
                        "wasmi::monitor::Monitor",
                        Ty.path "delphinus_zkwasm::runtime::monitor::plugins::table::TablePlugin",
                        [],
                        "invoke_instruction_pre_hook",
                        []
                      |),
                      [
                        M.SubPointer.get_struct_record_field (|
                          M.read (| self |),
                          "delphinus_zkwasm::runtime::monitor::table_monitor::TableMonitor",
                          "table_plugin"
                        |);
                        M.read (| value_stack |);
                        M.read (| function_context |);
                        M.read (| instruction |)
                      ]
                    |)
                  |) in
                let _ :=
                  M.alloc (|
                    M.call_closure (|
                      M.get_trait_method (|
                        "wasmi::monitor::Monitor",
                        Ty.path
                          "delphinus_zkwasm::runtime::monitor::plugins::statistic::StatisticPlugin",
                        [],
                        "invoke_instruction_pre_hook",
                        []
                      |),
                      [
                        M.SubPointer.get_struct_record_field (|
                          M.read (| self |),
                          "delphinus_zkwasm::runtime::monitor::table_monitor::TableMonitor",
                          "statistic_plugin"
                        |);
                        M.read (| value_stack |);
                        M.read (| function_context |);
                        M.read (| instruction |)
                      ]
                    |)
                  |) in
                M.alloc (| Value.Tuple [] |)
              |)))
          | _, _ => M.impossible
          end.
        
        (*
            fn invoke_instruction_post_hook(
                &mut self,
                fid: u32,
                iid: u32,
                sp: u32,
                allocated_memory_pages: u32,
                value_stack: &ValueStack,
                function_context: &FunctionContext,
                instruction: &Instruction,
                outcome: &InstructionOutcome,
            ) {
                self.table_plugin.invoke_instruction_post_hook(
                    fid,
                    iid,
                    sp,
                    allocated_memory_pages,
                    value_stack,
                    function_context,
                    instruction,
                    outcome,
                );
                self.statistic_plugin.invoke_instruction_post_hook(
                    fid,
                    iid,
                    sp,
                    allocated_memory_pages,
                    value_stack,
                    function_context,
                    instruction,
                    outcome,
                );
            }
        *)
        Definition invoke_instruction_post_hook (τ : list Ty.t) (α : list Value.t) : M :=
          match τ, α with
          | [],
              [
                self;
                fid;
                iid;
                sp;
                allocated_memory_pages;
                value_stack;
                function_context;
                instruction;
                outcome
              ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              let fid := M.alloc (| fid |) in
              let iid := M.alloc (| iid |) in
              let sp := M.alloc (| sp |) in
              let allocated_memory_pages := M.alloc (| allocated_memory_pages |) in
              let value_stack := M.alloc (| value_stack |) in
              let function_context := M.alloc (| function_context |) in
              let instruction := M.alloc (| instruction |) in
              let outcome := M.alloc (| outcome |) in
              M.read (|
                let _ :=
                  M.alloc (|
                    M.call_closure (|
                      M.get_trait_method (|
                        "wasmi::monitor::Monitor",
                        Ty.path "delphinus_zkwasm::runtime::monitor::plugins::table::TablePlugin",
                        [],
                        "invoke_instruction_post_hook",
                        []
                      |),
                      [
                        M.SubPointer.get_struct_record_field (|
                          M.read (| self |),
                          "delphinus_zkwasm::runtime::monitor::table_monitor::TableMonitor",
                          "table_plugin"
                        |);
                        M.read (| fid |);
                        M.read (| iid |);
                        M.read (| sp |);
                        M.read (| allocated_memory_pages |);
                        M.read (| value_stack |);
                        M.read (| function_context |);
                        M.read (| instruction |);
                        M.read (| outcome |)
                      ]
                    |)
                  |) in
                let _ :=
                  M.alloc (|
                    M.call_closure (|
                      M.get_trait_method (|
                        "wasmi::monitor::Monitor",
                        Ty.path
                          "delphinus_zkwasm::runtime::monitor::plugins::statistic::StatisticPlugin",
                        [],
                        "invoke_instruction_post_hook",
                        []
                      |),
                      [
                        M.SubPointer.get_struct_record_field (|
                          M.read (| self |),
                          "delphinus_zkwasm::runtime::monitor::table_monitor::TableMonitor",
                          "statistic_plugin"
                        |);
                        M.read (| fid |);
                        M.read (| iid |);
                        M.read (| sp |);
                        M.read (| allocated_memory_pages |);
                        M.read (| value_stack |);
                        M.read (| function_context |);
                        M.read (| instruction |);
                        M.read (| outcome |)
                      ]
                    |)
                  |) in
                M.alloc (| Value.Tuple [] |)
              |)))
          | _, _ => M.impossible
          end.
        
        (*
            fn invoke_call_host_post_hook(&mut self, return_value: Option<RuntimeValue>) {
                self.table_plugin.invoke_call_host_post_hook(return_value);
                self.statistic_plugin
                    .invoke_call_host_post_hook(return_value);
            }
        *)
        Definition invoke_call_host_post_hook (τ : list Ty.t) (α : list Value.t) : M :=
          match τ, α with
          | [], [ self; return_value ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              let return_value := M.alloc (| return_value |) in
              M.read (|
                let _ :=
                  M.alloc (|
                    M.call_closure (|
                      M.get_trait_method (|
                        "wasmi::monitor::Monitor",
                        Ty.path "delphinus_zkwasm::runtime::monitor::plugins::table::TablePlugin",
                        [],
                        "invoke_call_host_post_hook",
                        []
                      |),
                      [
                        M.SubPointer.get_struct_record_field (|
                          M.read (| self |),
                          "delphinus_zkwasm::runtime::monitor::table_monitor::TableMonitor",
                          "table_plugin"
                        |);
                        M.read (| return_value |)
                      ]
                    |)
                  |) in
                let _ :=
                  M.alloc (|
                    M.call_closure (|
                      M.get_trait_method (|
                        "wasmi::monitor::Monitor",
                        Ty.path
                          "delphinus_zkwasm::runtime::monitor::plugins::statistic::StatisticPlugin",
                        [],
                        "invoke_call_host_post_hook",
                        []
                      |),
                      [
                        M.SubPointer.get_struct_record_field (|
                          M.read (| self |),
                          "delphinus_zkwasm::runtime::monitor::table_monitor::TableMonitor",
                          "statistic_plugin"
                        |);
                        M.read (| return_value |)
                      ]
                    |)
                  |) in
                M.alloc (| Value.Tuple [] |)
              |)))
          | _, _ => M.impossible
          end.
        
        Axiom Implements :
          M.IsTraitInstance
            "wasmi::monitor::Monitor"
            Self
            (* Trait polymorphic types *) []
            (* Instance *)
            [
              ("register_module", InstanceField.Method register_module);
              ("invoke_exported_function_pre_hook",
                InstanceField.Method invoke_exported_function_pre_hook);
              ("invoke_instruction_pre_hook", InstanceField.Method invoke_instruction_pre_hook);
              ("invoke_instruction_post_hook", InstanceField.Method invoke_instruction_post_hook);
              ("invoke_call_host_post_hook", InstanceField.Method invoke_call_host_post_hook)
            ].
      End Impl_wasmi_monitor_Monitor_for_delphinus_zkwasm_runtime_monitor_table_monitor_TableMonitor.
      
      Module Impl_delphinus_zkwasm_runtime_monitor_WasmiMonitor_for_delphinus_zkwasm_runtime_monitor_table_monitor_TableMonitor.
        Definition Self : Ty.t :=
          Ty.path "delphinus_zkwasm::runtime::monitor::table_monitor::TableMonitor".
        
        (*
            fn expose_observer(&self) -> Rc<RefCell<Observer>> {
                self.statistic_plugin.expose_observer()
            }
        *)
        Definition expose_observer (τ : list Ty.t) (α : list Value.t) : M :=
          match τ, α with
          | [], [ self ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              M.call_closure (|
                M.get_associated_function (|
                  Ty.path "delphinus_zkwasm::runtime::monitor::plugins::statistic::StatisticPlugin",
                  "expose_observer",
                  []
                |),
                [
                  M.SubPointer.get_struct_record_field (|
                    M.read (| self |),
                    "delphinus_zkwasm::runtime::monitor::table_monitor::TableMonitor",
                    "statistic_plugin"
                  |)
                ]
              |)))
          | _, _ => M.impossible
          end.
        
        Axiom Implements :
          M.IsTraitInstance
            "delphinus_zkwasm::runtime::monitor::WasmiMonitor"
            Self
            (* Trait polymorphic types *) []
            (* Instance *) [ ("expose_observer", InstanceField.Method expose_observer) ].
      End Impl_delphinus_zkwasm_runtime_monitor_WasmiMonitor_for_delphinus_zkwasm_runtime_monitor_table_monitor_TableMonitor.
    End table_monitor.
  End monitor.
End runtime.
