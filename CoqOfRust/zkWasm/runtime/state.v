(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module runtime.
  Module state.
    (* Trait *)
    (* Empty module 'UpdateInitMemoryTable' *)
    
    (* Trait *)
    (* Empty module 'UpdateInitializationState' *)
    
    Module Impl_delphinus_zkwasm_runtime_state_UpdateInitMemoryTable_for_specs_imtable_InitMemoryTable.
      Definition Self : Ty.t := Ty.path "specs::imtable::InitMemoryTable".
      
      (*
          fn update_init_memory_table(&self, execution_table: &EventTable) -> InitMemoryTable {
              // First insert origin imtable entries which may be overwritten.
              let mut map = self.0.clone();
      
              let mut it = execution_table.entries().iter();
              while let Some(etable_entry) = it.next() {
                  let memory_writing_entires = memory_event_of_step(etable_entry)
                      .into_iter()
                      .filter(|entry| entry.atype == AccessType::Write);
      
                  for mentry in memory_writing_entires {
                      map.insert(
                          (mentry.ltype, mentry.offset),
                          InitMemoryTableEntry {
                              ltype: mentry.ltype,
                              is_mutable: mentry.is_mutable,
                              offset: mentry.offset,
                              vtype: mentry.vtype,
                              value: mentry.value,
                              eid: etable_entry.eid,
                          },
                      );
                  }
              }
      
              InitMemoryTable(map)
          }
      *)
      Definition update_init_memory_table (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ self; execution_table ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let execution_table := M.alloc (| execution_table |) in
            M.read (|
              let map :=
                M.alloc (|
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.apply
                        (Ty.path "alloc::collections::btree::map::BTreeMap")
                        [
                          Ty.tuple [ Ty.path "specs::mtable::LocationType"; Ty.path "u32" ];
                          Ty.path "specs::imtable::InitMemoryTableEntry";
                          Ty.path "alloc::alloc::Global"
                        ],
                      [],
                      "clone",
                      []
                    |),
                    [
                      M.SubPointer.get_struct_tuple_field (|
                        M.read (| self |),
                        "specs::imtable::InitMemoryTable",
                        0
                      |)
                    ]
                  |)
                |) in
              let it :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply (Ty.path "slice") [ Ty.path "specs::etable::EventTableEntry" ],
                      "iter",
                      []
                    |),
                    [
                      M.call_closure (|
                        M.get_trait_method (|
                          "core::ops::deref::Deref",
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            [
                              Ty.path "specs::etable::EventTableEntry";
                              Ty.path "alloc::alloc::Global"
                            ],
                          [],
                          "deref",
                          []
                        |),
                        [
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.path "specs::etable::EventTable",
                              "entries",
                              []
                            |),
                            [ M.read (| execution_table |) ]
                          |)
                        ]
                      |)
                    ]
                  |)
                |) in
              let _ :=
                M.loop (|
                  ltac:(M.monadic
                    (M.match_operator (|
                      M.alloc (| Value.Tuple [] |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ :=
                              M.alloc (|
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "core::iter::traits::iterator::Iterator",
                                    Ty.apply
                                      (Ty.path "core::slice::iter::Iter")
                                      [ Ty.path "specs::etable::EventTableEntry" ],
                                    [],
                                    "next",
                                    []
                                  |),
                                  [ it ]
                                |)
                              |) in
                            let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::option::Option::Some",
                                0
                              |) in
                            let etable_entry := M.copy (| γ0_0 |) in
                            let memory_writing_entires :=
                              M.alloc (|
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "core::iter::traits::iterator::Iterator",
                                    Ty.apply
                                      (Ty.path "alloc::vec::into_iter::IntoIter")
                                      [
                                        Ty.path "specs::mtable::MemoryTableEntry";
                                        Ty.path "alloc::alloc::Global"
                                      ],
                                    [],
                                    "filter",
                                    [
                                      Ty.function
                                        [
                                          Ty.tuple
                                            [
                                              Ty.apply
                                                (Ty.path "&")
                                                [ Ty.path "specs::mtable::MemoryTableEntry" ]
                                            ]
                                        ]
                                        (Ty.path "bool")
                                    ]
                                  |),
                                  [
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::iter::traits::collect::IntoIterator",
                                        Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          [
                                            Ty.path "specs::mtable::MemoryTableEntry";
                                            Ty.path "alloc::alloc::Global"
                                          ],
                                        [],
                                        "into_iter",
                                        []
                                      |),
                                      [
                                        M.call_closure (|
                                          M.get_function (|
                                            "delphinus_zkwasm::runtime::memory_event_of_step",
                                            []
                                          |),
                                          [ M.read (| etable_entry |) ]
                                        |)
                                      ]
                                    |);
                                    M.closure
                                      (fun γ =>
                                        ltac:(M.monadic
                                          match γ with
                                          | [ α0 ] =>
                                            M.match_operator (|
                                              M.alloc (| α0 |),
                                              [
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (let entry := M.copy (| γ |) in
                                                    M.call_closure (|
                                                      M.get_trait_method (|
                                                        "core::cmp::PartialEq",
                                                        Ty.path "specs::mtable::AccessType",
                                                        [ Ty.path "specs::mtable::AccessType" ],
                                                        "eq",
                                                        []
                                                      |),
                                                      [
                                                        M.SubPointer.get_struct_record_field (|
                                                          M.read (| entry |),
                                                          "specs::mtable::MemoryTableEntry",
                                                          "atype"
                                                        |);
                                                        M.alloc (|
                                                          Value.StructTuple
                                                            "specs::mtable::AccessType::Write"
                                                            []
                                                        |)
                                                      ]
                                                    |)))
                                              ]
                                            |)
                                          | _ => M.impossible (||)
                                          end))
                                  ]
                                |)
                              |) in
                            M.use
                              (M.match_operator (|
                                M.alloc (|
                                  M.call_closure (|
                                    M.get_trait_method (|
                                      "core::iter::traits::collect::IntoIterator",
                                      Ty.apply
                                        (Ty.path "core::iter::adapters::filter::Filter")
                                        [
                                          Ty.apply
                                            (Ty.path "alloc::vec::into_iter::IntoIter")
                                            [
                                              Ty.path "specs::mtable::MemoryTableEntry";
                                              Ty.path "alloc::alloc::Global"
                                            ];
                                          Ty.function
                                            [
                                              Ty.tuple
                                                [
                                                  Ty.apply
                                                    (Ty.path "&")
                                                    [ Ty.path "specs::mtable::MemoryTableEntry" ]
                                                ]
                                            ]
                                            (Ty.path "bool")
                                        ],
                                      [],
                                      "into_iter",
                                      []
                                    |),
                                    [ M.read (| memory_writing_entires |) ]
                                  |)
                                |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let iter := M.copy (| γ |) in
                                      M.loop (|
                                        ltac:(M.monadic
                                          (let _ :=
                                            M.match_operator (|
                                              M.alloc (|
                                                M.call_closure (|
                                                  M.get_trait_method (|
                                                    "core::iter::traits::iterator::Iterator",
                                                    Ty.apply
                                                      (Ty.path
                                                        "core::iter::adapters::filter::Filter")
                                                      [
                                                        Ty.apply
                                                          (Ty.path
                                                            "alloc::vec::into_iter::IntoIter")
                                                          [
                                                            Ty.path
                                                              "specs::mtable::MemoryTableEntry";
                                                            Ty.path "alloc::alloc::Global"
                                                          ];
                                                        Ty.function
                                                          [
                                                            Ty.tuple
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "&")
                                                                  [
                                                                    Ty.path
                                                                      "specs::mtable::MemoryTableEntry"
                                                                  ]
                                                              ]
                                                          ]
                                                          (Ty.path "bool")
                                                      ],
                                                    [],
                                                    "next",
                                                    []
                                                  |),
                                                  [ iter ]
                                                |)
                                              |),
                                              [
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (M.alloc (|
                                                      M.never_to_any (| M.read (| M.break (||) |) |)
                                                    |)));
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (let γ0_0 :=
                                                      M.SubPointer.get_struct_tuple_field (|
                                                        γ,
                                                        "core::option::Option::Some",
                                                        0
                                                      |) in
                                                    let mentry := M.copy (| γ0_0 |) in
                                                    let _ :=
                                                      M.alloc (|
                                                        M.call_closure (|
                                                          M.get_associated_function (|
                                                            Ty.apply
                                                              (Ty.path
                                                                "alloc::collections::btree::map::BTreeMap")
                                                              [
                                                                Ty.tuple
                                                                  [
                                                                    Ty.path
                                                                      "specs::mtable::LocationType";
                                                                    Ty.path "u32"
                                                                  ];
                                                                Ty.path
                                                                  "specs::imtable::InitMemoryTableEntry";
                                                                Ty.path "alloc::alloc::Global"
                                                              ],
                                                            "insert",
                                                            []
                                                          |),
                                                          [
                                                            map;
                                                            Value.Tuple
                                                              [
                                                                M.read (|
                                                                  M.SubPointer.get_struct_record_field (|
                                                                    mentry,
                                                                    "specs::mtable::MemoryTableEntry",
                                                                    "ltype"
                                                                  |)
                                                                |);
                                                                M.read (|
                                                                  M.SubPointer.get_struct_record_field (|
                                                                    mentry,
                                                                    "specs::mtable::MemoryTableEntry",
                                                                    "offset"
                                                                  |)
                                                                |)
                                                              ];
                                                            Value.StructRecord
                                                              "specs::imtable::InitMemoryTableEntry"
                                                              [
                                                                ("ltype",
                                                                  M.read (|
                                                                    M.SubPointer.get_struct_record_field (|
                                                                      mentry,
                                                                      "specs::mtable::MemoryTableEntry",
                                                                      "ltype"
                                                                    |)
                                                                  |));
                                                                ("is_mutable",
                                                                  M.read (|
                                                                    M.SubPointer.get_struct_record_field (|
                                                                      mentry,
                                                                      "specs::mtable::MemoryTableEntry",
                                                                      "is_mutable"
                                                                    |)
                                                                  |));
                                                                ("offset",
                                                                  M.read (|
                                                                    M.SubPointer.get_struct_record_field (|
                                                                      mentry,
                                                                      "specs::mtable::MemoryTableEntry",
                                                                      "offset"
                                                                    |)
                                                                  |));
                                                                ("vtype",
                                                                  M.read (|
                                                                    M.SubPointer.get_struct_record_field (|
                                                                      mentry,
                                                                      "specs::mtable::MemoryTableEntry",
                                                                      "vtype"
                                                                    |)
                                                                  |));
                                                                ("value",
                                                                  M.read (|
                                                                    M.SubPointer.get_struct_record_field (|
                                                                      mentry,
                                                                      "specs::mtable::MemoryTableEntry",
                                                                      "value"
                                                                    |)
                                                                  |));
                                                                ("eid",
                                                                  M.read (|
                                                                    M.SubPointer.get_struct_record_field (|
                                                                      M.read (| etable_entry |),
                                                                      "specs::etable::EventTableEntry",
                                                                      "eid"
                                                                    |)
                                                                  |))
                                                              ]
                                                          ]
                                                        |)
                                                      |) in
                                                    M.alloc (| Value.Tuple [] |)))
                                              ]
                                            |) in
                                          M.alloc (| Value.Tuple [] |)))
                                      |)))
                                ]
                              |))));
                        fun γ =>
                          ltac:(M.monadic
                            (M.alloc (|
                              M.never_to_any (|
                                M.read (|
                                  let _ :=
                                    M.alloc (| M.never_to_any (| M.read (| M.break (||) |) |) |) in
                                  M.alloc (| Value.Tuple [] |)
                                |)
                              |)
                            |)))
                      ]
                    |)))
                |) in
              M.alloc (| Value.StructTuple "specs::imtable::InitMemoryTable" [ M.read (| map |) ] |)
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "delphinus_zkwasm::runtime::state::UpdateInitMemoryTable"
          Self
          (* Trait polymorphic types *) []
          (* Instance *)
          [ ("update_init_memory_table", InstanceField.Method update_init_memory_table) ].
    End Impl_delphinus_zkwasm_runtime_state_UpdateInitMemoryTable_for_specs_imtable_InitMemoryTable.
    
    Module Impl_delphinus_zkwasm_runtime_state_UpdateInitializationState_for_specs_state_InitializationState_u32_num_bigint_biguint_BigUint.
      Definition Self : Ty.t :=
        Ty.apply
          (Ty.path "specs::state::InitializationState")
          [ Ty.path "u32"; Ty.path "num_bigint::biguint::BigUint" ].
      
      (*
          fn update_initialization_state(
              &self,
              execution_table: &EventTable,
              configure_table: &ConfigureTable,
              // None indicates last slice
              next_event_entry: Option<&EventTableEntry>,
          ) -> InitializationState<u32, BigUint> {
              let mut host_public_inputs = self.host_public_inputs;
              let mut context_in_index = self.context_in_index;
              let mut context_out_index = self.context_out_index;
              let mut external_host_call_call_index = self.external_host_call_call_index;
      
              #[cfg(feature = "continuation")]
              let mut jops = self.jops.clone();
      
              for entry in execution_table.entries() {
                  match &entry.step_info {
                      // TODO: fix hard code
                      StepInfo::CallHost {
                          plugin,
                          function_name,
                          args,
                          ..
                      } => {
                          if *plugin == HostPlugin::HostInput {
                              if (function_name == "wasm_input" && args[0] != 0)
                                  || function_name == "wasm_output"
                              {
                                  host_public_inputs += 1;
                              }
                          } else if *plugin == HostPlugin::Context {
                              if function_name == "wasm_read_context" {
                                  context_in_index += 1;
                              } else if function_name == "wasm_write_context" {
                                  context_out_index += 1;
                              }
                          }
                      }
                      StepInfo::ExternalHostCall { .. } => external_host_call_call_index += 1,
                      StepInfo::Call { .. } | StepInfo::CallIndirect { .. } => {
                          #[cfg(feature = "continuation")]
                          {
                              jops += crate::circuits::jtable::encode_jops(0, 1);
                          }
                      }
                      StepInfo::Return { .. } => {
                          #[cfg(feature = "continuation")]
                          {
                              jops += crate::circuits::jtable::encode_jops(1, 0);
                          }
                      }
                      _ => (),
                  }
              }
      
              let post_initialization_state = if next_event_entry.is_none() {
                  let last_entry = execution_table.entries().last().unwrap();
      
                  InitializationState {
                      eid: last_entry.eid + 1,
                      fid: 0,
                      iid: 0,
                      frame_id: 0,
                      // TODO: why not constant 4095?
                      sp: last_entry.sp
                          + if let StepInfo::Return { drop, .. } = last_entry.step_info {
                              drop
                          } else {
                              0
                          },
      
                      host_public_inputs,
                      context_in_index,
                      context_out_index,
                      external_host_call_call_index,
      
                      initial_memory_pages: last_entry.allocated_memory_pages,
                      maximal_memory_pages: configure_table.maximal_memory_pages,
      
                      #[cfg(feature = "continuation")]
                      jops,
      
                      #[cfg(not(feature = "continuation"))]
                      _phantom: std::marker::PhantomData,
                  }
              } else {
                  let next_entry = next_event_entry.unwrap();
      
                  InitializationState {
                      eid: next_entry.eid,
                      fid: next_entry.fid,
                      iid: next_entry.iid,
                      frame_id: next_entry.last_jump_eid,
                      sp: next_entry.sp,
      
                      host_public_inputs,
                      context_in_index,
                      context_out_index,
                      external_host_call_call_index,
      
                      initial_memory_pages: next_entry.allocated_memory_pages,
                      maximal_memory_pages: configure_table.maximal_memory_pages,
      
                      #[cfg(feature = "continuation")]
                      jops,
      
                      #[cfg(not(feature = "continuation"))]
                      _phantom: std::marker::PhantomData,
                  }
              };
      
              post_initialization_state
          }
      *)
      Definition update_initialization_state (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ self; execution_table; configure_table; next_event_entry ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let execution_table := M.alloc (| execution_table |) in
            let configure_table := M.alloc (| configure_table |) in
            let next_event_entry := M.alloc (| next_event_entry |) in
            M.read (|
              let host_public_inputs :=
                M.copy (|
                  M.SubPointer.get_struct_record_field (|
                    M.read (| self |),
                    "specs::state::InitializationState",
                    "host_public_inputs"
                  |)
                |) in
              let context_in_index :=
                M.copy (|
                  M.SubPointer.get_struct_record_field (|
                    M.read (| self |),
                    "specs::state::InitializationState",
                    "context_in_index"
                  |)
                |) in
              let context_out_index :=
                M.copy (|
                  M.SubPointer.get_struct_record_field (|
                    M.read (| self |),
                    "specs::state::InitializationState",
                    "context_out_index"
                  |)
                |) in
              let external_host_call_call_index :=
                M.copy (|
                  M.SubPointer.get_struct_record_field (|
                    M.read (| self |),
                    "specs::state::InitializationState",
                    "external_host_call_call_index"
                  |)
                |) in
              let _ :=
                M.use
                  (M.match_operator (|
                    M.alloc (|
                      M.call_closure (|
                        M.get_trait_method (|
                          "core::iter::traits::collect::IntoIterator",
                          Ty.apply
                            (Ty.path "&")
                            [
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                [
                                  Ty.path "specs::etable::EventTableEntry";
                                  Ty.path "alloc::alloc::Global"
                                ]
                            ],
                          [],
                          "into_iter",
                          []
                        |),
                        [
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.path "specs::etable::EventTable",
                              "entries",
                              []
                            |),
                            [ M.read (| execution_table |) ]
                          |)
                        ]
                      |)
                    |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let iter := M.copy (| γ |) in
                          M.loop (|
                            ltac:(M.monadic
                              (let _ :=
                                M.match_operator (|
                                  M.alloc (|
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::iter::traits::iterator::Iterator",
                                        Ty.apply
                                          (Ty.path "core::slice::iter::Iter")
                                          [ Ty.path "specs::etable::EventTableEntry" ],
                                        [],
                                        "next",
                                        []
                                      |),
                                      [ iter ]
                                    |)
                                  |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (M.alloc (|
                                          M.never_to_any (| M.read (| M.break (||) |) |)
                                        |)));
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 :=
                                          M.SubPointer.get_struct_tuple_field (|
                                            γ,
                                            "core::option::Option::Some",
                                            0
                                          |) in
                                        let entry := M.copy (| γ0_0 |) in
                                        M.match_operator (|
                                          M.alloc (|
                                            M.SubPointer.get_struct_record_field (|
                                              M.read (| entry |),
                                              "specs::etable::EventTableEntry",
                                              "step_info"
                                            |)
                                          |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let γ := M.read (| γ |) in
                                                let γ1_0 :=
                                                  M.SubPointer.get_struct_record_field (|
                                                    γ,
                                                    "specs::step::StepInfo::CallHost",
                                                    "plugin"
                                                  |) in
                                                let γ1_1 :=
                                                  M.SubPointer.get_struct_record_field (|
                                                    γ,
                                                    "specs::step::StepInfo::CallHost",
                                                    "function_name"
                                                  |) in
                                                let γ1_2 :=
                                                  M.SubPointer.get_struct_record_field (|
                                                    γ,
                                                    "specs::step::StepInfo::CallHost",
                                                    "args"
                                                  |) in
                                                let plugin := M.alloc (| γ1_0 |) in
                                                let function_name := M.alloc (| γ1_1 |) in
                                                let args := M.alloc (| γ1_2 |) in
                                                M.match_operator (|
                                                  M.alloc (| Value.Tuple [] |),
                                                  [
                                                    fun γ =>
                                                      ltac:(M.monadic
                                                        (let γ :=
                                                          M.use
                                                            (M.alloc (|
                                                              M.call_closure (|
                                                                M.get_trait_method (|
                                                                  "core::cmp::PartialEq",
                                                                  Ty.path
                                                                    "specs::host_function::HostPlugin",
                                                                  [
                                                                    Ty.path
                                                                      "specs::host_function::HostPlugin"
                                                                  ],
                                                                  "eq",
                                                                  []
                                                                |),
                                                                [
                                                                  M.read (| plugin |);
                                                                  M.alloc (|
                                                                    Value.StructTuple
                                                                      "specs::host_function::HostPlugin::HostInput"
                                                                      []
                                                                  |)
                                                                ]
                                                              |)
                                                            |)) in
                                                        let _ :=
                                                          M.is_constant_or_break_match (|
                                                            M.read (| γ |),
                                                            Value.Bool true
                                                          |) in
                                                        M.match_operator (|
                                                          M.alloc (| Value.Tuple [] |),
                                                          [
                                                            fun γ =>
                                                              ltac:(M.monadic
                                                                (let γ :=
                                                                  M.use
                                                                    (M.alloc (|
                                                                      LogicalOp.or (|
                                                                        LogicalOp.and (|
                                                                          M.call_closure (|
                                                                            M.get_trait_method (|
                                                                              "core::cmp::PartialEq",
                                                                              Ty.apply
                                                                                (Ty.path "&")
                                                                                [
                                                                                  Ty.path
                                                                                    "alloc::string::String"
                                                                                ],
                                                                              [
                                                                                Ty.apply
                                                                                  (Ty.path "&")
                                                                                  [ Ty.path "str" ]
                                                                              ],
                                                                              "eq",
                                                                              []
                                                                            |),
                                                                            [
                                                                              function_name;
                                                                              Value.String
                                                                                "wasm_input"
                                                                            ]
                                                                          |),
                                                                          ltac:(M.monadic
                                                                            (BinOp.Pure.ne
                                                                              (M.read (|
                                                                                M.call_closure (|
                                                                                  M.get_trait_method (|
                                                                                    "core::ops::index::Index",
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "alloc::vec::Vec")
                                                                                      [
                                                                                        Ty.path
                                                                                          "u64";
                                                                                        Ty.path
                                                                                          "alloc::alloc::Global"
                                                                                      ],
                                                                                    [
                                                                                      Ty.path
                                                                                        "usize"
                                                                                    ],
                                                                                    "index",
                                                                                    []
                                                                                  |),
                                                                                  [
                                                                                    M.read (|
                                                                                      args
                                                                                    |);
                                                                                    Value.Integer 0
                                                                                  ]
                                                                                |)
                                                                              |))
                                                                              (Value.Integer 0)))
                                                                        |),
                                                                        ltac:(M.monadic
                                                                          (M.call_closure (|
                                                                            M.get_trait_method (|
                                                                              "core::cmp::PartialEq",
                                                                              Ty.apply
                                                                                (Ty.path "&")
                                                                                [
                                                                                  Ty.path
                                                                                    "alloc::string::String"
                                                                                ],
                                                                              [
                                                                                Ty.apply
                                                                                  (Ty.path "&")
                                                                                  [ Ty.path "str" ]
                                                                              ],
                                                                              "eq",
                                                                              []
                                                                            |),
                                                                            [
                                                                              function_name;
                                                                              Value.String
                                                                                "wasm_output"
                                                                            ]
                                                                          |)))
                                                                      |)
                                                                    |)) in
                                                                let _ :=
                                                                  M.is_constant_or_break_match (|
                                                                    M.read (| γ |),
                                                                    Value.Bool true
                                                                  |) in
                                                                let _ :=
                                                                  let β := host_public_inputs in
                                                                  M.write (|
                                                                    β,
                                                                    BinOp.Panic.add (|
                                                                      Integer.U32,
                                                                      M.read (| β |),
                                                                      Value.Integer 1
                                                                    |)
                                                                  |) in
                                                                M.alloc (| Value.Tuple [] |)));
                                                            fun γ =>
                                                              ltac:(M.monadic
                                                                (M.alloc (| Value.Tuple [] |)))
                                                          ]
                                                        |)));
                                                    fun γ =>
                                                      ltac:(M.monadic
                                                        (M.match_operator (|
                                                          M.alloc (| Value.Tuple [] |),
                                                          [
                                                            fun γ =>
                                                              ltac:(M.monadic
                                                                (let γ :=
                                                                  M.use
                                                                    (M.alloc (|
                                                                      M.call_closure (|
                                                                        M.get_trait_method (|
                                                                          "core::cmp::PartialEq",
                                                                          Ty.path
                                                                            "specs::host_function::HostPlugin",
                                                                          [
                                                                            Ty.path
                                                                              "specs::host_function::HostPlugin"
                                                                          ],
                                                                          "eq",
                                                                          []
                                                                        |),
                                                                        [
                                                                          M.read (| plugin |);
                                                                          M.alloc (|
                                                                            Value.StructTuple
                                                                              "specs::host_function::HostPlugin::Context"
                                                                              []
                                                                          |)
                                                                        ]
                                                                      |)
                                                                    |)) in
                                                                let _ :=
                                                                  M.is_constant_or_break_match (|
                                                                    M.read (| γ |),
                                                                    Value.Bool true
                                                                  |) in
                                                                M.match_operator (|
                                                                  M.alloc (| Value.Tuple [] |),
                                                                  [
                                                                    fun γ =>
                                                                      ltac:(M.monadic
                                                                        (let γ :=
                                                                          M.use
                                                                            (M.alloc (|
                                                                              M.call_closure (|
                                                                                M.get_trait_method (|
                                                                                  "core::cmp::PartialEq",
                                                                                  Ty.apply
                                                                                    (Ty.path "&")
                                                                                    [
                                                                                      Ty.path
                                                                                        "alloc::string::String"
                                                                                    ],
                                                                                  [
                                                                                    Ty.apply
                                                                                      (Ty.path "&")
                                                                                      [
                                                                                        Ty.path
                                                                                          "str"
                                                                                      ]
                                                                                  ],
                                                                                  "eq",
                                                                                  []
                                                                                |),
                                                                                [
                                                                                  function_name;
                                                                                  Value.String
                                                                                    "wasm_read_context"
                                                                                ]
                                                                              |)
                                                                            |)) in
                                                                        let _ :=
                                                                          M.is_constant_or_break_match (|
                                                                            M.read (| γ |),
                                                                            Value.Bool true
                                                                          |) in
                                                                        let _ :=
                                                                          let β :=
                                                                            context_in_index in
                                                                          M.write (|
                                                                            β,
                                                                            BinOp.Panic.add (|
                                                                              Integer.U32,
                                                                              M.read (| β |),
                                                                              Value.Integer 1
                                                                            |)
                                                                          |) in
                                                                        M.alloc (|
                                                                          Value.Tuple []
                                                                        |)));
                                                                    fun γ =>
                                                                      ltac:(M.monadic
                                                                        (M.match_operator (|
                                                                          M.alloc (|
                                                                            Value.Tuple []
                                                                          |),
                                                                          [
                                                                            fun γ =>
                                                                              ltac:(M.monadic
                                                                                (let γ :=
                                                                                  M.use
                                                                                    (M.alloc (|
                                                                                      M.call_closure (|
                                                                                        M.get_trait_method (|
                                                                                          "core::cmp::PartialEq",
                                                                                          Ty.apply
                                                                                            (Ty.path
                                                                                              "&")
                                                                                            [
                                                                                              Ty.path
                                                                                                "alloc::string::String"
                                                                                            ],
                                                                                          [
                                                                                            Ty.apply
                                                                                              (Ty.path
                                                                                                "&")
                                                                                              [
                                                                                                Ty.path
                                                                                                  "str"
                                                                                              ]
                                                                                          ],
                                                                                          "eq",
                                                                                          []
                                                                                        |),
                                                                                        [
                                                                                          function_name;
                                                                                          Value.String
                                                                                            "wasm_write_context"
                                                                                        ]
                                                                                      |)
                                                                                    |)) in
                                                                                let _ :=
                                                                                  M.is_constant_or_break_match (|
                                                                                    M.read (| γ |),
                                                                                    Value.Bool true
                                                                                  |) in
                                                                                let _ :=
                                                                                  let β :=
                                                                                    context_out_index in
                                                                                  M.write (|
                                                                                    β,
                                                                                    BinOp.Panic.add (|
                                                                                      Integer.U32,
                                                                                      M.read (|
                                                                                        β
                                                                                      |),
                                                                                      Value.Integer
                                                                                        1
                                                                                    |)
                                                                                  |) in
                                                                                M.alloc (|
                                                                                  Value.Tuple []
                                                                                |)));
                                                                            fun γ =>
                                                                              ltac:(M.monadic
                                                                                (M.alloc (|
                                                                                  Value.Tuple []
                                                                                |)))
                                                                          ]
                                                                        |)))
                                                                  ]
                                                                |)));
                                                            fun γ =>
                                                              ltac:(M.monadic
                                                                (M.alloc (| Value.Tuple [] |)))
                                                          ]
                                                        |)))
                                                  ]
                                                |)));
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let γ := M.read (| γ |) in
                                                let β := external_host_call_call_index in
                                                M.write (|
                                                  β,
                                                  BinOp.Panic.add (|
                                                    Integer.U32,
                                                    M.read (| β |),
                                                    Value.Integer 1
                                                  |)
                                                |)));
                                            fun γ =>
                                              ltac:(M.monadic
                                                (M.find_or_pattern (|
                                                  γ,
                                                  [
                                                    fun γ =>
                                                      ltac:(M.monadic
                                                        (let γ := M.read (| γ |) in
                                                        Value.Tuple []));
                                                    fun γ =>
                                                      ltac:(M.monadic
                                                        (let γ := M.read (| γ |) in
                                                        Value.Tuple []))
                                                  ],
                                                  M.closure
                                                    (fun γ =>
                                                      ltac:(M.monadic
                                                        match γ with
                                                        | [] => M.alloc (| Value.Tuple [] |)
                                                        | _ => M.impossible (||)
                                                        end))
                                                |)));
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let γ := M.read (| γ |) in
                                                M.alloc (| Value.Tuple [] |)));
                                            fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                          ]
                                        |)))
                                  ]
                                |) in
                              M.alloc (| Value.Tuple [] |)))
                          |)))
                    ]
                  |)) in
              let post_initialization_state :=
                M.copy (|
                  M.match_operator (|
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.apply
                                      (Ty.path "core::option::Option")
                                      [
                                        Ty.apply
                                          (Ty.path "&")
                                          [ Ty.path "specs::etable::EventTableEntry" ]
                                      ],
                                    "is_none",
                                    []
                                  |),
                                  [ next_event_entry ]
                                |)
                              |)) in
                          let _ :=
                            M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          let last_entry :=
                            M.alloc (|
                              M.call_closure (|
                                M.get_associated_function (|
                                  Ty.apply
                                    (Ty.path "core::option::Option")
                                    [
                                      Ty.apply
                                        (Ty.path "&")
                                        [ Ty.path "specs::etable::EventTableEntry" ]
                                    ],
                                  "unwrap",
                                  []
                                |),
                                [
                                  M.call_closure (|
                                    M.get_associated_function (|
                                      Ty.apply
                                        (Ty.path "slice")
                                        [ Ty.path "specs::etable::EventTableEntry" ],
                                      "last",
                                      []
                                    |),
                                    [
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "core::ops::deref::Deref",
                                          Ty.apply
                                            (Ty.path "alloc::vec::Vec")
                                            [
                                              Ty.path "specs::etable::EventTableEntry";
                                              Ty.path "alloc::alloc::Global"
                                            ],
                                          [],
                                          "deref",
                                          []
                                        |),
                                        [
                                          M.call_closure (|
                                            M.get_associated_function (|
                                              Ty.path "specs::etable::EventTable",
                                              "entries",
                                              []
                                            |),
                                            [ M.read (| execution_table |) ]
                                          |)
                                        ]
                                      |)
                                    ]
                                  |)
                                ]
                              |)
                            |) in
                          M.alloc (|
                            Value.StructRecord
                              "specs::state::InitializationState"
                              [
                                ("eid",
                                  BinOp.Panic.add (|
                                    Integer.U32,
                                    M.read (|
                                      M.SubPointer.get_struct_record_field (|
                                        M.read (| last_entry |),
                                        "specs::etable::EventTableEntry",
                                        "eid"
                                      |)
                                    |),
                                    Value.Integer 1
                                  |));
                                ("fid", Value.Integer 0);
                                ("iid", Value.Integer 0);
                                ("frame_id", Value.Integer 0);
                                ("sp",
                                  BinOp.Panic.add (|
                                    Integer.U32,
                                    M.read (|
                                      M.SubPointer.get_struct_record_field (|
                                        M.read (| last_entry |),
                                        "specs::etable::EventTableEntry",
                                        "sp"
                                      |)
                                    |),
                                    M.read (|
                                      M.match_operator (|
                                        M.alloc (| Value.Tuple [] |),
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let γ :=
                                                M.SubPointer.get_struct_record_field (|
                                                  M.read (| last_entry |),
                                                  "specs::etable::EventTableEntry",
                                                  "step_info"
                                                |) in
                                              let γ0_0 :=
                                                M.SubPointer.get_struct_record_field (|
                                                  γ,
                                                  "specs::step::StepInfo::Return",
                                                  "drop"
                                                |) in
                                              let drop := M.copy (| γ0_0 |) in
                                              drop));
                                          fun γ => ltac:(M.monadic (M.alloc (| Value.Integer 0 |)))
                                        ]
                                      |)
                                    |)
                                  |));
                                ("host_public_inputs", M.read (| host_public_inputs |));
                                ("context_in_index", M.read (| context_in_index |));
                                ("context_out_index", M.read (| context_out_index |));
                                ("external_host_call_call_index",
                                  M.read (| external_host_call_call_index |));
                                ("initial_memory_pages",
                                  M.read (|
                                    M.SubPointer.get_struct_record_field (|
                                      M.read (| last_entry |),
                                      "specs::etable::EventTableEntry",
                                      "allocated_memory_pages"
                                    |)
                                  |));
                                ("maximal_memory_pages",
                                  M.read (|
                                    M.SubPointer.get_struct_record_field (|
                                      M.read (| configure_table |),
                                      "specs::configure_table::ConfigureTable",
                                      "maximal_memory_pages"
                                    |)
                                  |));
                                ("_phantom", Value.StructTuple "core::marker::PhantomData" [])
                              ]
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let next_entry :=
                            M.alloc (|
                              M.call_closure (|
                                M.get_associated_function (|
                                  Ty.apply
                                    (Ty.path "core::option::Option")
                                    [
                                      Ty.apply
                                        (Ty.path "&")
                                        [ Ty.path "specs::etable::EventTableEntry" ]
                                    ],
                                  "unwrap",
                                  []
                                |),
                                [ M.read (| next_event_entry |) ]
                              |)
                            |) in
                          M.alloc (|
                            Value.StructRecord
                              "specs::state::InitializationState"
                              [
                                ("eid",
                                  M.read (|
                                    M.SubPointer.get_struct_record_field (|
                                      M.read (| next_entry |),
                                      "specs::etable::EventTableEntry",
                                      "eid"
                                    |)
                                  |));
                                ("fid",
                                  M.read (|
                                    M.SubPointer.get_struct_record_field (|
                                      M.read (| next_entry |),
                                      "specs::etable::EventTableEntry",
                                      "fid"
                                    |)
                                  |));
                                ("iid",
                                  M.read (|
                                    M.SubPointer.get_struct_record_field (|
                                      M.read (| next_entry |),
                                      "specs::etable::EventTableEntry",
                                      "iid"
                                    |)
                                  |));
                                ("frame_id",
                                  M.read (|
                                    M.SubPointer.get_struct_record_field (|
                                      M.read (| next_entry |),
                                      "specs::etable::EventTableEntry",
                                      "last_jump_eid"
                                    |)
                                  |));
                                ("sp",
                                  M.read (|
                                    M.SubPointer.get_struct_record_field (|
                                      M.read (| next_entry |),
                                      "specs::etable::EventTableEntry",
                                      "sp"
                                    |)
                                  |));
                                ("host_public_inputs", M.read (| host_public_inputs |));
                                ("context_in_index", M.read (| context_in_index |));
                                ("context_out_index", M.read (| context_out_index |));
                                ("external_host_call_call_index",
                                  M.read (| external_host_call_call_index |));
                                ("initial_memory_pages",
                                  M.read (|
                                    M.SubPointer.get_struct_record_field (|
                                      M.read (| next_entry |),
                                      "specs::etable::EventTableEntry",
                                      "allocated_memory_pages"
                                    |)
                                  |));
                                ("maximal_memory_pages",
                                  M.read (|
                                    M.SubPointer.get_struct_record_field (|
                                      M.read (| configure_table |),
                                      "specs::configure_table::ConfigureTable",
                                      "maximal_memory_pages"
                                    |)
                                  |));
                                ("_phantom", Value.StructTuple "core::marker::PhantomData" [])
                              ]
                          |)))
                    ]
                  |)
                |) in
              post_initialization_state
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "delphinus_zkwasm::runtime::state::UpdateInitializationState"
          Self
          (* Trait polymorphic types *) []
          (* Instance *)
          [ ("update_initialization_state", InstanceField.Method update_initialization_state) ].
    End Impl_delphinus_zkwasm_runtime_state_UpdateInitializationState_for_specs_state_InitializationState_u32_num_bigint_biguint_BigUint.
  End state.
End runtime.
