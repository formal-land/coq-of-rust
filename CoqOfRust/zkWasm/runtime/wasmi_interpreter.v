(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module runtime.
  Module wasmi_interpreter.
    (* Trait *)
    (* Empty module 'Execution' *)
    
    Module Impl_delphinus_zkwasm_runtime_wasmi_interpreter_Execution_wasmi_core_value_Value_for_delphinus_zkwasm_runtime_CompiledImage_wasmi_module_NotStartedModuleRef.
      Definition Self : Ty.t :=
        Ty.apply
          (Ty.path "delphinus_zkwasm::runtime::CompiledImage")
          [ Ty.path "wasmi::module::NotStartedModuleRef" ].
      
      (*
          fn run(
              self,
              monitor: &mut dyn WasmiMonitor,
              externals: HostEnv,
          ) -> Result<ExecutionResult<RuntimeValue>> {
              let mut exec_env = ExecEnv {
                  host_env: externals,
                  observer: monitor.expose_observer(),
              };
              let instance = self
                  .instance
                  .run_start_tracer(&mut exec_env, monitor)
                  .unwrap();
      
              let result = instance.invoke_export_trace(&self.entry, &[], &mut exec_env, monitor)?;
      
              let host_statics = exec_env.host_env.external_env.get_statics();
              let public_inputs_and_outputs = exec_env
                  .host_env
                  .internal_env
                  .get_context_of_plugin(HostPlugin::HostInput)
                  .borrow()
                  .expose_public_inputs_and_outputs();
              let outputs = exec_env
                  .host_env
                  .internal_env
                  .get_context_of_plugin(HostPlugin::HostInput)
                  .borrow()
                  .expose_outputs();
              let context_outputs = ContextOutput(
                  exec_env
                      .host_env
                      .internal_env
                      .get_context_of_plugin(HostPlugin::Context)
                      .borrow()
                      .expose_context_outputs(),
              );
      
              Ok(ExecutionResult {
                  result,
                  host_statics,
                  guest_statics: monitor.expose_observer().borrow().counter,
                  public_inputs_and_outputs,
                  outputs,
                  context_outputs,
              })
          }
      *)
      Definition run (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ self; monitor; externals ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let monitor := M.alloc (| monitor |) in
            let externals := M.alloc (| externals |) in
            M.catch_return (|
              ltac:(M.monadic
                (M.read (|
                  let exec_env :=
                    M.alloc (|
                      Value.StructRecord
                        "delphinus_zkwasm::runtime::host::host_env::ExecEnv"
                        [
                          ("host_env", M.read (| externals |));
                          ("observer",
                            M.call_closure (|
                              M.get_trait_method (|
                                "delphinus_zkwasm::runtime::monitor::WasmiMonitor",
                                Ty.dyn
                                  [ ("delphinus_zkwasm::runtime::monitor::WasmiMonitor::Trait", [])
                                  ],
                                [],
                                "expose_observer",
                                []
                              |),
                              [ M.read (| monitor |) ]
                            |))
                        ]
                    |) in
                  let instance :=
                    M.alloc (|
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.apply
                            (Ty.path "core::result::Result")
                            [ Ty.path "wasmi::module::ModuleRef"; Ty.path "wasmi_core::trap::Trap"
                            ],
                          "unwrap",
                          []
                        |),
                        [
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.path "wasmi::module::NotStartedModuleRef",
                              "run_start_tracer",
                              [ Ty.path "delphinus_zkwasm::runtime::host::host_env::ExecEnv" ]
                            |),
                            [
                              M.read (|
                                M.SubPointer.get_struct_record_field (|
                                  self,
                                  "delphinus_zkwasm::runtime::CompiledImage",
                                  "instance"
                                |)
                              |);
                              exec_env;
                              (* Unsize *) M.pointer_coercion (M.read (| monitor |))
                            ]
                          |)
                        ]
                      |)
                    |) in
                  let result :=
                    M.copy (|
                      M.match_operator (|
                        M.alloc (|
                          M.call_closure (|
                            M.get_trait_method (|
                              "core::ops::try_trait::Try",
                              Ty.apply
                                (Ty.path "core::result::Result")
                                [
                                  Ty.apply
                                    (Ty.path "core::option::Option")
                                    [ Ty.path "wasmi_core::value::Value" ];
                                  Ty.path "wasmi::Error"
                                ],
                              [],
                              "branch",
                              []
                            |),
                            [
                              M.call_closure (|
                                M.get_associated_function (|
                                  Ty.path "wasmi::module::ModuleInstance",
                                  "invoke_export_trace",
                                  [ Ty.path "delphinus_zkwasm::runtime::host::host_env::ExecEnv" ]
                                |),
                                [
                                  M.call_closure (|
                                    M.get_trait_method (|
                                      "core::ops::deref::Deref",
                                      Ty.path "wasmi::module::ModuleRef",
                                      [],
                                      "deref",
                                      []
                                    |),
                                    [ instance ]
                                  |);
                                  M.call_closure (|
                                    M.get_trait_method (|
                                      "core::ops::deref::Deref",
                                      Ty.path "alloc::string::String",
                                      [],
                                      "deref",
                                      []
                                    |),
                                    [
                                      M.SubPointer.get_struct_record_field (|
                                        self,
                                        "delphinus_zkwasm::runtime::CompiledImage",
                                        "entry"
                                      |)
                                    ]
                                  |);
                                  (* Unsize *) M.pointer_coercion (M.alloc (| Value.Array [] |));
                                  exec_env;
                                  (* Unsize *) M.pointer_coercion (M.read (| monitor |))
                                ]
                              |)
                            ]
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Break",
                                  0
                                |) in
                              let residual := M.copy (| γ0_0 |) in
                              M.alloc (|
                                M.never_to_any (|
                                  M.read (|
                                    M.return_ (|
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "core::ops::try_trait::FromResidual",
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            [
                                              Ty.apply
                                                (Ty.path
                                                  "delphinus_zkwasm::runtime::ExecutionResult")
                                                [ Ty.path "wasmi_core::value::Value" ];
                                              Ty.path "anyhow::Error"
                                            ],
                                          [
                                            Ty.apply
                                              (Ty.path "core::result::Result")
                                              [
                                                Ty.path "core::convert::Infallible";
                                                Ty.path "wasmi::Error"
                                              ]
                                          ],
                                          "from_residual",
                                          []
                                        |),
                                        [ M.read (| residual |) ]
                                      |)
                                    |)
                                  |)
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Continue",
                                  0
                                |) in
                              let val := M.copy (| γ0_0 |) in
                              val))
                        ]
                      |)
                    |) in
                  let host_statics :=
                    M.alloc (|
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.path
                            "delphinus_zkwasm::runtime::host::external_circuit_plugin::ExternalCircuitEnv",
                          "get_statics",
                          []
                        |),
                        [
                          M.SubPointer.get_struct_record_field (|
                            M.SubPointer.get_struct_record_field (|
                              exec_env,
                              "delphinus_zkwasm::runtime::host::host_env::ExecEnv",
                              "host_env"
                            |),
                            "delphinus_zkwasm::runtime::host::host_env::HostEnv",
                            "external_env"
                          |)
                        ]
                      |)
                    |) in
                  let public_inputs_and_outputs :=
                    M.alloc (|
                      M.call_closure (|
                        M.get_trait_method (|
                          "delphinus_zkwasm::runtime::host::ForeignContext",
                          Ty.dyn [ ("delphinus_zkwasm::runtime::host::ForeignContext::Trait", []) ],
                          [],
                          "expose_public_inputs_and_outputs",
                          []
                        |),
                        [
                          M.read (|
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::ops::deref::Deref",
                                Ty.apply
                                  (Ty.path "core::cell::Ref")
                                  [
                                    Ty.apply
                                      (Ty.path "alloc::boxed::Box")
                                      [
                                        Ty.dyn
                                          [
                                            ("delphinus_zkwasm::runtime::host::ForeignContext::Trait",
                                              [])
                                          ];
                                        Ty.path "alloc::alloc::Global"
                                      ]
                                  ],
                                [],
                                "deref",
                                []
                              |),
                              [
                                M.alloc (|
                                  M.call_closure (|
                                    M.get_associated_function (|
                                      Ty.apply
                                        (Ty.path "core::cell::RefCell")
                                        [
                                          Ty.apply
                                            (Ty.path "alloc::boxed::Box")
                                            [
                                              Ty.dyn
                                                [
                                                  ("delphinus_zkwasm::runtime::host::ForeignContext::Trait",
                                                    [])
                                                ];
                                              Ty.path "alloc::alloc::Global"
                                            ]
                                        ],
                                      "borrow",
                                      []
                                    |),
                                    [
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "core::ops::deref::Deref",
                                          Ty.apply
                                            (Ty.path "alloc::rc::Rc")
                                            [
                                              Ty.apply
                                                (Ty.path "core::cell::RefCell")
                                                [
                                                  Ty.apply
                                                    (Ty.path "alloc::boxed::Box")
                                                    [
                                                      Ty.dyn
                                                        [
                                                          ("delphinus_zkwasm::runtime::host::ForeignContext::Trait",
                                                            [])
                                                        ];
                                                      Ty.path "alloc::alloc::Global"
                                                    ]
                                                ];
                                              Ty.path "alloc::alloc::Global"
                                            ],
                                          [],
                                          "deref",
                                          []
                                        |),
                                        [
                                          M.alloc (|
                                            M.call_closure (|
                                              M.get_associated_function (|
                                                Ty.path
                                                  "delphinus_zkwasm::runtime::host::internal_circuit_plugin::InternalCircuitEnv",
                                                "get_context_of_plugin",
                                                []
                                              |),
                                              [
                                                M.SubPointer.get_struct_record_field (|
                                                  M.SubPointer.get_struct_record_field (|
                                                    exec_env,
                                                    "delphinus_zkwasm::runtime::host::host_env::ExecEnv",
                                                    "host_env"
                                                  |),
                                                  "delphinus_zkwasm::runtime::host::host_env::HostEnv",
                                                  "internal_env"
                                                |);
                                                Value.StructTuple
                                                  "specs::host_function::HostPlugin::HostInput"
                                                  []
                                              ]
                                            |)
                                          |)
                                        ]
                                      |)
                                    ]
                                  |)
                                |)
                              ]
                            |)
                          |)
                        ]
                      |)
                    |) in
                  let outputs :=
                    M.alloc (|
                      M.call_closure (|
                        M.get_trait_method (|
                          "delphinus_zkwasm::runtime::host::ForeignContext",
                          Ty.dyn [ ("delphinus_zkwasm::runtime::host::ForeignContext::Trait", []) ],
                          [],
                          "expose_outputs",
                          []
                        |),
                        [
                          M.read (|
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::ops::deref::Deref",
                                Ty.apply
                                  (Ty.path "core::cell::Ref")
                                  [
                                    Ty.apply
                                      (Ty.path "alloc::boxed::Box")
                                      [
                                        Ty.dyn
                                          [
                                            ("delphinus_zkwasm::runtime::host::ForeignContext::Trait",
                                              [])
                                          ];
                                        Ty.path "alloc::alloc::Global"
                                      ]
                                  ],
                                [],
                                "deref",
                                []
                              |),
                              [
                                M.alloc (|
                                  M.call_closure (|
                                    M.get_associated_function (|
                                      Ty.apply
                                        (Ty.path "core::cell::RefCell")
                                        [
                                          Ty.apply
                                            (Ty.path "alloc::boxed::Box")
                                            [
                                              Ty.dyn
                                                [
                                                  ("delphinus_zkwasm::runtime::host::ForeignContext::Trait",
                                                    [])
                                                ];
                                              Ty.path "alloc::alloc::Global"
                                            ]
                                        ],
                                      "borrow",
                                      []
                                    |),
                                    [
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "core::ops::deref::Deref",
                                          Ty.apply
                                            (Ty.path "alloc::rc::Rc")
                                            [
                                              Ty.apply
                                                (Ty.path "core::cell::RefCell")
                                                [
                                                  Ty.apply
                                                    (Ty.path "alloc::boxed::Box")
                                                    [
                                                      Ty.dyn
                                                        [
                                                          ("delphinus_zkwasm::runtime::host::ForeignContext::Trait",
                                                            [])
                                                        ];
                                                      Ty.path "alloc::alloc::Global"
                                                    ]
                                                ];
                                              Ty.path "alloc::alloc::Global"
                                            ],
                                          [],
                                          "deref",
                                          []
                                        |),
                                        [
                                          M.alloc (|
                                            M.call_closure (|
                                              M.get_associated_function (|
                                                Ty.path
                                                  "delphinus_zkwasm::runtime::host::internal_circuit_plugin::InternalCircuitEnv",
                                                "get_context_of_plugin",
                                                []
                                              |),
                                              [
                                                M.SubPointer.get_struct_record_field (|
                                                  M.SubPointer.get_struct_record_field (|
                                                    exec_env,
                                                    "delphinus_zkwasm::runtime::host::host_env::ExecEnv",
                                                    "host_env"
                                                  |),
                                                  "delphinus_zkwasm::runtime::host::host_env::HostEnv",
                                                  "internal_env"
                                                |);
                                                Value.StructTuple
                                                  "specs::host_function::HostPlugin::HostInput"
                                                  []
                                              ]
                                            |)
                                          |)
                                        ]
                                      |)
                                    ]
                                  |)
                                |)
                              ]
                            |)
                          |)
                        ]
                      |)
                    |) in
                  let context_outputs :=
                    M.alloc (|
                      Value.StructTuple
                        "delphinus_zkwasm::foreign::context::ContextOutput"
                        [
                          M.call_closure (|
                            M.get_trait_method (|
                              "delphinus_zkwasm::runtime::host::ForeignContext",
                              Ty.dyn
                                [ ("delphinus_zkwasm::runtime::host::ForeignContext::Trait", []) ],
                              [],
                              "expose_context_outputs",
                              []
                            |),
                            [
                              M.read (|
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "core::ops::deref::Deref",
                                    Ty.apply
                                      (Ty.path "core::cell::Ref")
                                      [
                                        Ty.apply
                                          (Ty.path "alloc::boxed::Box")
                                          [
                                            Ty.dyn
                                              [
                                                ("delphinus_zkwasm::runtime::host::ForeignContext::Trait",
                                                  [])
                                              ];
                                            Ty.path "alloc::alloc::Global"
                                          ]
                                      ],
                                    [],
                                    "deref",
                                    []
                                  |),
                                  [
                                    M.alloc (|
                                      M.call_closure (|
                                        M.get_associated_function (|
                                          Ty.apply
                                            (Ty.path "core::cell::RefCell")
                                            [
                                              Ty.apply
                                                (Ty.path "alloc::boxed::Box")
                                                [
                                                  Ty.dyn
                                                    [
                                                      ("delphinus_zkwasm::runtime::host::ForeignContext::Trait",
                                                        [])
                                                    ];
                                                  Ty.path "alloc::alloc::Global"
                                                ]
                                            ],
                                          "borrow",
                                          []
                                        |),
                                        [
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "core::ops::deref::Deref",
                                              Ty.apply
                                                (Ty.path "alloc::rc::Rc")
                                                [
                                                  Ty.apply
                                                    (Ty.path "core::cell::RefCell")
                                                    [
                                                      Ty.apply
                                                        (Ty.path "alloc::boxed::Box")
                                                        [
                                                          Ty.dyn
                                                            [
                                                              ("delphinus_zkwasm::runtime::host::ForeignContext::Trait",
                                                                [])
                                                            ];
                                                          Ty.path "alloc::alloc::Global"
                                                        ]
                                                    ];
                                                  Ty.path "alloc::alloc::Global"
                                                ],
                                              [],
                                              "deref",
                                              []
                                            |),
                                            [
                                              M.alloc (|
                                                M.call_closure (|
                                                  M.get_associated_function (|
                                                    Ty.path
                                                      "delphinus_zkwasm::runtime::host::internal_circuit_plugin::InternalCircuitEnv",
                                                    "get_context_of_plugin",
                                                    []
                                                  |),
                                                  [
                                                    M.SubPointer.get_struct_record_field (|
                                                      M.SubPointer.get_struct_record_field (|
                                                        exec_env,
                                                        "delphinus_zkwasm::runtime::host::host_env::ExecEnv",
                                                        "host_env"
                                                      |),
                                                      "delphinus_zkwasm::runtime::host::host_env::HostEnv",
                                                      "internal_env"
                                                    |);
                                                    Value.StructTuple
                                                      "specs::host_function::HostPlugin::Context"
                                                      []
                                                  ]
                                                |)
                                              |)
                                            ]
                                          |)
                                        ]
                                      |)
                                    |)
                                  ]
                                |)
                              |)
                            ]
                          |)
                        ]
                    |) in
                  M.alloc (|
                    Value.StructTuple
                      "core::result::Result::Ok"
                      [
                        Value.StructRecord
                          "delphinus_zkwasm::runtime::ExecutionResult"
                          [
                            ("result", M.read (| result |));
                            ("host_statics", M.read (| host_statics |));
                            ("guest_statics",
                              M.read (|
                                M.SubPointer.get_struct_record_field (|
                                  M.call_closure (|
                                    M.get_trait_method (|
                                      "core::ops::deref::Deref",
                                      Ty.apply
                                        (Ty.path "core::cell::Ref")
                                        [
                                          Ty.path
                                            "delphinus_zkwasm::runtime::monitor::observer::Observer"
                                        ],
                                      [],
                                      "deref",
                                      []
                                    |),
                                    [
                                      M.alloc (|
                                        M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.apply
                                              (Ty.path "core::cell::RefCell")
                                              [
                                                Ty.path
                                                  "delphinus_zkwasm::runtime::monitor::observer::Observer"
                                              ],
                                            "borrow",
                                            []
                                          |),
                                          [
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "core::ops::deref::Deref",
                                                Ty.apply
                                                  (Ty.path "alloc::rc::Rc")
                                                  [
                                                    Ty.apply
                                                      (Ty.path "core::cell::RefCell")
                                                      [
                                                        Ty.path
                                                          "delphinus_zkwasm::runtime::monitor::observer::Observer"
                                                      ];
                                                    Ty.path "alloc::alloc::Global"
                                                  ],
                                                [],
                                                "deref",
                                                []
                                              |),
                                              [
                                                M.alloc (|
                                                  M.call_closure (|
                                                    M.get_trait_method (|
                                                      "delphinus_zkwasm::runtime::monitor::WasmiMonitor",
                                                      Ty.dyn
                                                        [
                                                          ("delphinus_zkwasm::runtime::monitor::WasmiMonitor::Trait",
                                                            [])
                                                        ],
                                                      [],
                                                      "expose_observer",
                                                      []
                                                    |),
                                                    [ M.read (| monitor |) ]
                                                  |)
                                                |)
                                              ]
                                            |)
                                          ]
                                        |)
                                      |)
                                    ]
                                  |),
                                  "delphinus_zkwasm::runtime::monitor::observer::Observer",
                                  "counter"
                                |)
                              |));
                            ("public_inputs_and_outputs", M.read (| public_inputs_and_outputs |));
                            ("outputs", M.read (| outputs |));
                            ("context_outputs", M.read (| context_outputs |))
                          ]
                      ]
                  |)
                |)))
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "delphinus_zkwasm::runtime::wasmi_interpreter::Execution"
          Self
          (* Trait polymorphic types *) [ (* R *) Ty.path "wasmi_core::value::Value" ]
          (* Instance *) [ ("run", InstanceField.Method run) ].
    End Impl_delphinus_zkwasm_runtime_wasmi_interpreter_Execution_wasmi_core_value_Value_for_delphinus_zkwasm_runtime_CompiledImage_wasmi_module_NotStartedModuleRef.
    
    (* StructTuple
      {
        name := "WasmiRuntime";
        ty_params := [];
        fields := [];
      } *)
    
    Module Impl_delphinus_zkwasm_runtime_wasmi_interpreter_WasmiRuntime.
      Definition Self : Ty.t :=
        Ty.path "delphinus_zkwasm::runtime::wasmi_interpreter::WasmiRuntime".
      
      (*
          pub fn new() -> Self {
              WasmiRuntime
          }
      *)
      Definition new (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [] =>
          ltac:(M.monadic
            (Value.StructTuple "delphinus_zkwasm::runtime::wasmi_interpreter::WasmiRuntime" []))
        | _, _ => M.impossible
        end.
      
      Axiom AssociatedFunction_new : M.IsAssociatedFunction Self "new" new.
      
      (*
          pub fn compile<'a, I: ImportResolver>(
              monitor: &mut dyn Monitor,
              module: &'a wasmi::Module,
              imports: &I,
              entry: &str,
          ) -> Result<CompiledImage<wasmi::NotStartedModuleRef<'a>>> {
              let instance =
                  ModuleInstance::new(&module, imports).expect("failed to instantiate wasm module");
              monitor.register_module(instance.loaded_module.module(), &instance.instance, entry)?;
      
              Ok(CompiledImage {
                  entry: entry.to_owned(),
                  instance,
              })
          }
      *)
      Definition compile (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [ _ as I ], [ monitor; module; imports; entry ] =>
          ltac:(M.monadic
            (let monitor := M.alloc (| monitor |) in
            let module := M.alloc (| module |) in
            let imports := M.alloc (| imports |) in
            let entry := M.alloc (| entry |) in
            M.catch_return (|
              ltac:(M.monadic
                (M.read (|
                  let instance :=
                    M.alloc (|
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.apply
                            (Ty.path "core::result::Result")
                            [ Ty.path "wasmi::module::NotStartedModuleRef"; Ty.path "wasmi::Error"
                            ],
                          "expect",
                          []
                        |),
                        [
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.path "wasmi::module::ModuleInstance",
                              "new",
                              [ I ]
                            |),
                            [ M.read (| module |); M.read (| imports |) ]
                          |);
                          M.read (| Value.String "failed to instantiate wasm module" |)
                        ]
                      |)
                    |) in
                  let _ :=
                    M.match_operator (|
                      M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::ops::try_trait::Try",
                            Ty.apply
                              (Ty.path "core::result::Result")
                              [ Ty.tuple []; Ty.path "wasmi::Error" ],
                            [],
                            "branch",
                            []
                          |),
                          [
                            M.call_closure (|
                              M.get_trait_method (|
                                "wasmi::monitor::Monitor",
                                Ty.dyn [ ("wasmi::monitor::Monitor::Trait", []) ],
                                [],
                                "register_module",
                                []
                              |),
                              [
                                M.read (| monitor |);
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.path "wasmi::Module",
                                    "module",
                                    []
                                  |),
                                  [
                                    M.read (|
                                      M.SubPointer.get_struct_record_field (|
                                        instance,
                                        "wasmi::module::NotStartedModuleRef",
                                        "loaded_module"
                                      |)
                                    |)
                                  ]
                                |);
                                M.SubPointer.get_struct_record_field (|
                                  instance,
                                  "wasmi::module::NotStartedModuleRef",
                                  "instance"
                                |);
                                M.read (| entry |)
                              ]
                            |)
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Break",
                                0
                              |) in
                            let residual := M.copy (| γ0_0 |) in
                            M.alloc (|
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::ops::try_trait::FromResidual",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          [
                                            Ty.apply
                                              (Ty.path "delphinus_zkwasm::runtime::CompiledImage")
                                              [ Ty.path "wasmi::module::NotStartedModuleRef" ];
                                            Ty.path "anyhow::Error"
                                          ],
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.path "wasmi::Error"
                                            ]
                                        ],
                                        "from_residual",
                                        []
                                      |),
                                      [ M.read (| residual |) ]
                                    |)
                                  |)
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Continue",
                                0
                              |) in
                            let val := M.copy (| γ0_0 |) in
                            val))
                      ]
                    |) in
                  M.alloc (|
                    Value.StructTuple
                      "core::result::Result::Ok"
                      [
                        Value.StructRecord
                          "delphinus_zkwasm::runtime::CompiledImage"
                          [
                            ("entry",
                              M.call_closure (|
                                M.get_trait_method (|
                                  "alloc::borrow::ToOwned",
                                  Ty.path "str",
                                  [],
                                  "to_owned",
                                  []
                                |),
                                [ M.read (| entry |) ]
                              |));
                            ("instance", M.read (| instance |))
                          ]
                      ]
                  |)
                |)))
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom AssociatedFunction_compile : M.IsAssociatedFunction Self "compile" compile.
    End Impl_delphinus_zkwasm_runtime_wasmi_interpreter_WasmiRuntime.
  End wasmi_interpreter.
End runtime.
