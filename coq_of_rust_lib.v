(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module callbacks.
  Module ToCoq.
    Unset Primitive Projections.
    Record t : Set := {
      opts : coq_of_rust_lib.options.Options;
    }.
    Global Set Primitive Projections.
    
    Global Instance Get_opts : Notation.Dot "opts" := {
      Notation.dot '(Build_t x0) := x0;
    }.
  End ToCoq.
  Definition ToCoq : Set := @ToCoq.t.
End callbacks.

Module ToCoq.
  Unset Primitive Projections.
  Record t : Set := {
    opts : coq_of_rust_lib.options.Options;
  }.
  Global Set Primitive Projections.
  
  Global Instance Get_opts : Notation.Dot "opts" := {
    Notation.dot '(Build_t x0) := x0;
  }.
End ToCoq.
Definition ToCoq : Set := @ToCoq.t.

Module core.
  Module CliOptions.
    Unset Primitive Projections.
    Record t : Set := {
      path : std.path.PathBuf;
      output : std.path.PathBuf;
      axiomatize : bool;
      generate_reorder : bool;
      configuration_file : alloc.string.String;
    }.
    Global Set Primitive Projections.
    
    Global Instance Get_path : Notation.Dot "path" := {
      Notation.dot '(Build_t x0 _ _ _ _) := x0;
    }.
    Global Instance Get_output : Notation.Dot "output" := {
      Notation.dot '(Build_t _ x1 _ _ _) := x1;
    }.
    Global Instance Get_axiomatize : Notation.Dot "axiomatize" := {
      Notation.dot '(Build_t _ _ x2 _ _) := x2;
    }.
    Global Instance Get_generate_reorder : Notation.Dot "generate_reorder" := {
      Notation.dot '(Build_t _ _ _ x3 _) := x3;
    }.
    Global Instance Get_configuration_file :
        Notation.Dot "configuration_file" := {
      Notation.dot '(Build_t _ _ _ _ x4) := x4;
    }.
  End CliOptions.
  Definition CliOptions : Set := @CliOptions.t.
  
  Parameter LINE_WIDTH : forall `{H : State.Trait}, usize.
  
  Parameter run : forall `{H : State.Trait},
  forall `{H : State.Trait},
  coq_of_rust_lib.core.CliOptions ->  M (H := H) unit.
End core.

Module CliOptions.
  Unset Primitive Projections.
  Record t : Set := {
    path : std.path.PathBuf;
    output : std.path.PathBuf;
    axiomatize : bool;
    generate_reorder : bool;
    configuration_file : alloc.string.String;
  }.
  Global Set Primitive Projections.
  
  Global Instance Get_path : Notation.Dot "path" := {
    Notation.dot '(Build_t x0 _ _ _ _) := x0;
  }.
  Global Instance Get_output : Notation.Dot "output" := {
    Notation.dot '(Build_t _ x1 _ _ _) := x1;
  }.
  Global Instance Get_axiomatize : Notation.Dot "axiomatize" := {
    Notation.dot '(Build_t _ _ x2 _ _) := x2;
  }.
  Global Instance Get_generate_reorder : Notation.Dot "generate_reorder" := {
    Notation.dot '(Build_t _ _ _ x3 _) := x3;
  }.
  Global Instance Get_configuration_file :
      Notation.Dot "configuration_file" := {
    Notation.dot '(Build_t _ _ _ _ x4) := x4;
  }.
End CliOptions.
Definition CliOptions : Set := @CliOptions.t.

Parameter LINE_WIDTH : forall `{H : State.Trait}, usize.

Parameter run : forall `{H : State.Trait},
forall `{H : State.Trait},
coq_of_rust_lib.core.CliOptions ->  M (H := H) unit.

Module expression.
  Module MatchArm.
    Unset Primitive Projections.
    Record t : Set := {
      pat : coq_of_rust_lib.pattern.Pattern;
      body : coq_of_rust_lib.expression.Expr;
    }.
    Global Set Primitive Projections.
    
    Global Instance Get_pat : Notation.Dot "pat" := {
      Notation.dot '(Build_t x0 _) := x0;
    }.
    Global Instance Get_body : Notation.Dot "body" := {
      Notation.dot '(Build_t _ x1) := x1;
    }.
  End MatchArm.
  Definition MatchArm : Set := @MatchArm.t.
End expression.

Module MatchArm.
  Unset Primitive Projections.
  Record t : Set := {
    pat : coq_of_rust_lib.pattern.Pattern;
    body : coq_of_rust_lib.expression.Expr;
  }.
  Global Set Primitive Projections.
  
  Global Instance Get_pat : Notation.Dot "pat" := {
    Notation.dot '(Build_t x0 _) := x0;
  }.
  Global Instance Get_body : Notation.Dot "body" := {
    Notation.dot '(Build_t _ x1) := x1;
  }.
End MatchArm.
Definition MatchArm : Set := @MatchArm.t.

Module header.
  Parameter HEADER : forall `{H : State.Trait}, ref str.
End header.

Parameter HEADER : forall `{H : State.Trait}, ref str.

Module options.
  Module CoqOfRustArgs.
    Unset Primitive Projections.
    Record t : Set := {
      axiomatize : bool;
      configuration_file : alloc.string.String;
      generate_reorder : bool;
    }.
    Global Set Primitive Projections.
    
    Global Instance Get_axiomatize : Notation.Dot "axiomatize" := {
      Notation.dot '(Build_t x0 _ _) := x0;
    }.
    Global Instance Get_configuration_file :
        Notation.Dot "configuration_file" := {
      Notation.dot '(Build_t _ x1 _) := x1;
    }.
    Global Instance Get_generate_reorder : Notation.Dot "generate_reorder" := {
      Notation.dot '(Build_t _ _ x2) := x2;
    }.
  End CoqOfRustArgs.
  Definition CoqOfRustArgs : Set := @CoqOfRustArgs.t.
  
  Module Args.
    Unset Primitive Projections.
    Record t : Set := {
      coq_of_rust : coq_of_rust_lib.options.CoqOfRustArgs;
      rust_flags : alloc.vec.Vec alloc.string.String;
    }.
    Global Set Primitive Projections.
    
    Global Instance Get_coq_of_rust : Notation.Dot "coq_of_rust" := {
      Notation.dot '(Build_t x0 _) := x0;
    }.
    Global Instance Get_rust_flags : Notation.Dot "rust_flags" := {
      Notation.dot '(Build_t _ x1) := x1;
    }.
  End Args.
  Definition Args : Set := @Args.t.
  
  Module Options.
    Unset Primitive Projections.
    Record t : Set := {
      in_cargo : bool;
      axiomatize : bool;
      configuration_file : alloc.string.String;
      generate_reorder : bool;
    }.
    Global Set Primitive Projections.
    
    Global Instance Get_in_cargo : Notation.Dot "in_cargo" := {
      Notation.dot '(Build_t x0 _ _ _) := x0;
    }.
    Global Instance Get_axiomatize : Notation.Dot "axiomatize" := {
      Notation.dot '(Build_t _ x1 _ _) := x1;
    }.
    Global Instance Get_configuration_file :
        Notation.Dot "configuration_file" := {
      Notation.dot '(Build_t _ _ x2 _) := x2;
    }.
    Global Instance Get_generate_reorder : Notation.Dot "generate_reorder" := {
      Notation.dot '(Build_t _ _ _ x3) := x3;
    }.
  End Options.
  Definition Options : Set := @Options.t.
End options.

Module CoqOfRustArgs.
  Unset Primitive Projections.
  Record t : Set := {
    axiomatize : bool;
    configuration_file : alloc.string.String;
    generate_reorder : bool;
  }.
  Global Set Primitive Projections.
  
  Global Instance Get_axiomatize : Notation.Dot "axiomatize" := {
    Notation.dot '(Build_t x0 _ _) := x0;
  }.
  Global Instance Get_configuration_file :
      Notation.Dot "configuration_file" := {
    Notation.dot '(Build_t _ x1 _) := x1;
  }.
  Global Instance Get_generate_reorder : Notation.Dot "generate_reorder" := {
    Notation.dot '(Build_t _ _ x2) := x2;
  }.
End CoqOfRustArgs.
Definition CoqOfRustArgs : Set := @CoqOfRustArgs.t.

Module Args.
  Unset Primitive Projections.
  Record t : Set := {
    coq_of_rust : coq_of_rust_lib.options.CoqOfRustArgs;
    rust_flags : alloc.vec.Vec alloc.string.String;
  }.
  Global Set Primitive Projections.
  
  Global Instance Get_coq_of_rust : Notation.Dot "coq_of_rust" := {
    Notation.dot '(Build_t x0 _) := x0;
  }.
  Global Instance Get_rust_flags : Notation.Dot "rust_flags" := {
    Notation.dot '(Build_t _ x1) := x1;
  }.
End Args.
Definition Args : Set := @Args.t.

Module Options.
  Unset Primitive Projections.
  Record t : Set := {
    in_cargo : bool;
    axiomatize : bool;
    configuration_file : alloc.string.String;
    generate_reorder : bool;
  }.
  Global Set Primitive Projections.
  
  Global Instance Get_in_cargo : Notation.Dot "in_cargo" := {
    Notation.dot '(Build_t x0 _ _ _) := x0;
  }.
  Global Instance Get_axiomatize : Notation.Dot "axiomatize" := {
    Notation.dot '(Build_t _ x1 _ _) := x1;
  }.
  Global Instance Get_configuration_file :
      Notation.Dot "configuration_file" := {
    Notation.dot '(Build_t _ _ x2 _) := x2;
  }.
  Global Instance Get_generate_reorder : Notation.Dot "generate_reorder" := {
    Notation.dot '(Build_t _ _ _ x3) := x3;
  }.
End Options.
Definition Options : Set := @Options.t.

Module path.
  Module Path.
    Unset Primitive Projections.
    Record t : Set := {
      segments : alloc.vec.Vec alloc.string.String;
    }.
    Global Set Primitive Projections.
    
    Global Instance Get_segments : Notation.Dot "segments" := {
      Notation.dot '(Build_t x0) := x0;
    }.
  End Path.
  Definition Path : Set := @Path.t.
End path.

Module Path.
  Unset Primitive Projections.
  Record t : Set := {
    segments : alloc.vec.Vec alloc.string.String;
  }.
  Global Set Primitive Projections.
  
  Global Instance Get_segments : Notation.Dot "segments" := {
    Notation.dot '(Build_t x0) := x0;
  }.
End Path.
Definition Path : Set := @Path.t.

Module render.
  Definition Doc : Set := pretty.RcDoc unit.
End render.

Definition Doc : Set := pretty.RcDoc unit.

Module reorder.
  Parameter get_name : forall `{H : State.Trait},
  forall `{H : State.Trait},
  (ref rustc_middle.ty.context.TyCtxt) -> rustc_hir.hir_id.HirId -> 
    M (H := H) alloc.string.String.
  
  Parameter get_full_name : forall `{H : State.Trait},
  forall `{H : State.Trait},
  (ref rustc_middle.ty.context.TyCtxt) -> rustc_hir.hir_id.HirId -> 
    M (H := H) alloc.string.String.
  
  Parameter vec_move : forall `{H : State.Trait},
  forall `{H : State.Trait} {T : Set},
  (mut_ref (alloc.vec.Vec T)) -> usize -> usize ->  M (H := H) unit.
End reorder.

Parameter get_name : forall `{H : State.Trait},
forall `{H : State.Trait},
(ref rustc_middle.ty.context.TyCtxt) -> rustc_hir.hir_id.HirId -> 
  M (H := H) alloc.string.String.

Parameter get_full_name : forall `{H : State.Trait},
forall `{H : State.Trait},
(ref rustc_middle.ty.context.TyCtxt) -> rustc_hir.hir_id.HirId -> 
  M (H := H) alloc.string.String.

Parameter vec_move : forall `{H : State.Trait},
forall `{H : State.Trait} {T : Set},
(mut_ref (alloc.vec.Vec T)) -> usize -> usize ->  M (H := H) unit.

Module top_level.
  Module TopLevel.
    Unset Primitive Projections.
    Record t : Set := {
      _ : alloc.vec.Vec coq_of_rust_lib.top_level.TopLevelItem;
    }.
    Global Set Primitive Projections.
    
    Global Instance Get_0 : Notation.Dot 0 := {
      Notation.dot '(Build_t x0) := x0;
    }.
  End TopLevel.
  Definition TopLevel := @TopLevel.t.
  
  Parameter mt_top_level : forall `{H : State.Trait},
  forall `{H : State.Trait},
  coq_of_rust_lib.top_level.TopLevel -> 
    M (H := H) coq_of_rust_lib.top_level.TopLevel.
End top_level.

Module TopLevel.
  Unset Primitive Projections.
  Record t : Set := {
    _ : alloc.vec.Vec coq_of_rust_lib.top_level.TopLevelItem;
  }.
  Global Set Primitive Projections.
  
  Global Instance Get_0 : Notation.Dot 0 := {
    Notation.dot '(Build_t x0) := x0;
  }.
End TopLevel.
Definition TopLevel := @TopLevel.t.

Parameter mt_top_level : forall `{H : State.Trait},
forall `{H : State.Trait},
coq_of_rust_lib.top_level.TopLevel -> 
  M (H := H) coq_of_rust_lib.top_level.TopLevel.

Module utils.
  (* #[allow(dead_code)] - function was ignored by the compiler *)
  Parameter print_stacktrace : forall `{H : State.Trait},
  forall `{H : State.Trait},
  usize ->  M (H := H) unit.
End utils.

(* #[allow(dead_code)] - function was ignored by the compiler *)
Parameter print_stacktrace : forall `{H : State.Trait},
forall `{H : State.Trait},
usize ->  M (H := H) unit.
