(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module Food.
  Inductive t `{ℋ : State.Trait} : Set :=
  | Apple
  | Carrot
  | Potato.
End Food.
Definition Food `{ℋ : State.Trait} : Set := M.Val Food.t.

Module  Impl_core_fmt_Debug_for_combinators_map_Food.
Section Impl_core_fmt_Debug_for_combinators_map_Food.
  Context `{ℋ : State.Trait}.
  
  Definition Self : Set := combinators_map.Food.
  
  Parameter fmt :
      (ref Self) -> (mut_ref core.fmt.Formatter) -> M ltac:(core.fmt.Result).
  
  Global Instance AssociatedFunction_fmt : Notation.DoubleColon Self "fmt" := {
    Notation.double_colon := fmt;
  }.
  
  Global Instance ℐ : core.fmt.Debug.Trait Self := {
    core.fmt.Debug.fmt := fmt;
  }.
End Impl_core_fmt_Debug_for_combinators_map_Food.
End Impl_core_fmt_Debug_for_combinators_map_Food.

Module  Peeled.
Section Peeled.
  Context `{ℋ : State.Trait}.
  
  Record t : Set := {
    x0 : combinators_map.Food;
  }.
  
  Global Instance Get_0 : Notation.Dot "0" := {
    Notation.dot x := let* x := M.read x in M.pure x.(x0) : M _;
  }.
End Peeled.
End Peeled.
Definition Peeled `{ℋ : State.Trait} : Set := M.Val Peeled.t.

Module  Impl_core_fmt_Debug_for_combinators_map_Peeled.
Section Impl_core_fmt_Debug_for_combinators_map_Peeled.
  Context `{ℋ : State.Trait}.
  
  Definition Self : Set := combinators_map.Peeled.
  
  Parameter fmt :
      (ref Self) -> (mut_ref core.fmt.Formatter) -> M ltac:(core.fmt.Result).
  
  Global Instance AssociatedFunction_fmt : Notation.DoubleColon Self "fmt" := {
    Notation.double_colon := fmt;
  }.
  
  Global Instance ℐ : core.fmt.Debug.Trait Self := {
    core.fmt.Debug.fmt := fmt;
  }.
End Impl_core_fmt_Debug_for_combinators_map_Peeled.
End Impl_core_fmt_Debug_for_combinators_map_Peeled.

Module  Chopped.
Section Chopped.
  Context `{ℋ : State.Trait}.
  
  Record t : Set := {
    x0 : combinators_map.Food;
  }.
  
  Global Instance Get_0 : Notation.Dot "0" := {
    Notation.dot x := let* x := M.read x in M.pure x.(x0) : M _;
  }.
End Chopped.
End Chopped.
Definition Chopped `{ℋ : State.Trait} : Set := M.Val Chopped.t.

Module  Impl_core_fmt_Debug_for_combinators_map_Chopped.
Section Impl_core_fmt_Debug_for_combinators_map_Chopped.
  Context `{ℋ : State.Trait}.
  
  Definition Self : Set := combinators_map.Chopped.
  
  Parameter fmt :
      (ref Self) -> (mut_ref core.fmt.Formatter) -> M ltac:(core.fmt.Result).
  
  Global Instance AssociatedFunction_fmt : Notation.DoubleColon Self "fmt" := {
    Notation.double_colon := fmt;
  }.
  
  Global Instance ℐ : core.fmt.Debug.Trait Self := {
    core.fmt.Debug.fmt := fmt;
  }.
End Impl_core_fmt_Debug_for_combinators_map_Chopped.
End Impl_core_fmt_Debug_for_combinators_map_Chopped.

Module  Cooked.
Section Cooked.
  Context `{ℋ : State.Trait}.
  
  Record t : Set := {
    x0 : combinators_map.Food;
  }.
  
  Global Instance Get_0 : Notation.Dot "0" := {
    Notation.dot x := let* x := M.read x in M.pure x.(x0) : M _;
  }.
End Cooked.
End Cooked.
Definition Cooked `{ℋ : State.Trait} : Set := M.Val Cooked.t.

Module  Impl_core_fmt_Debug_for_combinators_map_Cooked.
Section Impl_core_fmt_Debug_for_combinators_map_Cooked.
  Context `{ℋ : State.Trait}.
  
  Definition Self : Set := combinators_map.Cooked.
  
  Parameter fmt :
      (ref Self) -> (mut_ref core.fmt.Formatter) -> M ltac:(core.fmt.Result).
  
  Global Instance AssociatedFunction_fmt : Notation.DoubleColon Self "fmt" := {
    Notation.double_colon := fmt;
  }.
  
  Global Instance ℐ : core.fmt.Debug.Trait Self := {
    core.fmt.Debug.fmt := fmt;
  }.
End Impl_core_fmt_Debug_for_combinators_map_Cooked.
End Impl_core_fmt_Debug_for_combinators_map_Cooked.

Parameter peel :
    forall `{ℋ : State.Trait},
    (core.option.Option combinators_map.Food) ->
      M (core.option.Option combinators_map.Peeled).

Parameter chop :
    forall `{ℋ : State.Trait},
    (core.option.Option combinators_map.Peeled) ->
      M (core.option.Option combinators_map.Chopped).

Parameter cook :
    forall `{ℋ : State.Trait},
    (core.option.Option combinators_map.Chopped) ->
      M (core.option.Option combinators_map.Cooked).

Parameter process :
    forall `{ℋ : State.Trait},
    (core.option.Option combinators_map.Food) ->
      M (core.option.Option combinators_map.Cooked).

Parameter eat :
    forall `{ℋ : State.Trait},
    (core.option.Option combinators_map.Cooked) -> M unit.

(* #[allow(dead_code)] - function was ignored by the compiler *)
Parameter main : forall `{ℋ : State.Trait}, M unit.
