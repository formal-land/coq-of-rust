(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module SomeType.
  Section SomeType.
    Context `{ℋ : State.Trait}.
    
    Unset Primitive Projections.
    Record t : Set := {
      x0 : u32;
    }.
    Global Set Primitive Projections.
    
    #[refine] Global Instance Get_0 : Notation.Dot "0" := {
      Notation.dot x := let* x := M.read x in Pure x.(x0) : M _;
    }.
    Admitted.
  End SomeType.
End SomeType.
Definition SomeType `{ℋ : State.Trait} : Set := M.val SomeType.t.

Module OtherType.
  Section OtherType.
    Context `{ℋ : State.Trait}.
    
    Unset Primitive Projections.
    Record t : Set := {
      x0 : bool;
    }.
    Global Set Primitive Projections.
    
    #[refine] Global Instance Get_0 : Notation.Dot "0" := {
      Notation.dot x := let* x := M.read x in Pure x.(x0) : M _;
    }.
    Admitted.
  End OtherType.
End OtherType.
Definition OtherType `{ℋ : State.Trait} : Set := M.val OtherType.t.

Module Impl_functions_order_SomeType.
  Section Impl_functions_order_SomeType.
    Context `{ℋ : State.Trait}.
    
    Definition Self : Set := functions_order.SomeType.
    
    Parameter meth2 : Self -> M unit.
    
    Global Instance AssociatedFunction_meth2 :
      Notation.DoubleColon Self "meth2" := {
      Notation.double_colon := meth2;
    }.
    
    Parameter meth1 : Self -> M unit.
    
    Global Instance AssociatedFunction_meth1 :
      Notation.DoubleColon Self "meth1" := {
      Notation.double_colon := meth1;
    }.
  End Impl_functions_order_SomeType.
End Impl_functions_order_SomeType.

Module SomeTrait.
  Section SomeTrait.
    Context `{ℋ : State.Trait}.
    
    Class Trait (Self : Set) : Type := {
      some_trait_foo : (ref Self) -> M unit;
      some_trait_bar : (ref Self) -> M unit;
    }.
    
  End SomeTrait.
End SomeTrait.

Module Impl_functions_order_SomeTrait_for_functions_order_SomeType.
  Section Impl_functions_order_SomeTrait_for_functions_order_SomeType.
    Context `{ℋ : State.Trait}.
    
    Definition Self : Set := functions_order.SomeType.
    
    Parameter some_trait_bar : (ref Self) -> M unit.
    
    Global Instance AssociatedFunction_some_trait_bar :
      Notation.DoubleColon Self "some_trait_bar" := {
      Notation.double_colon := some_trait_bar;
    }.
    
    Parameter some_trait_foo : (ref Self) -> M unit.
    
    Global Instance AssociatedFunction_some_trait_foo :
      Notation.DoubleColon Self "some_trait_foo" := {
      Notation.double_colon := some_trait_foo;
    }.
    
    #[refine] Global Instance ℐ : functions_order.SomeTrait.Trait Self := {
      functions_order.SomeTrait.some_trait_bar := some_trait_bar;
      functions_order.SomeTrait.some_trait_foo := some_trait_foo;
    }.
    Admitted.
  End Impl_functions_order_SomeTrait_for_functions_order_SomeType.
  Global Hint Resolve ℐ : core.
End Impl_functions_order_SomeTrait_for_functions_order_SomeType.

Module Impl_functions_order_SomeTrait_for_functions_order_OtherType.
  Section Impl_functions_order_SomeTrait_for_functions_order_OtherType.
    Context `{ℋ : State.Trait}.
    
    Definition Self : Set := functions_order.OtherType.
    
    Parameter some_trait_foo : (ref Self) -> M unit.
    
    Global Instance AssociatedFunction_some_trait_foo :
      Notation.DoubleColon Self "some_trait_foo" := {
      Notation.double_colon := some_trait_foo;
    }.
    
    Parameter some_trait_bar : (ref Self) -> M unit.
    
    Global Instance AssociatedFunction_some_trait_bar :
      Notation.DoubleColon Self "some_trait_bar" := {
      Notation.double_colon := some_trait_bar;
    }.
    
    #[refine] Global Instance ℐ : functions_order.SomeTrait.Trait Self := {
      functions_order.SomeTrait.some_trait_foo := some_trait_foo;
      functions_order.SomeTrait.some_trait_bar := some_trait_bar;
    }.
    Admitted.
  End Impl_functions_order_SomeTrait_for_functions_order_OtherType.
  Global Hint Resolve ℐ : core.
End Impl_functions_order_SomeTrait_for_functions_order_OtherType.

Parameter depends_on_trait_impl :
    forall `{ℋ : State.Trait},
    u32 -> bool -> M unit.

Module inner_mod.
  Parameter tar : forall `{ℋ : State.Trait}, M unit.
  
  Parameter bar : forall `{ℋ : State.Trait}, M unit.
  
  Module nested_mod.
    Parameter tack : forall `{ℋ : State.Trait}, M unit.
    
    Parameter tick : forall `{ℋ : State.Trait}, M unit.
  End nested_mod.
End inner_mod.

Parameter bar : forall `{ℋ : State.Trait}, M unit.

Parameter tar : forall `{ℋ : State.Trait}, M unit.

Module nested_mod.
  Parameter tack : forall `{ℋ : State.Trait}, M unit.
  
  Parameter tick : forall `{ℋ : State.Trait}, M unit.
End nested_mod.

Parameter tick : forall `{ℋ : State.Trait}, M unit.

Parameter tack : forall `{ℋ : State.Trait}, M unit.

Parameter foo : forall `{ℋ : State.Trait}, M unit.

(* #[allow(dead_code)] - function was ignored by the compiler *)
Parameter main : forall `{ℋ : State.Trait}, M unit.
