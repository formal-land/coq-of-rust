(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module Container.
  Unset Primitive Projections.
  Record t : Set := {
    _ : i32;
    _ : i32;
  }.
  Global Set Primitive Projections.

  Global Instance Get_0 : Notation.Dot 0 := {
    Notation.dot '(Build_t x0 _) := x0;
  }.
  Global Instance Get_1 : Notation.Dot 1 := {
    Notation.dot '(Build_t _ x1) := x1;
  }.
End Container.
Definition Container := Container.t.

Module Contains.
  Class Trait (Self : Set) {A : Set} {B : Set} : Set := {
    A := A;
    B := B;
    contains
      `{H : State.Trait}
      :
      (ref Self) -> (ref ImplSelf.A) -> (ref ImplSelf.B) -> (M (H := H) bool);
    first `{H : State.Trait} : (ref Self) -> (M (H := H) i32);
    last `{H : State.Trait} : (ref Self) -> (M (H := H) i32);
  }.
  
  Global Instance Method_A `{H : State.Trait} `(Trait)
    : Notation.DoubleColonType Self "A" := {
    Notation.double_colon_type := A;
  }.
  Global Instance Method_B `{H : State.Trait} `(Trait)
    : Notation.DoubleColonType Self "B" := {
    Notation.double_colon_type := B;
  }.
  Global Instance Method_contains `{H : State.Trait} `(Trait)
    : Notation.Dot "contains" := {
    Notation.dot := contains;
  }.
  Global Instance Method_first `{H : State.Trait} `(Trait)
    : Notation.Dot "first" := {
    Notation.dot := first;
  }.
  Global Instance Method_last `{H : State.Trait} `(Trait)
    : Notation.Dot "last" := {
    Notation.dot := last;
  }.
End Contains.

Module
  Impl_generics_associated_types_solution_Contains_for_generics_associated_types_solution_Container.
  Definition Self := generics_associated_types_solution.Container.
  
  Definition A : Set := i32.
  
  Definition B : Set := i32.
  
  Parameter contains : forall `{H : State.Trait},
      ref Self ->
      ref i32 ->
      ref i32 ->
      M (H := H) bool.
  
  Global Instance Method_contains `{H : State.Trait} :
    Notation.Dot "contains" := {
    Notation.dot := contains;
  }.
  
  Parameter first : forall `{H : State.Trait}, ref Self -> M (H := H) i32.
  
  Global Instance Method_first `{H : State.Trait} : Notation.Dot "first" := {
    Notation.dot := first;
  }.
  
  Parameter last : forall `{H : State.Trait}, ref Self -> M (H := H) i32.
  
  Global Instance Method_last `{H : State.Trait} : Notation.Dot "last" := {
    Notation.dot := last;
  }.
  
  Global Instance I :
      generics_associated_types_solution.Contains.Trait Self := {
    generics_associated_types_solution.Contains.contains
      `{H : State.Trait}
      :=
      contains;
    generics_associated_types_solution.Contains.first
      `{H : State.Trait}
      :=
      first;
    generics_associated_types_solution.Contains.last `{H : State.Trait} := last;
  }.
End
  Impl_generics_associated_types_solution_Contains_for_generics_associated_types_solution_Container.

Parameter difference : forall `{H : State.Trait},
    forall
    {C : Set},
    `{generics_associated_types_solution.Contains.Trait C}
    ref C ->
    M (H := H) i32.

(* #[allow(dead_code)] - function was ignored by the compiler *)
Parameter main : forall `{H : State.Trait}, M (H := H) unit.
