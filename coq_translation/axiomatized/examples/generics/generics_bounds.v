(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module HasArea.
  Section HasArea.
    Context `{ℋ : State.Trait}.
    
    Class Trait (Self : Set) : Type := {
      area : (ref Self) -> M f64;
    }.
    
  End HasArea.
End HasArea.

Module Impl_generics_bounds_HasArea_for_generics_bounds_Rectangle.
  Section Impl_generics_bounds_HasArea_for_generics_bounds_Rectangle.
    Context `{ℋ : State.Trait}.
    
    Definition Self : Set := generics_bounds.Rectangle.
    
    Parameter area : (ref Self) -> M f64.
    
    Global Instance AssociatedFunction_area :
      Notation.DoubleColon Self "area" := {
      Notation.double_colon := area;
    }.
    
    #[refine] Global Instance ℐ : generics_bounds.HasArea.Trait Self := {
      generics_bounds.HasArea.area := area;
    }.
    Admitted.
  End Impl_generics_bounds_HasArea_for_generics_bounds_Rectangle.
  Global Hint Resolve ℐ : core.
End Impl_generics_bounds_HasArea_for_generics_bounds_Rectangle.

Module Rectangle.
  Section Rectangle.
    Context `{ℋ : State.Trait}.
    
    Unset Primitive Projections.
    Record t : Set := {
      length : f64;
      height : f64;
    }.
    Global Set Primitive Projections.
    
    #[refine] Global Instance Get_length : Notation.Dot "length" := {
      Notation.dot x := let* x := M.read x in Pure x.(length) : M _;
    }.
    Admitted.
    #[refine] Global Instance Get_AF_length :
      Notation.DoubleColon t "length" := {
      Notation.double_colon x := let* x := M.read x in Pure x.(length) : M _;
    }.
    Admitted.
    #[refine] Global Instance Get_height : Notation.Dot "height" := {
      Notation.dot x := let* x := M.read x in Pure x.(height) : M _;
    }.
    Admitted.
    #[refine] Global Instance Get_AF_height :
      Notation.DoubleColon t "height" := {
      Notation.double_colon x := let* x := M.read x in Pure x.(height) : M _;
    }.
    Admitted.
  End Rectangle.
End Rectangle.
Definition Rectangle `{ℋ : State.Trait} : Set := M.val Rectangle.t.

Module Impl_core_fmt_Debug_for_generics_bounds_Rectangle.
  Section Impl_core_fmt_Debug_for_generics_bounds_Rectangle.
    Context `{ℋ : State.Trait}.
    
    Definition Self : Set := generics_bounds.Rectangle.
    
    Parameter fmt :
        (ref Self) -> (mut_ref core.fmt.Formatter) -> M ltac:(core.fmt.Result).
    
    Global Instance AssociatedFunction_fmt :
      Notation.DoubleColon Self "fmt" := {
      Notation.double_colon := fmt;
    }.
    
    #[refine] Global Instance ℐ : core.fmt.Debug.Trait Self := {
      core.fmt.Debug.fmt := fmt;
    }.
    Admitted.
  End Impl_core_fmt_Debug_for_generics_bounds_Rectangle.
  Global Hint Resolve ℐ : core.
End Impl_core_fmt_Debug_for_generics_bounds_Rectangle.

(* #[allow(dead_code)] - struct was ignored by the compiler *)
Module Triangle.
  Section Triangle.
    Context `{ℋ : State.Trait}.
    
    Unset Primitive Projections.
    Record t : Set := {
      length : f64;
      height : f64;
    }.
    Global Set Primitive Projections.
    
    #[refine] Global Instance Get_length : Notation.Dot "length" := {
      Notation.dot x := let* x := M.read x in Pure x.(length) : M _;
    }.
    Admitted.
    #[refine] Global Instance Get_AF_length :
      Notation.DoubleColon t "length" := {
      Notation.double_colon x := let* x := M.read x in Pure x.(length) : M _;
    }.
    Admitted.
    #[refine] Global Instance Get_height : Notation.Dot "height" := {
      Notation.dot x := let* x := M.read x in Pure x.(height) : M _;
    }.
    Admitted.
    #[refine] Global Instance Get_AF_height :
      Notation.DoubleColon t "height" := {
      Notation.double_colon x := let* x := M.read x in Pure x.(height) : M _;
    }.
    Admitted.
  End Triangle.
End Triangle.
Definition Triangle `{ℋ : State.Trait} : Set := M.val Triangle.t.

Parameter print_debug :
    forall `{ℋ : State.Trait} {T : Set} {ℋ_0 : core.fmt.Debug.Trait T},
    (ref T) -> M unit.

Parameter area :
    forall `{ℋ : State.Trait} {T : Set} {ℋ_0 : generics_bounds.HasArea.Trait T},
    (ref T) -> M f64.

(* #[allow(dead_code)] - function was ignored by the compiler *)
Parameter main : forall `{ℋ : State.Trait}, M unit.
