(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module Ref.
  Record t : Set := { _ : ref T;}.
  
  Global Instance Get_0 : Notation.Dot 0 := {
    Notation.dot '(Build_t x0) := x0;
  }.
End Ref.
Definition Ref := Ref.t.

Module Impl_core_fmt_Debug_for_scoping_rules_lifetimes_bounds_Ref_T.
Section Impl_core_fmt_Debug_for_scoping_rules_lifetimes_bounds_Ref_T.
  Context {T : Set}.
  
  Definition Self := scoping_rules_lifetimes_bounds.Ref T.
  
  Parameter fmt : ref Self-> mut_ref core.fmt.Formatter -> M core.fmt.Result.
  
  Global Instance Method_fmt : Notation.Dot "fmt" := {
    Notation.dot := fmt;
  }.
  
  Global Instance I : core.fmt.Debug.Trait Self := {
    core.fmt.Debug.fmt := fmt;
  }.
End Impl_core_fmt_Debug_for_scoping_rules_lifetimes_bounds_Ref_T.
End Impl_core_fmt_Debug_for_scoping_rules_lifetimes_bounds_Ref_T.

Parameter print : forall {T : Set}, `{core.fmt.Debug.Trait T} T -> M unit.

Parameter print_ref : forall
    {T : Set},
    `{core.fmt.Debug.Trait T}
    ref T
    -> M unit.

(* #[allow(dead_code)] - function was ignored by the compiler *)
Parameter main : unit -> M unit.
