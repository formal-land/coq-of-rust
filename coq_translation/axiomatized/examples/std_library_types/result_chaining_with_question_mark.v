(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module checked.
  Module MathError.
    Inductive t `{ℋ : State.Trait} : Set :=
    | DivisionByZero
    | NonPositiveLogarithm
    | NegativeSquareRoot.
  End MathError.
  Definition MathError `{ℋ : State.Trait} : Set := MathError.t.
  
  Module
    Impl_core_fmt_Debug_for_result_chaining_with_question_mark_checked_MathError.
    Section
      Impl_core_fmt_Debug_for_result_chaining_with_question_mark_checked_MathError.
      Context `{ℋ : State.Trait}.
      
      Definition Self : Set :=
        result_chaining_with_question_mark.checked.MathError.
      
      Parameter fmt :
          (ref Self) ->
            (mut_ref core.fmt.Formatter) ->
            M ltac:(core.fmt.Result).
      
      Global Instance AssociatedFunction_fmt :
        Notation.DoubleColon Self "fmt" := {
        Notation.double_colon := fmt;
      }.
      
      #[refine] Global Instance ℐ : core.fmt.Debug.Trait Self := {
        core.fmt.Debug.fmt := fmt;
      }.
      Admitted.
    End
      Impl_core_fmt_Debug_for_result_chaining_with_question_mark_checked_MathError.
    Global Hint Resolve ℐ : core.
  End
    Impl_core_fmt_Debug_for_result_chaining_with_question_mark_checked_MathError.
  
  Ltac MathResult :=
    refine
      (core.result.Result
        f64
        result_chaining_with_question_mark.checked.MathError).
  
  Parameter div :
      forall `{ℋ : State.Trait},
      f64 ->
        f64 ->
        M ltac:(result_chaining_with_question_mark.checked.MathResult).
  
  Parameter sqrt :
      forall `{ℋ : State.Trait},
      f64 -> M ltac:(result_chaining_with_question_mark.checked.MathResult).
  
  Parameter ln :
      forall `{ℋ : State.Trait},
      f64 -> M ltac:(result_chaining_with_question_mark.checked.MathResult).
  
  Parameter op_ :
      forall `{ℋ : State.Trait},
      f64 ->
        f64 ->
        M ltac:(result_chaining_with_question_mark.checked.MathResult).
  
  Parameter op : forall `{ℋ : State.Trait}, f64 -> f64 -> M unit.
End checked.

Module MathError.
  Inductive t `{ℋ : State.Trait} : Set :=
  | DivisionByZero
  | NonPositiveLogarithm
  | NegativeSquareRoot.
End MathError.
Definition MathError `{ℋ : State.Trait} : Set := MathError.t.

Module
  Impl_core_fmt_Debug_for_result_chaining_with_question_mark_checked_MathError.
  Section
    Impl_core_fmt_Debug_for_result_chaining_with_question_mark_checked_MathError.
    Context `{ℋ : State.Trait}.
    
    Definition Self : Set :=
      result_chaining_with_question_mark.checked.MathError.
    
    Parameter fmt :
        (ref Self) -> (mut_ref core.fmt.Formatter) -> M ltac:(core.fmt.Result).
    
    Global Instance AssociatedFunction_fmt :
      Notation.DoubleColon Self "fmt" := {
      Notation.double_colon := fmt;
    }.
    
    #[refine] Global Instance ℐ : core.fmt.Debug.Trait Self := {
      core.fmt.Debug.fmt := fmt;
    }.
    Admitted.
  End
    Impl_core_fmt_Debug_for_result_chaining_with_question_mark_checked_MathError.
  Global Hint Resolve ℐ : core.
End
  Impl_core_fmt_Debug_for_result_chaining_with_question_mark_checked_MathError.

Ltac MathResult :=
  refine
    (core.result.Result
      f64
      result_chaining_with_question_mark.checked.MathError).

Parameter div :
    forall `{ℋ : State.Trait},
    f64 ->
      f64 ->
      M ltac:(result_chaining_with_question_mark.checked.MathResult).

Parameter sqrt :
    forall `{ℋ : State.Trait},
    f64 -> M ltac:(result_chaining_with_question_mark.checked.MathResult).

Parameter ln :
    forall `{ℋ : State.Trait},
    f64 -> M ltac:(result_chaining_with_question_mark.checked.MathResult).

Parameter op_ :
    forall `{ℋ : State.Trait},
    f64 ->
      f64 ->
      M ltac:(result_chaining_with_question_mark.checked.MathResult).

Parameter op : forall `{ℋ : State.Trait}, f64 -> f64 -> M unit.

(* #[allow(dead_code)] - function was ignored by the compiler *)
Parameter main : forall `{ℋ : State.Trait}, M unit.
