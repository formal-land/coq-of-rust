(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module checked.
  Module MathError.
    Inductive t : Set :=
    | DivisionByZero
    | NonPositiveLogarithm
    | NegativeSquareRoot.
  End MathError.
  Definition MathError := MathError.t.
  
  Module
    Impl_core_fmt_Debug_for_result_chaining_with_question_mark_checked_MathError.
    Definition Self := result_chaining_with_question_mark.checked.MathError.
    
    Parameter fmt : ref Self-> mut_ref core.fmt.Formatter -> M core.fmt.Result.
    
    Global Instance Method_fmt : Notation.Dot "fmt" := {
      Notation.dot := fmt;
    }.
    
    Global Instance I : core.fmt.Debug.Trait Self := {
      core.fmt.Debug.fmt := fmt;
    }.
  End
    Impl_core_fmt_Debug_for_result_chaining_with_question_mark_checked_MathError.
  
  Definition MathResult : Set :=
    core.result.Result f64 result_chaining_with_question_mark.checked.MathError.
  
  Parameter div : f64->
      f64
      -> M result_chaining_with_question_mark.checked.MathResult.
  
  Parameter sqrt : f64
      -> M result_chaining_with_question_mark.checked.MathResult.
  
  Parameter ln : f64 -> M result_chaining_with_question_mark.checked.MathResult.
  
  Parameter op_ : f64->
      f64
      -> M result_chaining_with_question_mark.checked.MathResult.
  
  Parameter op : f64-> f64 -> M unit.
End checked.

Module MathError.
  Inductive t : Set :=
  | DivisionByZero
  | NonPositiveLogarithm
  | NegativeSquareRoot.
End MathError.
Definition MathError := MathError.t.

Module
  Impl_core_fmt_Debug_for_result_chaining_with_question_mark_checked_MathError.
  Definition Self := result_chaining_with_question_mark.checked.MathError.
  
  Parameter fmt : ref Self-> mut_ref core.fmt.Formatter -> M core.fmt.Result.
  
  Global Instance Method_fmt : Notation.Dot "fmt" := {
    Notation.dot := fmt;
  }.
  
  Global Instance I : core.fmt.Debug.Trait Self := {
    core.fmt.Debug.fmt := fmt;
  }.
End
  Impl_core_fmt_Debug_for_result_chaining_with_question_mark_checked_MathError.

Definition MathResult : Set :=
  core.result.Result f64 result_chaining_with_question_mark.checked.MathError.

Parameter div : f64->
    f64
    -> M result_chaining_with_question_mark.checked.MathResult.

Parameter sqrt : f64 -> M result_chaining_with_question_mark.checked.MathResult.

Parameter ln : f64 -> M result_chaining_with_question_mark.checked.MathResult.

Parameter op_ : f64->
    f64
    -> M result_chaining_with_question_mark.checked.MathResult.

Parameter op : f64-> f64 -> M unit.

(* #[allow(dead_code)] - function was ignored by the compiler *)
Parameter main : unit -> M unit.
