(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module Choice.
  Section Choice.
    Context `{ℋ : State.Trait}.
    
    Unset Primitive Projections.
    Record t : Set := {
      x0 : u8;
    }.
    Global Set Primitive Projections.
    
    #[refine] Global Instance Get_0 : Notation.Dot "0" := {
      Notation.dot x := let* x := M.read x in Pure x.(x0) : M _;
    }.
    Admitted.
  End Choice.
End Choice.
Definition Choice `{ℋ : State.Trait} : Set := M.val Choice.t.

Module Impl_core_marker_Copy_for_subtle_Choice.
  Section Impl_core_marker_Copy_for_subtle_Choice.
    Context `{ℋ : State.Trait}.
    
    Definition Self : Set := subtle.Choice.
    
    #[refine] Global Instance ℐ : core.marker.Copy.Trait Self := {
    }.
    Admitted.
  End Impl_core_marker_Copy_for_subtle_Choice.
  Global Hint Resolve ℐ : core.
End Impl_core_marker_Copy_for_subtle_Choice.

Module Impl_core_clone_Clone_for_subtle_Choice.
  Section Impl_core_clone_Clone_for_subtle_Choice.
    Context `{ℋ : State.Trait}.
    
    Definition Self : Set := subtle.Choice.
    
    Parameter clone : (ref Self) -> M subtle.Choice.
    
    Global Instance AssociatedFunction_clone :
      Notation.DoubleColon Self "clone" := {
      Notation.double_colon := clone;
    }.
    
    #[refine] Global Instance ℐ : core.clone.Clone.Trait Self := {
      core.clone.Clone.clone := clone;
    }.
    Admitted.
  End Impl_core_clone_Clone_for_subtle_Choice.
  Global Hint Resolve ℐ : core.
End Impl_core_clone_Clone_for_subtle_Choice.

Module Impl_core_fmt_Debug_for_subtle_Choice.
  Section Impl_core_fmt_Debug_for_subtle_Choice.
    Context `{ℋ : State.Trait}.
    
    Definition Self : Set := subtle.Choice.
    
    Parameter fmt :
        (ref Self) -> (mut_ref core.fmt.Formatter) -> M ltac:(core.fmt.Result).
    
    Global Instance AssociatedFunction_fmt :
      Notation.DoubleColon Self "fmt" := {
      Notation.double_colon := fmt;
    }.
    
    #[refine] Global Instance ℐ : core.fmt.Debug.Trait Self := {
      core.fmt.Debug.fmt := fmt;
    }.
    Admitted.
  End Impl_core_fmt_Debug_for_subtle_Choice.
  Global Hint Resolve ℐ : core.
End Impl_core_fmt_Debug_for_subtle_Choice.

Module Impl_subtle_Choice_4.
  Section Impl_subtle_Choice_4.
    Context `{ℋ : State.Trait}.
    
    Definition Self : Set := subtle.Choice.
    
    Parameter unwrap_u8 : (ref Self) -> M u8.
    
    Global Instance AssociatedFunction_unwrap_u8 :
      Notation.DoubleColon Self "unwrap_u8" := {
      Notation.double_colon := unwrap_u8;
    }.
  End Impl_subtle_Choice_4.
End Impl_subtle_Choice_4.

Module Impl_core_convert_From_for_bool.
  Section Impl_core_convert_From_for_bool.
    Context `{ℋ : State.Trait}.
    
    Definition Self : Set := bool.
    
    Parameter from : subtle.Choice -> M bool.
    
    Global Instance AssociatedFunction_from :
      Notation.DoubleColon Self "from" := {
      Notation.double_colon := from;
    }.
    
    #[refine] Global Instance ℐ :
      core.convert.From.Trait Self (T := subtle.Choice) := {
      core.convert.From.from := from;
    }.
    Admitted.
  End Impl_core_convert_From_for_bool.
  Global Hint Resolve ℐ : core.
End Impl_core_convert_From_for_bool.

Module Impl_core_ops_bit_BitAnd_for_subtle_Choice.
  Section Impl_core_ops_bit_BitAnd_for_subtle_Choice.
    Context `{ℋ : State.Trait}.
    
    Definition Self : Set := subtle.Choice.
    
    Definition Output : Set := subtle.Choice.
    
    Parameter bitand : Self -> subtle.Choice -> M subtle.Choice.
    
    Global Instance AssociatedFunction_bitand :
      Notation.DoubleColon Self "bitand" := {
      Notation.double_colon := bitand;
    }.
    
    #[refine] Global Instance ℐ :
      core.ops.bit.BitAnd.Trait Self
        (Rhs := core.ops.bit.BitAnd.Default.Rhs Self) := {
      core.ops.bit.BitAnd.Output := Output;
      core.ops.bit.BitAnd.bitand := bitand;
    }.
    Admitted.
  End Impl_core_ops_bit_BitAnd_for_subtle_Choice.
  Global Hint Resolve ℐ : core.
End Impl_core_ops_bit_BitAnd_for_subtle_Choice.

Module Impl_core_ops_bit_BitAndAssign_for_subtle_Choice.
  Section Impl_core_ops_bit_BitAndAssign_for_subtle_Choice.
    Context `{ℋ : State.Trait}.
    
    Definition Self : Set := subtle.Choice.
    
    Parameter bitand_assign : (mut_ref Self) -> subtle.Choice -> M unit.
    
    Global Instance AssociatedFunction_bitand_assign :
      Notation.DoubleColon Self "bitand_assign" := {
      Notation.double_colon := bitand_assign;
    }.
    
    #[refine] Global Instance ℐ :
      core.ops.bit.BitAndAssign.Trait Self
        (Rhs := core.ops.bit.BitAndAssign.Default.Rhs Self) := {
      core.ops.bit.BitAndAssign.bitand_assign := bitand_assign;
    }.
    Admitted.
  End Impl_core_ops_bit_BitAndAssign_for_subtle_Choice.
  Global Hint Resolve ℐ : core.
End Impl_core_ops_bit_BitAndAssign_for_subtle_Choice.

Module Impl_core_ops_bit_BitOr_for_subtle_Choice.
  Section Impl_core_ops_bit_BitOr_for_subtle_Choice.
    Context `{ℋ : State.Trait}.
    
    Definition Self : Set := subtle.Choice.
    
    Definition Output : Set := subtle.Choice.
    
    Parameter bitor : Self -> subtle.Choice -> M subtle.Choice.
    
    Global Instance AssociatedFunction_bitor :
      Notation.DoubleColon Self "bitor" := {
      Notation.double_colon := bitor;
    }.
    
    #[refine] Global Instance ℐ :
      core.ops.bit.BitOr.Trait Self
        (Rhs := core.ops.bit.BitOr.Default.Rhs Self) := {
      core.ops.bit.BitOr.Output := Output;
      core.ops.bit.BitOr.bitor := bitor;
    }.
    Admitted.
  End Impl_core_ops_bit_BitOr_for_subtle_Choice.
  Global Hint Resolve ℐ : core.
End Impl_core_ops_bit_BitOr_for_subtle_Choice.

Module Impl_core_ops_bit_BitOrAssign_for_subtle_Choice.
  Section Impl_core_ops_bit_BitOrAssign_for_subtle_Choice.
    Context `{ℋ : State.Trait}.
    
    Definition Self : Set := subtle.Choice.
    
    Parameter bitor_assign : (mut_ref Self) -> subtle.Choice -> M unit.
    
    Global Instance AssociatedFunction_bitor_assign :
      Notation.DoubleColon Self "bitor_assign" := {
      Notation.double_colon := bitor_assign;
    }.
    
    #[refine] Global Instance ℐ :
      core.ops.bit.BitOrAssign.Trait Self
        (Rhs := core.ops.bit.BitOrAssign.Default.Rhs Self) := {
      core.ops.bit.BitOrAssign.bitor_assign := bitor_assign;
    }.
    Admitted.
  End Impl_core_ops_bit_BitOrAssign_for_subtle_Choice.
  Global Hint Resolve ℐ : core.
End Impl_core_ops_bit_BitOrAssign_for_subtle_Choice.

Module Impl_core_ops_bit_BitXor_for_subtle_Choice.
  Section Impl_core_ops_bit_BitXor_for_subtle_Choice.
    Context `{ℋ : State.Trait}.
    
    Definition Self : Set := subtle.Choice.
    
    Definition Output : Set := subtle.Choice.
    
    Parameter bitxor : Self -> subtle.Choice -> M subtle.Choice.
    
    Global Instance AssociatedFunction_bitxor :
      Notation.DoubleColon Self "bitxor" := {
      Notation.double_colon := bitxor;
    }.
    
    #[refine] Global Instance ℐ :
      core.ops.bit.BitXor.Trait Self
        (Rhs := core.ops.bit.BitXor.Default.Rhs Self) := {
      core.ops.bit.BitXor.Output := Output;
      core.ops.bit.BitXor.bitxor := bitxor;
    }.
    Admitted.
  End Impl_core_ops_bit_BitXor_for_subtle_Choice.
  Global Hint Resolve ℐ : core.
End Impl_core_ops_bit_BitXor_for_subtle_Choice.

Module Impl_core_ops_bit_BitXorAssign_for_subtle_Choice.
  Section Impl_core_ops_bit_BitXorAssign_for_subtle_Choice.
    Context `{ℋ : State.Trait}.
    
    Definition Self : Set := subtle.Choice.
    
    Parameter bitxor_assign : (mut_ref Self) -> subtle.Choice -> M unit.
    
    Global Instance AssociatedFunction_bitxor_assign :
      Notation.DoubleColon Self "bitxor_assign" := {
      Notation.double_colon := bitxor_assign;
    }.
    
    #[refine] Global Instance ℐ :
      core.ops.bit.BitXorAssign.Trait Self
        (Rhs := core.ops.bit.BitXorAssign.Default.Rhs Self) := {
      core.ops.bit.BitXorAssign.bitxor_assign := bitxor_assign;
    }.
    Admitted.
  End Impl_core_ops_bit_BitXorAssign_for_subtle_Choice.
  Global Hint Resolve ℐ : core.
End Impl_core_ops_bit_BitXorAssign_for_subtle_Choice.

Module Impl_core_ops_bit_Not_for_subtle_Choice.
  Section Impl_core_ops_bit_Not_for_subtle_Choice.
    Context `{ℋ : State.Trait}.
    
    Definition Self : Set := subtle.Choice.
    
    Definition Output : Set := subtle.Choice.
    
    Parameter not : Self -> M subtle.Choice.
    
    Global Instance AssociatedFunction_not :
      Notation.DoubleColon Self "not" := {
      Notation.double_colon := not;
    }.
    
    #[refine] Global Instance ℐ : core.ops.bit.Not.Trait Self := {
      core.ops.bit.Not.Output := Output;
      core.ops.bit.Not.not := not;
    }.
    Admitted.
  End Impl_core_ops_bit_Not_for_subtle_Choice.
  Global Hint Resolve ℐ : core.
End Impl_core_ops_bit_Not_for_subtle_Choice.

Parameter black_box : forall `{ℋ : State.Trait}, u8 -> M u8.

Module Impl_core_convert_From_for_subtle_Choice.
  Section Impl_core_convert_From_for_subtle_Choice.
    Context `{ℋ : State.Trait}.
    
    Definition Self : Set := subtle.Choice.
    
    Parameter from : u8 -> M subtle.Choice.
    
    Global Instance AssociatedFunction_from :
      Notation.DoubleColon Self "from" := {
      Notation.double_colon := from;
    }.
    
    #[refine] Global Instance ℐ : core.convert.From.Trait Self (T := u8) := {
      core.convert.From.from := from;
    }.
    Admitted.
  End Impl_core_convert_From_for_subtle_Choice.
  Global Hint Resolve ℐ : core.
End Impl_core_convert_From_for_subtle_Choice.

Module ConstantTimeEq.
  Section ConstantTimeEq.
    Context `{ℋ : State.Trait}.
    
    Class Trait (Self : Set) : Type := {
      ct_eq : (ref Self) -> (ref Self) -> M subtle.Choice;
    }.
    
  End ConstantTimeEq.
End ConstantTimeEq.

Module Impl_subtle_ConstantTimeEq_for_Slice_T.
  Section Impl_subtle_ConstantTimeEq_for_Slice_T.
    Context `{ℋ : State.Trait}.
    
    Context {T : Set}.
    
    Context {ℋ_0 : subtle.ConstantTimeEq.Trait T}.
    Definition Self : Set := Slice T.
    
    Parameter ct_eq : (ref Self) -> (ref (Slice T)) -> M subtle.Choice.
    
    Global Instance AssociatedFunction_ct_eq :
      Notation.DoubleColon Self "ct_eq" := {
      Notation.double_colon := ct_eq;
    }.
    
    #[refine] Global Instance ℐ : subtle.ConstantTimeEq.Trait Self := {
      subtle.ConstantTimeEq.ct_eq := ct_eq;
    }.
    Admitted.
  End Impl_subtle_ConstantTimeEq_for_Slice_T.
  Global Hint Resolve ℐ : core.
End Impl_subtle_ConstantTimeEq_for_Slice_T.

Module Impl_subtle_ConstantTimeEq_for_subtle_Choice.
  Section Impl_subtle_ConstantTimeEq_for_subtle_Choice.
    Context `{ℋ : State.Trait}.
    
    Definition Self : Set := subtle.Choice.
    
    Parameter ct_eq : (ref Self) -> (ref subtle.Choice) -> M subtle.Choice.
    
    Global Instance AssociatedFunction_ct_eq :
      Notation.DoubleColon Self "ct_eq" := {
      Notation.double_colon := ct_eq;
    }.
    
    #[refine] Global Instance ℐ : subtle.ConstantTimeEq.Trait Self := {
      subtle.ConstantTimeEq.ct_eq := ct_eq;
    }.
    Admitted.
  End Impl_subtle_ConstantTimeEq_for_subtle_Choice.
  Global Hint Resolve ℐ : core.
End Impl_subtle_ConstantTimeEq_for_subtle_Choice.

Module Impl_subtle_ConstantTimeEq_for_u8.
  Section Impl_subtle_ConstantTimeEq_for_u8.
    Context `{ℋ : State.Trait}.
    
    Definition Self : Set := u8.
    
    Parameter ct_eq : (ref Self) -> (ref u8) -> M subtle.Choice.
    
    Global Instance AssociatedFunction_ct_eq :
      Notation.DoubleColon Self "ct_eq" := {
      Notation.double_colon := ct_eq;
    }.
    
    #[refine] Global Instance ℐ : subtle.ConstantTimeEq.Trait Self := {
      subtle.ConstantTimeEq.ct_eq := ct_eq;
    }.
    Admitted.
  End Impl_subtle_ConstantTimeEq_for_u8.
  Global Hint Resolve ℐ : core.
End Impl_subtle_ConstantTimeEq_for_u8.

Module Impl_subtle_ConstantTimeEq_for_i8.
  Section Impl_subtle_ConstantTimeEq_for_i8.
    Context `{ℋ : State.Trait}.
    
    Definition Self : Set := i8.
    
    Parameter ct_eq : (ref Self) -> (ref i8) -> M subtle.Choice.
    
    Global Instance AssociatedFunction_ct_eq :
      Notation.DoubleColon Self "ct_eq" := {
      Notation.double_colon := ct_eq;
    }.
    
    #[refine] Global Instance ℐ : subtle.ConstantTimeEq.Trait Self := {
      subtle.ConstantTimeEq.ct_eq := ct_eq;
    }.
    Admitted.
  End Impl_subtle_ConstantTimeEq_for_i8.
  Global Hint Resolve ℐ : core.
End Impl_subtle_ConstantTimeEq_for_i8.

Module Impl_subtle_ConstantTimeEq_for_u16.
  Section Impl_subtle_ConstantTimeEq_for_u16.
    Context `{ℋ : State.Trait}.
    
    Definition Self : Set := u16.
    
    Parameter ct_eq : (ref Self) -> (ref u16) -> M subtle.Choice.
    
    Global Instance AssociatedFunction_ct_eq :
      Notation.DoubleColon Self "ct_eq" := {
      Notation.double_colon := ct_eq;
    }.
    
    #[refine] Global Instance ℐ : subtle.ConstantTimeEq.Trait Self := {
      subtle.ConstantTimeEq.ct_eq := ct_eq;
    }.
    Admitted.
  End Impl_subtle_ConstantTimeEq_for_u16.
  Global Hint Resolve ℐ : core.
End Impl_subtle_ConstantTimeEq_for_u16.

Module Impl_subtle_ConstantTimeEq_for_i16.
  Section Impl_subtle_ConstantTimeEq_for_i16.
    Context `{ℋ : State.Trait}.
    
    Definition Self : Set := i16.
    
    Parameter ct_eq : (ref Self) -> (ref i16) -> M subtle.Choice.
    
    Global Instance AssociatedFunction_ct_eq :
      Notation.DoubleColon Self "ct_eq" := {
      Notation.double_colon := ct_eq;
    }.
    
    #[refine] Global Instance ℐ : subtle.ConstantTimeEq.Trait Self := {
      subtle.ConstantTimeEq.ct_eq := ct_eq;
    }.
    Admitted.
  End Impl_subtle_ConstantTimeEq_for_i16.
  Global Hint Resolve ℐ : core.
End Impl_subtle_ConstantTimeEq_for_i16.

Module Impl_subtle_ConstantTimeEq_for_u32.
  Section Impl_subtle_ConstantTimeEq_for_u32.
    Context `{ℋ : State.Trait}.
    
    Definition Self : Set := u32.
    
    Parameter ct_eq : (ref Self) -> (ref u32) -> M subtle.Choice.
    
    Global Instance AssociatedFunction_ct_eq :
      Notation.DoubleColon Self "ct_eq" := {
      Notation.double_colon := ct_eq;
    }.
    
    #[refine] Global Instance ℐ : subtle.ConstantTimeEq.Trait Self := {
      subtle.ConstantTimeEq.ct_eq := ct_eq;
    }.
    Admitted.
  End Impl_subtle_ConstantTimeEq_for_u32.
  Global Hint Resolve ℐ : core.
End Impl_subtle_ConstantTimeEq_for_u32.

Module Impl_subtle_ConstantTimeEq_for_i32.
  Section Impl_subtle_ConstantTimeEq_for_i32.
    Context `{ℋ : State.Trait}.
    
    Definition Self : Set := i32.
    
    Parameter ct_eq : (ref Self) -> (ref i32) -> M subtle.Choice.
    
    Global Instance AssociatedFunction_ct_eq :
      Notation.DoubleColon Self "ct_eq" := {
      Notation.double_colon := ct_eq;
    }.
    
    #[refine] Global Instance ℐ : subtle.ConstantTimeEq.Trait Self := {
      subtle.ConstantTimeEq.ct_eq := ct_eq;
    }.
    Admitted.
  End Impl_subtle_ConstantTimeEq_for_i32.
  Global Hint Resolve ℐ : core.
End Impl_subtle_ConstantTimeEq_for_i32.

Module Impl_subtle_ConstantTimeEq_for_u64.
  Section Impl_subtle_ConstantTimeEq_for_u64.
    Context `{ℋ : State.Trait}.
    
    Definition Self : Set := u64.
    
    Parameter ct_eq : (ref Self) -> (ref u64) -> M subtle.Choice.
    
    Global Instance AssociatedFunction_ct_eq :
      Notation.DoubleColon Self "ct_eq" := {
      Notation.double_colon := ct_eq;
    }.
    
    #[refine] Global Instance ℐ : subtle.ConstantTimeEq.Trait Self := {
      subtle.ConstantTimeEq.ct_eq := ct_eq;
    }.
    Admitted.
  End Impl_subtle_ConstantTimeEq_for_u64.
  Global Hint Resolve ℐ : core.
End Impl_subtle_ConstantTimeEq_for_u64.

Module Impl_subtle_ConstantTimeEq_for_i64.
  Section Impl_subtle_ConstantTimeEq_for_i64.
    Context `{ℋ : State.Trait}.
    
    Definition Self : Set := i64.
    
    Parameter ct_eq : (ref Self) -> (ref i64) -> M subtle.Choice.
    
    Global Instance AssociatedFunction_ct_eq :
      Notation.DoubleColon Self "ct_eq" := {
      Notation.double_colon := ct_eq;
    }.
    
    #[refine] Global Instance ℐ : subtle.ConstantTimeEq.Trait Self := {
      subtle.ConstantTimeEq.ct_eq := ct_eq;
    }.
    Admitted.
  End Impl_subtle_ConstantTimeEq_for_i64.
  Global Hint Resolve ℐ : core.
End Impl_subtle_ConstantTimeEq_for_i64.

Module Impl_subtle_ConstantTimeEq_for_usize.
  Section Impl_subtle_ConstantTimeEq_for_usize.
    Context `{ℋ : State.Trait}.
    
    Definition Self : Set := usize.
    
    Parameter ct_eq : (ref Self) -> (ref usize) -> M subtle.Choice.
    
    Global Instance AssociatedFunction_ct_eq :
      Notation.DoubleColon Self "ct_eq" := {
      Notation.double_colon := ct_eq;
    }.
    
    #[refine] Global Instance ℐ : subtle.ConstantTimeEq.Trait Self := {
      subtle.ConstantTimeEq.ct_eq := ct_eq;
    }.
    Admitted.
  End Impl_subtle_ConstantTimeEq_for_usize.
  Global Hint Resolve ℐ : core.
End Impl_subtle_ConstantTimeEq_for_usize.

Module Impl_subtle_ConstantTimeEq_for_isize.
  Section Impl_subtle_ConstantTimeEq_for_isize.
    Context `{ℋ : State.Trait}.
    
    Definition Self : Set := isize.
    
    Parameter ct_eq : (ref Self) -> (ref isize) -> M subtle.Choice.
    
    Global Instance AssociatedFunction_ct_eq :
      Notation.DoubleColon Self "ct_eq" := {
      Notation.double_colon := ct_eq;
    }.
    
    #[refine] Global Instance ℐ : subtle.ConstantTimeEq.Trait Self := {
      subtle.ConstantTimeEq.ct_eq := ct_eq;
    }.
    Admitted.
  End Impl_subtle_ConstantTimeEq_for_isize.
  Global Hint Resolve ℐ : core.
End Impl_subtle_ConstantTimeEq_for_isize.

Module ConditionallySelectable.
  Section ConditionallySelectable.
    Context `{ℋ : State.Trait}.
    
    Class Trait (Self : Set) : Type := {
      ℒ_0 :: core.marker.Copy.Trait Self;
      conditional_select : (ref Self) -> (ref Self) -> subtle.Choice -> M Self;
    }.
    
  End ConditionallySelectable.
End ConditionallySelectable.

Module Impl_subtle_ConditionallySelectable_for_u8.
  Section Impl_subtle_ConditionallySelectable_for_u8.
    Context `{ℋ : State.Trait}.
    
    Definition Self : Set := u8.
    
    Parameter conditional_select :
        (ref Self) -> (ref Self) -> subtle.Choice -> M Self.
    
    Global Instance AssociatedFunction_conditional_select :
      Notation.DoubleColon Self "conditional_select" := {
      Notation.double_colon := conditional_select;
    }.
    
    Parameter conditional_assign :
        (mut_ref Self) -> (ref Self) -> subtle.Choice -> M unit.
    
    Global Instance AssociatedFunction_conditional_assign :
      Notation.DoubleColon Self "conditional_assign" := {
      Notation.double_colon := conditional_assign;
    }.
    
    Parameter conditional_swap :
        (mut_ref Self) -> (mut_ref Self) -> subtle.Choice -> M unit.
    
    Global Instance AssociatedFunction_conditional_swap :
      Notation.DoubleColon Self "conditional_swap" := {
      Notation.double_colon := conditional_swap;
    }.
    
    #[refine] Global Instance ℐ : subtle.ConditionallySelectable.Trait Self := {
      subtle.ConditionallySelectable.conditional_select := conditional_select;
    }.
    Admitted.
  End Impl_subtle_ConditionallySelectable_for_u8.
  Global Hint Resolve ℐ : core.
End Impl_subtle_ConditionallySelectable_for_u8.

Module Impl_subtle_ConditionallySelectable_for_i8.
  Section Impl_subtle_ConditionallySelectable_for_i8.
    Context `{ℋ : State.Trait}.
    
    Definition Self : Set := i8.
    
    Parameter conditional_select :
        (ref Self) -> (ref Self) -> subtle.Choice -> M Self.
    
    Global Instance AssociatedFunction_conditional_select :
      Notation.DoubleColon Self "conditional_select" := {
      Notation.double_colon := conditional_select;
    }.
    
    Parameter conditional_assign :
        (mut_ref Self) -> (ref Self) -> subtle.Choice -> M unit.
    
    Global Instance AssociatedFunction_conditional_assign :
      Notation.DoubleColon Self "conditional_assign" := {
      Notation.double_colon := conditional_assign;
    }.
    
    Parameter conditional_swap :
        (mut_ref Self) -> (mut_ref Self) -> subtle.Choice -> M unit.
    
    Global Instance AssociatedFunction_conditional_swap :
      Notation.DoubleColon Self "conditional_swap" := {
      Notation.double_colon := conditional_swap;
    }.
    
    #[refine] Global Instance ℐ : subtle.ConditionallySelectable.Trait Self := {
      subtle.ConditionallySelectable.conditional_select := conditional_select;
    }.
    Admitted.
  End Impl_subtle_ConditionallySelectable_for_i8.
  Global Hint Resolve ℐ : core.
End Impl_subtle_ConditionallySelectable_for_i8.

Module Impl_subtle_ConditionallySelectable_for_u16.
  Section Impl_subtle_ConditionallySelectable_for_u16.
    Context `{ℋ : State.Trait}.
    
    Definition Self : Set := u16.
    
    Parameter conditional_select :
        (ref Self) -> (ref Self) -> subtle.Choice -> M Self.
    
    Global Instance AssociatedFunction_conditional_select :
      Notation.DoubleColon Self "conditional_select" := {
      Notation.double_colon := conditional_select;
    }.
    
    Parameter conditional_assign :
        (mut_ref Self) -> (ref Self) -> subtle.Choice -> M unit.
    
    Global Instance AssociatedFunction_conditional_assign :
      Notation.DoubleColon Self "conditional_assign" := {
      Notation.double_colon := conditional_assign;
    }.
    
    Parameter conditional_swap :
        (mut_ref Self) -> (mut_ref Self) -> subtle.Choice -> M unit.
    
    Global Instance AssociatedFunction_conditional_swap :
      Notation.DoubleColon Self "conditional_swap" := {
      Notation.double_colon := conditional_swap;
    }.
    
    #[refine] Global Instance ℐ : subtle.ConditionallySelectable.Trait Self := {
      subtle.ConditionallySelectable.conditional_select := conditional_select;
    }.
    Admitted.
  End Impl_subtle_ConditionallySelectable_for_u16.
  Global Hint Resolve ℐ : core.
End Impl_subtle_ConditionallySelectable_for_u16.

Module Impl_subtle_ConditionallySelectable_for_i16.
  Section Impl_subtle_ConditionallySelectable_for_i16.
    Context `{ℋ : State.Trait}.
    
    Definition Self : Set := i16.
    
    Parameter conditional_select :
        (ref Self) -> (ref Self) -> subtle.Choice -> M Self.
    
    Global Instance AssociatedFunction_conditional_select :
      Notation.DoubleColon Self "conditional_select" := {
      Notation.double_colon := conditional_select;
    }.
    
    Parameter conditional_assign :
        (mut_ref Self) -> (ref Self) -> subtle.Choice -> M unit.
    
    Global Instance AssociatedFunction_conditional_assign :
      Notation.DoubleColon Self "conditional_assign" := {
      Notation.double_colon := conditional_assign;
    }.
    
    Parameter conditional_swap :
        (mut_ref Self) -> (mut_ref Self) -> subtle.Choice -> M unit.
    
    Global Instance AssociatedFunction_conditional_swap :
      Notation.DoubleColon Self "conditional_swap" := {
      Notation.double_colon := conditional_swap;
    }.
    
    #[refine] Global Instance ℐ : subtle.ConditionallySelectable.Trait Self := {
      subtle.ConditionallySelectable.conditional_select := conditional_select;
    }.
    Admitted.
  End Impl_subtle_ConditionallySelectable_for_i16.
  Global Hint Resolve ℐ : core.
End Impl_subtle_ConditionallySelectable_for_i16.

Module Impl_subtle_ConditionallySelectable_for_u32.
  Section Impl_subtle_ConditionallySelectable_for_u32.
    Context `{ℋ : State.Trait}.
    
    Definition Self : Set := u32.
    
    Parameter conditional_select :
        (ref Self) -> (ref Self) -> subtle.Choice -> M Self.
    
    Global Instance AssociatedFunction_conditional_select :
      Notation.DoubleColon Self "conditional_select" := {
      Notation.double_colon := conditional_select;
    }.
    
    Parameter conditional_assign :
        (mut_ref Self) -> (ref Self) -> subtle.Choice -> M unit.
    
    Global Instance AssociatedFunction_conditional_assign :
      Notation.DoubleColon Self "conditional_assign" := {
      Notation.double_colon := conditional_assign;
    }.
    
    Parameter conditional_swap :
        (mut_ref Self) -> (mut_ref Self) -> subtle.Choice -> M unit.
    
    Global Instance AssociatedFunction_conditional_swap :
      Notation.DoubleColon Self "conditional_swap" := {
      Notation.double_colon := conditional_swap;
    }.
    
    #[refine] Global Instance ℐ : subtle.ConditionallySelectable.Trait Self := {
      subtle.ConditionallySelectable.conditional_select := conditional_select;
    }.
    Admitted.
  End Impl_subtle_ConditionallySelectable_for_u32.
  Global Hint Resolve ℐ : core.
End Impl_subtle_ConditionallySelectable_for_u32.

Module Impl_subtle_ConditionallySelectable_for_i32.
  Section Impl_subtle_ConditionallySelectable_for_i32.
    Context `{ℋ : State.Trait}.
    
    Definition Self : Set := i32.
    
    Parameter conditional_select :
        (ref Self) -> (ref Self) -> subtle.Choice -> M Self.
    
    Global Instance AssociatedFunction_conditional_select :
      Notation.DoubleColon Self "conditional_select" := {
      Notation.double_colon := conditional_select;
    }.
    
    Parameter conditional_assign :
        (mut_ref Self) -> (ref Self) -> subtle.Choice -> M unit.
    
    Global Instance AssociatedFunction_conditional_assign :
      Notation.DoubleColon Self "conditional_assign" := {
      Notation.double_colon := conditional_assign;
    }.
    
    Parameter conditional_swap :
        (mut_ref Self) -> (mut_ref Self) -> subtle.Choice -> M unit.
    
    Global Instance AssociatedFunction_conditional_swap :
      Notation.DoubleColon Self "conditional_swap" := {
      Notation.double_colon := conditional_swap;
    }.
    
    #[refine] Global Instance ℐ : subtle.ConditionallySelectable.Trait Self := {
      subtle.ConditionallySelectable.conditional_select := conditional_select;
    }.
    Admitted.
  End Impl_subtle_ConditionallySelectable_for_i32.
  Global Hint Resolve ℐ : core.
End Impl_subtle_ConditionallySelectable_for_i32.

Module Impl_subtle_ConditionallySelectable_for_u64.
  Section Impl_subtle_ConditionallySelectable_for_u64.
    Context `{ℋ : State.Trait}.
    
    Definition Self : Set := u64.
    
    Parameter conditional_select :
        (ref Self) -> (ref Self) -> subtle.Choice -> M Self.
    
    Global Instance AssociatedFunction_conditional_select :
      Notation.DoubleColon Self "conditional_select" := {
      Notation.double_colon := conditional_select;
    }.
    
    Parameter conditional_assign :
        (mut_ref Self) -> (ref Self) -> subtle.Choice -> M unit.
    
    Global Instance AssociatedFunction_conditional_assign :
      Notation.DoubleColon Self "conditional_assign" := {
      Notation.double_colon := conditional_assign;
    }.
    
    Parameter conditional_swap :
        (mut_ref Self) -> (mut_ref Self) -> subtle.Choice -> M unit.
    
    Global Instance AssociatedFunction_conditional_swap :
      Notation.DoubleColon Self "conditional_swap" := {
      Notation.double_colon := conditional_swap;
    }.
    
    #[refine] Global Instance ℐ : subtle.ConditionallySelectable.Trait Self := {
      subtle.ConditionallySelectable.conditional_select := conditional_select;
    }.
    Admitted.
  End Impl_subtle_ConditionallySelectable_for_u64.
  Global Hint Resolve ℐ : core.
End Impl_subtle_ConditionallySelectable_for_u64.

Module Impl_subtle_ConditionallySelectable_for_i64.
  Section Impl_subtle_ConditionallySelectable_for_i64.
    Context `{ℋ : State.Trait}.
    
    Definition Self : Set := i64.
    
    Parameter conditional_select :
        (ref Self) -> (ref Self) -> subtle.Choice -> M Self.
    
    Global Instance AssociatedFunction_conditional_select :
      Notation.DoubleColon Self "conditional_select" := {
      Notation.double_colon := conditional_select;
    }.
    
    Parameter conditional_assign :
        (mut_ref Self) -> (ref Self) -> subtle.Choice -> M unit.
    
    Global Instance AssociatedFunction_conditional_assign :
      Notation.DoubleColon Self "conditional_assign" := {
      Notation.double_colon := conditional_assign;
    }.
    
    Parameter conditional_swap :
        (mut_ref Self) -> (mut_ref Self) -> subtle.Choice -> M unit.
    
    Global Instance AssociatedFunction_conditional_swap :
      Notation.DoubleColon Self "conditional_swap" := {
      Notation.double_colon := conditional_swap;
    }.
    
    #[refine] Global Instance ℐ : subtle.ConditionallySelectable.Trait Self := {
      subtle.ConditionallySelectable.conditional_select := conditional_select;
    }.
    Admitted.
  End Impl_subtle_ConditionallySelectable_for_i64.
  Global Hint Resolve ℐ : core.
End Impl_subtle_ConditionallySelectable_for_i64.

Module Impl_subtle_ConditionallySelectable_for_subtle_Choice.
  Section Impl_subtle_ConditionallySelectable_for_subtle_Choice.
    Context `{ℋ : State.Trait}.
    
    Definition Self : Set := subtle.Choice.
    
    Parameter conditional_select :
        (ref Self) -> (ref Self) -> subtle.Choice -> M Self.
    
    Global Instance AssociatedFunction_conditional_select :
      Notation.DoubleColon Self "conditional_select" := {
      Notation.double_colon := conditional_select;
    }.
    
    #[refine] Global Instance ℐ : subtle.ConditionallySelectable.Trait Self := {
      subtle.ConditionallySelectable.conditional_select := conditional_select;
    }.
    Admitted.
  End Impl_subtle_ConditionallySelectable_for_subtle_Choice.
  Global Hint Resolve ℐ : core.
End Impl_subtle_ConditionallySelectable_for_subtle_Choice.

Module ConditionallyNegatable.
  Section ConditionallyNegatable.
    Context `{ℋ : State.Trait}.
    
    Class Trait (Self : Set) : Type := {
      conditional_negate : (mut_ref Self) -> subtle.Choice -> M unit;
    }.
    
  End ConditionallyNegatable.
End ConditionallyNegatable.

Module Impl_subtle_ConditionallyNegatable_for_T.
  Section Impl_subtle_ConditionallyNegatable_for_T.
    Context `{ℋ : State.Trait}.
    
    Context {T : Set}.
    
    Context
      {ℋ_0 : subtle.ConditionallySelectable.Trait T}
      {ℋ_1 : core.ops.arith.Neg.Trait (ref T)}.
    Definition Self : Set := T.
    
    Parameter conditional_negate : (mut_ref Self) -> subtle.Choice -> M unit.
    
    Global Instance AssociatedFunction_conditional_negate :
      Notation.DoubleColon Self "conditional_negate" := {
      Notation.double_colon := conditional_negate;
    }.
    
    #[refine] Global Instance ℐ : subtle.ConditionallyNegatable.Trait Self := {
      subtle.ConditionallyNegatable.conditional_negate := conditional_negate;
    }.
    Admitted.
  End Impl_subtle_ConditionallyNegatable_for_T.
  Global Hint Resolve ℐ : core.
End Impl_subtle_ConditionallyNegatable_for_T.

Module CtOption.
  Section CtOption.
    Context `{ℋ : State.Trait}.
    
    Context {T : Set}.
    
    Unset Primitive Projections.
    Record t : Set := {
      value : T;
      is_some : subtle.Choice;
    }.
    Global Set Primitive Projections.
    
    #[refine] Global Instance Get_value : Notation.Dot "value" := {
      Notation.dot x := let* x := M.read x in Pure x.(value) : M _;
    }.
    Admitted.
    #[refine] Global Instance Get_AF_value : Notation.DoubleColon t "value" := {
      Notation.double_colon x := let* x := M.read x in Pure x.(value) : M _;
    }.
    Admitted.
    #[refine] Global Instance Get_is_some : Notation.Dot "is_some" := {
      Notation.dot x := let* x := M.read x in Pure x.(is_some) : M _;
    }.
    Admitted.
    #[refine] Global Instance Get_AF_is_some :
      Notation.DoubleColon t "is_some" := {
      Notation.double_colon x := let* x := M.read x in Pure x.(is_some) : M _;
    }.
    Admitted.
  End CtOption.
End CtOption.
Definition CtOption (T : Set) `{ℋ : State.Trait} : Set :=
  M.val (CtOption.t (T := T)).

Module Impl_core_clone_Clone_for_subtle_CtOption_T.
  Section Impl_core_clone_Clone_for_subtle_CtOption_T.
    Context `{ℋ : State.Trait}.
    
    Context {T : Set}.
    
    Context {ℋ_0 : core.clone.Clone.Trait T}.
    Definition Self : Set := subtle.CtOption T.
    
    Parameter clone : (ref Self) -> M (subtle.CtOption T).
    
    Global Instance AssociatedFunction_clone :
      Notation.DoubleColon Self "clone" := {
      Notation.double_colon := clone;
    }.
    
    #[refine] Global Instance ℐ : core.clone.Clone.Trait Self := {
      core.clone.Clone.clone := clone;
    }.
    Admitted.
  End Impl_core_clone_Clone_for_subtle_CtOption_T.
  Global Hint Resolve ℐ : core.
End Impl_core_clone_Clone_for_subtle_CtOption_T.

Module Impl_core_marker_Copy_for_subtle_CtOption_T.
  Section Impl_core_marker_Copy_for_subtle_CtOption_T.
    Context `{ℋ : State.Trait}.
    
    Context {T : Set}.
    
    Context {ℋ_0 : core.marker.Copy.Trait T}.
    Definition Self : Set := subtle.CtOption T.
    
    #[refine] Global Instance ℐ : core.marker.Copy.Trait Self := {
    }.
    Admitted.
  End Impl_core_marker_Copy_for_subtle_CtOption_T.
  Global Hint Resolve ℐ : core.
End Impl_core_marker_Copy_for_subtle_CtOption_T.

Module Impl_core_fmt_Debug_for_subtle_CtOption_T.
  Section Impl_core_fmt_Debug_for_subtle_CtOption_T.
    Context `{ℋ : State.Trait}.
    
    Context {T : Set}.
    
    Context {ℋ_0 : core.fmt.Debug.Trait T}.
    Definition Self : Set := subtle.CtOption T.
    
    Parameter fmt :
        (ref Self) -> (mut_ref core.fmt.Formatter) -> M ltac:(core.fmt.Result).
    
    Global Instance AssociatedFunction_fmt :
      Notation.DoubleColon Self "fmt" := {
      Notation.double_colon := fmt;
    }.
    
    #[refine] Global Instance ℐ : core.fmt.Debug.Trait Self := {
      core.fmt.Debug.fmt := fmt;
    }.
    Admitted.
  End Impl_core_fmt_Debug_for_subtle_CtOption_T.
  Global Hint Resolve ℐ : core.
End Impl_core_fmt_Debug_for_subtle_CtOption_T.

Module Impl_core_convert_From_for_core_option_Option_T.
  Section Impl_core_convert_From_for_core_option_Option_T.
    Context `{ℋ : State.Trait}.
    
    Context {T : Set}.
    
    Definition Self : Set := core.option.Option T.
    
    Parameter from : (subtle.CtOption T) -> M (core.option.Option T).
    
    Global Instance AssociatedFunction_from :
      Notation.DoubleColon Self "from" := {
      Notation.double_colon := from;
    }.
    
    #[refine] Global Instance ℐ :
      core.convert.From.Trait Self (T := subtle.CtOption T) := {
      core.convert.From.from := from;
    }.
    Admitted.
  End Impl_core_convert_From_for_core_option_Option_T.
  Global Hint Resolve ℐ : core.
End Impl_core_convert_From_for_core_option_Option_T.

Module Impl_subtle_CtOption_T_4.
  Section Impl_subtle_CtOption_T_4.
    Context `{ℋ : State.Trait}.
    
    Definition Self : Set := subtle.CtOption T.
    
    Parameter new : T -> subtle.Choice -> M (subtle.CtOption T).
    
    Global Instance AssociatedFunction_new :
      Notation.DoubleColon Self "new" := {
      Notation.double_colon := new;
    }.
    
    Parameter expect : Self -> (ref str) -> M T.
    
    Global Instance AssociatedFunction_expect :
      Notation.DoubleColon Self "expect" := {
      Notation.double_colon := expect;
    }.
    
    Parameter unwrap : Self -> M T.
    
    Global Instance AssociatedFunction_unwrap :
      Notation.DoubleColon Self "unwrap" := {
      Notation.double_colon := unwrap;
    }.
    
    Parameter unwrap_or :
        forall {ℋ_0 : subtle.ConditionallySelectable.Trait T},
        Self -> T -> M T.
    
    Global Instance AssociatedFunction_unwrap_or
        {ℋ_0 : subtle.ConditionallySelectable.Trait T} :
      Notation.DoubleColon Self "unwrap_or" := {
      Notation.double_colon := unwrap_or;
    }.
    
    Parameter unwrap_or_else :
        forall
          {F : Set}
          {ℋ_0 : subtle.ConditionallySelectable.Trait T}
          {ℋ_1 : core.ops.function.FnOnce.Trait F (Args := unit)},
        Self -> F -> M T.
    
    Global Instance AssociatedFunction_unwrap_or_else
        {F : Set}
        {ℋ_0 : subtle.ConditionallySelectable.Trait T}
        {ℋ_1 : core.ops.function.FnOnce.Trait F (Args := unit)} :
      Notation.DoubleColon Self "unwrap_or_else" := {
      Notation.double_colon := unwrap_or_else (F := F);
    }.
    
    Parameter is_some : (ref Self) -> M subtle.Choice.
    
    Global Instance AssociatedFunction_is_some :
      Notation.DoubleColon Self "is_some" := {
      Notation.double_colon := is_some;
    }.
    
    Parameter is_none : (ref Self) -> M subtle.Choice.
    
    Global Instance AssociatedFunction_is_none :
      Notation.DoubleColon Self "is_none" := {
      Notation.double_colon := is_none;
    }.
    
    Parameter map :
        forall
          {U F : Set}
          {ℋ_0 : core.default.Default.Trait T}
          {ℋ_1 : subtle.ConditionallySelectable.Trait T}
          {ℋ_2 : core.ops.function.FnOnce.Trait F (Args := T)},
        Self -> F -> M (subtle.CtOption U).
    
    Global Instance AssociatedFunction_map
        {U F : Set}
        {ℋ_0 : core.default.Default.Trait T}
        {ℋ_1 : subtle.ConditionallySelectable.Trait T}
        {ℋ_2 : core.ops.function.FnOnce.Trait F (Args := T)} :
      Notation.DoubleColon Self "map" := {
      Notation.double_colon := map (U := U) (F := F);
    }.
    
    Parameter and_then :
        forall
          {U F : Set}
          {ℋ_0 : core.default.Default.Trait T}
          {ℋ_1 : subtle.ConditionallySelectable.Trait T}
          {ℋ_2 : core.ops.function.FnOnce.Trait F (Args := T)},
        Self -> F -> M (subtle.CtOption U).
    
    Global Instance AssociatedFunction_and_then
        {U F : Set}
        {ℋ_0 : core.default.Default.Trait T}
        {ℋ_1 : subtle.ConditionallySelectable.Trait T}
        {ℋ_2 : core.ops.function.FnOnce.Trait F (Args := T)} :
      Notation.DoubleColon Self "and_then" := {
      Notation.double_colon := and_then (U := U) (F := F);
    }.
    
    Parameter or_else :
        forall
          {F : Set}
          {ℋ_0 : subtle.ConditionallySelectable.Trait T}
          {ℋ_1 : core.ops.function.FnOnce.Trait F (Args := unit)},
        Self -> F -> M (subtle.CtOption T).
    
    Global Instance AssociatedFunction_or_else
        {F : Set}
        {ℋ_0 : subtle.ConditionallySelectable.Trait T}
        {ℋ_1 : core.ops.function.FnOnce.Trait F (Args := unit)} :
      Notation.DoubleColon Self "or_else" := {
      Notation.double_colon := or_else (F := F);
    }.
  End Impl_subtle_CtOption_T_4.
End Impl_subtle_CtOption_T_4.

Module Impl_subtle_ConditionallySelectable_for_subtle_CtOption_T.
  Section Impl_subtle_ConditionallySelectable_for_subtle_CtOption_T.
    Context `{ℋ : State.Trait}.
    
    Context {T : Set}.
    
    Context {ℋ_0 : subtle.ConditionallySelectable.Trait T}.
    Definition Self : Set := subtle.CtOption T.
    
    Parameter conditional_select :
        (ref Self) -> (ref Self) -> subtle.Choice -> M Self.
    
    Global Instance AssociatedFunction_conditional_select :
      Notation.DoubleColon Self "conditional_select" := {
      Notation.double_colon := conditional_select;
    }.
    
    #[refine] Global Instance ℐ : subtle.ConditionallySelectable.Trait Self := {
      subtle.ConditionallySelectable.conditional_select := conditional_select;
    }.
    Admitted.
  End Impl_subtle_ConditionallySelectable_for_subtle_CtOption_T.
  Global Hint Resolve ℐ : core.
End Impl_subtle_ConditionallySelectable_for_subtle_CtOption_T.

Module Impl_subtle_ConstantTimeEq_for_subtle_CtOption_T.
  Section Impl_subtle_ConstantTimeEq_for_subtle_CtOption_T.
    Context `{ℋ : State.Trait}.
    
    Context {T : Set}.
    
    Context {ℋ_0 : subtle.ConstantTimeEq.Trait T}.
    Definition Self : Set := subtle.CtOption T.
    
    Parameter ct_eq :
        (ref Self) -> (ref (subtle.CtOption T)) -> M subtle.Choice.
    
    Global Instance AssociatedFunction_ct_eq :
      Notation.DoubleColon Self "ct_eq" := {
      Notation.double_colon := ct_eq;
    }.
    
    #[refine] Global Instance ℐ : subtle.ConstantTimeEq.Trait Self := {
      subtle.ConstantTimeEq.ct_eq := ct_eq;
    }.
    Admitted.
  End Impl_subtle_ConstantTimeEq_for_subtle_CtOption_T.
  Global Hint Resolve ℐ : core.
End Impl_subtle_ConstantTimeEq_for_subtle_CtOption_T.

Module ConstantTimeGreater.
  Section ConstantTimeGreater.
    Context `{ℋ : State.Trait}.
    
    Class Trait (Self : Set) : Type := {
      ct_gt : (ref Self) -> (ref Self) -> M subtle.Choice;
    }.
    
  End ConstantTimeGreater.
End ConstantTimeGreater.

Module Impl_subtle_ConstantTimeGreater_for_u8.
  Section Impl_subtle_ConstantTimeGreater_for_u8.
    Context `{ℋ : State.Trait}.
    
    Definition Self : Set := u8.
    
    Parameter ct_gt : (ref Self) -> (ref u8) -> M subtle.Choice.
    
    Global Instance AssociatedFunction_ct_gt :
      Notation.DoubleColon Self "ct_gt" := {
      Notation.double_colon := ct_gt;
    }.
    
    #[refine] Global Instance ℐ : subtle.ConstantTimeGreater.Trait Self := {
      subtle.ConstantTimeGreater.ct_gt := ct_gt;
    }.
    Admitted.
  End Impl_subtle_ConstantTimeGreater_for_u8.
  Global Hint Resolve ℐ : core.
End Impl_subtle_ConstantTimeGreater_for_u8.

Module Impl_subtle_ConstantTimeGreater_for_u16.
  Section Impl_subtle_ConstantTimeGreater_for_u16.
    Context `{ℋ : State.Trait}.
    
    Definition Self : Set := u16.
    
    Parameter ct_gt : (ref Self) -> (ref u16) -> M subtle.Choice.
    
    Global Instance AssociatedFunction_ct_gt :
      Notation.DoubleColon Self "ct_gt" := {
      Notation.double_colon := ct_gt;
    }.
    
    #[refine] Global Instance ℐ : subtle.ConstantTimeGreater.Trait Self := {
      subtle.ConstantTimeGreater.ct_gt := ct_gt;
    }.
    Admitted.
  End Impl_subtle_ConstantTimeGreater_for_u16.
  Global Hint Resolve ℐ : core.
End Impl_subtle_ConstantTimeGreater_for_u16.

Module Impl_subtle_ConstantTimeGreater_for_u32.
  Section Impl_subtle_ConstantTimeGreater_for_u32.
    Context `{ℋ : State.Trait}.
    
    Definition Self : Set := u32.
    
    Parameter ct_gt : (ref Self) -> (ref u32) -> M subtle.Choice.
    
    Global Instance AssociatedFunction_ct_gt :
      Notation.DoubleColon Self "ct_gt" := {
      Notation.double_colon := ct_gt;
    }.
    
    #[refine] Global Instance ℐ : subtle.ConstantTimeGreater.Trait Self := {
      subtle.ConstantTimeGreater.ct_gt := ct_gt;
    }.
    Admitted.
  End Impl_subtle_ConstantTimeGreater_for_u32.
  Global Hint Resolve ℐ : core.
End Impl_subtle_ConstantTimeGreater_for_u32.

Module Impl_subtle_ConstantTimeGreater_for_u64.
  Section Impl_subtle_ConstantTimeGreater_for_u64.
    Context `{ℋ : State.Trait}.
    
    Definition Self : Set := u64.
    
    Parameter ct_gt : (ref Self) -> (ref u64) -> M subtle.Choice.
    
    Global Instance AssociatedFunction_ct_gt :
      Notation.DoubleColon Self "ct_gt" := {
      Notation.double_colon := ct_gt;
    }.
    
    #[refine] Global Instance ℐ : subtle.ConstantTimeGreater.Trait Self := {
      subtle.ConstantTimeGreater.ct_gt := ct_gt;
    }.
    Admitted.
  End Impl_subtle_ConstantTimeGreater_for_u64.
  Global Hint Resolve ℐ : core.
End Impl_subtle_ConstantTimeGreater_for_u64.

Module ConstantTimeLess.
  Section ConstantTimeLess.
    Context `{ℋ : State.Trait}.
    
    Class Trait (Self : Set) : Type := {
      ℒ_0 :: subtle.ConstantTimeEq.Trait Self;
      ℒ_1 :: subtle.ConstantTimeGreater.Trait Self;
    }.
    
  End ConstantTimeLess.
End ConstantTimeLess.

Module Impl_subtle_ConstantTimeLess_for_u8.
  Section Impl_subtle_ConstantTimeLess_for_u8.
    Context `{ℋ : State.Trait}.
    
    Definition Self : Set := u8.
    
    #[refine] Global Instance ℐ : subtle.ConstantTimeLess.Trait Self := {
    }.
    Admitted.
  End Impl_subtle_ConstantTimeLess_for_u8.
  Global Hint Resolve ℐ : core.
End Impl_subtle_ConstantTimeLess_for_u8.

Module Impl_subtle_ConstantTimeLess_for_u16.
  Section Impl_subtle_ConstantTimeLess_for_u16.
    Context `{ℋ : State.Trait}.
    
    Definition Self : Set := u16.
    
    #[refine] Global Instance ℐ : subtle.ConstantTimeLess.Trait Self := {
    }.
    Admitted.
  End Impl_subtle_ConstantTimeLess_for_u16.
  Global Hint Resolve ℐ : core.
End Impl_subtle_ConstantTimeLess_for_u16.

Module Impl_subtle_ConstantTimeLess_for_u32.
  Section Impl_subtle_ConstantTimeLess_for_u32.
    Context `{ℋ : State.Trait}.
    
    Definition Self : Set := u32.
    
    #[refine] Global Instance ℐ : subtle.ConstantTimeLess.Trait Self := {
    }.
    Admitted.
  End Impl_subtle_ConstantTimeLess_for_u32.
  Global Hint Resolve ℐ : core.
End Impl_subtle_ConstantTimeLess_for_u32.

Module Impl_subtle_ConstantTimeLess_for_u64.
  Section Impl_subtle_ConstantTimeLess_for_u64.
    Context `{ℋ : State.Trait}.
    
    Definition Self : Set := u64.
    
    #[refine] Global Instance ℐ : subtle.ConstantTimeLess.Trait Self := {
    }.
    Admitted.
  End Impl_subtle_ConstantTimeLess_for_u64.
  Global Hint Resolve ℐ : core.
End Impl_subtle_ConstantTimeLess_for_u64.
