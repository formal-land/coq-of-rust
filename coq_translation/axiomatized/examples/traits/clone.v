(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module  Unit.
Section Unit.
  Context `{ℋ : State.Trait}.
  
  Inductive t : Set := Build.
End Unit.
End Unit.
Definition Unit `{ℋ : State.Trait} := M.Val Unit.t.

Module  Impl_core_fmt_Debug_for_clone_Unit.
Section Impl_core_fmt_Debug_for_clone_Unit.
  Context `{ℋ : State.Trait}.
  
  Definition Self : Set := clone.Unit.
  
  Parameter fmt :
      (ref Self) -> (mut_ref core.fmt.Formatter) -> M ltac:(core.fmt.Result).
  
  Global Instance AssociatedFunction_fmt : Notation.DoubleColon Self "fmt" := {
    Notation.double_colon := fmt;
  }.
  
  Global Instance ℐ : core.fmt.Debug.Trait Self := {
    core.fmt.Debug.fmt := fmt;
  }.
End Impl_core_fmt_Debug_for_clone_Unit.
End Impl_core_fmt_Debug_for_clone_Unit.

Module  Impl_core_clone_Clone_for_clone_Unit.
Section Impl_core_clone_Clone_for_clone_Unit.
  Context `{ℋ : State.Trait}.
  
  Definition Self : Set := clone.Unit.
  
  Parameter clone : (ref Self) -> M clone.Unit.
  
  Global Instance AssociatedFunction_clone :
    Notation.DoubleColon Self "clone" := {
    Notation.double_colon := clone;
  }.
  
  Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
    core.clone.Clone.clone := clone;
    core.clone.Clone.clone_from := Datatypes.None;
  }.
End Impl_core_clone_Clone_for_clone_Unit.
End Impl_core_clone_Clone_for_clone_Unit.

Module  Impl_core_marker_Copy_for_clone_Unit.
Section Impl_core_marker_Copy_for_clone_Unit.
  Context `{ℋ : State.Trait}.
  
  Definition Self : Set := clone.Unit.
  
  Global Instance ℐ : core.marker.Copy.Trait Self := {
  }.
End Impl_core_marker_Copy_for_clone_Unit.
End Impl_core_marker_Copy_for_clone_Unit.

Module  Pair.
Section Pair.
  Context `{ℋ : State.Trait}.
  
  Record t : Set := {
    x0 : alloc.boxed.Box i32 alloc.boxed.Box.Default.A;
    x1 : alloc.boxed.Box i32 alloc.boxed.Box.Default.A;
  }.
  
  Global Instance Get_0 : Notation.Dot "0" := {
    Notation.dot x := let* x := M.read x in M.pure x.(x0) : M _;
  }.
  Global Instance Get_1 : Notation.Dot "1" := {
    Notation.dot x := let* x := M.read x in M.pure x.(x1) : M _;
  }.
End Pair.
End Pair.
Definition Pair `{ℋ : State.Trait} : Set := M.Val Pair.t.

Module  Impl_core_clone_Clone_for_clone_Pair.
Section Impl_core_clone_Clone_for_clone_Pair.
  Context `{ℋ : State.Trait}.
  
  Definition Self : Set := clone.Pair.
  
  Parameter clone : (ref Self) -> M clone.Pair.
  
  Global Instance AssociatedFunction_clone :
    Notation.DoubleColon Self "clone" := {
    Notation.double_colon := clone;
  }.
  
  Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
    core.clone.Clone.clone := clone;
    core.clone.Clone.clone_from := Datatypes.None;
  }.
End Impl_core_clone_Clone_for_clone_Pair.
End Impl_core_clone_Clone_for_clone_Pair.

Module  Impl_core_fmt_Debug_for_clone_Pair.
Section Impl_core_fmt_Debug_for_clone_Pair.
  Context `{ℋ : State.Trait}.
  
  Definition Self : Set := clone.Pair.
  
  Parameter fmt :
      (ref Self) -> (mut_ref core.fmt.Formatter) -> M ltac:(core.fmt.Result).
  
  Global Instance AssociatedFunction_fmt : Notation.DoubleColon Self "fmt" := {
    Notation.double_colon := fmt;
  }.
  
  Global Instance ℐ : core.fmt.Debug.Trait Self := {
    core.fmt.Debug.fmt := fmt;
  }.
End Impl_core_fmt_Debug_for_clone_Pair.
End Impl_core_fmt_Debug_for_clone_Pair.

(* #[allow(dead_code)] - function was ignored by the compiler *)
Parameter main : forall `{ℋ : State.Trait}, M unit.
