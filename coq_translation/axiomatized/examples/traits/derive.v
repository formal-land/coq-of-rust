(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module Centimeters.
  Unset Primitive Projections.
  Record t : Set := {
    _ : f64;
  }.
  Global Set Primitive Projections.

  Global Instance Get_0 : Notation.Dot 0 := {
    Notation.dot '(Build_t x0) := x0;
  }.
End Centimeters.
Definition Centimeters := Centimeters.t.

Module Impl_core_marker_StructuralPartialEq_for_derive_Centimeters.
  Definition Self := derive.Centimeters.
  
  Global Instance I : core.marker.StructuralPartialEq.Trait Self :=
    core.marker.StructuralPartialEq.Build_Trait _.
End Impl_core_marker_StructuralPartialEq_for_derive_Centimeters.

Module Impl_core_cmp_PartialEq_for_derive_Centimeters.
  Definition Self := derive.Centimeters.
  
  Parameter eq : forall `{H : State.Trait},
      ref Self ->
      ref derive.Centimeters ->
      M (H := H) bool.
  
  Global Instance Method_eq `{H : State.Trait} : Notation.Dot "eq" := {
    Notation.dot := eq;
  }.
  
  Global Instance I : core.cmp.PartialEq.Trait Self := {
    core.cmp.PartialEq.eq `{H : State.Trait} := eq;
  }.
End Impl_core_cmp_PartialEq_for_derive_Centimeters.

Module Impl_core_cmp_PartialOrd_for_derive_Centimeters.
  Definition Self := derive.Centimeters.
  
  Parameter partial_cmp : forall `{H : State.Trait},
      ref Self ->
      ref derive.Centimeters ->
      M (H := H) (core.option.Option core.cmp.Ordering).
  
  Global Instance Method_partial_cmp `{H : State.Trait} :
    Notation.Dot "partial_cmp" := {
    Notation.dot := partial_cmp;
  }.
  
  Global Instance I : core.cmp.PartialOrd.Trait Self := {
    core.cmp.PartialOrd.partial_cmp `{H : State.Trait} := partial_cmp;
  }.
End Impl_core_cmp_PartialOrd_for_derive_Centimeters.

Module Inches.
  Unset Primitive Projections.
  Record t : Set := {
    _ : i32;
  }.
  Global Set Primitive Projections.

  Global Instance Get_0 : Notation.Dot 0 := {
    Notation.dot '(Build_t x0) := x0;
  }.
End Inches.
Definition Inches := Inches.t.

Module Impl_core_fmt_Debug_for_derive_Inches.
  Definition Self := derive.Inches.
  
  Parameter fmt : forall `{H : State.Trait},
      ref Self ->
      mut_ref core.fmt.Formatter ->
      M (H := H) core.fmt.Result.
  
  Global Instance Method_fmt `{H : State.Trait} : Notation.Dot "fmt" := {
    Notation.dot := fmt;
  }.
  
  Global Instance I : core.fmt.Debug.Trait Self := {
    core.fmt.Debug.fmt `{H : State.Trait} := fmt;
  }.
End Impl_core_fmt_Debug_for_derive_Inches.

Module Impl_derive_Inches.
  Definition Self := derive.Inches.
  
  Parameter to_centimeters : forall `{H : State.Trait},
      ref Self ->
      M (H := H) derive.Centimeters.
  
  Global Instance Method_to_centimeters `{H : State.Trait} :
    Notation.Dot "to_centimeters" := {
    Notation.dot := to_centimeters;
  }.
End Impl_derive_Inches.

Module Seconds.
  Unset Primitive Projections.
  Record t : Set := {
    _ : i32;
  }.
  Global Set Primitive Projections.

  Global Instance Get_0 : Notation.Dot 0 := {
    Notation.dot '(Build_t x0) := x0;
  }.
End Seconds.
Definition Seconds := Seconds.t.

(* #[allow(dead_code)] - function was ignored by the compiler *)
Parameter main : forall `{H : State.Trait}, M (H := H) unit.
