(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module Fibonacci.
  Record t : Set := {
    curr : u32;
    next : u32;
  }.
  
  Global Instance Get_curr : Notation.Dot "curr" := {
    Notation.dot '(Build_t x0 _) := x0;
  }.
  Global Instance Get_next : Notation.Dot "next" := {
    Notation.dot '(Build_t _ x1) := x1;
  }.
End Fibonacci.
Definition Fibonacci : Set := Fibonacci.t.

Module Impl_core_iter_traits_iterator_Iterator_for_iterators_Fibonacci.
  Definition Self := iterators.Fibonacci.
  
  Definition Item : Set := u32.
  
  Parameter next : mut_ref Self -> M (core.option.Option ImplSelf.Item).
  
  Global Instance Method_next : Notation.Dot "next" := {
    Notation.dot := next;
  }.
  
  Global Instance I : core.iter.traits.iterator.Iterator.Trait Self := {
    core.iter.traits.iterator.Iterator.next := next;
  }.
End Impl_core_iter_traits_iterator_Iterator_for_iterators_Fibonacci.

Parameter fibonacci : unit -> M iterators.Fibonacci.

(* #[allow(dead_code)] - function was ignored by the compiler *)
Parameter main : unit -> M unit.
