(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module Sheep.
  Unset Primitive Projections.
  Record t : Set := { }.
  Global Set Primitive Projections.
End Sheep.
Definition Sheep : Set := Sheep.t.

Module Cow.
  Unset Primitive Projections.
  Record t : Set := { }.
  Global Set Primitive Projections.
End Cow.
Definition Cow : Set := Cow.t.

Module Animal.
  Class Trait (Self : Set) : Set := {
    noise `{H : State.Trait} : (ref Self) -> (M (H := H) (ref str));
  }.
  
  Global Instance Method_noise `{H : State.Trait} `(Trait)
    : Notation.Dot "noise" := {
    Notation.dot := noise;
  }.
End Animal.

Module
  Impl_returning_traits_with_dyn_Animal_for_returning_traits_with_dyn_Sheep.
  Definition Self := returning_traits_with_dyn.Sheep.
  
  Parameter noise : forall `{H : State.Trait}, ref Self -> M (H := H) (ref str).
  
  Global Instance Method_noise `{H : State.Trait} : Notation.Dot "noise" := {
    Notation.dot := noise;
  }.
  
  Global Instance I : returning_traits_with_dyn.Animal.Trait Self := {
    returning_traits_with_dyn.Animal.noise `{H : State.Trait} := noise;
  }.
End Impl_returning_traits_with_dyn_Animal_for_returning_traits_with_dyn_Sheep.

Module Impl_returning_traits_with_dyn_Animal_for_returning_traits_with_dyn_Cow.
  Definition Self := returning_traits_with_dyn.Cow.
  
  Parameter noise : forall `{H : State.Trait}, ref Self -> M (H := H) (ref str).
  
  Global Instance Method_noise `{H : State.Trait} : Notation.Dot "noise" := {
    Notation.dot := noise;
  }.
  
  Global Instance I : returning_traits_with_dyn.Animal.Trait Self := {
    returning_traits_with_dyn.Animal.noise `{H : State.Trait} := noise;
  }.
End Impl_returning_traits_with_dyn_Animal_for_returning_traits_with_dyn_Cow.

Parameter random_animal : forall `{H : State.Trait},
    f64 ->
    M (H := H) (alloc.boxed.Box TraitObject).

(* #[allow(dead_code)] - function was ignored by the compiler *)
Parameter main : forall `{H : State.Trait}, M (H := H) unit.
