(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module Sheep.
  Record t : Set := {
    naked : bool;
    name : ref str;
  }.
  
  Global Instance Get_naked : Notation.Dot "naked" := {
    Notation.dot '(Build_t x0 _) := x0;
  }.
  Global Instance Get_name : Notation.Dot "name" := {
    Notation.dot '(Build_t _ x1) := x1;
  }.
End Sheep.
Definition Sheep : Set := Sheep.t.

Module Animal.
  Class Trait (Self : Set) : Set := {
    new : (ref str) -> (M Self);
    name : (ref Self) -> (M (ref str));
    noise : (ref Self) -> (M (ref str));
  }.
  
  Global Instance Method_new `(Trait) : Notation.Dot "new" := {
    Notation.dot := new;
  }.
  Global Instance Method_name `(Trait) : Notation.Dot "name" := {
    Notation.dot := name;
  }.
  Global Instance Method_noise `(Trait) : Notation.Dot "noise" := {
    Notation.dot := noise;
  }.
  Global Instance Method_talk `(Trait) : Notation.Dot "talk" := {
    Notation.dot (self : ref Self) :=
      (let* _ :=
        let* _ :=
          let* α0 := self.["name"] in
          let* α1 := format_argument::["new_display"] (addr_of α0) in
          let* α2 := self.["noise"] in
          let* α3 := format_argument::["new_display"] (addr_of α2) in
          let* α4 :=
            format_arguments::["new_v1"]
              (addr_of [ ""; " says "; "
" ])
              (addr_of [ α1; α3 ]) in
          std.io.stdio._print α4 in
        Pure tt in
      Pure tt
      : M unit);
  }.
End Animal.

Module Impl_traits_Sheep.
  Definition Self := traits.Sheep.
  
  Parameter is_naked : ref Self -> M bool.
  
  Global Instance Method_is_naked : Notation.Dot "is_naked" := {
    Notation.dot := is_naked;
  }.
End Impl_traits_Sheep.

Module Impl_traits_Animal_for_traits_Sheep.
  Definition Self := traits.Sheep.
  
  Parameter new : ref str -> M traits.Sheep.
  
  Global Instance AssociatedFunction_new : Notation.DoubleColon Self "new" := {
    Notation.double_colon := new;
  }.
  
  Parameter name : ref Self -> M (ref str).
  
  Global Instance Method_name : Notation.Dot "name" := {
    Notation.dot := name;
  }.
  
  Parameter noise : ref Self -> M (ref str).
  
  Global Instance Method_noise : Notation.Dot "noise" := {
    Notation.dot := noise;
  }.
  
  Parameter talk : ref Self -> M unit.
  
  Global Instance Method_talk : Notation.Dot "talk" := {
    Notation.dot := talk;
  }.
  
  Global Instance I : traits.Animal.Trait Self := {
    traits.Animal.new := new;
    traits.Animal.name := name;
    traits.Animal.noise := noise;
  }.
End Impl_traits_Animal_for_traits_Sheep.

Module Impl_traits_Sheep_2.
  Definition Self := traits.Sheep.
  
  Parameter shear : mut_ref Self -> M unit.
  
  Global Instance Method_shear : Notation.Dot "shear" := {
    Notation.dot := shear;
  }.
End Impl_traits_Sheep_2.

(* #[allow(dead_code)] - function was ignored by the compiler *)
Parameter main : unit -> M unit.
