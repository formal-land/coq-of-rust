(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Definition foo
    `{ℋ : State.Trait}
    {A : Set}
    (o : core.option.Option A)
    : M unit :=
  M.function_body
    (let* α0 := M.read o in
    match α0 with
    | core.option.Option.Some _a =>
      let* _ : ltac:(refine unit) :=
        let* α0 : ltac:(refine (array (ref str))) :=
          M.alloc [ mk_str "some
" ] in
        let* α1 : ltac:(refine (ref (array (ref str)))) := borrow α0 in
        let* α2 : ltac:(refine (ref (slice (ref str)))) :=
          pointer_coercion "Unsize" α1 in
        let* α3 : ltac:(refine core.fmt.Arguments) :=
          core.fmt.Arguments::["new_const"] α2 in
        std.io.stdio._print α3 in
      M.alloc tt
    | core.option.Option.None  =>
      let* _ : ltac:(refine unit) :=
        let* α0 : ltac:(refine (array (ref str))) :=
          M.alloc [ mk_str "nothing
" ] in
        let* α1 : ltac:(refine (ref (array (ref str)))) := borrow α0 in
        let* α2 : ltac:(refine (ref (slice (ref str)))) :=
          pointer_coercion "Unsize" α1 in
        let* α3 : ltac:(refine core.fmt.Arguments) :=
          core.fmt.Arguments::["new_const"] α2 in
        std.io.stdio._print α3 in
      M.alloc tt
    end).

Module tests.
  Definition test_file `{ℋ : State.Trait} : M unit :=
    M.function_body
      (let* file : ltac:(refine std.fs.File) :=
        let* α0 : ltac:(refine std.fs.OpenOptions) :=
          std.fs.OpenOptions::["new"] in
        let* α1 : ltac:(refine (mut_ref std.fs.OpenOptions)) := borrow_mut α0 in
        let* α2 : ltac:(refine bool) := M.alloc true in
        let* α3 : ltac:(refine (mut_ref std.fs.OpenOptions)) :=
          std.fs.OpenOptions::["append"] α1 α2 in
        let* α4 : ltac:(refine std.fs.OpenOptions) := deref α3 in
        let* α5 : ltac:(refine (mut_ref std.fs.OpenOptions)) := borrow_mut α4 in
        let* α6 : ltac:(refine bool) := M.alloc true in
        let* α7 : ltac:(refine (mut_ref std.fs.OpenOptions)) :=
          std.fs.OpenOptions::["create"] α5 α6 in
        let* α8 : ltac:(refine std.fs.OpenOptions) := deref α7 in
        let* α9 : ltac:(refine (ref std.fs.OpenOptions)) := borrow α8 in
        let* α10 :
            ltac:(refine (core.result.Result std.fs.File std.io.error.Error)) :=
          std.fs.OpenOptions::["open"] α9 (mk_str "ferris.txt") in
        let* α11 : ltac:(refine str) :=
          deref (mk_str "Failed to open ferris.txt") in
        let* α12 : ltac:(refine (ref str)) := borrow α11 in
        (core.result.Result std.fs.File std.io.error.Error)::["expect"]
          α10
          α12 in
      let* α0 : ltac:(refine i32) := M.alloc 0 in
      let* α1 : ltac:(refine i32) := M.alloc 5 in
      let* α2 : ltac:(refine (core.ops.range.Range i32)) :=
        M.alloc
          {| core.ops.range.Range.start := α0; core.ops.range.Range.end := α1;
          |} in
      let* α3 : ltac:(refine (core.ops.range.Range i32)) :=
        (core.iter.traits.collect.IntoIterator.into_iter
            (Self := core.ops.range.Range i32)
            (Trait := ltac:(refine _)))
          α2 in
      let* α4 := M.read α3 in
      let* α5 : ltac:(refine unit) :=
        match α4 with
        | iter =>
          loop
            (let* _ : ltac:(refine unit) :=
              let* α0 : ltac:(refine (mut_ref (core.ops.range.Range i32))) :=
                borrow_mut iter in
              let* α1 : ltac:(refine (core.option.Option i32)) :=
                (core.iter.traits.iterator.Iterator.next
                    (Self := core.ops.range.Range i32)
                    (Trait := ltac:(refine _)))
                  α0 in
              let* α2 := M.read α1 in
              match α2 with
              | core.option.Option.None  =>
                let* α0 : ltac:(refine never) := Break in
                never_to_any α0
              | core.option.Option.Some _ =>
                let* _ : ltac:(refine unit) :=
                  let* α0 : ltac:(refine (mut_ref std.fs.File)) :=
                    borrow_mut file in
                  let* α1 : ltac:(refine str) := deref (mk_str "Ferris
") in
                  let* α2 : ltac:(refine (ref str)) := borrow α1 in
                  let* α3 : ltac:(refine (ref (slice u8))) :=
                    str::["as_bytes"] α2 in
                  let* α4 : ltac:(refine (slice u8)) := deref α3 in
                  let* α5 : ltac:(refine (ref (slice u8))) := borrow α4 in
                  let* α6 :
                      ltac:(refine
                        (core.result.Result unit std.io.error.Error)) :=
                    (std.io.Write.write_all
                        (Self := std.fs.File)
                        (Trait := ltac:(refine _)))
                      α0
                      α5 in
                  let* α7 : ltac:(refine str) :=
                    deref (mk_str "Could not write to ferris.txt") in
                  let* α8 : ltac:(refine (ref str)) := borrow α7 in
                  (core.result.Result unit std.io.error.Error)::["expect"]
                    α6
                    α8 in
                M.alloc tt
              end in
            M.alloc tt)
        end in
      use α5).
  
  Definition test_file_also `{ℋ : State.Trait} : M unit :=
    M.function_body
      (let* file : ltac:(refine std.fs.File) :=
        let* α0 : ltac:(refine std.fs.OpenOptions) :=
          std.fs.OpenOptions::["new"] in
        let* α1 : ltac:(refine (mut_ref std.fs.OpenOptions)) := borrow_mut α0 in
        let* α2 : ltac:(refine bool) := M.alloc true in
        let* α3 : ltac:(refine (mut_ref std.fs.OpenOptions)) :=
          std.fs.OpenOptions::["append"] α1 α2 in
        let* α4 : ltac:(refine std.fs.OpenOptions) := deref α3 in
        let* α5 : ltac:(refine (mut_ref std.fs.OpenOptions)) := borrow_mut α4 in
        let* α6 : ltac:(refine bool) := M.alloc true in
        let* α7 : ltac:(refine (mut_ref std.fs.OpenOptions)) :=
          std.fs.OpenOptions::["create"] α5 α6 in
        let* α8 : ltac:(refine std.fs.OpenOptions) := deref α7 in
        let* α9 : ltac:(refine (ref std.fs.OpenOptions)) := borrow α8 in
        let* α10 :
            ltac:(refine (core.result.Result std.fs.File std.io.error.Error)) :=
          std.fs.OpenOptions::["open"] α9 (mk_str "ferris.txt") in
        let* α11 : ltac:(refine str) :=
          deref (mk_str "Failed to open ferris.txt") in
        let* α12 : ltac:(refine (ref str)) := borrow α11 in
        (core.result.Result std.fs.File std.io.error.Error)::["expect"]
          α10
          α12 in
      let* α0 : ltac:(refine i32) := M.alloc 0 in
      let* α1 : ltac:(refine i32) := M.alloc 5 in
      let* α2 : ltac:(refine (core.ops.range.Range i32)) :=
        M.alloc
          {| core.ops.range.Range.start := α0; core.ops.range.Range.end := α1;
          |} in
      let* α3 : ltac:(refine (core.ops.range.Range i32)) :=
        (core.iter.traits.collect.IntoIterator.into_iter
            (Self := core.ops.range.Range i32)
            (Trait := ltac:(refine _)))
          α2 in
      let* α4 := M.read α3 in
      let* α5 : ltac:(refine unit) :=
        match α4 with
        | iter =>
          loop
            (let* _ : ltac:(refine unit) :=
              let* α0 : ltac:(refine (mut_ref (core.ops.range.Range i32))) :=
                borrow_mut iter in
              let* α1 : ltac:(refine (core.option.Option i32)) :=
                (core.iter.traits.iterator.Iterator.next
                    (Self := core.ops.range.Range i32)
                    (Trait := ltac:(refine _)))
                  α0 in
              let* α2 := M.read α1 in
              match α2 with
              | core.option.Option.None  =>
                let* α0 : ltac:(refine never) := Break in
                never_to_any α0
              | core.option.Option.Some _ =>
                let* _ : ltac:(refine unit) :=
                  let* α0 : ltac:(refine (mut_ref std.fs.File)) :=
                    borrow_mut file in
                  let* α1 : ltac:(refine str) := deref (mk_str "Corro
") in
                  let* α2 : ltac:(refine (ref str)) := borrow α1 in
                  let* α3 : ltac:(refine (ref (slice u8))) :=
                    str::["as_bytes"] α2 in
                  let* α4 : ltac:(refine (slice u8)) := deref α3 in
                  let* α5 : ltac:(refine (ref (slice u8))) := borrow α4 in
                  let* α6 :
                      ltac:(refine
                        (core.result.Result unit std.io.error.Error)) :=
                    (std.io.Write.write_all
                        (Self := std.fs.File)
                        (Trait := ltac:(refine _)))
                      α0
                      α5 in
                  let* α7 : ltac:(refine str) :=
                    deref (mk_str "Could not write to ferris.txt") in
                  let* α8 : ltac:(refine (ref str)) := borrow α7 in
                  (core.result.Result unit std.io.error.Error)::["expect"]
                    α6
                    α8 in
                M.alloc tt
              end in
            M.alloc tt)
        end in
      use α5).
End tests.

Definition test_file `{ℋ : State.Trait} : M unit :=
  M.function_body
    (let* file : ltac:(refine std.fs.File) :=
      let* α0 : ltac:(refine std.fs.OpenOptions) :=
        std.fs.OpenOptions::["new"] in
      let* α1 : ltac:(refine (mut_ref std.fs.OpenOptions)) := borrow_mut α0 in
      let* α2 : ltac:(refine bool) := M.alloc true in
      let* α3 : ltac:(refine (mut_ref std.fs.OpenOptions)) :=
        std.fs.OpenOptions::["append"] α1 α2 in
      let* α4 : ltac:(refine std.fs.OpenOptions) := deref α3 in
      let* α5 : ltac:(refine (mut_ref std.fs.OpenOptions)) := borrow_mut α4 in
      let* α6 : ltac:(refine bool) := M.alloc true in
      let* α7 : ltac:(refine (mut_ref std.fs.OpenOptions)) :=
        std.fs.OpenOptions::["create"] α5 α6 in
      let* α8 : ltac:(refine std.fs.OpenOptions) := deref α7 in
      let* α9 : ltac:(refine (ref std.fs.OpenOptions)) := borrow α8 in
      let* α10 :
          ltac:(refine (core.result.Result std.fs.File std.io.error.Error)) :=
        std.fs.OpenOptions::["open"] α9 (mk_str "ferris.txt") in
      let* α11 : ltac:(refine str) :=
        deref (mk_str "Failed to open ferris.txt") in
      let* α12 : ltac:(refine (ref str)) := borrow α11 in
      (core.result.Result std.fs.File std.io.error.Error)::["expect"] α10 α12 in
    let* α0 : ltac:(refine i32) := M.alloc 0 in
    let* α1 : ltac:(refine i32) := M.alloc 5 in
    let* α2 : ltac:(refine (core.ops.range.Range i32)) :=
      M.alloc
        {| core.ops.range.Range.start := α0; core.ops.range.Range.end := α1;
        |} in
    let* α3 : ltac:(refine (core.ops.range.Range i32)) :=
      (core.iter.traits.collect.IntoIterator.into_iter
          (Self := core.ops.range.Range i32)
          (Trait := ltac:(refine _)))
        α2 in
    let* α4 := M.read α3 in
    let* α5 : ltac:(refine unit) :=
      match α4 with
      | iter =>
        loop
          (let* _ : ltac:(refine unit) :=
            let* α0 : ltac:(refine (mut_ref (core.ops.range.Range i32))) :=
              borrow_mut iter in
            let* α1 : ltac:(refine (core.option.Option i32)) :=
              (core.iter.traits.iterator.Iterator.next
                  (Self := core.ops.range.Range i32)
                  (Trait := ltac:(refine _)))
                α0 in
            let* α2 := M.read α1 in
            match α2 with
            | core.option.Option.None  =>
              let* α0 : ltac:(refine never) := Break in
              never_to_any α0
            | core.option.Option.Some _ =>
              let* _ : ltac:(refine unit) :=
                let* α0 : ltac:(refine (mut_ref std.fs.File)) :=
                  borrow_mut file in
                let* α1 : ltac:(refine str) := deref (mk_str "Ferris
") in
                let* α2 : ltac:(refine (ref str)) := borrow α1 in
                let* α3 : ltac:(refine (ref (slice u8))) :=
                  str::["as_bytes"] α2 in
                let* α4 : ltac:(refine (slice u8)) := deref α3 in
                let* α5 : ltac:(refine (ref (slice u8))) := borrow α4 in
                let* α6 :
                    ltac:(refine
                      (core.result.Result unit std.io.error.Error)) :=
                  (std.io.Write.write_all
                      (Self := std.fs.File)
                      (Trait := ltac:(refine _)))
                    α0
                    α5 in
                let* α7 : ltac:(refine str) :=
                  deref (mk_str "Could not write to ferris.txt") in
                let* α8 : ltac:(refine (ref str)) := borrow α7 in
                (core.result.Result unit std.io.error.Error)::["expect"]
                  α6
                  α8 in
              M.alloc tt
            end in
          M.alloc tt)
      end in
    use α5).

Definition test_file_also `{ℋ : State.Trait} : M unit :=
  M.function_body
    (let* file : ltac:(refine std.fs.File) :=
      let* α0 : ltac:(refine std.fs.OpenOptions) :=
        std.fs.OpenOptions::["new"] in
      let* α1 : ltac:(refine (mut_ref std.fs.OpenOptions)) := borrow_mut α0 in
      let* α2 : ltac:(refine bool) := M.alloc true in
      let* α3 : ltac:(refine (mut_ref std.fs.OpenOptions)) :=
        std.fs.OpenOptions::["append"] α1 α2 in
      let* α4 : ltac:(refine std.fs.OpenOptions) := deref α3 in
      let* α5 : ltac:(refine (mut_ref std.fs.OpenOptions)) := borrow_mut α4 in
      let* α6 : ltac:(refine bool) := M.alloc true in
      let* α7 : ltac:(refine (mut_ref std.fs.OpenOptions)) :=
        std.fs.OpenOptions::["create"] α5 α6 in
      let* α8 : ltac:(refine std.fs.OpenOptions) := deref α7 in
      let* α9 : ltac:(refine (ref std.fs.OpenOptions)) := borrow α8 in
      let* α10 :
          ltac:(refine (core.result.Result std.fs.File std.io.error.Error)) :=
        std.fs.OpenOptions::["open"] α9 (mk_str "ferris.txt") in
      let* α11 : ltac:(refine str) :=
        deref (mk_str "Failed to open ferris.txt") in
      let* α12 : ltac:(refine (ref str)) := borrow α11 in
      (core.result.Result std.fs.File std.io.error.Error)::["expect"] α10 α12 in
    let* α0 : ltac:(refine i32) := M.alloc 0 in
    let* α1 : ltac:(refine i32) := M.alloc 5 in
    let* α2 : ltac:(refine (core.ops.range.Range i32)) :=
      M.alloc
        {| core.ops.range.Range.start := α0; core.ops.range.Range.end := α1;
        |} in
    let* α3 : ltac:(refine (core.ops.range.Range i32)) :=
      (core.iter.traits.collect.IntoIterator.into_iter
          (Self := core.ops.range.Range i32)
          (Trait := ltac:(refine _)))
        α2 in
    let* α4 := M.read α3 in
    let* α5 : ltac:(refine unit) :=
      match α4 with
      | iter =>
        loop
          (let* _ : ltac:(refine unit) :=
            let* α0 : ltac:(refine (mut_ref (core.ops.range.Range i32))) :=
              borrow_mut iter in
            let* α1 : ltac:(refine (core.option.Option i32)) :=
              (core.iter.traits.iterator.Iterator.next
                  (Self := core.ops.range.Range i32)
                  (Trait := ltac:(refine _)))
                α0 in
            let* α2 := M.read α1 in
            match α2 with
            | core.option.Option.None  =>
              let* α0 : ltac:(refine never) := Break in
              never_to_any α0
            | core.option.Option.Some _ =>
              let* _ : ltac:(refine unit) :=
                let* α0 : ltac:(refine (mut_ref std.fs.File)) :=
                  borrow_mut file in
                let* α1 : ltac:(refine str) := deref (mk_str "Corro
") in
                let* α2 : ltac:(refine (ref str)) := borrow α1 in
                let* α3 : ltac:(refine (ref (slice u8))) :=
                  str::["as_bytes"] α2 in
                let* α4 : ltac:(refine (slice u8)) := deref α3 in
                let* α5 : ltac:(refine (ref (slice u8))) := borrow α4 in
                let* α6 :
                    ltac:(refine
                      (core.result.Result unit std.io.error.Error)) :=
                  (std.io.Write.write_all
                      (Self := std.fs.File)
                      (Trait := ltac:(refine _)))
                    α0
                    α5 in
                let* α7 : ltac:(refine str) :=
                  deref (mk_str "Could not write to ferris.txt") in
                let* α8 : ltac:(refine (ref str)) := borrow α7 in
                (core.result.Result unit std.io.error.Error)::["expect"]
                  α6
                  α8 in
              M.alloc tt
            end in
          M.alloc tt)
      end in
    use α5).
