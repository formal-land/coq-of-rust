(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module  Circle.
Section Circle.
  Context `{ℋ : State.Trait}.
  
  Record t : Set := {
    radius : i32;
  }.
  
  Global Instance Get_radius : Notation.Dot "radius" := {
    Notation.dot x := let* x := M.read x in M.pure x.(radius) : M _;
  }.
  Global Instance Get_AF_radius : Notation.DoubleColon t "radius" := {
    Notation.double_colon x := let* x := M.read x in M.pure x.(radius) : M _;
  }.
End Circle.
End Circle.
Definition Circle `{ℋ : State.Trait} : Set := M.Val Circle.t.

Module  Impl_core_fmt_Display_for_converting_to_string_Circle.
Section Impl_core_fmt_Display_for_converting_to_string_Circle.
  Context `{ℋ : State.Trait}.
  
  Definition Self : Set := converting_to_string.Circle.
  
  Definition fmt
      (self : ref Self)
      (f : mut_ref core.fmt.Formatter)
      : M ltac:(core.fmt.Result) :=
    M.function_body
      (let* α0 : ltac:(refine core.fmt.Formatter) := deref f in
      let* α1 : ltac:(refine (mut_ref core.fmt.Formatter)) := borrow_mut α0 in
      let* α2 : ltac:(refine (array (ref str))) :=
        M.alloc [ mk_str "Circle of radius " ] in
      let* α3 : ltac:(refine (ref (array (ref str)))) := borrow α2 in
      let* α4 : ltac:(refine (ref (slice (ref str)))) :=
        pointer_coercion "Unsize" α3 in
      let* α5 : ltac:(refine converting_to_string.Circle) := deref self in
      let* α6 : ltac:(refine i32) := α5.["radius"] in
      let* α7 : ltac:(refine (ref i32)) := borrow α6 in
      let* α8 : ltac:(refine core.fmt.rt.Argument) :=
        core.fmt.rt.Argument::["new_display"] α7 in
      let* α9 : ltac:(refine (array core.fmt.rt.Argument)) := M.alloc [ α8 ] in
      let* α10 : ltac:(refine (ref (array core.fmt.rt.Argument))) :=
        borrow α9 in
      let* α11 : ltac:(refine (ref (slice core.fmt.rt.Argument))) :=
        pointer_coercion "Unsize" α10 in
      let* α12 : ltac:(refine core.fmt.Arguments) :=
        core.fmt.Arguments::["new_v1"] α4 α11 in
      core.fmt.Formatter::["write_fmt"] α1 α12).
  
  Global Instance AssociatedFunction_fmt : Notation.DoubleColon Self "fmt" := {
    Notation.double_colon := fmt;
  }.
  
  Global Instance ℐ : core.fmt.Display.Trait Self := {
    core.fmt.Display.fmt := fmt;
  }.
End Impl_core_fmt_Display_for_converting_to_string_Circle.
End Impl_core_fmt_Display_for_converting_to_string_Circle.

(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main `{ℋ : State.Trait} : M unit :=
  M.function_body
    (let* circle : ltac:(refine converting_to_string.Circle) :=
      let* α0 : ltac:(refine i32) := M.alloc 6 in
      M.alloc {| converting_to_string.Circle.radius := α0; |} in
    let* _ : ltac:(refine alloc.string.String) :=
      let* α0 : ltac:(refine (ref converting_to_string.Circle)) :=
        borrow circle in
      (alloc.string.ToString.to_string
          (Self := converting_to_string.Circle)
          (Trait := ltac:(refine _)))
        α0 in
    M.alloc tt).
