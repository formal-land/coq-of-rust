(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module  Number.
Section Number.
  Context `{ℋ : State.Trait}.
  
  Record t : Set := {
    value : i32;
  }.
  
  Global Instance Get_value : Notation.Dot "value" := {
    Notation.dot x := let* x := M.read x in M.pure x.(value) : M _;
  }.
  Global Instance Get_AF_value : Notation.DoubleColon t "value" := {
    Notation.double_colon x := let* x := M.read x in M.pure x.(value) : M _;
  }.
End Number.
End Number.
Definition Number `{ℋ : State.Trait} : Set := M.Val Number.t.

Module  Impl_core_convert_From_i32_for_from_Number.
Section Impl_core_convert_From_i32_for_from_Number.
  Context `{ℋ : State.Trait}.
  
  Definition Self : Set := from.Number.
  
  Definition from (item : i32) : M Self :=
    M.function_body (M.alloc {| from.Number.value := item; |}).
  
  Global Instance AssociatedFunction_from :
    Notation.DoubleColon Self "from" := {
    Notation.double_colon := from;
  }.
  
  Global Instance ℐ : core.convert.From.Trait Self (T := i32) := {
    core.convert.From.from := from;
  }.
End Impl_core_convert_From_i32_for_from_Number.
End Impl_core_convert_From_i32_for_from_Number.

(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main `{ℋ : State.Trait} : M unit :=
  M.function_body
    (let* _ : ltac:(refine from.Number) :=
      let* α0 : ltac:(refine i32) := M.alloc 30 in
      (core.convert.From.from (Self := from.Number) (Trait := ltac:(refine _)))
        α0 in
    M.alloc tt).
