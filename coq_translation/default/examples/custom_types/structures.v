(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module  Person.
Section Person.
  Context `{ℋ : State.Trait}.
  
  Record t : Set := {
    name : alloc.string.String;
    age : u8;
  }.
  
  Global Instance Get_name : Notation.Dot "name" := {
    Notation.dot x := let* x := M.read x in M.pure x.(name) : M _;
  }.
  Global Instance Get_AF_name : Notation.DoubleColon t "name" := {
    Notation.double_colon x := let* x := M.read x in M.pure x.(name) : M _;
  }.
  Global Instance Get_age : Notation.Dot "age" := {
    Notation.dot x := let* x := M.read x in M.pure x.(age) : M _;
  }.
  Global Instance Get_AF_age : Notation.DoubleColon t "age" := {
    Notation.double_colon x := let* x := M.read x in M.pure x.(age) : M _;
  }.
End Person.
End Person.
Definition Person `{ℋ : State.Trait} : Set := M.Val Person.t.

Module  Impl_core_fmt_Debug_for_structures_Person.
Section Impl_core_fmt_Debug_for_structures_Person.
  Context `{ℋ : State.Trait}.
  
  Definition Self : Set := structures.Person.
  
  Definition fmt
      (self : ref Self)
      (f : mut_ref core.fmt.Formatter)
      : M ltac:(core.fmt.Result) :=
    M.function_body
      (let* α0 : ltac:(refine core.fmt.Formatter) := deref f in
      let* α1 : ltac:(refine (mut_ref core.fmt.Formatter)) := borrow_mut α0 in
      let* α2 : ltac:(refine str) := deref (mk_str "Person") in
      let* α3 : ltac:(refine (ref str)) := borrow α2 in
      let* α4 : ltac:(refine str) := deref (mk_str "name") in
      let* α5 : ltac:(refine (ref str)) := borrow α4 in
      let* α6 : ltac:(refine structures.Person) := deref self in
      let* α7 : ltac:(refine alloc.string.String) := α6.["name"] in
      let* α8 : ltac:(refine (ref alloc.string.String)) := borrow α7 in
      let* α9 : ltac:(refine (ref type not implemented)) :=
        pointer_coercion "Unsize" α8 in
      let* α10 : ltac:(refine str) := deref (mk_str "age") in
      let* α11 : ltac:(refine (ref str)) := borrow α10 in
      let* α12 : ltac:(refine structures.Person) := deref self in
      let* α13 : ltac:(refine u8) := α12.["age"] in
      let* α14 : ltac:(refine (ref u8)) := borrow α13 in
      let* α15 : ltac:(refine (ref (ref u8))) := borrow α14 in
      let* α16 : ltac:(refine (ref type not implemented)) :=
        pointer_coercion "Unsize" α15 in
      core.fmt.Formatter::["debug_struct_field2_finish"] α1 α3 α5 α9 α11 α16).
  
  Global Instance AssociatedFunction_fmt : Notation.DoubleColon Self "fmt" := {
    Notation.double_colon := fmt;
  }.
  
  Global Instance ℐ : core.fmt.Debug.Trait Self := {
    core.fmt.Debug.fmt := fmt;
  }.
End Impl_core_fmt_Debug_for_structures_Person.
End Impl_core_fmt_Debug_for_structures_Person.

Module  Unit.
Section Unit.
  Context `{ℋ : State.Trait}.
  
  Inductive t : Set := Build.
End Unit.
End Unit.
Definition Unit `{ℋ : State.Trait} := M.Val Unit.t.

Module  Pair.
Section Pair.
  Context `{ℋ : State.Trait}.
  
  Record t : Set := {
    x0 : i32;
    x1 : f32;
  }.
  
  Global Instance Get_0 : Notation.Dot "0" := {
    Notation.dot x := let* x := M.read x in M.pure x.(x0) : M _;
  }.
  Global Instance Get_1 : Notation.Dot "1" := {
    Notation.dot x := let* x := M.read x in M.pure x.(x1) : M _;
  }.
End Pair.
End Pair.
Definition Pair `{ℋ : State.Trait} : Set := M.Val Pair.t.

Module  Point.
Section Point.
  Context `{ℋ : State.Trait}.
  
  Record t : Set := {
    x : f32;
    y : f32;
  }.
  
  Global Instance Get_x : Notation.Dot "x" := {
    Notation.dot x' := let* x' := M.read x' in M.pure x'.(x) : M _;
  }.
  Global Instance Get_AF_x : Notation.DoubleColon t "x" := {
    Notation.double_colon x' := let* x' := M.read x' in M.pure x'.(x) : M _;
  }.
  Global Instance Get_y : Notation.Dot "y" := {
    Notation.dot x := let* x := M.read x in M.pure x.(y) : M _;
  }.
  Global Instance Get_AF_y : Notation.DoubleColon t "y" := {
    Notation.double_colon x := let* x := M.read x in M.pure x.(y) : M _;
  }.
End Point.
End Point.
Definition Point `{ℋ : State.Trait} : Set := M.Val Point.t.

Module  Rectangle.
Section Rectangle.
  Context `{ℋ : State.Trait}.
  
  Record t : Set := {
    top_left : structures.Point;
    bottom_right : structures.Point;
  }.
  
  Global Instance Get_top_left : Notation.Dot "top_left" := {
    Notation.dot x := let* x := M.read x in M.pure x.(top_left) : M _;
  }.
  Global Instance Get_AF_top_left : Notation.DoubleColon t "top_left" := {
    Notation.double_colon x := let* x := M.read x in M.pure x.(top_left) : M _;
  }.
  Global Instance Get_bottom_right : Notation.Dot "bottom_right" := {
    Notation.dot x := let* x := M.read x in M.pure x.(bottom_right) : M _;
  }.
  Global Instance Get_AF_bottom_right :
    Notation.DoubleColon t "bottom_right" := {
    Notation.double_colon x :=
      let* x := M.read x in M.pure x.(bottom_right) : M _;
  }.
End Rectangle.
End Rectangle.
Definition Rectangle `{ℋ : State.Trait} : Set := M.Val Rectangle.t.

(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main `{ℋ : State.Trait} : M unit :=
  M.function_body
    (let* name : ltac:(refine alloc.string.String) :=
      (core.convert.From.from
          (Self := alloc.string.String)
          (Trait := ltac:(refine _)))
        (mk_str "Peter") in
    let* age : ltac:(refine u8) := M.alloc 27 in
    let* peter : ltac:(refine structures.Person) :=
      M.alloc
        {| structures.Person.name := name; structures.Person.age := age; |} in
    let* _ : ltac:(refine unit) :=
      let* _ : ltac:(refine unit) :=
        let* α0 : ltac:(refine (array (ref str))) :=
          M.alloc [ mk_str ""; mk_str "
" ] in
        let* α1 : ltac:(refine (ref (array (ref str)))) := borrow α0 in
        let* α2 : ltac:(refine (ref (slice (ref str)))) :=
          pointer_coercion "Unsize" α1 in
        let* α3 : ltac:(refine (ref structures.Person)) := borrow peter in
        let* α4 : ltac:(refine core.fmt.rt.Argument) :=
          core.fmt.rt.Argument::["new_debug"] α3 in
        let* α5 : ltac:(refine (array core.fmt.rt.Argument)) :=
          M.alloc [ α4 ] in
        let* α6 : ltac:(refine (ref (array core.fmt.rt.Argument))) :=
          borrow α5 in
        let* α7 : ltac:(refine (ref (slice core.fmt.rt.Argument))) :=
          pointer_coercion "Unsize" α6 in
        let* α8 : ltac:(refine core.fmt.Arguments) :=
          core.fmt.Arguments::["new_v1"] α2 α7 in
        std.io.stdio._print α8 in
      M.alloc tt in
    let* point : ltac:(refine structures.Point) :=
      let* α0 : ltac:(refine f32) := M.alloc 10 (* 10.3 *) in
      let* α1 : ltac:(refine f32) := M.alloc 0 (* 0.4 *) in
      M.alloc {| structures.Point.x := α0; structures.Point.y := α1; |} in
    let* _ : ltac:(refine unit) :=
      let* _ : ltac:(refine unit) :=
        let* α0 : ltac:(refine (array (ref str))) :=
          M.alloc [ mk_str "point coordinates: ("; mk_str ", "; mk_str ")
" ] in
        let* α1 : ltac:(refine (ref (array (ref str)))) := borrow α0 in
        let* α2 : ltac:(refine (ref (slice (ref str)))) :=
          pointer_coercion "Unsize" α1 in
        let* α3 : ltac:(refine f32) := point.["x"] in
        let* α4 : ltac:(refine (ref f32)) := borrow α3 in
        let* α5 : ltac:(refine core.fmt.rt.Argument) :=
          core.fmt.rt.Argument::["new_display"] α4 in
        let* α6 : ltac:(refine f32) := point.["y"] in
        let* α7 : ltac:(refine (ref f32)) := borrow α6 in
        let* α8 : ltac:(refine core.fmt.rt.Argument) :=
          core.fmt.rt.Argument::["new_display"] α7 in
        let* α9 : ltac:(refine (array core.fmt.rt.Argument)) :=
          M.alloc [ α5; α8 ] in
        let* α10 : ltac:(refine (ref (array core.fmt.rt.Argument))) :=
          borrow α9 in
        let* α11 : ltac:(refine (ref (slice core.fmt.rt.Argument))) :=
          pointer_coercion "Unsize" α10 in
        let* α12 : ltac:(refine core.fmt.Arguments) :=
          core.fmt.Arguments::["new_v1"] α2 α11 in
        std.io.stdio._print α12 in
      M.alloc tt in
    let* bottom_right : ltac:(refine structures.Point) :=
      let* α0 : ltac:(refine f32) := M.alloc 5 (* 5.2 *) in
      M.alloc {| structures.Point.x := α0; |} in
    let* _ : ltac:(refine unit) :=
      let* _ : ltac:(refine unit) :=
        let* α0 : ltac:(refine (array (ref str))) :=
          M.alloc [ mk_str "second point: ("; mk_str ", "; mk_str ")
" ] in
        let* α1 : ltac:(refine (ref (array (ref str)))) := borrow α0 in
        let* α2 : ltac:(refine (ref (slice (ref str)))) :=
          pointer_coercion "Unsize" α1 in
        let* α3 : ltac:(refine f32) := bottom_right.["x"] in
        let* α4 : ltac:(refine (ref f32)) := borrow α3 in
        let* α5 : ltac:(refine core.fmt.rt.Argument) :=
          core.fmt.rt.Argument::["new_display"] α4 in
        let* α6 : ltac:(refine f32) := bottom_right.["y"] in
        let* α7 : ltac:(refine (ref f32)) := borrow α6 in
        let* α8 : ltac:(refine core.fmt.rt.Argument) :=
          core.fmt.rt.Argument::["new_display"] α7 in
        let* α9 : ltac:(refine (array core.fmt.rt.Argument)) :=
          M.alloc [ α5; α8 ] in
        let* α10 : ltac:(refine (ref (array core.fmt.rt.Argument))) :=
          borrow α9 in
        let* α11 : ltac:(refine (ref (slice core.fmt.rt.Argument))) :=
          pointer_coercion "Unsize" α10 in
        let* α12 : ltac:(refine core.fmt.Arguments) :=
          core.fmt.Arguments::["new_v1"] α2 α11 in
        std.io.stdio._print α12 in
      M.alloc tt in
    let '{| structures.Point.x := left_edge; structures.Point.y := top_edge;
        |} :=
      point in
    let* _rectangle : ltac:(refine structures.Rectangle) :=
      let* α0 : ltac:(refine structures.Point) :=
        M.alloc
          {| structures.Point.x := left_edge; structures.Point.y := top_edge;
          |} in
      M.alloc
        {|
          structures.Rectangle.top_left := α0;
          structures.Rectangle.bottom_right := bottom_right;
        |} in
    let* _unit : ltac:(refine structures.Unit) :=
      M.alloc structures.Unit.Build_t in
    let* pair : ltac:(refine structures.Pair) :=
      let* α0 : ltac:(refine i32) := M.alloc 1 in
      let* α1 : ltac:(refine f32) := M.alloc 0 (* 0.1 *) in
      M.alloc (structures.Pair.Build_t α0 α1) in
    let* _ : ltac:(refine unit) :=
      let* _ : ltac:(refine unit) :=
        let* α0 : ltac:(refine (array (ref str))) :=
          M.alloc [ mk_str "pair contains "; mk_str " and "; mk_str "
" ] in
        let* α1 : ltac:(refine (ref (array (ref str)))) := borrow α0 in
        let* α2 : ltac:(refine (ref (slice (ref str)))) :=
          pointer_coercion "Unsize" α1 in
        let* α3 : ltac:(refine i32) := pair.["0"] in
        let* α4 : ltac:(refine (ref i32)) := borrow α3 in
        let* α5 : ltac:(refine core.fmt.rt.Argument) :=
          core.fmt.rt.Argument::["new_debug"] α4 in
        let* α6 : ltac:(refine f32) := pair.["1"] in
        let* α7 : ltac:(refine (ref f32)) := borrow α6 in
        let* α8 : ltac:(refine core.fmt.rt.Argument) :=
          core.fmt.rt.Argument::["new_debug"] α7 in
        let* α9 : ltac:(refine (array core.fmt.rt.Argument)) :=
          M.alloc [ α5; α8 ] in
        let* α10 : ltac:(refine (ref (array core.fmt.rt.Argument))) :=
          borrow α9 in
        let* α11 : ltac:(refine (ref (slice core.fmt.rt.Argument))) :=
          pointer_coercion "Unsize" α10 in
        let* α12 : ltac:(refine core.fmt.Arguments) :=
          core.fmt.Arguments::["new_v1"] α2 α11 in
        std.io.stdio._print α12 in
      M.alloc tt in
    let 'structures.Pair.Build_t integer decimal := pair in
    let* _ : ltac:(refine unit) :=
      let* _ : ltac:(refine unit) :=
        let* α0 : ltac:(refine (array (ref str))) :=
          M.alloc [ mk_str "pair contains "; mk_str " and "; mk_str "
" ] in
        let* α1 : ltac:(refine (ref (array (ref str)))) := borrow α0 in
        let* α2 : ltac:(refine (ref (slice (ref str)))) :=
          pointer_coercion "Unsize" α1 in
        let* α3 : ltac:(refine (ref i32)) := borrow integer in
        let* α4 : ltac:(refine core.fmt.rt.Argument) :=
          core.fmt.rt.Argument::["new_debug"] α3 in
        let* α5 : ltac:(refine (ref f32)) := borrow decimal in
        let* α6 : ltac:(refine core.fmt.rt.Argument) :=
          core.fmt.rt.Argument::["new_debug"] α5 in
        let* α7 : ltac:(refine (array core.fmt.rt.Argument)) :=
          M.alloc [ α4; α6 ] in
        let* α8 : ltac:(refine (ref (array core.fmt.rt.Argument))) :=
          borrow α7 in
        let* α9 : ltac:(refine (ref (slice core.fmt.rt.Argument))) :=
          pointer_coercion "Unsize" α8 in
        let* α10 : ltac:(refine core.fmt.Arguments) :=
          core.fmt.Arguments::["new_v1"] α2 α9 in
        std.io.stdio._print α10 in
      M.alloc tt in
    M.alloc tt).
