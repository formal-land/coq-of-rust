(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Definition multiply
    `{ℋ : State.Trait}
    (first_number_str : ref str)
    (second_number_str : ref str)
    : M (core.result.Result i32 core.num.error.ParseIntError) :=
  M.function_body
    (let* first_number : ltac:(refine i32) :=
      let* α0 : ltac:(refine str) := deref first_number_str in
      let* α1 : ltac:(refine (ref str)) := borrow α0 in
      let* α2 :
          ltac:(refine (core.result.Result i32 core.num.error.ParseIntError)) :=
        str::["parse"] α1 in
      let* α3 :
          ltac:(refine
            (core.ops.control_flow.ControlFlow
              (core.result.Result
                core.convert.Infallible
                core.num.error.ParseIntError)
              i32)) :=
        (core.ops.try_trait.Try.branch
            (Self := core.result.Result i32 core.num.error.ParseIntError)
            (Trait := ltac:(refine _)))
          α2 in
      let* α4 := M.read α3 in
      match α4 with
      | core.ops.control_flow.ControlFlow.Break residual =>
        let* α0 :
            ltac:(refine
              (core.result.Result i32 core.num.error.ParseIntError)) :=
          (core.ops.try_trait.FromResidual.from_residual
              (Self := core.result.Result i32 core.num.error.ParseIntError)
              (Trait := ltac:(refine _)))
            residual in
        let* α1 : ltac:(refine never) := M.return_ α0 in
        never_to_any α1
      | core.ops.control_flow.ControlFlow.Continue val => M.pure val
      end in
    let* second_number : ltac:(refine i32) :=
      let* α0 : ltac:(refine str) := deref second_number_str in
      let* α1 : ltac:(refine (ref str)) := borrow α0 in
      let* α2 :
          ltac:(refine (core.result.Result i32 core.num.error.ParseIntError)) :=
        str::["parse"] α1 in
      let* α3 :
          ltac:(refine
            (core.ops.control_flow.ControlFlow
              (core.result.Result
                core.convert.Infallible
                core.num.error.ParseIntError)
              i32)) :=
        (core.ops.try_trait.Try.branch
            (Self := core.result.Result i32 core.num.error.ParseIntError)
            (Trait := ltac:(refine _)))
          α2 in
      let* α4 := M.read α3 in
      match α4 with
      | core.ops.control_flow.ControlFlow.Break residual =>
        let* α0 :
            ltac:(refine
              (core.result.Result i32 core.num.error.ParseIntError)) :=
          (core.ops.try_trait.FromResidual.from_residual
              (Self := core.result.Result i32 core.num.error.ParseIntError)
              (Trait := ltac:(refine _)))
            residual in
        let* α1 : ltac:(refine never) := M.return_ α0 in
        never_to_any α1
      | core.ops.control_flow.ControlFlow.Continue val => M.pure val
      end in
    let* α0 : ltac:(refine i32) := BinOp.mul first_number second_number in
    M.alloc (core.result.Result.Ok α0)).

Definition print
    `{ℋ : State.Trait}
    (result : core.result.Result i32 core.num.error.ParseIntError)
    : M unit :=
  M.function_body
    (let* α0 := M.read result in
    match α0 with
    | core.result.Result.Ok n =>
      let* _ : ltac:(refine unit) :=
        let* α0 : ltac:(refine (array (ref str))) :=
          M.alloc [ mk_str "n is "; mk_str "
" ] in
        let* α1 : ltac:(refine (ref (array (ref str)))) := borrow α0 in
        let* α2 : ltac:(refine (ref (slice (ref str)))) :=
          pointer_coercion "Unsize" α1 in
        let* α3 : ltac:(refine (ref i32)) := borrow n in
        let* α4 : ltac:(refine core.fmt.rt.Argument) :=
          core.fmt.rt.Argument::["new_display"] α3 in
        let* α5 : ltac:(refine (array core.fmt.rt.Argument)) :=
          M.alloc [ α4 ] in
        let* α6 : ltac:(refine (ref (array core.fmt.rt.Argument))) :=
          borrow α5 in
        let* α7 : ltac:(refine (ref (slice core.fmt.rt.Argument))) :=
          pointer_coercion "Unsize" α6 in
        let* α8 : ltac:(refine core.fmt.Arguments) :=
          core.fmt.Arguments::["new_v1"] α2 α7 in
        std.io.stdio._print α8 in
      M.alloc tt
    | core.result.Result.Err e =>
      let* _ : ltac:(refine unit) :=
        let* α0 : ltac:(refine (array (ref str))) :=
          M.alloc [ mk_str "Error: "; mk_str "
" ] in
        let* α1 : ltac:(refine (ref (array (ref str)))) := borrow α0 in
        let* α2 : ltac:(refine (ref (slice (ref str)))) :=
          pointer_coercion "Unsize" α1 in
        let* α3 : ltac:(refine (ref core.num.error.ParseIntError)) :=
          borrow e in
        let* α4 : ltac:(refine core.fmt.rt.Argument) :=
          core.fmt.rt.Argument::["new_display"] α3 in
        let* α5 : ltac:(refine (array core.fmt.rt.Argument)) :=
          M.alloc [ α4 ] in
        let* α6 : ltac:(refine (ref (array core.fmt.rt.Argument))) :=
          borrow α5 in
        let* α7 : ltac:(refine (ref (slice core.fmt.rt.Argument))) :=
          pointer_coercion "Unsize" α6 in
        let* α8 : ltac:(refine core.fmt.Arguments) :=
          core.fmt.Arguments::["new_v1"] α2 α7 in
        std.io.stdio._print α8 in
      M.alloc tt
    end).

(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main `{ℋ : State.Trait} : M unit :=
  M.function_body
    (let* _ : ltac:(refine unit) :=
      let* α0 : ltac:(refine str) := deref (mk_str "10") in
      let* α1 : ltac:(refine (ref str)) := borrow α0 in
      let* α2 : ltac:(refine str) := deref (mk_str "2") in
      let* α3 : ltac:(refine (ref str)) := borrow α2 in
      let* α4 :
          ltac:(refine (core.result.Result i32 core.num.error.ParseIntError)) :=
        introducing_question_mark.multiply α1 α3 in
      introducing_question_mark.print α4 in
    let* _ : ltac:(refine unit) :=
      let* α0 : ltac:(refine str) := deref (mk_str "t") in
      let* α1 : ltac:(refine (ref str)) := borrow α0 in
      let* α2 : ltac:(refine str) := deref (mk_str "2") in
      let* α3 : ltac:(refine (ref str)) := borrow α2 in
      let* α4 :
          ltac:(refine (core.result.Result i32 core.num.error.ParseIntError)) :=
        introducing_question_mark.multiply α1 α3 in
      introducing_question_mark.print α4 in
    M.alloc tt).
