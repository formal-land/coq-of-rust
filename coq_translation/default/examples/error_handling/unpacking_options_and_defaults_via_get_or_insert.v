(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module Fruit.
  Inductive t `{ℋ : State.Trait} : Set :=
  | Apple
  | Orange
  | Banana
  | Kiwi
  | Lemon.
End Fruit.
Definition Fruit `{ℋ : State.Trait} : Set := M.Val Fruit.t.

Module  Impl_core_fmt_Debug_for_unpacking_options_and_defaults_via_get_or_insert_Fruit.
Section Impl_core_fmt_Debug_for_unpacking_options_and_defaults_via_get_or_insert_Fruit.
  Context `{ℋ : State.Trait}.
  
  Definition Self : Set :=
    unpacking_options_and_defaults_via_get_or_insert.Fruit.
  
  Definition fmt
      (self : ref Self)
      (f : mut_ref core.fmt.Formatter)
      : M ltac:(core.fmt.Result) :=
    M.function_body
      (let* α0 : ltac:(refine core.fmt.Formatter) := deref f in
      let* α1 : ltac:(refine (mut_ref core.fmt.Formatter)) := borrow_mut α0 in
      let* α2 := M.read self in
      let* α3 : ltac:(refine (ref str)) :=
        match α2 with
        | unpacking_options_and_defaults_via_get_or_insert.Fruit.Apple  =>
          let* α0 : ltac:(refine str) := deref (mk_str "Apple") in
          borrow α0
        | unpacking_options_and_defaults_via_get_or_insert.Fruit.Orange  =>
          let* α0 : ltac:(refine str) := deref (mk_str "Orange") in
          borrow α0
        | unpacking_options_and_defaults_via_get_or_insert.Fruit.Banana  =>
          let* α0 : ltac:(refine str) := deref (mk_str "Banana") in
          borrow α0
        | unpacking_options_and_defaults_via_get_or_insert.Fruit.Kiwi  =>
          let* α0 : ltac:(refine str) := deref (mk_str "Kiwi") in
          borrow α0
        | unpacking_options_and_defaults_via_get_or_insert.Fruit.Lemon  =>
          let* α0 : ltac:(refine str) := deref (mk_str "Lemon") in
          borrow α0
        end in
      core.fmt.Formatter::["write_str"] α1 α3).
  
  Global Instance AssociatedFunction_fmt : Notation.DoubleColon Self "fmt" := {
    Notation.double_colon := fmt;
  }.
  
  Global Instance ℐ : core.fmt.Debug.Trait Self := {
    core.fmt.Debug.fmt := fmt;
  }.
End Impl_core_fmt_Debug_for_unpacking_options_and_defaults_via_get_or_insert_Fruit.
End Impl_core_fmt_Debug_for_unpacking_options_and_defaults_via_get_or_insert_Fruit.

(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main `{ℋ : State.Trait} : M unit :=
  M.function_body
    (let* my_fruit :
        ltac:(refine
          (core.option.Option
            unpacking_options_and_defaults_via_get_or_insert.Fruit)) :=
      M.alloc core.option.Option.None in
    let* apple :
        ltac:(refine unpacking_options_and_defaults_via_get_or_insert.Fruit) :=
      M.alloc unpacking_options_and_defaults_via_get_or_insert.Fruit.Apple in
    let* first_available_fruit :
        ltac:(refine
          (mut_ref unpacking_options_and_defaults_via_get_or_insert.Fruit)) :=
      let* α0 :
          ltac:(refine
            (mut_ref
              (core.option.Option
                unpacking_options_and_defaults_via_get_or_insert.Fruit))) :=
        borrow_mut my_fruit in
      (core.option.Option
            unpacking_options_and_defaults_via_get_or_insert.Fruit)::["get_or_insert"]
        α0
        apple in
    let* _ : ltac:(refine unit) :=
      let* _ : ltac:(refine unit) :=
        let* α0 : ltac:(refine (array (ref str))) :=
          M.alloc [ mk_str "my_fruit is: "; mk_str "
" ] in
        let* α1 : ltac:(refine (ref (array (ref str)))) := borrow α0 in
        let* α2 : ltac:(refine (ref (slice (ref str)))) :=
          pointer_coercion "Unsize" α1 in
        let* α3 :
            ltac:(refine
              (ref
                (mut_ref
                  unpacking_options_and_defaults_via_get_or_insert.Fruit))) :=
          borrow first_available_fruit in
        let* α4 : ltac:(refine core.fmt.rt.Argument) :=
          core.fmt.rt.Argument::["new_debug"] α3 in
        let* α5 : ltac:(refine (array core.fmt.rt.Argument)) :=
          M.alloc [ α4 ] in
        let* α6 : ltac:(refine (ref (array core.fmt.rt.Argument))) :=
          borrow α5 in
        let* α7 : ltac:(refine (ref (slice core.fmt.rt.Argument))) :=
          pointer_coercion "Unsize" α6 in
        let* α8 : ltac:(refine core.fmt.Arguments) :=
          core.fmt.Arguments::["new_v1"] α2 α7 in
        std.io.stdio._print α8 in
      M.alloc tt in
    let* _ : ltac:(refine unit) :=
      let* _ : ltac:(refine unit) :=
        let* α0 : ltac:(refine (array (ref str))) :=
          M.alloc [ mk_str "first_available_fruit is: "; mk_str "
" ] in
        let* α1 : ltac:(refine (ref (array (ref str)))) := borrow α0 in
        let* α2 : ltac:(refine (ref (slice (ref str)))) :=
          pointer_coercion "Unsize" α1 in
        let* α3 :
            ltac:(refine
              (ref
                (mut_ref
                  unpacking_options_and_defaults_via_get_or_insert.Fruit))) :=
          borrow first_available_fruit in
        let* α4 : ltac:(refine core.fmt.rt.Argument) :=
          core.fmt.rt.Argument::["new_debug"] α3 in
        let* α5 : ltac:(refine (array core.fmt.rt.Argument)) :=
          M.alloc [ α4 ] in
        let* α6 : ltac:(refine (ref (array core.fmt.rt.Argument))) :=
          borrow α5 in
        let* α7 : ltac:(refine (ref (slice core.fmt.rt.Argument))) :=
          pointer_coercion "Unsize" α6 in
        let* α8 : ltac:(refine core.fmt.Arguments) :=
          core.fmt.Arguments::["new_v1"] α2 α7 in
        std.io.stdio._print α8 in
      M.alloc tt in
    M.alloc tt).
