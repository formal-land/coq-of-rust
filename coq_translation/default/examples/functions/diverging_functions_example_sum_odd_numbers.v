(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main `{ℋ : State.Trait} : M unit :=
  M.function_body
    (let* _ : ltac:(refine unit) :=
      let* _ : ltac:(refine unit) :=
        let* α0 : ltac:(refine (array (ref str))) :=
          M.alloc
            [ mk_str "Sum of odd numbers up to 9 (excluding): "; mk_str "
" ] in
        let* α1 : ltac:(refine (ref (array (ref str)))) := borrow α0 in
        let* α2 : ltac:(refine (ref (slice (ref str)))) :=
          pointer_coercion "Unsize" α1 in
        let* α3 : ltac:(refine u32) := M.alloc 9 in
        let* α4 : ltac:(refine u32) := "unimplemented parent_kind" α3 in
        let* α5 : ltac:(refine (ref u32)) := borrow α4 in
        let* α6 : ltac:(refine core.fmt.rt.Argument) :=
          core.fmt.rt.Argument::["new_display"] α5 in
        let* α7 : ltac:(refine (array core.fmt.rt.Argument)) :=
          M.alloc [ α6 ] in
        let* α8 : ltac:(refine (ref (array core.fmt.rt.Argument))) :=
          borrow α7 in
        let* α9 : ltac:(refine (ref (slice core.fmt.rt.Argument))) :=
          pointer_coercion "Unsize" α8 in
        let* α10 : ltac:(refine core.fmt.Arguments) :=
          core.fmt.Arguments::["new_v1"] α2 α9 in
        std.io.stdio._print α10 in
      M.alloc tt in
    M.alloc tt).

Definition sum_odd_numbers `{ℋ : State.Trait} (up_to : u32) : M u32 :=
  M.function_body
    (let* acc : ltac:(refine u32) := M.alloc 0 in
    let* _ : ltac:(refine unit) :=
      let* α0 : ltac:(refine u32) := M.alloc 0 in
      let* α1 : ltac:(refine (core.ops.range.Range u32)) :=
        M.alloc
          {|
            core.ops.range.Range.start := α0;
            core.ops.range.Range.end := up_to;
          |} in
      let* α2 : ltac:(refine (core.ops.range.Range u32)) :=
        (core.iter.traits.collect.IntoIterator.into_iter
            (Self := core.ops.range.Range u32)
            (Trait := ltac:(refine _)))
          α1 in
      let* α3 := M.read α2 in
      let* α4 : ltac:(refine unit) :=
        match α3 with
        | iter =>
          loop
            (let* _ : ltac:(refine unit) :=
              let* α0 : ltac:(refine (mut_ref (core.ops.range.Range u32))) :=
                borrow_mut iter in
              let* α1 : ltac:(refine (core.option.Option u32)) :=
                (core.iter.traits.iterator.Iterator.next
                    (Self := core.ops.range.Range u32)
                    (Trait := ltac:(refine _)))
                  α0 in
              let* α2 := M.read α1 in
              match α2 with
              | core.option.Option.None  =>
                let* α0 : ltac:(refine never) := Break in
                never_to_any α0
              | core.option.Option.Some i =>
                let* addition : ltac:(refine u32) :=
                  let* α0 : ltac:(refine u32) := M.alloc 2 in
                  let* α1 : ltac:(refine u32) := BinOp.rem i α0 in
                  let* α2 : ltac:(refine u32) := M.alloc 1 in
                  let* α3 : ltac:(refine bool) := BinOp.eq α1 α2 in
                  let* α4 := M.read α3 in
                  match α4 with
                  | _ => M.pure i
                  | _ =>
                    let* α0 : ltac:(refine never) := Continue in
                    never_to_any α0
                  end in
                let* _ : ltac:(refine unit) := assign_op add acc addition in
                M.alloc tt
              end in
            M.alloc tt)
        end in
      use α4 in
    M.pure acc).
