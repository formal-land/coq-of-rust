(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main `{ℋ : State.Trait} : M unit :=
  M.function_body
    (let* _ : ltac:(refine unit) :=
      let* α0 : ltac:(refine u32) := M.alloc 100 in
      functions.fizzbuzz_to α0 in
    M.alloc tt).

Definition is_divisible_by
    `{ℋ : State.Trait}
    (lhs : u32)
    (rhs : u32)
    : M bool :=
  M.function_body
    (let* _ : ltac:(refine unit) :=
      let* α0 : ltac:(refine u32) := M.alloc 0 in
      let* α1 : ltac:(refine bool) := BinOp.eq rhs α0 in
      let* α2 : ltac:(refine bool) := use α1 in
      if (α2 : bool) then
        let* _ : ltac:(refine never) :=
          let* α0 : ltac:(refine bool) := M.alloc false in
          M.return_ α0 in
        let* α0 : ltac:(refine unit) := M.alloc tt in
        never_to_any α0
      else
        M.alloc tt in
    let* α0 : ltac:(refine u32) := BinOp.rem lhs rhs in
    let* α1 : ltac:(refine u32) := M.alloc 0 in
    BinOp.eq α0 α1).

Definition fizzbuzz `{ℋ : State.Trait} (n : u32) : M unit :=
  M.function_body
    (let* α0 : ltac:(refine u32) := M.alloc 15 in
    let* α1 : ltac:(refine bool) := functions.is_divisible_by n α0 in
    let* α2 : ltac:(refine bool) := use α1 in
    if (α2 : bool) then
      let* _ : ltac:(refine unit) :=
        let* _ : ltac:(refine unit) :=
          let* α0 : ltac:(refine (array (ref str))) :=
            M.alloc [ mk_str "fizzbuzz
" ] in
          let* α1 : ltac:(refine (ref (array (ref str)))) := borrow α0 in
          let* α2 : ltac:(refine (ref (slice (ref str)))) :=
            pointer_coercion "Unsize" α1 in
          let* α3 : ltac:(refine core.fmt.Arguments) :=
            core.fmt.Arguments::["new_const"] α2 in
          std.io.stdio._print α3 in
        M.alloc tt in
      M.alloc tt
    else
      let* α0 : ltac:(refine u32) := M.alloc 3 in
      let* α1 : ltac:(refine bool) := functions.is_divisible_by n α0 in
      let* α2 : ltac:(refine bool) := use α1 in
      if (α2 : bool) then
        let* _ : ltac:(refine unit) :=
          let* _ : ltac:(refine unit) :=
            let* α0 : ltac:(refine (array (ref str))) :=
              M.alloc [ mk_str "fizz
" ] in
            let* α1 : ltac:(refine (ref (array (ref str)))) := borrow α0 in
            let* α2 : ltac:(refine (ref (slice (ref str)))) :=
              pointer_coercion "Unsize" α1 in
            let* α3 : ltac:(refine core.fmt.Arguments) :=
              core.fmt.Arguments::["new_const"] α2 in
            std.io.stdio._print α3 in
          M.alloc tt in
        M.alloc tt
      else
        let* α0 : ltac:(refine u32) := M.alloc 5 in
        let* α1 : ltac:(refine bool) := functions.is_divisible_by n α0 in
        let* α2 : ltac:(refine bool) := use α1 in
        if (α2 : bool) then
          let* _ : ltac:(refine unit) :=
            let* _ : ltac:(refine unit) :=
              let* α0 : ltac:(refine (array (ref str))) :=
                M.alloc [ mk_str "buzz
" ] in
              let* α1 : ltac:(refine (ref (array (ref str)))) := borrow α0 in
              let* α2 : ltac:(refine (ref (slice (ref str)))) :=
                pointer_coercion "Unsize" α1 in
              let* α3 : ltac:(refine core.fmt.Arguments) :=
                core.fmt.Arguments::["new_const"] α2 in
              std.io.stdio._print α3 in
            M.alloc tt in
          M.alloc tt
        else
          let* _ : ltac:(refine unit) :=
            let* _ : ltac:(refine unit) :=
              let* α0 : ltac:(refine (array (ref str))) :=
                M.alloc [ mk_str ""; mk_str "
" ] in
              let* α1 : ltac:(refine (ref (array (ref str)))) := borrow α0 in
              let* α2 : ltac:(refine (ref (slice (ref str)))) :=
                pointer_coercion "Unsize" α1 in
              let* α3 : ltac:(refine (ref u32)) := borrow n in
              let* α4 : ltac:(refine core.fmt.rt.Argument) :=
                core.fmt.rt.Argument::["new_display"] α3 in
              let* α5 : ltac:(refine (array core.fmt.rt.Argument)) :=
                M.alloc [ α4 ] in
              let* α6 : ltac:(refine (ref (array core.fmt.rt.Argument))) :=
                borrow α5 in
              let* α7 : ltac:(refine (ref (slice core.fmt.rt.Argument))) :=
                pointer_coercion "Unsize" α6 in
              let* α8 : ltac:(refine core.fmt.Arguments) :=
                core.fmt.Arguments::["new_v1"] α2 α7 in
              std.io.stdio._print α8 in
            M.alloc tt in
          M.alloc tt).

Definition fizzbuzz_to `{ℋ : State.Trait} (n : u32) : M unit :=
  M.function_body
    (let* α0 : ltac:(refine u32) := M.alloc 1 in
    let* α1 : ltac:(refine (core.ops.range.RangeInclusive u32)) :=
      (core.ops.range.RangeInclusive u32)::["new"] α0 n in
    let* α2 : ltac:(refine (core.ops.range.RangeInclusive u32)) :=
      (core.iter.traits.collect.IntoIterator.into_iter
          (Self := core.ops.range.RangeInclusive u32)
          (Trait := ltac:(refine _)))
        α1 in
    let* α3 := M.read α2 in
    let* α4 : ltac:(refine unit) :=
      match α3 with
      | iter =>
        loop
          (let* _ : ltac:(refine unit) :=
            let* α0 :
                ltac:(refine (mut_ref (core.ops.range.RangeInclusive u32))) :=
              borrow_mut iter in
            let* α1 : ltac:(refine (core.option.Option u32)) :=
              (core.iter.traits.iterator.Iterator.next
                  (Self := core.ops.range.RangeInclusive u32)
                  (Trait := ltac:(refine _)))
                α0 in
            let* α2 := M.read α1 in
            match α2 with
            | core.option.Option.None  =>
              let* α0 : ltac:(refine never) := Break in
              never_to_any α0
            | core.option.Option.Some n =>
              let* _ : ltac:(refine unit) := functions.fizzbuzz n in
              M.alloc tt
            end in
          M.alloc tt)
      end in
    use α4).
