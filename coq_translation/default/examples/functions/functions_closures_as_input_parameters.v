(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Definition apply
    `{ℋ : State.Trait}
    {F : Set}
    {ℋ_0 : core.ops.function.FnOnce.Trait F (Args := unit)}
    (f : F)
    : M unit :=
  M.function_body
    (let* _ : ltac:(refine unit) :=
      let* α0 : ltac:(refine unit) := M.alloc tt in
      (core.ops.function.FnOnce.call_once
          (Self := F)
          (Trait := ltac:(refine _)))
        f
        α0 in
    M.alloc tt).

Definition apply_to_3
    `{ℋ : State.Trait}
    {F : Set}
    {ℋ_0 : core.ops.function.Fn.Trait F (Args := M.Val i32)}
    (f : F)
    : M i32 :=
  M.function_body
    (let* α0 : ltac:(refine (ref F)) := borrow f in
    let* α1 : ltac:(refine i32) := M.alloc 3 in
    let* α2 : ltac:(refine (M.Val (i32))) := M.alloc (α1) in
    (core.ops.function.Fn.call (Self := F) (Trait := ltac:(refine _))) α0 α2).

(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main `{ℋ : State.Trait} : M unit :=
  M.function_body
    (let greeting := mk_str "hello" in
    let* farewell : ltac:(refine alloc.string.String) :=
      let* α0 : ltac:(refine str) := deref (mk_str "goodbye") in
      let* α1 : ltac:(refine (ref str)) := borrow α0 in
      (alloc.borrow.ToOwned.to_owned (Self := str) (Trait := ltac:(refine _)))
        α1 in
    let diary :=
      let* _ : ltac:(refine unit) :=
        let* _ : ltac:(refine unit) :=
          let* α0 : ltac:(refine (array (ref str))) :=
            M.alloc [ mk_str "I said "; mk_str ".
" ] in
          let* α1 : ltac:(refine (ref (array (ref str)))) := borrow α0 in
          let* α2 : ltac:(refine (ref (slice (ref str)))) :=
            pointer_coercion "Unsize" α1 in
          let* α3 : ltac:(refine (ref (ref str))) := borrow greeting in
          let* α4 : ltac:(refine core.fmt.rt.Argument) :=
            core.fmt.rt.Argument::["new_display"] α3 in
          let* α5 : ltac:(refine (array core.fmt.rt.Argument)) :=
            M.alloc [ α4 ] in
          let* α6 : ltac:(refine (ref (array core.fmt.rt.Argument))) :=
            borrow α5 in
          let* α7 : ltac:(refine (ref (slice core.fmt.rt.Argument))) :=
            pointer_coercion "Unsize" α6 in
          let* α8 : ltac:(refine core.fmt.Arguments) :=
            core.fmt.Arguments::["new_v1"] α2 α7 in
          std.io.stdio._print α8 in
        M.alloc tt in
      let* _ : ltac:(refine unit) :=
        let* α0 : ltac:(refine (mut_ref alloc.string.String)) :=
          borrow_mut farewell in
        let* α1 : ltac:(refine str) := deref (mk_str "!!!") in
        let* α2 : ltac:(refine (ref str)) := borrow α1 in
        alloc.string.String::["push_str"] α0 α2 in
      let* _ : ltac:(refine unit) :=
        let* _ : ltac:(refine unit) :=
          let* α0 : ltac:(refine (array (ref str))) :=
            M.alloc [ mk_str "Then I screamed "; mk_str ".
" ] in
          let* α1 : ltac:(refine (ref (array (ref str)))) := borrow α0 in
          let* α2 : ltac:(refine (ref (slice (ref str)))) :=
            pointer_coercion "Unsize" α1 in
          let* α3 : ltac:(refine (ref alloc.string.String)) :=
            borrow farewell in
          let* α4 : ltac:(refine core.fmt.rt.Argument) :=
            core.fmt.rt.Argument::["new_display"] α3 in
          let* α5 : ltac:(refine (array core.fmt.rt.Argument)) :=
            M.alloc [ α4 ] in
          let* α6 : ltac:(refine (ref (array core.fmt.rt.Argument))) :=
            borrow α5 in
          let* α7 : ltac:(refine (ref (slice core.fmt.rt.Argument))) :=
            pointer_coercion "Unsize" α6 in
          let* α8 : ltac:(refine core.fmt.Arguments) :=
            core.fmt.Arguments::["new_v1"] α2 α7 in
          std.io.stdio._print α8 in
        M.alloc tt in
      let* _ : ltac:(refine unit) :=
        let* _ : ltac:(refine unit) :=
          let* α0 : ltac:(refine (array (ref str))) :=
            M.alloc [ mk_str "Now I can sleep. zzzzz
" ] in
          let* α1 : ltac:(refine (ref (array (ref str)))) := borrow α0 in
          let* α2 : ltac:(refine (ref (slice (ref str)))) :=
            pointer_coercion "Unsize" α1 in
          let* α3 : ltac:(refine core.fmt.Arguments) :=
            core.fmt.Arguments::["new_const"] α2 in
          std.io.stdio._print α3 in
        M.alloc tt in
      let* _ : ltac:(refine unit) := core.mem.drop farewell in
      M.alloc tt in
    let* _ : ltac:(refine unit) :=
      functions_closures_as_input_parameters.apply diary in
    let double :=
      let* α0 : ltac:(refine i32) := M.alloc 2 in
      BinOp.mul α0 x in
    let* _ : ltac:(refine unit) :=
      let* _ : ltac:(refine unit) :=
        let* α0 : ltac:(refine (array (ref str))) :=
          M.alloc [ mk_str "3 doubled: "; mk_str "
" ] in
        let* α1 : ltac:(refine (ref (array (ref str)))) := borrow α0 in
        let* α2 : ltac:(refine (ref (slice (ref str)))) :=
          pointer_coercion "Unsize" α1 in
        let* α3 : ltac:(refine i32) :=
          functions_closures_as_input_parameters.apply_to_3 double in
        let* α4 : ltac:(refine (ref i32)) := borrow α3 in
        let* α5 : ltac:(refine core.fmt.rt.Argument) :=
          core.fmt.rt.Argument::["new_display"] α4 in
        let* α6 : ltac:(refine (array core.fmt.rt.Argument)) :=
          M.alloc [ α5 ] in
        let* α7 : ltac:(refine (ref (array core.fmt.rt.Argument))) :=
          borrow α6 in
        let* α8 : ltac:(refine (ref (slice core.fmt.rt.Argument))) :=
          pointer_coercion "Unsize" α7 in
        let* α9 : ltac:(refine core.fmt.Arguments) :=
          core.fmt.Arguments::["new_v1"] α2 α8 in
        std.io.stdio._print α9 in
      M.alloc tt in
    M.alloc tt).
