(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main `{ℋ : State.Trait} : M unit :=
  M.function_body
    (let* color : ltac:(refine alloc.string.String) :=
      (core.convert.From.from
          (Self := alloc.string.String)
          (Trait := ltac:(refine _)))
        (mk_str "green") in
    let print :=
      let* _ : ltac:(refine unit) :=
        let* α0 : ltac:(refine (array (ref str))) :=
          M.alloc [ mk_str "`color`: "; mk_str "
" ] in
        let* α1 : ltac:(refine (ref (array (ref str)))) := borrow α0 in
        let* α2 : ltac:(refine (ref (slice (ref str)))) :=
          pointer_coercion "Unsize" α1 in
        let* α3 : ltac:(refine (ref alloc.string.String)) := borrow color in
        let* α4 : ltac:(refine core.fmt.rt.Argument) :=
          core.fmt.rt.Argument::["new_display"] α3 in
        let* α5 : ltac:(refine (array core.fmt.rt.Argument)) :=
          M.alloc [ α4 ] in
        let* α6 : ltac:(refine (ref (array core.fmt.rt.Argument))) :=
          borrow α5 in
        let* α7 : ltac:(refine (ref (slice core.fmt.rt.Argument))) :=
          pointer_coercion "Unsize" α6 in
        let* α8 : ltac:(refine core.fmt.Arguments) :=
          core.fmt.Arguments::["new_v1"] α2 α7 in
        std.io.stdio._print α8 in
      M.alloc tt in
    let* _ : ltac:(refine unit) :=
      let* α0 : ltac:(refine (ref type not implemented)) := borrow print in
      let* α1 : ltac:(refine unit) := M.alloc tt in
      (core.ops.function.Fn.call
          (Self := type not implemented)
          (Trait := ltac:(refine _)))
        α0
        α1 in
    let* _reborrow : ltac:(refine (ref alloc.string.String)) := borrow color in
    let* _ : ltac:(refine unit) :=
      let* α0 : ltac:(refine (ref type not implemented)) := borrow print in
      let* α1 : ltac:(refine unit) := M.alloc tt in
      (core.ops.function.Fn.call
          (Self := type not implemented)
          (Trait := ltac:(refine _)))
        α0
        α1 in
    let _color_moved := color in
    let* count : ltac:(refine i32) := M.alloc 0 in
    let inc :=
      let* _ : ltac:(refine unit) :=
        let* α0 : ltac:(refine i32) := M.alloc 1 in
        assign_op add count α0 in
      let* _ : ltac:(refine unit) :=
        let* _ : ltac:(refine unit) :=
          let* α0 : ltac:(refine (array (ref str))) :=
            M.alloc [ mk_str "`count`: "; mk_str "
" ] in
          let* α1 : ltac:(refine (ref (array (ref str)))) := borrow α0 in
          let* α2 : ltac:(refine (ref (slice (ref str)))) :=
            pointer_coercion "Unsize" α1 in
          let* α3 : ltac:(refine (ref i32)) := borrow count in
          let* α4 : ltac:(refine core.fmt.rt.Argument) :=
            core.fmt.rt.Argument::["new_display"] α3 in
          let* α5 : ltac:(refine (array core.fmt.rt.Argument)) :=
            M.alloc [ α4 ] in
          let* α6 : ltac:(refine (ref (array core.fmt.rt.Argument))) :=
            borrow α5 in
          let* α7 : ltac:(refine (ref (slice core.fmt.rt.Argument))) :=
            pointer_coercion "Unsize" α6 in
          let* α8 : ltac:(refine core.fmt.Arguments) :=
            core.fmt.Arguments::["new_v1"] α2 α7 in
          std.io.stdio._print α8 in
        M.alloc tt in
      M.alloc tt in
    let* _ : ltac:(refine unit) :=
      let* α0 : ltac:(refine (mut_ref type not implemented)) :=
        borrow_mut inc in
      let* α1 : ltac:(refine unit) := M.alloc tt in
      (core.ops.function.FnMut.call_mut
          (Self := type not implemented)
          (Trait := ltac:(refine _)))
        α0
        α1 in
    let* _ : ltac:(refine unit) :=
      let* α0 : ltac:(refine (mut_ref type not implemented)) :=
        borrow_mut inc in
      let* α1 : ltac:(refine unit) := M.alloc tt in
      (core.ops.function.FnMut.call_mut
          (Self := type not implemented)
          (Trait := ltac:(refine _)))
        α0
        α1 in
    let* _count_reborrowed : ltac:(refine (mut_ref i32)) := borrow_mut count in
    let* movable : ltac:(refine (alloc.boxed.Box i32 alloc.alloc.Global)) :=
      let* α0 : ltac:(refine i32) := M.alloc 3 in
      (alloc.boxed.Box i32 alloc.alloc.Global)::["new"] α0 in
    let consume :=
      let* _ : ltac:(refine unit) :=
        let* _ : ltac:(refine unit) :=
          let* α0 : ltac:(refine (array (ref str))) :=
            M.alloc [ mk_str "`movable`: "; mk_str "
" ] in
          let* α1 : ltac:(refine (ref (array (ref str)))) := borrow α0 in
          let* α2 : ltac:(refine (ref (slice (ref str)))) :=
            pointer_coercion "Unsize" α1 in
          let* α3 :
              ltac:(refine (ref (alloc.boxed.Box i32 alloc.alloc.Global))) :=
            borrow movable in
          let* α4 : ltac:(refine core.fmt.rt.Argument) :=
            core.fmt.rt.Argument::["new_debug"] α3 in
          let* α5 : ltac:(refine (array core.fmt.rt.Argument)) :=
            M.alloc [ α4 ] in
          let* α6 : ltac:(refine (ref (array core.fmt.rt.Argument))) :=
            borrow α5 in
          let* α7 : ltac:(refine (ref (slice core.fmt.rt.Argument))) :=
            pointer_coercion "Unsize" α6 in
          let* α8 : ltac:(refine core.fmt.Arguments) :=
            core.fmt.Arguments::["new_v1"] α2 α7 in
          std.io.stdio._print α8 in
        M.alloc tt in
      let* _ : ltac:(refine unit) := core.mem.drop movable in
      M.alloc tt in
    let* _ : ltac:(refine unit) :=
      let* α0 : ltac:(refine unit) := M.alloc tt in
      (core.ops.function.FnOnce.call_once
          (Self := type not implemented)
          (Trait := ltac:(refine _)))
        consume
        α0 in
    M.alloc tt).
