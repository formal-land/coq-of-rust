(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main `{ℋ : State.Trait} : M unit :=
  M.function_body
    (let* vec1 : ltac:(refine (alloc.vec.Vec i32 alloc.alloc.Global)) :=
      let* α0 : ltac:(refine i32) := M.alloc 1 in
      let* α1 : ltac:(refine i32) := M.alloc 2 in
      let* α2 : ltac:(refine i32) := M.alloc 3 in
      let* α3 : ltac:(refine (array i32)) := M.alloc [ α0; α1; α2 ] in
      let* α4 :
          ltac:(refine (alloc.boxed.Box (array i32) alloc.alloc.Global)) :=
        (alloc.boxed.Box _ alloc.boxed.Box.Default.A)::["new"] α3 in
      let* α5 :
          ltac:(refine (alloc.boxed.Box (slice i32) alloc.alloc.Global)) :=
        pointer_coercion "Unsize" α4 in
      (slice i32)::["into_vec"] α5 in
    let* vec2 : ltac:(refine (alloc.vec.Vec i32 alloc.alloc.Global)) :=
      let* α0 : ltac:(refine i32) := M.alloc 4 in
      let* α1 : ltac:(refine i32) := M.alloc 5 in
      let* α2 : ltac:(refine i32) := M.alloc 6 in
      let* α3 : ltac:(refine (array i32)) := M.alloc [ α0; α1; α2 ] in
      let* α4 :
          ltac:(refine (alloc.boxed.Box (array i32) alloc.alloc.Global)) :=
        (alloc.boxed.Box _ alloc.boxed.Box.Default.A)::["new"] α3 in
      let* α5 :
          ltac:(refine (alloc.boxed.Box (slice i32) alloc.alloc.Global)) :=
        pointer_coercion "Unsize" α4 in
      (slice i32)::["into_vec"] α5 in
    let* iter : ltac:(refine (core.slice.iter.Iter i32)) :=
      let* α0 : ltac:(refine (ref (alloc.vec.Vec i32 alloc.alloc.Global))) :=
        borrow vec1 in
      let* α1 : ltac:(refine (ref (slice i32))) :=
        (core.ops.deref.Deref.deref
            (Self := alloc.vec.Vec i32 alloc.alloc.Global)
            (Trait := ltac:(refine _)))
          α0 in
      let* α2 : ltac:(refine (slice i32)) := deref α1 in
      let* α3 : ltac:(refine (ref (slice i32))) := borrow α2 in
      (slice i32)::["iter"] α3 in
    let* into_iter :
        ltac:(refine (alloc.vec.into_iter.IntoIter i32 alloc.alloc.Global)) :=
      (core.iter.traits.collect.IntoIterator.into_iter
          (Self := alloc.vec.Vec i32 alloc.alloc.Global)
          (Trait := ltac:(refine _)))
        vec2 in
    let* _ : ltac:(refine unit) :=
      let* _ : ltac:(refine unit) :=
        let* α0 : ltac:(refine (array (ref str))) :=
          M.alloc [ mk_str "Find 2 in vec1: "; mk_str "
" ] in
        let* α1 : ltac:(refine (ref (array (ref str)))) := borrow α0 in
        let* α2 : ltac:(refine (ref (slice (ref str)))) :=
          pointer_coercion "Unsize" α1 in
        let* α3 : ltac:(refine (mut_ref (core.slice.iter.Iter i32))) :=
          borrow_mut iter in
        let* α4 : ltac:(refine (core.option.Option (ref i32))) :=
          (core.iter.traits.iterator.Iterator.find
              (Self := core.slice.iter.Iter i32)
              (Trait := ltac:(refine _)))
            α3
            (let* α0 : ltac:(refine i32) := M.alloc 2 in
            BinOp.eq x α0) in
        let* α5 : ltac:(refine (ref (core.option.Option (ref i32)))) :=
          borrow α4 in
        let* α6 : ltac:(refine core.fmt.rt.Argument) :=
          core.fmt.rt.Argument::["new_debug"] α5 in
        let* α7 : ltac:(refine (array core.fmt.rt.Argument)) :=
          M.alloc [ α6 ] in
        let* α8 : ltac:(refine (ref (array core.fmt.rt.Argument))) :=
          borrow α7 in
        let* α9 : ltac:(refine (ref (slice core.fmt.rt.Argument))) :=
          pointer_coercion "Unsize" α8 in
        let* α10 : ltac:(refine core.fmt.Arguments) :=
          core.fmt.Arguments::["new_v1"] α2 α9 in
        std.io.stdio._print α10 in
      M.alloc tt in
    let* _ : ltac:(refine unit) :=
      let* _ : ltac:(refine unit) :=
        let* α0 : ltac:(refine (array (ref str))) :=
          M.alloc [ mk_str "Find 2 in vec2: "; mk_str "
" ] in
        let* α1 : ltac:(refine (ref (array (ref str)))) := borrow α0 in
        let* α2 : ltac:(refine (ref (slice (ref str)))) :=
          pointer_coercion "Unsize" α1 in
        let* α3 :
            ltac:(refine
              (mut_ref
                (alloc.vec.into_iter.IntoIter i32 alloc.alloc.Global))) :=
          borrow_mut into_iter in
        let* α4 : ltac:(refine (core.option.Option i32)) :=
          (core.iter.traits.iterator.Iterator.find
              (Self := alloc.vec.into_iter.IntoIter i32 alloc.alloc.Global)
              (Trait := ltac:(refine _)))
            α3
            (let* α0 : ltac:(refine i32) := M.alloc 2 in
            BinOp.eq x α0) in
        let* α5 : ltac:(refine (ref (core.option.Option i32))) := borrow α4 in
        let* α6 : ltac:(refine core.fmt.rt.Argument) :=
          core.fmt.rt.Argument::["new_debug"] α5 in
        let* α7 : ltac:(refine (array core.fmt.rt.Argument)) :=
          M.alloc [ α6 ] in
        let* α8 : ltac:(refine (ref (array core.fmt.rt.Argument))) :=
          borrow α7 in
        let* α9 : ltac:(refine (ref (slice core.fmt.rt.Argument))) :=
          pointer_coercion "Unsize" α8 in
        let* α10 : ltac:(refine core.fmt.Arguments) :=
          core.fmt.Arguments::["new_v1"] α2 α9 in
        std.io.stdio._print α10 in
      M.alloc tt in
    let* array1 : ltac:(refine (array i32)) :=
      let* α0 : ltac:(refine i32) := M.alloc 1 in
      let* α1 : ltac:(refine i32) := M.alloc 2 in
      let* α2 : ltac:(refine i32) := M.alloc 3 in
      M.alloc [ α0; α1; α2 ] in
    let* array2 : ltac:(refine (array i32)) :=
      let* α0 : ltac:(refine i32) := M.alloc 4 in
      let* α1 : ltac:(refine i32) := M.alloc 5 in
      let* α2 : ltac:(refine i32) := M.alloc 6 in
      M.alloc [ α0; α1; α2 ] in
    let* _ : ltac:(refine unit) :=
      let* _ : ltac:(refine unit) :=
        let* α0 : ltac:(refine (array (ref str))) :=
          M.alloc [ mk_str "Find 2 in array1: "; mk_str "
" ] in
        let* α1 : ltac:(refine (ref (array (ref str)))) := borrow α0 in
        let* α2 : ltac:(refine (ref (slice (ref str)))) :=
          pointer_coercion "Unsize" α1 in
        let* α3 : ltac:(refine (ref (array i32))) := borrow array1 in
        let* α4 : ltac:(refine (ref (slice i32))) :=
          pointer_coercion "Unsize" α3 in
        let* α5 : ltac:(refine (core.slice.iter.Iter i32)) :=
          (slice i32)::["iter"] α4 in
        let* α6 : ltac:(refine (mut_ref (core.slice.iter.Iter i32))) :=
          borrow_mut α5 in
        let* α7 : ltac:(refine (core.option.Option (ref i32))) :=
          (core.iter.traits.iterator.Iterator.find
              (Self := core.slice.iter.Iter i32)
              (Trait := ltac:(refine _)))
            α6
            (let* α0 : ltac:(refine i32) := M.alloc 2 in
            BinOp.eq x α0) in
        let* α8 : ltac:(refine (ref (core.option.Option (ref i32)))) :=
          borrow α7 in
        let* α9 : ltac:(refine core.fmt.rt.Argument) :=
          core.fmt.rt.Argument::["new_debug"] α8 in
        let* α10 : ltac:(refine (array core.fmt.rt.Argument)) :=
          M.alloc [ α9 ] in
        let* α11 : ltac:(refine (ref (array core.fmt.rt.Argument))) :=
          borrow α10 in
        let* α12 : ltac:(refine (ref (slice core.fmt.rt.Argument))) :=
          pointer_coercion "Unsize" α11 in
        let* α13 : ltac:(refine core.fmt.Arguments) :=
          core.fmt.Arguments::["new_v1"] α2 α12 in
        std.io.stdio._print α13 in
      M.alloc tt in
    let* _ : ltac:(refine unit) :=
      let* _ : ltac:(refine unit) :=
        let* α0 : ltac:(refine (array (ref str))) :=
          M.alloc [ mk_str "Find 2 in array2: "; mk_str "
" ] in
        let* α1 : ltac:(refine (ref (array (ref str)))) := borrow α0 in
        let* α2 : ltac:(refine (ref (slice (ref str)))) :=
          pointer_coercion "Unsize" α1 in
        let* α3 : ltac:(refine (ref (array i32))) := borrow array2 in
        let* α4 : ltac:(refine (core.slice.iter.Iter i32)) :=
          (core.iter.traits.collect.IntoIterator.into_iter
              (Self := ref (array i32))
              (Trait := ltac:(refine _)))
            α3 in
        let* α5 : ltac:(refine (mut_ref (core.slice.iter.Iter i32))) :=
          borrow_mut α4 in
        let* α6 : ltac:(refine (core.option.Option (ref i32))) :=
          (core.iter.traits.iterator.Iterator.find
              (Self := core.slice.iter.Iter i32)
              (Trait := ltac:(refine _)))
            α5
            (let* α0 : ltac:(refine i32) := deref x in
            let* α1 : ltac:(refine i32) := M.alloc 2 in
            BinOp.eq α0 α1) in
        let* α7 : ltac:(refine (ref (core.option.Option (ref i32)))) :=
          borrow α6 in
        let* α8 : ltac:(refine core.fmt.rt.Argument) :=
          core.fmt.rt.Argument::["new_debug"] α7 in
        let* α9 : ltac:(refine (array core.fmt.rt.Argument)) :=
          M.alloc [ α8 ] in
        let* α10 : ltac:(refine (ref (array core.fmt.rt.Argument))) :=
          borrow α9 in
        let* α11 : ltac:(refine (ref (slice core.fmt.rt.Argument))) :=
          pointer_coercion "Unsize" α10 in
        let* α12 : ltac:(refine core.fmt.Arguments) :=
          core.fmt.Arguments::["new_v1"] α2 α11 in
        std.io.stdio._print α12 in
      M.alloc tt in
    M.alloc tt).
