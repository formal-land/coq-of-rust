(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module SomeType.
  Record t : Set := { _ : u32;}.
  
  Global Instance Get_0 : Notation.Dot 0 := {
    Notation.dot '(Build_t x0) := x0;
  }.
End SomeType.
Definition SomeType := SomeType.t.

Module Impl_functions_order_SomeType.
  Definition Self := functions_order.SomeType.
  
  Definition meth1 `{H : State.Trait} (self : Self) : M (H := H) unit :=
    let* _ := self.["meth2"] in
    Pure tt.
  
  Global Instance Method_meth1 `{H : State.Trait} : Notation.Dot "meth1" := {
    Notation.dot := meth1;
  }.
  
  Definition meth2 `{H : State.Trait} (self : Self) : M (H := H) unit :=
    Pure tt.
  
  Global Instance Method_meth2 `{H : State.Trait} : Notation.Dot "meth2" := {
    Notation.dot := meth2;
  }.
End Impl_functions_order_SomeType.

Module inner_mod.
  Definition bar `{H : State.Trait} (_ : unit) : M (H := H) unit :=
    let* _ := functions_order.inner_mod.tar tt in
    Pure tt.
  
  Definition tar `{H : State.Trait} (_ : unit) : M (H := H) unit := Pure tt.
End inner_mod.

Definition bar `{H : State.Trait} (_ : unit) : M (H := H) unit :=
  let* _ := functions_order.inner_mod.tar tt in
  Pure tt.

Definition tar `{H : State.Trait} (_ : unit) : M (H := H) unit := Pure tt.

(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main `{H : State.Trait} (_ : unit) : M (H := H) unit :=
  let* _ := functions_order.foo tt in
  let* _ := functions_order.inner_mod.bar tt in
  let* _ := (functions_order.SomeType.Build_t 0).["meth1"] in
  Pure tt.

Definition foo `{H : State.Trait} (_ : unit) : M (H := H) unit := Pure tt.
