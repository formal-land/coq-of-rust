(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Definition is_odd `{ℋ : State.Trait} (n : u32) : M bool :=
  M.function_body
    (let* α0 : ltac:(refine u32) := M.alloc 2 in
    let* α1 : ltac:(refine u32) := BinOp.rem n α0 in
    let* α2 : ltac:(refine u32) := M.alloc 1 in
    BinOp.eq α1 α2).

(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main `{ℋ : State.Trait} : M unit :=
  M.function_body
    (let* _ : ltac:(refine unit) :=
      let* _ : ltac:(refine unit) :=
        let* α0 : ltac:(refine (array (ref str))) :=
          M.alloc
            [ mk_str "Find the sum of all the squared odd numbers under 1000
"
            ] in
        let* α1 : ltac:(refine (ref (array (ref str)))) := borrow α0 in
        let* α2 : ltac:(refine (ref (slice (ref str)))) :=
          pointer_coercion "Unsize" α1 in
        let* α3 : ltac:(refine core.fmt.Arguments) :=
          core.fmt.Arguments::["new_const"] α2 in
        std.io.stdio._print α3 in
      M.alloc tt in
    let* upper : ltac:(refine u32) := M.alloc 1000 in
    let* acc : ltac:(refine u32) := M.alloc 0 in
    let* _ : ltac:(refine unit) :=
      let* α0 : ltac:(refine u32) := M.alloc 0 in
      let* α1 : ltac:(refine (core.ops.range.RangeFrom u32)) :=
        M.alloc {| core.ops.range.RangeFrom.start := α0; |} in
      let* α2 : ltac:(refine (core.ops.range.RangeFrom u32)) :=
        (core.iter.traits.collect.IntoIterator.into_iter
            (Self := core.ops.range.RangeFrom u32)
            (Trait := ltac:(refine _)))
          α1 in
      let* α3 := M.read α2 in
      let* α4 : ltac:(refine unit) :=
        match α3 with
        | iter =>
          loop
            (let* _ : ltac:(refine unit) :=
              let* α0 :
                  ltac:(refine (mut_ref (core.ops.range.RangeFrom u32))) :=
                borrow_mut iter in
              let* α1 : ltac:(refine (core.option.Option u32)) :=
                (core.iter.traits.iterator.Iterator.next
                    (Self := core.ops.range.RangeFrom u32)
                    (Trait := ltac:(refine _)))
                  α0 in
              let* α2 := M.read α1 in
              match α2 with
              | core.option.Option.None  =>
                let* α0 : ltac:(refine never) := Break in
                never_to_any α0
              | core.option.Option.Some n =>
                let* n_squared : ltac:(refine u32) := BinOp.mul n n in
                let* α0 : ltac:(refine bool) := BinOp.ge n_squared upper in
                let* α1 : ltac:(refine bool) := use α0 in
                if (α1 : bool) then
                  let* _ : ltac:(refine never) := Break in
                  let* α0 : ltac:(refine unit) := M.alloc tt in
                  never_to_any α0
                else
                  let* α0 : ltac:(refine bool) :=
                    higher_order_functions.is_odd n_squared in
                  let* α1 : ltac:(refine bool) := use α0 in
                  if (α1 : bool) then
                    let* _ : ltac:(refine unit) :=
                      assign_op add acc n_squared in
                    M.alloc tt
                  else
                    M.alloc tt
              end in
            M.alloc tt)
        end in
      use α4 in
    let* _ : ltac:(refine unit) :=
      let* _ : ltac:(refine unit) :=
        let* α0 : ltac:(refine (array (ref str))) :=
          M.alloc [ mk_str "imperative style: "; mk_str "
" ] in
        let* α1 : ltac:(refine (ref (array (ref str)))) := borrow α0 in
        let* α2 : ltac:(refine (ref (slice (ref str)))) :=
          pointer_coercion "Unsize" α1 in
        let* α3 : ltac:(refine (ref u32)) := borrow acc in
        let* α4 : ltac:(refine core.fmt.rt.Argument) :=
          core.fmt.rt.Argument::["new_display"] α3 in
        let* α5 : ltac:(refine (array core.fmt.rt.Argument)) :=
          M.alloc [ α4 ] in
        let* α6 : ltac:(refine (ref (array core.fmt.rt.Argument))) :=
          borrow α5 in
        let* α7 : ltac:(refine (ref (slice core.fmt.rt.Argument))) :=
          pointer_coercion "Unsize" α6 in
        let* α8 : ltac:(refine core.fmt.Arguments) :=
          core.fmt.Arguments::["new_v1"] α2 α7 in
        std.io.stdio._print α8 in
      M.alloc tt in
    let* sum_of_squared_odd_numbers : ltac:(refine u32) :=
      let* α0 : ltac:(refine u32) := M.alloc 0 in
      let* α1 : ltac:(refine (core.ops.range.RangeFrom u32)) :=
        M.alloc {| core.ops.range.RangeFrom.start := α0; |} in
      let* α2 :
          ltac:(refine
            (core.iter.adapters.map.Map
              (core.ops.range.RangeFrom u32)
              type not implemented)) :=
        (core.iter.traits.iterator.Iterator.map
            (Self := core.ops.range.RangeFrom u32)
            (Trait := ltac:(refine _)))
          α1
          (BinOp.mul n n) in
      let* α3 :
          ltac:(refine
            (core.iter.adapters.take_while.TakeWhile
              (core.iter.adapters.map.Map
                (core.ops.range.RangeFrom u32)
                type not implemented)
              type not implemented)) :=
        (core.iter.traits.iterator.Iterator.take_while
            (Self :=
              core.iter.adapters.map.Map
                (core.ops.range.RangeFrom u32)
                type not implemented)
            (Trait := ltac:(refine _)))
          α2
          (BinOp.lt n_squared upper) in
      let* α4 :
          ltac:(refine
            (core.iter.adapters.filter.Filter
              (core.iter.adapters.take_while.TakeWhile
                (core.iter.adapters.map.Map
                  (core.ops.range.RangeFrom u32)
                  type not implemented)
                type not implemented)
              type not implemented)) :=
        (core.iter.traits.iterator.Iterator.filter
            (Self :=
              core.iter.adapters.take_while.TakeWhile
                (core.iter.adapters.map.Map
                  (core.ops.range.RangeFrom u32)
                  type not implemented)
                type not implemented)
            (Trait := ltac:(refine _)))
          α3
          (higher_order_functions.is_odd n_squared) in
      (core.iter.traits.iterator.Iterator.sum
          (Self :=
            core.iter.adapters.filter.Filter
              (core.iter.adapters.take_while.TakeWhile
                (core.iter.adapters.map.Map
                  (core.ops.range.RangeFrom u32)
                  type not implemented)
                type not implemented)
              type not implemented)
          (Trait := ltac:(refine _)))
        α4 in
    let* _ : ltac:(refine unit) :=
      let* _ : ltac:(refine unit) :=
        let* α0 : ltac:(refine (array (ref str))) :=
          M.alloc [ mk_str "functional style: "; mk_str "
" ] in
        let* α1 : ltac:(refine (ref (array (ref str)))) := borrow α0 in
        let* α2 : ltac:(refine (ref (slice (ref str)))) :=
          pointer_coercion "Unsize" α1 in
        let* α3 : ltac:(refine (ref u32)) :=
          borrow sum_of_squared_odd_numbers in
        let* α4 : ltac:(refine core.fmt.rt.Argument) :=
          core.fmt.rt.Argument::["new_display"] α3 in
        let* α5 : ltac:(refine (array core.fmt.rt.Argument)) :=
          M.alloc [ α4 ] in
        let* α6 : ltac:(refine (ref (array core.fmt.rt.Argument))) :=
          borrow α5 in
        let* α7 : ltac:(refine (ref (slice core.fmt.rt.Argument))) :=
          pointer_coercion "Unsize" α6 in
        let* α8 : ltac:(refine core.fmt.Arguments) :=
          core.fmt.Arguments::["new_v1"] α2 α7 in
        std.io.stdio._print α8 in
      M.alloc tt in
    M.alloc tt).
