(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module  HasArea.
Section HasArea.
  Context `{ℋ : State.Trait}.
  
  Class Trait (Self : Set) : Type := {
    area : (ref Self) -> M f64;
  }.
  
End HasArea.
End HasArea.

Module  Impl_generics_bounds_HasArea_for_generics_bounds_Rectangle.
Section Impl_generics_bounds_HasArea_for_generics_bounds_Rectangle.
  Context `{ℋ : State.Trait}.
  
  Definition Self : Set := generics_bounds.Rectangle.
  
  Definition area (self : ref Self) : M f64 :=
    M.function_body
      (let* α0 : ltac:(refine generics_bounds.Rectangle) := deref self in
      let* α1 : ltac:(refine f64) := α0.["length"] in
      let* α2 : ltac:(refine generics_bounds.Rectangle) := deref self in
      let* α3 : ltac:(refine f64) := α2.["height"] in
      BinOp.mul α1 α3).
  
  Global Instance AssociatedFunction_area :
    Notation.DoubleColon Self "area" := {
    Notation.double_colon := area;
  }.
  
  Global Instance ℐ : generics_bounds.HasArea.Trait Self := {
    generics_bounds.HasArea.area := area;
  }.
End Impl_generics_bounds_HasArea_for_generics_bounds_Rectangle.
End Impl_generics_bounds_HasArea_for_generics_bounds_Rectangle.

Module  Rectangle.
Section Rectangle.
  Context `{ℋ : State.Trait}.
  
  Record t : Set := {
    length : f64;
    height : f64;
  }.
  
  Global Instance Get_length : Notation.Dot "length" := {
    Notation.dot x := let* x := M.read x in M.pure x.(length) : M _;
  }.
  Global Instance Get_AF_length : Notation.DoubleColon t "length" := {
    Notation.double_colon x := let* x := M.read x in M.pure x.(length) : M _;
  }.
  Global Instance Get_height : Notation.Dot "height" := {
    Notation.dot x := let* x := M.read x in M.pure x.(height) : M _;
  }.
  Global Instance Get_AF_height : Notation.DoubleColon t "height" := {
    Notation.double_colon x := let* x := M.read x in M.pure x.(height) : M _;
  }.
End Rectangle.
End Rectangle.
Definition Rectangle `{ℋ : State.Trait} : Set := M.Val Rectangle.t.

Module  Impl_core_fmt_Debug_for_generics_bounds_Rectangle.
Section Impl_core_fmt_Debug_for_generics_bounds_Rectangle.
  Context `{ℋ : State.Trait}.
  
  Definition Self : Set := generics_bounds.Rectangle.
  
  Definition fmt
      (self : ref Self)
      (f : mut_ref core.fmt.Formatter)
      : M ltac:(core.fmt.Result) :=
    M.function_body
      (let* α0 : ltac:(refine core.fmt.Formatter) := deref f in
      let* α1 : ltac:(refine (mut_ref core.fmt.Formatter)) := borrow_mut α0 in
      let* α2 : ltac:(refine str) := deref (mk_str "Rectangle") in
      let* α3 : ltac:(refine (ref str)) := borrow α2 in
      let* α4 : ltac:(refine str) := deref (mk_str "length") in
      let* α5 : ltac:(refine (ref str)) := borrow α4 in
      let* α6 : ltac:(refine generics_bounds.Rectangle) := deref self in
      let* α7 : ltac:(refine f64) := α6.["length"] in
      let* α8 : ltac:(refine (ref f64)) := borrow α7 in
      let* α9 : ltac:(refine (ref type not implemented)) :=
        pointer_coercion "Unsize" α8 in
      let* α10 : ltac:(refine str) := deref (mk_str "height") in
      let* α11 : ltac:(refine (ref str)) := borrow α10 in
      let* α12 : ltac:(refine generics_bounds.Rectangle) := deref self in
      let* α13 : ltac:(refine f64) := α12.["height"] in
      let* α14 : ltac:(refine (ref f64)) := borrow α13 in
      let* α15 : ltac:(refine (ref (ref f64))) := borrow α14 in
      let* α16 : ltac:(refine (ref type not implemented)) :=
        pointer_coercion "Unsize" α15 in
      core.fmt.Formatter::["debug_struct_field2_finish"] α1 α3 α5 α9 α11 α16).
  
  Global Instance AssociatedFunction_fmt : Notation.DoubleColon Self "fmt" := {
    Notation.double_colon := fmt;
  }.
  
  Global Instance ℐ : core.fmt.Debug.Trait Self := {
    core.fmt.Debug.fmt := fmt;
  }.
End Impl_core_fmt_Debug_for_generics_bounds_Rectangle.
End Impl_core_fmt_Debug_for_generics_bounds_Rectangle.

(* #[allow(dead_code)] - struct was ignored by the compiler *)
Module  Triangle.
Section Triangle.
  Context `{ℋ : State.Trait}.
  
  Record t : Set := {
    length : f64;
    height : f64;
  }.
  
  Global Instance Get_length : Notation.Dot "length" := {
    Notation.dot x := let* x := M.read x in M.pure x.(length) : M _;
  }.
  Global Instance Get_AF_length : Notation.DoubleColon t "length" := {
    Notation.double_colon x := let* x := M.read x in M.pure x.(length) : M _;
  }.
  Global Instance Get_height : Notation.Dot "height" := {
    Notation.dot x := let* x := M.read x in M.pure x.(height) : M _;
  }.
  Global Instance Get_AF_height : Notation.DoubleColon t "height" := {
    Notation.double_colon x := let* x := M.read x in M.pure x.(height) : M _;
  }.
End Triangle.
End Triangle.
Definition Triangle `{ℋ : State.Trait} : Set := M.Val Triangle.t.

Definition print_debug
    `{ℋ : State.Trait}
    {T : Set}
    {ℋ_0 : core.fmt.Debug.Trait T}
    (t : ref T)
    : M unit :=
  M.function_body
    (let* _ : ltac:(refine unit) :=
      let* _ : ltac:(refine unit) :=
        let* α0 : ltac:(refine (array (ref str))) :=
          M.alloc [ mk_str ""; mk_str "
" ] in
        let* α1 : ltac:(refine (ref (array (ref str)))) := borrow α0 in
        let* α2 : ltac:(refine (ref (slice (ref str)))) :=
          pointer_coercion "Unsize" α1 in
        let* α3 : ltac:(refine (ref (ref T))) := borrow t in
        let* α4 : ltac:(refine core.fmt.rt.Argument) :=
          core.fmt.rt.Argument::["new_debug"] α3 in
        let* α5 : ltac:(refine (array core.fmt.rt.Argument)) :=
          M.alloc [ α4 ] in
        let* α6 : ltac:(refine (ref (array core.fmt.rt.Argument))) :=
          borrow α5 in
        let* α7 : ltac:(refine (ref (slice core.fmt.rt.Argument))) :=
          pointer_coercion "Unsize" α6 in
        let* α8 : ltac:(refine core.fmt.Arguments) :=
          core.fmt.Arguments::["new_v1"] α2 α7 in
        std.io.stdio._print α8 in
      M.alloc tt in
    M.alloc tt).

Definition area
    `{ℋ : State.Trait}
    {T : Set}
    {ℋ_0 : generics_bounds.HasArea.Trait T}
    (t : ref T)
    : M f64 :=
  M.function_body
    (let* α0 : ltac:(refine T) := deref t in
    let* α1 : ltac:(refine (ref T)) := borrow α0 in
    (generics_bounds.HasArea.area (Self := T) (Trait := ltac:(refine _))) α1).

(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main `{ℋ : State.Trait} : M unit :=
  M.function_body
    (let* rectangle : ltac:(refine generics_bounds.Rectangle) :=
      let* α0 : ltac:(refine f64) := M.alloc 3 (* 3.0 *) in
      let* α1 : ltac:(refine f64) := M.alloc 4 (* 4.0 *) in
      M.alloc
        {|
          generics_bounds.Rectangle.length := α0;
          generics_bounds.Rectangle.height := α1;
        |} in
    let* _triangle : ltac:(refine generics_bounds.Triangle) :=
      let* α0 : ltac:(refine f64) := M.alloc 3 (* 3.0 *) in
      let* α1 : ltac:(refine f64) := M.alloc 4 (* 4.0 *) in
      M.alloc
        {|
          generics_bounds.Triangle.length := α0;
          generics_bounds.Triangle.height := α1;
        |} in
    let* _ : ltac:(refine unit) :=
      let* α0 : ltac:(refine (ref generics_bounds.Rectangle)) :=
        borrow rectangle in
      generics_bounds.print_debug α0 in
    let* _ : ltac:(refine unit) :=
      let* _ : ltac:(refine unit) :=
        let* α0 : ltac:(refine (array (ref str))) :=
          M.alloc [ mk_str "Area: "; mk_str "
" ] in
        let* α1 : ltac:(refine (ref (array (ref str)))) := borrow α0 in
        let* α2 : ltac:(refine (ref (slice (ref str)))) :=
          pointer_coercion "Unsize" α1 in
        let* α3 : ltac:(refine (ref generics_bounds.Rectangle)) :=
          borrow rectangle in
        let* α4 : ltac:(refine f64) :=
          (generics_bounds.HasArea.area
              (Self := generics_bounds.Rectangle)
              (Trait := ltac:(refine _)))
            α3 in
        let* α5 : ltac:(refine (ref f64)) := borrow α4 in
        let* α6 : ltac:(refine core.fmt.rt.Argument) :=
          core.fmt.rt.Argument::["new_display"] α5 in
        let* α7 : ltac:(refine (array core.fmt.rt.Argument)) :=
          M.alloc [ α6 ] in
        let* α8 : ltac:(refine (ref (array core.fmt.rt.Argument))) :=
          borrow α7 in
        let* α9 : ltac:(refine (ref (slice core.fmt.rt.Argument))) :=
          pointer_coercion "Unsize" α8 in
        let* α10 : ltac:(refine core.fmt.Arguments) :=
          core.fmt.Arguments::["new_v1"] α2 α9 in
        std.io.stdio._print α10 in
      M.alloc tt in
    M.alloc tt).
