(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module  Cardinal.
Section Cardinal.
  Context `{ℋ : State.Trait}.
  
  Inductive t : Set := Build.
End Cardinal.
End Cardinal.
Definition Cardinal `{ℋ : State.Trait} := M.Val Cardinal.t.

Module  BlueJay.
Section BlueJay.
  Context `{ℋ : State.Trait}.
  
  Inductive t : Set := Build.
End BlueJay.
End BlueJay.
Definition BlueJay `{ℋ : State.Trait} := M.Val BlueJay.t.

Module  Turkey.
Section Turkey.
  Context `{ℋ : State.Trait}.
  
  Inductive t : Set := Build.
End Turkey.
End Turkey.
Definition Turkey `{ℋ : State.Trait} := M.Val Turkey.t.

Module  Red.
Section Red.
  Context `{ℋ : State.Trait}.
  
  Unset Primitive Projections.
  Class Trait (Self : Set) : Type := {
  }.
  Global Set Primitive Projections.
End Red.
End Red.

Module  Blue.
Section Blue.
  Context `{ℋ : State.Trait}.
  
  Unset Primitive Projections.
  Class Trait (Self : Set) : Type := {
  }.
  Global Set Primitive Projections.
End Blue.
End Blue.

Module  Impl_generics_bounds_test_case_empty_bounds_Red_for_generics_bounds_test_case_empty_bounds_Cardinal.
Section Impl_generics_bounds_test_case_empty_bounds_Red_for_generics_bounds_test_case_empty_bounds_Cardinal.
  Context `{ℋ : State.Trait}.
  
  Definition Self : Set := generics_bounds_test_case_empty_bounds.Cardinal.
  
  Global Instance ℐ : generics_bounds_test_case_empty_bounds.Red.Trait Self := {
  }.
End Impl_generics_bounds_test_case_empty_bounds_Red_for_generics_bounds_test_case_empty_bounds_Cardinal.
End Impl_generics_bounds_test_case_empty_bounds_Red_for_generics_bounds_test_case_empty_bounds_Cardinal.

Module  Impl_generics_bounds_test_case_empty_bounds_Blue_for_generics_bounds_test_case_empty_bounds_BlueJay.
Section Impl_generics_bounds_test_case_empty_bounds_Blue_for_generics_bounds_test_case_empty_bounds_BlueJay.
  Context `{ℋ : State.Trait}.
  
  Definition Self : Set := generics_bounds_test_case_empty_bounds.BlueJay.
  
  Global Instance ℐ :
    generics_bounds_test_case_empty_bounds.Blue.Trait Self := {
  }.
End Impl_generics_bounds_test_case_empty_bounds_Blue_for_generics_bounds_test_case_empty_bounds_BlueJay.
End Impl_generics_bounds_test_case_empty_bounds_Blue_for_generics_bounds_test_case_empty_bounds_BlueJay.

Definition red
    `{ℋ : State.Trait}
    {T : Set}
    {ℋ_0 : generics_bounds_test_case_empty_bounds.Red.Trait T}
    (arg : ref T)
    : M (ref str) :=
  M.function_body (M.pure (mk_str "red")).

Definition blue
    `{ℋ : State.Trait}
    {T : Set}
    {ℋ_0 : generics_bounds_test_case_empty_bounds.Blue.Trait T}
    (arg : ref T)
    : M (ref str) :=
  M.function_body (M.pure (mk_str "blue")).

(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main `{ℋ : State.Trait} : M unit :=
  M.function_body
    (let* cardinal :
        ltac:(refine generics_bounds_test_case_empty_bounds.Cardinal) :=
      M.alloc generics_bounds_test_case_empty_bounds.Cardinal.Build_t in
    let* blue_jay :
        ltac:(refine generics_bounds_test_case_empty_bounds.BlueJay) :=
      M.alloc generics_bounds_test_case_empty_bounds.BlueJay.Build_t in
    let* _turkey :
        ltac:(refine generics_bounds_test_case_empty_bounds.Turkey) :=
      M.alloc generics_bounds_test_case_empty_bounds.Turkey.Build_t in
    let* _ : ltac:(refine unit) :=
      let* _ : ltac:(refine unit) :=
        let* α0 : ltac:(refine (array (ref str))) :=
          M.alloc [ mk_str "A cardinal is "; mk_str "
" ] in
        let* α1 : ltac:(refine (ref (array (ref str)))) := borrow α0 in
        let* α2 : ltac:(refine (ref (slice (ref str)))) :=
          pointer_coercion "Unsize" α1 in
        let* α3 :
            ltac:(refine
              (ref generics_bounds_test_case_empty_bounds.Cardinal)) :=
          borrow cardinal in
        let* α4 : ltac:(refine (ref str)) :=
          generics_bounds_test_case_empty_bounds.red α3 in
        let* α5 : ltac:(refine (ref (ref str))) := borrow α4 in
        let* α6 : ltac:(refine core.fmt.rt.Argument) :=
          core.fmt.rt.Argument::["new_display"] α5 in
        let* α7 : ltac:(refine (array core.fmt.rt.Argument)) :=
          M.alloc [ α6 ] in
        let* α8 : ltac:(refine (ref (array core.fmt.rt.Argument))) :=
          borrow α7 in
        let* α9 : ltac:(refine (ref (slice core.fmt.rt.Argument))) :=
          pointer_coercion "Unsize" α8 in
        let* α10 : ltac:(refine core.fmt.Arguments) :=
          core.fmt.Arguments::["new_v1"] α2 α9 in
        std.io.stdio._print α10 in
      M.alloc tt in
    let* _ : ltac:(refine unit) :=
      let* _ : ltac:(refine unit) :=
        let* α0 : ltac:(refine (array (ref str))) :=
          M.alloc [ mk_str "A blue jay is "; mk_str "
" ] in
        let* α1 : ltac:(refine (ref (array (ref str)))) := borrow α0 in
        let* α2 : ltac:(refine (ref (slice (ref str)))) :=
          pointer_coercion "Unsize" α1 in
        let* α3 :
            ltac:(refine
              (ref generics_bounds_test_case_empty_bounds.BlueJay)) :=
          borrow blue_jay in
        let* α4 : ltac:(refine (ref str)) :=
          generics_bounds_test_case_empty_bounds.blue α3 in
        let* α5 : ltac:(refine (ref (ref str))) := borrow α4 in
        let* α6 : ltac:(refine core.fmt.rt.Argument) :=
          core.fmt.rt.Argument::["new_display"] α5 in
        let* α7 : ltac:(refine (array core.fmt.rt.Argument)) :=
          M.alloc [ α6 ] in
        let* α8 : ltac:(refine (ref (array core.fmt.rt.Argument))) :=
          borrow α7 in
        let* α9 : ltac:(refine (ref (slice core.fmt.rt.Argument))) :=
          pointer_coercion "Unsize" α8 in
        let* α10 : ltac:(refine core.fmt.Arguments) :=
          core.fmt.Arguments::["new_v1"] α2 α9 in
        std.io.stdio._print α10 in
      M.alloc tt in
    M.alloc tt).
