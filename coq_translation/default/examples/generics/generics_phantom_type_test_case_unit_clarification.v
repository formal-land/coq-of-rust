(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module Inch.
  Inductive t `{ℋ : State.Trait} : Set :=
  .
End Inch.
Definition Inch `{ℋ : State.Trait} : Set := M.Val Inch.t.

Module  Impl_core_fmt_Debug_for_generics_phantom_type_test_case_unit_clarification_Inch.
Section Impl_core_fmt_Debug_for_generics_phantom_type_test_case_unit_clarification_Inch.
  Context `{ℋ : State.Trait}.
  
  Definition Self : Set :=
    generics_phantom_type_test_case_unit_clarification.Inch.
  
  Definition fmt
      (self : ref Self)
      (f : mut_ref core.fmt.Formatter)
      : M ltac:(core.fmt.Result) :=
    M.function_body
      (let* α0 : ltac:(refine never) := "unimplemented parent_kind" in
      never_to_any α0).
  
  Global Instance AssociatedFunction_fmt : Notation.DoubleColon Self "fmt" := {
    Notation.double_colon := fmt;
  }.
  
  Global Instance ℐ : core.fmt.Debug.Trait Self := {
    core.fmt.Debug.fmt := fmt;
  }.
End Impl_core_fmt_Debug_for_generics_phantom_type_test_case_unit_clarification_Inch.
End Impl_core_fmt_Debug_for_generics_phantom_type_test_case_unit_clarification_Inch.

Module  Impl_core_clone_Clone_for_generics_phantom_type_test_case_unit_clarification_Inch.
Section Impl_core_clone_Clone_for_generics_phantom_type_test_case_unit_clarification_Inch.
  Context `{ℋ : State.Trait}.
  
  Definition Self : Set :=
    generics_phantom_type_test_case_unit_clarification.Inch.
  
  Definition clone
      (self : ref Self)
      : M generics_phantom_type_test_case_unit_clarification.Inch :=
    M.function_body (deref self).
  
  Global Instance AssociatedFunction_clone :
    Notation.DoubleColon Self "clone" := {
    Notation.double_colon := clone;
  }.
  
  Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
    core.clone.Clone.clone := clone;
    core.clone.Clone.clone_from := Datatypes.None;
  }.
End Impl_core_clone_Clone_for_generics_phantom_type_test_case_unit_clarification_Inch.
End Impl_core_clone_Clone_for_generics_phantom_type_test_case_unit_clarification_Inch.

Module  Impl_core_marker_Copy_for_generics_phantom_type_test_case_unit_clarification_Inch.
Section Impl_core_marker_Copy_for_generics_phantom_type_test_case_unit_clarification_Inch.
  Context `{ℋ : State.Trait}.
  
  Definition Self : Set :=
    generics_phantom_type_test_case_unit_clarification.Inch.
  
  Global Instance ℐ : core.marker.Copy.Trait Self := {
  }.
End Impl_core_marker_Copy_for_generics_phantom_type_test_case_unit_clarification_Inch.
End Impl_core_marker_Copy_for_generics_phantom_type_test_case_unit_clarification_Inch.

Module Mm.
  Inductive t `{ℋ : State.Trait} : Set :=
  .
End Mm.
Definition Mm `{ℋ : State.Trait} : Set := M.Val Mm.t.

Module  Impl_core_fmt_Debug_for_generics_phantom_type_test_case_unit_clarification_Mm.
Section Impl_core_fmt_Debug_for_generics_phantom_type_test_case_unit_clarification_Mm.
  Context `{ℋ : State.Trait}.
  
  Definition Self : Set :=
    generics_phantom_type_test_case_unit_clarification.Mm.
  
  Definition fmt
      (self : ref Self)
      (f : mut_ref core.fmt.Formatter)
      : M ltac:(core.fmt.Result) :=
    M.function_body
      (let* α0 : ltac:(refine never) := "unimplemented parent_kind" in
      never_to_any α0).
  
  Global Instance AssociatedFunction_fmt : Notation.DoubleColon Self "fmt" := {
    Notation.double_colon := fmt;
  }.
  
  Global Instance ℐ : core.fmt.Debug.Trait Self := {
    core.fmt.Debug.fmt := fmt;
  }.
End Impl_core_fmt_Debug_for_generics_phantom_type_test_case_unit_clarification_Mm.
End Impl_core_fmt_Debug_for_generics_phantom_type_test_case_unit_clarification_Mm.

Module  Impl_core_clone_Clone_for_generics_phantom_type_test_case_unit_clarification_Mm.
Section Impl_core_clone_Clone_for_generics_phantom_type_test_case_unit_clarification_Mm.
  Context `{ℋ : State.Trait}.
  
  Definition Self : Set :=
    generics_phantom_type_test_case_unit_clarification.Mm.
  
  Definition clone
      (self : ref Self)
      : M generics_phantom_type_test_case_unit_clarification.Mm :=
    M.function_body (deref self).
  
  Global Instance AssociatedFunction_clone :
    Notation.DoubleColon Self "clone" := {
    Notation.double_colon := clone;
  }.
  
  Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
    core.clone.Clone.clone := clone;
    core.clone.Clone.clone_from := Datatypes.None;
  }.
End Impl_core_clone_Clone_for_generics_phantom_type_test_case_unit_clarification_Mm.
End Impl_core_clone_Clone_for_generics_phantom_type_test_case_unit_clarification_Mm.

Module  Impl_core_marker_Copy_for_generics_phantom_type_test_case_unit_clarification_Mm.
Section Impl_core_marker_Copy_for_generics_phantom_type_test_case_unit_clarification_Mm.
  Context `{ℋ : State.Trait}.
  
  Definition Self : Set :=
    generics_phantom_type_test_case_unit_clarification.Mm.
  
  Global Instance ℐ : core.marker.Copy.Trait Self := {
  }.
End Impl_core_marker_Copy_for_generics_phantom_type_test_case_unit_clarification_Mm.
End Impl_core_marker_Copy_for_generics_phantom_type_test_case_unit_clarification_Mm.

Module  Length.
Section Length.
  Context `{ℋ : State.Trait}.
  
  Context {Unit : Set}.
  
  Record t : Set := {
    x0 : f64;
    x1 : core.marker.PhantomData Unit;
  }.
  
  Global Instance Get_0 : Notation.Dot "0" := {
    Notation.dot x := let* x := M.read x in M.pure x.(x0) : M _;
  }.
  Global Instance Get_1 : Notation.Dot "1" := {
    Notation.dot x := let* x := M.read x in M.pure x.(x1) : M _;
  }.
End Length.
End Length.
Definition Length `{ℋ : State.Trait} (Unit : Set) : Set :=
  M.Val (Length.t (Unit := Unit)).

Module  Impl_core_fmt_Debug_for_generics_phantom_type_test_case_unit_clarification_Length_Unit.
Section Impl_core_fmt_Debug_for_generics_phantom_type_test_case_unit_clarification_Length_Unit.
  Context `{ℋ : State.Trait}.
  
  Context {Unit : Set}.
  
  Context {ℋ_0 : core.fmt.Debug.Trait Unit}.
  
  Definition Self : Set :=
    generics_phantom_type_test_case_unit_clarification.Length Unit.
  
  Definition fmt
      (self : ref Self)
      (f : mut_ref core.fmt.Formatter)
      : M ltac:(core.fmt.Result) :=
    M.function_body
      (let* α0 : ltac:(refine core.fmt.Formatter) := deref f in
      let* α1 : ltac:(refine (mut_ref core.fmt.Formatter)) := borrow_mut α0 in
      let* α2 : ltac:(refine str) := deref (mk_str "Length") in
      let* α3 : ltac:(refine (ref str)) := borrow α2 in
      let* α4 :
          ltac:(refine
            (generics_phantom_type_test_case_unit_clarification.Length Unit)) :=
        deref self in
      let* α5 : ltac:(refine f64) := α4.["0"] in
      let* α6 : ltac:(refine (ref f64)) := borrow α5 in
      let* α7 : ltac:(refine (ref type not implemented)) :=
        pointer_coercion "Unsize" α6 in
      let* α8 :
          ltac:(refine
            (generics_phantom_type_test_case_unit_clarification.Length Unit)) :=
        deref self in
      let* α9 : ltac:(refine (core.marker.PhantomData Unit)) := α8.["1"] in
      let* α10 : ltac:(refine (ref (core.marker.PhantomData Unit))) :=
        borrow α9 in
      let* α11 : ltac:(refine (ref (ref (core.marker.PhantomData Unit)))) :=
        borrow α10 in
      let* α12 : ltac:(refine (ref type not implemented)) :=
        pointer_coercion "Unsize" α11 in
      core.fmt.Formatter::["debug_tuple_field2_finish"] α1 α3 α7 α12).
  
  Global Instance AssociatedFunction_fmt : Notation.DoubleColon Self "fmt" := {
    Notation.double_colon := fmt;
  }.
  
  Global Instance ℐ : core.fmt.Debug.Trait Self := {
    core.fmt.Debug.fmt := fmt;
  }.
End Impl_core_fmt_Debug_for_generics_phantom_type_test_case_unit_clarification_Length_Unit.
End Impl_core_fmt_Debug_for_generics_phantom_type_test_case_unit_clarification_Length_Unit.

Module  Impl_core_clone_Clone_for_generics_phantom_type_test_case_unit_clarification_Length_Unit.
Section Impl_core_clone_Clone_for_generics_phantom_type_test_case_unit_clarification_Length_Unit.
  Context `{ℋ : State.Trait}.
  
  Context {Unit : Set}.
  
  Context {ℋ_0 : core.clone.Clone.Trait Unit}.
  
  Definition Self : Set :=
    generics_phantom_type_test_case_unit_clarification.Length Unit.
  
  Definition clone
      (self : ref Self)
      : M (generics_phantom_type_test_case_unit_clarification.Length Unit) :=
    M.function_body
      (let* α0 :
          ltac:(refine
            (generics_phantom_type_test_case_unit_clarification.Length Unit)) :=
        deref self in
      let* α1 : ltac:(refine f64) := α0.["0"] in
      let* α2 : ltac:(refine (ref f64)) := borrow α1 in
      let* α3 : ltac:(refine f64) :=
        (core.clone.Clone.clone (Self := f64) (Trait := ltac:(refine _))) α2 in
      let* α4 :
          ltac:(refine
            (generics_phantom_type_test_case_unit_clarification.Length Unit)) :=
        deref self in
      let* α5 : ltac:(refine (core.marker.PhantomData Unit)) := α4.["1"] in
      let* α6 : ltac:(refine (ref (core.marker.PhantomData Unit))) :=
        borrow α5 in
      let* α7 : ltac:(refine (core.marker.PhantomData Unit)) :=
        (core.clone.Clone.clone
            (Self := core.marker.PhantomData Unit)
            (Trait := ltac:(refine _)))
          α6 in
      M.alloc
        (generics_phantom_type_test_case_unit_clarification.Length.Build_t
          α3
          α7)).
  
  Global Instance AssociatedFunction_clone :
    Notation.DoubleColon Self "clone" := {
    Notation.double_colon := clone;
  }.
  
  Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
    core.clone.Clone.clone := clone;
    core.clone.Clone.clone_from := Datatypes.None;
  }.
End Impl_core_clone_Clone_for_generics_phantom_type_test_case_unit_clarification_Length_Unit.
End Impl_core_clone_Clone_for_generics_phantom_type_test_case_unit_clarification_Length_Unit.

Module  Impl_core_marker_Copy_for_generics_phantom_type_test_case_unit_clarification_Length_Unit.
Section Impl_core_marker_Copy_for_generics_phantom_type_test_case_unit_clarification_Length_Unit.
  Context `{ℋ : State.Trait}.
  
  Context {Unit : Set}.
  
  Context {ℋ_0 : core.marker.Copy.Trait Unit}.
  
  Definition Self : Set :=
    generics_phantom_type_test_case_unit_clarification.Length Unit.
  
  Global Instance ℐ : core.marker.Copy.Trait Self := {
  }.
End Impl_core_marker_Copy_for_generics_phantom_type_test_case_unit_clarification_Length_Unit.
End Impl_core_marker_Copy_for_generics_phantom_type_test_case_unit_clarification_Length_Unit.

Module  Impl_core_ops_arith_Add_for_generics_phantom_type_test_case_unit_clarification_Length_Unit.
Section Impl_core_ops_arith_Add_for_generics_phantom_type_test_case_unit_clarification_Length_Unit.
  Context `{ℋ : State.Trait}.
  
  Context {Unit : Set}.
  
  Definition Self : Set :=
    generics_phantom_type_test_case_unit_clarification.Length Unit.
  
  Definition Output : Set :=
    generics_phantom_type_test_case_unit_clarification.Length Unit.
  
  Definition add
      (self : Self)
      (rhs : generics_phantom_type_test_case_unit_clarification.Length Unit)
      : M (generics_phantom_type_test_case_unit_clarification.Length Unit) :=
    M.function_body
      (let* α0 : ltac:(refine f64) := self.["0"] in
      let* α1 : ltac:(refine f64) := rhs.["0"] in
      let* α2 : ltac:(refine f64) := BinOp.add α0 α1 in
      let* α3 : ltac:(refine (core.marker.PhantomData Unit)) :=
        M.alloc core.marker.PhantomData.Build_t in
      M.alloc
        (generics_phantom_type_test_case_unit_clarification.Length.Build_t
          α2
          α3)).
  
  Global Instance AssociatedFunction_add : Notation.DoubleColon Self "add" := {
    Notation.double_colon := add;
  }.
  
  Global Instance ℐ :
    core.ops.arith.Add.Trait Self
      (Rhs := core.ops.arith.Add.Default.Rhs Self) := {
    core.ops.arith.Add.Output := Output;
    core.ops.arith.Add.add := add;
  }.
End Impl_core_ops_arith_Add_for_generics_phantom_type_test_case_unit_clarification_Length_Unit.
End Impl_core_ops_arith_Add_for_generics_phantom_type_test_case_unit_clarification_Length_Unit.

(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main `{ℋ : State.Trait} : M unit :=
  M.function_body
    (let* one_foot :
        ltac:(refine
          (generics_phantom_type_test_case_unit_clarification.Length
            generics_phantom_type_test_case_unit_clarification.Inch)) :=
      let* α0 : ltac:(refine f64) := M.alloc 12 (* 12.0 *) in
      let* α1 :
          ltac:(refine
            (core.marker.PhantomData
              generics_phantom_type_test_case_unit_clarification.Inch)) :=
        M.alloc core.marker.PhantomData.Build_t in
      M.alloc
        (generics_phantom_type_test_case_unit_clarification.Length.Build_t
          α0
          α1) in
    let* one_meter :
        ltac:(refine
          (generics_phantom_type_test_case_unit_clarification.Length
            generics_phantom_type_test_case_unit_clarification.Mm)) :=
      let* α0 : ltac:(refine f64) := M.alloc 1000 (* 1000.0 *) in
      let* α1 :
          ltac:(refine
            (core.marker.PhantomData
              generics_phantom_type_test_case_unit_clarification.Mm)) :=
        M.alloc core.marker.PhantomData.Build_t in
      M.alloc
        (generics_phantom_type_test_case_unit_clarification.Length.Build_t
          α0
          α1) in
    let* two_feet :
        ltac:(refine
          (generics_phantom_type_test_case_unit_clarification.Length
            generics_phantom_type_test_case_unit_clarification.Inch)) :=
      (core.ops.arith.Add.add
          (Self :=
            generics_phantom_type_test_case_unit_clarification.Length
              generics_phantom_type_test_case_unit_clarification.Inch)
          (Trait := ltac:(refine _)))
        one_foot
        one_foot in
    let* two_meters :
        ltac:(refine
          (generics_phantom_type_test_case_unit_clarification.Length
            generics_phantom_type_test_case_unit_clarification.Mm)) :=
      (core.ops.arith.Add.add
          (Self :=
            generics_phantom_type_test_case_unit_clarification.Length
              generics_phantom_type_test_case_unit_clarification.Mm)
          (Trait := ltac:(refine _)))
        one_meter
        one_meter in
    let* _ : ltac:(refine unit) :=
      let* _ : ltac:(refine unit) :=
        let* α0 : ltac:(refine (array (ref str))) :=
          M.alloc [ mk_str "one foot + one_foot = "; mk_str " in
" ] in
        let* α1 : ltac:(refine (ref (array (ref str)))) := borrow α0 in
        let* α2 : ltac:(refine (ref (slice (ref str)))) :=
          pointer_coercion "Unsize" α1 in
        let* α3 : ltac:(refine f64) := two_feet.["0"] in
        let* α4 : ltac:(refine (ref f64)) := borrow α3 in
        let* α5 : ltac:(refine core.fmt.rt.Argument) :=
          core.fmt.rt.Argument::["new_debug"] α4 in
        let* α6 : ltac:(refine (array core.fmt.rt.Argument)) :=
          M.alloc [ α5 ] in
        let* α7 : ltac:(refine (ref (array core.fmt.rt.Argument))) :=
          borrow α6 in
        let* α8 : ltac:(refine (ref (slice core.fmt.rt.Argument))) :=
          pointer_coercion "Unsize" α7 in
        let* α9 : ltac:(refine core.fmt.Arguments) :=
          core.fmt.Arguments::["new_v1"] α2 α8 in
        std.io.stdio._print α9 in
      M.alloc tt in
    let* _ : ltac:(refine unit) :=
      let* _ : ltac:(refine unit) :=
        let* α0 : ltac:(refine (array (ref str))) :=
          M.alloc [ mk_str "one meter + one_meter = "; mk_str " mm
" ] in
        let* α1 : ltac:(refine (ref (array (ref str)))) := borrow α0 in
        let* α2 : ltac:(refine (ref (slice (ref str)))) :=
          pointer_coercion "Unsize" α1 in
        let* α3 : ltac:(refine f64) := two_meters.["0"] in
        let* α4 : ltac:(refine (ref f64)) := borrow α3 in
        let* α5 : ltac:(refine core.fmt.rt.Argument) :=
          core.fmt.rt.Argument::["new_debug"] α4 in
        let* α6 : ltac:(refine (array core.fmt.rt.Argument)) :=
          M.alloc [ α5 ] in
        let* α7 : ltac:(refine (ref (array core.fmt.rt.Argument))) :=
          borrow α6 in
        let* α8 : ltac:(refine (ref (slice core.fmt.rt.Argument))) :=
          pointer_coercion "Unsize" α7 in
        let* α9 : ltac:(refine core.fmt.Arguments) :=
          core.fmt.Arguments::["new_v1"] α2 α8 in
        std.io.stdio._print α9 in
      M.alloc tt in
    M.alloc tt).
