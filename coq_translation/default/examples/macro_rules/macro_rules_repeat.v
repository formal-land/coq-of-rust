(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main `{ℋ : State.Trait} : M unit :=
  M.function_body
    (let* _ : ltac:(refine unit) :=
      let* _ : ltac:(refine unit) :=
        let* α0 : ltac:(refine (array (ref str))) := M.alloc [ mk_str "1
" ] in
        let* α1 : ltac:(refine (ref (array (ref str)))) := borrow α0 in
        let* α2 : ltac:(refine (ref (slice (ref str)))) :=
          pointer_coercion "Unsize" α1 in
        let* α3 : ltac:(refine (array core.fmt.rt.Argument)) := M.alloc [ ] in
        let* α4 : ltac:(refine (ref (array core.fmt.rt.Argument))) :=
          borrow α3 in
        let* α5 : ltac:(refine (ref (slice core.fmt.rt.Argument))) :=
          pointer_coercion "Unsize" α4 in
        let* α6 : ltac:(refine core.fmt.Arguments) :=
          core.fmt.Arguments::["new_v1"] α2 α5 in
        std.io.stdio._print α6 in
      M.alloc tt in
    let* _ : ltac:(refine unit) :=
      let* _ : ltac:(refine unit) :=
        let* α0 : ltac:(refine (array (ref str))) :=
          M.alloc [ mk_str ""; mk_str "
" ] in
        let* α1 : ltac:(refine (ref (array (ref str)))) := borrow α0 in
        let* α2 : ltac:(refine (ref (slice (ref str)))) :=
          pointer_coercion "Unsize" α1 in
        let* α3 : ltac:(refine i32) := M.alloc 1 in
        let* α4 : ltac:(refine i32) := M.alloc 2 in
        let* α5 : ltac:(refine i32) := BinOp.add α3 α4 in
        let* α6 : ltac:(refine i32) := M.alloc 2 in
        let* α7 : ltac:(refine i32) := core.cmp.min α5 α6 in
        let* α8 : ltac:(refine (ref i32)) := borrow α7 in
        let* α9 : ltac:(refine core.fmt.rt.Argument) :=
          core.fmt.rt.Argument::["new_display"] α8 in
        let* α10 : ltac:(refine (array core.fmt.rt.Argument)) :=
          M.alloc [ α9 ] in
        let* α11 : ltac:(refine (ref (array core.fmt.rt.Argument))) :=
          borrow α10 in
        let* α12 : ltac:(refine (ref (slice core.fmt.rt.Argument))) :=
          pointer_coercion "Unsize" α11 in
        let* α13 : ltac:(refine core.fmt.Arguments) :=
          core.fmt.Arguments::["new_v1"] α2 α12 in
        std.io.stdio._print α13 in
      M.alloc tt in
    let* _ : ltac:(refine unit) :=
      let* _ : ltac:(refine unit) :=
        let* α0 : ltac:(refine (array (ref str))) :=
          M.alloc [ mk_str ""; mk_str "
" ] in
        let* α1 : ltac:(refine (ref (array (ref str)))) := borrow α0 in
        let* α2 : ltac:(refine (ref (slice (ref str)))) :=
          pointer_coercion "Unsize" α1 in
        let* α3 : ltac:(refine i32) := M.alloc 5 in
        let* α4 : ltac:(refine i32) := M.alloc 2 in
        let* α5 : ltac:(refine i32) := M.alloc 3 in
        let* α6 : ltac:(refine i32) := BinOp.mul α4 α5 in
        let* α7 : ltac:(refine i32) := M.alloc 4 in
        let* α8 : ltac:(refine i32) := core.cmp.min α6 α7 in
        let* α9 : ltac:(refine i32) := core.cmp.min α3 α8 in
        let* α10 : ltac:(refine (ref i32)) := borrow α9 in
        let* α11 : ltac:(refine core.fmt.rt.Argument) :=
          core.fmt.rt.Argument::["new_display"] α10 in
        let* α12 : ltac:(refine (array core.fmt.rt.Argument)) :=
          M.alloc [ α11 ] in
        let* α13 : ltac:(refine (ref (array core.fmt.rt.Argument))) :=
          borrow α12 in
        let* α14 : ltac:(refine (ref (slice core.fmt.rt.Argument))) :=
          pointer_coercion "Unsize" α13 in
        let* α15 : ltac:(refine core.fmt.Arguments) :=
          core.fmt.Arguments::["new_v1"] α2 α14 in
        std.io.stdio._print α15 in
      M.alloc tt in
    M.alloc tt).
