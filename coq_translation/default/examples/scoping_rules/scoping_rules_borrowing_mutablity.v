(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(* #[allow(dead_code)] - struct was ignored by the compiler *)
Module  Book.
Section Book.
  Context `{ℋ : State.Trait}.
  
  Record t : Set := {
    author : ref str;
    title : ref str;
    year : u32;
  }.
  
  Global Instance Get_author : Notation.Dot "author" := {
    Notation.dot x := let* x := M.read x in M.pure x.(author) : M _;
  }.
  Global Instance Get_AF_author : Notation.DoubleColon t "author" := {
    Notation.double_colon x := let* x := M.read x in M.pure x.(author) : M _;
  }.
  Global Instance Get_title : Notation.Dot "title" := {
    Notation.dot x := let* x := M.read x in M.pure x.(title) : M _;
  }.
  Global Instance Get_AF_title : Notation.DoubleColon t "title" := {
    Notation.double_colon x := let* x := M.read x in M.pure x.(title) : M _;
  }.
  Global Instance Get_year : Notation.Dot "year" := {
    Notation.dot x := let* x := M.read x in M.pure x.(year) : M _;
  }.
  Global Instance Get_AF_year : Notation.DoubleColon t "year" := {
    Notation.double_colon x := let* x := M.read x in M.pure x.(year) : M _;
  }.
End Book.
End Book.
Definition Book `{ℋ : State.Trait} : Set := M.Val Book.t.

Module  Impl_core_clone_Clone_for_scoping_rules_borrowing_mutablity_Book.
Section Impl_core_clone_Clone_for_scoping_rules_borrowing_mutablity_Book.
  Context `{ℋ : State.Trait}.
  
  Definition Self : Set := scoping_rules_borrowing_mutablity.Book.
  
  (* #[allow(dead_code)] - function was ignored by the compiler *)
  Definition clone
      (self : ref Self)
      : M scoping_rules_borrowing_mutablity.Book :=
    M.function_body
      (let* _ : ltac:(refine unit) := M.alloc tt in
      let* _ : ltac:(refine unit) := M.alloc tt in
      let* _ : ltac:(refine unit) := M.alloc tt in
      deref self).
  
  Global Instance AssociatedFunction_clone :
    Notation.DoubleColon Self "clone" := {
    Notation.double_colon := clone;
  }.
  
  Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
    core.clone.Clone.clone := clone;
    core.clone.Clone.clone_from := Datatypes.None;
  }.
End Impl_core_clone_Clone_for_scoping_rules_borrowing_mutablity_Book.
End Impl_core_clone_Clone_for_scoping_rules_borrowing_mutablity_Book.

Module  Impl_core_marker_Copy_for_scoping_rules_borrowing_mutablity_Book.
Section Impl_core_marker_Copy_for_scoping_rules_borrowing_mutablity_Book.
  Context `{ℋ : State.Trait}.
  
  Definition Self : Set := scoping_rules_borrowing_mutablity.Book.
  
  Global Instance ℐ : core.marker.Copy.Trait Self := {
  }.
End Impl_core_marker_Copy_for_scoping_rules_borrowing_mutablity_Book.
End Impl_core_marker_Copy_for_scoping_rules_borrowing_mutablity_Book.

Definition borrow_book
    `{ℋ : State.Trait}
    (book : ref scoping_rules_borrowing_mutablity.Book)
    : M unit :=
  M.function_body
    (let* _ : ltac:(refine unit) :=
      let* _ : ltac:(refine unit) :=
        let* α0 : ltac:(refine (array (ref str))) :=
          M.alloc
            [ mk_str "I immutably borrowed "; mk_str " - "; mk_str " edition
"
            ] in
        let* α1 : ltac:(refine (ref (array (ref str)))) := borrow α0 in
        let* α2 : ltac:(refine (ref (slice (ref str)))) :=
          pointer_coercion "Unsize" α1 in
        let* α3 : ltac:(refine scoping_rules_borrowing_mutablity.Book) :=
          deref book in
        let* α4 : ltac:(refine (ref str)) := α3.["title"] in
        let* α5 : ltac:(refine (ref (ref str))) := borrow α4 in
        let* α6 : ltac:(refine core.fmt.rt.Argument) :=
          core.fmt.rt.Argument::["new_display"] α5 in
        let* α7 : ltac:(refine scoping_rules_borrowing_mutablity.Book) :=
          deref book in
        let* α8 : ltac:(refine u32) := α7.["year"] in
        let* α9 : ltac:(refine (ref u32)) := borrow α8 in
        let* α10 : ltac:(refine core.fmt.rt.Argument) :=
          core.fmt.rt.Argument::["new_display"] α9 in
        let* α11 : ltac:(refine (array core.fmt.rt.Argument)) :=
          M.alloc [ α6; α10 ] in
        let* α12 : ltac:(refine (ref (array core.fmt.rt.Argument))) :=
          borrow α11 in
        let* α13 : ltac:(refine (ref (slice core.fmt.rt.Argument))) :=
          pointer_coercion "Unsize" α12 in
        let* α14 : ltac:(refine core.fmt.Arguments) :=
          core.fmt.Arguments::["new_v1"] α2 α13 in
        std.io.stdio._print α14 in
      M.alloc tt in
    M.alloc tt).

Definition new_edition
    `{ℋ : State.Trait}
    (book : mut_ref scoping_rules_borrowing_mutablity.Book)
    : M unit :=
  M.function_body
    (let* _ : ltac:(refine unit) :=
      let* α0 : ltac:(refine scoping_rules_borrowing_mutablity.Book) :=
        deref book in
      let* α1 : ltac:(refine u32) := α0.["year"] in
      let* α2 : ltac:(refine u32) := M.alloc 2014 in
      assign α1 α2 in
    let* _ : ltac:(refine unit) :=
      let* _ : ltac:(refine unit) :=
        let* α0 : ltac:(refine (array (ref str))) :=
          M.alloc
            [ mk_str "I mutably borrowed "; mk_str " - "; mk_str " edition
"
            ] in
        let* α1 : ltac:(refine (ref (array (ref str)))) := borrow α0 in
        let* α2 : ltac:(refine (ref (slice (ref str)))) :=
          pointer_coercion "Unsize" α1 in
        let* α3 : ltac:(refine scoping_rules_borrowing_mutablity.Book) :=
          deref book in
        let* α4 : ltac:(refine (ref str)) := α3.["title"] in
        let* α5 : ltac:(refine (ref (ref str))) := borrow α4 in
        let* α6 : ltac:(refine core.fmt.rt.Argument) :=
          core.fmt.rt.Argument::["new_display"] α5 in
        let* α7 : ltac:(refine scoping_rules_borrowing_mutablity.Book) :=
          deref book in
        let* α8 : ltac:(refine u32) := α7.["year"] in
        let* α9 : ltac:(refine (ref u32)) := borrow α8 in
        let* α10 : ltac:(refine core.fmt.rt.Argument) :=
          core.fmt.rt.Argument::["new_display"] α9 in
        let* α11 : ltac:(refine (array core.fmt.rt.Argument)) :=
          M.alloc [ α6; α10 ] in
        let* α12 : ltac:(refine (ref (array core.fmt.rt.Argument))) :=
          borrow α11 in
        let* α13 : ltac:(refine (ref (slice core.fmt.rt.Argument))) :=
          pointer_coercion "Unsize" α12 in
        let* α14 : ltac:(refine core.fmt.Arguments) :=
          core.fmt.Arguments::["new_v1"] α2 α13 in
        std.io.stdio._print α14 in
      M.alloc tt in
    M.alloc tt).

(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main `{ℋ : State.Trait} : M unit :=
  M.function_body
    (let* immutabook : ltac:(refine scoping_rules_borrowing_mutablity.Book) :=
      let* α0 : ltac:(refine u32) := M.alloc 1979 in
      M.alloc
        {|
          scoping_rules_borrowing_mutablity.Book.author :=
            mk_str "Douglas Hofstadter";
          scoping_rules_borrowing_mutablity.Book.title :=
            mk_str ("G" ++ String.String "246" "del, Escher, Bach");
          scoping_rules_borrowing_mutablity.Book.year := α0;
        |} in
    let mutabook := immutabook in
    let* _ : ltac:(refine unit) :=
      let* α0 : ltac:(refine (ref scoping_rules_borrowing_mutablity.Book)) :=
        borrow immutabook in
      scoping_rules_borrowing_mutablity.borrow_book α0 in
    let* _ : ltac:(refine unit) :=
      let* α0 : ltac:(refine (ref scoping_rules_borrowing_mutablity.Book)) :=
        borrow mutabook in
      scoping_rules_borrowing_mutablity.borrow_book α0 in
    let* _ : ltac:(refine unit) :=
      let* α0 :
          ltac:(refine (mut_ref scoping_rules_borrowing_mutablity.Book)) :=
        borrow_mut mutabook in
      scoping_rules_borrowing_mutablity.new_edition α0 in
    M.alloc tt).
