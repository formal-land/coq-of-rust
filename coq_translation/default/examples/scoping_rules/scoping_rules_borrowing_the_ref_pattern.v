(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module  Point.
Section Point.
  Context `{ℋ : State.Trait}.
  
  Record t : Set := {
    x : i32;
    y : i32;
  }.
  
  Global Instance Get_x : Notation.Dot "x" := {
    Notation.dot x' := let* x' := M.read x' in M.pure x'.(x) : M _;
  }.
  Global Instance Get_AF_x : Notation.DoubleColon t "x" := {
    Notation.double_colon x' := let* x' := M.read x' in M.pure x'.(x) : M _;
  }.
  Global Instance Get_y : Notation.Dot "y" := {
    Notation.dot x := let* x := M.read x in M.pure x.(y) : M _;
  }.
  Global Instance Get_AF_y : Notation.DoubleColon t "y" := {
    Notation.double_colon x := let* x := M.read x in M.pure x.(y) : M _;
  }.
End Point.
End Point.
Definition Point `{ℋ : State.Trait} : Set := M.Val Point.t.

Module  Impl_core_clone_Clone_for_scoping_rules_borrowing_the_ref_pattern_Point.
Section Impl_core_clone_Clone_for_scoping_rules_borrowing_the_ref_pattern_Point.
  Context `{ℋ : State.Trait}.
  
  Definition Self : Set := scoping_rules_borrowing_the_ref_pattern.Point.
  
  Definition clone
      (self : ref Self)
      : M scoping_rules_borrowing_the_ref_pattern.Point :=
    M.function_body
      (let* _ : ltac:(refine unit) := M.alloc tt in
      deref self).
  
  Global Instance AssociatedFunction_clone :
    Notation.DoubleColon Self "clone" := {
    Notation.double_colon := clone;
  }.
  
  Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
    core.clone.Clone.clone := clone;
    core.clone.Clone.clone_from := Datatypes.None;
  }.
End Impl_core_clone_Clone_for_scoping_rules_borrowing_the_ref_pattern_Point.
End Impl_core_clone_Clone_for_scoping_rules_borrowing_the_ref_pattern_Point.

Module  Impl_core_marker_Copy_for_scoping_rules_borrowing_the_ref_pattern_Point.
Section Impl_core_marker_Copy_for_scoping_rules_borrowing_the_ref_pattern_Point.
  Context `{ℋ : State.Trait}.
  
  Definition Self : Set := scoping_rules_borrowing_the_ref_pattern.Point.
  
  Global Instance ℐ : core.marker.Copy.Trait Self := {
  }.
End Impl_core_marker_Copy_for_scoping_rules_borrowing_the_ref_pattern_Point.
End Impl_core_marker_Copy_for_scoping_rules_borrowing_the_ref_pattern_Point.

(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main `{ℋ : State.Trait} : M unit :=
  M.function_body
    (let* c : ltac:(refine char) := M.alloc "Q"%char in
    let ref_c1 := c in
    let* ref_c2 : ltac:(refine (ref char)) := borrow c in
    let* _ : ltac:(refine unit) :=
      let* _ : ltac:(refine unit) :=
        let* α0 : ltac:(refine (array (ref str))) :=
          M.alloc [ mk_str "ref_c1 equals ref_c2: "; mk_str "
" ] in
        let* α1 : ltac:(refine (ref (array (ref str)))) := borrow α0 in
        let* α2 : ltac:(refine (ref (slice (ref str)))) :=
          pointer_coercion "Unsize" α1 in
        let* α3 : ltac:(refine char) := deref ref_c1 in
        let* α4 : ltac:(refine char) := deref ref_c2 in
        let* α5 : ltac:(refine bool) := BinOp.eq α3 α4 in
        let* α6 : ltac:(refine (ref bool)) := borrow α5 in
        let* α7 : ltac:(refine core.fmt.rt.Argument) :=
          core.fmt.rt.Argument::["new_display"] α6 in
        let* α8 : ltac:(refine (array core.fmt.rt.Argument)) :=
          M.alloc [ α7 ] in
        let* α9 : ltac:(refine (ref (array core.fmt.rt.Argument))) :=
          borrow α8 in
        let* α10 : ltac:(refine (ref (slice core.fmt.rt.Argument))) :=
          pointer_coercion "Unsize" α9 in
        let* α11 : ltac:(refine core.fmt.Arguments) :=
          core.fmt.Arguments::["new_v1"] α2 α10 in
        std.io.stdio._print α11 in
      M.alloc tt in
    let* point : ltac:(refine scoping_rules_borrowing_the_ref_pattern.Point) :=
      let* α0 : ltac:(refine i32) := M.alloc 0 in
      let* α1 : ltac:(refine i32) := M.alloc 0 in
      M.alloc
        {|
          scoping_rules_borrowing_the_ref_pattern.Point.x := α0;
          scoping_rules_borrowing_the_ref_pattern.Point.y := α1;
        |} in
    let* _copy_of_x : ltac:(refine i32) :=
      let '{|
            scoping_rules_borrowing_the_ref_pattern.Point.x := ref_to_x;
            scoping_rules_borrowing_the_ref_pattern.Point.y := _;
          |} :=
        point in
      deref ref_to_x in
    let mutable_point := point in
    let* _ : ltac:(refine unit) :=
      let '{|
            scoping_rules_borrowing_the_ref_pattern.Point.x := _;
            scoping_rules_borrowing_the_ref_pattern.Point.y := mut_ref_to_y;
          |} :=
        mutable_point in
      let* _ : ltac:(refine unit) :=
        let* α0 : ltac:(refine i32) := deref mut_ref_to_y in
        let* α1 : ltac:(refine i32) := M.alloc 1 in
        assign α0 α1 in
      M.alloc tt in
    let* _ : ltac:(refine unit) :=
      let* _ : ltac:(refine unit) :=
        let* α0 : ltac:(refine (array (ref str))) :=
          M.alloc [ mk_str "point is ("; mk_str ", "; mk_str ")
" ] in
        let* α1 : ltac:(refine (ref (array (ref str)))) := borrow α0 in
        let* α2 : ltac:(refine (ref (slice (ref str)))) :=
          pointer_coercion "Unsize" α1 in
        let* α3 : ltac:(refine i32) := point.["x"] in
        let* α4 : ltac:(refine (ref i32)) := borrow α3 in
        let* α5 : ltac:(refine core.fmt.rt.Argument) :=
          core.fmt.rt.Argument::["new_display"] α4 in
        let* α6 : ltac:(refine i32) := point.["y"] in
        let* α7 : ltac:(refine (ref i32)) := borrow α6 in
        let* α8 : ltac:(refine core.fmt.rt.Argument) :=
          core.fmt.rt.Argument::["new_display"] α7 in
        let* α9 : ltac:(refine (array core.fmt.rt.Argument)) :=
          M.alloc [ α5; α8 ] in
        let* α10 : ltac:(refine (ref (array core.fmt.rt.Argument))) :=
          borrow α9 in
        let* α11 : ltac:(refine (ref (slice core.fmt.rt.Argument))) :=
          pointer_coercion "Unsize" α10 in
        let* α12 : ltac:(refine core.fmt.Arguments) :=
          core.fmt.Arguments::["new_v1"] α2 α11 in
        std.io.stdio._print α12 in
      M.alloc tt in
    let* _ : ltac:(refine unit) :=
      let* _ : ltac:(refine unit) :=
        let* α0 : ltac:(refine (array (ref str))) :=
          M.alloc [ mk_str "mutable_point is ("; mk_str ", "; mk_str ")
" ] in
        let* α1 : ltac:(refine (ref (array (ref str)))) := borrow α0 in
        let* α2 : ltac:(refine (ref (slice (ref str)))) :=
          pointer_coercion "Unsize" α1 in
        let* α3 : ltac:(refine i32) := mutable_point.["x"] in
        let* α4 : ltac:(refine (ref i32)) := borrow α3 in
        let* α5 : ltac:(refine core.fmt.rt.Argument) :=
          core.fmt.rt.Argument::["new_display"] α4 in
        let* α6 : ltac:(refine i32) := mutable_point.["y"] in
        let* α7 : ltac:(refine (ref i32)) := borrow α6 in
        let* α8 : ltac:(refine core.fmt.rt.Argument) :=
          core.fmt.rt.Argument::["new_display"] α7 in
        let* α9 : ltac:(refine (array core.fmt.rt.Argument)) :=
          M.alloc [ α5; α8 ] in
        let* α10 : ltac:(refine (ref (array core.fmt.rt.Argument))) :=
          borrow α9 in
        let* α11 : ltac:(refine (ref (slice core.fmt.rt.Argument))) :=
          pointer_coercion "Unsize" α10 in
        let* α12 : ltac:(refine core.fmt.Arguments) :=
          core.fmt.Arguments::["new_v1"] α2 α11 in
        std.io.stdio._print α12 in
      M.alloc tt in
    let* mutable_tuple :
        ltac:(refine
          (M.Val ((alloc.boxed.Box u32 alloc.alloc.Global) * u32))) :=
      let* α0 : ltac:(refine u32) := M.alloc 5 in
      let* α1 : ltac:(refine (alloc.boxed.Box u32 alloc.alloc.Global)) :=
        (alloc.boxed.Box u32 alloc.alloc.Global)::["new"] α0 in
      let* α2 : ltac:(refine u32) := M.alloc 3 in
      M.alloc (α1, α2) in
    let* _ : ltac:(refine unit) :=
      let '(_, last) := mutable_tuple in
      let* _ : ltac:(refine unit) :=
        let* α0 : ltac:(refine u32) := deref last in
        let* α1 : ltac:(refine u32) := M.alloc 2 in
        assign α0 α1 in
      M.alloc tt in
    let* _ : ltac:(refine unit) :=
      let* _ : ltac:(refine unit) :=
        let* α0 : ltac:(refine (array (ref str))) :=
          M.alloc [ mk_str "tuple is "; mk_str "
" ] in
        let* α1 : ltac:(refine (ref (array (ref str)))) := borrow α0 in
        let* α2 : ltac:(refine (ref (slice (ref str)))) :=
          pointer_coercion "Unsize" α1 in
        let* α3 :
            ltac:(refine
              (ref (M.Val ((alloc.boxed.Box u32 alloc.alloc.Global) * u32)))) :=
          borrow mutable_tuple in
        let* α4 : ltac:(refine core.fmt.rt.Argument) :=
          core.fmt.rt.Argument::["new_debug"] α3 in
        let* α5 : ltac:(refine (array core.fmt.rt.Argument)) :=
          M.alloc [ α4 ] in
        let* α6 : ltac:(refine (ref (array core.fmt.rt.Argument))) :=
          borrow α5 in
        let* α7 : ltac:(refine (ref (slice core.fmt.rt.Argument))) :=
          pointer_coercion "Unsize" α6 in
        let* α8 : ltac:(refine core.fmt.Arguments) :=
          core.fmt.Arguments::["new_v1"] α2 α7 in
        std.io.stdio._print α8 in
      M.alloc tt in
    M.alloc tt).
