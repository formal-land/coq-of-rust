(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Definition multiply
    `{ℋ : State.Trait}
    (first : ref i32)
    (second : ref i32)
    : M i32 :=
  M.function_body
    ((core.ops.arith.Mul.mul (Self := ref i32) (Trait := ltac:(refine _)))
      first
      second).

Definition choose_first
    `{ℋ : State.Trait}
    (first : ref i32)
    (arg : ref i32)
    : M (ref i32) :=
  M.function_body
    (let* α0 : ltac:(refine i32) := deref first in
    borrow α0).

(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main `{ℋ : State.Trait} : M unit :=
  M.function_body
    (let* first : ltac:(refine i32) := M.alloc 2 in
    let* _ : ltac:(refine unit) :=
      let* second : ltac:(refine i32) := M.alloc 3 in
      let* _ : ltac:(refine unit) :=
        let* _ : ltac:(refine unit) :=
          let* α0 : ltac:(refine (array (ref str))) :=
            M.alloc [ mk_str "The product is "; mk_str "
" ] in
          let* α1 : ltac:(refine (ref (array (ref str)))) := borrow α0 in
          let* α2 : ltac:(refine (ref (slice (ref str)))) :=
            pointer_coercion "Unsize" α1 in
          let* α3 : ltac:(refine (ref i32)) := borrow first in
          let* α4 : ltac:(refine (ref i32)) := borrow second in
          let* α5 : ltac:(refine i32) :=
            scoping_rules_lifetimes_coercion.multiply α3 α4 in
          let* α6 : ltac:(refine (ref i32)) := borrow α5 in
          let* α7 : ltac:(refine core.fmt.rt.Argument) :=
            core.fmt.rt.Argument::["new_display"] α6 in
          let* α8 : ltac:(refine (array core.fmt.rt.Argument)) :=
            M.alloc [ α7 ] in
          let* α9 : ltac:(refine (ref (array core.fmt.rt.Argument))) :=
            borrow α8 in
          let* α10 : ltac:(refine (ref (slice core.fmt.rt.Argument))) :=
            pointer_coercion "Unsize" α9 in
          let* α11 : ltac:(refine core.fmt.Arguments) :=
            core.fmt.Arguments::["new_v1"] α2 α10 in
          std.io.stdio._print α11 in
        M.alloc tt in
      let* _ : ltac:(refine unit) :=
        let* _ : ltac:(refine unit) :=
          let* α0 : ltac:(refine (array (ref str))) :=
            M.alloc [ mk_str ""; mk_str " is the first
" ] in
          let* α1 : ltac:(refine (ref (array (ref str)))) := borrow α0 in
          let* α2 : ltac:(refine (ref (slice (ref str)))) :=
            pointer_coercion "Unsize" α1 in
          let* α3 : ltac:(refine (ref i32)) := borrow first in
          let* α4 : ltac:(refine (ref i32)) := borrow second in
          let* α5 : ltac:(refine (ref i32)) :=
            scoping_rules_lifetimes_coercion.choose_first α3 α4 in
          let* α6 : ltac:(refine (ref (ref i32))) := borrow α5 in
          let* α7 : ltac:(refine core.fmt.rt.Argument) :=
            core.fmt.rt.Argument::["new_display"] α6 in
          let* α8 : ltac:(refine (array core.fmt.rt.Argument)) :=
            M.alloc [ α7 ] in
          let* α9 : ltac:(refine (ref (array core.fmt.rt.Argument))) :=
            borrow α8 in
          let* α10 : ltac:(refine (ref (slice core.fmt.rt.Argument))) :=
            pointer_coercion "Unsize" α9 in
          let* α11 : ltac:(refine core.fmt.Arguments) :=
            core.fmt.Arguments::["new_v1"] α2 α10 in
          std.io.stdio._print α11 in
        M.alloc tt in
      M.alloc tt in
    M.alloc tt).
