(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Definition print_one `{ℋ : State.Trait} (x : ref i32) : M unit :=
  M.function_body
    (let* _ : ltac:(refine unit) :=
      let* _ : ltac:(refine unit) :=
        let* α0 : ltac:(refine (array (ref str))) :=
          M.alloc [ mk_str "`print_one`: x is "; mk_str "
" ] in
        let* α1 : ltac:(refine (ref (array (ref str)))) := borrow α0 in
        let* α2 : ltac:(refine (ref (slice (ref str)))) :=
          pointer_coercion "Unsize" α1 in
        let* α3 : ltac:(refine (ref (ref i32))) := borrow x in
        let* α4 : ltac:(refine core.fmt.rt.Argument) :=
          core.fmt.rt.Argument::["new_display"] α3 in
        let* α5 : ltac:(refine (array core.fmt.rt.Argument)) :=
          M.alloc [ α4 ] in
        let* α6 : ltac:(refine (ref (array core.fmt.rt.Argument))) :=
          borrow α5 in
        let* α7 : ltac:(refine (ref (slice core.fmt.rt.Argument))) :=
          pointer_coercion "Unsize" α6 in
        let* α8 : ltac:(refine core.fmt.Arguments) :=
          core.fmt.Arguments::["new_v1"] α2 α7 in
        std.io.stdio._print α8 in
      M.alloc tt in
    M.alloc tt).

Definition add_one `{ℋ : State.Trait} (x : mut_ref i32) : M unit :=
  M.function_body
    (let* _ : ltac:(refine unit) :=
      let* α0 : ltac:(refine i32) := deref x in
      let* α1 : ltac:(refine i32) := M.alloc 1 in
      assign_op add α0 α1 in
    M.alloc tt).

Definition print_multi
    `{ℋ : State.Trait}
    (x : ref i32)
    (y : ref i32)
    : M unit :=
  M.function_body
    (let* _ : ltac:(refine unit) :=
      let* _ : ltac:(refine unit) :=
        let* α0 : ltac:(refine (array (ref str))) :=
          M.alloc
            [ mk_str "`print_multi`: x is "; mk_str ", y is "; mk_str "
" ] in
        let* α1 : ltac:(refine (ref (array (ref str)))) := borrow α0 in
        let* α2 : ltac:(refine (ref (slice (ref str)))) :=
          pointer_coercion "Unsize" α1 in
        let* α3 : ltac:(refine (ref (ref i32))) := borrow x in
        let* α4 : ltac:(refine core.fmt.rt.Argument) :=
          core.fmt.rt.Argument::["new_display"] α3 in
        let* α5 : ltac:(refine (ref (ref i32))) := borrow y in
        let* α6 : ltac:(refine core.fmt.rt.Argument) :=
          core.fmt.rt.Argument::["new_display"] α5 in
        let* α7 : ltac:(refine (array core.fmt.rt.Argument)) :=
          M.alloc [ α4; α6 ] in
        let* α8 : ltac:(refine (ref (array core.fmt.rt.Argument))) :=
          borrow α7 in
        let* α9 : ltac:(refine (ref (slice core.fmt.rt.Argument))) :=
          pointer_coercion "Unsize" α8 in
        let* α10 : ltac:(refine core.fmt.Arguments) :=
          core.fmt.Arguments::["new_v1"] α2 α9 in
        std.io.stdio._print α10 in
      M.alloc tt in
    M.alloc tt).

Definition pass_x
    `{ℋ : State.Trait}
    (x : ref i32)
    (arg : ref i32)
    : M (ref i32) :=
  M.function_body (M.pure x).

(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main `{ℋ : State.Trait} : M unit :=
  M.function_body
    (let* x : ltac:(refine i32) := M.alloc 7 in
    let* y : ltac:(refine i32) := M.alloc 9 in
    let* _ : ltac:(refine unit) :=
      let* α0 : ltac:(refine (ref i32)) := borrow x in
      scoping_rules_lifetimes_functions.print_one α0 in
    let* _ : ltac:(refine unit) :=
      let* α0 : ltac:(refine (ref i32)) := borrow x in
      let* α1 : ltac:(refine (ref i32)) := borrow y in
      scoping_rules_lifetimes_functions.print_multi α0 α1 in
    let* z : ltac:(refine (ref i32)) :=
      let* α0 : ltac:(refine (ref i32)) := borrow x in
      let* α1 : ltac:(refine (ref i32)) := borrow y in
      scoping_rules_lifetimes_functions.pass_x α0 α1 in
    let* _ : ltac:(refine unit) :=
      let* α0 : ltac:(refine i32) := deref z in
      let* α1 : ltac:(refine (ref i32)) := borrow α0 in
      scoping_rules_lifetimes_functions.print_one α1 in
    let* t : ltac:(refine i32) := M.alloc 3 in
    let* _ : ltac:(refine unit) :=
      let* α0 : ltac:(refine (mut_ref i32)) := borrow_mut t in
      scoping_rules_lifetimes_functions.add_one α0 in
    let* _ : ltac:(refine unit) :=
      let* α0 : ltac:(refine (ref i32)) := borrow t in
      scoping_rules_lifetimes_functions.print_one α0 in
    M.alloc tt).
