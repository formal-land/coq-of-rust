(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module  Borrowed.
Section Borrowed.
  Context `{ℋ : State.Trait}.
  
  Record t : Set := {
    x : ref i32;
  }.
  
  Global Instance Get_x : Notation.Dot "x" := {
    Notation.dot x' := let* x' := M.read x' in M.pure x'.(x) : M _;
  }.
  Global Instance Get_AF_x : Notation.DoubleColon t "x" := {
    Notation.double_colon x' := let* x' := M.read x' in M.pure x'.(x) : M _;
  }.
End Borrowed.
End Borrowed.
Definition Borrowed `{ℋ : State.Trait} : Set := M.Val Borrowed.t.

Module  Impl_core_fmt_Debug_for_scoping_rules_lifetimes_traits_Borrowed.
Section Impl_core_fmt_Debug_for_scoping_rules_lifetimes_traits_Borrowed.
  Context `{ℋ : State.Trait}.
  
  Definition Self : Set := scoping_rules_lifetimes_traits.Borrowed.
  
  Definition fmt
      (self : ref Self)
      (f : mut_ref core.fmt.Formatter)
      : M ltac:(core.fmt.Result) :=
    M.function_body
      (let* α0 : ltac:(refine core.fmt.Formatter) := deref f in
      let* α1 : ltac:(refine (mut_ref core.fmt.Formatter)) := borrow_mut α0 in
      let* α2 : ltac:(refine str) := deref (mk_str "Borrowed") in
      let* α3 : ltac:(refine (ref str)) := borrow α2 in
      let* α4 : ltac:(refine str) := deref (mk_str "x") in
      let* α5 : ltac:(refine (ref str)) := borrow α4 in
      let* α6 : ltac:(refine scoping_rules_lifetimes_traits.Borrowed) :=
        deref self in
      let* α7 : ltac:(refine (ref i32)) := α6.["x"] in
      let* α8 : ltac:(refine (ref (ref i32))) := borrow α7 in
      let* α9 : ltac:(refine (ref (ref (ref i32)))) := borrow α8 in
      let* α10 : ltac:(refine (ref type not implemented)) :=
        pointer_coercion "Unsize" α9 in
      core.fmt.Formatter::["debug_struct_field1_finish"] α1 α3 α5 α10).
  
  Global Instance AssociatedFunction_fmt : Notation.DoubleColon Self "fmt" := {
    Notation.double_colon := fmt;
  }.
  
  Global Instance ℐ : core.fmt.Debug.Trait Self := {
    core.fmt.Debug.fmt := fmt;
  }.
End Impl_core_fmt_Debug_for_scoping_rules_lifetimes_traits_Borrowed.
End Impl_core_fmt_Debug_for_scoping_rules_lifetimes_traits_Borrowed.

Module  Impl_core_default_Default_for_scoping_rules_lifetimes_traits_Borrowed.
Section Impl_core_default_Default_for_scoping_rules_lifetimes_traits_Borrowed.
  Context `{ℋ : State.Trait}.
  
  Definition Self : Set := scoping_rules_lifetimes_traits.Borrowed.
  
  Definition default : M Self :=
    M.function_body
      (let* α0 : ltac:(refine i32) := M.alloc 10 in
      let* α1 : ltac:(refine (ref i32)) := borrow α0 in
      M.alloc {| scoping_rules_lifetimes_traits.Borrowed.x := α1; |}).
  
  Global Instance AssociatedFunction_default :
    Notation.DoubleColon Self "default" := {
    Notation.double_colon := default;
  }.
  
  Global Instance ℐ : core.default.Default.Trait Self := {
    core.default.Default.default := default;
  }.
End Impl_core_default_Default_for_scoping_rules_lifetimes_traits_Borrowed.
End Impl_core_default_Default_for_scoping_rules_lifetimes_traits_Borrowed.

(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main `{ℋ : State.Trait} : M unit :=
  M.function_body
    (let* b : ltac:(refine scoping_rules_lifetimes_traits.Borrowed) :=
      core.default.Default.default
        (Self := scoping_rules_lifetimes_traits.Borrowed)
        (Trait := ltac:(refine _)) in
    let* _ : ltac:(refine unit) :=
      let* _ : ltac:(refine unit) :=
        let* α0 : ltac:(refine (array (ref str))) :=
          M.alloc [ mk_str "b is "; mk_str "
" ] in
        let* α1 : ltac:(refine (ref (array (ref str)))) := borrow α0 in
        let* α2 : ltac:(refine (ref (slice (ref str)))) :=
          pointer_coercion "Unsize" α1 in
        let* α3 : ltac:(refine (ref scoping_rules_lifetimes_traits.Borrowed)) :=
          borrow b in
        let* α4 : ltac:(refine core.fmt.rt.Argument) :=
          core.fmt.rt.Argument::["new_debug"] α3 in
        let* α5 : ltac:(refine (array core.fmt.rt.Argument)) :=
          M.alloc [ α4 ] in
        let* α6 : ltac:(refine (ref (array core.fmt.rt.Argument))) :=
          borrow α5 in
        let* α7 : ltac:(refine (ref (slice core.fmt.rt.Argument))) :=
          pointer_coercion "Unsize" α6 in
        let* α8 : ltac:(refine core.fmt.Arguments) :=
          core.fmt.Arguments::["new_v1"] α2 α7 in
        std.io.stdio._print α8 in
      M.alloc tt in
    M.alloc tt).
