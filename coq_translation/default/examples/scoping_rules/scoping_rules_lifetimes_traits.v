(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module Borrowed.
  Section Borrowed.
    Context `{ℋ : State.Trait}.
    
    Unset Primitive Projections.
    Record t : Set := {
      x : ref i32;
    }.
    Global Set Primitive Projections.
    
    #[refine] Global Instance Get_x : Notation.Dot "x" := {
      Notation.dot x' := let* x' := M.read x' in Pure x'.(x) : M _;
    }.
    Admitted.
    #[refine] Global Instance Get_AF_x : Notation.DoubleColon t "x" := {
      Notation.double_colon x' := let* x' := M.read x' in Pure x'.(x) : M _;
    }.
    Admitted.
  End Borrowed.
End Borrowed.
Definition Borrowed `{ℋ : State.Trait} : Set := M.val Borrowed.t.

Module Impl_core_fmt_Debug_for_scoping_rules_lifetimes_traits_Borrowed.
  Section Impl_core_fmt_Debug_for_scoping_rules_lifetimes_traits_Borrowed.
    Context `{ℋ : State.Trait}.
    
    Definition Self : Set := scoping_rules_lifetimes_traits.Borrowed.
    
    Definition fmt
        (self : ref Self)
        (f : mut_ref core.fmt.Formatter)
        : M ltac:(core.fmt.Result) :=
      let* α0 := deref f core.fmt.Formatter in
      let* α1 := borrow_mut α0 core.fmt.Formatter in
      let* α2 := deref (mk_str "Borrowed") str in
      let* α3 := borrow α2 str in
      let* α4 := deref (mk_str "x") str in
      let* α5 := borrow α4 str in
      let* α6 := deref self scoping_rules_lifetimes_traits.Borrowed in
      let* α7 := α6.["x"] in
      let* α8 := borrow α7 (ref i32) in
      let* α9 := borrow α8 (ref (ref i32)) in
      let* α10 := deref α9 (ref (ref i32)) in
      let* α11 := borrow α10 (ref (ref i32)) in
      let* α12 := pointer_coercion "Unsize" α11 in
      core.fmt.Formatter::["debug_struct_field1_finish"] α1 α3 α5 α12.
    
    Global Instance AssociatedFunction_fmt :
      Notation.DoubleColon Self "fmt" := {
      Notation.double_colon := fmt;
    }.
    
    #[refine] Global Instance ℐ : core.fmt.Debug.Trait Self := {
      core.fmt.Debug.fmt := fmt;
    }.
    Admitted.
  End Impl_core_fmt_Debug_for_scoping_rules_lifetimes_traits_Borrowed.
  Global Hint Resolve ℐ : core.
End Impl_core_fmt_Debug_for_scoping_rules_lifetimes_traits_Borrowed.

Module Impl_core_default_Default_for_scoping_rules_lifetimes_traits_Borrowed.
  Section Impl_core_default_Default_for_scoping_rules_lifetimes_traits_Borrowed.
    Context `{ℋ : State.Trait}.
    
    Definition Self : Set := scoping_rules_lifetimes_traits.Borrowed.
    
    Definition default : M Self :=
      let* α0 := M.alloc 10 in
      let* α1 := borrow α0 i32 in
      let* α2 := deref α1 i32 in
      let* α3 := borrow α2 i32 in
      M.alloc {| scoping_rules_lifetimes_traits.Borrowed.x := α3; |}.
    
    Global Instance AssociatedFunction_default :
      Notation.DoubleColon Self "default" := {
      Notation.double_colon := default;
    }.
    
    #[refine] Global Instance ℐ : core.default.Default.Trait Self := {
      core.default.Default.default := default;
    }.
    Admitted.
  End Impl_core_default_Default_for_scoping_rules_lifetimes_traits_Borrowed.
  Global Hint Resolve ℐ : core.
End Impl_core_default_Default_for_scoping_rules_lifetimes_traits_Borrowed.

(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main `{ℋ : State.Trait} : M unit :=
  let* b :=
    core.default.Default.default
      (Self := scoping_rules_lifetimes_traits.Borrowed) in
  let* _ :=
    let* _ :=
      let* α0 := borrow [ mk_str "b is "; mk_str "
" ] (list (ref str)) in
      let* α1 := deref α0 (list (ref str)) in
      let* α2 := borrow α1 (list (ref str)) in
      let* α3 := pointer_coercion "Unsize" α2 in
      let* α4 := borrow b scoping_rules_lifetimes_traits.Borrowed in
      let* α5 := deref α4 scoping_rules_lifetimes_traits.Borrowed in
      let* α6 := borrow α5 scoping_rules_lifetimes_traits.Borrowed in
      let* α7 := core.fmt.rt.Argument::["new_debug"] α6 in
      let* α8 := borrow [ α7 ] (list core.fmt.rt.Argument) in
      let* α9 := deref α8 (list core.fmt.rt.Argument) in
      let* α10 := borrow α9 (list core.fmt.rt.Argument) in
      let* α11 := pointer_coercion "Unsize" α10 in
      let* α12 := core.fmt.Arguments::["new_v1"] α3 α11 in
      std.io.stdio._print α12 in
    M.alloc tt in
  M.alloc tt.
