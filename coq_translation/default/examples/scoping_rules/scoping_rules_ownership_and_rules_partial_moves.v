(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main `{ℋ : State.Trait} : M unit :=
  M.function_body
    (let* person :
        ltac:(refine
          scoping_rules_ownership_and_rules_partial_moves.main.Person) :=
      let* α0 : ltac:(refine alloc.string.String) :=
        (core.convert.From.from
            (Self := alloc.string.String)
            (Trait := ltac:(refine _)))
          (mk_str "Alice") in
      let* α1 : ltac:(refine u8) := M.alloc 20 in
      let* α2 : ltac:(refine (alloc.boxed.Box u8 alloc.alloc.Global)) :=
        (alloc.boxed.Box u8 alloc.alloc.Global)::["new"] α1 in
      M.alloc
        {|
          scoping_rules_ownership_and_rules_partial_moves.main.Person.name :=
            α0;
          scoping_rules_ownership_and_rules_partial_moves.main.Person.age := α2;
        |} in
    let '{|
          scoping_rules_ownership_and_rules_partial_moves.main.Person.name
            :=
            name;
          scoping_rules_ownership_and_rules_partial_moves.main.Person.age
            :=
            age;
        |} :=
      person in
    let* _ : ltac:(refine unit) :=
      let* _ : ltac:(refine unit) :=
        let* α0 : ltac:(refine (array (ref str))) :=
          M.alloc [ mk_str "The person's age is "; mk_str "
" ] in
        let* α1 : ltac:(refine (ref (array (ref str)))) := borrow α0 in
        let* α2 : ltac:(refine (ref (slice (ref str)))) :=
          pointer_coercion "Unsize" α1 in
        let* α3 :
            ltac:(refine (ref (ref (alloc.boxed.Box u8 alloc.alloc.Global)))) :=
          borrow age in
        let* α4 : ltac:(refine core.fmt.rt.Argument) :=
          core.fmt.rt.Argument::["new_display"] α3 in
        let* α5 : ltac:(refine (array core.fmt.rt.Argument)) :=
          M.alloc [ α4 ] in
        let* α6 : ltac:(refine (ref (array core.fmt.rt.Argument))) :=
          borrow α5 in
        let* α7 : ltac:(refine (ref (slice core.fmt.rt.Argument))) :=
          pointer_coercion "Unsize" α6 in
        let* α8 : ltac:(refine core.fmt.Arguments) :=
          core.fmt.Arguments::["new_v1"] α2 α7 in
        std.io.stdio._print α8 in
      M.alloc tt in
    let* _ : ltac:(refine unit) :=
      let* _ : ltac:(refine unit) :=
        let* α0 : ltac:(refine (array (ref str))) :=
          M.alloc [ mk_str "The person's name is "; mk_str "
" ] in
        let* α1 : ltac:(refine (ref (array (ref str)))) := borrow α0 in
        let* α2 : ltac:(refine (ref (slice (ref str)))) :=
          pointer_coercion "Unsize" α1 in
        let* α3 : ltac:(refine (ref alloc.string.String)) := borrow name in
        let* α4 : ltac:(refine core.fmt.rt.Argument) :=
          core.fmt.rt.Argument::["new_display"] α3 in
        let* α5 : ltac:(refine (array core.fmt.rt.Argument)) :=
          M.alloc [ α4 ] in
        let* α6 : ltac:(refine (ref (array core.fmt.rt.Argument))) :=
          borrow α5 in
        let* α7 : ltac:(refine (ref (slice core.fmt.rt.Argument))) :=
          pointer_coercion "Unsize" α6 in
        let* α8 : ltac:(refine core.fmt.Arguments) :=
          core.fmt.Arguments::["new_v1"] α2 α7 in
        std.io.stdio._print α8 in
      M.alloc tt in
    let* _ : ltac:(refine unit) :=
      let* _ : ltac:(refine unit) :=
        let* α0 : ltac:(refine (array (ref str))) :=
          M.alloc
            [ mk_str "The person's age from person struct is "; mk_str "
" ] in
        let* α1 : ltac:(refine (ref (array (ref str)))) := borrow α0 in
        let* α2 : ltac:(refine (ref (slice (ref str)))) :=
          pointer_coercion "Unsize" α1 in
        let* α3 : ltac:(refine (alloc.boxed.Box u8 alloc.alloc.Global)) :=
          person.["age"] in
        let* α4 : ltac:(refine (ref (alloc.boxed.Box u8 alloc.alloc.Global))) :=
          borrow α3 in
        let* α5 : ltac:(refine core.fmt.rt.Argument) :=
          core.fmt.rt.Argument::["new_display"] α4 in
        let* α6 : ltac:(refine (array core.fmt.rt.Argument)) :=
          M.alloc [ α5 ] in
        let* α7 : ltac:(refine (ref (array core.fmt.rt.Argument))) :=
          borrow α6 in
        let* α8 : ltac:(refine (ref (slice core.fmt.rt.Argument))) :=
          pointer_coercion "Unsize" α7 in
        let* α9 : ltac:(refine core.fmt.Arguments) :=
          core.fmt.Arguments::["new_v1"] α2 α8 in
        std.io.stdio._print α9 in
      M.alloc tt in
    M.alloc tt).

Module  Person.
Section Person.
  Context `{ℋ : State.Trait}.
  
  Record t : Set := {
    name : alloc.string.String;
    age : alloc.boxed.Box u8 alloc.boxed.Box.Default.A;
  }.
  
  Global Instance Get_name : Notation.Dot "name" := {
    Notation.dot x := let* x := M.read x in M.pure x.(name) : M _;
  }.
  Global Instance Get_AF_name : Notation.DoubleColon t "name" := {
    Notation.double_colon x := let* x := M.read x in M.pure x.(name) : M _;
  }.
  Global Instance Get_age : Notation.Dot "age" := {
    Notation.dot x := let* x := M.read x in M.pure x.(age) : M _;
  }.
  Global Instance Get_AF_age : Notation.DoubleColon t "age" := {
    Notation.double_colon x := let* x := M.read x in M.pure x.(age) : M _;
  }.
End Person.
End Person.
Definition Person `{ℋ : State.Trait} : Set := M.Val Person.t.

Module  Impl_core_fmt_Debug_for_scoping_rules_ownership_and_rules_partial_moves_main_Person.
Section Impl_core_fmt_Debug_for_scoping_rules_ownership_and_rules_partial_moves_main_Person.
  Context `{ℋ : State.Trait}.
  
  Definition Self : Set :=
    scoping_rules_ownership_and_rules_partial_moves.main.Person.
  
  Definition fmt
      (self : ref Self)
      (f : mut_ref core.fmt.Formatter)
      : M ltac:(core.fmt.Result) :=
    M.function_body
      (let* α0 : ltac:(refine core.fmt.Formatter) := deref f in
      let* α1 : ltac:(refine (mut_ref core.fmt.Formatter)) := borrow_mut α0 in
      let* α2 : ltac:(refine str) := deref (mk_str "Person") in
      let* α3 : ltac:(refine (ref str)) := borrow α2 in
      let* α4 : ltac:(refine str) := deref (mk_str "name") in
      let* α5 : ltac:(refine (ref str)) := borrow α4 in
      let* α6 :
          ltac:(refine
            scoping_rules_ownership_and_rules_partial_moves.main.Person) :=
        deref self in
      let* α7 : ltac:(refine alloc.string.String) := α6.["name"] in
      let* α8 : ltac:(refine (ref alloc.string.String)) := borrow α7 in
      let* α9 : ltac:(refine (ref type not implemented)) :=
        pointer_coercion "Unsize" α8 in
      let* α10 : ltac:(refine str) := deref (mk_str "age") in
      let* α11 : ltac:(refine (ref str)) := borrow α10 in
      let* α12 :
          ltac:(refine
            scoping_rules_ownership_and_rules_partial_moves.main.Person) :=
        deref self in
      let* α13 : ltac:(refine (alloc.boxed.Box u8 alloc.alloc.Global)) :=
        α12.["age"] in
      let* α14 : ltac:(refine (ref (alloc.boxed.Box u8 alloc.alloc.Global))) :=
        borrow α13 in
      let* α15 :
          ltac:(refine (ref (ref (alloc.boxed.Box u8 alloc.alloc.Global)))) :=
        borrow α14 in
      let* α16 : ltac:(refine (ref type not implemented)) :=
        pointer_coercion "Unsize" α15 in
      core.fmt.Formatter::["debug_struct_field2_finish"] α1 α3 α5 α9 α11 α16).
  
  Global Instance AssociatedFunction_fmt : Notation.DoubleColon Self "fmt" := {
    Notation.double_colon := fmt;
  }.
  
  Global Instance ℐ : core.fmt.Debug.Trait Self := {
    core.fmt.Debug.fmt := fmt;
  }.
End Impl_core_fmt_Debug_for_scoping_rules_ownership_and_rules_partial_moves_main_Person.
End Impl_core_fmt_Debug_for_scoping_rules_ownership_and_rules_partial_moves_main_Person.
