(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Definition create_box `{ℋ : State.Trait} : M unit :=
  let* _box1 :=
    let* α0 := M.alloc 3 in
    (alloc.boxed.Box T alloc.alloc.Global)::["new"] α0 in
  M.alloc tt.

(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main `{ℋ : State.Trait} : M unit :=
  let* _box2 :=
    let* α0 := M.alloc 5 in
    (alloc.boxed.Box T alloc.alloc.Global)::["new"] α0 in
  let* _ :=
    let* _box3 :=
      let* α0 := M.alloc 4 in
      (alloc.boxed.Box T alloc.alloc.Global)::["new"] α0 in
    M.alloc tt in
  let* α0 := M.alloc 0 in
  let* α1 := M.alloc 1000 in
  let* α2 :=
    M.alloc
      {| core.ops.range.Range.start := α0; core.ops.range.Range.end := α1; |} in
  let* α3 :=
    (core.iter.traits.collect.IntoIterator.into_iter
        (Self := (core.ops.range.Range u32)))
      α2 in
  let* α4 :=
    match α3 with
    | iter =>
      loop
        (let* _ :=
          let* α0 := borrow_mut iter (core.ops.range.Range u32) in
          let* α1 := deref α0 (core.ops.range.Range u32) in
          let* α2 := borrow_mut α1 (core.ops.range.Range u32) in
          let* α3 :=
            (core.iter.traits.iterator.Iterator.next
                (Self := (core.ops.range.Range u32)))
              α2 in
          match α3 with
          | core.option.Option  =>
            let* α0 := Break in
            never_to_any α0
          | core.option.Option _ =>
            let* _ := scoping_rules_raii.create_box in
            M.alloc tt
          end in
        M.alloc tt)
    end in
  use α4.
