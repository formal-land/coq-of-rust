(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Definition create_box `{ℋ : State.Trait} : M unit :=
  M.function_body
    (let* _box1 : ltac:(refine (alloc.boxed.Box i32 alloc.alloc.Global)) :=
      let* α0 : ltac:(refine i32) := M.alloc 3 in
      (alloc.boxed.Box i32 alloc.alloc.Global)::["new"] α0 in
    M.alloc tt).

(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main `{ℋ : State.Trait} : M unit :=
  M.function_body
    (let* _box2 : ltac:(refine (alloc.boxed.Box i32 alloc.alloc.Global)) :=
      let* α0 : ltac:(refine i32) := M.alloc 5 in
      (alloc.boxed.Box i32 alloc.alloc.Global)::["new"] α0 in
    let* _ : ltac:(refine unit) :=
      let* _box3 : ltac:(refine (alloc.boxed.Box i32 alloc.alloc.Global)) :=
        let* α0 : ltac:(refine i32) := M.alloc 4 in
        (alloc.boxed.Box i32 alloc.alloc.Global)::["new"] α0 in
      M.alloc tt in
    let* α0 : ltac:(refine u32) := M.alloc 0 in
    let* α1 : ltac:(refine u32) := M.alloc 1000 in
    let* α2 : ltac:(refine (core.ops.range.Range u32)) :=
      M.alloc
        {| core.ops.range.Range.start := α0; core.ops.range.Range.end := α1;
        |} in
    let* α3 : ltac:(refine (core.ops.range.Range u32)) :=
      (core.iter.traits.collect.IntoIterator.into_iter
          (Self := core.ops.range.Range u32)
          (Trait := ltac:(refine _)))
        α2 in
    let* α4 := M.read α3 in
    let* α5 : ltac:(refine unit) :=
      match α4 with
      | iter =>
        loop
          (let* _ : ltac:(refine unit) :=
            let* α0 : ltac:(refine (mut_ref (core.ops.range.Range u32))) :=
              borrow_mut iter in
            let* α1 : ltac:(refine (core.option.Option u32)) :=
              (core.iter.traits.iterator.Iterator.next
                  (Self := core.ops.range.Range u32)
                  (Trait := ltac:(refine _)))
                α0 in
            let* α2 := M.read α1 in
            match α2 with
            | core.option.Option.None  =>
              let* α0 : ltac:(refine never) := Break in
              never_to_any α0
            | core.option.Option.Some _ =>
              let* _ : ltac:(refine unit) := scoping_rules_raii.create_box in
              M.alloc tt
            end in
          M.alloc tt)
      end in
    use α5).
