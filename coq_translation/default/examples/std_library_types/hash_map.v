(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Definition call `{ℋ : State.Trait} (number : ref str) : M (ref str) :=
  M.function_body
    (let* α0 := M.read number in
    match α0 with
    | _ =>
      let* α0 : ltac:(refine str) :=
        deref
          (mk_str
            "We're sorry, the call cannot be completed as dialed. 
            Please hang up and try again.") in
      borrow α0
    | _ =>
      let* α0 : ltac:(refine str) :=
        deref
          (mk_str
            "Hello, this is Mr. Awesome's Pizza. My name is Fred.
            What can I get for you today?") in
      borrow α0
    | _ =>
      let* α0 : ltac:(refine str) := deref (mk_str "Hi! Who is this again?") in
      borrow α0
    end).

(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main `{ℋ : State.Trait} : M unit :=
  M.function_body
    (let* contacts :
        ltac:(refine
          (std.collections.hash.map.HashMap
            (ref str)
            (ref str)
            std.collections.hash.map.RandomState)) :=
      (std.collections.hash.map.HashMap
          (ref str)
          (ref str)
          std.collections.hash.map.RandomState)::["new"] in
    let* _ : ltac:(refine (core.option.Option (ref str))) :=
      let* α0 :
          ltac:(refine
            (mut_ref
              (std.collections.hash.map.HashMap
                (ref str)
                (ref str)
                std.collections.hash.map.RandomState))) :=
        borrow_mut contacts in
      (std.collections.hash.map.HashMap
            (ref str)
            (ref str)
            std.collections.hash.map.RandomState)::["insert"]
        α0
        (mk_str "Daniel")
        (mk_str "798-1364") in
    let* _ : ltac:(refine (core.option.Option (ref str))) :=
      let* α0 :
          ltac:(refine
            (mut_ref
              (std.collections.hash.map.HashMap
                (ref str)
                (ref str)
                std.collections.hash.map.RandomState))) :=
        borrow_mut contacts in
      let* α1 : ltac:(refine str) := deref (mk_str "Ashley") in
      let* α2 : ltac:(refine (ref str)) := borrow α1 in
      let* α3 : ltac:(refine str) := deref (mk_str "645-7689") in
      let* α4 : ltac:(refine (ref str)) := borrow α3 in
      (std.collections.hash.map.HashMap
            (ref str)
            (ref str)
            std.collections.hash.map.RandomState)::["insert"]
        α0
        α2
        α4 in
    let* _ : ltac:(refine (core.option.Option (ref str))) :=
      let* α0 :
          ltac:(refine
            (mut_ref
              (std.collections.hash.map.HashMap
                (ref str)
                (ref str)
                std.collections.hash.map.RandomState))) :=
        borrow_mut contacts in
      let* α1 : ltac:(refine str) := deref (mk_str "Katie") in
      let* α2 : ltac:(refine (ref str)) := borrow α1 in
      let* α3 : ltac:(refine str) := deref (mk_str "435-8291") in
      let* α4 : ltac:(refine (ref str)) := borrow α3 in
      (std.collections.hash.map.HashMap
            (ref str)
            (ref str)
            std.collections.hash.map.RandomState)::["insert"]
        α0
        α2
        α4 in
    let* _ : ltac:(refine (core.option.Option (ref str))) :=
      let* α0 :
          ltac:(refine
            (mut_ref
              (std.collections.hash.map.HashMap
                (ref str)
                (ref str)
                std.collections.hash.map.RandomState))) :=
        borrow_mut contacts in
      let* α1 : ltac:(refine str) := deref (mk_str "Robert") in
      let* α2 : ltac:(refine (ref str)) := borrow α1 in
      let* α3 : ltac:(refine str) := deref (mk_str "956-1745") in
      let* α4 : ltac:(refine (ref str)) := borrow α3 in
      (std.collections.hash.map.HashMap
            (ref str)
            (ref str)
            std.collections.hash.map.RandomState)::["insert"]
        α0
        α2
        α4 in
    let* _ : ltac:(refine unit) :=
      let* α0 :
          ltac:(refine
            (ref
              (std.collections.hash.map.HashMap
                (ref str)
                (ref str)
                std.collections.hash.map.RandomState))) :=
        borrow contacts in
      let* α1 : ltac:(refine (ref (ref str))) := borrow (mk_str "Daniel") in
      let* α2 : ltac:(refine (core.option.Option (ref (ref str)))) :=
        (std.collections.hash.map.HashMap
              (ref str)
              (ref str)
              std.collections.hash.map.RandomState)::["get"]
          α0
          α1 in
      let* α3 := M.read α2 in
      match α3 with
      | core.option.Option.Some number =>
        let* _ : ltac:(refine unit) :=
          let* α0 : ltac:(refine (array (ref str))) :=
            M.alloc [ mk_str "Calling Daniel: "; mk_str "
" ] in
          let* α1 : ltac:(refine (ref (array (ref str)))) := borrow α0 in
          let* α2 : ltac:(refine (ref (slice (ref str)))) :=
            pointer_coercion "Unsize" α1 in
          let* α3 : ltac:(refine str) := deref number in
          let* α4 : ltac:(refine (ref str)) := borrow α3 in
          let* α5 : ltac:(refine (ref str)) := hash_map.call α4 in
          let* α6 : ltac:(refine (ref (ref str))) := borrow α5 in
          let* α7 : ltac:(refine core.fmt.rt.Argument) :=
            core.fmt.rt.Argument::["new_display"] α6 in
          let* α8 : ltac:(refine (array core.fmt.rt.Argument)) :=
            M.alloc [ α7 ] in
          let* α9 : ltac:(refine (ref (array core.fmt.rt.Argument))) :=
            borrow α8 in
          let* α10 : ltac:(refine (ref (slice core.fmt.rt.Argument))) :=
            pointer_coercion "Unsize" α9 in
          let* α11 : ltac:(refine core.fmt.Arguments) :=
            core.fmt.Arguments::["new_v1"] α2 α10 in
          std.io.stdio._print α11 in
        M.alloc tt
      | _ =>
        let* _ : ltac:(refine unit) :=
          let* α0 : ltac:(refine (array (ref str))) :=
            M.alloc [ mk_str "Don't have Daniel's number.
" ] in
          let* α1 : ltac:(refine (ref (array (ref str)))) := borrow α0 in
          let* α2 : ltac:(refine (ref (slice (ref str)))) :=
            pointer_coercion "Unsize" α1 in
          let* α3 : ltac:(refine core.fmt.Arguments) :=
            core.fmt.Arguments::["new_const"] α2 in
          std.io.stdio._print α3 in
        M.alloc tt
      end in
    let* _ : ltac:(refine (core.option.Option (ref str))) :=
      let* α0 :
          ltac:(refine
            (mut_ref
              (std.collections.hash.map.HashMap
                (ref str)
                (ref str)
                std.collections.hash.map.RandomState))) :=
        borrow_mut contacts in
      let* α1 : ltac:(refine str) := deref (mk_str "Daniel") in
      let* α2 : ltac:(refine (ref str)) := borrow α1 in
      let* α3 : ltac:(refine str) := deref (mk_str "164-6743") in
      let* α4 : ltac:(refine (ref str)) := borrow α3 in
      (std.collections.hash.map.HashMap
            (ref str)
            (ref str)
            std.collections.hash.map.RandomState)::["insert"]
        α0
        α2
        α4 in
    let* _ : ltac:(refine unit) :=
      let* α0 :
          ltac:(refine
            (ref
              (std.collections.hash.map.HashMap
                (ref str)
                (ref str)
                std.collections.hash.map.RandomState))) :=
        borrow contacts in
      let* α1 : ltac:(refine (ref (ref str))) := borrow (mk_str "Ashley") in
      let* α2 : ltac:(refine (core.option.Option (ref (ref str)))) :=
        (std.collections.hash.map.HashMap
              (ref str)
              (ref str)
              std.collections.hash.map.RandomState)::["get"]
          α0
          α1 in
      let* α3 := M.read α2 in
      match α3 with
      | core.option.Option.Some number =>
        let* _ : ltac:(refine unit) :=
          let* α0 : ltac:(refine (array (ref str))) :=
            M.alloc [ mk_str "Calling Ashley: "; mk_str "
" ] in
          let* α1 : ltac:(refine (ref (array (ref str)))) := borrow α0 in
          let* α2 : ltac:(refine (ref (slice (ref str)))) :=
            pointer_coercion "Unsize" α1 in
          let* α3 : ltac:(refine str) := deref number in
          let* α4 : ltac:(refine (ref str)) := borrow α3 in
          let* α5 : ltac:(refine (ref str)) := hash_map.call α4 in
          let* α6 : ltac:(refine (ref (ref str))) := borrow α5 in
          let* α7 : ltac:(refine core.fmt.rt.Argument) :=
            core.fmt.rt.Argument::["new_display"] α6 in
          let* α8 : ltac:(refine (array core.fmt.rt.Argument)) :=
            M.alloc [ α7 ] in
          let* α9 : ltac:(refine (ref (array core.fmt.rt.Argument))) :=
            borrow α8 in
          let* α10 : ltac:(refine (ref (slice core.fmt.rt.Argument))) :=
            pointer_coercion "Unsize" α9 in
          let* α11 : ltac:(refine core.fmt.Arguments) :=
            core.fmt.Arguments::["new_v1"] α2 α10 in
          std.io.stdio._print α11 in
        M.alloc tt
      | _ =>
        let* _ : ltac:(refine unit) :=
          let* α0 : ltac:(refine (array (ref str))) :=
            M.alloc [ mk_str "Don't have Ashley's number.
" ] in
          let* α1 : ltac:(refine (ref (array (ref str)))) := borrow α0 in
          let* α2 : ltac:(refine (ref (slice (ref str)))) :=
            pointer_coercion "Unsize" α1 in
          let* α3 : ltac:(refine core.fmt.Arguments) :=
            core.fmt.Arguments::["new_const"] α2 in
          std.io.stdio._print α3 in
        M.alloc tt
      end in
    let* _ : ltac:(refine (core.option.Option (ref str))) :=
      let* α0 :
          ltac:(refine
            (mut_ref
              (std.collections.hash.map.HashMap
                (ref str)
                (ref str)
                std.collections.hash.map.RandomState))) :=
        borrow_mut contacts in
      let* α1 : ltac:(refine (ref (ref str))) := borrow (mk_str "Ashley") in
      (std.collections.hash.map.HashMap
            (ref str)
            (ref str)
            std.collections.hash.map.RandomState)::["remove"]
        α0
        α1 in
    let* α0 :
        ltac:(refine
          (ref
            (std.collections.hash.map.HashMap
              (ref str)
              (ref str)
              std.collections.hash.map.RandomState))) :=
      borrow contacts in
    let* α1 :
        ltac:(refine (std.collections.hash.map.Iter (ref str) (ref str))) :=
      (std.collections.hash.map.HashMap
            (ref str)
            (ref str)
            std.collections.hash.map.RandomState)::["iter"]
        α0 in
    let* α2 :
        ltac:(refine (std.collections.hash.map.Iter (ref str) (ref str))) :=
      (core.iter.traits.collect.IntoIterator.into_iter
          (Self := std.collections.hash.map.Iter (ref str) (ref str))
          (Trait := ltac:(refine _)))
        α1 in
    let* α3 := M.read α2 in
    let* α4 : ltac:(refine unit) :=
      match α3 with
      | iter =>
        loop
          (let* _ : ltac:(refine unit) :=
            let* α0 :
                ltac:(refine
                  (mut_ref
                    (std.collections.hash.map.Iter (ref str) (ref str)))) :=
              borrow_mut iter in
            let* α1 :
                ltac:(refine
                  (core.option.Option
                    (M.Val ((ref (ref str)) * (ref (ref str)))))) :=
              (core.iter.traits.iterator.Iterator.next
                  (Self := std.collections.hash.map.Iter (ref str) (ref str))
                  (Trait := ltac:(refine _)))
                α0 in
            let* α2 := M.read α1 in
            match α2 with
            | core.option.Option.None  =>
              let* α0 : ltac:(refine never) := Break in
              never_to_any α0
            | core.option.Option.Some (contact, number) =>
              let* _ : ltac:(refine unit) :=
                let* _ : ltac:(refine unit) :=
                  let* α0 : ltac:(refine (array (ref str))) :=
                    M.alloc [ mk_str "Calling "; mk_str ": "; mk_str "
" ] in
                  let* α1 : ltac:(refine (ref (array (ref str)))) :=
                    borrow α0 in
                  let* α2 : ltac:(refine (ref (slice (ref str)))) :=
                    pointer_coercion "Unsize" α1 in
                  let* α3 : ltac:(refine (ref (ref (ref str)))) :=
                    borrow contact in
                  let* α4 : ltac:(refine core.fmt.rt.Argument) :=
                    core.fmt.rt.Argument::["new_display"] α3 in
                  let* α5 : ltac:(refine str) := deref number in
                  let* α6 : ltac:(refine (ref str)) := borrow α5 in
                  let* α7 : ltac:(refine (ref str)) := hash_map.call α6 in
                  let* α8 : ltac:(refine (ref (ref str))) := borrow α7 in
                  let* α9 : ltac:(refine core.fmt.rt.Argument) :=
                    core.fmt.rt.Argument::["new_display"] α8 in
                  let* α10 : ltac:(refine (array core.fmt.rt.Argument)) :=
                    M.alloc [ α4; α9 ] in
                  let* α11 : ltac:(refine (ref (array core.fmt.rt.Argument))) :=
                    borrow α10 in
                  let* α12 : ltac:(refine (ref (slice core.fmt.rt.Argument))) :=
                    pointer_coercion "Unsize" α11 in
                  let* α13 : ltac:(refine core.fmt.Arguments) :=
                    core.fmt.Arguments::["new_v1"] α2 α12 in
                  std.io.stdio._print α13 in
                M.alloc tt in
              M.alloc tt
            end in
          M.alloc tt)
      end in
    use α4).
