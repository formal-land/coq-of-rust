(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main `{ℋ : State.Trait} : M unit :=
  M.function_body
    (let pangram := mk_str "the quick brown fox jumps over the lazy dog" in
    let* _ : ltac:(refine unit) :=
      let* _ : ltac:(refine unit) :=
        let* α0 : ltac:(refine (array (ref str))) :=
          M.alloc [ mk_str "Pangram: "; mk_str "
" ] in
        let* α1 : ltac:(refine (ref (array (ref str)))) := borrow α0 in
        let* α2 : ltac:(refine (ref (slice (ref str)))) :=
          pointer_coercion "Unsize" α1 in
        let* α3 : ltac:(refine (ref (ref str))) := borrow pangram in
        let* α4 : ltac:(refine core.fmt.rt.Argument) :=
          core.fmt.rt.Argument::["new_display"] α3 in
        let* α5 : ltac:(refine (array core.fmt.rt.Argument)) :=
          M.alloc [ α4 ] in
        let* α6 : ltac:(refine (ref (array core.fmt.rt.Argument))) :=
          borrow α5 in
        let* α7 : ltac:(refine (ref (slice core.fmt.rt.Argument))) :=
          pointer_coercion "Unsize" α6 in
        let* α8 : ltac:(refine core.fmt.Arguments) :=
          core.fmt.Arguments::["new_v1"] α2 α7 in
        std.io.stdio._print α8 in
      M.alloc tt in
    let* _ : ltac:(refine unit) :=
      let* _ : ltac:(refine unit) :=
        let* α0 : ltac:(refine (array (ref str))) :=
          M.alloc [ mk_str "Words in reverse
" ] in
        let* α1 : ltac:(refine (ref (array (ref str)))) := borrow α0 in
        let* α2 : ltac:(refine (ref (slice (ref str)))) :=
          pointer_coercion "Unsize" α1 in
        let* α3 : ltac:(refine core.fmt.Arguments) :=
          core.fmt.Arguments::["new_const"] α2 in
        std.io.stdio._print α3 in
      M.alloc tt in
    let* _ : ltac:(refine unit) :=
      let* α0 : ltac:(refine str) := deref pangram in
      let* α1 : ltac:(refine (ref str)) := borrow α0 in
      let* α2 : ltac:(refine core.str.iter.SplitWhitespace) :=
        str::["split_whitespace"] α1 in
      let* α3 :
          ltac:(refine
            (core.iter.adapters.rev.Rev core.str.iter.SplitWhitespace)) :=
        (core.iter.traits.iterator.Iterator.rev
            (Self := core.str.iter.SplitWhitespace)
            (Trait := ltac:(refine _)))
          α2 in
      let* α4 :
          ltac:(refine
            (core.iter.adapters.rev.Rev core.str.iter.SplitWhitespace)) :=
        (core.iter.traits.collect.IntoIterator.into_iter
            (Self := core.iter.adapters.rev.Rev core.str.iter.SplitWhitespace)
            (Trait := ltac:(refine _)))
          α3 in
      let* α5 := M.read α4 in
      let* α6 : ltac:(refine unit) :=
        match α5 with
        | iter =>
          loop
            (let* _ : ltac:(refine unit) :=
              let* α0 :
                  ltac:(refine
                    (mut_ref
                      (core.iter.adapters.rev.Rev
                        core.str.iter.SplitWhitespace))) :=
                borrow_mut iter in
              let* α1 : ltac:(refine (core.option.Option (ref str))) :=
                (core.iter.traits.iterator.Iterator.next
                    (Self :=
                      core.iter.adapters.rev.Rev core.str.iter.SplitWhitespace)
                    (Trait := ltac:(refine _)))
                  α0 in
              let* α2 := M.read α1 in
              match α2 with
              | core.option.Option.None  =>
                let* α0 : ltac:(refine never) := Break in
                never_to_any α0
              | core.option.Option.Some word =>
                let* _ : ltac:(refine unit) :=
                  let* _ : ltac:(refine unit) :=
                    let* α0 : ltac:(refine (array (ref str))) :=
                      M.alloc [ mk_str "> "; mk_str "
" ] in
                    let* α1 : ltac:(refine (ref (array (ref str)))) :=
                      borrow α0 in
                    let* α2 : ltac:(refine (ref (slice (ref str)))) :=
                      pointer_coercion "Unsize" α1 in
                    let* α3 : ltac:(refine (ref (ref str))) := borrow word in
                    let* α4 : ltac:(refine core.fmt.rt.Argument) :=
                      core.fmt.rt.Argument::["new_display"] α3 in
                    let* α5 : ltac:(refine (array core.fmt.rt.Argument)) :=
                      M.alloc [ α4 ] in
                    let* α6 :
                        ltac:(refine (ref (array core.fmt.rt.Argument))) :=
                      borrow α5 in
                    let* α7 :
                        ltac:(refine (ref (slice core.fmt.rt.Argument))) :=
                      pointer_coercion "Unsize" α6 in
                    let* α8 : ltac:(refine core.fmt.Arguments) :=
                      core.fmt.Arguments::["new_v1"] α2 α7 in
                    std.io.stdio._print α8 in
                  M.alloc tt in
                M.alloc tt
              end in
            M.alloc tt)
        end in
      use α6 in
    let* chars : ltac:(refine (alloc.vec.Vec char alloc.alloc.Global)) :=
      let* α0 : ltac:(refine str) := deref pangram in
      let* α1 : ltac:(refine (ref str)) := borrow α0 in
      let* α2 : ltac:(refine core.str.iter.Chars) := str::["chars"] α1 in
      (core.iter.traits.iterator.Iterator.collect
          (Self := core.str.iter.Chars)
          (Trait := ltac:(refine _)))
        α2 in
    let* _ : ltac:(refine unit) :=
      let* α0 :
          ltac:(refine (mut_ref (alloc.vec.Vec char alloc.alloc.Global))) :=
        borrow_mut chars in
      let* α1 : ltac:(refine (mut_ref (slice char))) :=
        (core.ops.deref.DerefMut.deref_mut
            (Self := alloc.vec.Vec char alloc.alloc.Global)
            (Trait := ltac:(refine _)))
          α0 in
      let* α2 : ltac:(refine (slice char)) := deref α1 in
      let* α3 : ltac:(refine (mut_ref (slice char))) := borrow_mut α2 in
      (slice char)::["sort"] α3 in
    let* _ : ltac:(refine unit) :=
      let* α0 :
          ltac:(refine (mut_ref (alloc.vec.Vec char alloc.alloc.Global))) :=
        borrow_mut chars in
      (alloc.vec.Vec char alloc.alloc.Global)::["dedup"] α0 in
    let* string : ltac:(refine alloc.string.String) :=
      alloc.string.String::["new"] in
    let* _ : ltac:(refine unit) :=
      let* α0 :
          ltac:(refine
            (alloc.vec.into_iter.IntoIter char alloc.alloc.Global)) :=
        (core.iter.traits.collect.IntoIterator.into_iter
            (Self := alloc.vec.Vec char alloc.alloc.Global)
            (Trait := ltac:(refine _)))
          chars in
      let* α1 := M.read α0 in
      let* α2 : ltac:(refine unit) :=
        match α1 with
        | iter =>
          loop
            (let* _ : ltac:(refine unit) :=
              let* α0 :
                  ltac:(refine
                    (mut_ref
                      (alloc.vec.into_iter.IntoIter
                        char
                        alloc.alloc.Global))) :=
                borrow_mut iter in
              let* α1 : ltac:(refine (core.option.Option char)) :=
                (core.iter.traits.iterator.Iterator.next
                    (Self :=
                      alloc.vec.into_iter.IntoIter char alloc.alloc.Global)
                    (Trait := ltac:(refine _)))
                  α0 in
              let* α2 := M.read α1 in
              match α2 with
              | core.option.Option.None  =>
                let* α0 : ltac:(refine never) := Break in
                never_to_any α0
              | core.option.Option.Some c =>
                let* _ : ltac:(refine unit) :=
                  let* α0 : ltac:(refine (mut_ref alloc.string.String)) :=
                    borrow_mut string in
                  alloc.string.String::["push"] α0 c in
                let* _ : ltac:(refine unit) :=
                  let* α0 : ltac:(refine (mut_ref alloc.string.String)) :=
                    borrow_mut string in
                  let* α1 : ltac:(refine str) := deref (mk_str ", ") in
                  let* α2 : ltac:(refine (ref str)) := borrow α1 in
                  alloc.string.String::["push_str"] α0 α2 in
                M.alloc tt
              end in
            M.alloc tt)
        end in
      use α2 in
    let* chars_to_trim : ltac:(refine (ref (slice char))) :=
      let* α0 : ltac:(refine char) := M.alloc " "%char in
      let* α1 : ltac:(refine char) := M.alloc ","%char in
      let* α2 : ltac:(refine (array char)) := M.alloc [ α0; α1 ] in
      let* α3 : ltac:(refine (ref (array char))) := borrow α2 in
      pointer_coercion "Unsize" α3 in
    let* trimmed_str : ltac:(refine (ref str)) :=
      let* α0 : ltac:(refine (ref alloc.string.String)) := borrow string in
      let* α1 : ltac:(refine (ref str)) :=
        (core.ops.deref.Deref.deref
            (Self := alloc.string.String)
            (Trait := ltac:(refine _)))
          α0 in
      let* α2 : ltac:(refine str) := deref α1 in
      let* α3 : ltac:(refine (ref str)) := borrow α2 in
      let* α4 : ltac:(refine (ref str)) :=
        str::["trim_matches"] α3 chars_to_trim in
      let* α5 : ltac:(refine str) := deref α4 in
      borrow α5 in
    let* _ : ltac:(refine unit) :=
      let* _ : ltac:(refine unit) :=
        let* α0 : ltac:(refine (array (ref str))) :=
          M.alloc [ mk_str "Used characters: "; mk_str "
" ] in
        let* α1 : ltac:(refine (ref (array (ref str)))) := borrow α0 in
        let* α2 : ltac:(refine (ref (slice (ref str)))) :=
          pointer_coercion "Unsize" α1 in
        let* α3 : ltac:(refine (ref (ref str))) := borrow trimmed_str in
        let* α4 : ltac:(refine core.fmt.rt.Argument) :=
          core.fmt.rt.Argument::["new_display"] α3 in
        let* α5 : ltac:(refine (array core.fmt.rt.Argument)) :=
          M.alloc [ α4 ] in
        let* α6 : ltac:(refine (ref (array core.fmt.rt.Argument))) :=
          borrow α5 in
        let* α7 : ltac:(refine (ref (slice core.fmt.rt.Argument))) :=
          pointer_coercion "Unsize" α6 in
        let* α8 : ltac:(refine core.fmt.Arguments) :=
          core.fmt.Arguments::["new_v1"] α2 α7 in
        std.io.stdio._print α8 in
      M.alloc tt in
    let* alice : ltac:(refine alloc.string.String) :=
      (core.convert.From.from
          (Self := alloc.string.String)
          (Trait := ltac:(refine _)))
        (mk_str "I like dogs") in
    let* bob : ltac:(refine alloc.string.String) :=
      let* α0 : ltac:(refine (ref alloc.string.String)) := borrow alice in
      let* α1 : ltac:(refine (ref str)) :=
        (core.ops.deref.Deref.deref
            (Self := alloc.string.String)
            (Trait := ltac:(refine _)))
          α0 in
      let* α2 : ltac:(refine str) := deref α1 in
      let* α3 : ltac:(refine (ref str)) := borrow α2 in
      let* α4 : ltac:(refine str) := deref (mk_str "cat") in
      let* α5 : ltac:(refine (ref str)) := borrow α4 in
      str::["replace"] α3 (mk_str "dog") α5 in
    let* _ : ltac:(refine unit) :=
      let* _ : ltac:(refine unit) :=
        let* α0 : ltac:(refine (array (ref str))) :=
          M.alloc [ mk_str "Alice says: "; mk_str "
" ] in
        let* α1 : ltac:(refine (ref (array (ref str)))) := borrow α0 in
        let* α2 : ltac:(refine (ref (slice (ref str)))) :=
          pointer_coercion "Unsize" α1 in
        let* α3 : ltac:(refine (ref alloc.string.String)) := borrow alice in
        let* α4 : ltac:(refine core.fmt.rt.Argument) :=
          core.fmt.rt.Argument::["new_display"] α3 in
        let* α5 : ltac:(refine (array core.fmt.rt.Argument)) :=
          M.alloc [ α4 ] in
        let* α6 : ltac:(refine (ref (array core.fmt.rt.Argument))) :=
          borrow α5 in
        let* α7 : ltac:(refine (ref (slice core.fmt.rt.Argument))) :=
          pointer_coercion "Unsize" α6 in
        let* α8 : ltac:(refine core.fmt.Arguments) :=
          core.fmt.Arguments::["new_v1"] α2 α7 in
        std.io.stdio._print α8 in
      M.alloc tt in
    let* _ : ltac:(refine unit) :=
      let* _ : ltac:(refine unit) :=
        let* α0 : ltac:(refine (array (ref str))) :=
          M.alloc [ mk_str "Bob says: "; mk_str "
" ] in
        let* α1 : ltac:(refine (ref (array (ref str)))) := borrow α0 in
        let* α2 : ltac:(refine (ref (slice (ref str)))) :=
          pointer_coercion "Unsize" α1 in
        let* α3 : ltac:(refine (ref alloc.string.String)) := borrow bob in
        let* α4 : ltac:(refine core.fmt.rt.Argument) :=
          core.fmt.rt.Argument::["new_display"] α3 in
        let* α5 : ltac:(refine (array core.fmt.rt.Argument)) :=
          M.alloc [ α4 ] in
        let* α6 : ltac:(refine (ref (array core.fmt.rt.Argument))) :=
          borrow α5 in
        let* α7 : ltac:(refine (ref (slice core.fmt.rt.Argument))) :=
          pointer_coercion "Unsize" α6 in
        let* α8 : ltac:(refine core.fmt.Arguments) :=
          core.fmt.Arguments::["new_v1"] α2 α7 in
        std.io.stdio._print α8 in
      M.alloc tt in
    M.alloc tt).
