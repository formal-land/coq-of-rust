(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Definition NTHREADS `{ℋ : State.Trait} : i32 := M.run (M.alloc 3).

(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main `{ℋ : State.Trait} : M unit :=
  M.function_body
    (let* '(tx, rx) :
        ltac:(refine
          (M.Val
            ((std.sync.mpsc.Sender i32) * (std.sync.mpsc.Receiver i32)))) :=
      std.sync.mpsc.channel in
    let* children :
        ltac:(refine
          (alloc.vec.Vec (std.thread.JoinHandle unit) alloc.alloc.Global)) :=
      (alloc.vec.Vec
          (std.thread.JoinHandle unit)
          alloc.alloc.Global)::["new"] in
    let* _ : ltac:(refine unit) :=
      let* α0 : ltac:(refine i32) := M.alloc 0 in
      let* α1 : ltac:(refine i32) := deref channels.NTHREADS in
      let* α2 : ltac:(refine (core.ops.range.Range i32)) :=
        M.alloc
          {| core.ops.range.Range.start := α0; core.ops.range.Range.end := α1;
          |} in
      let* α3 : ltac:(refine (core.ops.range.Range i32)) :=
        (core.iter.traits.collect.IntoIterator.into_iter
            (Self := core.ops.range.Range i32)
            (Trait := ltac:(refine _)))
          α2 in
      let* α4 := M.read α3 in
      let* α5 : ltac:(refine unit) :=
        match α4 with
        | iter =>
          loop
            (let* _ : ltac:(refine unit) :=
              let* α0 : ltac:(refine (mut_ref (core.ops.range.Range i32))) :=
                borrow_mut iter in
              let* α1 : ltac:(refine (core.option.Option i32)) :=
                (core.iter.traits.iterator.Iterator.next
                    (Self := core.ops.range.Range i32)
                    (Trait := ltac:(refine _)))
                  α0 in
              let* α2 := M.read α1 in
              match α2 with
              | core.option.Option.None  =>
                let* α0 : ltac:(refine never) := Break in
                never_to_any α0
              | core.option.Option.Some id =>
                let* thread_tx : ltac:(refine (std.sync.mpsc.Sender i32)) :=
                  let* α0 : ltac:(refine (ref (std.sync.mpsc.Sender i32))) :=
                    borrow tx in
                  (core.clone.Clone.clone
                      (Self := std.sync.mpsc.Sender i32)
                      (Trait := ltac:(refine _)))
                    α0 in
                let* child : ltac:(refine (std.thread.JoinHandle unit)) :=
                  std.thread.spawn
                    (let* _ : ltac:(refine unit) :=
                      let* α0 :
                          ltac:(refine (ref (std.sync.mpsc.Sender i32))) :=
                        borrow thread_tx in
                      let* α1 :
                          ltac:(refine
                            (core.result.Result
                              unit
                              (std.sync.mpsc.SendError i32))) :=
                        (std.sync.mpsc.Sender i32)::["send"] α0 id in
                      (core.result.Result
                            unit
                            (std.sync.mpsc.SendError i32))::["unwrap"]
                        α1 in
                    let* _ : ltac:(refine unit) :=
                      let* _ : ltac:(refine unit) :=
                        let* α0 : ltac:(refine (array (ref str))) :=
                          M.alloc [ mk_str "thread "; mk_str " finished
" ] in
                        let* α1 : ltac:(refine (ref (array (ref str)))) :=
                          borrow α0 in
                        let* α2 : ltac:(refine (ref (slice (ref str)))) :=
                          pointer_coercion "Unsize" α1 in
                        let* α3 : ltac:(refine (ref i32)) := borrow id in
                        let* α4 : ltac:(refine core.fmt.rt.Argument) :=
                          core.fmt.rt.Argument::["new_display"] α3 in
                        let* α5 : ltac:(refine (array core.fmt.rt.Argument)) :=
                          M.alloc [ α4 ] in
                        let* α6 :
                            ltac:(refine (ref (array core.fmt.rt.Argument))) :=
                          borrow α5 in
                        let* α7 :
                            ltac:(refine (ref (slice core.fmt.rt.Argument))) :=
                          pointer_coercion "Unsize" α6 in
                        let* α8 : ltac:(refine core.fmt.Arguments) :=
                          core.fmt.Arguments::["new_v1"] α2 α7 in
                        std.io.stdio._print α8 in
                      M.alloc tt in
                    M.alloc tt) in
                let* _ : ltac:(refine unit) :=
                  let* α0 :
                      ltac:(refine
                        (mut_ref
                          (alloc.vec.Vec
                            (std.thread.JoinHandle unit)
                            alloc.alloc.Global))) :=
                    borrow_mut children in
                  (alloc.vec.Vec
                        (std.thread.JoinHandle unit)
                        alloc.alloc.Global)::["push"]
                    α0
                    child in
                M.alloc tt
              end in
            M.alloc tt)
        end in
      use α5 in
    let* ids :
        ltac:(refine
          (alloc.vec.Vec
            (core.result.Result i32 std.sync.mpsc.RecvError)
            alloc.alloc.Global)) :=
      let* α0 : ltac:(refine i32) := deref channels.NTHREADS in
      let* α1 : ltac:(refine usize) := cast α0 in
      (alloc.vec.Vec
            (core.result.Result i32 std.sync.mpsc.RecvError)
            alloc.alloc.Global)::["with_capacity"]
        α1 in
    let* _ : ltac:(refine unit) :=
      let* α0 : ltac:(refine i32) := M.alloc 0 in
      let* α1 : ltac:(refine i32) := deref channels.NTHREADS in
      let* α2 : ltac:(refine (core.ops.range.Range i32)) :=
        M.alloc
          {| core.ops.range.Range.start := α0; core.ops.range.Range.end := α1;
          |} in
      let* α3 : ltac:(refine (core.ops.range.Range i32)) :=
        (core.iter.traits.collect.IntoIterator.into_iter
            (Self := core.ops.range.Range i32)
            (Trait := ltac:(refine _)))
          α2 in
      let* α4 := M.read α3 in
      let* α5 : ltac:(refine unit) :=
        match α4 with
        | iter =>
          loop
            (let* _ : ltac:(refine unit) :=
              let* α0 : ltac:(refine (mut_ref (core.ops.range.Range i32))) :=
                borrow_mut iter in
              let* α1 : ltac:(refine (core.option.Option i32)) :=
                (core.iter.traits.iterator.Iterator.next
                    (Self := core.ops.range.Range i32)
                    (Trait := ltac:(refine _)))
                  α0 in
              let* α2 := M.read α1 in
              match α2 with
              | core.option.Option.None  =>
                let* α0 : ltac:(refine never) := Break in
                never_to_any α0
              | core.option.Option.Some _ =>
                let* _ : ltac:(refine unit) :=
                  let* α0 :
                      ltac:(refine
                        (mut_ref
                          (alloc.vec.Vec
                            (core.result.Result i32 std.sync.mpsc.RecvError)
                            alloc.alloc.Global))) :=
                    borrow_mut ids in
                  let* α1 : ltac:(refine (ref (std.sync.mpsc.Receiver i32))) :=
                    borrow rx in
                  let* α2 :
                      ltac:(refine
                        (core.result.Result i32 std.sync.mpsc.RecvError)) :=
                    (std.sync.mpsc.Receiver i32)::["recv"] α1 in
                  (alloc.vec.Vec
                        (core.result.Result i32 std.sync.mpsc.RecvError)
                        alloc.alloc.Global)::["push"]
                    α0
                    α2 in
                M.alloc tt
              end in
            M.alloc tt)
        end in
      use α5 in
    let* _ : ltac:(refine unit) :=
      let* α0 :
          ltac:(refine
            (alloc.vec.into_iter.IntoIter
              (std.thread.JoinHandle unit)
              alloc.alloc.Global)) :=
        (core.iter.traits.collect.IntoIterator.into_iter
            (Self :=
              alloc.vec.Vec (std.thread.JoinHandle unit) alloc.alloc.Global)
            (Trait := ltac:(refine _)))
          children in
      let* α1 := M.read α0 in
      let* α2 : ltac:(refine unit) :=
        match α1 with
        | iter =>
          loop
            (let* _ : ltac:(refine unit) :=
              let* α0 :
                  ltac:(refine
                    (mut_ref
                      (alloc.vec.into_iter.IntoIter
                        (std.thread.JoinHandle unit)
                        alloc.alloc.Global))) :=
                borrow_mut iter in
              let* α1 :
                  ltac:(refine
                    (core.option.Option (std.thread.JoinHandle unit))) :=
                (core.iter.traits.iterator.Iterator.next
                    (Self :=
                      alloc.vec.into_iter.IntoIter
                        (std.thread.JoinHandle unit)
                        alloc.alloc.Global)
                    (Trait := ltac:(refine _)))
                  α0 in
              let* α2 := M.read α1 in
              match α2 with
              | core.option.Option.None  =>
                let* α0 : ltac:(refine never) := Break in
                never_to_any α0
              | core.option.Option.Some child =>
                let* _ : ltac:(refine unit) :=
                  let* α0 :
                      ltac:(refine
                        (core.result.Result
                          unit
                          (alloc.boxed.Box
                            type not implemented
                            alloc.alloc.Global))) :=
                    (std.thread.JoinHandle unit)::["join"] child in
                  let* α1 : ltac:(refine str) :=
                    deref (mk_str "oops! the child thread panicked") in
                  let* α2 : ltac:(refine (ref str)) := borrow α1 in
                  (core.result.Result
                        unit
                        (alloc.boxed.Box
                          type not implemented
                          alloc.alloc.Global))::["expect"]
                    α0
                    α2 in
                M.alloc tt
              end in
            M.alloc tt)
        end in
      use α2 in
    let* _ : ltac:(refine unit) :=
      let* _ : ltac:(refine unit) :=
        let* α0 : ltac:(refine (array (ref str))) :=
          M.alloc [ mk_str ""; mk_str "
" ] in
        let* α1 : ltac:(refine (ref (array (ref str)))) := borrow α0 in
        let* α2 : ltac:(refine (ref (slice (ref str)))) :=
          pointer_coercion "Unsize" α1 in
        let* α3 :
            ltac:(refine
              (ref
                (alloc.vec.Vec
                  (core.result.Result i32 std.sync.mpsc.RecvError)
                  alloc.alloc.Global))) :=
          borrow ids in
        let* α4 : ltac:(refine core.fmt.rt.Argument) :=
          core.fmt.rt.Argument::["new_debug"] α3 in
        let* α5 : ltac:(refine (array core.fmt.rt.Argument)) :=
          M.alloc [ α4 ] in
        let* α6 : ltac:(refine (ref (array core.fmt.rt.Argument))) :=
          borrow α5 in
        let* α7 : ltac:(refine (ref (slice core.fmt.rt.Argument))) :=
          pointer_coercion "Unsize" α6 in
        let* α8 : ltac:(refine core.fmt.Arguments) :=
          core.fmt.Arguments::["new_v1"] α2 α7 in
        std.io.stdio._print α8 in
      M.alloc tt in
    M.alloc tt).
