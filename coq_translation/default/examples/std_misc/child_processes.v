(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main `{ℋ : State.Trait} : M unit :=
  M.function_body
    (let* output : ltac:(refine std.process.Output) :=
      let* α0 : ltac:(refine std.process.Command) :=
        std.process.Command::["new"] (mk_str "rustc") in
      let* α1 : ltac:(refine (mut_ref std.process.Command)) := borrow_mut α0 in
      let* α2 : ltac:(refine (mut_ref std.process.Command)) :=
        std.process.Command::["arg"] α1 (mk_str "--version") in
      let* α3 : ltac:(refine std.process.Command) := deref α2 in
      let* α4 : ltac:(refine (mut_ref std.process.Command)) := borrow_mut α3 in
      let* α5 :
          ltac:(refine
            (core.result.Result std.process.Output std.io.error.Error)) :=
        std.process.Command::["output"] α4 in
      (core.result.Result
            std.process.Output
            std.io.error.Error)::["unwrap_or_else"]
        α5
        (let* α0 : ltac:(refine (array (ref str))) :=
          M.alloc [ mk_str "failed to execute process: " ] in
        let* α1 : ltac:(refine (ref (array (ref str)))) := borrow α0 in
        let* α2 : ltac:(refine (ref (slice (ref str)))) :=
          pointer_coercion "Unsize" α1 in
        let* α3 : ltac:(refine (ref std.io.error.Error)) := borrow e in
        let* α4 : ltac:(refine core.fmt.rt.Argument) :=
          core.fmt.rt.Argument::["new_display"] α3 in
        let* α5 : ltac:(refine (array core.fmt.rt.Argument)) :=
          M.alloc [ α4 ] in
        let* α6 : ltac:(refine (ref (array core.fmt.rt.Argument))) :=
          borrow α5 in
        let* α7 : ltac:(refine (ref (slice core.fmt.rt.Argument))) :=
          pointer_coercion "Unsize" α6 in
        let* α8 : ltac:(refine core.fmt.Arguments) :=
          core.fmt.Arguments::["new_v1"] α2 α7 in
        let* α9 : ltac:(refine never) := core.panicking.panic_fmt α8 in
        never_to_any α9) in
    let* α0 : ltac:(refine std.process.ExitStatus) := output.["status"] in
    let* α1 : ltac:(refine (ref std.process.ExitStatus)) := borrow α0 in
    let* α2 : ltac:(refine bool) := std.process.ExitStatus::["success"] α1 in
    let* α3 : ltac:(refine bool) := use α2 in
    if (α3 : bool) then
      let* s : ltac:(refine (alloc.borrow.Cow str)) :=
        let* α0 : ltac:(refine (alloc.vec.Vec u8 alloc.alloc.Global)) :=
          output.["stdout"] in
        let* α1 : ltac:(refine (ref (alloc.vec.Vec u8 alloc.alloc.Global))) :=
          borrow α0 in
        let* α2 : ltac:(refine (ref (slice u8))) :=
          (core.ops.deref.Deref.deref
              (Self := alloc.vec.Vec u8 alloc.alloc.Global)
              (Trait := ltac:(refine _)))
            α1 in
        let* α3 : ltac:(refine (slice u8)) := deref α2 in
        let* α4 : ltac:(refine (ref (slice u8))) := borrow α3 in
        alloc.string.String::["from_utf8_lossy"] α4 in
      let* _ : ltac:(refine unit) :=
        let* _ : ltac:(refine unit) :=
          let* α0 : ltac:(refine (array (ref str))) :=
            M.alloc [ mk_str "rustc succeeded and stdout was:
" ] in
          let* α1 : ltac:(refine (ref (array (ref str)))) := borrow α0 in
          let* α2 : ltac:(refine (ref (slice (ref str)))) :=
            pointer_coercion "Unsize" α1 in
          let* α3 : ltac:(refine (ref (alloc.borrow.Cow str))) := borrow s in
          let* α4 : ltac:(refine core.fmt.rt.Argument) :=
            core.fmt.rt.Argument::["new_display"] α3 in
          let* α5 : ltac:(refine (array core.fmt.rt.Argument)) :=
            M.alloc [ α4 ] in
          let* α6 : ltac:(refine (ref (array core.fmt.rt.Argument))) :=
            borrow α5 in
          let* α7 : ltac:(refine (ref (slice core.fmt.rt.Argument))) :=
            pointer_coercion "Unsize" α6 in
          let* α8 : ltac:(refine core.fmt.Arguments) :=
            core.fmt.Arguments::["new_v1"] α2 α7 in
          std.io.stdio._print α8 in
        M.alloc tt in
      M.alloc tt
    else
      let* s : ltac:(refine (alloc.borrow.Cow str)) :=
        let* α0 : ltac:(refine (alloc.vec.Vec u8 alloc.alloc.Global)) :=
          output.["stderr"] in
        let* α1 : ltac:(refine (ref (alloc.vec.Vec u8 alloc.alloc.Global))) :=
          borrow α0 in
        let* α2 : ltac:(refine (ref (slice u8))) :=
          (core.ops.deref.Deref.deref
              (Self := alloc.vec.Vec u8 alloc.alloc.Global)
              (Trait := ltac:(refine _)))
            α1 in
        let* α3 : ltac:(refine (slice u8)) := deref α2 in
        let* α4 : ltac:(refine (ref (slice u8))) := borrow α3 in
        alloc.string.String::["from_utf8_lossy"] α4 in
      let* _ : ltac:(refine unit) :=
        let* _ : ltac:(refine unit) :=
          let* α0 : ltac:(refine (array (ref str))) :=
            M.alloc [ mk_str "rustc failed and stderr was:
" ] in
          let* α1 : ltac:(refine (ref (array (ref str)))) := borrow α0 in
          let* α2 : ltac:(refine (ref (slice (ref str)))) :=
            pointer_coercion "Unsize" α1 in
          let* α3 : ltac:(refine (ref (alloc.borrow.Cow str))) := borrow s in
          let* α4 : ltac:(refine core.fmt.rt.Argument) :=
            core.fmt.rt.Argument::["new_display"] α3 in
          let* α5 : ltac:(refine (array core.fmt.rt.Argument)) :=
            M.alloc [ α4 ] in
          let* α6 : ltac:(refine (ref (array core.fmt.rt.Argument))) :=
            borrow α5 in
          let* α7 : ltac:(refine (ref (slice core.fmt.rt.Argument))) :=
            pointer_coercion "Unsize" α6 in
          let* α8 : ltac:(refine core.fmt.Arguments) :=
            core.fmt.Arguments::["new_v1"] α2 α7 in
          std.io.stdio._print α8 in
        M.alloc tt in
      M.alloc tt).
