(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Definition LOREM_IPSUM `{ℋ : State.Trait} : ref str :=
  M.run
    (M.pure
      (mk_str
        "Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod
tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam,
quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo
consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse
cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non
proident, sunt in culpa qui officia deserunt mollit anim id est laborum.
")).

(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main `{ℋ : State.Trait} : M unit :=
  M.function_body
    (let* path : ltac:(refine (ref std.path.Path)) :=
      let* α0 : ltac:(refine str) := deref (mk_str "lorem_ipsum.txt") in
      let* α1 : ltac:(refine (ref str)) := borrow α0 in
      std.path.Path::["new"] α1 in
    let* display : ltac:(refine std.path.Display) :=
      let* α0 : ltac:(refine std.path.Path) := deref path in
      let* α1 : ltac:(refine (ref std.path.Path)) := borrow α0 in
      std.path.Path::["display"] α1 in
    let* file : ltac:(refine std.fs.File) :=
      let* α0 : ltac:(refine (ref (ref std.path.Path))) := borrow path in
      let* α1 :
          ltac:(refine (core.result.Result std.fs.File std.io.error.Error)) :=
        std.fs.File::["create"] α0 in
      let* α2 := M.read α1 in
      match α2 with
      | core.result.Result.Err why =>
        let* α0 : ltac:(refine (array (ref str))) :=
          M.alloc [ mk_str "couldn't create "; mk_str ": " ] in
        let* α1 : ltac:(refine (ref (array (ref str)))) := borrow α0 in
        let* α2 : ltac:(refine (ref (slice (ref str)))) :=
          pointer_coercion "Unsize" α1 in
        let* α3 : ltac:(refine (ref std.path.Display)) := borrow display in
        let* α4 : ltac:(refine core.fmt.rt.Argument) :=
          core.fmt.rt.Argument::["new_display"] α3 in
        let* α5 : ltac:(refine (ref std.io.error.Error)) := borrow why in
        let* α6 : ltac:(refine core.fmt.rt.Argument) :=
          core.fmt.rt.Argument::["new_display"] α5 in
        let* α7 : ltac:(refine (array core.fmt.rt.Argument)) :=
          M.alloc [ α4; α6 ] in
        let* α8 : ltac:(refine (ref (array core.fmt.rt.Argument))) :=
          borrow α7 in
        let* α9 : ltac:(refine (ref (slice core.fmt.rt.Argument))) :=
          pointer_coercion "Unsize" α8 in
        let* α10 : ltac:(refine core.fmt.Arguments) :=
          core.fmt.Arguments::["new_v1"] α2 α9 in
        let* α11 : ltac:(refine never) := core.panicking.panic_fmt α10 in
        never_to_any α11
      | core.result.Result.Ok file => M.pure file
      end in
    let* α0 : ltac:(refine (mut_ref std.fs.File)) := borrow_mut file in
    let* α1 : ltac:(refine (ref str)) := deref file_io_create.LOREM_IPSUM in
    let* α2 : ltac:(refine str) := deref α1 in
    let* α3 : ltac:(refine (ref str)) := borrow α2 in
    let* α4 : ltac:(refine (ref (slice u8))) := str::["as_bytes"] α3 in
    let* α5 : ltac:(refine (slice u8)) := deref α4 in
    let* α6 : ltac:(refine (ref (slice u8))) := borrow α5 in
    let* α7 : ltac:(refine (core.result.Result unit std.io.error.Error)) :=
      (std.io.Write.write_all (Self := std.fs.File) (Trait := ltac:(refine _)))
        α0
        α6 in
    let* α8 := M.read α7 in
    match α8 with
    | core.result.Result.Err why =>
      let* α0 : ltac:(refine (array (ref str))) :=
        M.alloc [ mk_str "couldn't write to "; mk_str ": " ] in
      let* α1 : ltac:(refine (ref (array (ref str)))) := borrow α0 in
      let* α2 : ltac:(refine (ref (slice (ref str)))) :=
        pointer_coercion "Unsize" α1 in
      let* α3 : ltac:(refine (ref std.path.Display)) := borrow display in
      let* α4 : ltac:(refine core.fmt.rt.Argument) :=
        core.fmt.rt.Argument::["new_display"] α3 in
      let* α5 : ltac:(refine (ref std.io.error.Error)) := borrow why in
      let* α6 : ltac:(refine core.fmt.rt.Argument) :=
        core.fmt.rt.Argument::["new_display"] α5 in
      let* α7 : ltac:(refine (array core.fmt.rt.Argument)) :=
        M.alloc [ α4; α6 ] in
      let* α8 : ltac:(refine (ref (array core.fmt.rt.Argument))) := borrow α7 in
      let* α9 : ltac:(refine (ref (slice core.fmt.rt.Argument))) :=
        pointer_coercion "Unsize" α8 in
      let* α10 : ltac:(refine core.fmt.Arguments) :=
        core.fmt.Arguments::["new_v1"] α2 α9 in
      let* α11 : ltac:(refine never) := core.panicking.panic_fmt α10 in
      never_to_any α11
    | core.result.Result.Ok _ =>
      let* _ : ltac:(refine unit) :=
        let* α0 : ltac:(refine (array (ref str))) :=
          M.alloc [ mk_str "successfully wrote to "; mk_str "
" ] in
        let* α1 : ltac:(refine (ref (array (ref str)))) := borrow α0 in
        let* α2 : ltac:(refine (ref (slice (ref str)))) :=
          pointer_coercion "Unsize" α1 in
        let* α3 : ltac:(refine (ref std.path.Display)) := borrow display in
        let* α4 : ltac:(refine core.fmt.rt.Argument) :=
          core.fmt.rt.Argument::["new_display"] α3 in
        let* α5 : ltac:(refine (array core.fmt.rt.Argument)) :=
          M.alloc [ α4 ] in
        let* α6 : ltac:(refine (ref (array core.fmt.rt.Argument))) :=
          borrow α5 in
        let* α7 : ltac:(refine (ref (slice core.fmt.rt.Argument))) :=
          pointer_coercion "Unsize" α6 in
        let* α8 : ltac:(refine core.fmt.Arguments) :=
          core.fmt.Arguments::["new_v1"] α2 α7 in
        std.io.stdio._print α8 in
      M.alloc tt
    end).
