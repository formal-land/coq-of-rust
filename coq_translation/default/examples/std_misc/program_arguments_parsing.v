(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Definition increase `{ℋ : State.Trait} (number : i32) : M unit :=
  let* _ :=
    let* _ :=
      let* α0 := borrow [ mk_str ""; mk_str "
" ] (list (ref str)) in
      let* α1 := deref α0 (list (ref str)) in
      let* α2 := borrow α1 (list (ref str)) in
      let* α3 := pointer_coercion "Unsize" α2 in
      let* α4 := M.alloc 1 in
      let* α5 := add number α4 in
      let* α6 := borrow α5 i32 in
      let* α7 := deref α6 i32 in
      let* α8 := borrow α7 i32 in
      let* α9 := core.fmt.rt.Argument::["new_display"] α8 in
      let* α10 := borrow [ α9 ] (list core.fmt.rt.Argument) in
      let* α11 := deref α10 (list core.fmt.rt.Argument) in
      let* α12 := borrow α11 (list core.fmt.rt.Argument) in
      let* α13 := pointer_coercion "Unsize" α12 in
      let* α14 := core.fmt.Arguments::["new_v1"] α3 α13 in
      std.io.stdio._print α14 in
    M.alloc tt in
  M.alloc tt.

Definition decrease `{ℋ : State.Trait} (number : i32) : M unit :=
  let* _ :=
    let* _ :=
      let* α0 := borrow [ mk_str ""; mk_str "
" ] (list (ref str)) in
      let* α1 := deref α0 (list (ref str)) in
      let* α2 := borrow α1 (list (ref str)) in
      let* α3 := pointer_coercion "Unsize" α2 in
      let* α4 := M.alloc 1 in
      let* α5 := sub number α4 in
      let* α6 := borrow α5 i32 in
      let* α7 := deref α6 i32 in
      let* α8 := borrow α7 i32 in
      let* α9 := core.fmt.rt.Argument::["new_display"] α8 in
      let* α10 := borrow [ α9 ] (list core.fmt.rt.Argument) in
      let* α11 := deref α10 (list core.fmt.rt.Argument) in
      let* α12 := borrow α11 (list core.fmt.rt.Argument) in
      let* α13 := pointer_coercion "Unsize" α12 in
      let* α14 := core.fmt.Arguments::["new_v1"] α3 α13 in
      std.io.stdio._print α14 in
    M.alloc tt in
  M.alloc tt.

Definition help `{ℋ : State.Trait} : M unit :=
  let* _ :=
    let* _ :=
      let* α0 :=
        borrow
          [
            mk_str
              "usage:
match_args <string>
    Check whether given string is the answer.
match_args {increase|decrease} <integer>
    Increase or decrease given integer by one.
"
          ]
          (list (ref str)) in
      let* α1 := deref α0 (list (ref str)) in
      let* α2 := borrow α1 (list (ref str)) in
      let* α3 := pointer_coercion "Unsize" α2 in
      let* α4 := core.fmt.Arguments::["new_const"] α3 in
      std.io.stdio._print α4 in
    M.alloc tt in
  M.alloc tt.

(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main `{ℋ : State.Trait} : M unit :=
  let* args :=
    let* α0 := std.env.args in
    (core.iter.traits.iterator.Iterator.collect (Self := std.env.Args)) α0 in
  let* α0 :=
    borrow args (alloc.vec.Vec alloc.string.String alloc.alloc.Global) in
  let* α1 := (alloc.vec.Vec T A)::["len"] α0 in
  match α1 with
  | _ =>
    let* _ :=
      let* _ :=
        let* α0 :=
          borrow
            [ mk_str "My name is 'match_args'. Try passing some arguments!
" ]
            (list (ref str)) in
        let* α1 := deref α0 (list (ref str)) in
        let* α2 := borrow α1 (list (ref str)) in
        let* α3 := pointer_coercion "Unsize" α2 in
        let* α4 := core.fmt.Arguments::["new_const"] α3 in
        std.io.stdio._print α4 in
      M.alloc tt in
    M.alloc tt
  | _ =>
    let* α0 :=
      borrow args (alloc.vec.Vec alloc.string.String alloc.alloc.Global) in
    let* α1 := M.alloc 1 in
    let* α2 :=
      (core.ops.index.Index.index
          (Self := (alloc.vec.Vec alloc.string.String alloc.alloc.Global)))
        α0
        α1 in
    let* α3 := deref α2 alloc.string.String in
    let* α4 := borrow α3 alloc.string.String in
    let* α5 := (core.ops.deref.Deref.deref (Self := alloc.string.String)) α4 in
    let* α6 := deref α5 str in
    let* α7 := borrow α6 str in
    let* α8 := str::["parse"] α7 in
    match α8 with
    | core.result.Result _ =>
      let* _ :=
        let* α0 := borrow [ mk_str "This is the answer!
" ] (list (ref str)) in
        let* α1 := deref α0 (list (ref str)) in
        let* α2 := borrow α1 (list (ref str)) in
        let* α3 := pointer_coercion "Unsize" α2 in
        let* α4 := core.fmt.Arguments::["new_const"] α3 in
        std.io.stdio._print α4 in
      M.alloc tt
    | _ =>
      let* _ :=
        let* α0 :=
          borrow [ mk_str "This is not the answer.
" ] (list (ref str)) in
        let* α1 := deref α0 (list (ref str)) in
        let* α2 := borrow α1 (list (ref str)) in
        let* α3 := pointer_coercion "Unsize" α2 in
        let* α4 := core.fmt.Arguments::["new_const"] α3 in
        std.io.stdio._print α4 in
      M.alloc tt
    end
  | _ =>
    let* cmd :=
      let* α0 :=
        borrow args (alloc.vec.Vec alloc.string.String alloc.alloc.Global) in
      let* α1 := M.alloc 1 in
      let* α2 :=
        (core.ops.index.Index.index
            (Self := (alloc.vec.Vec alloc.string.String alloc.alloc.Global)))
          α0
          α1 in
      let* α3 := deref α2 alloc.string.String in
      borrow α3 alloc.string.String in
    let* num :=
      let* α0 :=
        borrow args (alloc.vec.Vec alloc.string.String alloc.alloc.Global) in
      let* α1 := M.alloc 2 in
      let* α2 :=
        (core.ops.index.Index.index
            (Self := (alloc.vec.Vec alloc.string.String alloc.alloc.Global)))
          α0
          α1 in
      let* α3 := deref α2 alloc.string.String in
      borrow α3 alloc.string.String in
    let* number :=
      let* α0 := deref num alloc.string.String in
      let* α1 := borrow α0 alloc.string.String in
      let* α2 :=
        (core.ops.deref.Deref.deref (Self := alloc.string.String)) α1 in
      let* α3 := deref α2 str in
      let* α4 := borrow α3 str in
      let* α5 := str::["parse"] α4 in
      match α5 with
      | core.result.Result n => Pure n
      | core.result.Result _ =>
        let* _ :=
          let* _ :=
            let* α0 :=
              borrow
                [ mk_str "error: second argument not an integer
" ]
                (list (ref str)) in
            let* α1 := deref α0 (list (ref str)) in
            let* α2 := borrow α1 (list (ref str)) in
            let* α3 := pointer_coercion "Unsize" α2 in
            let* α4 := core.fmt.Arguments::["new_const"] α3 in
            std.io.stdio._eprint α4 in
          M.alloc tt in
        let* _ := program_arguments_parsing.help in
        let* _ :=
          let* α0 := M.alloc tt in
          Return α0 in
        let* α0 := M.alloc tt in
        never_to_any α0
      end in
    let* α0 := deref cmd alloc.string.String in
    let* α1 := borrow α0 alloc.string.String in
    let* α2 :=
      (core.ops.index.Index.index (Self := alloc.string.String))
        α1
        (core.ops.range.RangeFull.Build_t tt) in
    let* α3 := deref α2 str in
    let* α4 := borrow α3 str in
    match α4 with
    | _ => program_arguments_parsing.increase number
    | _ => program_arguments_parsing.decrease number
    | _ =>
      let* _ :=
        let* _ :=
          let* α0 :=
            borrow [ mk_str "error: invalid command
" ] (list (ref str)) in
          let* α1 := deref α0 (list (ref str)) in
          let* α2 := borrow α1 (list (ref str)) in
          let* α3 := pointer_coercion "Unsize" α2 in
          let* α4 := core.fmt.Arguments::["new_const"] α3 in
          std.io.stdio._eprint α4 in
        M.alloc tt in
      let* _ := program_arguments_parsing.help in
      M.alloc tt
    end
  | _ =>
    let* _ := program_arguments_parsing.help in
    M.alloc tt
  end.
