(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module  Choice.
Section Choice.
  Context `{ℋ : State.Trait}.
  
  Record t : Set := {
    x0 : u8;
  }.
  
  Global Instance Get_0 : Notation.Dot "0" := {
    Notation.dot x := let* x := M.read x in M.pure x.(x0) : M _;
  }.
End Choice.
End Choice.
Definition Choice `{ℋ : State.Trait} : Set := M.Val Choice.t.

Module  Impl_core_marker_Copy_for_subtle_Choice.
Section Impl_core_marker_Copy_for_subtle_Choice.
  Context `{ℋ : State.Trait}.
  
  Definition Self : Set := subtle.Choice.
  
  Global Instance ℐ : core.marker.Copy.Trait Self := {
  }.
End Impl_core_marker_Copy_for_subtle_Choice.
End Impl_core_marker_Copy_for_subtle_Choice.

Module  Impl_core_clone_Clone_for_subtle_Choice.
Section Impl_core_clone_Clone_for_subtle_Choice.
  Context `{ℋ : State.Trait}.
  
  Definition Self : Set := subtle.Choice.
  
  Definition clone (self : ref Self) : M subtle.Choice :=
    M.function_body
      (let* _ : ltac:(refine unit) := M.alloc tt in
      deref self).
  
  Global Instance AssociatedFunction_clone :
    Notation.DoubleColon Self "clone" := {
    Notation.double_colon := clone;
  }.
  
  Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
    core.clone.Clone.clone := clone;
    core.clone.Clone.clone_from := Datatypes.None;
  }.
End Impl_core_clone_Clone_for_subtle_Choice.
End Impl_core_clone_Clone_for_subtle_Choice.

Module  Impl_core_fmt_Debug_for_subtle_Choice.
Section Impl_core_fmt_Debug_for_subtle_Choice.
  Context `{ℋ : State.Trait}.
  
  Definition Self : Set := subtle.Choice.
  
  Definition fmt
      (self : ref Self)
      (f : mut_ref core.fmt.Formatter)
      : M ltac:(core.fmt.Result) :=
    M.function_body
      (let* α0 : ltac:(refine core.fmt.Formatter) := deref f in
      let* α1 : ltac:(refine (mut_ref core.fmt.Formatter)) := borrow_mut α0 in
      let* α2 : ltac:(refine str) := deref (mk_str "Choice") in
      let* α3 : ltac:(refine (ref str)) := borrow α2 in
      let* α4 : ltac:(refine subtle.Choice) := deref self in
      let* α5 : ltac:(refine u8) := α4.["0"] in
      let* α6 : ltac:(refine (ref u8)) := borrow α5 in
      let* α7 : ltac:(refine (ref (ref u8))) := borrow α6 in
      let* α8 : ltac:(refine (ref type not implemented)) :=
        pointer_coercion "Unsize" α7 in
      core.fmt.Formatter::["debug_tuple_field1_finish"] α1 α3 α8).
  
  Global Instance AssociatedFunction_fmt : Notation.DoubleColon Self "fmt" := {
    Notation.double_colon := fmt;
  }.
  
  Global Instance ℐ : core.fmt.Debug.Trait Self := {
    core.fmt.Debug.fmt := fmt;
  }.
End Impl_core_fmt_Debug_for_subtle_Choice.
End Impl_core_fmt_Debug_for_subtle_Choice.

Module  Impl_subtle_Choice.
Section Impl_subtle_Choice.
  Context `{ℋ : State.Trait}.
  
  Definition Self : Set := subtle.Choice.
  
  Definition unwrap_u8 (self : ref Self) : M u8 :=
    M.function_body
      (let* α0 : ltac:(refine subtle.Choice) := deref self in
      α0.["0"]).
  
  Global Instance AssociatedFunction_unwrap_u8 :
    Notation.DoubleColon Self "unwrap_u8" := {
    Notation.double_colon := unwrap_u8;
  }.
End Impl_subtle_Choice.
End Impl_subtle_Choice.

Module  Impl_core_convert_From_subtle_Choice_for_bool.
Section Impl_core_convert_From_subtle_Choice_for_bool.
  Context `{ℋ : State.Trait}.
  
  Definition Self : Set := bool.
  
  Definition from (source : subtle.Choice) : M bool :=
    M.function_body
      (let* _ : ltac:(refine unit) :=
        let* α0 : ltac:(refine bool) := M.alloc true in
        let* α1 : ltac:(refine bool) := use α0 in
        if (α1 : bool) then
          let* _ : ltac:(refine unit) :=
            let* α0 : ltac:(refine u8) := source.["0"] in
            let* α1 : ltac:(refine u8) := M.alloc 0 in
            let* α2 : ltac:(refine bool) := BinOp.eq α0 α1 in
            let* α3 : ltac:(refine u8) := source.["0"] in
            let* α4 : ltac:(refine u8) := M.alloc 1 in
            let* α5 : ltac:(refine bool) := BinOp.eq α3 α4 in
            let* α6 : ltac:(refine bool) := BinOp.bit_or α2 α5 in
            let* α7 : ltac:(refine bool) := UnOp.not α6 in
            let* α8 : ltac:(refine bool) := use α7 in
            if (α8 : bool) then
              let* α0 : ltac:(refine never) :=
                core.panicking.panic
                  (mk_str
                    "assertion failed: (source.0 == 0u8) | (source.0 == 1u8)") in
              never_to_any α0
            else
              M.alloc tt in
          M.alloc tt
        else
          M.alloc tt in
      let* α0 : ltac:(refine u8) := source.["0"] in
      let* α1 : ltac:(refine u8) := M.alloc 0 in
      BinOp.ne α0 α1).
  
  Global Instance AssociatedFunction_from :
    Notation.DoubleColon Self "from" := {
    Notation.double_colon := from;
  }.
  
  Global Instance ℐ : core.convert.From.Trait Self (T := subtle.Choice) := {
    core.convert.From.from := from;
  }.
End Impl_core_convert_From_subtle_Choice_for_bool.
End Impl_core_convert_From_subtle_Choice_for_bool.

Module  Impl_core_ops_bit_BitAnd_for_subtle_Choice.
Section Impl_core_ops_bit_BitAnd_for_subtle_Choice.
  Context `{ℋ : State.Trait}.
  
  Definition Self : Set := subtle.Choice.
  
  Definition Output : Set := subtle.Choice.
  
  Definition bitand (self : Self) (rhs : subtle.Choice) : M subtle.Choice :=
    M.function_body
      (let* α0 : ltac:(refine u8) := self.["0"] in
      let* α1 : ltac:(refine u8) := rhs.["0"] in
      let* α2 : ltac:(refine u8) := BinOp.bit_and α0 α1 in
      (core.convert.Into.into (Self := u8) (Trait := ltac:(refine _))) α2).
  
  Global Instance AssociatedFunction_bitand :
    Notation.DoubleColon Self "bitand" := {
    Notation.double_colon := bitand;
  }.
  
  Global Instance ℐ :
    core.ops.bit.BitAnd.Trait Self
      (Rhs := core.ops.bit.BitAnd.Default.Rhs Self) := {
    core.ops.bit.BitAnd.Output := Output;
    core.ops.bit.BitAnd.bitand := bitand;
  }.
End Impl_core_ops_bit_BitAnd_for_subtle_Choice.
End Impl_core_ops_bit_BitAnd_for_subtle_Choice.

Module  Impl_core_ops_bit_BitAndAssign_for_subtle_Choice.
Section Impl_core_ops_bit_BitAndAssign_for_subtle_Choice.
  Context `{ℋ : State.Trait}.
  
  Definition Self : Set := subtle.Choice.
  
  Definition bitand_assign
      (self : mut_ref Self)
      (rhs : subtle.Choice)
      : M unit :=
    M.function_body
      (let* _ : ltac:(refine unit) :=
        let* α0 : ltac:(refine subtle.Choice) := deref self in
        let* α1 : ltac:(refine subtle.Choice) := deref self in
        let* α2 : ltac:(refine subtle.Choice) :=
          (core.ops.bit.BitAnd.bitand
              (Self := subtle.Choice)
              (Trait := ltac:(refine _)))
            α1
            rhs in
        assign α0 α2 in
      M.alloc tt).
  
  Global Instance AssociatedFunction_bitand_assign :
    Notation.DoubleColon Self "bitand_assign" := {
    Notation.double_colon := bitand_assign;
  }.
  
  Global Instance ℐ :
    core.ops.bit.BitAndAssign.Trait Self
      (Rhs := core.ops.bit.BitAndAssign.Default.Rhs Self) := {
    core.ops.bit.BitAndAssign.bitand_assign := bitand_assign;
  }.
End Impl_core_ops_bit_BitAndAssign_for_subtle_Choice.
End Impl_core_ops_bit_BitAndAssign_for_subtle_Choice.

Module  Impl_core_ops_bit_BitOr_for_subtle_Choice.
Section Impl_core_ops_bit_BitOr_for_subtle_Choice.
  Context `{ℋ : State.Trait}.
  
  Definition Self : Set := subtle.Choice.
  
  Definition Output : Set := subtle.Choice.
  
  Definition bitor (self : Self) (rhs : subtle.Choice) : M subtle.Choice :=
    M.function_body
      (let* α0 : ltac:(refine u8) := self.["0"] in
      let* α1 : ltac:(refine u8) := rhs.["0"] in
      let* α2 : ltac:(refine u8) := BinOp.bit_or α0 α1 in
      (core.convert.Into.into (Self := u8) (Trait := ltac:(refine _))) α2).
  
  Global Instance AssociatedFunction_bitor :
    Notation.DoubleColon Self "bitor" := {
    Notation.double_colon := bitor;
  }.
  
  Global Instance ℐ :
    core.ops.bit.BitOr.Trait Self
      (Rhs := core.ops.bit.BitOr.Default.Rhs Self) := {
    core.ops.bit.BitOr.Output := Output;
    core.ops.bit.BitOr.bitor := bitor;
  }.
End Impl_core_ops_bit_BitOr_for_subtle_Choice.
End Impl_core_ops_bit_BitOr_for_subtle_Choice.

Module  Impl_core_ops_bit_BitOrAssign_for_subtle_Choice.
Section Impl_core_ops_bit_BitOrAssign_for_subtle_Choice.
  Context `{ℋ : State.Trait}.
  
  Definition Self : Set := subtle.Choice.
  
  Definition bitor_assign
      (self : mut_ref Self)
      (rhs : subtle.Choice)
      : M unit :=
    M.function_body
      (let* _ : ltac:(refine unit) :=
        let* α0 : ltac:(refine subtle.Choice) := deref self in
        let* α1 : ltac:(refine subtle.Choice) := deref self in
        let* α2 : ltac:(refine subtle.Choice) :=
          (core.ops.bit.BitOr.bitor
              (Self := subtle.Choice)
              (Trait := ltac:(refine _)))
            α1
            rhs in
        assign α0 α2 in
      M.alloc tt).
  
  Global Instance AssociatedFunction_bitor_assign :
    Notation.DoubleColon Self "bitor_assign" := {
    Notation.double_colon := bitor_assign;
  }.
  
  Global Instance ℐ :
    core.ops.bit.BitOrAssign.Trait Self
      (Rhs := core.ops.bit.BitOrAssign.Default.Rhs Self) := {
    core.ops.bit.BitOrAssign.bitor_assign := bitor_assign;
  }.
End Impl_core_ops_bit_BitOrAssign_for_subtle_Choice.
End Impl_core_ops_bit_BitOrAssign_for_subtle_Choice.

Module  Impl_core_ops_bit_BitXor_for_subtle_Choice.
Section Impl_core_ops_bit_BitXor_for_subtle_Choice.
  Context `{ℋ : State.Trait}.
  
  Definition Self : Set := subtle.Choice.
  
  Definition Output : Set := subtle.Choice.
  
  Definition bitxor (self : Self) (rhs : subtle.Choice) : M subtle.Choice :=
    M.function_body
      (let* α0 : ltac:(refine u8) := self.["0"] in
      let* α1 : ltac:(refine u8) := rhs.["0"] in
      let* α2 : ltac:(refine u8) := BinOp.bit_xor α0 α1 in
      (core.convert.Into.into (Self := u8) (Trait := ltac:(refine _))) α2).
  
  Global Instance AssociatedFunction_bitxor :
    Notation.DoubleColon Self "bitxor" := {
    Notation.double_colon := bitxor;
  }.
  
  Global Instance ℐ :
    core.ops.bit.BitXor.Trait Self
      (Rhs := core.ops.bit.BitXor.Default.Rhs Self) := {
    core.ops.bit.BitXor.Output := Output;
    core.ops.bit.BitXor.bitxor := bitxor;
  }.
End Impl_core_ops_bit_BitXor_for_subtle_Choice.
End Impl_core_ops_bit_BitXor_for_subtle_Choice.

Module  Impl_core_ops_bit_BitXorAssign_for_subtle_Choice.
Section Impl_core_ops_bit_BitXorAssign_for_subtle_Choice.
  Context `{ℋ : State.Trait}.
  
  Definition Self : Set := subtle.Choice.
  
  Definition bitxor_assign
      (self : mut_ref Self)
      (rhs : subtle.Choice)
      : M unit :=
    M.function_body
      (let* _ : ltac:(refine unit) :=
        let* α0 : ltac:(refine subtle.Choice) := deref self in
        let* α1 : ltac:(refine subtle.Choice) := deref self in
        let* α2 : ltac:(refine subtle.Choice) :=
          (core.ops.bit.BitXor.bitxor
              (Self := subtle.Choice)
              (Trait := ltac:(refine _)))
            α1
            rhs in
        assign α0 α2 in
      M.alloc tt).
  
  Global Instance AssociatedFunction_bitxor_assign :
    Notation.DoubleColon Self "bitxor_assign" := {
    Notation.double_colon := bitxor_assign;
  }.
  
  Global Instance ℐ :
    core.ops.bit.BitXorAssign.Trait Self
      (Rhs := core.ops.bit.BitXorAssign.Default.Rhs Self) := {
    core.ops.bit.BitXorAssign.bitxor_assign := bitxor_assign;
  }.
End Impl_core_ops_bit_BitXorAssign_for_subtle_Choice.
End Impl_core_ops_bit_BitXorAssign_for_subtle_Choice.

Module  Impl_core_ops_bit_Not_for_subtle_Choice.
Section Impl_core_ops_bit_Not_for_subtle_Choice.
  Context `{ℋ : State.Trait}.
  
  Definition Self : Set := subtle.Choice.
  
  Definition Output : Set := subtle.Choice.
  
  Definition not (self : Self) : M subtle.Choice :=
    M.function_body
      (let* α0 : ltac:(refine u8) := M.alloc 1 in
      let* α1 : ltac:(refine u8) := self.["0"] in
      let* α2 : ltac:(refine u8) := UnOp.not α1 in
      let* α3 : ltac:(refine u8) := BinOp.bit_and α0 α2 in
      (core.convert.Into.into (Self := u8) (Trait := ltac:(refine _))) α3).
  
  Global Instance AssociatedFunction_not : Notation.DoubleColon Self "not" := {
    Notation.double_colon := not;
  }.
  
  Global Instance ℐ : core.ops.bit.Not.Trait Self := {
    core.ops.bit.Not.Output := Output;
    core.ops.bit.Not.not := not;
  }.
End Impl_core_ops_bit_Not_for_subtle_Choice.
End Impl_core_ops_bit_Not_for_subtle_Choice.

Definition black_box `{ℋ : State.Trait} (input : u8) : M u8 :=
  M.function_body
    (let* _ : ltac:(refine unit) :=
      let* α0 : ltac:(refine bool) := M.alloc true in
      let* α1 : ltac:(refine bool) := use α0 in
      if (α1 : bool) then
        let* _ : ltac:(refine unit) :=
          let* α0 : ltac:(refine u8) := M.alloc 0 in
          let* α1 : ltac:(refine bool) := BinOp.eq input α0 in
          let* α2 : ltac:(refine u8) := M.alloc 1 in
          let* α3 : ltac:(refine bool) := BinOp.eq input α2 in
          let* α4 : ltac:(refine bool) := BinOp.bit_or α1 α3 in
          let* α5 : ltac:(refine bool) := UnOp.not α4 in
          let* α6 : ltac:(refine bool) := use α5 in
          if (α6 : bool) then
            let* α0 : ltac:(refine never) :=
              core.panicking.panic
                (mk_str "assertion failed: (input == 0u8) | (input == 1u8)") in
            never_to_any α0
          else
            M.alloc tt in
        M.alloc tt
      else
        M.alloc tt in
    let* α0 : ltac:(refine (ref u8)) := addr_of input in
    let* α1 : ltac:(refine (ref u8)) := use α0 in
    core.ptr.read_volatile α1).

Module  Impl_core_convert_From_u8_for_subtle_Choice.
Section Impl_core_convert_From_u8_for_subtle_Choice.
  Context `{ℋ : State.Trait}.
  
  Definition Self : Set := subtle.Choice.
  
  Definition from (input : u8) : M subtle.Choice :=
    M.function_body
      (let* α0 : ltac:(refine u8) := subtle.black_box input in
      M.alloc (subtle.Choice.Build_t α0)).
  
  Global Instance AssociatedFunction_from :
    Notation.DoubleColon Self "from" := {
    Notation.double_colon := from;
  }.
  
  Global Instance ℐ : core.convert.From.Trait Self (T := u8) := {
    core.convert.From.from := from;
  }.
End Impl_core_convert_From_u8_for_subtle_Choice.
End Impl_core_convert_From_u8_for_subtle_Choice.

Module  ConstantTimeEq.
Section ConstantTimeEq.
  Context `{ℋ : State.Trait}.
  
  Class Trait (Self : Set) : Type := {
    ct_eq : (ref Self) -> (ref Self) -> M subtle.Choice;
  }.
  
End ConstantTimeEq.
End ConstantTimeEq.

Module  Impl_subtle_ConstantTimeEq_for_slice_T.
Section Impl_subtle_ConstantTimeEq_for_slice_T.
  Context `{ℋ : State.Trait}.
  
  Context {T : Set}.
  
  Context {ℋ_0 : subtle.ConstantTimeEq.Trait T}.
  
  Definition Self : Set := slice T.
  
  Definition ct_eq (self : ref Self) (_rhs : ref (slice T)) : M subtle.Choice :=
    M.function_body
      (let* len : ltac:(refine usize) :=
        let* α0 : ltac:(refine (slice T)) := deref self in
        let* α1 : ltac:(refine (ref (slice T))) := borrow α0 in
        (slice T)::["len"] α1 in
      let* _ : ltac:(refine unit) :=
        let* α0 : ltac:(refine (slice T)) := deref _rhs in
        let* α1 : ltac:(refine (ref (slice T))) := borrow α0 in
        let* α2 : ltac:(refine usize) := (slice T)::["len"] α1 in
        let* α3 : ltac:(refine bool) := BinOp.ne len α2 in
        let* α4 : ltac:(refine bool) := use α3 in
        if (α4 : bool) then
          let* _ : ltac:(refine never) :=
            let* α0 : ltac:(refine u8) := M.alloc 0 in
            let* α1 : ltac:(refine subtle.Choice) :=
              (core.convert.From.from
                  (Self := subtle.Choice)
                  (Trait := ltac:(refine _)))
                α0 in
            M.return_ α1 in
          let* α0 : ltac:(refine unit) := M.alloc tt in
          never_to_any α0
        else
          M.alloc tt in
      let* x : ltac:(refine u8) := M.alloc 1 in
      let* _ : ltac:(refine unit) :=
        let* α0 : ltac:(refine (slice T)) := deref self in
        let* α1 : ltac:(refine (ref (slice T))) := borrow α0 in
        let* α2 : ltac:(refine (core.slice.iter.Iter T)) :=
          (slice T)::["iter"] α1 in
        let* α3 : ltac:(refine (slice T)) := deref _rhs in
        let* α4 : ltac:(refine (ref (slice T))) := borrow α3 in
        let* α5 : ltac:(refine (core.slice.iter.Iter T)) :=
          (slice T)::["iter"] α4 in
        let* α6 :
            ltac:(refine
              (core.iter.adapters.zip.Zip
                (core.slice.iter.Iter T)
                (core.slice.iter.Iter T))) :=
          (core.iter.traits.iterator.Iterator.zip
              (Self := core.slice.iter.Iter T)
              (Trait := ltac:(refine _)))
            α2
            α5 in
        let* α7 :
            ltac:(refine
              (core.iter.adapters.zip.Zip
                (core.slice.iter.Iter T)
                (core.slice.iter.Iter T))) :=
          (core.iter.traits.collect.IntoIterator.into_iter
              (Self :=
                core.iter.adapters.zip.Zip
                  (core.slice.iter.Iter T)
                  (core.slice.iter.Iter T))
              (Trait := ltac:(refine _)))
            α6 in
        let* α8 := M.read α7 in
        let* α9 : ltac:(refine unit) :=
          match α8 with
          | iter =>
            loop
              (let* _ : ltac:(refine unit) :=
                let* α0 :
                    ltac:(refine
                      (mut_ref
                        (core.iter.adapters.zip.Zip
                          (core.slice.iter.Iter T)
                          (core.slice.iter.Iter T)))) :=
                  borrow_mut iter in
                let* α1 :
                    ltac:(refine
                      (core.option.Option (M.Val ((ref T) * (ref T))))) :=
                  (core.iter.traits.iterator.Iterator.next
                      (Self :=
                        core.iter.adapters.zip.Zip
                          (core.slice.iter.Iter T)
                          (core.slice.iter.Iter T))
                      (Trait := ltac:(refine _)))
                    α0 in
                let* α2 := M.read α1 in
                match α2 with
                | core.option.Option.None  =>
                  let* α0 : ltac:(refine never) := Break in
                  never_to_any α0
                | core.option.Option.Some (ai, bi) =>
                  let* _ : ltac:(refine unit) :=
                    let* α0 : ltac:(refine T) := deref ai in
                    let* α1 : ltac:(refine (ref T)) := borrow α0 in
                    let* α2 : ltac:(refine T) := deref bi in
                    let* α3 : ltac:(refine (ref T)) := borrow α2 in
                    let* α4 : ltac:(refine subtle.Choice) :=
                      (subtle.ConstantTimeEq.ct_eq
                          (Self := T)
                          (Trait := ltac:(refine _)))
                        α1
                        α3 in
                    let* α5 : ltac:(refine (ref subtle.Choice)) := borrow α4 in
                    let* α6 : ltac:(refine u8) :=
                      subtle.Choice::["unwrap_u8"] α5 in
                    assign_op bitand x α6 in
                  M.alloc tt
                end in
              M.alloc tt)
          end in
        use α9 in
      (core.convert.Into.into (Self := u8) (Trait := ltac:(refine _))) x).
  
  Global Instance AssociatedFunction_ct_eq :
    Notation.DoubleColon Self "ct_eq" := {
    Notation.double_colon := ct_eq;
  }.
  
  Global Instance ℐ : subtle.ConstantTimeEq.Required.Trait Self := {
    subtle.ConstantTimeEq.ct_eq := ct_eq;
    subtle.ConstantTimeEq.ct_ne := Datatypes.None;
  }.
End Impl_subtle_ConstantTimeEq_for_slice_T.
End Impl_subtle_ConstantTimeEq_for_slice_T.

Module  Impl_subtle_ConstantTimeEq_for_subtle_Choice.
Section Impl_subtle_ConstantTimeEq_for_subtle_Choice.
  Context `{ℋ : State.Trait}.
  
  Definition Self : Set := subtle.Choice.
  
  Definition ct_eq
      (self : ref Self)
      (rhs : ref subtle.Choice)
      : M subtle.Choice :=
    M.function_body
      (let* α0 : ltac:(refine subtle.Choice) := deref self in
      let* α1 : ltac:(refine subtle.Choice) := deref rhs in
      let* α2 : ltac:(refine subtle.Choice) :=
        (core.ops.bit.BitXor.bitxor
            (Self := subtle.Choice)
            (Trait := ltac:(refine _)))
          α0
          α1 in
      (core.ops.bit.Not.not (Self := subtle.Choice) (Trait := ltac:(refine _)))
        α2).
  
  Global Instance AssociatedFunction_ct_eq :
    Notation.DoubleColon Self "ct_eq" := {
    Notation.double_colon := ct_eq;
  }.
  
  Global Instance ℐ : subtle.ConstantTimeEq.Required.Trait Self := {
    subtle.ConstantTimeEq.ct_eq := ct_eq;
    subtle.ConstantTimeEq.ct_ne := Datatypes.None;
  }.
End Impl_subtle_ConstantTimeEq_for_subtle_Choice.
End Impl_subtle_ConstantTimeEq_for_subtle_Choice.

Module  Impl_subtle_ConstantTimeEq_for_u8.
Section Impl_subtle_ConstantTimeEq_for_u8.
  Context `{ℋ : State.Trait}.
  
  Definition Self : Set := u8.
  
  Definition ct_eq (self : ref Self) (other : ref u8) : M subtle.Choice :=
    M.function_body
      (let* x : ltac:(refine u8) :=
        (core.ops.bit.BitXor.bitxor (Self := ref u8) (Trait := ltac:(refine _)))
          self
          other in
      let* y : ltac:(refine u8) :=
        let* α0 : ltac:(refine u8) := u8::["wrapping_neg"] x in
        let* α1 : ltac:(refine u8) := BinOp.bit_or x α0 in
        let* α2 : ltac:(refine i32) := M.alloc 8 in
        let* α3 : ltac:(refine i32) := M.alloc 1 in
        let* α4 : ltac:(refine i32) := BinOp.sub α2 α3 in
        BinOp.shr α1 α4 in
      let* α0 : ltac:(refine u8) := M.alloc 1 in
      let* α1 : ltac:(refine u8) := use α0 in
      let* α2 : ltac:(refine u8) := BinOp.bit_xor y α1 in
      let* α3 : ltac:(refine u8) := use α2 in
      (core.convert.Into.into (Self := u8) (Trait := ltac:(refine _))) α3).
  
  Global Instance AssociatedFunction_ct_eq :
    Notation.DoubleColon Self "ct_eq" := {
    Notation.double_colon := ct_eq;
  }.
  
  Global Instance ℐ : subtle.ConstantTimeEq.Required.Trait Self := {
    subtle.ConstantTimeEq.ct_eq := ct_eq;
    subtle.ConstantTimeEq.ct_ne := Datatypes.None;
  }.
End Impl_subtle_ConstantTimeEq_for_u8.
End Impl_subtle_ConstantTimeEq_for_u8.

Module  Impl_subtle_ConstantTimeEq_for_i8.
Section Impl_subtle_ConstantTimeEq_for_i8.
  Context `{ℋ : State.Trait}.
  
  Definition Self : Set := i8.
  
  Definition ct_eq (self : ref Self) (other : ref i8) : M subtle.Choice :=
    M.function_body
      (let* α0 : ltac:(refine i8) := deref self in
      let* α1 : ltac:(refine u8) := cast α0 in
      let* α2 : ltac:(refine (ref u8)) := borrow α1 in
      let* α3 : ltac:(refine i8) := deref other in
      let* α4 : ltac:(refine u8) := cast α3 in
      let* α5 : ltac:(refine (ref u8)) := borrow α4 in
      (subtle.ConstantTimeEq.ct_eq (Self := u8) (Trait := ltac:(refine _)))
        α2
        α5).
  
  Global Instance AssociatedFunction_ct_eq :
    Notation.DoubleColon Self "ct_eq" := {
    Notation.double_colon := ct_eq;
  }.
  
  Global Instance ℐ : subtle.ConstantTimeEq.Required.Trait Self := {
    subtle.ConstantTimeEq.ct_eq := ct_eq;
    subtle.ConstantTimeEq.ct_ne := Datatypes.None;
  }.
End Impl_subtle_ConstantTimeEq_for_i8.
End Impl_subtle_ConstantTimeEq_for_i8.

Module  Impl_subtle_ConstantTimeEq_for_u16.
Section Impl_subtle_ConstantTimeEq_for_u16.
  Context `{ℋ : State.Trait}.
  
  Definition Self : Set := u16.
  
  Definition ct_eq (self : ref Self) (other : ref u16) : M subtle.Choice :=
    M.function_body
      (let* x : ltac:(refine u16) :=
        (core.ops.bit.BitXor.bitxor
            (Self := ref u16)
            (Trait := ltac:(refine _)))
          self
          other in
      let* y : ltac:(refine u16) :=
        let* α0 : ltac:(refine u16) := u16::["wrapping_neg"] x in
        let* α1 : ltac:(refine u16) := BinOp.bit_or x α0 in
        let* α2 : ltac:(refine i32) := M.alloc 16 in
        let* α3 : ltac:(refine i32) := M.alloc 1 in
        let* α4 : ltac:(refine i32) := BinOp.sub α2 α3 in
        BinOp.shr α1 α4 in
      let* α0 : ltac:(refine u16) := M.alloc 1 in
      let* α1 : ltac:(refine u16) := use α0 in
      let* α2 : ltac:(refine u16) := BinOp.bit_xor y α1 in
      let* α3 : ltac:(refine u8) := cast α2 in
      (core.convert.Into.into (Self := u8) (Trait := ltac:(refine _))) α3).
  
  Global Instance AssociatedFunction_ct_eq :
    Notation.DoubleColon Self "ct_eq" := {
    Notation.double_colon := ct_eq;
  }.
  
  Global Instance ℐ : subtle.ConstantTimeEq.Required.Trait Self := {
    subtle.ConstantTimeEq.ct_eq := ct_eq;
    subtle.ConstantTimeEq.ct_ne := Datatypes.None;
  }.
End Impl_subtle_ConstantTimeEq_for_u16.
End Impl_subtle_ConstantTimeEq_for_u16.

Module  Impl_subtle_ConstantTimeEq_for_i16.
Section Impl_subtle_ConstantTimeEq_for_i16.
  Context `{ℋ : State.Trait}.
  
  Definition Self : Set := i16.
  
  Definition ct_eq (self : ref Self) (other : ref i16) : M subtle.Choice :=
    M.function_body
      (let* α0 : ltac:(refine i16) := deref self in
      let* α1 : ltac:(refine u16) := cast α0 in
      let* α2 : ltac:(refine (ref u16)) := borrow α1 in
      let* α3 : ltac:(refine i16) := deref other in
      let* α4 : ltac:(refine u16) := cast α3 in
      let* α5 : ltac:(refine (ref u16)) := borrow α4 in
      (subtle.ConstantTimeEq.ct_eq (Self := u16) (Trait := ltac:(refine _)))
        α2
        α5).
  
  Global Instance AssociatedFunction_ct_eq :
    Notation.DoubleColon Self "ct_eq" := {
    Notation.double_colon := ct_eq;
  }.
  
  Global Instance ℐ : subtle.ConstantTimeEq.Required.Trait Self := {
    subtle.ConstantTimeEq.ct_eq := ct_eq;
    subtle.ConstantTimeEq.ct_ne := Datatypes.None;
  }.
End Impl_subtle_ConstantTimeEq_for_i16.
End Impl_subtle_ConstantTimeEq_for_i16.

Module  Impl_subtle_ConstantTimeEq_for_u32.
Section Impl_subtle_ConstantTimeEq_for_u32.
  Context `{ℋ : State.Trait}.
  
  Definition Self : Set := u32.
  
  Definition ct_eq (self : ref Self) (other : ref u32) : M subtle.Choice :=
    M.function_body
      (let* x : ltac:(refine u32) :=
        (core.ops.bit.BitXor.bitxor
            (Self := ref u32)
            (Trait := ltac:(refine _)))
          self
          other in
      let* y : ltac:(refine u32) :=
        let* α0 : ltac:(refine u32) := u32::["wrapping_neg"] x in
        let* α1 : ltac:(refine u32) := BinOp.bit_or x α0 in
        let* α2 : ltac:(refine i32) := M.alloc 32 in
        let* α3 : ltac:(refine i32) := M.alloc 1 in
        let* α4 : ltac:(refine i32) := BinOp.sub α2 α3 in
        BinOp.shr α1 α4 in
      let* α0 : ltac:(refine u32) := M.alloc 1 in
      let* α1 : ltac:(refine u32) := use α0 in
      let* α2 : ltac:(refine u32) := BinOp.bit_xor y α1 in
      let* α3 : ltac:(refine u8) := cast α2 in
      (core.convert.Into.into (Self := u8) (Trait := ltac:(refine _))) α3).
  
  Global Instance AssociatedFunction_ct_eq :
    Notation.DoubleColon Self "ct_eq" := {
    Notation.double_colon := ct_eq;
  }.
  
  Global Instance ℐ : subtle.ConstantTimeEq.Required.Trait Self := {
    subtle.ConstantTimeEq.ct_eq := ct_eq;
    subtle.ConstantTimeEq.ct_ne := Datatypes.None;
  }.
End Impl_subtle_ConstantTimeEq_for_u32.
End Impl_subtle_ConstantTimeEq_for_u32.

Module  Impl_subtle_ConstantTimeEq_for_i32.
Section Impl_subtle_ConstantTimeEq_for_i32.
  Context `{ℋ : State.Trait}.
  
  Definition Self : Set := i32.
  
  Definition ct_eq (self : ref Self) (other : ref i32) : M subtle.Choice :=
    M.function_body
      (let* α0 : ltac:(refine i32) := deref self in
      let* α1 : ltac:(refine u32) := cast α0 in
      let* α2 : ltac:(refine (ref u32)) := borrow α1 in
      let* α3 : ltac:(refine i32) := deref other in
      let* α4 : ltac:(refine u32) := cast α3 in
      let* α5 : ltac:(refine (ref u32)) := borrow α4 in
      (subtle.ConstantTimeEq.ct_eq (Self := u32) (Trait := ltac:(refine _)))
        α2
        α5).
  
  Global Instance AssociatedFunction_ct_eq :
    Notation.DoubleColon Self "ct_eq" := {
    Notation.double_colon := ct_eq;
  }.
  
  Global Instance ℐ : subtle.ConstantTimeEq.Required.Trait Self := {
    subtle.ConstantTimeEq.ct_eq := ct_eq;
    subtle.ConstantTimeEq.ct_ne := Datatypes.None;
  }.
End Impl_subtle_ConstantTimeEq_for_i32.
End Impl_subtle_ConstantTimeEq_for_i32.

Module  Impl_subtle_ConstantTimeEq_for_u64.
Section Impl_subtle_ConstantTimeEq_for_u64.
  Context `{ℋ : State.Trait}.
  
  Definition Self : Set := u64.
  
  Definition ct_eq (self : ref Self) (other : ref u64) : M subtle.Choice :=
    M.function_body
      (let* x : ltac:(refine u64) :=
        (core.ops.bit.BitXor.bitxor
            (Self := ref u64)
            (Trait := ltac:(refine _)))
          self
          other in
      let* y : ltac:(refine u64) :=
        let* α0 : ltac:(refine u64) := u64::["wrapping_neg"] x in
        let* α1 : ltac:(refine u64) := BinOp.bit_or x α0 in
        let* α2 : ltac:(refine i32) := M.alloc 64 in
        let* α3 : ltac:(refine i32) := M.alloc 1 in
        let* α4 : ltac:(refine i32) := BinOp.sub α2 α3 in
        BinOp.shr α1 α4 in
      let* α0 : ltac:(refine u64) := M.alloc 1 in
      let* α1 : ltac:(refine u64) := use α0 in
      let* α2 : ltac:(refine u64) := BinOp.bit_xor y α1 in
      let* α3 : ltac:(refine u8) := cast α2 in
      (core.convert.Into.into (Self := u8) (Trait := ltac:(refine _))) α3).
  
  Global Instance AssociatedFunction_ct_eq :
    Notation.DoubleColon Self "ct_eq" := {
    Notation.double_colon := ct_eq;
  }.
  
  Global Instance ℐ : subtle.ConstantTimeEq.Required.Trait Self := {
    subtle.ConstantTimeEq.ct_eq := ct_eq;
    subtle.ConstantTimeEq.ct_ne := Datatypes.None;
  }.
End Impl_subtle_ConstantTimeEq_for_u64.
End Impl_subtle_ConstantTimeEq_for_u64.

Module  Impl_subtle_ConstantTimeEq_for_i64.
Section Impl_subtle_ConstantTimeEq_for_i64.
  Context `{ℋ : State.Trait}.
  
  Definition Self : Set := i64.
  
  Definition ct_eq (self : ref Self) (other : ref i64) : M subtle.Choice :=
    M.function_body
      (let* α0 : ltac:(refine i64) := deref self in
      let* α1 : ltac:(refine u64) := cast α0 in
      let* α2 : ltac:(refine (ref u64)) := borrow α1 in
      let* α3 : ltac:(refine i64) := deref other in
      let* α4 : ltac:(refine u64) := cast α3 in
      let* α5 : ltac:(refine (ref u64)) := borrow α4 in
      (subtle.ConstantTimeEq.ct_eq (Self := u64) (Trait := ltac:(refine _)))
        α2
        α5).
  
  Global Instance AssociatedFunction_ct_eq :
    Notation.DoubleColon Self "ct_eq" := {
    Notation.double_colon := ct_eq;
  }.
  
  Global Instance ℐ : subtle.ConstantTimeEq.Required.Trait Self := {
    subtle.ConstantTimeEq.ct_eq := ct_eq;
    subtle.ConstantTimeEq.ct_ne := Datatypes.None;
  }.
End Impl_subtle_ConstantTimeEq_for_i64.
End Impl_subtle_ConstantTimeEq_for_i64.

Module  Impl_subtle_ConstantTimeEq_for_usize.
Section Impl_subtle_ConstantTimeEq_for_usize.
  Context `{ℋ : State.Trait}.
  
  Definition Self : Set := usize.
  
  Definition ct_eq (self : ref Self) (other : ref usize) : M subtle.Choice :=
    M.function_body
      (let* x : ltac:(refine usize) :=
        (core.ops.bit.BitXor.bitxor
            (Self := ref usize)
            (Trait := ltac:(refine _)))
          self
          other in
      let* y : ltac:(refine usize) :=
        let* α0 : ltac:(refine usize) := usize::["wrapping_neg"] x in
        let* α1 : ltac:(refine usize) := BinOp.bit_or x α0 in
        let* α2 : ltac:(refine usize) := core.mem.size_of in
        let* α3 : ltac:(refine usize) := M.alloc 8 in
        let* α4 : ltac:(refine usize) := BinOp.mul α2 α3 in
        let* α5 : ltac:(refine usize) := M.alloc 1 in
        let* α6 : ltac:(refine usize) := BinOp.sub α4 α5 in
        BinOp.shr α1 α6 in
      let* α0 : ltac:(refine usize) := M.alloc 1 in
      let* α1 : ltac:(refine usize) := use α0 in
      let* α2 : ltac:(refine usize) := BinOp.bit_xor y α1 in
      let* α3 : ltac:(refine u8) := cast α2 in
      (core.convert.Into.into (Self := u8) (Trait := ltac:(refine _))) α3).
  
  Global Instance AssociatedFunction_ct_eq :
    Notation.DoubleColon Self "ct_eq" := {
    Notation.double_colon := ct_eq;
  }.
  
  Global Instance ℐ : subtle.ConstantTimeEq.Required.Trait Self := {
    subtle.ConstantTimeEq.ct_eq := ct_eq;
    subtle.ConstantTimeEq.ct_ne := Datatypes.None;
  }.
End Impl_subtle_ConstantTimeEq_for_usize.
End Impl_subtle_ConstantTimeEq_for_usize.

Module  Impl_subtle_ConstantTimeEq_for_isize.
Section Impl_subtle_ConstantTimeEq_for_isize.
  Context `{ℋ : State.Trait}.
  
  Definition Self : Set := isize.
  
  Definition ct_eq (self : ref Self) (other : ref isize) : M subtle.Choice :=
    M.function_body
      (let* α0 : ltac:(refine isize) := deref self in
      let* α1 : ltac:(refine usize) := cast α0 in
      let* α2 : ltac:(refine (ref usize)) := borrow α1 in
      let* α3 : ltac:(refine isize) := deref other in
      let* α4 : ltac:(refine usize) := cast α3 in
      let* α5 : ltac:(refine (ref usize)) := borrow α4 in
      (subtle.ConstantTimeEq.ct_eq (Self := usize) (Trait := ltac:(refine _)))
        α2
        α5).
  
  Global Instance AssociatedFunction_ct_eq :
    Notation.DoubleColon Self "ct_eq" := {
    Notation.double_colon := ct_eq;
  }.
  
  Global Instance ℐ : subtle.ConstantTimeEq.Required.Trait Self := {
    subtle.ConstantTimeEq.ct_eq := ct_eq;
    subtle.ConstantTimeEq.ct_ne := Datatypes.None;
  }.
End Impl_subtle_ConstantTimeEq_for_isize.
End Impl_subtle_ConstantTimeEq_for_isize.

Module  ConditionallySelectable.
Section ConditionallySelectable.
  Context `{ℋ : State.Trait}.
  
  Class Trait (Self : Set) : Type := {
    ℒ_0 :: core.marker.Copy.Trait Self;
    conditional_select : (ref Self) -> (ref Self) -> subtle.Choice -> M Self;
  }.
  
End ConditionallySelectable.
End ConditionallySelectable.

Module  Impl_subtle_ConditionallySelectable_for_u8.
Section Impl_subtle_ConditionallySelectable_for_u8.
  Context `{ℋ : State.Trait}.
  
  Definition Self : Set := u8.
  
  Definition conditional_select
      (a : ref Self)
      (b : ref Self)
      (choice : subtle.Choice)
      : M Self :=
    M.function_body
      (let* mask : ltac:(refine u8) :=
        let* α0 : ltac:(refine (ref subtle.Choice)) := borrow choice in
        let* α1 : ltac:(refine u8) := subtle.Choice::["unwrap_u8"] α0 in
        let* α2 : ltac:(refine i8) := cast α1 in
        let* α3 : ltac:(refine i8) := UnOp.neg α2 in
        cast α3 in
      let* α0 : ltac:(refine u8) :=
        (core.ops.bit.BitXor.bitxor (Self := ref u8) (Trait := ltac:(refine _)))
          a
          b in
      let* α1 : ltac:(refine u8) := BinOp.bit_and mask α0 in
      (core.ops.bit.BitXor.bitxor (Self := ref u8) (Trait := ltac:(refine _)))
        a
        α1).
  
  Global Instance AssociatedFunction_conditional_select :
    Notation.DoubleColon Self "conditional_select" := {
    Notation.double_colon := conditional_select;
  }.
  
  Definition conditional_assign
      (self : mut_ref Self)
      (other : ref Self)
      (choice : subtle.Choice)
      : M unit :=
    M.function_body
      (let* mask : ltac:(refine u8) :=
        let* α0 : ltac:(refine (ref subtle.Choice)) := borrow choice in
        let* α1 : ltac:(refine u8) := subtle.Choice::["unwrap_u8"] α0 in
        let* α2 : ltac:(refine i8) := cast α1 in
        let* α3 : ltac:(refine i8) := UnOp.neg α2 in
        cast α3 in
      let* _ : ltac:(refine unit) :=
        let* α0 : ltac:(refine u8) := deref self in
        let* α1 : ltac:(refine u8) := deref self in
        let* α2 : ltac:(refine u8) := deref other in
        let* α3 : ltac:(refine u8) := BinOp.bit_xor α1 α2 in
        let* α4 : ltac:(refine u8) := BinOp.bit_and mask α3 in
        assign_op bitxor α0 α4 in
      M.alloc tt).
  
  Global Instance AssociatedFunction_conditional_assign :
    Notation.DoubleColon Self "conditional_assign" := {
    Notation.double_colon := conditional_assign;
  }.
  
  Definition conditional_swap
      (a : mut_ref Self)
      (b : mut_ref Self)
      (choice : subtle.Choice)
      : M unit :=
    M.function_body
      (let* mask : ltac:(refine u8) :=
        let* α0 : ltac:(refine (ref subtle.Choice)) := borrow choice in
        let* α1 : ltac:(refine u8) := subtle.Choice::["unwrap_u8"] α0 in
        let* α2 : ltac:(refine i8) := cast α1 in
        let* α3 : ltac:(refine i8) := UnOp.neg α2 in
        cast α3 in
      let* t : ltac:(refine u8) :=
        let* α0 : ltac:(refine u8) := deref a in
        let* α1 : ltac:(refine u8) := deref b in
        let* α2 : ltac:(refine u8) := BinOp.bit_xor α0 α1 in
        BinOp.bit_and mask α2 in
      let* _ : ltac:(refine unit) :=
        let* α0 : ltac:(refine u8) := deref a in
        assign_op bitxor α0 t in
      let* _ : ltac:(refine unit) :=
        let* α0 : ltac:(refine u8) := deref b in
        assign_op bitxor α0 t in
      M.alloc tt).
  
  Global Instance AssociatedFunction_conditional_swap :
    Notation.DoubleColon Self "conditional_swap" := {
    Notation.double_colon := conditional_swap;
  }.
  
  Global Instance ℐ : subtle.ConditionallySelectable.Required.Trait Self := {
    subtle.ConditionallySelectable.conditional_select := conditional_select;
    subtle.ConditionallySelectable.conditional_assign :=
      Datatypes.Some conditional_assign;
    subtle.ConditionallySelectable.conditional_swap :=
      Datatypes.Some conditional_swap;
  }.
End Impl_subtle_ConditionallySelectable_for_u8.
End Impl_subtle_ConditionallySelectable_for_u8.

Module  Impl_subtle_ConditionallySelectable_for_i8.
Section Impl_subtle_ConditionallySelectable_for_i8.
  Context `{ℋ : State.Trait}.
  
  Definition Self : Set := i8.
  
  Definition conditional_select
      (a : ref Self)
      (b : ref Self)
      (choice : subtle.Choice)
      : M Self :=
    M.function_body
      (let* mask : ltac:(refine i8) :=
        let* α0 : ltac:(refine (ref subtle.Choice)) := borrow choice in
        let* α1 : ltac:(refine u8) := subtle.Choice::["unwrap_u8"] α0 in
        let* α2 : ltac:(refine i8) := cast α1 in
        let* α3 : ltac:(refine i8) := UnOp.neg α2 in
        use α3 in
      let* α0 : ltac:(refine i8) :=
        (core.ops.bit.BitXor.bitxor (Self := ref i8) (Trait := ltac:(refine _)))
          a
          b in
      let* α1 : ltac:(refine i8) := BinOp.bit_and mask α0 in
      (core.ops.bit.BitXor.bitxor (Self := ref i8) (Trait := ltac:(refine _)))
        a
        α1).
  
  Global Instance AssociatedFunction_conditional_select :
    Notation.DoubleColon Self "conditional_select" := {
    Notation.double_colon := conditional_select;
  }.
  
  Definition conditional_assign
      (self : mut_ref Self)
      (other : ref Self)
      (choice : subtle.Choice)
      : M unit :=
    M.function_body
      (let* mask : ltac:(refine i8) :=
        let* α0 : ltac:(refine (ref subtle.Choice)) := borrow choice in
        let* α1 : ltac:(refine u8) := subtle.Choice::["unwrap_u8"] α0 in
        let* α2 : ltac:(refine i8) := cast α1 in
        let* α3 : ltac:(refine i8) := UnOp.neg α2 in
        use α3 in
      let* _ : ltac:(refine unit) :=
        let* α0 : ltac:(refine i8) := deref self in
        let* α1 : ltac:(refine i8) := deref self in
        let* α2 : ltac:(refine i8) := deref other in
        let* α3 : ltac:(refine i8) := BinOp.bit_xor α1 α2 in
        let* α4 : ltac:(refine i8) := BinOp.bit_and mask α3 in
        assign_op bitxor α0 α4 in
      M.alloc tt).
  
  Global Instance AssociatedFunction_conditional_assign :
    Notation.DoubleColon Self "conditional_assign" := {
    Notation.double_colon := conditional_assign;
  }.
  
  Definition conditional_swap
      (a : mut_ref Self)
      (b : mut_ref Self)
      (choice : subtle.Choice)
      : M unit :=
    M.function_body
      (let* mask : ltac:(refine i8) :=
        let* α0 : ltac:(refine (ref subtle.Choice)) := borrow choice in
        let* α1 : ltac:(refine u8) := subtle.Choice::["unwrap_u8"] α0 in
        let* α2 : ltac:(refine i8) := cast α1 in
        let* α3 : ltac:(refine i8) := UnOp.neg α2 in
        use α3 in
      let* t : ltac:(refine i8) :=
        let* α0 : ltac:(refine i8) := deref a in
        let* α1 : ltac:(refine i8) := deref b in
        let* α2 : ltac:(refine i8) := BinOp.bit_xor α0 α1 in
        BinOp.bit_and mask α2 in
      let* _ : ltac:(refine unit) :=
        let* α0 : ltac:(refine i8) := deref a in
        assign_op bitxor α0 t in
      let* _ : ltac:(refine unit) :=
        let* α0 : ltac:(refine i8) := deref b in
        assign_op bitxor α0 t in
      M.alloc tt).
  
  Global Instance AssociatedFunction_conditional_swap :
    Notation.DoubleColon Self "conditional_swap" := {
    Notation.double_colon := conditional_swap;
  }.
  
  Global Instance ℐ : subtle.ConditionallySelectable.Required.Trait Self := {
    subtle.ConditionallySelectable.conditional_select := conditional_select;
    subtle.ConditionallySelectable.conditional_assign :=
      Datatypes.Some conditional_assign;
    subtle.ConditionallySelectable.conditional_swap :=
      Datatypes.Some conditional_swap;
  }.
End Impl_subtle_ConditionallySelectable_for_i8.
End Impl_subtle_ConditionallySelectable_for_i8.

Module  Impl_subtle_ConditionallySelectable_for_u16.
Section Impl_subtle_ConditionallySelectable_for_u16.
  Context `{ℋ : State.Trait}.
  
  Definition Self : Set := u16.
  
  Definition conditional_select
      (a : ref Self)
      (b : ref Self)
      (choice : subtle.Choice)
      : M Self :=
    M.function_body
      (let* mask : ltac:(refine u16) :=
        let* α0 : ltac:(refine (ref subtle.Choice)) := borrow choice in
        let* α1 : ltac:(refine u8) := subtle.Choice::["unwrap_u8"] α0 in
        let* α2 : ltac:(refine i16) := cast α1 in
        let* α3 : ltac:(refine i16) := UnOp.neg α2 in
        cast α3 in
      let* α0 : ltac:(refine u16) :=
        (core.ops.bit.BitXor.bitxor
            (Self := ref u16)
            (Trait := ltac:(refine _)))
          a
          b in
      let* α1 : ltac:(refine u16) := BinOp.bit_and mask α0 in
      (core.ops.bit.BitXor.bitxor (Self := ref u16) (Trait := ltac:(refine _)))
        a
        α1).
  
  Global Instance AssociatedFunction_conditional_select :
    Notation.DoubleColon Self "conditional_select" := {
    Notation.double_colon := conditional_select;
  }.
  
  Definition conditional_assign
      (self : mut_ref Self)
      (other : ref Self)
      (choice : subtle.Choice)
      : M unit :=
    M.function_body
      (let* mask : ltac:(refine u16) :=
        let* α0 : ltac:(refine (ref subtle.Choice)) := borrow choice in
        let* α1 : ltac:(refine u8) := subtle.Choice::["unwrap_u8"] α0 in
        let* α2 : ltac:(refine i16) := cast α1 in
        let* α3 : ltac:(refine i16) := UnOp.neg α2 in
        cast α3 in
      let* _ : ltac:(refine unit) :=
        let* α0 : ltac:(refine u16) := deref self in
        let* α1 : ltac:(refine u16) := deref self in
        let* α2 : ltac:(refine u16) := deref other in
        let* α3 : ltac:(refine u16) := BinOp.bit_xor α1 α2 in
        let* α4 : ltac:(refine u16) := BinOp.bit_and mask α3 in
        assign_op bitxor α0 α4 in
      M.alloc tt).
  
  Global Instance AssociatedFunction_conditional_assign :
    Notation.DoubleColon Self "conditional_assign" := {
    Notation.double_colon := conditional_assign;
  }.
  
  Definition conditional_swap
      (a : mut_ref Self)
      (b : mut_ref Self)
      (choice : subtle.Choice)
      : M unit :=
    M.function_body
      (let* mask : ltac:(refine u16) :=
        let* α0 : ltac:(refine (ref subtle.Choice)) := borrow choice in
        let* α1 : ltac:(refine u8) := subtle.Choice::["unwrap_u8"] α0 in
        let* α2 : ltac:(refine i16) := cast α1 in
        let* α3 : ltac:(refine i16) := UnOp.neg α2 in
        cast α3 in
      let* t : ltac:(refine u16) :=
        let* α0 : ltac:(refine u16) := deref a in
        let* α1 : ltac:(refine u16) := deref b in
        let* α2 : ltac:(refine u16) := BinOp.bit_xor α0 α1 in
        BinOp.bit_and mask α2 in
      let* _ : ltac:(refine unit) :=
        let* α0 : ltac:(refine u16) := deref a in
        assign_op bitxor α0 t in
      let* _ : ltac:(refine unit) :=
        let* α0 : ltac:(refine u16) := deref b in
        assign_op bitxor α0 t in
      M.alloc tt).
  
  Global Instance AssociatedFunction_conditional_swap :
    Notation.DoubleColon Self "conditional_swap" := {
    Notation.double_colon := conditional_swap;
  }.
  
  Global Instance ℐ : subtle.ConditionallySelectable.Required.Trait Self := {
    subtle.ConditionallySelectable.conditional_select := conditional_select;
    subtle.ConditionallySelectable.conditional_assign :=
      Datatypes.Some conditional_assign;
    subtle.ConditionallySelectable.conditional_swap :=
      Datatypes.Some conditional_swap;
  }.
End Impl_subtle_ConditionallySelectable_for_u16.
End Impl_subtle_ConditionallySelectable_for_u16.

Module  Impl_subtle_ConditionallySelectable_for_i16.
Section Impl_subtle_ConditionallySelectable_for_i16.
  Context `{ℋ : State.Trait}.
  
  Definition Self : Set := i16.
  
  Definition conditional_select
      (a : ref Self)
      (b : ref Self)
      (choice : subtle.Choice)
      : M Self :=
    M.function_body
      (let* mask : ltac:(refine i16) :=
        let* α0 : ltac:(refine (ref subtle.Choice)) := borrow choice in
        let* α1 : ltac:(refine u8) := subtle.Choice::["unwrap_u8"] α0 in
        let* α2 : ltac:(refine i16) := cast α1 in
        let* α3 : ltac:(refine i16) := UnOp.neg α2 in
        use α3 in
      let* α0 : ltac:(refine i16) :=
        (core.ops.bit.BitXor.bitxor
            (Self := ref i16)
            (Trait := ltac:(refine _)))
          a
          b in
      let* α1 : ltac:(refine i16) := BinOp.bit_and mask α0 in
      (core.ops.bit.BitXor.bitxor (Self := ref i16) (Trait := ltac:(refine _)))
        a
        α1).
  
  Global Instance AssociatedFunction_conditional_select :
    Notation.DoubleColon Self "conditional_select" := {
    Notation.double_colon := conditional_select;
  }.
  
  Definition conditional_assign
      (self : mut_ref Self)
      (other : ref Self)
      (choice : subtle.Choice)
      : M unit :=
    M.function_body
      (let* mask : ltac:(refine i16) :=
        let* α0 : ltac:(refine (ref subtle.Choice)) := borrow choice in
        let* α1 : ltac:(refine u8) := subtle.Choice::["unwrap_u8"] α0 in
        let* α2 : ltac:(refine i16) := cast α1 in
        let* α3 : ltac:(refine i16) := UnOp.neg α2 in
        use α3 in
      let* _ : ltac:(refine unit) :=
        let* α0 : ltac:(refine i16) := deref self in
        let* α1 : ltac:(refine i16) := deref self in
        let* α2 : ltac:(refine i16) := deref other in
        let* α3 : ltac:(refine i16) := BinOp.bit_xor α1 α2 in
        let* α4 : ltac:(refine i16) := BinOp.bit_and mask α3 in
        assign_op bitxor α0 α4 in
      M.alloc tt).
  
  Global Instance AssociatedFunction_conditional_assign :
    Notation.DoubleColon Self "conditional_assign" := {
    Notation.double_colon := conditional_assign;
  }.
  
  Definition conditional_swap
      (a : mut_ref Self)
      (b : mut_ref Self)
      (choice : subtle.Choice)
      : M unit :=
    M.function_body
      (let* mask : ltac:(refine i16) :=
        let* α0 : ltac:(refine (ref subtle.Choice)) := borrow choice in
        let* α1 : ltac:(refine u8) := subtle.Choice::["unwrap_u8"] α0 in
        let* α2 : ltac:(refine i16) := cast α1 in
        let* α3 : ltac:(refine i16) := UnOp.neg α2 in
        use α3 in
      let* t : ltac:(refine i16) :=
        let* α0 : ltac:(refine i16) := deref a in
        let* α1 : ltac:(refine i16) := deref b in
        let* α2 : ltac:(refine i16) := BinOp.bit_xor α0 α1 in
        BinOp.bit_and mask α2 in
      let* _ : ltac:(refine unit) :=
        let* α0 : ltac:(refine i16) := deref a in
        assign_op bitxor α0 t in
      let* _ : ltac:(refine unit) :=
        let* α0 : ltac:(refine i16) := deref b in
        assign_op bitxor α0 t in
      M.alloc tt).
  
  Global Instance AssociatedFunction_conditional_swap :
    Notation.DoubleColon Self "conditional_swap" := {
    Notation.double_colon := conditional_swap;
  }.
  
  Global Instance ℐ : subtle.ConditionallySelectable.Required.Trait Self := {
    subtle.ConditionallySelectable.conditional_select := conditional_select;
    subtle.ConditionallySelectable.conditional_assign :=
      Datatypes.Some conditional_assign;
    subtle.ConditionallySelectable.conditional_swap :=
      Datatypes.Some conditional_swap;
  }.
End Impl_subtle_ConditionallySelectable_for_i16.
End Impl_subtle_ConditionallySelectable_for_i16.

Module  Impl_subtle_ConditionallySelectable_for_u32.
Section Impl_subtle_ConditionallySelectable_for_u32.
  Context `{ℋ : State.Trait}.
  
  Definition Self : Set := u32.
  
  Definition conditional_select
      (a : ref Self)
      (b : ref Self)
      (choice : subtle.Choice)
      : M Self :=
    M.function_body
      (let* mask : ltac:(refine u32) :=
        let* α0 : ltac:(refine (ref subtle.Choice)) := borrow choice in
        let* α1 : ltac:(refine u8) := subtle.Choice::["unwrap_u8"] α0 in
        let* α2 : ltac:(refine i32) := cast α1 in
        let* α3 : ltac:(refine i32) := UnOp.neg α2 in
        cast α3 in
      let* α0 : ltac:(refine u32) :=
        (core.ops.bit.BitXor.bitxor
            (Self := ref u32)
            (Trait := ltac:(refine _)))
          a
          b in
      let* α1 : ltac:(refine u32) := BinOp.bit_and mask α0 in
      (core.ops.bit.BitXor.bitxor (Self := ref u32) (Trait := ltac:(refine _)))
        a
        α1).
  
  Global Instance AssociatedFunction_conditional_select :
    Notation.DoubleColon Self "conditional_select" := {
    Notation.double_colon := conditional_select;
  }.
  
  Definition conditional_assign
      (self : mut_ref Self)
      (other : ref Self)
      (choice : subtle.Choice)
      : M unit :=
    M.function_body
      (let* mask : ltac:(refine u32) :=
        let* α0 : ltac:(refine (ref subtle.Choice)) := borrow choice in
        let* α1 : ltac:(refine u8) := subtle.Choice::["unwrap_u8"] α0 in
        let* α2 : ltac:(refine i32) := cast α1 in
        let* α3 : ltac:(refine i32) := UnOp.neg α2 in
        cast α3 in
      let* _ : ltac:(refine unit) :=
        let* α0 : ltac:(refine u32) := deref self in
        let* α1 : ltac:(refine u32) := deref self in
        let* α2 : ltac:(refine u32) := deref other in
        let* α3 : ltac:(refine u32) := BinOp.bit_xor α1 α2 in
        let* α4 : ltac:(refine u32) := BinOp.bit_and mask α3 in
        assign_op bitxor α0 α4 in
      M.alloc tt).
  
  Global Instance AssociatedFunction_conditional_assign :
    Notation.DoubleColon Self "conditional_assign" := {
    Notation.double_colon := conditional_assign;
  }.
  
  Definition conditional_swap
      (a : mut_ref Self)
      (b : mut_ref Self)
      (choice : subtle.Choice)
      : M unit :=
    M.function_body
      (let* mask : ltac:(refine u32) :=
        let* α0 : ltac:(refine (ref subtle.Choice)) := borrow choice in
        let* α1 : ltac:(refine u8) := subtle.Choice::["unwrap_u8"] α0 in
        let* α2 : ltac:(refine i32) := cast α1 in
        let* α3 : ltac:(refine i32) := UnOp.neg α2 in
        cast α3 in
      let* t : ltac:(refine u32) :=
        let* α0 : ltac:(refine u32) := deref a in
        let* α1 : ltac:(refine u32) := deref b in
        let* α2 : ltac:(refine u32) := BinOp.bit_xor α0 α1 in
        BinOp.bit_and mask α2 in
      let* _ : ltac:(refine unit) :=
        let* α0 : ltac:(refine u32) := deref a in
        assign_op bitxor α0 t in
      let* _ : ltac:(refine unit) :=
        let* α0 : ltac:(refine u32) := deref b in
        assign_op bitxor α0 t in
      M.alloc tt).
  
  Global Instance AssociatedFunction_conditional_swap :
    Notation.DoubleColon Self "conditional_swap" := {
    Notation.double_colon := conditional_swap;
  }.
  
  Global Instance ℐ : subtle.ConditionallySelectable.Required.Trait Self := {
    subtle.ConditionallySelectable.conditional_select := conditional_select;
    subtle.ConditionallySelectable.conditional_assign :=
      Datatypes.Some conditional_assign;
    subtle.ConditionallySelectable.conditional_swap :=
      Datatypes.Some conditional_swap;
  }.
End Impl_subtle_ConditionallySelectable_for_u32.
End Impl_subtle_ConditionallySelectable_for_u32.

Module  Impl_subtle_ConditionallySelectable_for_i32.
Section Impl_subtle_ConditionallySelectable_for_i32.
  Context `{ℋ : State.Trait}.
  
  Definition Self : Set := i32.
  
  Definition conditional_select
      (a : ref Self)
      (b : ref Self)
      (choice : subtle.Choice)
      : M Self :=
    M.function_body
      (let* mask : ltac:(refine i32) :=
        let* α0 : ltac:(refine (ref subtle.Choice)) := borrow choice in
        let* α1 : ltac:(refine u8) := subtle.Choice::["unwrap_u8"] α0 in
        let* α2 : ltac:(refine i32) := cast α1 in
        let* α3 : ltac:(refine i32) := UnOp.neg α2 in
        use α3 in
      let* α0 : ltac:(refine i32) :=
        (core.ops.bit.BitXor.bitxor
            (Self := ref i32)
            (Trait := ltac:(refine _)))
          a
          b in
      let* α1 : ltac:(refine i32) := BinOp.bit_and mask α0 in
      (core.ops.bit.BitXor.bitxor (Self := ref i32) (Trait := ltac:(refine _)))
        a
        α1).
  
  Global Instance AssociatedFunction_conditional_select :
    Notation.DoubleColon Self "conditional_select" := {
    Notation.double_colon := conditional_select;
  }.
  
  Definition conditional_assign
      (self : mut_ref Self)
      (other : ref Self)
      (choice : subtle.Choice)
      : M unit :=
    M.function_body
      (let* mask : ltac:(refine i32) :=
        let* α0 : ltac:(refine (ref subtle.Choice)) := borrow choice in
        let* α1 : ltac:(refine u8) := subtle.Choice::["unwrap_u8"] α0 in
        let* α2 : ltac:(refine i32) := cast α1 in
        let* α3 : ltac:(refine i32) := UnOp.neg α2 in
        use α3 in
      let* _ : ltac:(refine unit) :=
        let* α0 : ltac:(refine i32) := deref self in
        let* α1 : ltac:(refine i32) := deref self in
        let* α2 : ltac:(refine i32) := deref other in
        let* α3 : ltac:(refine i32) := BinOp.bit_xor α1 α2 in
        let* α4 : ltac:(refine i32) := BinOp.bit_and mask α3 in
        assign_op bitxor α0 α4 in
      M.alloc tt).
  
  Global Instance AssociatedFunction_conditional_assign :
    Notation.DoubleColon Self "conditional_assign" := {
    Notation.double_colon := conditional_assign;
  }.
  
  Definition conditional_swap
      (a : mut_ref Self)
      (b : mut_ref Self)
      (choice : subtle.Choice)
      : M unit :=
    M.function_body
      (let* mask : ltac:(refine i32) :=
        let* α0 : ltac:(refine (ref subtle.Choice)) := borrow choice in
        let* α1 : ltac:(refine u8) := subtle.Choice::["unwrap_u8"] α0 in
        let* α2 : ltac:(refine i32) := cast α1 in
        let* α3 : ltac:(refine i32) := UnOp.neg α2 in
        use α3 in
      let* t : ltac:(refine i32) :=
        let* α0 : ltac:(refine i32) := deref a in
        let* α1 : ltac:(refine i32) := deref b in
        let* α2 : ltac:(refine i32) := BinOp.bit_xor α0 α1 in
        BinOp.bit_and mask α2 in
      let* _ : ltac:(refine unit) :=
        let* α0 : ltac:(refine i32) := deref a in
        assign_op bitxor α0 t in
      let* _ : ltac:(refine unit) :=
        let* α0 : ltac:(refine i32) := deref b in
        assign_op bitxor α0 t in
      M.alloc tt).
  
  Global Instance AssociatedFunction_conditional_swap :
    Notation.DoubleColon Self "conditional_swap" := {
    Notation.double_colon := conditional_swap;
  }.
  
  Global Instance ℐ : subtle.ConditionallySelectable.Required.Trait Self := {
    subtle.ConditionallySelectable.conditional_select := conditional_select;
    subtle.ConditionallySelectable.conditional_assign :=
      Datatypes.Some conditional_assign;
    subtle.ConditionallySelectable.conditional_swap :=
      Datatypes.Some conditional_swap;
  }.
End Impl_subtle_ConditionallySelectable_for_i32.
End Impl_subtle_ConditionallySelectable_for_i32.

Module  Impl_subtle_ConditionallySelectable_for_u64.
Section Impl_subtle_ConditionallySelectable_for_u64.
  Context `{ℋ : State.Trait}.
  
  Definition Self : Set := u64.
  
  Definition conditional_select
      (a : ref Self)
      (b : ref Self)
      (choice : subtle.Choice)
      : M Self :=
    M.function_body
      (let* mask : ltac:(refine u64) :=
        let* α0 : ltac:(refine (ref subtle.Choice)) := borrow choice in
        let* α1 : ltac:(refine u8) := subtle.Choice::["unwrap_u8"] α0 in
        let* α2 : ltac:(refine i64) := cast α1 in
        let* α3 : ltac:(refine i64) := UnOp.neg α2 in
        cast α3 in
      let* α0 : ltac:(refine u64) :=
        (core.ops.bit.BitXor.bitxor
            (Self := ref u64)
            (Trait := ltac:(refine _)))
          a
          b in
      let* α1 : ltac:(refine u64) := BinOp.bit_and mask α0 in
      (core.ops.bit.BitXor.bitxor (Self := ref u64) (Trait := ltac:(refine _)))
        a
        α1).
  
  Global Instance AssociatedFunction_conditional_select :
    Notation.DoubleColon Self "conditional_select" := {
    Notation.double_colon := conditional_select;
  }.
  
  Definition conditional_assign
      (self : mut_ref Self)
      (other : ref Self)
      (choice : subtle.Choice)
      : M unit :=
    M.function_body
      (let* mask : ltac:(refine u64) :=
        let* α0 : ltac:(refine (ref subtle.Choice)) := borrow choice in
        let* α1 : ltac:(refine u8) := subtle.Choice::["unwrap_u8"] α0 in
        let* α2 : ltac:(refine i64) := cast α1 in
        let* α3 : ltac:(refine i64) := UnOp.neg α2 in
        cast α3 in
      let* _ : ltac:(refine unit) :=
        let* α0 : ltac:(refine u64) := deref self in
        let* α1 : ltac:(refine u64) := deref self in
        let* α2 : ltac:(refine u64) := deref other in
        let* α3 : ltac:(refine u64) := BinOp.bit_xor α1 α2 in
        let* α4 : ltac:(refine u64) := BinOp.bit_and mask α3 in
        assign_op bitxor α0 α4 in
      M.alloc tt).
  
  Global Instance AssociatedFunction_conditional_assign :
    Notation.DoubleColon Self "conditional_assign" := {
    Notation.double_colon := conditional_assign;
  }.
  
  Definition conditional_swap
      (a : mut_ref Self)
      (b : mut_ref Self)
      (choice : subtle.Choice)
      : M unit :=
    M.function_body
      (let* mask : ltac:(refine u64) :=
        let* α0 : ltac:(refine (ref subtle.Choice)) := borrow choice in
        let* α1 : ltac:(refine u8) := subtle.Choice::["unwrap_u8"] α0 in
        let* α2 : ltac:(refine i64) := cast α1 in
        let* α3 : ltac:(refine i64) := UnOp.neg α2 in
        cast α3 in
      let* t : ltac:(refine u64) :=
        let* α0 : ltac:(refine u64) := deref a in
        let* α1 : ltac:(refine u64) := deref b in
        let* α2 : ltac:(refine u64) := BinOp.bit_xor α0 α1 in
        BinOp.bit_and mask α2 in
      let* _ : ltac:(refine unit) :=
        let* α0 : ltac:(refine u64) := deref a in
        assign_op bitxor α0 t in
      let* _ : ltac:(refine unit) :=
        let* α0 : ltac:(refine u64) := deref b in
        assign_op bitxor α0 t in
      M.alloc tt).
  
  Global Instance AssociatedFunction_conditional_swap :
    Notation.DoubleColon Self "conditional_swap" := {
    Notation.double_colon := conditional_swap;
  }.
  
  Global Instance ℐ : subtle.ConditionallySelectable.Required.Trait Self := {
    subtle.ConditionallySelectable.conditional_select := conditional_select;
    subtle.ConditionallySelectable.conditional_assign :=
      Datatypes.Some conditional_assign;
    subtle.ConditionallySelectable.conditional_swap :=
      Datatypes.Some conditional_swap;
  }.
End Impl_subtle_ConditionallySelectable_for_u64.
End Impl_subtle_ConditionallySelectable_for_u64.

Module  Impl_subtle_ConditionallySelectable_for_i64.
Section Impl_subtle_ConditionallySelectable_for_i64.
  Context `{ℋ : State.Trait}.
  
  Definition Self : Set := i64.
  
  Definition conditional_select
      (a : ref Self)
      (b : ref Self)
      (choice : subtle.Choice)
      : M Self :=
    M.function_body
      (let* mask : ltac:(refine i64) :=
        let* α0 : ltac:(refine (ref subtle.Choice)) := borrow choice in
        let* α1 : ltac:(refine u8) := subtle.Choice::["unwrap_u8"] α0 in
        let* α2 : ltac:(refine i64) := cast α1 in
        let* α3 : ltac:(refine i64) := UnOp.neg α2 in
        use α3 in
      let* α0 : ltac:(refine i64) :=
        (core.ops.bit.BitXor.bitxor
            (Self := ref i64)
            (Trait := ltac:(refine _)))
          a
          b in
      let* α1 : ltac:(refine i64) := BinOp.bit_and mask α0 in
      (core.ops.bit.BitXor.bitxor (Self := ref i64) (Trait := ltac:(refine _)))
        a
        α1).
  
  Global Instance AssociatedFunction_conditional_select :
    Notation.DoubleColon Self "conditional_select" := {
    Notation.double_colon := conditional_select;
  }.
  
  Definition conditional_assign
      (self : mut_ref Self)
      (other : ref Self)
      (choice : subtle.Choice)
      : M unit :=
    M.function_body
      (let* mask : ltac:(refine i64) :=
        let* α0 : ltac:(refine (ref subtle.Choice)) := borrow choice in
        let* α1 : ltac:(refine u8) := subtle.Choice::["unwrap_u8"] α0 in
        let* α2 : ltac:(refine i64) := cast α1 in
        let* α3 : ltac:(refine i64) := UnOp.neg α2 in
        use α3 in
      let* _ : ltac:(refine unit) :=
        let* α0 : ltac:(refine i64) := deref self in
        let* α1 : ltac:(refine i64) := deref self in
        let* α2 : ltac:(refine i64) := deref other in
        let* α3 : ltac:(refine i64) := BinOp.bit_xor α1 α2 in
        let* α4 : ltac:(refine i64) := BinOp.bit_and mask α3 in
        assign_op bitxor α0 α4 in
      M.alloc tt).
  
  Global Instance AssociatedFunction_conditional_assign :
    Notation.DoubleColon Self "conditional_assign" := {
    Notation.double_colon := conditional_assign;
  }.
  
  Definition conditional_swap
      (a : mut_ref Self)
      (b : mut_ref Self)
      (choice : subtle.Choice)
      : M unit :=
    M.function_body
      (let* mask : ltac:(refine i64) :=
        let* α0 : ltac:(refine (ref subtle.Choice)) := borrow choice in
        let* α1 : ltac:(refine u8) := subtle.Choice::["unwrap_u8"] α0 in
        let* α2 : ltac:(refine i64) := cast α1 in
        let* α3 : ltac:(refine i64) := UnOp.neg α2 in
        use α3 in
      let* t : ltac:(refine i64) :=
        let* α0 : ltac:(refine i64) := deref a in
        let* α1 : ltac:(refine i64) := deref b in
        let* α2 : ltac:(refine i64) := BinOp.bit_xor α0 α1 in
        BinOp.bit_and mask α2 in
      let* _ : ltac:(refine unit) :=
        let* α0 : ltac:(refine i64) := deref a in
        assign_op bitxor α0 t in
      let* _ : ltac:(refine unit) :=
        let* α0 : ltac:(refine i64) := deref b in
        assign_op bitxor α0 t in
      M.alloc tt).
  
  Global Instance AssociatedFunction_conditional_swap :
    Notation.DoubleColon Self "conditional_swap" := {
    Notation.double_colon := conditional_swap;
  }.
  
  Global Instance ℐ : subtle.ConditionallySelectable.Required.Trait Self := {
    subtle.ConditionallySelectable.conditional_select := conditional_select;
    subtle.ConditionallySelectable.conditional_assign :=
      Datatypes.Some conditional_assign;
    subtle.ConditionallySelectable.conditional_swap :=
      Datatypes.Some conditional_swap;
  }.
End Impl_subtle_ConditionallySelectable_for_i64.
End Impl_subtle_ConditionallySelectable_for_i64.

Module  Impl_subtle_ConditionallySelectable_for_subtle_Choice.
Section Impl_subtle_ConditionallySelectable_for_subtle_Choice.
  Context `{ℋ : State.Trait}.
  
  Definition Self : Set := subtle.Choice.
  
  Definition conditional_select
      (a : ref Self)
      (b : ref Self)
      (choice : subtle.Choice)
      : M Self :=
    M.function_body
      (let* α0 : ltac:(refine subtle.Choice) := deref a in
      let* α1 : ltac:(refine u8) := α0.["0"] in
      let* α2 : ltac:(refine (ref u8)) := borrow α1 in
      let* α3 : ltac:(refine subtle.Choice) := deref b in
      let* α4 : ltac:(refine u8) := α3.["0"] in
      let* α5 : ltac:(refine (ref u8)) := borrow α4 in
      let* α6 : ltac:(refine u8) :=
        (subtle.ConditionallySelectable.conditional_select
            (Self := u8)
            (Trait := ltac:(refine _)))
          α2
          α5
          choice in
      M.alloc (subtle.Choice.Build_t α6)).
  
  Global Instance AssociatedFunction_conditional_select :
    Notation.DoubleColon Self "conditional_select" := {
    Notation.double_colon := conditional_select;
  }.
  
  Global Instance ℐ : subtle.ConditionallySelectable.Required.Trait Self := {
    subtle.ConditionallySelectable.conditional_select := conditional_select;
    subtle.ConditionallySelectable.conditional_assign := Datatypes.None;
    subtle.ConditionallySelectable.conditional_swap := Datatypes.None;
  }.
End Impl_subtle_ConditionallySelectable_for_subtle_Choice.
End Impl_subtle_ConditionallySelectable_for_subtle_Choice.

Module  ConditionallyNegatable.
Section ConditionallyNegatable.
  Context `{ℋ : State.Trait}.
  
  Class Trait (Self : Set) : Type := {
    conditional_negate : (mut_ref Self) -> subtle.Choice -> M unit;
  }.
  
End ConditionallyNegatable.
End ConditionallyNegatable.

Module  Impl_subtle_ConditionallyNegatable_for_T.
Section Impl_subtle_ConditionallyNegatable_for_T.
  Context `{ℋ : State.Trait}.
  
  Context {T : Set}.
  
  Context
    {ℋ_0 : subtle.ConditionallySelectable.Trait T}
    {ℋ_1 : core.ops.arith.Neg.Trait (ref T)}.
  
  Definition Self : Set := T.
  
  Definition conditional_negate
      (self : mut_ref Self)
      (choice : subtle.Choice)
      : M unit :=
    M.function_body
      (let* self_neg : ltac:(refine T) :=
        let* α0 : ltac:(refine T) := deref self in
        let* α1 : ltac:(refine (ref T)) := borrow α0 in
        let* α2 : ltac:(refine (ref T)) := use α1 in
        (core.ops.arith.Neg.neg (Self := ref T) (Trait := ltac:(refine _)))
          α2 in
      let* _ : ltac:(refine unit) :=
        let* α0 : ltac:(refine T) := deref self in
        let* α1 : ltac:(refine (mut_ref T)) := borrow_mut α0 in
        let* α2 : ltac:(refine (ref T)) := borrow self_neg in
        (subtle.ConditionallySelectable.conditional_assign
            (Self := T)
            (Trait := ltac:(refine _)))
          α1
          α2
          choice in
      M.alloc tt).
  
  Global Instance AssociatedFunction_conditional_negate :
    Notation.DoubleColon Self "conditional_negate" := {
    Notation.double_colon := conditional_negate;
  }.
  
  Global Instance ℐ : subtle.ConditionallyNegatable.Trait Self := {
    subtle.ConditionallyNegatable.conditional_negate := conditional_negate;
  }.
End Impl_subtle_ConditionallyNegatable_for_T.
End Impl_subtle_ConditionallyNegatable_for_T.

Module  CtOption.
Section CtOption.
  Context `{ℋ : State.Trait}.
  
  Context {T : Set}.
  
  Record t : Set := {
    value : T;
    is_some : subtle.Choice;
  }.
  
  Global Instance Get_value : Notation.Dot "value" := {
    Notation.dot x := let* x := M.read x in M.pure x.(value) : M _;
  }.
  Global Instance Get_AF_value : Notation.DoubleColon t "value" := {
    Notation.double_colon x := let* x := M.read x in M.pure x.(value) : M _;
  }.
  Global Instance Get_is_some : Notation.Dot "is_some" := {
    Notation.dot x := let* x := M.read x in M.pure x.(is_some) : M _;
  }.
  Global Instance Get_AF_is_some : Notation.DoubleColon t "is_some" := {
    Notation.double_colon x := let* x := M.read x in M.pure x.(is_some) : M _;
  }.
End CtOption.
End CtOption.
Definition CtOption (T : Set) `{ℋ : State.Trait} : Set :=
  M.Val (CtOption.t (T := T)).

Module  Impl_core_clone_Clone_for_subtle_CtOption_T.
Section Impl_core_clone_Clone_for_subtle_CtOption_T.
  Context `{ℋ : State.Trait}.
  
  Context {T : Set}.
  
  Context {ℋ_0 : core.clone.Clone.Trait T}.
  
  Definition Self : Set := subtle.CtOption T.
  
  Definition clone (self : ref Self) : M (subtle.CtOption T) :=
    M.function_body
      (let* α0 : ltac:(refine (subtle.CtOption T)) := deref self in
      let* α1 : ltac:(refine T) := α0.["value"] in
      let* α2 : ltac:(refine (ref T)) := borrow α1 in
      let* α3 : ltac:(refine T) :=
        (core.clone.Clone.clone (Self := T) (Trait := ltac:(refine _))) α2 in
      let* α4 : ltac:(refine (subtle.CtOption T)) := deref self in
      let* α5 : ltac:(refine subtle.Choice) := α4.["is_some"] in
      let* α6 : ltac:(refine (ref subtle.Choice)) := borrow α5 in
      let* α7 : ltac:(refine subtle.Choice) :=
        (core.clone.Clone.clone
            (Self := subtle.Choice)
            (Trait := ltac:(refine _)))
          α6 in
      M.alloc
        {| subtle.CtOption.value := α3; subtle.CtOption.is_some := α7; |}).
  
  Global Instance AssociatedFunction_clone :
    Notation.DoubleColon Self "clone" := {
    Notation.double_colon := clone;
  }.
  
  Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
    core.clone.Clone.clone := clone;
    core.clone.Clone.clone_from := Datatypes.None;
  }.
End Impl_core_clone_Clone_for_subtle_CtOption_T.
End Impl_core_clone_Clone_for_subtle_CtOption_T.

Module  Impl_core_marker_Copy_for_subtle_CtOption_T.
Section Impl_core_marker_Copy_for_subtle_CtOption_T.
  Context `{ℋ : State.Trait}.
  
  Context {T : Set}.
  
  Context {ℋ_0 : core.marker.Copy.Trait T}.
  
  Definition Self : Set := subtle.CtOption T.
  
  Global Instance ℐ : core.marker.Copy.Trait Self := {
  }.
End Impl_core_marker_Copy_for_subtle_CtOption_T.
End Impl_core_marker_Copy_for_subtle_CtOption_T.

Module  Impl_core_fmt_Debug_for_subtle_CtOption_T.
Section Impl_core_fmt_Debug_for_subtle_CtOption_T.
  Context `{ℋ : State.Trait}.
  
  Context {T : Set}.
  
  Context {ℋ_0 : core.fmt.Debug.Trait T}.
  
  Definition Self : Set := subtle.CtOption T.
  
  Definition fmt
      (self : ref Self)
      (f : mut_ref core.fmt.Formatter)
      : M ltac:(core.fmt.Result) :=
    M.function_body
      (let* α0 : ltac:(refine core.fmt.Formatter) := deref f in
      let* α1 : ltac:(refine (mut_ref core.fmt.Formatter)) := borrow_mut α0 in
      let* α2 : ltac:(refine str) := deref (mk_str "CtOption") in
      let* α3 : ltac:(refine (ref str)) := borrow α2 in
      let* α4 : ltac:(refine str) := deref (mk_str "value") in
      let* α5 : ltac:(refine (ref str)) := borrow α4 in
      let* α6 : ltac:(refine (subtle.CtOption T)) := deref self in
      let* α7 : ltac:(refine T) := α6.["value"] in
      let* α8 : ltac:(refine (ref T)) := borrow α7 in
      let* α9 : ltac:(refine (ref type not implemented)) :=
        pointer_coercion "Unsize" α8 in
      let* α10 : ltac:(refine str) := deref (mk_str "is_some") in
      let* α11 : ltac:(refine (ref str)) := borrow α10 in
      let* α12 : ltac:(refine (subtle.CtOption T)) := deref self in
      let* α13 : ltac:(refine subtle.Choice) := α12.["is_some"] in
      let* α14 : ltac:(refine (ref subtle.Choice)) := borrow α13 in
      let* α15 : ltac:(refine (ref (ref subtle.Choice))) := borrow α14 in
      let* α16 : ltac:(refine (ref type not implemented)) :=
        pointer_coercion "Unsize" α15 in
      core.fmt.Formatter::["debug_struct_field2_finish"] α1 α3 α5 α9 α11 α16).
  
  Global Instance AssociatedFunction_fmt : Notation.DoubleColon Self "fmt" := {
    Notation.double_colon := fmt;
  }.
  
  Global Instance ℐ : core.fmt.Debug.Trait Self := {
    core.fmt.Debug.fmt := fmt;
  }.
End Impl_core_fmt_Debug_for_subtle_CtOption_T.
End Impl_core_fmt_Debug_for_subtle_CtOption_T.

Module  Impl_core_convert_From_subtle_CtOption_T_for_core_option_Option_T.
Section Impl_core_convert_From_subtle_CtOption_T_for_core_option_Option_T.
  Context `{ℋ : State.Trait}.
  
  Context {T : Set}.
  
  Definition Self : Set := core.option.Option T.
  
  Definition from (source : subtle.CtOption T) : M (core.option.Option T) :=
    M.function_body
      (let* α0 : ltac:(refine (ref (subtle.CtOption T))) := borrow source in
      let* α1 : ltac:(refine subtle.Choice) :=
        (subtle.CtOption T)::["is_some"] α0 in
      let* α2 : ltac:(refine (ref subtle.Choice)) := borrow α1 in
      let* α3 : ltac:(refine u8) := subtle.Choice::["unwrap_u8"] α2 in
      let* α4 : ltac:(refine u8) := M.alloc 1 in
      let* α5 : ltac:(refine bool) := BinOp.eq α3 α4 in
      let* α6 : ltac:(refine bool) := use α5 in
      if (α6 : bool) then
        let* α0 : ltac:(refine T) := source.["value"] in
        M.alloc (core.option.Option.Some α0)
      else
        M.alloc core.option.Option.None).
  
  Global Instance AssociatedFunction_from :
    Notation.DoubleColon Self "from" := {
    Notation.double_colon := from;
  }.
  
  Global Instance ℐ : core.convert.From.Trait Self (T := subtle.CtOption T) := {
    core.convert.From.from := from;
  }.
End Impl_core_convert_From_subtle_CtOption_T_for_core_option_Option_T.
End Impl_core_convert_From_subtle_CtOption_T_for_core_option_Option_T.

Module  Impl_subtle_CtOption_T.
Section Impl_subtle_CtOption_T.
  Context `{ℋ : State.Trait}.
  
  Context {T : Set}.
  
  Definition Self : Set := subtle.CtOption T.
  
  Definition new
      (value : T)
      (is_some : subtle.Choice)
      : M (subtle.CtOption T) :=
    M.function_body
      (M.alloc
        {| subtle.CtOption.value := value; subtle.CtOption.is_some := is_some;
        |}).
  
  Global Instance AssociatedFunction_new : Notation.DoubleColon Self "new" := {
    Notation.double_colon := new;
  }.
  
  Definition expect (self : Self) (msg : ref str) : M T :=
    M.function_body
      (let* _ : ltac:(refine unit) :=
        let* α0 : ltac:(refine subtle.Choice) := self.["is_some"] in
        let* α1 : ltac:(refine (ref subtle.Choice)) := borrow α0 in
        let* α2 : ltac:(refine u8) := subtle.Choice::["unwrap_u8"] α1 in
        let* α3 : ltac:(refine (ref u8)) := borrow α2 in
        let* α4 : ltac:(refine u8) := M.alloc 1 in
        let* α5 : ltac:(refine (ref u8)) := borrow α4 in
        let* α6 : ltac:(refine (M.Val ((ref u8) * (ref u8)))) :=
          M.alloc (α3, α5) in
        let* α7 := M.read α6 in
        match α7 with
        | (left_val, right_val) =>
          let* α0 : ltac:(refine u8) := deref left_val in
          let* α1 : ltac:(refine u8) := deref right_val in
          let* α2 : ltac:(refine bool) := BinOp.eq α0 α1 in
          let* α3 : ltac:(refine bool) := UnOp.not α2 in
          let* α4 : ltac:(refine bool) := use α3 in
          if (α4 : bool) then
            let* kind : ltac:(refine core.panicking.AssertKind) :=
              M.alloc core.panicking.AssertKind.Eq in
            let* _ : ltac:(refine never) :=
              let* α0 : ltac:(refine u8) := deref left_val in
              let* α1 : ltac:(refine (ref u8)) := borrow α0 in
              let* α2 : ltac:(refine u8) := deref right_val in
              let* α3 : ltac:(refine (ref u8)) := borrow α2 in
              let* α4 : ltac:(refine (array (ref str))) :=
                M.alloc [ mk_str "" ] in
              let* α5 : ltac:(refine (ref (array (ref str)))) := borrow α4 in
              let* α6 : ltac:(refine (ref (slice (ref str)))) :=
                pointer_coercion "Unsize" α5 in
              let* α7 : ltac:(refine (ref (ref str))) := borrow msg in
              let* α8 : ltac:(refine core.fmt.rt.Argument) :=
                core.fmt.rt.Argument::["new_display"] α7 in
              let* α9 : ltac:(refine (array core.fmt.rt.Argument)) :=
                M.alloc [ α8 ] in
              let* α10 : ltac:(refine (ref (array core.fmt.rt.Argument))) :=
                borrow α9 in
              let* α11 : ltac:(refine (ref (slice core.fmt.rt.Argument))) :=
                pointer_coercion "Unsize" α10 in
              let* α12 : ltac:(refine core.fmt.Arguments) :=
                core.fmt.Arguments::["new_v1"] α6 α11 in
              let* α13 :
                  ltac:(refine (core.option.Option core.fmt.Arguments)) :=
                M.alloc (core.option.Option.Some α12) in
              core.panicking.assert_failed kind α1 α3 α13 in
            let* α0 : ltac:(refine unit) := M.alloc tt in
            never_to_any α0
          else
            M.alloc tt
        end in
      self.["value"]).
  
  Global Instance AssociatedFunction_expect :
    Notation.DoubleColon Self "expect" := {
    Notation.double_colon := expect;
  }.
  
  Definition unwrap (self : Self) : M T :=
    M.function_body
      (let* _ : ltac:(refine unit) :=
        let* α0 : ltac:(refine subtle.Choice) := self.["is_some"] in
        let* α1 : ltac:(refine (ref subtle.Choice)) := borrow α0 in
        let* α2 : ltac:(refine u8) := subtle.Choice::["unwrap_u8"] α1 in
        let* α3 : ltac:(refine (ref u8)) := borrow α2 in
        let* α4 : ltac:(refine u8) := M.alloc 1 in
        let* α5 : ltac:(refine (ref u8)) := borrow α4 in
        let* α6 : ltac:(refine (M.Val ((ref u8) * (ref u8)))) :=
          M.alloc (α3, α5) in
        let* α7 := M.read α6 in
        match α7 with
        | (left_val, right_val) =>
          let* α0 : ltac:(refine u8) := deref left_val in
          let* α1 : ltac:(refine u8) := deref right_val in
          let* α2 : ltac:(refine bool) := BinOp.eq α0 α1 in
          let* α3 : ltac:(refine bool) := UnOp.not α2 in
          let* α4 : ltac:(refine bool) := use α3 in
          if (α4 : bool) then
            let* kind : ltac:(refine core.panicking.AssertKind) :=
              M.alloc core.panicking.AssertKind.Eq in
            let* _ : ltac:(refine never) :=
              let* α0 : ltac:(refine u8) := deref left_val in
              let* α1 : ltac:(refine (ref u8)) := borrow α0 in
              let* α2 : ltac:(refine u8) := deref right_val in
              let* α3 : ltac:(refine (ref u8)) := borrow α2 in
              let* α4 : ltac:(refine (core.option.Option core.fmt.Arguments)) :=
                M.alloc core.option.Option.None in
              core.panicking.assert_failed kind α1 α3 α4 in
            let* α0 : ltac:(refine unit) := M.alloc tt in
            never_to_any α0
          else
            M.alloc tt
        end in
      self.["value"]).
  
  Global Instance AssociatedFunction_unwrap :
    Notation.DoubleColon Self "unwrap" := {
    Notation.double_colon := unwrap;
  }.
  
  Definition unwrap_or
      {ℋ_0 : subtle.ConditionallySelectable.Trait T}
      (self : Self)
      (def : T)
      : M T :=
    M.function_body
      (let* α0 : ltac:(refine (ref T)) := borrow def in
      let* α1 : ltac:(refine T) := self.["value"] in
      let* α2 : ltac:(refine (ref T)) := borrow α1 in
      let* α3 : ltac:(refine subtle.Choice) := self.["is_some"] in
      (subtle.ConditionallySelectable.conditional_select
          (Self := T)
          (Trait := ltac:(refine _)))
        α0
        α2
        α3).
  
  Global Instance AssociatedFunction_unwrap_or
      {ℋ_0 : subtle.ConditionallySelectable.Trait T} :
    Notation.DoubleColon Self "unwrap_or" := {
    Notation.double_colon := unwrap_or;
  }.
  
  Definition unwrap_or_else
      {F : Set}
      {ℋ_0 : subtle.ConditionallySelectable.Trait T}
      {ℋ_1 : core.ops.function.FnOnce.Trait F (Args := unit)}
      (self : Self)
      (f : F)
      : M T :=
    M.function_body
      (let* α0 : ltac:(refine unit) := M.alloc tt in
      let* α1 : ltac:(refine T) :=
        (core.ops.function.FnOnce.call_once
            (Self := F)
            (Trait := ltac:(refine _)))
          f
          α0 in
      let* α2 : ltac:(refine (ref T)) := borrow α1 in
      let* α3 : ltac:(refine T) := self.["value"] in
      let* α4 : ltac:(refine (ref T)) := borrow α3 in
      let* α5 : ltac:(refine subtle.Choice) := self.["is_some"] in
      (subtle.ConditionallySelectable.conditional_select
          (Self := T)
          (Trait := ltac:(refine _)))
        α2
        α4
        α5).
  
  Global Instance AssociatedFunction_unwrap_or_else
      {F : Set}
      {ℋ_0 : subtle.ConditionallySelectable.Trait T}
      {ℋ_1 : core.ops.function.FnOnce.Trait F (Args := unit)} :
    Notation.DoubleColon Self "unwrap_or_else" := {
    Notation.double_colon := unwrap_or_else (F := F);
  }.
  
  Definition is_some (self : ref Self) : M subtle.Choice :=
    M.function_body
      (let* α0 : ltac:(refine (subtle.CtOption T)) := deref self in
      α0.["is_some"]).
  
  Global Instance AssociatedFunction_is_some :
    Notation.DoubleColon Self "is_some" := {
    Notation.double_colon := is_some;
  }.
  
  Definition is_none (self : ref Self) : M subtle.Choice :=
    M.function_body
      (let* α0 : ltac:(refine (subtle.CtOption T)) := deref self in
      let* α1 : ltac:(refine subtle.Choice) := α0.["is_some"] in
      (core.ops.bit.Not.not (Self := subtle.Choice) (Trait := ltac:(refine _)))
        α1).
  
  Global Instance AssociatedFunction_is_none :
    Notation.DoubleColon Self "is_none" := {
    Notation.double_colon := is_none;
  }.
  
  Definition map
      {U F : Set}
      {ℋ_0 : core.default.Default.Trait T}
      {ℋ_1 : subtle.ConditionallySelectable.Trait T}
      {ℋ_2 : core.ops.function.FnOnce.Trait F (Args := M.Val T)}
      (self : Self)
      (f : F)
      : M (subtle.CtOption U) :=
    M.function_body
      (let* α0 : ltac:(refine T) :=
        core.default.Default.default (Self := T) (Trait := ltac:(refine _)) in
      let* α1 : ltac:(refine (ref T)) := borrow α0 in
      let* α2 : ltac:(refine T) := self.["value"] in
      let* α3 : ltac:(refine (ref T)) := borrow α2 in
      let* α4 : ltac:(refine subtle.Choice) := self.["is_some"] in
      let* α5 : ltac:(refine T) :=
        (subtle.ConditionallySelectable.conditional_select
            (Self := T)
            (Trait := ltac:(refine _)))
          α1
          α3
          α4 in
      let* α6 : ltac:(refine (M.Val (T))) := M.alloc (α5) in
      let* α7 : ltac:(refine U) :=
        (core.ops.function.FnOnce.call_once
            (Self := F)
            (Trait := ltac:(refine _)))
          f
          α6 in
      let* α8 : ltac:(refine subtle.Choice) := self.["is_some"] in
      (subtle.CtOption U)::["new"] α7 α8).
  
  Global Instance AssociatedFunction_map
      {U F : Set}
      {ℋ_0 : core.default.Default.Trait T}
      {ℋ_1 : subtle.ConditionallySelectable.Trait T}
      {ℋ_2 : core.ops.function.FnOnce.Trait F (Args := M.Val T)} :
    Notation.DoubleColon Self "map" := {
    Notation.double_colon := map (U := U) (F := F);
  }.
  
  Definition and_then
      {U F : Set}
      {ℋ_0 : core.default.Default.Trait T}
      {ℋ_1 : subtle.ConditionallySelectable.Trait T}
      {ℋ_2 : core.ops.function.FnOnce.Trait F (Args := M.Val T)}
      (self : Self)
      (f : F)
      : M (subtle.CtOption U) :=
    M.function_body
      (let* tmp : ltac:(refine (subtle.CtOption U)) :=
        let* α0 : ltac:(refine T) :=
          core.default.Default.default (Self := T) (Trait := ltac:(refine _)) in
        let* α1 : ltac:(refine (ref T)) := borrow α0 in
        let* α2 : ltac:(refine T) := self.["value"] in
        let* α3 : ltac:(refine (ref T)) := borrow α2 in
        let* α4 : ltac:(refine subtle.Choice) := self.["is_some"] in
        let* α5 : ltac:(refine T) :=
          (subtle.ConditionallySelectable.conditional_select
              (Self := T)
              (Trait := ltac:(refine _)))
            α1
            α3
            α4 in
        let* α6 : ltac:(refine (M.Val (T))) := M.alloc (α5) in
        (core.ops.function.FnOnce.call_once
            (Self := F)
            (Trait := ltac:(refine _)))
          f
          α6 in
      let* _ : ltac:(refine unit) :=
        let* α0 : ltac:(refine subtle.Choice) := tmp.["is_some"] in
        let* α1 : ltac:(refine (mut_ref subtle.Choice)) := borrow_mut α0 in
        let* α2 : ltac:(refine subtle.Choice) := self.["is_some"] in
        (core.ops.bit.BitAndAssign.bitand_assign
            (Self := subtle.Choice)
            (Trait := ltac:(refine _)))
          α1
          α2 in
      M.pure tmp).
  
  Global Instance AssociatedFunction_and_then
      {U F : Set}
      {ℋ_0 : core.default.Default.Trait T}
      {ℋ_1 : subtle.ConditionallySelectable.Trait T}
      {ℋ_2 : core.ops.function.FnOnce.Trait F (Args := M.Val T)} :
    Notation.DoubleColon Self "and_then" := {
    Notation.double_colon := and_then (U := U) (F := F);
  }.
  
  Definition or_else
      {F : Set}
      {ℋ_0 : subtle.ConditionallySelectable.Trait T}
      {ℋ_1 : core.ops.function.FnOnce.Trait F (Args := unit)}
      (self : Self)
      (f : F)
      : M (subtle.CtOption T) :=
    M.function_body
      (let* is_none : ltac:(refine subtle.Choice) :=
        let* α0 : ltac:(refine (ref (subtle.CtOption T))) := borrow self in
        (subtle.CtOption T)::["is_none"] α0 in
      let* f : ltac:(refine (subtle.CtOption T)) :=
        let* α0 : ltac:(refine unit) := M.alloc tt in
        (core.ops.function.FnOnce.call_once
            (Self := F)
            (Trait := ltac:(refine _)))
          f
          α0 in
      let* α0 : ltac:(refine (ref (subtle.CtOption T))) := borrow self in
      let* α1 : ltac:(refine (ref (subtle.CtOption T))) := borrow f in
      (subtle.ConditionallySelectable.conditional_select
          (Self := subtle.CtOption T)
          (Trait := ltac:(refine _)))
        α0
        α1
        is_none).
  
  Global Instance AssociatedFunction_or_else
      {F : Set}
      {ℋ_0 : subtle.ConditionallySelectable.Trait T}
      {ℋ_1 : core.ops.function.FnOnce.Trait F (Args := unit)} :
    Notation.DoubleColon Self "or_else" := {
    Notation.double_colon := or_else (F := F);
  }.
End Impl_subtle_CtOption_T.
End Impl_subtle_CtOption_T.

Module  Impl_subtle_ConditionallySelectable_for_subtle_CtOption_T.
Section Impl_subtle_ConditionallySelectable_for_subtle_CtOption_T.
  Context `{ℋ : State.Trait}.
  
  Context {T : Set}.
  
  Context {ℋ_0 : subtle.ConditionallySelectable.Trait T}.
  
  Definition Self : Set := subtle.CtOption T.
  
  Definition conditional_select
      (a : ref Self)
      (b : ref Self)
      (choice : subtle.Choice)
      : M Self :=
    M.function_body
      (let* α0 : ltac:(refine (subtle.CtOption T)) := deref a in
      let* α1 : ltac:(refine T) := α0.["value"] in
      let* α2 : ltac:(refine (ref T)) := borrow α1 in
      let* α3 : ltac:(refine (subtle.CtOption T)) := deref b in
      let* α4 : ltac:(refine T) := α3.["value"] in
      let* α5 : ltac:(refine (ref T)) := borrow α4 in
      let* α6 : ltac:(refine T) :=
        (subtle.ConditionallySelectable.conditional_select
            (Self := T)
            (Trait := ltac:(refine _)))
          α2
          α5
          choice in
      let* α7 : ltac:(refine (subtle.CtOption T)) := deref a in
      let* α8 : ltac:(refine subtle.Choice) := α7.["is_some"] in
      let* α9 : ltac:(refine (ref subtle.Choice)) := borrow α8 in
      let* α10 : ltac:(refine (subtle.CtOption T)) := deref b in
      let* α11 : ltac:(refine subtle.Choice) := α10.["is_some"] in
      let* α12 : ltac:(refine (ref subtle.Choice)) := borrow α11 in
      let* α13 : ltac:(refine subtle.Choice) :=
        (subtle.ConditionallySelectable.conditional_select
            (Self := subtle.Choice)
            (Trait := ltac:(refine _)))
          α9
          α12
          choice in
      (subtle.CtOption T)::["new"] α6 α13).
  
  Global Instance AssociatedFunction_conditional_select :
    Notation.DoubleColon Self "conditional_select" := {
    Notation.double_colon := conditional_select;
  }.
  
  Global Instance ℐ : subtle.ConditionallySelectable.Required.Trait Self := {
    subtle.ConditionallySelectable.conditional_select := conditional_select;
    subtle.ConditionallySelectable.conditional_assign := Datatypes.None;
    subtle.ConditionallySelectable.conditional_swap := Datatypes.None;
  }.
End Impl_subtle_ConditionallySelectable_for_subtle_CtOption_T.
End Impl_subtle_ConditionallySelectable_for_subtle_CtOption_T.

Module  Impl_subtle_ConstantTimeEq_for_subtle_CtOption_T.
Section Impl_subtle_ConstantTimeEq_for_subtle_CtOption_T.
  Context `{ℋ : State.Trait}.
  
  Context {T : Set}.
  
  Context {ℋ_0 : subtle.ConstantTimeEq.Trait T}.
  
  Definition Self : Set := subtle.CtOption T.
  
  Definition ct_eq
      (self : ref Self)
      (rhs : ref (subtle.CtOption T))
      : M subtle.Choice :=
    M.function_body
      (let* a : ltac:(refine subtle.Choice) :=
        let* α0 : ltac:(refine (subtle.CtOption T)) := deref self in
        let* α1 : ltac:(refine (ref (subtle.CtOption T))) := borrow α0 in
        (subtle.CtOption T)::["is_some"] α1 in
      let* b : ltac:(refine subtle.Choice) :=
        let* α0 : ltac:(refine (subtle.CtOption T)) := deref rhs in
        let* α1 : ltac:(refine (ref (subtle.CtOption T))) := borrow α0 in
        (subtle.CtOption T)::["is_some"] α1 in
      let* α0 : ltac:(refine subtle.Choice) :=
        (core.ops.bit.BitAnd.bitand
            (Self := subtle.Choice)
            (Trait := ltac:(refine _)))
          a
          b in
      let* α1 : ltac:(refine (subtle.CtOption T)) := deref self in
      let* α2 : ltac:(refine T) := α1.["value"] in
      let* α3 : ltac:(refine (ref T)) := borrow α2 in
      let* α4 : ltac:(refine (subtle.CtOption T)) := deref rhs in
      let* α5 : ltac:(refine T) := α4.["value"] in
      let* α6 : ltac:(refine (ref T)) := borrow α5 in
      let* α7 : ltac:(refine subtle.Choice) :=
        (subtle.ConstantTimeEq.ct_eq (Self := T) (Trait := ltac:(refine _)))
          α3
          α6 in
      let* α8 : ltac:(refine subtle.Choice) :=
        (core.ops.bit.BitAnd.bitand
            (Self := subtle.Choice)
            (Trait := ltac:(refine _)))
          α0
          α7 in
      let* α9 : ltac:(refine subtle.Choice) :=
        (core.ops.bit.Not.not
            (Self := subtle.Choice)
            (Trait := ltac:(refine _)))
          a in
      let* α10 : ltac:(refine subtle.Choice) :=
        (core.ops.bit.Not.not
            (Self := subtle.Choice)
            (Trait := ltac:(refine _)))
          b in
      let* α11 : ltac:(refine subtle.Choice) :=
        (core.ops.bit.BitAnd.bitand
            (Self := subtle.Choice)
            (Trait := ltac:(refine _)))
          α9
          α10 in
      (core.ops.bit.BitOr.bitor
          (Self := subtle.Choice)
          (Trait := ltac:(refine _)))
        α8
        α11).
  
  Global Instance AssociatedFunction_ct_eq :
    Notation.DoubleColon Self "ct_eq" := {
    Notation.double_colon := ct_eq;
  }.
  
  Global Instance ℐ : subtle.ConstantTimeEq.Required.Trait Self := {
    subtle.ConstantTimeEq.ct_eq := ct_eq;
    subtle.ConstantTimeEq.ct_ne := Datatypes.None;
  }.
End Impl_subtle_ConstantTimeEq_for_subtle_CtOption_T.
End Impl_subtle_ConstantTimeEq_for_subtle_CtOption_T.

Module  ConstantTimeGreater.
Section ConstantTimeGreater.
  Context `{ℋ : State.Trait}.
  
  Class Trait (Self : Set) : Type := {
    ct_gt : (ref Self) -> (ref Self) -> M subtle.Choice;
  }.
  
End ConstantTimeGreater.
End ConstantTimeGreater.

Module  Impl_subtle_ConstantTimeGreater_for_u8.
Section Impl_subtle_ConstantTimeGreater_for_u8.
  Context `{ℋ : State.Trait}.
  
  Definition Self : Set := u8.
  
  Definition ct_gt (self : ref Self) (other : ref u8) : M subtle.Choice :=
    M.function_body
      (let* gtb : ltac:(refine u8) :=
        let* α0 : ltac:(refine u8) :=
          (core.ops.bit.Not.not (Self := ref u8) (Trait := ltac:(refine _)))
            other in
        (core.ops.bit.BitAnd.bitand (Self := ref u8) (Trait := ltac:(refine _)))
          self
          α0 in
      let* ltb : ltac:(refine u8) :=
        let* α0 : ltac:(refine u8) :=
          (core.ops.bit.Not.not (Self := ref u8) (Trait := ltac:(refine _)))
            self in
        (core.ops.bit.BitAnd.bitand (Self := u8) (Trait := ltac:(refine _)))
          α0
          other in
      let* pow : ltac:(refine i32) := M.alloc 1 in
      let* _ : ltac:(refine unit) :=
        loop
          (let* α0 : ltac:(refine i32) := M.alloc 8 in
          let* α1 : ltac:(refine bool) := BinOp.lt pow α0 in
          let* α2 : ltac:(refine bool) := use α1 in
          if (α2 : bool) then
            let* _ : ltac:(refine unit) :=
              let* α0 : ltac:(refine u8) := BinOp.shr ltb pow in
              assign_op bitor ltb α0 in
            let* _ : ltac:(refine unit) := assign_op add pow pow in
            M.alloc tt
          else
            let* _ : ltac:(refine unit) :=
              let* α0 : ltac:(refine never) := Break in
              never_to_any α0 in
            let* α0 : ltac:(refine unit) := M.alloc tt in
            never_to_any α0) in
      let* bit : ltac:(refine u8) :=
        let* α0 : ltac:(refine u8) := UnOp.not ltb in
        BinOp.bit_and gtb α0 in
      let* pow : ltac:(refine i32) := M.alloc 1 in
      let* _ : ltac:(refine unit) :=
        loop
          (let* α0 : ltac:(refine i32) := M.alloc 8 in
          let* α1 : ltac:(refine bool) := BinOp.lt pow α0 in
          let* α2 : ltac:(refine bool) := use α1 in
          if (α2 : bool) then
            let* _ : ltac:(refine unit) :=
              let* α0 : ltac:(refine u8) := BinOp.shr bit pow in
              assign_op bitor bit α0 in
            let* _ : ltac:(refine unit) := assign_op add pow pow in
            M.alloc tt
          else
            let* _ : ltac:(refine unit) :=
              let* α0 : ltac:(refine never) := Break in
              never_to_any α0 in
            let* α0 : ltac:(refine unit) := M.alloc tt in
            never_to_any α0) in
      let* α0 : ltac:(refine u8) := M.alloc 1 in
      let* α1 : ltac:(refine u8) := BinOp.bit_and bit α0 in
      let* α2 : ltac:(refine u8) := use α1 in
      (core.convert.From.from
          (Self := subtle.Choice)
          (Trait := ltac:(refine _)))
        α2).
  
  Global Instance AssociatedFunction_ct_gt :
    Notation.DoubleColon Self "ct_gt" := {
    Notation.double_colon := ct_gt;
  }.
  
  Global Instance ℐ : subtle.ConstantTimeGreater.Trait Self := {
    subtle.ConstantTimeGreater.ct_gt := ct_gt;
  }.
End Impl_subtle_ConstantTimeGreater_for_u8.
End Impl_subtle_ConstantTimeGreater_for_u8.

Module  Impl_subtle_ConstantTimeGreater_for_u16.
Section Impl_subtle_ConstantTimeGreater_for_u16.
  Context `{ℋ : State.Trait}.
  
  Definition Self : Set := u16.
  
  Definition ct_gt (self : ref Self) (other : ref u16) : M subtle.Choice :=
    M.function_body
      (let* gtb : ltac:(refine u16) :=
        let* α0 : ltac:(refine u16) :=
          (core.ops.bit.Not.not (Self := ref u16) (Trait := ltac:(refine _)))
            other in
        (core.ops.bit.BitAnd.bitand
            (Self := ref u16)
            (Trait := ltac:(refine _)))
          self
          α0 in
      let* ltb : ltac:(refine u16) :=
        let* α0 : ltac:(refine u16) :=
          (core.ops.bit.Not.not (Self := ref u16) (Trait := ltac:(refine _)))
            self in
        (core.ops.bit.BitAnd.bitand (Self := u16) (Trait := ltac:(refine _)))
          α0
          other in
      let* pow : ltac:(refine i32) := M.alloc 1 in
      let* _ : ltac:(refine unit) :=
        loop
          (let* α0 : ltac:(refine i32) := M.alloc 16 in
          let* α1 : ltac:(refine bool) := BinOp.lt pow α0 in
          let* α2 : ltac:(refine bool) := use α1 in
          if (α2 : bool) then
            let* _ : ltac:(refine unit) :=
              let* α0 : ltac:(refine u16) := BinOp.shr ltb pow in
              assign_op bitor ltb α0 in
            let* _ : ltac:(refine unit) := assign_op add pow pow in
            M.alloc tt
          else
            let* _ : ltac:(refine unit) :=
              let* α0 : ltac:(refine never) := Break in
              never_to_any α0 in
            let* α0 : ltac:(refine unit) := M.alloc tt in
            never_to_any α0) in
      let* bit : ltac:(refine u16) :=
        let* α0 : ltac:(refine u16) := UnOp.not ltb in
        BinOp.bit_and gtb α0 in
      let* pow : ltac:(refine i32) := M.alloc 1 in
      let* _ : ltac:(refine unit) :=
        loop
          (let* α0 : ltac:(refine i32) := M.alloc 16 in
          let* α1 : ltac:(refine bool) := BinOp.lt pow α0 in
          let* α2 : ltac:(refine bool) := use α1 in
          if (α2 : bool) then
            let* _ : ltac:(refine unit) :=
              let* α0 : ltac:(refine u16) := BinOp.shr bit pow in
              assign_op bitor bit α0 in
            let* _ : ltac:(refine unit) := assign_op add pow pow in
            M.alloc tt
          else
            let* _ : ltac:(refine unit) :=
              let* α0 : ltac:(refine never) := Break in
              never_to_any α0 in
            let* α0 : ltac:(refine unit) := M.alloc tt in
            never_to_any α0) in
      let* α0 : ltac:(refine u16) := M.alloc 1 in
      let* α1 : ltac:(refine u16) := BinOp.bit_and bit α0 in
      let* α2 : ltac:(refine u8) := cast α1 in
      (core.convert.From.from
          (Self := subtle.Choice)
          (Trait := ltac:(refine _)))
        α2).
  
  Global Instance AssociatedFunction_ct_gt :
    Notation.DoubleColon Self "ct_gt" := {
    Notation.double_colon := ct_gt;
  }.
  
  Global Instance ℐ : subtle.ConstantTimeGreater.Trait Self := {
    subtle.ConstantTimeGreater.ct_gt := ct_gt;
  }.
End Impl_subtle_ConstantTimeGreater_for_u16.
End Impl_subtle_ConstantTimeGreater_for_u16.

Module  Impl_subtle_ConstantTimeGreater_for_u32.
Section Impl_subtle_ConstantTimeGreater_for_u32.
  Context `{ℋ : State.Trait}.
  
  Definition Self : Set := u32.
  
  Definition ct_gt (self : ref Self) (other : ref u32) : M subtle.Choice :=
    M.function_body
      (let* gtb : ltac:(refine u32) :=
        let* α0 : ltac:(refine u32) :=
          (core.ops.bit.Not.not (Self := ref u32) (Trait := ltac:(refine _)))
            other in
        (core.ops.bit.BitAnd.bitand
            (Self := ref u32)
            (Trait := ltac:(refine _)))
          self
          α0 in
      let* ltb : ltac:(refine u32) :=
        let* α0 : ltac:(refine u32) :=
          (core.ops.bit.Not.not (Self := ref u32) (Trait := ltac:(refine _)))
            self in
        (core.ops.bit.BitAnd.bitand (Self := u32) (Trait := ltac:(refine _)))
          α0
          other in
      let* pow : ltac:(refine i32) := M.alloc 1 in
      let* _ : ltac:(refine unit) :=
        loop
          (let* α0 : ltac:(refine i32) := M.alloc 32 in
          let* α1 : ltac:(refine bool) := BinOp.lt pow α0 in
          let* α2 : ltac:(refine bool) := use α1 in
          if (α2 : bool) then
            let* _ : ltac:(refine unit) :=
              let* α0 : ltac:(refine u32) := BinOp.shr ltb pow in
              assign_op bitor ltb α0 in
            let* _ : ltac:(refine unit) := assign_op add pow pow in
            M.alloc tt
          else
            let* _ : ltac:(refine unit) :=
              let* α0 : ltac:(refine never) := Break in
              never_to_any α0 in
            let* α0 : ltac:(refine unit) := M.alloc tt in
            never_to_any α0) in
      let* bit : ltac:(refine u32) :=
        let* α0 : ltac:(refine u32) := UnOp.not ltb in
        BinOp.bit_and gtb α0 in
      let* pow : ltac:(refine i32) := M.alloc 1 in
      let* _ : ltac:(refine unit) :=
        loop
          (let* α0 : ltac:(refine i32) := M.alloc 32 in
          let* α1 : ltac:(refine bool) := BinOp.lt pow α0 in
          let* α2 : ltac:(refine bool) := use α1 in
          if (α2 : bool) then
            let* _ : ltac:(refine unit) :=
              let* α0 : ltac:(refine u32) := BinOp.shr bit pow in
              assign_op bitor bit α0 in
            let* _ : ltac:(refine unit) := assign_op add pow pow in
            M.alloc tt
          else
            let* _ : ltac:(refine unit) :=
              let* α0 : ltac:(refine never) := Break in
              never_to_any α0 in
            let* α0 : ltac:(refine unit) := M.alloc tt in
            never_to_any α0) in
      let* α0 : ltac:(refine u32) := M.alloc 1 in
      let* α1 : ltac:(refine u32) := BinOp.bit_and bit α0 in
      let* α2 : ltac:(refine u8) := cast α1 in
      (core.convert.From.from
          (Self := subtle.Choice)
          (Trait := ltac:(refine _)))
        α2).
  
  Global Instance AssociatedFunction_ct_gt :
    Notation.DoubleColon Self "ct_gt" := {
    Notation.double_colon := ct_gt;
  }.
  
  Global Instance ℐ : subtle.ConstantTimeGreater.Trait Self := {
    subtle.ConstantTimeGreater.ct_gt := ct_gt;
  }.
End Impl_subtle_ConstantTimeGreater_for_u32.
End Impl_subtle_ConstantTimeGreater_for_u32.

Module  Impl_subtle_ConstantTimeGreater_for_u64.
Section Impl_subtle_ConstantTimeGreater_for_u64.
  Context `{ℋ : State.Trait}.
  
  Definition Self : Set := u64.
  
  Definition ct_gt (self : ref Self) (other : ref u64) : M subtle.Choice :=
    M.function_body
      (let* gtb : ltac:(refine u64) :=
        let* α0 : ltac:(refine u64) :=
          (core.ops.bit.Not.not (Self := ref u64) (Trait := ltac:(refine _)))
            other in
        (core.ops.bit.BitAnd.bitand
            (Self := ref u64)
            (Trait := ltac:(refine _)))
          self
          α0 in
      let* ltb : ltac:(refine u64) :=
        let* α0 : ltac:(refine u64) :=
          (core.ops.bit.Not.not (Self := ref u64) (Trait := ltac:(refine _)))
            self in
        (core.ops.bit.BitAnd.bitand (Self := u64) (Trait := ltac:(refine _)))
          α0
          other in
      let* pow : ltac:(refine i32) := M.alloc 1 in
      let* _ : ltac:(refine unit) :=
        loop
          (let* α0 : ltac:(refine i32) := M.alloc 64 in
          let* α1 : ltac:(refine bool) := BinOp.lt pow α0 in
          let* α2 : ltac:(refine bool) := use α1 in
          if (α2 : bool) then
            let* _ : ltac:(refine unit) :=
              let* α0 : ltac:(refine u64) := BinOp.shr ltb pow in
              assign_op bitor ltb α0 in
            let* _ : ltac:(refine unit) := assign_op add pow pow in
            M.alloc tt
          else
            let* _ : ltac:(refine unit) :=
              let* α0 : ltac:(refine never) := Break in
              never_to_any α0 in
            let* α0 : ltac:(refine unit) := M.alloc tt in
            never_to_any α0) in
      let* bit : ltac:(refine u64) :=
        let* α0 : ltac:(refine u64) := UnOp.not ltb in
        BinOp.bit_and gtb α0 in
      let* pow : ltac:(refine i32) := M.alloc 1 in
      let* _ : ltac:(refine unit) :=
        loop
          (let* α0 : ltac:(refine i32) := M.alloc 64 in
          let* α1 : ltac:(refine bool) := BinOp.lt pow α0 in
          let* α2 : ltac:(refine bool) := use α1 in
          if (α2 : bool) then
            let* _ : ltac:(refine unit) :=
              let* α0 : ltac:(refine u64) := BinOp.shr bit pow in
              assign_op bitor bit α0 in
            let* _ : ltac:(refine unit) := assign_op add pow pow in
            M.alloc tt
          else
            let* _ : ltac:(refine unit) :=
              let* α0 : ltac:(refine never) := Break in
              never_to_any α0 in
            let* α0 : ltac:(refine unit) := M.alloc tt in
            never_to_any α0) in
      let* α0 : ltac:(refine u64) := M.alloc 1 in
      let* α1 : ltac:(refine u64) := BinOp.bit_and bit α0 in
      let* α2 : ltac:(refine u8) := cast α1 in
      (core.convert.From.from
          (Self := subtle.Choice)
          (Trait := ltac:(refine _)))
        α2).
  
  Global Instance AssociatedFunction_ct_gt :
    Notation.DoubleColon Self "ct_gt" := {
    Notation.double_colon := ct_gt;
  }.
  
  Global Instance ℐ : subtle.ConstantTimeGreater.Trait Self := {
    subtle.ConstantTimeGreater.ct_gt := ct_gt;
  }.
End Impl_subtle_ConstantTimeGreater_for_u64.
End Impl_subtle_ConstantTimeGreater_for_u64.

Module  ConstantTimeLess.
Section ConstantTimeLess.
  Context `{ℋ : State.Trait}.
  
  Class Trait (Self : Set) : Type := {
    ℒ_0 :: subtle.ConstantTimeEq.Trait Self;
    ℒ_1 :: subtle.ConstantTimeGreater.Trait Self;
  }.
  
End ConstantTimeLess.
End ConstantTimeLess.

Module  Impl_subtle_ConstantTimeLess_for_u8.
Section Impl_subtle_ConstantTimeLess_for_u8.
  Context `{ℋ : State.Trait}.
  
  Definition Self : Set := u8.
  
  Global Instance ℐ : subtle.ConstantTimeLess.Required.Trait Self := {
    subtle.ConstantTimeLess.ct_lt := Datatypes.None;
  }.
End Impl_subtle_ConstantTimeLess_for_u8.
End Impl_subtle_ConstantTimeLess_for_u8.

Module  Impl_subtle_ConstantTimeLess_for_u16.
Section Impl_subtle_ConstantTimeLess_for_u16.
  Context `{ℋ : State.Trait}.
  
  Definition Self : Set := u16.
  
  Global Instance ℐ : subtle.ConstantTimeLess.Required.Trait Self := {
    subtle.ConstantTimeLess.ct_lt := Datatypes.None;
  }.
End Impl_subtle_ConstantTimeLess_for_u16.
End Impl_subtle_ConstantTimeLess_for_u16.

Module  Impl_subtle_ConstantTimeLess_for_u32.
Section Impl_subtle_ConstantTimeLess_for_u32.
  Context `{ℋ : State.Trait}.
  
  Definition Self : Set := u32.
  
  Global Instance ℐ : subtle.ConstantTimeLess.Required.Trait Self := {
    subtle.ConstantTimeLess.ct_lt := Datatypes.None;
  }.
End Impl_subtle_ConstantTimeLess_for_u32.
End Impl_subtle_ConstantTimeLess_for_u32.

Module  Impl_subtle_ConstantTimeLess_for_u64.
Section Impl_subtle_ConstantTimeLess_for_u64.
  Context `{ℋ : State.Trait}.
  
  Definition Self : Set := u64.
  
  Global Instance ℐ : subtle.ConstantTimeLess.Required.Trait Self := {
    subtle.ConstantTimeLess.ct_lt := Datatypes.None;
  }.
End Impl_subtle_ConstantTimeLess_for_u64.
End Impl_subtle_ConstantTimeLess_for_u64.
