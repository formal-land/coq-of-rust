(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module  Unit.
Section Unit.
  Context `{ℋ : State.Trait}.
  
  Inductive t : Set := Build.
End Unit.
End Unit.
Definition Unit `{ℋ : State.Trait} := M.Val Unit.t.

Module  Impl_core_fmt_Debug_for_clone_Unit.
Section Impl_core_fmt_Debug_for_clone_Unit.
  Context `{ℋ : State.Trait}.
  
  Definition Self : Set := clone.Unit.
  
  Definition fmt
      (self : ref Self)
      (f : mut_ref core.fmt.Formatter)
      : M ltac:(core.fmt.Result) :=
    M.function_body
      (let* α0 : ltac:(refine core.fmt.Formatter) := deref f in
      let* α1 : ltac:(refine (mut_ref core.fmt.Formatter)) := borrow_mut α0 in
      let* α2 : ltac:(refine str) := deref (mk_str "Unit") in
      let* α3 : ltac:(refine (ref str)) := borrow α2 in
      core.fmt.Formatter::["write_str"] α1 α3).
  
  Global Instance AssociatedFunction_fmt : Notation.DoubleColon Self "fmt" := {
    Notation.double_colon := fmt;
  }.
  
  Global Instance ℐ : core.fmt.Debug.Trait Self := {
    core.fmt.Debug.fmt := fmt;
  }.
End Impl_core_fmt_Debug_for_clone_Unit.
End Impl_core_fmt_Debug_for_clone_Unit.

Module  Impl_core_clone_Clone_for_clone_Unit.
Section Impl_core_clone_Clone_for_clone_Unit.
  Context `{ℋ : State.Trait}.
  
  Definition Self : Set := clone.Unit.
  
  Definition clone (self : ref Self) : M clone.Unit :=
    M.function_body (deref self).
  
  Global Instance AssociatedFunction_clone :
    Notation.DoubleColon Self "clone" := {
    Notation.double_colon := clone;
  }.
  
  Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
    core.clone.Clone.clone := clone;
    core.clone.Clone.clone_from := Datatypes.None;
  }.
End Impl_core_clone_Clone_for_clone_Unit.
End Impl_core_clone_Clone_for_clone_Unit.

Module  Impl_core_marker_Copy_for_clone_Unit.
Section Impl_core_marker_Copy_for_clone_Unit.
  Context `{ℋ : State.Trait}.
  
  Definition Self : Set := clone.Unit.
  
  Global Instance ℐ : core.marker.Copy.Trait Self := {
  }.
End Impl_core_marker_Copy_for_clone_Unit.
End Impl_core_marker_Copy_for_clone_Unit.

Module  Pair.
Section Pair.
  Context `{ℋ : State.Trait}.
  
  Record t : Set := {
    x0 : alloc.boxed.Box i32 alloc.boxed.Box.Default.A;
    x1 : alloc.boxed.Box i32 alloc.boxed.Box.Default.A;
  }.
  
  Global Instance Get_0 : Notation.Dot "0" := {
    Notation.dot x := let* x := M.read x in M.pure x.(x0) : M _;
  }.
  Global Instance Get_1 : Notation.Dot "1" := {
    Notation.dot x := let* x := M.read x in M.pure x.(x1) : M _;
  }.
End Pair.
End Pair.
Definition Pair `{ℋ : State.Trait} : Set := M.Val Pair.t.

Module  Impl_core_clone_Clone_for_clone_Pair.
Section Impl_core_clone_Clone_for_clone_Pair.
  Context `{ℋ : State.Trait}.
  
  Definition Self : Set := clone.Pair.
  
  Definition clone (self : ref Self) : M clone.Pair :=
    M.function_body
      (let* α0 : ltac:(refine clone.Pair) := deref self in
      let* α1 : ltac:(refine (alloc.boxed.Box i32 alloc.alloc.Global)) :=
        α0.["0"] in
      let* α2 : ltac:(refine (ref (alloc.boxed.Box i32 alloc.alloc.Global))) :=
        borrow α1 in
      let* α3 : ltac:(refine (alloc.boxed.Box i32 alloc.alloc.Global)) :=
        (core.clone.Clone.clone
            (Self := alloc.boxed.Box i32 alloc.alloc.Global)
            (Trait := ltac:(refine _)))
          α2 in
      let* α4 : ltac:(refine clone.Pair) := deref self in
      let* α5 : ltac:(refine (alloc.boxed.Box i32 alloc.alloc.Global)) :=
        α4.["1"] in
      let* α6 : ltac:(refine (ref (alloc.boxed.Box i32 alloc.alloc.Global))) :=
        borrow α5 in
      let* α7 : ltac:(refine (alloc.boxed.Box i32 alloc.alloc.Global)) :=
        (core.clone.Clone.clone
            (Self := alloc.boxed.Box i32 alloc.alloc.Global)
            (Trait := ltac:(refine _)))
          α6 in
      M.alloc (clone.Pair.Build_t α3 α7)).
  
  Global Instance AssociatedFunction_clone :
    Notation.DoubleColon Self "clone" := {
    Notation.double_colon := clone;
  }.
  
  Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
    core.clone.Clone.clone := clone;
    core.clone.Clone.clone_from := Datatypes.None;
  }.
End Impl_core_clone_Clone_for_clone_Pair.
End Impl_core_clone_Clone_for_clone_Pair.

Module  Impl_core_fmt_Debug_for_clone_Pair.
Section Impl_core_fmt_Debug_for_clone_Pair.
  Context `{ℋ : State.Trait}.
  
  Definition Self : Set := clone.Pair.
  
  Definition fmt
      (self : ref Self)
      (f : mut_ref core.fmt.Formatter)
      : M ltac:(core.fmt.Result) :=
    M.function_body
      (let* α0 : ltac:(refine core.fmt.Formatter) := deref f in
      let* α1 : ltac:(refine (mut_ref core.fmt.Formatter)) := borrow_mut α0 in
      let* α2 : ltac:(refine str) := deref (mk_str "Pair") in
      let* α3 : ltac:(refine (ref str)) := borrow α2 in
      let* α4 : ltac:(refine clone.Pair) := deref self in
      let* α5 : ltac:(refine (alloc.boxed.Box i32 alloc.alloc.Global)) :=
        α4.["0"] in
      let* α6 : ltac:(refine (ref (alloc.boxed.Box i32 alloc.alloc.Global))) :=
        borrow α5 in
      let* α7 : ltac:(refine (ref type not implemented)) :=
        pointer_coercion "Unsize" α6 in
      let* α8 : ltac:(refine clone.Pair) := deref self in
      let* α9 : ltac:(refine (alloc.boxed.Box i32 alloc.alloc.Global)) :=
        α8.["1"] in
      let* α10 : ltac:(refine (ref (alloc.boxed.Box i32 alloc.alloc.Global))) :=
        borrow α9 in
      let* α11 :
          ltac:(refine (ref (ref (alloc.boxed.Box i32 alloc.alloc.Global)))) :=
        borrow α10 in
      let* α12 : ltac:(refine (ref type not implemented)) :=
        pointer_coercion "Unsize" α11 in
      core.fmt.Formatter::["debug_tuple_field2_finish"] α1 α3 α7 α12).
  
  Global Instance AssociatedFunction_fmt : Notation.DoubleColon Self "fmt" := {
    Notation.double_colon := fmt;
  }.
  
  Global Instance ℐ : core.fmt.Debug.Trait Self := {
    core.fmt.Debug.fmt := fmt;
  }.
End Impl_core_fmt_Debug_for_clone_Pair.
End Impl_core_fmt_Debug_for_clone_Pair.

(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main `{ℋ : State.Trait} : M unit :=
  M.function_body
    (let* unit : ltac:(refine clone.Unit) := M.alloc clone.Unit.Build_t in
    let copied_unit := unit in
    let* _ : ltac:(refine unit) :=
      let* _ : ltac:(refine unit) :=
        let* α0 : ltac:(refine (array (ref str))) :=
          M.alloc [ mk_str "original: "; mk_str "
" ] in
        let* α1 : ltac:(refine (ref (array (ref str)))) := borrow α0 in
        let* α2 : ltac:(refine (ref (slice (ref str)))) :=
          pointer_coercion "Unsize" α1 in
        let* α3 : ltac:(refine (ref clone.Unit)) := borrow unit in
        let* α4 : ltac:(refine core.fmt.rt.Argument) :=
          core.fmt.rt.Argument::["new_debug"] α3 in
        let* α5 : ltac:(refine (array core.fmt.rt.Argument)) :=
          M.alloc [ α4 ] in
        let* α6 : ltac:(refine (ref (array core.fmt.rt.Argument))) :=
          borrow α5 in
        let* α7 : ltac:(refine (ref (slice core.fmt.rt.Argument))) :=
          pointer_coercion "Unsize" α6 in
        let* α8 : ltac:(refine core.fmt.Arguments) :=
          core.fmt.Arguments::["new_v1"] α2 α7 in
        std.io.stdio._print α8 in
      M.alloc tt in
    let* _ : ltac:(refine unit) :=
      let* _ : ltac:(refine unit) :=
        let* α0 : ltac:(refine (array (ref str))) :=
          M.alloc [ mk_str "copy: "; mk_str "
" ] in
        let* α1 : ltac:(refine (ref (array (ref str)))) := borrow α0 in
        let* α2 : ltac:(refine (ref (slice (ref str)))) :=
          pointer_coercion "Unsize" α1 in
        let* α3 : ltac:(refine (ref clone.Unit)) := borrow copied_unit in
        let* α4 : ltac:(refine core.fmt.rt.Argument) :=
          core.fmt.rt.Argument::["new_debug"] α3 in
        let* α5 : ltac:(refine (array core.fmt.rt.Argument)) :=
          M.alloc [ α4 ] in
        let* α6 : ltac:(refine (ref (array core.fmt.rt.Argument))) :=
          borrow α5 in
        let* α7 : ltac:(refine (ref (slice core.fmt.rt.Argument))) :=
          pointer_coercion "Unsize" α6 in
        let* α8 : ltac:(refine core.fmt.Arguments) :=
          core.fmt.Arguments::["new_v1"] α2 α7 in
        std.io.stdio._print α8 in
      M.alloc tt in
    let* pair : ltac:(refine clone.Pair) :=
      let* α0 : ltac:(refine i32) := M.alloc 1 in
      let* α1 : ltac:(refine (alloc.boxed.Box i32 alloc.alloc.Global)) :=
        (alloc.boxed.Box i32 alloc.alloc.Global)::["new"] α0 in
      let* α2 : ltac:(refine i32) := M.alloc 2 in
      let* α3 : ltac:(refine (alloc.boxed.Box i32 alloc.alloc.Global)) :=
        (alloc.boxed.Box i32 alloc.alloc.Global)::["new"] α2 in
      M.alloc (clone.Pair.Build_t α1 α3) in
    let* _ : ltac:(refine unit) :=
      let* _ : ltac:(refine unit) :=
        let* α0 : ltac:(refine (array (ref str))) :=
          M.alloc [ mk_str "original: "; mk_str "
" ] in
        let* α1 : ltac:(refine (ref (array (ref str)))) := borrow α0 in
        let* α2 : ltac:(refine (ref (slice (ref str)))) :=
          pointer_coercion "Unsize" α1 in
        let* α3 : ltac:(refine (ref clone.Pair)) := borrow pair in
        let* α4 : ltac:(refine core.fmt.rt.Argument) :=
          core.fmt.rt.Argument::["new_debug"] α3 in
        let* α5 : ltac:(refine (array core.fmt.rt.Argument)) :=
          M.alloc [ α4 ] in
        let* α6 : ltac:(refine (ref (array core.fmt.rt.Argument))) :=
          borrow α5 in
        let* α7 : ltac:(refine (ref (slice core.fmt.rt.Argument))) :=
          pointer_coercion "Unsize" α6 in
        let* α8 : ltac:(refine core.fmt.Arguments) :=
          core.fmt.Arguments::["new_v1"] α2 α7 in
        std.io.stdio._print α8 in
      M.alloc tt in
    let moved_pair := pair in
    let* _ : ltac:(refine unit) :=
      let* _ : ltac:(refine unit) :=
        let* α0 : ltac:(refine (array (ref str))) :=
          M.alloc [ mk_str "moved: "; mk_str "
" ] in
        let* α1 : ltac:(refine (ref (array (ref str)))) := borrow α0 in
        let* α2 : ltac:(refine (ref (slice (ref str)))) :=
          pointer_coercion "Unsize" α1 in
        let* α3 : ltac:(refine (ref clone.Pair)) := borrow moved_pair in
        let* α4 : ltac:(refine core.fmt.rt.Argument) :=
          core.fmt.rt.Argument::["new_debug"] α3 in
        let* α5 : ltac:(refine (array core.fmt.rt.Argument)) :=
          M.alloc [ α4 ] in
        let* α6 : ltac:(refine (ref (array core.fmt.rt.Argument))) :=
          borrow α5 in
        let* α7 : ltac:(refine (ref (slice core.fmt.rt.Argument))) :=
          pointer_coercion "Unsize" α6 in
        let* α8 : ltac:(refine core.fmt.Arguments) :=
          core.fmt.Arguments::["new_v1"] α2 α7 in
        std.io.stdio._print α8 in
      M.alloc tt in
    let* cloned_pair : ltac:(refine clone.Pair) :=
      let* α0 : ltac:(refine (ref clone.Pair)) := borrow moved_pair in
      (core.clone.Clone.clone (Self := clone.Pair) (Trait := ltac:(refine _)))
        α0 in
    let* _ : ltac:(refine unit) := core.mem.drop moved_pair in
    let* _ : ltac:(refine unit) :=
      let* _ : ltac:(refine unit) :=
        let* α0 : ltac:(refine (array (ref str))) :=
          M.alloc [ mk_str "clone: "; mk_str "
" ] in
        let* α1 : ltac:(refine (ref (array (ref str)))) := borrow α0 in
        let* α2 : ltac:(refine (ref (slice (ref str)))) :=
          pointer_coercion "Unsize" α1 in
        let* α3 : ltac:(refine (ref clone.Pair)) := borrow cloned_pair in
        let* α4 : ltac:(refine core.fmt.rt.Argument) :=
          core.fmt.rt.Argument::["new_debug"] α3 in
        let* α5 : ltac:(refine (array core.fmt.rt.Argument)) :=
          M.alloc [ α4 ] in
        let* α6 : ltac:(refine (ref (array core.fmt.rt.Argument))) :=
          borrow α5 in
        let* α7 : ltac:(refine (ref (slice core.fmt.rt.Argument))) :=
          pointer_coercion "Unsize" α6 in
        let* α8 : ltac:(refine core.fmt.Arguments) :=
          core.fmt.Arguments::["new_v1"] α2 α7 in
        std.io.stdio._print α8 in
      M.alloc tt in
    M.alloc tt).
