(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module  Centimeters.
Section Centimeters.
  Context `{ℋ : State.Trait}.
  
  Record t : Set := {
    x0 : f64;
  }.
  
  Global Instance Get_0 : Notation.Dot "0" := {
    Notation.dot x := let* x := M.read x in M.pure x.(x0) : M _;
  }.
End Centimeters.
End Centimeters.
Definition Centimeters `{ℋ : State.Trait} : Set := M.Val Centimeters.t.

Module  Impl_core_marker_StructuralPartialEq_for_derive_Centimeters.
Section Impl_core_marker_StructuralPartialEq_for_derive_Centimeters.
  Context `{ℋ : State.Trait}.
  
  Definition Self : Set := derive.Centimeters.
  
  Global Instance ℐ : core.marker.StructuralPartialEq.Trait Self := {
  }.
End Impl_core_marker_StructuralPartialEq_for_derive_Centimeters.
End Impl_core_marker_StructuralPartialEq_for_derive_Centimeters.

Module  Impl_core_cmp_PartialEq_for_derive_Centimeters.
Section Impl_core_cmp_PartialEq_for_derive_Centimeters.
  Context `{ℋ : State.Trait}.
  
  Definition Self : Set := derive.Centimeters.
  
  Definition eq (self : ref Self) (other : ref derive.Centimeters) : M bool :=
    M.function_body
      (let* α0 : ltac:(refine derive.Centimeters) := deref self in
      let* α1 : ltac:(refine f64) := α0.["0"] in
      let* α2 : ltac:(refine derive.Centimeters) := deref other in
      let* α3 : ltac:(refine f64) := α2.["0"] in
      BinOp.eq α1 α3).
  
  Global Instance AssociatedFunction_eq : Notation.DoubleColon Self "eq" := {
    Notation.double_colon := eq;
  }.
  
  Global Instance ℐ :
    core.cmp.PartialEq.Required.Trait Self
      (Rhs := core.cmp.PartialEq.Default.Rhs Self) := {
    core.cmp.PartialEq.eq := eq;
    core.cmp.PartialEq.ne := Datatypes.None;
  }.
End Impl_core_cmp_PartialEq_for_derive_Centimeters.
End Impl_core_cmp_PartialEq_for_derive_Centimeters.

Module  Impl_core_cmp_PartialOrd_for_derive_Centimeters.
Section Impl_core_cmp_PartialOrd_for_derive_Centimeters.
  Context `{ℋ : State.Trait}.
  
  Definition Self : Set := derive.Centimeters.
  
  Definition partial_cmp
      (self : ref Self)
      (other : ref derive.Centimeters)
      : M (core.option.Option core.cmp.Ordering) :=
    M.function_body
      (let* α0 : ltac:(refine derive.Centimeters) := deref self in
      let* α1 : ltac:(refine f64) := α0.["0"] in
      let* α2 : ltac:(refine (ref f64)) := borrow α1 in
      let* α3 : ltac:(refine derive.Centimeters) := deref other in
      let* α4 : ltac:(refine f64) := α3.["0"] in
      let* α5 : ltac:(refine (ref f64)) := borrow α4 in
      (core.cmp.PartialOrd.partial_cmp (Self := f64) (Trait := ltac:(refine _)))
        α2
        α5).
  
  Global Instance AssociatedFunction_partial_cmp :
    Notation.DoubleColon Self "partial_cmp" := {
    Notation.double_colon := partial_cmp;
  }.
  
  Global Instance ℐ :
    core.cmp.PartialOrd.Required.Trait Self
      (Rhs := core.cmp.PartialOrd.Default.Rhs Self) := {
    core.cmp.PartialOrd.partial_cmp := partial_cmp;
    core.cmp.PartialOrd.lt := Datatypes.None;
    core.cmp.PartialOrd.le := Datatypes.None;
    core.cmp.PartialOrd.gt := Datatypes.None;
    core.cmp.PartialOrd.ge := Datatypes.None;
  }.
End Impl_core_cmp_PartialOrd_for_derive_Centimeters.
End Impl_core_cmp_PartialOrd_for_derive_Centimeters.

Module  Inches.
Section Inches.
  Context `{ℋ : State.Trait}.
  
  Record t : Set := {
    x0 : i32;
  }.
  
  Global Instance Get_0 : Notation.Dot "0" := {
    Notation.dot x := let* x := M.read x in M.pure x.(x0) : M _;
  }.
End Inches.
End Inches.
Definition Inches `{ℋ : State.Trait} : Set := M.Val Inches.t.

Module  Impl_core_fmt_Debug_for_derive_Inches.
Section Impl_core_fmt_Debug_for_derive_Inches.
  Context `{ℋ : State.Trait}.
  
  Definition Self : Set := derive.Inches.
  
  Definition fmt
      (self : ref Self)
      (f : mut_ref core.fmt.Formatter)
      : M ltac:(core.fmt.Result) :=
    M.function_body
      (let* α0 : ltac:(refine core.fmt.Formatter) := deref f in
      let* α1 : ltac:(refine (mut_ref core.fmt.Formatter)) := borrow_mut α0 in
      let* α2 : ltac:(refine str) := deref (mk_str "Inches") in
      let* α3 : ltac:(refine (ref str)) := borrow α2 in
      let* α4 : ltac:(refine derive.Inches) := deref self in
      let* α5 : ltac:(refine i32) := α4.["0"] in
      let* α6 : ltac:(refine (ref i32)) := borrow α5 in
      let* α7 : ltac:(refine (ref (ref i32))) := borrow α6 in
      let* α8 : ltac:(refine (ref type not implemented)) :=
        pointer_coercion "Unsize" α7 in
      core.fmt.Formatter::["debug_tuple_field1_finish"] α1 α3 α8).
  
  Global Instance AssociatedFunction_fmt : Notation.DoubleColon Self "fmt" := {
    Notation.double_colon := fmt;
  }.
  
  Global Instance ℐ : core.fmt.Debug.Trait Self := {
    core.fmt.Debug.fmt := fmt;
  }.
End Impl_core_fmt_Debug_for_derive_Inches.
End Impl_core_fmt_Debug_for_derive_Inches.

Module  Impl_derive_Inches.
Section Impl_derive_Inches.
  Context `{ℋ : State.Trait}.
  
  Definition Self : Set := derive.Inches.
  
  Definition to_centimeters (self : ref Self) : M derive.Centimeters :=
    M.function_body
      (let 'derive.Inches.Build_t inches := self in
      let* α0 : ltac:(refine f64) := cast inches in
      let* α1 : ltac:(refine f64) := M.alloc 3 (* 2.54 *) in
      let* α2 : ltac:(refine f64) := BinOp.mul α0 α1 in
      M.alloc (derive.Centimeters.Build_t α2)).
  
  Global Instance AssociatedFunction_to_centimeters :
    Notation.DoubleColon Self "to_centimeters" := {
    Notation.double_colon := to_centimeters;
  }.
End Impl_derive_Inches.
End Impl_derive_Inches.

Module  Seconds.
Section Seconds.
  Context `{ℋ : State.Trait}.
  
  Record t : Set := {
    x0 : i32;
  }.
  
  Global Instance Get_0 : Notation.Dot "0" := {
    Notation.dot x := let* x := M.read x in M.pure x.(x0) : M _;
  }.
End Seconds.
End Seconds.
Definition Seconds `{ℋ : State.Trait} : Set := M.Val Seconds.t.

(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main `{ℋ : State.Trait} : M unit :=
  M.function_body
    (let* _one_second : ltac:(refine derive.Seconds) :=
      let* α0 : ltac:(refine i32) := M.alloc 1 in
      M.alloc (derive.Seconds.Build_t α0) in
    let* foot : ltac:(refine derive.Inches) :=
      let* α0 : ltac:(refine i32) := M.alloc 12 in
      M.alloc (derive.Inches.Build_t α0) in
    let* _ : ltac:(refine unit) :=
      let* _ : ltac:(refine unit) :=
        let* α0 : ltac:(refine (array (ref str))) :=
          M.alloc [ mk_str "One foot equals "; mk_str "
" ] in
        let* α1 : ltac:(refine (ref (array (ref str)))) := borrow α0 in
        let* α2 : ltac:(refine (ref (slice (ref str)))) :=
          pointer_coercion "Unsize" α1 in
        let* α3 : ltac:(refine (ref derive.Inches)) := borrow foot in
        let* α4 : ltac:(refine core.fmt.rt.Argument) :=
          core.fmt.rt.Argument::["new_debug"] α3 in
        let* α5 : ltac:(refine (array core.fmt.rt.Argument)) :=
          M.alloc [ α4 ] in
        let* α6 : ltac:(refine (ref (array core.fmt.rt.Argument))) :=
          borrow α5 in
        let* α7 : ltac:(refine (ref (slice core.fmt.rt.Argument))) :=
          pointer_coercion "Unsize" α6 in
        let* α8 : ltac:(refine core.fmt.Arguments) :=
          core.fmt.Arguments::["new_v1"] α2 α7 in
        std.io.stdio._print α8 in
      M.alloc tt in
    let* meter : ltac:(refine derive.Centimeters) :=
      let* α0 : ltac:(refine f64) := M.alloc 100 (* 100.0 *) in
      M.alloc (derive.Centimeters.Build_t α0) in
    let* cmp : ltac:(refine (ref str)) :=
      let* α0 : ltac:(refine (ref derive.Inches)) := borrow foot in
      let* α1 : ltac:(refine derive.Centimeters) :=
        derive.Inches::["to_centimeters"] α0 in
      let* α2 : ltac:(refine (ref derive.Centimeters)) := borrow α1 in
      let* α3 : ltac:(refine (ref derive.Centimeters)) := borrow meter in
      let* α4 : ltac:(refine bool) :=
        (core.cmp.PartialOrd.lt
            (Self := derive.Centimeters)
            (Trait := ltac:(refine _)))
          α2
          α3 in
      let* α5 : ltac:(refine bool) := use α4 in
      if (α5 : bool) then
        M.pure (mk_str "smaller")
      else
        let* α0 : ltac:(refine str) := deref (mk_str "bigger") in
        borrow α0 in
    let* _ : ltac:(refine unit) :=
      let* _ : ltac:(refine unit) :=
        let* α0 : ltac:(refine (array (ref str))) :=
          M.alloc [ mk_str "One foot is "; mk_str " than one meter.
" ] in
        let* α1 : ltac:(refine (ref (array (ref str)))) := borrow α0 in
        let* α2 : ltac:(refine (ref (slice (ref str)))) :=
          pointer_coercion "Unsize" α1 in
        let* α3 : ltac:(refine (ref (ref str))) := borrow cmp in
        let* α4 : ltac:(refine core.fmt.rt.Argument) :=
          core.fmt.rt.Argument::["new_display"] α3 in
        let* α5 : ltac:(refine (array core.fmt.rt.Argument)) :=
          M.alloc [ α4 ] in
        let* α6 : ltac:(refine (ref (array core.fmt.rt.Argument))) :=
          borrow α5 in
        let* α7 : ltac:(refine (ref (slice core.fmt.rt.Argument))) :=
          pointer_coercion "Unsize" α6 in
        let* α8 : ltac:(refine core.fmt.Arguments) :=
          core.fmt.Arguments::["new_v1"] α2 α7 in
        std.io.stdio._print α8 in
      M.alloc tt in
    M.alloc tt).
