(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module  Person.
Section Person.
  Context `{ℋ : State.Trait}.
  
  Record t : Set := {
    id : u32;
    name : alloc.string.String;
    phone : u64;
  }.
  
  Global Instance Get_id : Notation.Dot "id" := {
    Notation.dot x := let* x := M.read x in M.pure x.(id) : M _;
  }.
  Global Instance Get_AF_id : Notation.DoubleColon t "id" := {
    Notation.double_colon x := let* x := M.read x in M.pure x.(id) : M _;
  }.
  Global Instance Get_name : Notation.Dot "name" := {
    Notation.dot x := let* x := M.read x in M.pure x.(name) : M _;
  }.
  Global Instance Get_AF_name : Notation.DoubleColon t "name" := {
    Notation.double_colon x := let* x := M.read x in M.pure x.(name) : M _;
  }.
  Global Instance Get_phone : Notation.Dot "phone" := {
    Notation.dot x := let* x := M.read x in M.pure x.(phone) : M _;
  }.
  Global Instance Get_AF_phone : Notation.DoubleColon t "phone" := {
    Notation.double_colon x := let* x := M.read x in M.pure x.(phone) : M _;
  }.
End Person.
End Person.
Definition Person `{ℋ : State.Trait} : Set := M.Val Person.t.

Module  Impl_core_hash_Hash_for_hash_Person.
Section Impl_core_hash_Hash_for_hash_Person.
  Context `{ℋ : State.Trait}.
  
  Definition Self : Set := hash.Person.
  
  Definition hash
      {__H : Set}
      {ℋ_0 : core.hash.Hasher.Trait __H}
      (self : ref Self)
      (state : mut_ref __H)
      : M unit :=
    M.function_body
      (let* _ : ltac:(refine unit) :=
        let* α0 : ltac:(refine hash.Person) := deref self in
        let* α1 : ltac:(refine u32) := α0.["id"] in
        let* α2 : ltac:(refine (ref u32)) := borrow α1 in
        let* α3 : ltac:(refine __H) := deref state in
        let* α4 : ltac:(refine (mut_ref __H)) := borrow_mut α3 in
        (core.hash.Hash.hash (Self := u32) (Trait := ltac:(refine _))) α2 α4 in
      let* _ : ltac:(refine unit) :=
        let* α0 : ltac:(refine hash.Person) := deref self in
        let* α1 : ltac:(refine alloc.string.String) := α0.["name"] in
        let* α2 : ltac:(refine (ref alloc.string.String)) := borrow α1 in
        let* α3 : ltac:(refine __H) := deref state in
        let* α4 : ltac:(refine (mut_ref __H)) := borrow_mut α3 in
        (core.hash.Hash.hash
            (Self := alloc.string.String)
            (Trait := ltac:(refine _)))
          α2
          α4 in
      let* α0 : ltac:(refine hash.Person) := deref self in
      let* α1 : ltac:(refine u64) := α0.["phone"] in
      let* α2 : ltac:(refine (ref u64)) := borrow α1 in
      let* α3 : ltac:(refine __H) := deref state in
      let* α4 : ltac:(refine (mut_ref __H)) := borrow_mut α3 in
      (core.hash.Hash.hash (Self := u64) (Trait := ltac:(refine _))) α2 α4).
  
  Global Instance AssociatedFunction_hash
      {__H : Set}
      {ℋ_0 : core.hash.Hasher.Trait __H} :
    Notation.DoubleColon Self "hash" := {
    Notation.double_colon := hash (__H := __H);
  }.
  
  Global Instance ℐ : core.hash.Hash.Required.Trait Self := {
    core.hash.Hash.hash {__H : Set} {ℋ_0 : core.hash.Hasher.Trait __H} :=
      hash (__H := __H);
    core.hash.Hash.hash_slice := Datatypes.None;
  }.
End Impl_core_hash_Hash_for_hash_Person.
End Impl_core_hash_Hash_for_hash_Person.

Definition calculate_hash
    `{ℋ : State.Trait}
    {T : Set}
    {ℋ_0 : core.hash.Hash.Trait T}
    (t : ref T)
    : M u64 :=
  M.function_body
    (let* s : ltac:(refine std.collections.hash.map.DefaultHasher) :=
      std.collections.hash.map.DefaultHasher::["new"] in
    let* _ : ltac:(refine unit) :=
      let* α0 : ltac:(refine T) := deref t in
      let* α1 : ltac:(refine (ref T)) := borrow α0 in
      let* α2 :
          ltac:(refine (mut_ref std.collections.hash.map.DefaultHasher)) :=
        borrow_mut s in
      (core.hash.Hash.hash (Self := T) (Trait := ltac:(refine _))) α1 α2 in
    let* α0 : ltac:(refine (ref std.collections.hash.map.DefaultHasher)) :=
      borrow s in
    (core.hash.Hasher.finish
        (Self := std.collections.hash.map.DefaultHasher)
        (Trait := ltac:(refine _)))
      α0).

(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main `{ℋ : State.Trait} : M unit :=
  M.function_body
    (let* person1 : ltac:(refine hash.Person) :=
      let* α0 : ltac:(refine u32) := M.alloc 5 in
      let* α1 : ltac:(refine str) := deref (mk_str "Janet") in
      let* α2 : ltac:(refine (ref str)) := borrow α1 in
      let* α3 : ltac:(refine alloc.string.String) :=
        (alloc.string.ToString.to_string
            (Self := str)
            (Trait := ltac:(refine _)))
          α2 in
      let* α4 : ltac:(refine u64) := M.alloc 5556667777 in
      M.alloc
        {|
          hash.Person.id := α0;
          hash.Person.name := α3;
          hash.Person.phone := α4;
        |} in
    let* person2 : ltac:(refine hash.Person) :=
      let* α0 : ltac:(refine u32) := M.alloc 5 in
      let* α1 : ltac:(refine str) := deref (mk_str "Bob") in
      let* α2 : ltac:(refine (ref str)) := borrow α1 in
      let* α3 : ltac:(refine alloc.string.String) :=
        (alloc.string.ToString.to_string
            (Self := str)
            (Trait := ltac:(refine _)))
          α2 in
      let* α4 : ltac:(refine u64) := M.alloc 5556667777 in
      M.alloc
        {|
          hash.Person.id := α0;
          hash.Person.name := α3;
          hash.Person.phone := α4;
        |} in
    let* _ : ltac:(refine unit) :=
      let* α0 : ltac:(refine (ref hash.Person)) := borrow person1 in
      let* α1 : ltac:(refine u64) := hash.calculate_hash α0 in
      let* α2 : ltac:(refine (ref hash.Person)) := borrow person2 in
      let* α3 : ltac:(refine u64) := hash.calculate_hash α2 in
      let* α4 : ltac:(refine bool) := BinOp.ne α1 α3 in
      let* α5 : ltac:(refine bool) := UnOp.not α4 in
      let* α6 : ltac:(refine bool) := use α5 in
      if (α6 : bool) then
        let* α0 : ltac:(refine never) :=
          core.panicking.panic
            (mk_str
              "assertion failed: calculate_hash(&person1) != calculate_hash(&person2)") in
        never_to_any α0
      else
        M.alloc tt in
    M.alloc tt).
