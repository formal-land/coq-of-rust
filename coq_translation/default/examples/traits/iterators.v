(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module Fibonacci.
  Section Fibonacci.
    Context `{ℋ : State.Trait}.
    
    Unset Primitive Projections.
    Record t : Set := {
      curr : u32;
      next : u32;
    }.
    Global Set Primitive Projections.
    
    #[refine] Global Instance Get_curr : Notation.Dot "curr" := {
      Notation.dot x := let* x := M.read x in Pure x.(curr) : M _;
    }.
    Admitted.
    #[refine] Global Instance Get_AF_curr : Notation.DoubleColon t "curr" := {
      Notation.double_colon x := let* x := M.read x in Pure x.(curr) : M _;
    }.
    Admitted.
    #[refine] Global Instance Get_next : Notation.Dot "next" := {
      Notation.dot x := let* x := M.read x in Pure x.(next) : M _;
    }.
    Admitted.
    #[refine] Global Instance Get_AF_next : Notation.DoubleColon t "next" := {
      Notation.double_colon x := let* x := M.read x in Pure x.(next) : M _;
    }.
    Admitted.
  End Fibonacci.
End Fibonacci.
Definition Fibonacci `{ℋ : State.Trait} : Set := M.val Fibonacci.t.

Module Impl_core_iter_traits_iterator_Iterator_for_iterators_Fibonacci.
  Section Impl_core_iter_traits_iterator_Iterator_for_iterators_Fibonacci.
    Context `{ℋ : State.Trait}.
    
    Definition Self : Set := iterators.Fibonacci.
    
    Definition Item : Set := u32.
    
    Definition next (self : mut_ref Self) : M (core.option.Option Item) :=
      let* current :=
        let* α0 := deref self iterators.Fibonacci in
        α0.["curr"] in
      let* _ :=
        let* α0 := deref self iterators.Fibonacci in
        let* α1 := α0.["curr"] in
        let* α2 := deref self iterators.Fibonacci in
        let* α3 := α2.["next"] in
        assign α1 α3 in
      let* _ :=
        let* α0 := deref self iterators.Fibonacci in
        let* α1 := α0.["next"] in
        let* α2 := deref self iterators.Fibonacci in
        let* α3 := α2.["next"] in
        let* α4 := add current α3 in
        assign α1 α4 in
      Pure (core.option.Option.Some current).
    
    Global Instance AssociatedFunction_next :
      Notation.DoubleColon Self "next" := {
      Notation.double_colon := next;
    }.
    
    #[refine] Global Instance ℐ :
      core.iter.traits.iterator.Iterator.Trait Self := {
      core.iter.traits.iterator.Iterator.Item := Item;
      core.iter.traits.iterator.Iterator.next := next;
    }.
    Admitted.
  End Impl_core_iter_traits_iterator_Iterator_for_iterators_Fibonacci.
  Global Hint Resolve ℐ : core.
End Impl_core_iter_traits_iterator_Iterator_for_iterators_Fibonacci.

Definition fibonacci `{ℋ : State.Trait} : M iterators.Fibonacci :=
  let* α0 := M.alloc 0 in
  let* α1 := M.alloc 1 in
  M.alloc {| iterators.Fibonacci.curr := α0; iterators.Fibonacci.next := α1; |}.

(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main `{ℋ : State.Trait} : M unit :=
  let* sequence :=
    let* α0 := M.alloc 0 in
    let* α1 := M.alloc 3 in
    M.alloc
      {| core.ops.range.Range.start := α0; core.ops.range.Range.end := α1; |} in
  let* _ :=
    let* _ :=
      let* α0 :=
        borrow
          [ mk_str "Four consecutive `next` calls on 0..3
" ]
          (list (ref str)) in
      let* α1 := deref α0 (list (ref str)) in
      let* α2 := borrow α1 (list (ref str)) in
      let* α3 := pointer_coercion "Unsize" α2 in
      let* α4 := core.fmt.Arguments::["new_const"] α3 in
      std.io.stdio._print α4 in
    M.alloc tt in
  let* _ :=
    let* _ :=
      let* α0 := borrow [ mk_str "> "; mk_str "
" ] (list (ref str)) in
      let* α1 := deref α0 (list (ref str)) in
      let* α2 := borrow α1 (list (ref str)) in
      let* α3 := pointer_coercion "Unsize" α2 in
      let* α4 := borrow_mut sequence (core.ops.range.Range i32) in
      let* α5 :=
        (core.iter.traits.iterator.Iterator.next
            (Self := (core.ops.range.Range i32)))
          α4 in
      let* α6 := borrow α5 (core.option.Option i32) in
      let* α7 := deref α6 (core.option.Option i32) in
      let* α8 := borrow α7 (core.option.Option i32) in
      let* α9 := core.fmt.rt.Argument::["new_debug"] α8 in
      let* α10 := borrow [ α9 ] (list core.fmt.rt.Argument) in
      let* α11 := deref α10 (list core.fmt.rt.Argument) in
      let* α12 := borrow α11 (list core.fmt.rt.Argument) in
      let* α13 := pointer_coercion "Unsize" α12 in
      let* α14 := core.fmt.Arguments::["new_v1"] α3 α13 in
      std.io.stdio._print α14 in
    M.alloc tt in
  let* _ :=
    let* _ :=
      let* α0 := borrow [ mk_str "> "; mk_str "
" ] (list (ref str)) in
      let* α1 := deref α0 (list (ref str)) in
      let* α2 := borrow α1 (list (ref str)) in
      let* α3 := pointer_coercion "Unsize" α2 in
      let* α4 := borrow_mut sequence (core.ops.range.Range i32) in
      let* α5 :=
        (core.iter.traits.iterator.Iterator.next
            (Self := (core.ops.range.Range i32)))
          α4 in
      let* α6 := borrow α5 (core.option.Option i32) in
      let* α7 := deref α6 (core.option.Option i32) in
      let* α8 := borrow α7 (core.option.Option i32) in
      let* α9 := core.fmt.rt.Argument::["new_debug"] α8 in
      let* α10 := borrow [ α9 ] (list core.fmt.rt.Argument) in
      let* α11 := deref α10 (list core.fmt.rt.Argument) in
      let* α12 := borrow α11 (list core.fmt.rt.Argument) in
      let* α13 := pointer_coercion "Unsize" α12 in
      let* α14 := core.fmt.Arguments::["new_v1"] α3 α13 in
      std.io.stdio._print α14 in
    M.alloc tt in
  let* _ :=
    let* _ :=
      let* α0 := borrow [ mk_str "> "; mk_str "
" ] (list (ref str)) in
      let* α1 := deref α0 (list (ref str)) in
      let* α2 := borrow α1 (list (ref str)) in
      let* α3 := pointer_coercion "Unsize" α2 in
      let* α4 := borrow_mut sequence (core.ops.range.Range i32) in
      let* α5 :=
        (core.iter.traits.iterator.Iterator.next
            (Self := (core.ops.range.Range i32)))
          α4 in
      let* α6 := borrow α5 (core.option.Option i32) in
      let* α7 := deref α6 (core.option.Option i32) in
      let* α8 := borrow α7 (core.option.Option i32) in
      let* α9 := core.fmt.rt.Argument::["new_debug"] α8 in
      let* α10 := borrow [ α9 ] (list core.fmt.rt.Argument) in
      let* α11 := deref α10 (list core.fmt.rt.Argument) in
      let* α12 := borrow α11 (list core.fmt.rt.Argument) in
      let* α13 := pointer_coercion "Unsize" α12 in
      let* α14 := core.fmt.Arguments::["new_v1"] α3 α13 in
      std.io.stdio._print α14 in
    M.alloc tt in
  let* _ :=
    let* _ :=
      let* α0 := borrow [ mk_str "> "; mk_str "
" ] (list (ref str)) in
      let* α1 := deref α0 (list (ref str)) in
      let* α2 := borrow α1 (list (ref str)) in
      let* α3 := pointer_coercion "Unsize" α2 in
      let* α4 := borrow_mut sequence (core.ops.range.Range i32) in
      let* α5 :=
        (core.iter.traits.iterator.Iterator.next
            (Self := (core.ops.range.Range i32)))
          α4 in
      let* α6 := borrow α5 (core.option.Option i32) in
      let* α7 := deref α6 (core.option.Option i32) in
      let* α8 := borrow α7 (core.option.Option i32) in
      let* α9 := core.fmt.rt.Argument::["new_debug"] α8 in
      let* α10 := borrow [ α9 ] (list core.fmt.rt.Argument) in
      let* α11 := deref α10 (list core.fmt.rt.Argument) in
      let* α12 := borrow α11 (list core.fmt.rt.Argument) in
      let* α13 := pointer_coercion "Unsize" α12 in
      let* α14 := core.fmt.Arguments::["new_v1"] α3 α13 in
      std.io.stdio._print α14 in
    M.alloc tt in
  let* _ :=
    let* _ :=
      let* α0 :=
        borrow
          [ mk_str "Iterate through 0..3 using `for`
" ]
          (list (ref str)) in
      let* α1 := deref α0 (list (ref str)) in
      let* α2 := borrow α1 (list (ref str)) in
      let* α3 := pointer_coercion "Unsize" α2 in
      let* α4 := core.fmt.Arguments::["new_const"] α3 in
      std.io.stdio._print α4 in
    M.alloc tt in
  let* _ :=
    let* α0 := M.alloc 0 in
    let* α1 := M.alloc 3 in
    let* α2 :=
      M.alloc
        {| core.ops.range.Range.start := α0; core.ops.range.Range.end := α1;
        |} in
    let* α3 :=
      (core.iter.traits.collect.IntoIterator.into_iter
          (Self := (core.ops.range.Range i32)))
        α2 in
    let* α4 :=
      match α3 with
      | iter =>
        loop
          (let* _ :=
            let* α0 := borrow_mut iter (core.ops.range.Range i32) in
            let* α1 := deref α0 (core.ops.range.Range i32) in
            let* α2 := borrow_mut α1 (core.ops.range.Range i32) in
            let* α3 :=
              (core.iter.traits.iterator.Iterator.next
                  (Self := (core.ops.range.Range i32)))
                α2 in
            match α3 with
            | core.option.Option  =>
              let* α0 := Break in
              never_to_any α0
            | core.option.Option i =>
              let* _ :=
                let* _ :=
                  let* α0 :=
                    borrow [ mk_str "> "; mk_str "
" ] (list (ref str)) in
                  let* α1 := deref α0 (list (ref str)) in
                  let* α2 := borrow α1 (list (ref str)) in
                  let* α3 := pointer_coercion "Unsize" α2 in
                  let* α4 := borrow i i32 in
                  let* α5 := deref α4 i32 in
                  let* α6 := borrow α5 i32 in
                  let* α7 := core.fmt.rt.Argument::["new_display"] α6 in
                  let* α8 := borrow [ α7 ] (list core.fmt.rt.Argument) in
                  let* α9 := deref α8 (list core.fmt.rt.Argument) in
                  let* α10 := borrow α9 (list core.fmt.rt.Argument) in
                  let* α11 := pointer_coercion "Unsize" α10 in
                  let* α12 := core.fmt.Arguments::["new_v1"] α3 α11 in
                  std.io.stdio._print α12 in
                M.alloc tt in
              M.alloc tt
            end in
          M.alloc tt)
      end in
    use α4 in
  let* _ :=
    let* _ :=
      let* α0 :=
        borrow
          [ mk_str "The first four terms of the Fibonacci sequence are: 
" ]
          (list (ref str)) in
      let* α1 := deref α0 (list (ref str)) in
      let* α2 := borrow α1 (list (ref str)) in
      let* α3 := pointer_coercion "Unsize" α2 in
      let* α4 := core.fmt.Arguments::["new_const"] α3 in
      std.io.stdio._print α4 in
    M.alloc tt in
  let* _ :=
    let* α0 := iterators.fibonacci in
    let* α1 := M.alloc 4 in
    let* α2 :=
      (core.iter.traits.iterator.Iterator.take (Self := iterators.Fibonacci))
        α0
        α1 in
    let* α3 :=
      (core.iter.traits.collect.IntoIterator.into_iter
          (Self := (core.iter.adapters.take.Take iterators.Fibonacci)))
        α2 in
    let* α4 :=
      match α3 with
      | iter =>
        loop
          (let* _ :=
            let* α0 :=
              borrow_mut
                iter
                (core.iter.adapters.take.Take iterators.Fibonacci) in
            let* α1 :=
              deref α0 (core.iter.adapters.take.Take iterators.Fibonacci) in
            let* α2 :=
              borrow_mut
                α1
                (core.iter.adapters.take.Take iterators.Fibonacci) in
            let* α3 :=
              (core.iter.traits.iterator.Iterator.next
                  (Self := (core.iter.adapters.take.Take iterators.Fibonacci)))
                α2 in
            match α3 with
            | core.option.Option  =>
              let* α0 := Break in
              never_to_any α0
            | core.option.Option i =>
              let* _ :=
                let* _ :=
                  let* α0 :=
                    borrow [ mk_str "> "; mk_str "
" ] (list (ref str)) in
                  let* α1 := deref α0 (list (ref str)) in
                  let* α2 := borrow α1 (list (ref str)) in
                  let* α3 := pointer_coercion "Unsize" α2 in
                  let* α4 := borrow i u32 in
                  let* α5 := deref α4 u32 in
                  let* α6 := borrow α5 u32 in
                  let* α7 := core.fmt.rt.Argument::["new_display"] α6 in
                  let* α8 := borrow [ α7 ] (list core.fmt.rt.Argument) in
                  let* α9 := deref α8 (list core.fmt.rt.Argument) in
                  let* α10 := borrow α9 (list core.fmt.rt.Argument) in
                  let* α11 := pointer_coercion "Unsize" α10 in
                  let* α12 := core.fmt.Arguments::["new_v1"] α3 α11 in
                  std.io.stdio._print α12 in
                M.alloc tt in
              M.alloc tt
            end in
          M.alloc tt)
      end in
    use α4 in
  let* _ :=
    let* _ :=
      let* α0 :=
        borrow
          [ mk_str "The next four terms of the Fibonacci sequence are: 
" ]
          (list (ref str)) in
      let* α1 := deref α0 (list (ref str)) in
      let* α2 := borrow α1 (list (ref str)) in
      let* α3 := pointer_coercion "Unsize" α2 in
      let* α4 := core.fmt.Arguments::["new_const"] α3 in
      std.io.stdio._print α4 in
    M.alloc tt in
  let* _ :=
    let* α0 := iterators.fibonacci in
    let* α1 := M.alloc 4 in
    let* α2 :=
      (core.iter.traits.iterator.Iterator.skip (Self := iterators.Fibonacci))
        α0
        α1 in
    let* α3 := M.alloc 4 in
    let* α4 :=
      (core.iter.traits.iterator.Iterator.take
          (Self := (core.iter.adapters.skip.Skip iterators.Fibonacci)))
        α2
        α3 in
    let* α5 :=
      (core.iter.traits.collect.IntoIterator.into_iter
          (Self :=
            (core.iter.adapters.take.Take
              (core.iter.adapters.skip.Skip iterators.Fibonacci))))
        α4 in
    let* α6 :=
      match α5 with
      | iter =>
        loop
          (let* _ :=
            let* α0 :=
              borrow_mut
                iter
                (core.iter.adapters.take.Take
                  (core.iter.adapters.skip.Skip iterators.Fibonacci)) in
            let* α1 :=
              deref
                α0
                (core.iter.adapters.take.Take
                  (core.iter.adapters.skip.Skip iterators.Fibonacci)) in
            let* α2 :=
              borrow_mut
                α1
                (core.iter.adapters.take.Take
                  (core.iter.adapters.skip.Skip iterators.Fibonacci)) in
            let* α3 :=
              (core.iter.traits.iterator.Iterator.next
                  (Self :=
                    (core.iter.adapters.take.Take
                      (core.iter.adapters.skip.Skip iterators.Fibonacci))))
                α2 in
            match α3 with
            | core.option.Option  =>
              let* α0 := Break in
              never_to_any α0
            | core.option.Option i =>
              let* _ :=
                let* _ :=
                  let* α0 :=
                    borrow [ mk_str "> "; mk_str "
" ] (list (ref str)) in
                  let* α1 := deref α0 (list (ref str)) in
                  let* α2 := borrow α1 (list (ref str)) in
                  let* α3 := pointer_coercion "Unsize" α2 in
                  let* α4 := borrow i u32 in
                  let* α5 := deref α4 u32 in
                  let* α6 := borrow α5 u32 in
                  let* α7 := core.fmt.rt.Argument::["new_display"] α6 in
                  let* α8 := borrow [ α7 ] (list core.fmt.rt.Argument) in
                  let* α9 := deref α8 (list core.fmt.rt.Argument) in
                  let* α10 := borrow α9 (list core.fmt.rt.Argument) in
                  let* α11 := pointer_coercion "Unsize" α10 in
                  let* α12 := core.fmt.Arguments::["new_v1"] α3 α11 in
                  std.io.stdio._print α12 in
                M.alloc tt in
              M.alloc tt
            end in
          M.alloc tt)
      end in
    use α6 in
  let* array :=
    let* α0 := M.alloc 1 in
    let* α1 := M.alloc 3 in
    let* α2 := M.alloc 3 in
    let* α3 := M.alloc 7 in
    Pure [ α0; α1; α2; α3 ] in
  let* _ :=
    let* _ :=
      let* α0 :=
        borrow
          [ mk_str "Iterate the following array "; mk_str "
" ]
          (list (ref str)) in
      let* α1 := deref α0 (list (ref str)) in
      let* α2 := borrow α1 (list (ref str)) in
      let* α3 := pointer_coercion "Unsize" α2 in
      let* α4 := borrow array (list u32) in
      let* α5 := borrow α4 (ref (list u32)) in
      let* α6 := deref α5 (ref (list u32)) in
      let* α7 := borrow α6 (ref (list u32)) in
      let* α8 := core.fmt.rt.Argument::["new_debug"] α7 in
      let* α9 := borrow [ α8 ] (list core.fmt.rt.Argument) in
      let* α10 := deref α9 (list core.fmt.rt.Argument) in
      let* α11 := borrow α10 (list core.fmt.rt.Argument) in
      let* α12 := pointer_coercion "Unsize" α11 in
      let* α13 := core.fmt.Arguments::["new_v1"] α3 α12 in
      std.io.stdio._print α13 in
    M.alloc tt in
  let* α0 := borrow array (list u32) in
  let* α1 := pointer_coercion "Unsize" α0 in
  let* α2 := (Slice T)::["iter"] α1 in
  let* α3 :=
    (core.iter.traits.collect.IntoIterator.into_iter
        (Self := (core.slice.iter.Iter u32)))
      α2 in
  let* α4 :=
    match α3 with
    | iter =>
      loop
        (let* _ :=
          let* α0 := borrow_mut iter (core.slice.iter.Iter u32) in
          let* α1 := deref α0 (core.slice.iter.Iter u32) in
          let* α2 := borrow_mut α1 (core.slice.iter.Iter u32) in
          let* α3 :=
            (core.iter.traits.iterator.Iterator.next
                (Self := (core.slice.iter.Iter u32)))
              α2 in
          match α3 with
          | core.option.Option  =>
            let* α0 := Break in
            never_to_any α0
          | core.option.Option i =>
            let* _ :=
              let* _ :=
                let* α0 :=
                  borrow [ mk_str "> "; mk_str "
" ] (list (ref str)) in
                let* α1 := deref α0 (list (ref str)) in
                let* α2 := borrow α1 (list (ref str)) in
                let* α3 := pointer_coercion "Unsize" α2 in
                let* α4 := borrow i (ref u32) in
                let* α5 := deref α4 (ref u32) in
                let* α6 := borrow α5 (ref u32) in
                let* α7 := core.fmt.rt.Argument::["new_display"] α6 in
                let* α8 := borrow [ α7 ] (list core.fmt.rt.Argument) in
                let* α9 := deref α8 (list core.fmt.rt.Argument) in
                let* α10 := borrow α9 (list core.fmt.rt.Argument) in
                let* α11 := pointer_coercion "Unsize" α10 in
                let* α12 := core.fmt.Arguments::["new_v1"] α3 α11 in
                std.io.stdio._print α12 in
              M.alloc tt in
            M.alloc tt
          end in
        M.alloc tt)
    end in
  use α4.
