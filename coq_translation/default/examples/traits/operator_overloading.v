(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module  Foo.
Section Foo.
  Context `{ℋ : State.Trait}.
  
  Inductive t : Set := Build.
End Foo.
End Foo.
Definition Foo `{ℋ : State.Trait} := M.Val Foo.t.

Module  Bar.
Section Bar.
  Context `{ℋ : State.Trait}.
  
  Inductive t : Set := Build.
End Bar.
End Bar.
Definition Bar `{ℋ : State.Trait} := M.Val Bar.t.

Module  FooBar.
Section FooBar.
  Context `{ℋ : State.Trait}.
  
  Inductive t : Set := Build.
End FooBar.
End FooBar.
Definition FooBar `{ℋ : State.Trait} := M.Val FooBar.t.

Module  Impl_core_fmt_Debug_for_operator_overloading_FooBar.
Section Impl_core_fmt_Debug_for_operator_overloading_FooBar.
  Context `{ℋ : State.Trait}.
  
  Definition Self : Set := operator_overloading.FooBar.
  
  Definition fmt
      (self : ref Self)
      (f : mut_ref core.fmt.Formatter)
      : M ltac:(core.fmt.Result) :=
    M.function_body
      (let* α0 : ltac:(refine core.fmt.Formatter) := deref f in
      let* α1 : ltac:(refine (mut_ref core.fmt.Formatter)) := borrow_mut α0 in
      let* α2 : ltac:(refine str) := deref (mk_str "FooBar") in
      let* α3 : ltac:(refine (ref str)) := borrow α2 in
      core.fmt.Formatter::["write_str"] α1 α3).
  
  Global Instance AssociatedFunction_fmt : Notation.DoubleColon Self "fmt" := {
    Notation.double_colon := fmt;
  }.
  
  Global Instance ℐ : core.fmt.Debug.Trait Self := {
    core.fmt.Debug.fmt := fmt;
  }.
End Impl_core_fmt_Debug_for_operator_overloading_FooBar.
End Impl_core_fmt_Debug_for_operator_overloading_FooBar.

Module  BarFoo.
Section BarFoo.
  Context `{ℋ : State.Trait}.
  
  Inductive t : Set := Build.
End BarFoo.
End BarFoo.
Definition BarFoo `{ℋ : State.Trait} := M.Val BarFoo.t.

Module  Impl_core_fmt_Debug_for_operator_overloading_BarFoo.
Section Impl_core_fmt_Debug_for_operator_overloading_BarFoo.
  Context `{ℋ : State.Trait}.
  
  Definition Self : Set := operator_overloading.BarFoo.
  
  Definition fmt
      (self : ref Self)
      (f : mut_ref core.fmt.Formatter)
      : M ltac:(core.fmt.Result) :=
    M.function_body
      (let* α0 : ltac:(refine core.fmt.Formatter) := deref f in
      let* α1 : ltac:(refine (mut_ref core.fmt.Formatter)) := borrow_mut α0 in
      let* α2 : ltac:(refine str) := deref (mk_str "BarFoo") in
      let* α3 : ltac:(refine (ref str)) := borrow α2 in
      core.fmt.Formatter::["write_str"] α1 α3).
  
  Global Instance AssociatedFunction_fmt : Notation.DoubleColon Self "fmt" := {
    Notation.double_colon := fmt;
  }.
  
  Global Instance ℐ : core.fmt.Debug.Trait Self := {
    core.fmt.Debug.fmt := fmt;
  }.
End Impl_core_fmt_Debug_for_operator_overloading_BarFoo.
End Impl_core_fmt_Debug_for_operator_overloading_BarFoo.

Module  Impl_core_ops_arith_Add_operator_overloading_Bar_for_operator_overloading_Foo.
Section Impl_core_ops_arith_Add_operator_overloading_Bar_for_operator_overloading_Foo.
  Context `{ℋ : State.Trait}.
  
  Definition Self : Set := operator_overloading.Foo.
  
  Definition Output : Set := operator_overloading.FooBar.
  
  Definition add
      (self : Self)
      (_rhs : operator_overloading.Bar)
      : M operator_overloading.FooBar :=
    M.function_body
      (let* _ : ltac:(refine unit) :=
        let* _ : ltac:(refine unit) :=
          let* α0 : ltac:(refine (array (ref str))) :=
            M.alloc [ mk_str "> Foo.add(Bar) was called
" ] in
          let* α1 : ltac:(refine (ref (array (ref str)))) := borrow α0 in
          let* α2 : ltac:(refine (ref (slice (ref str)))) :=
            pointer_coercion "Unsize" α1 in
          let* α3 : ltac:(refine core.fmt.Arguments) :=
            core.fmt.Arguments::["new_const"] α2 in
          std.io.stdio._print α3 in
        M.alloc tt in
      M.alloc operator_overloading.FooBar.Build_t).
  
  Global Instance AssociatedFunction_add : Notation.DoubleColon Self "add" := {
    Notation.double_colon := add;
  }.
  
  Global Instance ℐ :
    core.ops.arith.Add.Trait Self (Rhs := operator_overloading.Bar) := {
    core.ops.arith.Add.Output := Output;
    core.ops.arith.Add.add := add;
  }.
End Impl_core_ops_arith_Add_operator_overloading_Bar_for_operator_overloading_Foo.
End Impl_core_ops_arith_Add_operator_overloading_Bar_for_operator_overloading_Foo.

Module  Impl_core_ops_arith_Add_operator_overloading_Foo_for_operator_overloading_Bar.
Section Impl_core_ops_arith_Add_operator_overloading_Foo_for_operator_overloading_Bar.
  Context `{ℋ : State.Trait}.
  
  Definition Self : Set := operator_overloading.Bar.
  
  Definition Output : Set := operator_overloading.BarFoo.
  
  Definition add
      (self : Self)
      (_rhs : operator_overloading.Foo)
      : M operator_overloading.BarFoo :=
    M.function_body
      (let* _ : ltac:(refine unit) :=
        let* _ : ltac:(refine unit) :=
          let* α0 : ltac:(refine (array (ref str))) :=
            M.alloc [ mk_str "> Bar.add(Foo) was called
" ] in
          let* α1 : ltac:(refine (ref (array (ref str)))) := borrow α0 in
          let* α2 : ltac:(refine (ref (slice (ref str)))) :=
            pointer_coercion "Unsize" α1 in
          let* α3 : ltac:(refine core.fmt.Arguments) :=
            core.fmt.Arguments::["new_const"] α2 in
          std.io.stdio._print α3 in
        M.alloc tt in
      M.alloc operator_overloading.BarFoo.Build_t).
  
  Global Instance AssociatedFunction_add : Notation.DoubleColon Self "add" := {
    Notation.double_colon := add;
  }.
  
  Global Instance ℐ :
    core.ops.arith.Add.Trait Self (Rhs := operator_overloading.Foo) := {
    core.ops.arith.Add.Output := Output;
    core.ops.arith.Add.add := add;
  }.
End Impl_core_ops_arith_Add_operator_overloading_Foo_for_operator_overloading_Bar.
End Impl_core_ops_arith_Add_operator_overloading_Foo_for_operator_overloading_Bar.

(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main `{ℋ : State.Trait} : M unit :=
  M.function_body
    (let* _ : ltac:(refine unit) :=
      let* _ : ltac:(refine unit) :=
        let* α0 : ltac:(refine (array (ref str))) :=
          M.alloc [ mk_str "Foo + Bar = "; mk_str "
" ] in
        let* α1 : ltac:(refine (ref (array (ref str)))) := borrow α0 in
        let* α2 : ltac:(refine (ref (slice (ref str)))) :=
          pointer_coercion "Unsize" α1 in
        let* α3 : ltac:(refine operator_overloading.Foo) :=
          M.alloc operator_overloading.Foo.Build_t in
        let* α4 : ltac:(refine operator_overloading.Bar) :=
          M.alloc operator_overloading.Bar.Build_t in
        let* α5 : ltac:(refine operator_overloading.FooBar) :=
          (core.ops.arith.Add.add
              (Self := operator_overloading.Foo)
              (Trait := ltac:(refine _)))
            α3
            α4 in
        let* α6 : ltac:(refine (ref operator_overloading.FooBar)) :=
          borrow α5 in
        let* α7 : ltac:(refine core.fmt.rt.Argument) :=
          core.fmt.rt.Argument::["new_debug"] α6 in
        let* α8 : ltac:(refine (array core.fmt.rt.Argument)) :=
          M.alloc [ α7 ] in
        let* α9 : ltac:(refine (ref (array core.fmt.rt.Argument))) :=
          borrow α8 in
        let* α10 : ltac:(refine (ref (slice core.fmt.rt.Argument))) :=
          pointer_coercion "Unsize" α9 in
        let* α11 : ltac:(refine core.fmt.Arguments) :=
          core.fmt.Arguments::["new_v1"] α2 α10 in
        std.io.stdio._print α11 in
      M.alloc tt in
    let* _ : ltac:(refine unit) :=
      let* _ : ltac:(refine unit) :=
        let* α0 : ltac:(refine (array (ref str))) :=
          M.alloc [ mk_str "Bar + Foo = "; mk_str "
" ] in
        let* α1 : ltac:(refine (ref (array (ref str)))) := borrow α0 in
        let* α2 : ltac:(refine (ref (slice (ref str)))) :=
          pointer_coercion "Unsize" α1 in
        let* α3 : ltac:(refine operator_overloading.Bar) :=
          M.alloc operator_overloading.Bar.Build_t in
        let* α4 : ltac:(refine operator_overloading.Foo) :=
          M.alloc operator_overloading.Foo.Build_t in
        let* α5 : ltac:(refine operator_overloading.BarFoo) :=
          (core.ops.arith.Add.add
              (Self := operator_overloading.Bar)
              (Trait := ltac:(refine _)))
            α3
            α4 in
        let* α6 : ltac:(refine (ref operator_overloading.BarFoo)) :=
          borrow α5 in
        let* α7 : ltac:(refine core.fmt.rt.Argument) :=
          core.fmt.rt.Argument::["new_debug"] α6 in
        let* α8 : ltac:(refine (array core.fmt.rt.Argument)) :=
          M.alloc [ α7 ] in
        let* α9 : ltac:(refine (ref (array core.fmt.rt.Argument))) :=
          borrow α8 in
        let* α10 : ltac:(refine (ref (slice core.fmt.rt.Argument))) :=
          pointer_coercion "Unsize" α9 in
        let* α11 : ltac:(refine core.fmt.Arguments) :=
          core.fmt.Arguments::["new_v1"] α2 α10 in
        std.io.stdio._print α11 in
      M.alloc tt in
    M.alloc tt).
