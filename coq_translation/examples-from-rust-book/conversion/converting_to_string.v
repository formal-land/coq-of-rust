(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Import Root.std.prelude.rust_2015.

Module fmt := std.fmt.

Module Circle.
  Record t : Set := {
    radius : i32;
  }.
  
  Global Instance Get_radius : Notation.Dot "radius" := {
    Notation.dot '(Build_t x0) := x0;
  }.
End Circle.
Definition Circle : Set := Circle.t.

Module Impl_fmt_Display_for_Circle.
  Definition Self := Circle.
  
  Definition fmt (self : ref Self) (f : mut_ref fmt.Formatter) :=
    let return_type := fmt.Result in
    ltac:(function (
      f.["write_fmt"](|
        format_arguments::["new_v1"](|
          [ "Circle of radius " ],
          [ format_argument::["new_display"](| self.["radius"] |) ]
        |)
      |)
    : return_type)).
  
  Global Instance Method_fmt : Notation.Dot "fmt" := {
    Notation.dot := fmt;
  }.
  
  Global Instance I : fmt.Display.Trait Self := {
    fmt.Display.fmt := fmt;
  }.
End Impl_fmt_Display_for_Circle.

Definition main :=
  let return_type := unit in
  ltac:(function (
    let circle := {| Circle.radius := 6; |} in
    let _ : unit :=
      let _ : unit :=
        _crate.io._print(|
          format_arguments::["new_v1"](|
            [ ""; "
" ],
            [ format_argument::["new_display"](| circle.["to_string"](||) |) ]
          |)
        |) in
      tt in
    tt
  : return_type)).
