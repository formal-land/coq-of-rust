(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Import Root.std.prelude.rust_2015.

Module Food.
  Inductive t : Set :=
  | Apple
  | Carrot
  | Potato.
End Food.
Definition Food := Food.t.

Module Impl__crate_fmt_Debug_for_Food.
  Definition Self := Food.
  
  Definition fmt (self : ref Self) (f : mut_ref _crate.fmt.Formatter) :=
    let return_type := _crate.fmt.Result in
    ltac:(function (
      _crate.fmt.Formatter::["write_str"](|
        f,
        match self with
        | Food.Apple => "Apple"
        | Food.Carrot => "Carrot"
        | Food.Potato => "Potato"
        end
      |)
    : return_type)).
  
  Global Instance Method_fmt : Notation.Dot "fmt" := {
    Notation.dot := fmt;
  }.
  
  Global Instance I : _crate.fmt.Debug.Trait Self := {
    _crate.fmt.Debug.fmt := fmt;
  }.
End Impl__crate_fmt_Debug_for_Food.

Module Peeled.
  Record t : Set := { _ : Food;}.
  
  Global Instance Get_0 : Notation.Dot 0 := {
    Notation.dot '(Build_t x0) := x0;
  }.
End Peeled.
Definition Peeled := Peeled.t.

Module Impl__crate_fmt_Debug_for_Peeled.
  Definition Self := Peeled.
  
  Definition fmt (self : ref Self) (f : mut_ref _crate.fmt.Formatter) :=
    let return_type := _crate.fmt.Result in
    ltac:(function (
      _crate.fmt.Formatter::["debug_tuple_field1_finish"](|
        f,
        "Peeled",
        self.[0]
      |)
    : return_type)).
  
  Global Instance Method_fmt : Notation.Dot "fmt" := {
    Notation.dot := fmt;
  }.
  
  Global Instance I : _crate.fmt.Debug.Trait Self := {
    _crate.fmt.Debug.fmt := fmt;
  }.
End Impl__crate_fmt_Debug_for_Peeled.

Module Chopped.
  Record t : Set := { _ : Food;}.
  
  Global Instance Get_0 : Notation.Dot 0 := {
    Notation.dot '(Build_t x0) := x0;
  }.
End Chopped.
Definition Chopped := Chopped.t.

Module Impl__crate_fmt_Debug_for_Chopped.
  Definition Self := Chopped.
  
  Definition fmt (self : ref Self) (f : mut_ref _crate.fmt.Formatter) :=
    let return_type := _crate.fmt.Result in
    ltac:(function (
      _crate.fmt.Formatter::["debug_tuple_field1_finish"](|
        f,
        "Chopped",
        self.[0]
      |)
    : return_type)).
  
  Global Instance Method_fmt : Notation.Dot "fmt" := {
    Notation.dot := fmt;
  }.
  
  Global Instance I : _crate.fmt.Debug.Trait Self := {
    _crate.fmt.Debug.fmt := fmt;
  }.
End Impl__crate_fmt_Debug_for_Chopped.

Module Cooked.
  Record t : Set := { _ : Food;}.
  
  Global Instance Get_0 : Notation.Dot 0 := {
    Notation.dot '(Build_t x0) := x0;
  }.
End Cooked.
Definition Cooked := Cooked.t.

Module Impl__crate_fmt_Debug_for_Cooked.
  Definition Self := Cooked.
  
  Definition fmt (self : ref Self) (f : mut_ref _crate.fmt.Formatter) :=
    let return_type := _crate.fmt.Result in
    ltac:(function (
      _crate.fmt.Formatter::["debug_tuple_field1_finish"](|
        f,
        "Cooked",
        self.[0]
      |)
    : return_type)).
  
  Global Instance Method_fmt : Notation.Dot "fmt" := {
    Notation.dot := fmt;
  }.
  
  Global Instance I : _crate.fmt.Debug.Trait Self := {
    _crate.fmt.Debug.fmt := fmt;
  }.
End Impl__crate_fmt_Debug_for_Cooked.

Definition peel (food : Option Food) :=
  let return_type := Option Peeled in
  ltac:(function (
    match food with
    | Some food => Some (Peeled.Build_t food)
    | None => None
    end
  : return_type)).

Definition chop (peeled : Option Peeled) :=
  let return_type := Option Chopped in
  ltac:(function (
    match peeled with
    | Some Peeled.Build_t food => Some (Chopped.Build_t food)
    | None => None
    end
  : return_type)).

Definition cook (chopped : Option Chopped) :=
  let return_type := Option Cooked in
  ltac:(function (
    chopped.["map"](| fun Chopped.Build_t food => Cooked.Build_t food |)
  : return_type)).

Definition process (food : Option Food) :=
  let return_type := Option Cooked in
  ltac:(function (
    food.["map"](| fun f => Peeled.Build_t f |).["map"](|
      fun Peeled.Build_t f => Chopped.Build_t f
    |).["map"](| fun Chopped.Build_t f => Cooked.Build_t f
    |)
  : return_type)).

Definition eat (food : Option Cooked) :=
  let return_type := unit in
  ltac:(function (
    match food with
    | Some food =>
      let '_ :=
        _crate.io._print(|
          format_arguments::["new_v1"](|
            [ "Mmm. I love "; "
" ],
            [ format_argument::["new_debug"](| food |) ]
          |)
        |) in
      tt
    | None =>
      let '_ :=
        _crate.io._print(|
          format_arguments::["new_const"](| [ "Oh no! It wasn't edible.
" ] |)
        |) in
      tt
    end
  : return_type)).

Definition main :=
  let return_type := unit in
  ltac:(function (
    let apple := Some Food.Apple in
    let carrot := Some Food.Carrot in
    let potato := None in
    let cooked_apple := cook(| chop(| peel(| apple |) |) |) in
    let cooked_carrot := cook(| chop(| peel(| carrot |) |) |) in
    let cooked_potato := process(| potato |) in
    let '_ := eat(| cooked_apple |) in
    let '_ := eat(| cooked_carrot |) in
    let '_ := eat(| cooked_potato |) in
    tt
  : return_type)).
