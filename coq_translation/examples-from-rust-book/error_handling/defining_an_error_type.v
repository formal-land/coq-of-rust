(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Import Root.std.prelude.rust_2015.

Module fmt := std.fmt.

Definition Result : Set := std.result.Result T DoubleError.

Module DoubleError.
  Inductive t : Set := Build.
End DoubleError.
Definition DoubleError := DoubleError.t.

Module Impl__crate_fmt_Debug_for_DoubleError.
  Definition Self := DoubleError.
  
  Definition fmt (self : ref Self) (f : mut_ref _crate.fmt.Formatter) :=
    let return_type := _crate.fmt.Result in
    ltac:(function (
      _crate.fmt.Formatter::["write_str"](| f, "DoubleError" |)
    : return_type)).
  
  Global Instance Method_fmt : Notation.Dot "fmt" := {
    Notation.dot := fmt;
  }.
  
  Global Instance I : _crate.fmt.Debug.Trait Self := {
    _crate.fmt.Debug.fmt := fmt;
  }.
End Impl__crate_fmt_Debug_for_DoubleError.

Module Impl__crate_clone_Clone_for_DoubleError.
  Definition Self := DoubleError.
  
  Definition clone (self : ref Self) :=
    let return_type := DoubleError in
    ltac:(function (
      DoubleError.Build
    : return_type)).
  
  Global Instance Method_clone : Notation.Dot "clone" := {
    Notation.dot := clone;
  }.
  
  Global Instance I : _crate.clone.Clone.Trait Self := {
    _crate.clone.Clone.clone := clone;
  }.
End Impl__crate_clone_Clone_for_DoubleError.

Module Impl_fmt_Display_for_DoubleError.
  Definition Self := DoubleError.
  
  Definition fmt (self : ref Self) (f : mut_ref fmt.Formatter) :=
    let return_type := fmt.Result in
    ltac:(function (
      f.["write_fmt"](|
        format_arguments::["new_const"](| [ "invalid first item to double" ] |)
      |)
    : return_type)).
  
  Global Instance Method_fmt : Notation.Dot "fmt" := {
    Notation.dot := fmt;
  }.
  
  Global Instance I : fmt.Display.Trait Self := {
    fmt.Display.fmt := fmt;
  }.
End Impl_fmt_Display_for_DoubleError.

Definition double_first (vec : Vec (ref str)) :=
  let return_type := Result i32 in
  ltac:(function (
    vec.["first"](||).["ok_or"](| DoubleError.Build |).["and_then"](|
      fun s =>
        s.["parse"](||).["map_err"](| fun _ => DoubleError.Build |).["map"](|
          fun i => 2.["mul"](| i |)
        |)
    |)
  : return_type)).

Definition print (result : Result i32) :=
  let return_type := unit in
  ltac:(function (
    match result with
    | Ok n =>
      let _ : unit :=
        _crate.io._print(|
          format_arguments::["new_v1"](|
            [ "The first doubled is "; "
" ],
            [ format_argument::["new_display"](| n |) ]
          |)
        |) in
      tt
    | Err e =>
      let _ : unit :=
        _crate.io._print(|
          format_arguments::["new_v1"](|
            [ "Error: "; "
" ],
            [ format_argument::["new_display"](| e |) ]
          |)
        |) in
      tt
    end
  : return_type)).

Definition main :=
  let return_type := unit in
  ltac:(function (
    let numbers :=
      Slice::["into_vec"](| _crate.boxed.Box::["new"](| [ "42"; "93"; "18" ] |)
      |) in
    let empty := _crate.vec.Vec::["new"](||) in
    let strings :=
      Slice::["into_vec"](|
        _crate.boxed.Box::["new"](| [ "tofu"; "93"; "18" ] |)
      |) in
    let _ : unit := print(| double_first(| numbers |) |) in
    let _ : unit := print(| double_first(| empty |) |) in
    let _ : unit := print(| double_first(| strings |) |) in
    tt
  : return_type)).
