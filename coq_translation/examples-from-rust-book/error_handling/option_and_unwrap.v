(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Import Root.std.prelude.rust_2015.

Definition give_adult (drink : Option (ref str)) :=
  let return_type := unit in
  ltac:(function (
    match drink with
    | Some "lemonade" =>
      let _ : unit :=
        _crate.io._print(|
          format_arguments::["new_const"](| [ "Yuck! Too sugary.
" ] |)
        |) in
      tt
    | Some inner =>
      let _ : unit :=
        _crate.io._print(|
          format_arguments::["new_v1"](|
            [ ""; "? How nice.
" ],
            [ format_argument::["new_display"](| inner |) ]
          |)
        |) in
      tt
    | None =>
      let _ : unit :=
        _crate.io._print(|
          format_arguments::["new_const"](| [ "No drink? Oh well.
" ] |)
        |) in
      tt
    end
  : return_type)).

Definition drink (drink : Option (ref str)) :=
  let return_type := unit in
  ltac:(function (
    let inside := drink.["unwrap"](||) in
    let _ : unit :=
      if (inside.["eq"](| "lemonade" |) : bool) then
        let _ : unit := _crate.rt.begin_panic(| "AAAaaaaa!!!!" |) in
        tt
      else
        tt in
    let _ : unit :=
      let _ : unit :=
        _crate.io._print(|
          format_arguments::["new_v1"](|
            [ "I love "; "s!!!!!
" ],
            [ format_argument::["new_display"](| inside |) ]
          |)
        |) in
      tt in
    tt
  : return_type)).

Definition main :=
  let return_type := unit in
  ltac:(function (
    let water := Some "water" in
    let lemonade := Some "lemonade" in
    let void := None in
    let _ : unit := give_adult(| water |) in
    let _ : unit := give_adult(| lemonade |) in
    let _ : unit := give_adult(| void |) in
    let coffee := Some "coffee" in
    let nothing := None in
    let _ : unit := drink(| coffee |) in
    let _ : unit := drink(| nothing |) in
    tt
  : return_type)).
