(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Import Root.std.prelude.rust_2015.

Module error := std.error.

Module fmt := std.fmt.

Definition Result : Set := std.result.Result T (Box TraitObject).

Module EmptyVec.
  Inductive t : Set := Build.
End EmptyVec.
Definition EmptyVec := EmptyVec.t.

Module Impl__crate_fmt_Debug_for_EmptyVec.
  Definition Self := EmptyVec.
  
  Definition fmt (self : ref Self) (f : mut_ref _crate.fmt.Formatter) :=
    let return_type := _crate.fmt.Result in
    ltac:(function (
      _crate.fmt.Formatter::["write_str"](| f, "EmptyVec" |)
    : return_type)).
  
  Global Instance Method_fmt : Notation.Dot "fmt" := {
    Notation.dot := fmt;
  }.
  
  Global Instance I : _crate.fmt.Debug.Trait Self := {
    _crate.fmt.Debug.fmt := fmt;
  }.
End Impl__crate_fmt_Debug_for_EmptyVec.

Module Impl_fmt_Display_for_EmptyVec.
  Definition Self := EmptyVec.
  
  Definition fmt (self : ref Self) (f : mut_ref fmt.Formatter) :=
    let return_type := fmt.Result in
    ltac:(function (
      f.["write_fmt"](|
        format_arguments::["new_const"](| [ "invalid first item to double" ] |)
      |)
    : return_type)).
  
  Global Instance Method_fmt : Notation.Dot "fmt" := {
    Notation.dot := fmt;
  }.
  
  Global Instance I : fmt.Display.Trait Self := {
    fmt.Display.fmt := fmt;
  }.
End Impl_fmt_Display_for_EmptyVec.

Module Impl_error_Error_for_EmptyVec.
  Definition Self := EmptyVec.
  
  Global Instance I : error.Error.Trait Self := error.Error.Build_Class _.
End Impl_error_Error_for_EmptyVec.

Definition double_first (vec : Vec (ref str)) :=
  let return_type := Result i32 in
  ltac:(function (
    let first :=
      match LangItem(| vec.["first"](||).["ok_or"](| EmptyVec.Build |) |) with
      | Break {| Break.0 := residual; |} => M.Return LangItem(| residual |)
      | Continue {| Continue.0 := val; |} => val
      end in
    let parsed :=
      match LangItem(| first.["parse"](||) |) with
      | Break {| Break.0 := residual; |} => M.Return LangItem(| residual |)
      | Continue {| Continue.0 := val; |} => val
      end in
    Ok 2.["mul"](| parsed |)
  : return_type)).

Definition print (result : Result i32) :=
  let return_type := unit in
  ltac:(function (
    match result with
    | Ok n =>
      let '_ :=
        _crate.io._print(|
          format_arguments::["new_v1"](|
            [ "The first doubled is "; "
" ],
            [ format_argument::["new_display"](| n |) ]
          |)
        |) in
      tt
    | Err e =>
      let '_ :=
        _crate.io._print(|
          format_arguments::["new_v1"](|
            [ "Error: "; "
" ],
            [ format_argument::["new_display"](| e |) ]
          |)
        |) in
      tt
    end
  : return_type)).

Definition main :=
  let return_type := unit in
  ltac:(function (
    let numbers :=
      Slice::["into_vec"](| _crate.boxed.Box::["new"](| [ "42"; "93"; "18" ] |)
      |) in
    let empty := _crate.vec.Vec::["new"](||) in
    let strings :=
      Slice::["into_vec"](|
        _crate.boxed.Box::["new"](| [ "tofu"; "93"; "18" ] |)
      |) in
    let '_ := print(| double_first(| numbers |) |) in
    let '_ := print(| double_first(| empty |) |) in
    let '_ := print(| double_first(| strings |) |) in
    tt
  : return_type)).
