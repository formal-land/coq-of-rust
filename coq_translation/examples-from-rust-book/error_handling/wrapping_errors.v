(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Import Root.std.prelude.rust_2015.

Module error := std.error.

Module fmt := std.fmt.

Module ParseIntError := std.num.ParseIntError.
Definition ParseIntError := ParseIntError.t.

Definition Result : Set := std.result.Result T DoubleError.

Module DoubleError.
  Inductive t : Set :=
  | EmptyVec
  | Parse (_ : ParseIntError).
End DoubleError.
Definition DoubleError := DoubleError.t.

Module Impl__crate_fmt_Debug_for_DoubleError.
  Definition Self := DoubleError.
  
  Definition fmt (self : ref Self) (f : mut_ref _crate.fmt.Formatter) :=
    let return_type := _crate.fmt.Result in
    ltac:(function (
      match self with
      | DoubleError.EmptyVec =>
        _crate.fmt.Formatter::["write_str"](| f, "EmptyVec" |)
      | DoubleError.Parse __self_0 =>
        _crate.fmt.Formatter::["debug_tuple_field1_finish"](|
          f,
          "Parse",
          __self_0
        |)
      end
    : return_type)).
  
  Global Instance Method_fmt : Notation.Dot "fmt" := {
    Notation.dot := fmt;
  }.
  
  Global Instance I : _crate.fmt.Debug.Trait Self := {
    _crate.fmt.Debug.fmt := fmt;
  }.
End Impl__crate_fmt_Debug_for_DoubleError.

Module Impl_fmt_Display_for_DoubleError.
  Definition Self := DoubleError.
  
  Definition fmt (self : ref Self) (f : mut_ref fmt.Formatter) :=
    let return_type := fmt.Result in
    ltac:(function (
      match self.["deref"](||) with
      | DoubleError.EmptyVec =>
        f.["write_fmt"](|
          format_arguments::["new_const"](|
            [ "please use a vector with at least one element" ]
          |)
        |)
      | DoubleError.Parse  =>
        f.["write_fmt"](|
          format_arguments::["new_const"](|
            [ "the provided string could not be parsed as int" ]
          |)
        |)
      end
    : return_type)).
  
  Global Instance Method_fmt : Notation.Dot "fmt" := {
    Notation.dot := fmt;
  }.
  
  Global Instance I : fmt.Display.Trait Self := {
    fmt.Display.fmt := fmt;
  }.
End Impl_fmt_Display_for_DoubleError.

Module Impl_error_Error_for_DoubleError.
  Definition Self := DoubleError.
  
  Definition source (self : ref Self) :=
    let return_type := Option (ref TraitObject) in
    ltac:(function (
      match self.["deref"](||) with
      | DoubleError.EmptyVec => None
      | DoubleError.Parse e => Some e
      end
    : return_type)).
  
  Global Instance Method_source : Notation.Dot "source" := {
    Notation.dot := source;
  }.
  
  Global Instance I : error.Error.Trait Self := {
  }.
End Impl_error_Error_for_DoubleError.

Module Impl_From_for_DoubleError.
  Definition Self := DoubleError.
  
  Definition from (err : ParseIntError) :=
    let return_type := DoubleError in
    ltac:(function (
      DoubleError.Parse err
    : return_type)).
  
  Global Instance AssociatedFunction_from :
    Notation.DoubleColon Self "from" := {
    Notation.double_colon := from;
  }.
  
  Global Instance I : From.Trait Self ParseIntError := {
    From.from := from;
  }.
End Impl_From_for_DoubleError.

Definition double_first (vec : Vec (ref str)) :=
  let return_type := Result i32 in
  ltac:(function (
    let first :=
      match LangItem(| vec.["first"](||).["ok_or"](| DoubleError.EmptyVec |) |)
      with
      | Break {| Break.0 := residual; |} => M.Return LangItem(| residual |)
      | Continue {| Continue.0 := val; |} => val
      end in
    let parsed :=
      match LangItem(| first.["parse"](||) |) with
      | Break {| Break.0 := residual; |} => M.Return LangItem(| residual |)
      | Continue {| Continue.0 := val; |} => val
      end in
    Ok 2.["mul"](| parsed |)
  : return_type)).

Definition print (result : Result i32) :=
  let return_type := unit in
  ltac:(function (
    match result with
    | Ok n =>
      let _ : unit :=
        _crate.io._print(|
          format_arguments::["new_v1"](|
            [ "The first doubled is "; "
" ],
            [ format_argument::["new_display"](| n |) ]
          |)
        |) in
      tt
    | Err e =>
      let _ : unit :=
        let _ : unit :=
          _crate.io._print(|
            format_arguments::["new_v1"](|
              [ "Error: "; "
" ],
              [ format_argument::["new_display"](| e |) ]
            |)
          |) in
        tt in
      if (let_if Some source := e.["source"](||) : bool) then
        let _ : unit :=
          let _ : unit :=
            _crate.io._print(|
              format_arguments::["new_v1"](|
                [ "  Caused by: "; "
" ],
                [ format_argument::["new_display"](| source |) ]
              |)
            |) in
          tt in
        tt
      else
        tt
    end
  : return_type)).

Definition main :=
  let return_type := unit in
  ltac:(function (
    let numbers :=
      Slice::["into_vec"](| _crate.boxed.Box::["new"](| [ "42"; "93"; "18" ] |)
      |) in
    let empty := _crate.vec.Vec::["new"](||) in
    let strings :=
      Slice::["into_vec"](|
        _crate.boxed.Box::["new"](| [ "tofu"; "93"; "18" ] |)
      |) in
    let _ : unit := print(| double_first(| numbers |) |) in
    let _ : unit := print(| double_first(| empty |) |) in
    let _ : unit := print(| double_first(| strings |) |) in
    tt
  : return_type)).
