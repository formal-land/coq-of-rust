(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Import Root.std.prelude.rust_2015.

Definition main :=
  ltac:(function (
    let '_ := fizzbuzz_to(| 100 |) in
    tt
    : unit)).

Definition is_divisible_by (lhs : u32) (rhs : u32) :=
  ltac:(function (
    let '_ :=
      if (rhs.["eq"](| 0 |) : bool) then
        let '_ := Return(| false |) in
        tt
      else
        tt in
    (lhs.["rem"](| rhs |)).["eq"](| 0 |)
    : bool)).

Definition fizzbuzz (n : u32) :=
  ltac:(function (
    if (is_divisible_by(| n, 15 |) : bool) then
      let '_ :=
        let '_ :=
          _crate.io._print(|
            format_arguments::["new_const"](| [ "fizzbuzz
" ] |)
          |) in
        tt in
      tt
    else
      if (is_divisible_by(| n, 3 |) : bool) then
        let '_ :=
          let '_ :=
            _crate.io._print(| format_arguments::["new_const"](| [ "fizz
" ] |)
            |) in
          tt in
        tt
      else
        if (is_divisible_by(| n, 5 |) : bool) then
          let '_ :=
            let '_ :=
              _crate.io._print(|
                format_arguments::["new_const"](| [ "buzz
" ] |)
              |) in
            tt in
          tt
        else
          let '_ :=
            let '_ :=
              _crate.io._print(|
                format_arguments::["new_v1"](|
                  [ ""; "
" ],
                  [ format_argument::["new_display"](| n |) ]
                |)
              |) in
            tt in
          tt
    : unit)).

Definition fizzbuzz_to (n : u32) :=
  ltac:(function (
    match LangItem(| LangItem(| 1, n |) |) with
    | iter =>
      loop
        let '_ :=
          match LangItem(| iter |) with
          | None => Break
          | Some {| Some.0 := n; |} =>
            let '_ := fizzbuzz(| n |) in
            tt
          end in
        tt
        from
        for
    end
    : unit)).
