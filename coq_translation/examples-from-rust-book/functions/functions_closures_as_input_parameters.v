(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Import Root.std.prelude.rust_2015.

Definition apply {F : Set} `{FnOnce.Trait unit F} (f : F) :=
  let return_type := unit in
  ltac:(function (
    let '_ := f(||) in
    tt
  : return_type)).

Definition apply_to_3 {F : Set} `{Fn.Trait (i32) F} (f : F) :=
  let return_type := i32 in
  ltac:(function (
    f(| 3 |)
  : return_type)).

Definition main :=
  let return_type := unit in
  ltac:(function (
    let greeting := "hello" in
    let farewell := "goodbye".["to_owned"](||) in
    let diary :=
      fun  =>
        let '_ :=
          let '_ :=
            _crate.io._print(|
              format_arguments::["new_v1"](|
                [ "I said "; ".
" ],
                [ format_argument::["new_display"](| greeting |) ]
              |)
            |) in
          tt in
        let '_ := farewell.["push_str"](| "!!!" |) in
        let '_ :=
          let '_ :=
            _crate.io._print(|
              format_arguments::["new_v1"](|
                [ "Then I screamed "; ".
" ],
                [ format_argument::["new_display"](| farewell |) ]
              |)
            |) in
          tt in
        let '_ :=
          let '_ :=
            _crate.io._print(|
              format_arguments::["new_const"](| [ "Now I can sleep. zzzzz
" ] |)
            |) in
          tt in
        let '_ := mem.drop(| farewell |) in
        tt in
    let '_ := apply(| diary |) in
    let double := fun x => 2.["mul"](| x |) in
    let '_ :=
      let '_ :=
        _crate.io._print(|
          format_arguments::["new_v1"](|
            [ "3 doubled: "; "
" ],
            [ format_argument::["new_display"](| apply_to_3(| double |) |) ]
          |)
        |) in
      tt in
    tt
  : return_type)).

Module mem := std.mem.
