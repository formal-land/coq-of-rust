(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Import Root.std.prelude.rust_2015.

Definition create_fn :=
  let return_type := OpaqueDef in
  ltac:(function (
    let text := "Fn".["to_owned"](||) in
    fun  =>
      let _ : unit :=
        _crate.io._print(|
          format_arguments::["new_v1"](|
            [ "This is a: "; "
" ],
            [ format_argument::["new_display"](| text |) ]
          |)
        |) in
      tt
  : return_type)).

Error OpaqueTy.

Definition create_fnmut :=
  let return_type := OpaqueDef in
  ltac:(function (
    let text := "FnMut".["to_owned"](||) in
    fun  =>
      let _ : unit :=
        _crate.io._print(|
          format_arguments::["new_v1"](|
            [ "This is a: "; "
" ],
            [ format_argument::["new_display"](| text |) ]
          |)
        |) in
      tt
  : return_type)).

Error OpaqueTy.

Definition create_fnonce :=
  let return_type := OpaqueDef in
  ltac:(function (
    let text := "FnOnce".["to_owned"](||) in
    fun  =>
      let _ : unit :=
        _crate.io._print(|
          format_arguments::["new_v1"](|
            [ "This is a: "; "
" ],
            [ format_argument::["new_display"](| text |) ]
          |)
        |) in
      tt
  : return_type)).

Error OpaqueTy.

Definition main :=
  let return_type := unit in
  ltac:(function (
    let fn_plain := create_fn(||) in
    let fn_mut := create_fnmut(||) in
    let fn_once := create_fnonce(||) in
    let _ : unit := fn_plain(||) in
    let _ : unit := fn_mut(||) in
    let _ : unit := fn_once(||) in
    tt
  : return_type)).
