(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Import Root.std.prelude.rust_2015.

Module Years.
  Record t : Set := { _ : i64;}.
  
  Global Instance Get_0 : Notation.Dot 0 := {
    Notation.dot '(Build_t x0) := x0;
  }.
End Years.
Definition Years := Years.t.

Module Days.
  Record t : Set := { _ : i64;}.
  
  Global Instance Get_0 : Notation.Dot 0 := {
    Notation.dot '(Build_t x0) := x0;
  }.
End Days.
Definition Days := Days.t.

Module ImplYears.
  Definition Self := Years.
  
  Definition to_days (self : ref Self) :=
    ltac:(function (Days.Build_t ((self.[0]).["mul"](| 365 |)) : Days)).
  
  Global Instance Method_to_days : Notation.Dot "to_days" := {
    Notation.dot := to_days;
  }.
End ImplYears.

Module ImplDays.
  Definition Self := Days.
  
  Definition to_years (self : ref Self) :=
    ltac:(function (Years.Build_t ((self.[0]).["div"](| 365 |)) : Years)).
  
  Global Instance Method_to_years : Notation.Dot "to_years" := {
    Notation.dot := to_years;
  }.
End ImplDays.

Definition old_enough (age : ref Years) :=
  ltac:(function ((age.[0]).["ge"](| 18 |) : bool)).

Definition main :=
  ltac:(function (
    let age := Years.Build_t 5 in
    let age_days := age.["to_days"](||) in
    let '_ :=
      let '_ :=
        _crate.io._print(|
          format_arguments::["new_v1"](|
            [ "Old enough "; "
" ],
            [ format_argument::["new_display"](| old_enough(| age |) |) ]
          |)
        |) in
      tt in
    let '_ :=
      let '_ :=
        _crate.io._print(|
          format_arguments::["new_v1"](|
            [ "Old enough "; "
" ],
            [
              format_argument::["new_display"](|
                old_enough(| age_days.["to_years"](||) |)
              |)
            ]
          |)
        |) in
      tt in
    tt
    : unit)).
