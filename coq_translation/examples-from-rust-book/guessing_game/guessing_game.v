(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Import Root.std.prelude.rust_2015.

Module io := std.io.

Module Ordering := std.cmp.Ordering.
Definition Ordering := Ordering.t.

Module Rng := rand.Rng.

Definition main :=
  let return_type := unit in
  ltac:(function (
    let _ : unit :=
      let _ : unit :=
        _crate.io._print(|
          format_arguments::["new_const"](| [ "Guess the number!
" ] |)
        |) in
      tt in
    let secret_number :=
      rand.thread_rng(||).["gen_range"](| LangItem(| 1, 100 |) |) in
    loop
      let _ : unit :=
        let _ : unit :=
          _crate.io._print(|
            format_arguments::["new_const"](| [ "Please input your guess.
" ] |)
          |) in
        tt in
      let guess := String::["new"](||) in
      let _ : unit :=
        io.stdin(||).["read_line"](| guess |).["expect"](| "Failed to read line"
        |) in
      let guess :=
        match guess.["trim"](||).["parse"](||) with
        | Ok num => num
        | Err _ => M.Continue
        end in
      let _ : unit :=
        let _ : unit :=
          _crate.io._print(|
            format_arguments::["new_v1"](|
              [ "You guessed: "; "
" ],
              [ format_argument::["new_display"](| guess |) ]
            |)
          |) in
        tt in
      match guess.["cmp"](| secret_number |) with
      | Ordering.Less =>
        let _ : unit :=
          _crate.io._print(|
            format_arguments::["new_const"](| [ "Too small!
" ] |)
          |) in
        tt
      | Ordering.Greater =>
        let _ : unit :=
          _crate.io._print(|
            format_arguments::["new_const"](| [ "Too big!
" ] |)
          |) in
        tt
      | Ordering.Equal =>
        let _ : unit :=
          let _ : unit :=
            _crate.io._print(|
              format_arguments::["new_const"](| [ "You win!
" ] |)
            |) in
          tt in
        let _ : unit := M.Break in
        tt
      end
      from
      loop
  : return_type)).
