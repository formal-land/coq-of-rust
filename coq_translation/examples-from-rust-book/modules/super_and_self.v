(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Import Root.std.prelude.rust_2015.

Definition function :=
  ltac:(function (
    let '_ :=
      let '_ :=
        _crate.io._print(|
          format_arguments::["new_const"](| [ "called `function()`
" ] |)
        |) in
      tt in
    tt
    : unit)).

Module cool.
  Definition function :=
    ltac:(function (
      let '_ :=
        let '_ :=
          _crate.io._print(|
            format_arguments::["new_const"](| [ "called `cool::function()`
" ]
            |)
          |) in
        tt in
      tt
      : unit)).
End cool.

Definition function :=
  ltac:(function (
    let '_ :=
      let '_ :=
        _crate.io._print(|
          format_arguments::["new_const"](| [ "called `cool::function()`
" ] |)
        |) in
      tt in
    tt
    : unit)).

Module my.
  Definition function :=
    ltac:(function (
      let '_ :=
        let '_ :=
          _crate.io._print(|
            format_arguments::["new_const"](| [ "called `my::function()`
" ] |)
          |) in
        tt in
      tt
      : unit)).
  
  Module cool.
    Definition function :=
      ltac:(function (
        let '_ :=
          let '_ :=
            _crate.io._print(|
              format_arguments::["new_const"](|
                [ "called `my::cool::function()`
" ]
              |)
            |) in
          tt in
        tt
        : unit)).
  End cool.
  
  Definition indirect_call :=
    ltac:(function (
      let '_ :=
        let '_ :=
          _crate.io._print(|
            format_arguments::["new_const"](|
              [ "called `my::indirect_call()`, that
> " ]
            |)
          |) in
        tt in
      let '_ := self.function(||) in
      let '_ := function(||) in
      let '_ := self.cool.function(||) in
      let '_ := super.function(||) in
      let '_ := root_function(||) in
      tt
      : unit)).
End my.

Definition function :=
  ltac:(function (
    let '_ :=
      let '_ :=
        _crate.io._print(|
          format_arguments::["new_const"](| [ "called `my::function()`
" ] |)
        |) in
      tt in
    tt
    : unit)).

Module cool.
  Definition function :=
    ltac:(function (
      let '_ :=
        let '_ :=
          _crate.io._print(|
            format_arguments::["new_const"](|
              [ "called `my::cool::function()`
" ]
            |)
          |) in
        tt in
      tt
      : unit)).
End cool.

Definition function :=
  ltac:(function (
    let '_ :=
      let '_ :=
        _crate.io._print(|
          format_arguments::["new_const"](| [ "called `my::cool::function()`
" ]
          |)
        |) in
      tt in
    tt
    : unit)).

Definition indirect_call :=
  ltac:(function (
    let '_ :=
      let '_ :=
        _crate.io._print(|
          format_arguments::["new_const"](|
            [ "called `my::indirect_call()`, that
> " ]
          |)
        |) in
      tt in
    let '_ := self.function(||) in
    let '_ := function(||) in
    let '_ := self.cool.function(||) in
    let '_ := super.function(||) in
    let '_ := root_function(||) in
    tt
    : unit)).

Module root_function := crate.cool.function.

Definition main :=
  ltac:(function (
    let '_ := my.indirect_call(||) in
    tt
    : unit)).
