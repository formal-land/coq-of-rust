(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Import Root.std.prelude.rust_2015.

Module other_function := deeply.nested.function.

Definition function :=
  let return_type := unit in
  ltac:(function (
    let '_ :=
      let '_ :=
        _crate.io._print(|
          format_arguments::["new_const"](| [ "called `function()`
" ] |)
        |) in
      tt in
    tt
  : return_type)).

Module deeply.
  Module nested.
    Definition function :=
      let return_type := unit in
      ltac:(function (
        let '_ :=
          let '_ :=
            _crate.io._print(|
              format_arguments::["new_const"](|
                [ "called `deeply::nested::function()`
" ]
              |)
            |) in
          tt in
        tt
      : return_type)).
  End nested.
End deeply.

Module nested.
  Definition function :=
    let return_type := unit in
    ltac:(function (
      let '_ :=
        let '_ :=
          _crate.io._print(|
            format_arguments::["new_const"](|
              [ "called `deeply::nested::function()`
" ]
            |)
          |) in
        tt in
      tt
    : return_type)).
End nested.

Definition function :=
  let return_type := unit in
  ltac:(function (
    let '_ :=
      let '_ :=
        _crate.io._print(|
          format_arguments::["new_const"](|
            [ "called `deeply::nested::function()`
" ]
          |)
        |) in
      tt in
    tt
  : return_type)).

Definition main :=
  let return_type := unit in
  ltac:(function (
    let '_ := other_function(||) in
    let '_ :=
      let '_ :=
        _crate.io._print(|
          format_arguments::["new_const"](| [ "Entering block
" ] |)
        |) in
      tt in
    let '_ :=
      let '_ := function(||) in
      let '_ :=
        let '_ :=
          _crate.io._print(|
            format_arguments::["new_const"](| [ "Leaving block
" ] |)
          |) in
        tt in
      tt in
    let '_ := function(||) in
    tt
  : return_type)).

Module function := crate.deeply.nested.function.
