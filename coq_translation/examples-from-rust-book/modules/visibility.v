(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Import Root.std.prelude.rust_2015.

Module my_mod.
  Definition private_function :=
    let return_type := unit in
    ltac:(function (
      let '_ :=
        let '_ :=
          _crate.io._print(|
            format_arguments::["new_const"](|
              [ "called `my_mod::private_function()`
" ]
            |)
          |) in
        tt in
      tt
    : return_type)).
  
  Definition function :=
    let return_type := unit in
    ltac:(function (
      let '_ :=
        let '_ :=
          _crate.io._print(|
            format_arguments::["new_const"](| [ "called `my_mod::function()`
" ]
            |)
          |) in
        tt in
      tt
    : return_type)).
  
  Definition indirect_access :=
    let return_type := unit in
    ltac:(function (
      let '_ :=
        let '_ :=
          _crate.io._print(|
            format_arguments::["new_const"](|
              [ "called `my_mod::indirect_access()`, that
> " ]
            |)
          |) in
        tt in
      let '_ := private_function(||) in
      tt
    : return_type)).
  
  Module nested.
    Definition function :=
      let return_type := unit in
      ltac:(function (
        let '_ :=
          let '_ :=
            _crate.io._print(|
              format_arguments::["new_const"](|
                [ "called `my_mod::nested::function()`
" ]
              |)
            |) in
          tt in
        tt
      : return_type)).
    
    Definition private_function :=
      let return_type := unit in
      ltac:(function (
        let '_ :=
          let '_ :=
            _crate.io._print(|
              format_arguments::["new_const"](|
                [ "called `my_mod::nested::private_function()`
" ]
              |)
            |) in
          tt in
        tt
      : return_type)).
    
    Definition public_function_in_my_mod :=
      let return_type := unit in
      ltac:(function (
        let '_ :=
          let '_ :=
            _crate.io._print(|
              format_arguments::["new_const"](|
                [
                  "called `my_mod::nested::public_function_in_my_mod()`, that
> "
                ]
              |)
            |) in
          tt in
        let '_ := public_function_in_nested(||) in
        tt
      : return_type)).
    
    Definition public_function_in_nested :=
      let return_type := unit in
      ltac:(function (
        let '_ :=
          let '_ :=
            _crate.io._print(|
              format_arguments::["new_const"](|
                [ "called `my_mod::nested::public_function_in_nested()`
" ]
              |)
            |) in
          tt in
        tt
      : return_type)).
    
    Definition public_function_in_super_mod :=
      let return_type := unit in
      ltac:(function (
        let '_ :=
          let '_ :=
            _crate.io._print(|
              format_arguments::["new_const"](|
                [ "called `my_mod::nested::public_function_in_super_mod()`
" ]
              |)
            |) in
          tt in
        tt
      : return_type)).
  End nested.
  
  Definition call_public_function_in_my_mod :=
    let return_type := unit in
    ltac:(function (
      let '_ :=
        let '_ :=
          _crate.io._print(|
            format_arguments::["new_const"](|
              [ "called `my_mod::call_public_function_in_my_mod()`, that
> " ]
            |)
          |) in
        tt in
      let '_ := nested.public_function_in_my_mod(||) in
      let '_ :=
        let '_ :=
          _crate.io._print(| format_arguments::["new_const"](| [ "> " ] |) |) in
        tt in
      let '_ := nested.public_function_in_super_mod(||) in
      tt
    : return_type)).
  
  Definition public_function_in_crate :=
    let return_type := unit in
    ltac:(function (
      let '_ :=
        let '_ :=
          _crate.io._print(|
            format_arguments::["new_const"](|
              [ "called `my_mod::public_function_in_crate()`
" ]
            |)
          |) in
        tt in
      tt
    : return_type)).
  
  Module private_nested.
    Definition function :=
      let return_type := unit in
      ltac:(function (
        let '_ :=
          let '_ :=
            _crate.io._print(|
              format_arguments::["new_const"](|
                [ "called `my_mod::private_nested::function()`
" ]
              |)
            |) in
          tt in
        tt
      : return_type)).
    
    Definition restricted_function :=
      let return_type := unit in
      ltac:(function (
        let '_ :=
          let '_ :=
            _crate.io._print(|
              format_arguments::["new_const"](|
                [ "called `my_mod::private_nested::restricted_function()`
" ]
              |)
            |) in
          tt in
        tt
      : return_type)).
  End private_nested.
End my_mod.

Definition private_function :=
  let return_type := unit in
  ltac:(function (
    let '_ :=
      let '_ :=
        _crate.io._print(|
          format_arguments::["new_const"](|
            [ "called `my_mod::private_function()`
" ]
          |)
        |) in
      tt in
    tt
  : return_type)).

Definition function :=
  let return_type := unit in
  ltac:(function (
    let '_ :=
      let '_ :=
        _crate.io._print(|
          format_arguments::["new_const"](| [ "called `my_mod::function()`
" ]
          |)
        |) in
      tt in
    tt
  : return_type)).

Definition indirect_access :=
  let return_type := unit in
  ltac:(function (
    let '_ :=
      let '_ :=
        _crate.io._print(|
          format_arguments::["new_const"](|
            [ "called `my_mod::indirect_access()`, that
> " ]
          |)
        |) in
      tt in
    let '_ := private_function(||) in
    tt
  : return_type)).

Module nested.
  Definition function :=
    let return_type := unit in
    ltac:(function (
      let '_ :=
        let '_ :=
          _crate.io._print(|
            format_arguments::["new_const"](|
              [ "called `my_mod::nested::function()`
" ]
            |)
          |) in
        tt in
      tt
    : return_type)).
  
  Definition private_function :=
    let return_type := unit in
    ltac:(function (
      let '_ :=
        let '_ :=
          _crate.io._print(|
            format_arguments::["new_const"](|
              [ "called `my_mod::nested::private_function()`
" ]
            |)
          |) in
        tt in
      tt
    : return_type)).
  
  Definition public_function_in_my_mod :=
    let return_type := unit in
    ltac:(function (
      let '_ :=
        let '_ :=
          _crate.io._print(|
            format_arguments::["new_const"](|
              [ "called `my_mod::nested::public_function_in_my_mod()`, that
> "
              ]
            |)
          |) in
        tt in
      let '_ := public_function_in_nested(||) in
      tt
    : return_type)).
  
  Definition public_function_in_nested :=
    let return_type := unit in
    ltac:(function (
      let '_ :=
        let '_ :=
          _crate.io._print(|
            format_arguments::["new_const"](|
              [ "called `my_mod::nested::public_function_in_nested()`
" ]
            |)
          |) in
        tt in
      tt
    : return_type)).
  
  Definition public_function_in_super_mod :=
    let return_type := unit in
    ltac:(function (
      let '_ :=
        let '_ :=
          _crate.io._print(|
            format_arguments::["new_const"](|
              [ "called `my_mod::nested::public_function_in_super_mod()`
" ]
            |)
          |) in
        tt in
      tt
    : return_type)).
End nested.

Definition function :=
  let return_type := unit in
  ltac:(function (
    let '_ :=
      let '_ :=
        _crate.io._print(|
          format_arguments::["new_const"](|
            [ "called `my_mod::nested::function()`
" ]
          |)
        |) in
      tt in
    tt
  : return_type)).

Definition private_function :=
  let return_type := unit in
  ltac:(function (
    let '_ :=
      let '_ :=
        _crate.io._print(|
          format_arguments::["new_const"](|
            [ "called `my_mod::nested::private_function()`
" ]
          |)
        |) in
      tt in
    tt
  : return_type)).

Definition public_function_in_my_mod :=
  let return_type := unit in
  ltac:(function (
    let '_ :=
      let '_ :=
        _crate.io._print(|
          format_arguments::["new_const"](|
            [ "called `my_mod::nested::public_function_in_my_mod()`, that
> " ]
          |)
        |) in
      tt in
    let '_ := public_function_in_nested(||) in
    tt
  : return_type)).

Definition public_function_in_nested :=
  let return_type := unit in
  ltac:(function (
    let '_ :=
      let '_ :=
        _crate.io._print(|
          format_arguments::["new_const"](|
            [ "called `my_mod::nested::public_function_in_nested()`
" ]
          |)
        |) in
      tt in
    tt
  : return_type)).

Definition public_function_in_super_mod :=
  let return_type := unit in
  ltac:(function (
    let '_ :=
      let '_ :=
        _crate.io._print(|
          format_arguments::["new_const"](|
            [ "called `my_mod::nested::public_function_in_super_mod()`
" ]
          |)
        |) in
      tt in
    tt
  : return_type)).

Definition call_public_function_in_my_mod :=
  let return_type := unit in
  ltac:(function (
    let '_ :=
      let '_ :=
        _crate.io._print(|
          format_arguments::["new_const"](|
            [ "called `my_mod::call_public_function_in_my_mod()`, that
> " ]
          |)
        |) in
      tt in
    let '_ := nested.public_function_in_my_mod(||) in
    let '_ :=
      let '_ :=
        _crate.io._print(| format_arguments::["new_const"](| [ "> " ] |) |) in
      tt in
    let '_ := nested.public_function_in_super_mod(||) in
    tt
  : return_type)).

Definition public_function_in_crate :=
  let return_type := unit in
  ltac:(function (
    let '_ :=
      let '_ :=
        _crate.io._print(|
          format_arguments::["new_const"](|
            [ "called `my_mod::public_function_in_crate()`
" ]
          |)
        |) in
      tt in
    tt
  : return_type)).

Module private_nested.
  Definition function :=
    let return_type := unit in
    ltac:(function (
      let '_ :=
        let '_ :=
          _crate.io._print(|
            format_arguments::["new_const"](|
              [ "called `my_mod::private_nested::function()`
" ]
            |)
          |) in
        tt in
      tt
    : return_type)).
  
  Definition restricted_function :=
    let return_type := unit in
    ltac:(function (
      let '_ :=
        let '_ :=
          _crate.io._print(|
            format_arguments::["new_const"](|
              [ "called `my_mod::private_nested::restricted_function()`
" ]
            |)
          |) in
        tt in
      tt
    : return_type)).
End private_nested.

Definition function :=
  let return_type := unit in
  ltac:(function (
    let '_ :=
      let '_ :=
        _crate.io._print(|
          format_arguments::["new_const"](|
            [ "called `my_mod::private_nested::function()`
" ]
          |)
        |) in
      tt in
    tt
  : return_type)).

Definition restricted_function :=
  let return_type := unit in
  ltac:(function (
    let '_ :=
      let '_ :=
        _crate.io._print(|
          format_arguments::["new_const"](|
            [ "called `my_mod::private_nested::restricted_function()`
" ]
          |)
        |) in
      tt in
    tt
  : return_type)).

Definition function :=
  let return_type := unit in
  ltac:(function (
    let '_ :=
      let '_ :=
        _crate.io._print(|
          format_arguments::["new_const"](| [ "called `function()`
" ] |)
        |) in
      tt in
    tt
  : return_type)).

Definition main :=
  let return_type := unit in
  ltac:(function (
    let '_ := function(||) in
    let '_ := my_mod.function(||) in
    let '_ := my_mod.indirect_access(||) in
    let '_ := my_mod.nested.function(||) in
    let '_ := my_mod.call_public_function_in_my_mod(||) in
    let '_ := my_mod.public_function_in_crate(||) in
    tt
  : return_type)).
