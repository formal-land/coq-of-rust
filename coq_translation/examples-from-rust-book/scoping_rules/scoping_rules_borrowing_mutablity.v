(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Import Root.std.prelude.rust_2015.

Module Book.
  Record t : Set := {
    author : ref str;
    title : ref str;
    year : u32;
  }.
  
  Global Instance Get_author : Notation.Dot "author" := {
    Notation.dot '(Build_t x0 _ _) := x0;
  }.
  Global Instance Get_title : Notation.Dot "title" := {
    Notation.dot '(Build_t _ x1 _) := x1;
  }.
  Global Instance Get_year : Notation.Dot "year" := {
    Notation.dot '(Build_t _ _ x2) := x2;
  }.
End Book.
Definition Book : Set := Book.t.

Module Impl__crate_clone_Clone_for_Book.
  Definition Self := Book.
  
  Definition clone (self : ref Self) :=
    let return_type := Book in
    ltac:(function (
      let '_ := tt in
      let '_ := tt in
      let '_ := tt in
      self.["deref"](||)
    : return_type)).
  
  Global Instance Method_clone : Notation.Dot "clone" := {
    Notation.dot := clone;
  }.
  
  Global Instance I : _crate.clone.Clone.Trait Self := {
    _crate.clone.Clone.clone := clone;
  }.
End Impl__crate_clone_Clone_for_Book.

Module Impl__crate_marker_Copy_for_Book.
  Definition Self := Book.
  
  Global Instance I : _crate.marker.Copy.Trait Self :=
    _crate.marker.Copy.Build_Class _.
End Impl__crate_marker_Copy_for_Book.

Definition borrow_book (book : ref Book) :=
  let return_type := unit in
  ltac:(function (
    let _ : unit :=
      let _ : unit :=
        _crate.io._print(|
          format_arguments::["new_v1"](|
            [ "I immutably borrowed "; " - "; " edition
" ],
            [
              format_argument::["new_display"](| book.["title"] |);
              format_argument::["new_display"](| book.["year"] |)
            ]
          |)
        |) in
      tt in
    tt
  : return_type)).

Definition new_edition (book : mut_ref Book) :=
  let return_type := unit in
  ltac:(function (
    let _ : unit := assign book.["year"] 2014 in
    let _ : unit :=
      let _ : unit :=
        _crate.io._print(|
          format_arguments::["new_v1"](|
            [ "I mutably borrowed "; " - "; " edition
" ],
            [
              format_argument::["new_display"](| book.["title"] |);
              format_argument::["new_display"](| book.["year"] |)
            ]
          |)
        |) in
      tt in
    tt
  : return_type)).

Definition main :=
  let return_type := unit in
  ltac:(function (
    let immutabook :=
      {|
        Book.author := "Douglas Hofstadter";
        Book.title := "G" ++ String.String "246" "del, Escher, Bach";
        Book.year := 1979;
      |} in
    let mutabook := immutabook in
    let _ : unit := borrow_book(| immutabook |) in
    let _ : unit := borrow_book(| mutabook |) in
    let _ : unit := new_edition(| mutabook |) in
    tt
  : return_type)).
