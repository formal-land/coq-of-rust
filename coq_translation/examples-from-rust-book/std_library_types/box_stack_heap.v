(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Import Root.std.prelude.rust_2015.

Module mem := std.mem.

Module Point.
  Record t : Set := {
    x : f64;
    y : f64;
  }.
  
  Global Instance Get_x : Notation.Dot "x" := {
    Notation.dot '(Build_t x0 _) := x0;
  }.
  Global Instance Get_y : Notation.Dot "y" := {
    Notation.dot '(Build_t _ x1) := x1;
  }.
End Point.
Definition Point : Set := Point.t.

Module Impl__crate_fmt_Debug_for_Point.
  Definition Self := Point.
  
  Definition fmt (self : ref Self) (f : mut_ref _crate.fmt.Formatter) :=
    let return_type := _crate.fmt.Result in
    ltac:(function (
      _crate.fmt.Formatter::["debug_struct_field2_finish"](|
        f,
        "Point",
        "x",
        self.["x"],
        "y",
        self.["y"]
      |)
    : return_type)).
  
  Global Instance Method_fmt : Notation.Dot "fmt" := {
    Notation.dot := fmt;
  }.
  
  Global Instance I : _crate.fmt.Debug.Trait Self := {
    _crate.fmt.Debug.fmt := fmt;
  }.
End Impl__crate_fmt_Debug_for_Point.

Module Impl__crate_clone_Clone_for_Point.
  Definition Self := Point.
  
  Definition clone (self : ref Self) :=
    let return_type := Point in
    ltac:(function (
      let '_ := tt in
      self.["deref"](||)
    : return_type)).
  
  Global Instance Method_clone : Notation.Dot "clone" := {
    Notation.dot := clone;
  }.
  
  Global Instance I : _crate.clone.Clone.Trait Self := {
    _crate.clone.Clone.clone := clone;
  }.
End Impl__crate_clone_Clone_for_Point.

Module Impl__crate_marker_Copy_for_Point.
  Definition Self := Point.
  
  Global Instance I : _crate.marker.Copy.Trait Self :=
    _crate.marker.Copy.Build_Class _.
End Impl__crate_marker_Copy_for_Point.

Module Rectangle.
  Record t : Set := {
    top_left : Point;
    bottom_right : Point;
  }.
  
  Global Instance Get_top_left : Notation.Dot "top_left" := {
    Notation.dot '(Build_t x0 _) := x0;
  }.
  Global Instance Get_bottom_right : Notation.Dot "bottom_right" := {
    Notation.dot '(Build_t _ x1) := x1;
  }.
End Rectangle.
Definition Rectangle : Set := Rectangle.t.

Definition origin :=
  let return_type := Point in
  ltac:(function (
    {| Point.x := 0 (* 0.0 *); Point.y := 0 (* 0.0 *); |}
  : return_type)).

Definition boxed_origin :=
  let return_type := Box Point in
  ltac:(function (
    Box::["new"](| {| Point.x := 0 (* 0.0 *); Point.y := 0 (* 0.0 *); |} |)
  : return_type)).

Definition main :=
  let return_type := unit in
  ltac:(function (
    let point := origin(||) in
    let rectangle :=
      {|
        Rectangle.top_left := origin(||);
        Rectangle.bottom_right :=
          {| Point.x := 3 (* 3.0 *); Point.y := 4 (* 4.0 *).["neg"](||); |};
      |} in
    let boxed_rectangle :=
      Box::["new"](|
        {|
          Rectangle.top_left := origin(||);
          Rectangle.bottom_right :=
            {| Point.x := 3 (* 3.0 *); Point.y := 4 (* 4.0 *).["neg"](||); |};
        |}
      |) in
    let boxed_point := Box::["new"](| origin(||) |) in
    let box_in_a_box := Box::["new"](| boxed_origin(||) |) in
    let _ : unit :=
      let _ : unit :=
        _crate.io._print(|
          format_arguments::["new_v1"](|
            [ "Point occupies "; " bytes on the stack
" ],
            [ format_argument::["new_display"](| mem.size_of_val(| point |) |) ]
          |)
        |) in
      tt in
    let _ : unit :=
      let _ : unit :=
        _crate.io._print(|
          format_arguments::["new_v1"](|
            [ "Rectangle occupies "; " bytes on the stack
" ],
            [
              format_argument::["new_display"](| mem.size_of_val(| rectangle |)
              |)
            ]
          |)
        |) in
      tt in
    let _ : unit :=
      let _ : unit :=
        _crate.io._print(|
          format_arguments::["new_v1"](|
            [ "Boxed point occupies "; " bytes on the stack
" ],
            [
              format_argument::["new_display"](|
                mem.size_of_val(| boxed_point |)
              |)
            ]
          |)
        |) in
      tt in
    let _ : unit :=
      let _ : unit :=
        _crate.io._print(|
          format_arguments::["new_v1"](|
            [ "Boxed rectangle occupies "; " bytes on the stack
" ],
            [
              format_argument::["new_display"](|
                mem.size_of_val(| boxed_rectangle |)
              |)
            ]
          |)
        |) in
      tt in
    let _ : unit :=
      let _ : unit :=
        _crate.io._print(|
          format_arguments::["new_v1"](|
            [ "Boxed box occupies "; " bytes on the stack
" ],
            [
              format_argument::["new_display"](|
                mem.size_of_val(| box_in_a_box |)
              |)
            ]
          |)
        |) in
      tt in
    let unboxed_point := boxed_point.["deref"](||) in
    let _ : unit :=
      let _ : unit :=
        _crate.io._print(|
          format_arguments::["new_v1"](|
            [ "Unboxed point occupies "; " bytes on the stack
" ],
            [
              format_argument::["new_display"](|
                mem.size_of_val(| unboxed_point |)
              |)
            ]
          |)
        |) in
      tt in
    tt
  : return_type)).
