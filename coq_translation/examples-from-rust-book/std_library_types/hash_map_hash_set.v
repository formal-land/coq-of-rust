(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Import Root.std.prelude.rust_2015.

Module HashSet := std.collections.HashSet.
Definition HashSet := HashSet.t.

(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main (_ : unit) : unit :=
  let a :=
    (Slice::["into_vec"]
          (_crate.boxed.Box::["new"] [ 1; 2; 3 ])).["into_iter"].["collect"] in
  let b :=
    (Slice::["into_vec"]
          (_crate.boxed.Box::["new"] [ 2; 3; 4 ])).["into_iter"].["collect"] in
  if ((a.["insert"] 4).["not"] : bool) then
    _crate.panicking.panic "assertion failed: a.insert(4)"
  else
    tt ;;
  if ((a.["contains"] 4).["not"] : bool) then
    _crate.panicking.panic "assertion failed: a.contains(&4)"
  else
    tt ;;
  b.["insert"] 5 ;;
  _crate.io._print
    (format_arguments::["new_v1"]
      [ "A: "; "
" ]
      [ format_argument::["new_debug"] a ]) ;;
  tt ;;
  _crate.io._print
    (format_arguments::["new_v1"]
      [ "B: "; "
" ]
      [ format_argument::["new_debug"] b ]) ;;
  tt ;;
  _crate.io._print
    (format_arguments::["new_v1"]
      [ "Union: "; "
" ]
      [ format_argument::["new_debug"] (a.["union"] b).["collect"] ]) ;;
  tt ;;
  _crate.io._print
    (format_arguments::["new_v1"]
      [ "Difference: "; "
" ]
      [ format_argument::["new_debug"] (a.["difference"] b).["collect"] ]) ;;
  tt ;;
  _crate.io._print
    (format_arguments::["new_v1"]
      [ "Intersection: "; "
" ]
      [ format_argument::["new_debug"] (a.["intersection"] b).["collect"] ]) ;;
  tt ;;
  _crate.io._print
    (format_arguments::["new_v1"]
      [ "Symmetric Difference: "; "
" ]
      [
        format_argument::["new_debug"]
          (a.["symmetric_difference"] b).["collect"]
      ]) ;;
  tt ;;
  tt.
