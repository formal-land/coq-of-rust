(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Import Root.std.prelude.rust_2015.

Module checked.
  Module MathError.
    Inductive t : Set :=
    | DivisionByZero
    | NonPositiveLogarithm
    | NegativeSquareRoot.
  End MathError.
  Definition MathError := MathError.t.
  
  Module Impl__crate_fmt_Debug_for_MathError.
    Definition Self := MathError.
    
    Definition fmt (self : ref Self) (f : mut_ref _crate.fmt.Formatter) :=
      let return_type := _crate.fmt.Result in
      ltac:(function (
        _crate.fmt.Formatter::["write_str"](|
          f,
          match self with
          | MathError.DivisionByZero => "DivisionByZero"
          | MathError.NonPositiveLogarithm => "NonPositiveLogarithm"
          | MathError.NegativeSquareRoot => "NegativeSquareRoot"
          end
        |)
      : return_type)).
    
    Global Instance Method_fmt : Notation.Dot "fmt" := {
      Notation.dot := fmt;
    }.
    
    Global Instance I : _crate.fmt.Debug.Trait Self := {
      _crate.fmt.Debug.fmt := fmt;
    }.
  End Impl__crate_fmt_Debug_for_MathError.
  
  Definition MathResult : Set := Result f64 MathError.
  
  Definition div (x : f64) (y : f64) :=
    let return_type := MathResult in
    ltac:(function (
      if (y.["eq"](| 0 (* 0.0 *) |) : bool) then
        Err MathError.DivisionByZero
      else
        Ok x.["div"](| y |)
    : return_type)).
  
  Definition sqrt (x : f64) :=
    let return_type := MathResult in
    ltac:(function (
      if (x.["lt"](| 0 (* 0.0 *) |) : bool) then
        Err MathError.NegativeSquareRoot
      else
        Ok x.["sqrt"](||)
    : return_type)).
  
  Definition ln (x : f64) :=
    let return_type := MathResult in
    ltac:(function (
      if (x.["le"](| 0 (* 0.0 *) |) : bool) then
        Err MathError.NonPositiveLogarithm
      else
        Ok x.["ln"](||)
    : return_type)).
End checked.

Module MathError.
  Inductive t : Set :=
  | DivisionByZero
  | NonPositiveLogarithm
  | NegativeSquareRoot.
End MathError.
Definition MathError := MathError.t.

Module Impl__crate_fmt_Debug_for_MathError.
  Definition Self := MathError.
  
  Definition fmt (self : ref Self) (f : mut_ref _crate.fmt.Formatter) :=
    let return_type := _crate.fmt.Result in
    ltac:(function (
      _crate.fmt.Formatter::["write_str"](|
        f,
        match self with
        | MathError.DivisionByZero => "DivisionByZero"
        | MathError.NonPositiveLogarithm => "NonPositiveLogarithm"
        | MathError.NegativeSquareRoot => "NegativeSquareRoot"
        end
      |)
    : return_type)).
  
  Global Instance Method_fmt : Notation.Dot "fmt" := {
    Notation.dot := fmt;
  }.
  
  Global Instance I : _crate.fmt.Debug.Trait Self := {
    _crate.fmt.Debug.fmt := fmt;
  }.
End Impl__crate_fmt_Debug_for_MathError.

Definition MathResult : Set := Result f64 MathError.

Definition div (x : f64) (y : f64) :=
  let return_type := MathResult in
  ltac:(function (
    if (y.["eq"](| 0 (* 0.0 *) |) : bool) then
      Err MathError.DivisionByZero
    else
      Ok x.["div"](| y |)
  : return_type)).

Definition sqrt (x : f64) :=
  let return_type := MathResult in
  ltac:(function (
    if (x.["lt"](| 0 (* 0.0 *) |) : bool) then
      Err MathError.NegativeSquareRoot
    else
      Ok x.["sqrt"](||)
  : return_type)).

Definition ln (x : f64) :=
  let return_type := MathResult in
  ltac:(function (
    if (x.["le"](| 0 (* 0.0 *) |) : bool) then
      Err MathError.NonPositiveLogarithm
    else
      Ok x.["ln"](||)
  : return_type)).

Definition op (x : f64) (y : f64) :=
  let return_type := f64 in
  ltac:(function (
    match checked.div(| x, y |) with
    | Err why =>
      _crate.rt.panic_fmt(|
        format_arguments::["new_v1"](|
          [ "" ],
          [ format_argument::["new_debug"](| why |) ]
        |)
      |)
    | Ok ratio =>
      match checked.ln(| ratio |) with
      | Err why =>
        _crate.rt.panic_fmt(|
          format_arguments::["new_v1"](|
            [ "" ],
            [ format_argument::["new_debug"](| why |) ]
          |)
        |)
      | Ok ln =>
        match checked.sqrt(| ln |) with
        | Err why =>
          _crate.rt.panic_fmt(|
            format_arguments::["new_v1"](|
              [ "" ],
              [ format_argument::["new_debug"](| why |) ]
            |)
          |)
        | Ok sqrt => sqrt
        end
      end
    end
  : return_type)).

Definition main :=
  let return_type := unit in
  ltac:(function (
    let '_ :=
      let '_ :=
        _crate.io._print(|
          format_arguments::["new_v1"](|
            [ ""; "
" ],
            [
              format_argument::["new_display"](|
                op(| 1 (* 1.0 *), 10 (* 10.0 *) |)
              |)
            ]
          |)
        |) in
      tt in
    tt
  : return_type)).
