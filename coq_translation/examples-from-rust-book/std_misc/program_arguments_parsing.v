(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Import Root.std.prelude.rust_2015.

Module env := std.env.

Definition increase (number : i32) : unit :=
  _crate.io._print
    (format_arguments::["new_v1"]
      [ ""; "
" ]
      [ format_argument::["new_display"] (number.["add"] 1) ]) ;;
  tt ;;
  tt.

Definition decrease (number : i32) : unit :=
  _crate.io._print
    (format_arguments::["new_v1"]
      [ ""; "
" ]
      [ format_argument::["new_display"] (number.["sub"] 1) ]) ;;
  tt ;;
  tt.

Definition help (_ : unit) : unit :=
  _crate.io._print
    (format_arguments::["new_const"]
      [
        "usage:
match_args <string>
    Check whether given string is the answer.
match_args {increase|decrease} <integer>
    Increase or decrease given integer by one.
"
      ]) ;;
  tt ;;
  tt.

(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main (_ : unit) : unit :=
  let args := (env.args tt).["collect"] in
  match args.["len"] with
  | 1 =>
    _crate.io._print
      (format_arguments::["new_const"]
        [ "My name is 'match_args'. Try passing some arguments!
" ]) ;;
    tt ;;
    tt
  | 2 =>
    match args[1].["parse"] with
    | Ok 42 =>
      _crate.io._print
        (format_arguments::["new_const"] [ "This is the answer!
" ]) ;;
      tt
    | _ =>
      _crate.io._print
        (format_arguments::["new_const"] [ "This is not the answer.
" ]) ;;
      tt
    end
  | 3 =>
    let cmd := args[1] in
    let num := args[2] in
    let number :=
      match num.["parse"] with
      | Ok n => n
      | Err _ =>
        _crate.io._eprint
          (format_arguments::["new_const"]
            [ "error: second argument not an integer
" ]) ;;
        tt ;;
        help tt ;;
        Return tt ;;
        tt
      end in
    match cmd[RangeFull {|  |}] with
    | "increase" => increase number
    | "decrease" => decrease number
    | _ =>
      _crate.io._eprint
        (format_arguments::["new_const"] [ "error: invalid command
" ]) ;;
      tt ;;
      help tt ;;
      tt
    end
  | _ =>
    help tt ;;
    tt
  end.
