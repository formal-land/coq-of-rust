(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Import Root.std.prelude.rust_2015.

Module thread := std.thread.

Definition main :=
  let return_type := unit in
  ltac:(function (
    let data :=
      "86967897737416471853297327050364959
11861322575564723963297542624962850
70856234701860851907960690014725639
38397966707106094172783238747669219
52380795257888236525459303330302837
58495327135744041048897885734297812
69920216438980873548808413720956532
16278424637452589860345374828574668" in
    let children := _crate.vec.Vec::["new"](||) in
    let chunked_data := data.["split_whitespace"](||) in
    let _ : unit :=
      match LangItem(| chunked_data.["enumerate"](||) |) with
      | iter =>
        loop
          let _ : unit :=
            match LangItem(| iter |) with
            | None => M.Break
            | Some {| Some.0 := (i, data_segment); |} =>
              let _ : unit :=
                let _ : unit :=
                  _crate.io._print(|
                    format_arguments::["new_v1"](|
                      [ "data segment "; " is ""; ""
" ],
                      [
                        format_argument::["new_display"](| i |);
                        format_argument::["new_display"](| data_segment |)
                      ]
                    |)
                  |) in
                tt in
              let _ : unit :=
                children.["push"](|
                  thread.spawn(|
                    fun  =>
                      let result :=
                        data_segment.["chars"](||).["map"](|
                          fun c =>
                            c.["to_digit"](| 10 |).["expect"](|
                              "should be a digit"
                            |)
                        |).["sum"](||) in
                      let _ : unit :=
                        let _ : unit :=
                          _crate.io._print(|
                            format_arguments::["new_v1"](|
                              [ "processed segment "; ", result="; "
" ],
                              [
                                format_argument::["new_display"](| i |);
                                format_argument::["new_display"](| result |)
                              ]
                            |)
                          |) in
                        tt in
                      result
                  |)
                |) in
              tt
            end in
          tt
          from
          for
      end in
    let final_result :=
      children.["into_iter"](||).["map"](|
        fun c => c.["join"](||).["unwrap"](||)
      |).["sum"](||) in
    let _ : unit :=
      let _ : unit :=
        _crate.io._print(|
          format_arguments::["new_v1"](|
            [ "Final sum result: "; "
" ],
            [ format_argument::["new_display"](| final_result |) ]
          |)
        |) in
      tt in
    tt
  : return_type)).
