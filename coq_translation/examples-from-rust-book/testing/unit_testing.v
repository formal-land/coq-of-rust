(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Import Root.std.prelude.rust_2015.

Definition add (a : i32) (b : i32) : i32 := a.["add"] b.

(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition bad_add (a : i32) (b : i32) : i32 := a.["sub"] b.

Module tests.
  Import super.
  
  Definition test_add (_ : unit) : unit :=
    match (add 1 2, 3) with
    | (left_val, right_val) =>
      if ((left_val.["deref"].["eq"] right_val.["deref"]).["not"] : bool) then
        let kind := _crate.panicking.AssertKind.Eq in
        _crate.panicking.assert_failed
          kind
          left_val.["deref"]
          right_val.["deref"]
          _crate.option.Option.None ;;
        tt
      else
        tt
    end ;;
    tt.
  
  Definition test_bad_add (_ : unit) : unit :=
    match (bad_add 1 2, 3) with
    | (left_val, right_val) =>
      if ((left_val.["deref"].["eq"] right_val.["deref"]).["not"] : bool) then
        let kind := _crate.panicking.AssertKind.Eq in
        _crate.panicking.assert_failed
          kind
          left_val.["deref"]
          right_val.["deref"]
          _crate.option.Option.None ;;
        tt
      else
        tt
    end ;;
    tt.
End tests.

Import super.

Definition test_add (_ : unit) : unit :=
  match (add 1 2, 3) with
  | (left_val, right_val) =>
    if ((left_val.["deref"].["eq"] right_val.["deref"]).["not"] : bool) then
      let kind := _crate.panicking.AssertKind.Eq in
      _crate.panicking.assert_failed
        kind
        left_val.["deref"]
        right_val.["deref"]
        _crate.option.Option.None ;;
      tt
    else
      tt
  end ;;
  tt.

Definition test_bad_add (_ : unit) : unit :=
  match (bad_add 1 2, 3) with
  | (left_val, right_val) =>
    if ((left_val.["deref"].["eq"] right_val.["deref"]).["not"] : bool) then
      let kind := _crate.panicking.AssertKind.Eq in
      _crate.panicking.assert_failed
        kind
        left_val.["deref"]
        right_val.["deref"]
        _crate.option.Option.None ;;
      tt
    else
      tt
  end ;;
  tt.
