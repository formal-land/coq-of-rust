(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Import Root.std.prelude.rust_2015.

Module UsernameWidget.
  Class Trait (Self : Set) : Set := {
    get : (ref Self) -> (M String);
  }.
  
  Global Instance Method_get `(Trait) : Notation.Dot "get" := {
    Notation.dot := get;
  }.
End UsernameWidget.

Module AgeWidget.
  Class Trait (Self : Set) : Set := {
    get : (ref Self) -> (M u8);
  }.
  
  Global Instance Method_get `(Trait) : Notation.Dot "get" := {
    Notation.dot := get;
  }.
End AgeWidget.

Module Form.
  Record t : Set := {
    username : String;
    age : u8;
  }.
  
  Global Instance Get_username : Notation.Dot "username" := {
    Notation.dot '(Build_t x0 _) := x0;
  }.
  Global Instance Get_age : Notation.Dot "age" := {
    Notation.dot '(Build_t _ x1) := x1;
  }.
End Form.
Definition Form : Set := Form.t.

Module Impl_UsernameWidget_for_Form.
  Definition Self := Form.
  
  Definition get (self : ref Self) :=
    let return_type := String in
    ltac:(function (
      self.["username"].["clone"](||)
    : return_type)).
  
  Global Instance Method_get : Notation.Dot "get" := {
    Notation.dot := get;
  }.
  
  Global Instance I : UsernameWidget.Trait Self := {
    UsernameWidget.get := get;
  }.
End Impl_UsernameWidget_for_Form.

Module Impl_AgeWidget_for_Form.
  Definition Self := Form.
  
  Definition get (self : ref Self) :=
    let return_type := u8 in
    ltac:(function (
      self.["age"]
    : return_type)).
  
  Global Instance Method_get : Notation.Dot "get" := {
    Notation.dot := get;
  }.
  
  Global Instance I : AgeWidget.Trait Self := {
    AgeWidget.get := get;
  }.
End Impl_AgeWidget_for_Form.

Definition main :=
  let return_type := unit in
  ltac:(function (
    let form :=
      {| Form.username := "rustacean".["to_owned"](||); Form.age := 28; |} in
    let username := UsernameWidget.get(| form |) in
    let _ : unit :=
      match ("rustacean".["to_owned"](||), username) with
      | (left_val, right_val) =>
        if
          (left_val.["deref"](||).["eq"](| right_val.["deref"](||)
          |).["not"](||)
          : bool)
        then
          let kind := _crate.panicking.AssertKind.Eq in
          let _ : unit :=
            _crate.panicking.assert_failed(|
              kind,
              left_val.["deref"](||),
              right_val.["deref"](||),
              _crate.option.Option.None
            |) in
          tt
        else
          tt
      end in
    let age := AgeWidget.get(| form |) in
    let _ : unit :=
      match (28, age) with
      | (left_val, right_val) =>
        if
          (left_val.["deref"](||).["eq"](| right_val.["deref"](||)
          |).["not"](||)
          : bool)
        then
          let kind := _crate.panicking.AssertKind.Eq in
          let _ : unit :=
            _crate.panicking.assert_failed(|
              kind,
              left_val.["deref"](||),
              right_val.["deref"](||),
              _crate.option.Option.None
            |) in
          tt
        else
          tt
      end in
    tt
  : return_type)).
