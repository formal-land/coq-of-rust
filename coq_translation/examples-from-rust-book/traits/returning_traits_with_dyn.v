(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Import Root.std.prelude.rust_2015.

Module Sheep.
  Record t : Set := {
  }.
End Sheep.
Definition Sheep : Set := Sheep.t.

Module Cow.
  Record t : Set := {
  }.
End Cow.
Definition Cow : Set := Cow.t.

Module Animal.
  Class Trait (Self : Set) : Set := {
    noise : (ref Self) -> (M (ref str));
  }.
  
  Global Instance Method_noise `(Trait) : Notation.Dot "noise" := {
    Notation.dot := noise;
  }.
End Animal.

Module Impl_Animal_for_Sheep.
  Definition Self := Sheep.
  
  Definition noise (self : ref Self) :=
    let return_type := ref str in
    ltac:(function (
      "baaaaah!"
    : return_type)).
  
  Global Instance Method_noise : Notation.Dot "noise" := {
    Notation.dot := noise;
  }.
  
  Global Instance I : Animal.Trait Self := {
    Animal.noise := noise;
  }.
End Impl_Animal_for_Sheep.

Module Impl_Animal_for_Cow.
  Definition Self := Cow.
  
  Definition noise (self : ref Self) :=
    let return_type := ref str in
    ltac:(function (
      "moooooo!"
    : return_type)).
  
  Global Instance Method_noise : Notation.Dot "noise" := {
    Notation.dot := noise;
  }.
  
  Global Instance I : Animal.Trait Self := {
    Animal.noise := noise;
  }.
End Impl_Animal_for_Cow.

Definition random_animal (random_number : f64) :=
  let return_type := Box TraitObject in
  ltac:(function (
    if (random_number.["lt"](| 1 (* 0.5 *) |) : bool) then
      Box::["new"](| {|  |} |)
    else
      Box::["new"](| {|  |} |)
  : return_type)).

Definition main :=
  let return_type := unit in
  ltac:(function (
    let random_number := 0 (* 0.234 *) in
    let animal := random_animal(| random_number |) in
    let '_ :=
      let '_ :=
        _crate.io._print(|
          format_arguments::["new_v1"](|
            [ "You've randomly chosen an animal, and it says "; "
" ],
            [ format_argument::["new_display"](| animal.["noise"](||) |) ]
          |)
        |) in
      tt in
    tt
  : return_type)).
