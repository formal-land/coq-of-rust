(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Import Root.std.prelude.rust_2015.

Module fmt := std.fmt.

Module Circle.
  Record t : Set := {
    radius : i32;
  }.
  
  Global Instance Get_radius : Notation.Dot "radius" := {
    Notation.dot '(Build_t x0) := x0;
  }.
End Circle.
Definition Circle : Set := Circle.t.

Module Impl_fmt_Display_for_Circle.
  Definition Self := Circle.
  
  Definition fmt (self : ref Self) (f : mut_ref fmt.Formatter) : M fmt.Result :=
    let* α0 := format_argument::["new_display"] (deref self.["radius"]) in
    let* α1 :=
      format_arguments::["new_v1"]
        (deref [ "Circle of radius " ])
        (deref [ α0 ]) in
    f.["write_fmt"] α1.
  
  Global Instance Method_fmt : Notation.Dot "fmt" := {
    Notation.dot := fmt;
  }.
  
  Global Instance I : fmt.Display.Trait Self := {
    fmt.Display.fmt := fmt;
  }.
End Impl_fmt_Display_for_Circle.

(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main (_ : unit) : M unit :=
  let circle := {| Circle.radius := 6; |} in
  let* α0 := circle.["to_string"] in
  let* α1 := format_argument::["new_display"] (deref α0) in
  let* α2 := format_arguments::["new_v1"] (deref [ ""; "
" ]) (deref [ α1 ]) in
  let* _ := _crate.io._print α2 in
  let _ := tt in
  Pure tt.
