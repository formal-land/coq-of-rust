(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Import Root.std.prelude.rust_2015.

Module EvenNumber.
  Record t : Set := { _ : i32;}.
  
  Global Instance Get_0 : Notation.Dot 0 := {
    Notation.dot '(Build_t x0) := x0;
  }.
End EvenNumber.
Definition EvenNumber := EvenNumber.t.

Module Impl__crate_fmt_Debug_for_EvenNumber.
  Definition Self := EvenNumber.
  
  Definition fmt
      (self : ref Self)
      (f : mut_ref _crate.fmt.Formatter)
      : M _crate.fmt.Result :=
    _crate.fmt.Formatter::["debug_tuple_field1_finish"]
      f
      "EvenNumber"
      (addr_of (addr_of (self.[0]))).
  
  Global Instance Method_fmt : Notation.Dot "fmt" := {
    Notation.dot := fmt;
  }.
  
  Global Instance I : _crate.fmt.Debug.Trait Self := {
    _crate.fmt.Debug.fmt := fmt;
  }.
End Impl__crate_fmt_Debug_for_EvenNumber.

Module Impl__crate_marker_StructuralPartialEq_for_EvenNumber.
  Definition Self := EvenNumber.
  
  Global Instance I : _crate.marker.StructuralPartialEq.Trait Self :=
    _crate.marker.StructuralPartialEq.Build_Class _.
End Impl__crate_marker_StructuralPartialEq_for_EvenNumber.

Module Impl__crate_cmp_PartialEq_for_EvenNumber.
  Definition Self := EvenNumber.
  
  Definition eq (self : ref Self) (other : ref EvenNumber) : M bool :=
    (self.[0]).["eq"] (other.[0]).
  
  Global Instance Method_eq : Notation.Dot "eq" := {
    Notation.dot := eq;
  }.
  
  Global Instance I : _crate.cmp.PartialEq.Trait Self := {
    _crate.cmp.PartialEq.eq := eq;
  }.
End Impl__crate_cmp_PartialEq_for_EvenNumber.

Module Impl_TryFrom_for_EvenNumber.
  Definition Self := EvenNumber.
  
  Definition Error : Set := unit.
  
  Definition try_from (value : i32) : M (Result Self ImplSelf.Error) :=
    let* α0 := value.["rem"] 2 in
    let* α1 := α0.["eq"] 0 in
    if (α1 : bool) then
      Pure (Ok (EvenNumber.Build_t value))
    else
      Pure (Err tt).
  
  Global Instance AssociatedFunction_try_from :
    Notation.DoubleColon Self "try_from" := {
    Notation.double_colon := try_from;
  }.
  
  Global Instance I : TryFrom.Trait Self i32 := {
    TryFrom.try_from := try_from;
  }.
End Impl_TryFrom_for_EvenNumber.

(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main (_ : unit) : M unit :=
  let* _ :=
    let* α0 := EvenNumber::["try_from"] 8 in
    match (addr_of α0, addr_of (Ok (EvenNumber.Build_t 8))) with
    | (left_val, right_val) =>
      let* α0 := left_val.["deref"] in
      let* α1 := right_val.["deref"] in
      let* α2 := α0.["eq"] α1 in
      let* α3 := α2.["not"] in
      if (α3 : bool) then
        let kind := _crate.panicking.AssertKind.Eq in
        let* _ :=
          let* α0 := left_val.["deref"] in
          let* α1 := right_val.["deref"] in
          _crate.panicking.assert_failed
            kind
            (addr_of α0)
            (addr_of α1)
            _crate.option.Option.None in
        Pure tt
      else
        Pure tt
    end in
  let* _ :=
    let* α0 := EvenNumber::["try_from"] 5 in
    match (addr_of α0, addr_of (Err tt)) with
    | (left_val, right_val) =>
      let* α0 := left_val.["deref"] in
      let* α1 := right_val.["deref"] in
      let* α2 := α0.["eq"] α1 in
      let* α3 := α2.["not"] in
      if (α3 : bool) then
        let kind := _crate.panicking.AssertKind.Eq in
        let* _ :=
          let* α0 := left_val.["deref"] in
          let* α1 := right_val.["deref"] in
          _crate.panicking.assert_failed
            kind
            (addr_of α0)
            (addr_of α1)
            _crate.option.Option.None in
        Pure tt
      else
        Pure tt
    end in
  let* result := 8.["try_into"] in
  let* _ :=
    match (addr_of result, addr_of (Ok (EvenNumber.Build_t 8))) with
    | (left_val, right_val) =>
      let* α0 := left_val.["deref"] in
      let* α1 := right_val.["deref"] in
      let* α2 := α0.["eq"] α1 in
      let* α3 := α2.["not"] in
      if (α3 : bool) then
        let kind := _crate.panicking.AssertKind.Eq in
        let* _ :=
          let* α0 := left_val.["deref"] in
          let* α1 := right_val.["deref"] in
          _crate.panicking.assert_failed
            kind
            (addr_of α0)
            (addr_of α1)
            _crate.option.Option.None in
        Pure tt
      else
        Pure tt
    end in
  let* result := 5.["try_into"] in
  let* _ :=
    match (addr_of result, addr_of (Err tt)) with
    | (left_val, right_val) =>
      let* α0 := left_val.["deref"] in
      let* α1 := right_val.["deref"] in
      let* α2 := α0.["eq"] α1 in
      let* α3 := α2.["not"] in
      if (α3 : bool) then
        let kind := _crate.panicking.AssertKind.Eq in
        let* _ :=
          let* α0 := left_val.["deref"] in
          let* α1 := right_val.["deref"] in
          _crate.panicking.assert_failed
            kind
            (addr_of α0)
            (addr_of α1)
            _crate.option.Option.None in
        Pure tt
      else
        Pure tt
    end in
  Pure tt.
