(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Import Root.std.prelude.rust_2015.

Module WebEvent.
  Module Click.
    Record t : Set := {
      x : i64;
      y : i64;
    }.
  End Click.
  
  Inductive t : Set :=
  | PageLoad
  | PageUnload
  | KeyPress (_ : char)
  | Paste (_ : String)
  | Click (_ : Click.t).
End WebEvent.
Definition WebEvent := WebEvent.t.

Definition inspect (event : WebEvent) : M unit :=
  match event with
  | WebEvent.PageLoad =>
    let* _ :=
      let* α0 :=
        format_arguments::["new_const"]
          (addr_of
            [
              "page loaded, r" ++
                String.String "233" ("f" ++ String.String "233" "
")
            ]) in
      _crate.io._print α0 in
    Pure tt
  | WebEvent.PageUnload =>
    let* _ :=
      let* α0 :=
        format_arguments::["new_const"] (addr_of [ "page unloaded
" ]) in
      _crate.io._print α0 in
    Pure tt
  | WebEvent.KeyPress c =>
    let* _ :=
      let* α0 := format_argument::["new_display"] (addr_of c) in
      let* α1 :=
        format_arguments::["new_v1"]
          (addr_of [ "pressed '"; "'.
" ])
          (addr_of [ α0 ]) in
      _crate.io._print α1 in
    Pure tt
  | WebEvent.Paste s =>
    let* _ :=
      let* α0 := format_argument::["new_display"] (addr_of s) in
      let* α1 :=
        format_arguments::["new_v1"]
          (addr_of [ "pasted ""; "".
" ])
          (addr_of [ α0 ]) in
      _crate.io._print α1 in
    Pure tt
  | WebEvent.Click {| WebEvent.Click.x := x; WebEvent.Click.y := y; |} =>
    let* _ :=
      let* _ :=
        let* α0 := format_argument::["new_display"] (addr_of x) in
        let* α1 := format_argument::["new_display"] (addr_of y) in
        let* α2 :=
          format_arguments::["new_v1"]
            (addr_of [ "clicked at x="; ", y="; ".
" ])
            (addr_of [ α0; α1 ]) in
        _crate.io._print α2 in
      Pure tt in
    Pure tt
  end.

(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main (_ : unit) : M unit :=
  let pressed := WebEvent.KeyPress "x"%char in
  let* pasted :=
    let* α0 := "my text".["to_owned"] in
    Pure (WebEvent.Paste α0) in
  let click :=
    WebEvent.Click {| WebEvent.Click.x := 20; WebEvent.Click.y := 80; |} in
  let load := WebEvent.PageLoad in
  let unload := WebEvent.PageUnload in
  let* _ := inspect pressed in
  let* _ := inspect pasted in
  let* _ := inspect click in
  let* _ := inspect load in
  let* _ := inspect unload in
  Pure tt.
