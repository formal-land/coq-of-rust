(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module List.
  Inductive t : Set :=
  | Cons (_ : u32) (_ : alloc.boxed.Box enums_testcase_linked_list.List)
  | Nil.
End List.
Definition List := List.t.

Module Impl_enums_testcase_linked_list_List.
  Definition Self := enums_testcase_linked_list.List.
  
  Definition new
      `{H : State.Trait}
      : M (H := H) enums_testcase_linked_list.List :=
    Pure enums_testcase_linked_list.List.Nil.
  
  Global Instance AssociatedFunction_new `{H : State.Trait} :
    Notation.DoubleColon Self "new" := {
    Notation.double_colon := new;
  }.
  
  Definition prepend
      `{H : State.Trait}
      (self : Self)
      (elem : u32)
      : M (H := H) enums_testcase_linked_list.List :=
    let* α0 := alloc.boxed.Box::["new"] self in
    Pure (enums_testcase_linked_list.List.Cons elem α0).
  
  Global Instance Method_prepend `{H : State.Trait} :
    Notation.Dot "prepend" := {
    Notation.dot := prepend;
  }.
  
  Definition len `{H : State.Trait} (self : ref Self) : M (H := H) u32 :=
    let* α0 := self.["deref"] in
    match α0 with
    | enums_testcase_linked_list.List.Cons _ tail =>
      let* α0 := tail.["len"] in
      1.["add"] α0
    | enums_testcase_linked_list.List.Nil => Pure 0
    end.
  
  Global Instance Method_len `{H : State.Trait} : Notation.Dot "len" := {
    Notation.dot := len;
  }.
  
  Definition stringify
      `{H : State.Trait}
      (self : ref Self)
      : M (H := H) alloc.string.String :=
    let* α0 := self.["deref"] in
    match α0 with
    | enums_testcase_linked_list.List.Cons head tail =>
      let* res :=
        let* α0 := format_argument::["new_display"] (addr_of head) in
        let* α1 := tail.["stringify"] in
        let* α2 := format_argument::["new_display"] (addr_of α1) in
        let* α3 :=
          format_arguments::["new_v1"]
            (addr_of [ ""; ", " ])
            (addr_of [ α0; α2 ]) in
        alloc.fmt.format α3 in
      Pure res
    | enums_testcase_linked_list.List.Nil =>
      let* res :=
        let* α0 := format_arguments::["new_const"] (addr_of [ "Nil" ]) in
        alloc.fmt.format α0 in
      Pure res
    end.
  
  Global Instance Method_stringify `{H : State.Trait} :
    Notation.Dot "stringify" := {
    Notation.dot := stringify;
  }.
End Impl_enums_testcase_linked_list_List.

(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main `{H : State.Trait} : M (H := H) unit :=
  let* list := enums_testcase_linked_list.List::["new"] in
  let* _ :=
    let* α0 := list.["prepend"] 1 in
    assign list α0 in
  let* _ :=
    let* α0 := list.["prepend"] 2 in
    assign list α0 in
  let* _ :=
    let* α0 := list.["prepend"] 3 in
    assign list α0 in
  let* _ :=
    let* _ :=
      let* α0 := list.["len"] in
      let* α1 := format_argument::["new_display"] (addr_of α0) in
      let* α2 :=
        format_arguments::["new_v1"]
          (addr_of [ "linked list has length: "; "
" ])
          (addr_of [ α1 ]) in
      std.io.stdio._print α2 in
    Pure tt in
  let* _ :=
    let* _ :=
      let* α0 := list.["stringify"] in
      let* α1 := format_argument::["new_display"] (addr_of α0) in
      let* α2 :=
        format_arguments::["new_v1"] (addr_of [ ""; "
" ]) (addr_of [ α1 ]) in
      std.io.stdio._print α2 in
    Pure tt in
  Pure tt.
