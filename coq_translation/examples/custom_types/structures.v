(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Import Root.std.prelude.rust_2015.

Module Person.
  Record t : Set := {
    name : String;
    age : u8;
  }.
  
  Global Instance Get_name : Notation.Dot "name" := {
    Notation.dot '(Build_t x0 _) := x0;
  }.
  Global Instance Get_age : Notation.Dot "age" := {
    Notation.dot '(Build_t _ x1) := x1;
  }.
End Person.
Definition Person : Set := Person.t.

Module Impl__crate_fmt_Debug_for_Person.
  Definition Self := Person.
  
  Definition fmt
      (self : ref Self)
      (f : mut_ref _crate.fmt.Formatter)
      : M _crate.fmt.Result :=
    _crate.fmt.Formatter::["debug_struct_field2_finish"]
      f
      "Person"
      "name"
      (deref self.["name"])
      "age"
      (deref (deref self.["age"])).
  
  Global Instance Method_fmt : Notation.Dot "fmt" := {
    Notation.dot := fmt;
  }.
  
  Global Instance I : _crate.fmt.Debug.Trait Self := {
    _crate.fmt.Debug.fmt := fmt;
  }.
End Impl__crate_fmt_Debug_for_Person.

Module Unit.
  Inductive t : Set := Build.
End Unit.
Definition Unit := Unit.t.

Module Pair.
  Record t : Set := { _ : i32; _ : f32;}.
  
  Global Instance Get_0 : Notation.Dot 0 := {
    Notation.dot '(Build_t x0 _) := x0;
  }.
  Global Instance Get_1 : Notation.Dot 1 := {
    Notation.dot '(Build_t _ x1) := x1;
  }.
End Pair.
Definition Pair := Pair.t.

Module Point.
  Record t : Set := {
    x : f32;
    y : f32;
  }.
  
  Global Instance Get_x : Notation.Dot "x" := {
    Notation.dot '(Build_t x0 _) := x0;
  }.
  Global Instance Get_y : Notation.Dot "y" := {
    Notation.dot '(Build_t _ x1) := x1;
  }.
End Point.
Definition Point : Set := Point.t.

Module Rectangle.
  Record t : Set := {
    top_left : Point;
    bottom_right : Point;
  }.
  
  Global Instance Get_top_left : Notation.Dot "top_left" := {
    Notation.dot '(Build_t x0 _) := x0;
  }.
  Global Instance Get_bottom_right : Notation.Dot "bottom_right" := {
    Notation.dot '(Build_t _ x1) := x1;
  }.
End Rectangle.
Definition Rectangle : Set := Rectangle.t.

(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main (_ : unit) : M unit :=
  let* name := String::["from"] "Peter" in
  let age := 27 in
  let peter := {| Person.name := name; Person.age := age; |} in
  let* α0 := format_argument::["new_debug"] (deref peter) in
  let* α1 := format_arguments::["new_v1"] (deref [ ""; "
" ]) (deref [ α0 ]) in
  let* _ := _crate.io._print α1 in
  let _ := tt in
  let point := {| Point.x := 10 (* 10.3 *); Point.y := 0 (* 0.4 *); |} in
  let* α2 := format_argument::["new_display"] (deref point.["x"]) in
  let* α3 := format_argument::["new_display"] (deref point.["y"]) in
  let* α4 :=
    format_arguments::["new_v1"]
      (deref [ "point coordinates: ("; ", "; ")
" ])
      (deref [ α2; α3 ]) in
  let* _ := _crate.io._print α4 in
  let _ := tt in
  let bottom_right := {| Point.x := 5 (* 5.2 *); |} with point in
  let* α5 := format_argument::["new_display"] (deref bottom_right.["x"]) in
  let* α6 := format_argument::["new_display"] (deref bottom_right.["y"]) in
  let* α7 :=
    format_arguments::["new_v1"]
      (deref [ "second point: ("; ", "; ")
" ])
      (deref [ α5; α6 ]) in
  let* _ := _crate.io._print α7 in
  let _ := tt in
  let '{| Point.x := left_edge; Point.y := top_edge; |} := point in
  let _rectangle :=
    {|
      Rectangle.top_left := {| Point.x := left_edge; Point.y := top_edge; |};
      Rectangle.bottom_right := bottom_right;
    |} in
  let _unit := Unit.Build in
  let pair := Pair.Build_t 1 0 (* 0.1 *) in
  let* α8 := format_argument::["new_debug"] (deref (pair.[0])) in
  let* α9 := format_argument::["new_debug"] (deref (pair.[1])) in
  let* α10 :=
    format_arguments::["new_v1"]
      (deref [ "pair contains "; " and "; "
" ])
      (deref [ α8; α9 ]) in
  let* _ := _crate.io._print α10 in
  let _ := tt in
  let 'Pair.Build_t integer decimal := pair in
  let* α11 := format_argument::["new_debug"] (deref integer) in
  let* α12 := format_argument::["new_debug"] (deref decimal) in
  let* α13 :=
    format_arguments::["new_v1"]
      (deref [ "pair contains "; " and "; "
" ])
      (deref [ α11; α12 ]) in
  let* _ := _crate.io._print α13 in
  let _ := tt in
  Pure tt.
