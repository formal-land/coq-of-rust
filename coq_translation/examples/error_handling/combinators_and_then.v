(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Import Root.std.prelude.rust_2015.

Module Food.
  Inductive t : Set :=
  | CordonBleu
  | Steak
  | Sushi.
End Food.
Definition Food := Food.t.

Module Impl__crate_fmt_Debug_for_Food.
  Definition Self := Food.
  
  Definition fmt
      (self : ref Self)
      (f : mut_ref _crate.fmt.Formatter)
      : M _crate.fmt.Result :=
    let* α0 :=
      match self with
      | Food.CordonBleu => Pure "CordonBleu"
      | Food.Steak => Pure "Steak"
      | Food.Sushi => Pure "Sushi"
      end in
    _crate.fmt.Formatter::["write_str"] f α0.
  
  Global Instance Method_fmt : Notation.Dot "fmt" := {
    Notation.dot := fmt;
  }.
  
  Global Instance I : _crate.fmt.Debug.Trait Self := {
    _crate.fmt.Debug.fmt := fmt;
  }.
End Impl__crate_fmt_Debug_for_Food.

Module Day.
  Inductive t : Set :=
  | Monday
  | Tuesday
  | Wednesday.
End Day.
Definition Day := Day.t.

Module Impl__crate_fmt_Debug_for_Day.
  Definition Self := Day.
  
  Definition fmt
      (self : ref Self)
      (f : mut_ref _crate.fmt.Formatter)
      : M _crate.fmt.Result :=
    let* α0 :=
      match self with
      | Day.Monday => Pure "Monday"
      | Day.Tuesday => Pure "Tuesday"
      | Day.Wednesday => Pure "Wednesday"
      end in
    _crate.fmt.Formatter::["write_str"] f α0.
  
  Global Instance Method_fmt : Notation.Dot "fmt" := {
    Notation.dot := fmt;
  }.
  
  Global Instance I : _crate.fmt.Debug.Trait Self := {
    _crate.fmt.Debug.fmt := fmt;
  }.
End Impl__crate_fmt_Debug_for_Day.

Definition have_ingredients (food : Food) : M (Option Food) :=
  match food with
  | Food.Sushi => Pure None
  | _ => Pure (Some food)
  end.

Definition have_recipe (food : Food) : M (Option Food) :=
  match food with
  | Food.CordonBleu => Pure None
  | _ => Pure (Some food)
  end.

Definition cookable_v1 (food : Food) : M (Option Food) :=
  let* α0 := have_recipe food in
  match α0 with
  | None => Pure None
  | Some food =>
    let* α0 := have_ingredients food in
    match α0 with
    | None => Pure None
    | Some food => Pure (Some food)
    end
  end.

Definition cookable_v2 (food : Food) : M (Option Food) :=
  let* α0 := have_recipe food in
  α0.["and_then"] have_ingredients.

Definition eat (food : Food) (day : Day) : M unit :=
  let* α0 := cookable_v2 food in
  match α0 with
  | Some food =>
    let* _ :=
      let* α0 := format_argument::["new_debug"] (addr_of day) in
      let* α1 := format_argument::["new_debug"] (addr_of food) in
      let* α2 :=
        format_arguments::["new_v1"]
          (addr_of [ "Yay! On "; " we get to eat "; ".
" ])
          (addr_of [ α0; α1 ]) in
      _crate.io._print α2 in
    Pure tt
  | None =>
    let* _ :=
      let* α0 := format_argument::["new_debug"] (addr_of day) in
      let* α1 :=
        format_arguments::["new_v1"]
          (addr_of [ "Oh no. We don't get to eat on "; "?
" ])
          (addr_of [ α0 ]) in
      _crate.io._print α1 in
    Pure tt
  end.

(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main (_ : unit) : M unit :=
  let '(cordon_bleu, steak, sushi) :=
    (Food.CordonBleu, Food.Steak, Food.Sushi) in
  let* _ := eat cordon_bleu Day.Monday in
  let* _ := eat steak Day.Tuesday in
  let* _ := eat sushi Day.Wednesday in
  Pure tt.
