(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module Food.
  Inductive t : Set :=
  | CordonBleu
  | Steak
  | Sushi.
End Food.
Definition Food := Food.t.

Module Impl_core_fmt_Debug_for_combinators_and_then_Food.
  Definition Self := combinators_and_then.Food.
  
  Definition fmt
      `{H : State.Trait}
      (self : ref Self)
      (f : mut_ref core.fmt.Formatter)
      : M (H := H) core.fmt.Result :=
    let* α0 :=
      match self with
      | combinators_and_then.Food.CordonBleu => Pure "CordonBleu"
      | combinators_and_then.Food.Steak => Pure "Steak"
      | combinators_and_then.Food.Sushi => Pure "Sushi"
      end in
    core.fmt.Formatter::["write_str"] f α0.
  
  Global Instance Method_fmt `{H : State.Trait} : Notation.Dot "fmt" := {
    Notation.dot := fmt;
  }.
  
  Global Instance I : core.fmt.Debug.Trait Self := {
    core.fmt.Debug.fmt `{H : State.Trait} := fmt;
  }.
End Impl_core_fmt_Debug_for_combinators_and_then_Food.

Module Day.
  Inductive t : Set :=
  | Monday
  | Tuesday
  | Wednesday.
End Day.
Definition Day := Day.t.

Module Impl_core_fmt_Debug_for_combinators_and_then_Day.
  Definition Self := combinators_and_then.Day.
  
  Definition fmt
      `{H : State.Trait}
      (self : ref Self)
      (f : mut_ref core.fmt.Formatter)
      : M (H := H) core.fmt.Result :=
    let* α0 :=
      match self with
      | combinators_and_then.Day.Monday => Pure "Monday"
      | combinators_and_then.Day.Tuesday => Pure "Tuesday"
      | combinators_and_then.Day.Wednesday => Pure "Wednesday"
      end in
    core.fmt.Formatter::["write_str"] f α0.
  
  Global Instance Method_fmt `{H : State.Trait} : Notation.Dot "fmt" := {
    Notation.dot := fmt;
  }.
  
  Global Instance I : core.fmt.Debug.Trait Self := {
    core.fmt.Debug.fmt `{H : State.Trait} := fmt;
  }.
End Impl_core_fmt_Debug_for_combinators_and_then_Day.

Definition have_ingredients
    `{H : State.Trait}
    (food : combinators_and_then.Food)
    : M (H := H) (core.option.Option combinators_and_then.Food) :=
  match food with
  | combinators_and_then.Food.Sushi => Pure core.option.Option.None
  | _ => Pure (core.option.Option.Some food)
  end.

Definition have_recipe
    `{H : State.Trait}
    (food : combinators_and_then.Food)
    : M (H := H) (core.option.Option combinators_and_then.Food) :=
  match food with
  | combinators_and_then.Food.CordonBleu => Pure core.option.Option.None
  | _ => Pure (core.option.Option.Some food)
  end.

Definition cookable_v1
    `{H : State.Trait}
    (food : combinators_and_then.Food)
    : M (H := H) (core.option.Option combinators_and_then.Food) :=
  let* α0 := combinators_and_then.have_recipe food in
  match α0 with
  | core.option.Option.None => Pure core.option.Option.None
  | core.option.Option.Some food =>
    let* α0 := combinators_and_then.have_ingredients food in
    match α0 with
    | core.option.Option.None => Pure core.option.Option.None
    | core.option.Option.Some food => Pure (core.option.Option.Some food)
    end
  end.

Definition cookable_v2
    `{H : State.Trait}
    (food : combinators_and_then.Food)
    : M (H := H) (core.option.Option combinators_and_then.Food) :=
  let* α0 := combinators_and_then.have_recipe food in
  α0.["and_then"] combinators_and_then.have_ingredients.

Definition eat
    `{H : State.Trait}
    (food : combinators_and_then.Food)
    (day : combinators_and_then.Day)
    : M (H := H) unit :=
  let* α0 := combinators_and_then.cookable_v2 food in
  match α0 with
  | core.option.Option.Some food =>
    let* _ :=
      let* α0 := format_argument::["new_debug"] (addr_of day) in
      let* α1 := format_argument::["new_debug"] (addr_of food) in
      let* α2 :=
        format_arguments::["new_v1"]
          (addr_of [ "Yay! On "; " we get to eat "; ".
" ])
          (addr_of [ α0; α1 ]) in
      std.io.stdio._print α2 in
    Pure tt
  | core.option.Option.None =>
    let* _ :=
      let* α0 := format_argument::["new_debug"] (addr_of day) in
      let* α1 :=
        format_arguments::["new_v1"]
          (addr_of [ "Oh no. We don't get to eat on "; "?
" ])
          (addr_of [ α0 ]) in
      std.io.stdio._print α1 in
    Pure tt
  end.

(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main `{H : State.Trait} : M (H := H) unit :=
  let '(cordon_bleu, steak, sushi) :=
    (combinators_and_then.Food.CordonBleu,
      combinators_and_then.Food.Steak,
      combinators_and_then.Food.Sushi) in
  let* _ :=
    combinators_and_then.eat cordon_bleu combinators_and_then.Day.Monday in
  let* _ := combinators_and_then.eat steak combinators_and_then.Day.Tuesday in
  let* _ := combinators_and_then.eat sushi combinators_and_then.Day.Wednesday in
  Pure tt.
