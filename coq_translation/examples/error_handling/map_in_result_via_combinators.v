(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Definition multiply
    (first_number_str : ref str)
    (second_number_str : ref str)
    : M (core.result.Result i32 core.num.error.ParseIntError) :=
  let* α0 := first_number_str.["parse"] in
  α0.["and_then"]
    (fun first_number =>
      let* α0 := second_number_str.["parse"] in
      α0.["map"] (fun second_number => first_number.["mul"] second_number)).

Definition print
    (result : core.result.Result i32 core.num.error.ParseIntError)
    : M unit :=
  match result with
  | core.result.Result.Ok n =>
    let* _ :=
      let* α0 := format_argument::["new_display"] (addr_of n) in
      let* α1 :=
        format_arguments::["new_v1"]
          (addr_of [ "n is "; "
" ])
          (addr_of [ α0 ]) in
      std.io.stdio._print α1 in
    Pure tt
  | core.result.Result.Err e =>
    let* _ :=
      let* α0 := format_argument::["new_display"] (addr_of e) in
      let* α1 :=
        format_arguments::["new_v1"]
          (addr_of [ "Error: "; "
" ])
          (addr_of [ α0 ]) in
      std.io.stdio._print α1 in
    Pure tt
  end.

(* #[allow(dead_code)] - function was ignored by the compiler *)
<<<<<<< HEAD
<<<<<<< HEAD
Definition main : M unit :=
=======
Definition main  : M unit :=
>>>>>>> 6ee776e (update snapshot)
=======
Definition main : M unit :=
>>>>>>> b389ac0 (ci: update the snapshots)
  let* twenty := map_in_result_via_combinators.multiply "10" "2" in
  let* _ := map_in_result_via_combinators.print twenty in
  let* tt := map_in_result_via_combinators.multiply "t" "2" in
  let* _ := map_in_result_via_combinators.print tt in
  Pure tt.
