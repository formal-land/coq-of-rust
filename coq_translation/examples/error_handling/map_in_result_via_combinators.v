(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Import Root.std.prelude.rust_2015.

Module ParseIntError := std.num.ParseIntError.
Definition ParseIntError := ParseIntError.t.

Definition multiply
    (first_number_str : ref str)
    (second_number_str : ref str)
    : M (Result i32 ParseIntError) :=
  let* α0 := first_number_str.["parse"] in
  α0.["and_then"]
    (fun first_number =>
      let* α0 := second_number_str.["parse"] in
      α0.["map"] (fun second_number => first_number.["mul"] second_number)).

Definition print (result : Result i32 ParseIntError) : M unit :=
  match result with
  | Ok n =>
    let* α0 := format_argument::["new_display"] (deref n) in
    let* α1 :=
      format_arguments::["new_v1"] (deref [ "n is "; "
" ]) (deref [ α0 ]) in
    let* _ := _crate.io._print α1 in
    Pure tt
  | Err e =>
    let* α0 := format_argument::["new_display"] (deref e) in
    let* α1 :=
      format_arguments::["new_v1"] (deref [ "Error: "; "
" ]) (deref [ α0 ]) in
    let* _ := _crate.io._print α1 in
    Pure tt
  end.

(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main (_ : unit) : M unit :=
  let* twenty := multiply "10" "2" in
  let* _ := print twenty in
  let* tt := multiply "t" "2" in
  let* _ := print tt in
  Pure tt.
