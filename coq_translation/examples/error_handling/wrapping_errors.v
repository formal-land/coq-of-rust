(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Import Root.std.prelude.rust_2015.

Module error := std.error.

Module fmt := std.fmt.

Module ParseIntError := std.num.ParseIntError.
Definition ParseIntError := ParseIntError.t.

Definition Result : Set := std.result.Result T DoubleError.

Module DoubleError.
  Inductive t : Set :=
  | EmptyVec
  | Parse (_ : ParseIntError).
End DoubleError.
Definition DoubleError := DoubleError.t.

Module Impl__crate_fmt_Debug_for_DoubleError.
  Definition Self := DoubleError.
  
  Definition fmt
      (self : ref Self)
      (f : mut_ref _crate.fmt.Formatter)
      : M _crate.fmt.Result :=
    match self with
    | DoubleError.EmptyVec => _crate.fmt.Formatter::["write_str"] f "EmptyVec"
    | DoubleError.Parse __self_0 =>
      _crate.fmt.Formatter::["debug_tuple_field1_finish"]
        f
        "Parse"
        (addr_of __self_0)
    end.
  
  Global Instance Method_fmt : Notation.Dot "fmt" := {
    Notation.dot := fmt;
  }.
  
  Global Instance I : _crate.fmt.Debug.Trait Self := {
    _crate.fmt.Debug.fmt := fmt;
  }.
End Impl__crate_fmt_Debug_for_DoubleError.

Module Impl_fmt_Display_for_DoubleError.
  Definition Self := DoubleError.
  
  Definition fmt (self : ref Self) (f : mut_ref fmt.Formatter) : M fmt.Result :=
    let* α0 := self.["deref"] in
    match α0 with
    | DoubleError.EmptyVec =>
      let* α0 :=
        format_arguments::["new_const"]
          (addr_of [ "please use a vector with at least one element" ]) in
      f.["write_fmt"] α0
    | DoubleError.Parse  =>
      let* α0 :=
        format_arguments::["new_const"]
          (addr_of [ "the provided string could not be parsed as int" ]) in
      f.["write_fmt"] α0
    end.
  
  Global Instance Method_fmt : Notation.Dot "fmt" := {
    Notation.dot := fmt;
  }.
  
  Global Instance I : fmt.Display.Trait Self := {
    fmt.Display.fmt := fmt;
  }.
End Impl_fmt_Display_for_DoubleError.

Module Impl_error_Error_for_DoubleError.
  Definition Self := DoubleError.
  
  Definition source (self : ref Self) : M (Option (ref TraitObject)) :=
    let* α0 := self.["deref"] in
    match α0 with
    | DoubleError.EmptyVec => Pure None
    | DoubleError.Parse e => Pure (Some e)
    end.
  
  Global Instance Method_source : Notation.Dot "source" := {
    Notation.dot := source;
  }.
  
  Global Instance I : error.Error.Trait Self := {
  }.
End Impl_error_Error_for_DoubleError.

Module Impl_From_for_DoubleError.
  Definition Self := DoubleError.
  
  Definition from (err : ParseIntError) : M DoubleError :=
    Pure (DoubleError.Parse err).
  
  Global Instance AssociatedFunction_from :
    Notation.DoubleColon Self "from" := {
    Notation.double_colon := from;
  }.
  
  Global Instance I : From.Trait Self ParseIntError := {
    From.from := from;
  }.
End Impl_From_for_DoubleError.

Definition double_first (vec : Vec (ref str)) : M (Result i32) :=
  let* first :=
    let* α0 := vec.["first"] in
    let* α1 := α0.["ok_or"] DoubleError.EmptyVec in
    let* α2 := LangItem α1 in
    match α2 with
    | Break {| Break.0 := residual; |} =>
      let* α0 := LangItem residual in
      Return α0
    | Continue {| Continue.0 := val; |} => Pure val
    end in
  let* parsed :=
    let* α0 := first.["parse"] in
    let* α1 := LangItem α0 in
    match α1 with
    | Break {| Break.0 := residual; |} =>
      let* α0 := LangItem residual in
      Return α0
    | Continue {| Continue.0 := val; |} => Pure val
    end in
  let* α0 := 2.["mul"] parsed in
  Pure (Ok α0).

Definition print (result : Result i32) : M unit :=
  match result with
  | Ok n =>
    let* _ :=
      let* α0 := format_argument::["new_display"] (addr_of n) in
      let* α1 :=
        format_arguments::["new_v1"]
          (addr_of [ "The first doubled is "; "
" ])
          (addr_of [ α0 ]) in
      _crate.io._print α1 in
    Pure tt
  | Err e =>
    let* _ :=
      let* _ :=
        let* α0 := format_argument::["new_display"] (addr_of e) in
        let* α1 :=
          format_arguments::["new_v1"]
            (addr_of [ "Error: "; "
" ])
            (addr_of [ α0 ]) in
        _crate.io._print α1 in
      Pure tt in
    let* α0 := e.["source"] in
    let* α1 := let_if Some source := α0 in
    if (α1 : bool) then
      let* _ :=
        let* _ :=
          let* α0 := format_argument::["new_display"] (addr_of source) in
          let* α1 :=
            format_arguments::["new_v1"]
              (addr_of [ "  Caused by: "; "
" ])
              (addr_of [ α0 ]) in
          _crate.io._print α1 in
        Pure tt in
      Pure tt
    else
      Pure tt
  end.

(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main (_ : unit) : M unit :=
  let* numbers :=
    let* α0 := _crate.boxed.Box::["new"] [ "42"; "93"; "18" ] in
    Slice::["into_vec"] α0 in
  let* empty := _crate.vec.Vec::["new"] tt in
  let* strings :=
    let* α0 := _crate.boxed.Box::["new"] [ "tofu"; "93"; "18" ] in
    Slice::["into_vec"] α0 in
  let* _ :=
    let* α0 := double_first numbers in
    print α0 in
  let* _ :=
    let* α0 := double_first empty in
    print α0 in
  let* _ :=
    let* α0 := double_first strings in
    print α0 in
  Pure tt.
