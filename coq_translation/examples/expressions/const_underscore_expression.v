(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module Foo.
  Record t : Set := {
    test : bool;
  }.
  
  Global Instance Get_test : Notation.Dot "test" := {
    Notation.dot '(Build_t x0) := x0;
  }.
End Foo.
Definition Foo : Set := Foo.t.

Module Bar.
  Record t : Set := {
    test : alloc.string.String;
  }.
  
  Global Instance Get_test : Notation.Dot "test" := {
    Notation.dot '(Build_t x0) := x0;
  }.
End Bar.
Definition Bar : Set := Bar.t.

Module BarTrait.
  Class Trait (Self : Set) : Set := {
    show `{H : State.Trait} : Self -> (M (H := H) alloc.string.String);
  }.
  
  Global Instance Method_show `{H : State.Trait} `(Trait)
    : Notation.Dot "show" := {
    Notation.dot := show;
  }.
End BarTrait.

Module
  Impl_const_underscore_expression_BarTrait_for_const_underscore_expression_Bar.
  Definition Self := const_underscore_expression.Bar.
  
<<<<<<< HEAD
<<<<<<< HEAD
  Definition show
      `{H : State.Trait}
      (self : Self)
      : M (H := H) alloc.string.String :=
    Pure self.["test"].
=======
  Parameter show : Self -> M alloc.string.String.
>>>>>>> 39940eb (Update examples with --axiomatize (will be reverted soon))
=======
  Definition show (self : Self) : M alloc.string.String := Pure self.["test"].
>>>>>>> 0b98590 (Rerun the conversion without the --axiomatize flag)
  
  Global Instance Method_show `{H : State.Trait} : Notation.Dot "show" := {
    Notation.dot := show;
  }.
  
  Global Instance I : const_underscore_expression.BarTrait.Trait Self := {
    const_underscore_expression.BarTrait.show `{H : State.Trait} := show;
  }.
End
  Impl_const_underscore_expression_BarTrait_for_const_underscore_expression_Bar.
