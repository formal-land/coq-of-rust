(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Import Root.std.prelude.rust_2015.

(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main (_ : unit) : M unit :=
  let n := 5 in
  let* α0 := n.["lt"] 0 in
  let* _ :=
    if (α0 : bool) then
      let* α0 := format_argument::["new_display"] (deref n) in
      let* α1 :=
        format_arguments::["new_v1"]
          (deref [ ""; " is negative" ])
          (deref [ α0 ]) in
      let* _ := _crate.io._print α1 in
      let _ := tt in
      Pure tt
    else
      let* α0 := n.["gt"] 0 in
      if (α0 : bool) then
        let* α0 := format_argument::["new_display"] (deref n) in
        let* α1 :=
          format_arguments::["new_v1"]
            (deref [ ""; " is positive" ])
            (deref [ α0 ]) in
        let* _ := _crate.io._print α1 in
        let _ := tt in
        Pure tt
      else
        let* α0 := format_argument::["new_display"] (deref n) in
        let* α1 :=
          format_arguments::["new_v1"]
            (deref [ ""; " is zero" ])
            (deref [ α0 ]) in
        let* _ := _crate.io._print α1 in
        let _ := tt in
        Pure tt in
  let* α1 := n.["lt"] 10 in
  let* α2 := 10.["neg"] in
  let* α3 := n.["gt"] α2 in
  let* α4 := α1.["andb"] α3 in
  let* big_n :=
    if (α4 : bool) then
      let* α0 :=
        format_arguments::["new_const"]
          (deref [ ", and is a small number, increase ten-fold
" ]) in
      let* _ := _crate.io._print α0 in
      let _ := tt in
      10.["mul"] n
    else
      let* α0 :=
        format_arguments::["new_const"]
          (deref [ ", and is a big number, halve the number
" ]) in
      let* _ := _crate.io._print α0 in
      let _ := tt in
      n.["div"] 2 in
  let* α5 := format_argument::["new_display"] (deref n) in
  let* α6 := format_argument::["new_display"] (deref big_n) in
  let* α7 :=
    format_arguments::["new_v1"]
      (deref [ ""; " -> "; "
" ])
      (deref [ α5; α6 ]) in
  let* _ := _crate.io._print α7 in
  let _ := tt in
  Pure tt.
