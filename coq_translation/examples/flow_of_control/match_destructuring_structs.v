(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Import Root.std.prelude.rust_2015.

Module Foo.
  Record t : Set := {
    x : u32 * u32;
    y : u32;
  }.
  
  Global Instance Get_x : Notation.Dot "x" := {
    Notation.dot '(Build_t x0 _) := x0;
  }.
  Global Instance Get_y : Notation.Dot "y" := {
    Notation.dot '(Build_t _ x1) := x1;
  }.
End Foo.
Definition Foo : Set := Foo.t.

(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main (_ : unit) : unit :=
  let foo := {| Foo.x := (1, 2); Foo.y := 3; |} in
  match foo with
  | {| Foo.x := (1, b); Foo.y := y; |} =>
    _crate.io._print
      (format_arguments::["new_v1"]
        [ "First of x is 1, b = "; ",  y = "; " 
" ]
        [ format_argument::["new_display"] b; format_argument::["new_display"] y
        ]) ;;
    tt
  | {| Foo.y := 2; Foo.x := i; |} =>
    _crate.io._print
      (format_arguments::["new_v1"]
        [ "y is 2, i = "; "
" ]
        [ format_argument::["new_debug"] i ]) ;;
    tt
  | {| Foo.y := y; |} =>
    _crate.io._print
      (format_arguments::["new_v1"]
        [ "y = "; ", we don't care about x
" ]
        [ format_argument::["new_display"] y ]) ;;
    tt
  end.
