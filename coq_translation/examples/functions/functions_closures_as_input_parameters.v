(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Import Root.std.prelude.rust_2015.

Definition apply {F : Set} `{FnOnce.Trait unit F} (f : F) : unit :=
  f tt ;;
  tt.

Definition apply_to_3 {F : Set} `{Fn.Trait (i32) F} (f : F) : i32 := f 3.

(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main (_ : unit) : unit :=
  let greeting := "hello" in
  let farewell := "goodbye".["to_owned"] in
  let diary :=
    fun  =>
      _crate.io._print
        (format_arguments::["new_v1"]
          [ "I said "; ".
" ]
          [ format_argument::["new_display"] greeting ]) ;;
      tt ;;
      farewell.["push_str"] "!!!" ;;
      _crate.io._print
        (format_arguments::["new_v1"]
          [ "Then I screamed "; ".
" ]
          [ format_argument::["new_display"] farewell ]) ;;
      tt ;;
      _crate.io._print
        (format_arguments::["new_const"] [ "Now I can sleep. zzzzz
" ]) ;;
      tt ;;
      mem.drop farewell ;;
      tt in
  apply diary ;;
  let double := fun x => 2.["mul"] x in
  _crate.io._print
    (format_arguments::["new_v1"]
      [ "3 doubled: "; "
" ]
      [ format_argument::["new_display"] (apply_to_3 double) ]) ;;
  tt ;;
  tt.

Module mem := std.mem.
