(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

<<<<<<< HEAD
<<<<<<< HEAD
Definition create_fn : M OpaqueDef :=
=======
Definition create_fn  : M OpaqueDef :=
>>>>>>> 6ee776e (update snapshot)
=======
Definition create_fn : M OpaqueDef :=
>>>>>>> b389ac0 (ci: update the snapshots)
  let* text := "Fn".["to_owned"] in
  Pure
    (fun  =>
      let* _ :=
        let* α0 := format_argument::["new_display"] (addr_of text) in
        let* α1 :=
          format_arguments::["new_v1"]
            (addr_of [ "This is a: "; "
" ])
            (addr_of [ α0 ]) in
        std.io.stdio._print α1 in
      Pure tt).

Error OpaqueTy.

<<<<<<< HEAD
<<<<<<< HEAD
Definition create_fnmut : M OpaqueDef :=
=======
Definition create_fnmut  : M OpaqueDef :=
>>>>>>> 6ee776e (update snapshot)
=======
Definition create_fnmut : M OpaqueDef :=
>>>>>>> b389ac0 (ci: update the snapshots)
  let* text := "FnMut".["to_owned"] in
  Pure
    (fun  =>
      let* _ :=
        let* α0 := format_argument::["new_display"] (addr_of text) in
        let* α1 :=
          format_arguments::["new_v1"]
            (addr_of [ "This is a: "; "
" ])
            (addr_of [ α0 ]) in
        std.io.stdio._print α1 in
      Pure tt).

Error OpaqueTy.

<<<<<<< HEAD
<<<<<<< HEAD
Definition create_fnonce : M OpaqueDef :=
=======
Definition create_fnonce  : M OpaqueDef :=
>>>>>>> 6ee776e (update snapshot)
=======
Definition create_fnonce : M OpaqueDef :=
>>>>>>> b389ac0 (ci: update the snapshots)
  let* text := "FnOnce".["to_owned"] in
  Pure
    (fun  =>
      let* _ :=
        let* α0 := format_argument::["new_display"] (addr_of text) in
        let* α1 :=
          format_arguments::["new_v1"]
            (addr_of [ "This is a: "; "
" ])
            (addr_of [ α0 ]) in
        std.io.stdio._print α1 in
      Pure tt).

Error OpaqueTy.

(* #[allow(dead_code)] - function was ignored by the compiler *)
<<<<<<< HEAD
<<<<<<< HEAD
Definition main : M unit :=
  let* fn_plain := functions_closures_as_output_parameters.create_fn in
  let* fn_mut := functions_closures_as_output_parameters.create_fnmut in
  let* fn_once := functions_closures_as_output_parameters.create_fnonce in
  let* _ := fn_plain in
  let* _ := fn_mut in
  let* _ := fn_once in
=======
Definition main  : M unit :=
<<<<<<< HEAD
=======
Definition main : M unit :=
>>>>>>> b389ac0 (ci: update the snapshots)
  let* fn_plain := functions_closures_as_output_parameters.create_fn tt in
  let* fn_mut := functions_closures_as_output_parameters.create_fnmut tt in
  let* fn_once := functions_closures_as_output_parameters.create_fnonce tt in
  let* _ := fn_plain tt in
  let* _ := fn_mut tt in
  let* _ := fn_once tt in
>>>>>>> 6ee776e (update snapshot)
=======
  let* fn_plain := functions_closures_as_output_parameters.create_fn  in
  let* fn_mut := functions_closures_as_output_parameters.create_fnmut  in
  let* fn_once := functions_closures_as_output_parameters.create_fnonce  in
  let* _ := fn_plain  in
  let* _ := fn_mut  in
  let* _ := fn_once  in
>>>>>>> 1abfb9d (Eliminate redundant tt & update snapshot)
  Pure tt.
