(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module HasArea.
  Class Trait (Self : Set) : Set := {
    area : (ref Self) -> (M f64);
  }.
  
  Global Instance Method_area `(Trait) : Notation.Dot "area" := {
    Notation.dot := area;
  }.
End HasArea.

Module Impl_generics_bounds_HasArea_for_generics_bounds_Rectangle.
  Definition Self := generics_bounds.Rectangle.
  
  Definition area (self : ref Self) : M f64 :=
    self.["length"].["mul"] self.["height"].
  
  Global Instance Method_area : Notation.Dot "area" := {
    Notation.dot := area;
  }.
  
  Global Instance I : generics_bounds.HasArea.Trait Self := {
    generics_bounds.HasArea.area := area;
  }.
End Impl_generics_bounds_HasArea_for_generics_bounds_Rectangle.

Module Rectangle.
  Record t : Set := {
    length : f64;
    height : f64;
  }.
  
  Global Instance Get_length : Notation.Dot "length" := {
    Notation.dot '(Build_t x0 _) := x0;
  }.
  Global Instance Get_height : Notation.Dot "height" := {
    Notation.dot '(Build_t _ x1) := x1;
  }.
End Rectangle.
Definition Rectangle : Set := Rectangle.t.

Module Impl_core_fmt_Debug_for_generics_bounds_Rectangle.
  Definition Self := generics_bounds.Rectangle.
  
  Definition fmt
      (self : ref Self)
      (f : mut_ref core.fmt.Formatter)
      : M core.fmt.Result :=
    core.fmt.Formatter::["debug_struct_field2_finish"]
      f
      "Rectangle"
      "length"
      (addr_of self.["length"])
      "height"
      (addr_of (addr_of self.["height"])).
  
  Global Instance Method_fmt : Notation.Dot "fmt" := {
    Notation.dot := fmt;
  }.
  
  Global Instance I : core.fmt.Debug.Trait Self := {
    core.fmt.Debug.fmt := fmt;
  }.
End Impl_core_fmt_Debug_for_generics_bounds_Rectangle.

(* #[allow(dead_code)] - struct was ignored by the compiler *)
Module Triangle.
  Record t : Set := {
    length : f64;
    height : f64;
  }.
  
  Global Instance Get_length : Notation.Dot "length" := {
    Notation.dot '(Build_t x0 _) := x0;
  }.
  Global Instance Get_height : Notation.Dot "height" := {
    Notation.dot '(Build_t _ x1) := x1;
  }.
End Triangle.
Definition Triangle : Set := Triangle.t.

Definition print_debug
    {T : Set}
    `{core.fmt.Debug.Trait T}
    (t : ref T)
    : M unit :=
  let* _ :=
    let* _ :=
      let* α0 := format_argument::["new_debug"] (addr_of t) in
      let* α1 :=
        format_arguments::["new_v1"] (addr_of [ ""; "
" ]) (addr_of [ α0 ]) in
      std.io.stdio._print α1 in
    Pure tt in
  Pure tt.

Definition area
    {T : Set}
    `{generics_bounds.HasArea.Trait T}
    (t : ref T)
    : M f64 :=
  t.["area"].

(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main : M unit :=
  let rectangle :=
    {|
      generics_bounds.Rectangle.length := 3 (* 3.0 *);
      generics_bounds.Rectangle.height := 4 (* 4.0 *);
    |} in
  let _triangle :=
    {|
      generics_bounds.Triangle.length := 3 (* 3.0 *);
      generics_bounds.Triangle.height := 4 (* 4.0 *);
    |} in
  let* _ := generics_bounds.print_debug (addr_of rectangle) in
  let* _ :=
    let* _ :=
      let* α0 := rectangle.["area"] in
      let* α1 := format_argument::["new_display"] (addr_of α0) in
      let* α2 :=
        format_arguments::["new_v1"]
          (addr_of [ "Area: "; "
" ])
          (addr_of [ α1 ]) in
      std.io.stdio._print α2 in
    Pure tt in
  Pure tt.
