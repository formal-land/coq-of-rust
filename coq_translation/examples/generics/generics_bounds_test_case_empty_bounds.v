(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Import Root.std.prelude.rust_2015.

Module Cardinal.
  Inductive t : Set := Build.
End Cardinal.
Definition Cardinal := Cardinal.t.

Module BlueJay.
  Inductive t : Set := Build.
End BlueJay.
Definition BlueJay := BlueJay.t.

Module Turkey.
  Inductive t : Set := Build.
End Turkey.
Definition Turkey := Turkey.t.

Module Red.
  Unset Primitive Projections.
  Class Trait (Self : Set) : Set := {
  }.
  Global Set Primitive Projections.
End Red.

Module Blue.
  Unset Primitive Projections.
  Class Trait (Self : Set) : Set := {
  }.
  Global Set Primitive Projections.
End Blue.

Module Impl_Red_for_Cardinal.
  Definition Self := Cardinal.
  
  Global Instance I : Red.Trait Self := Red.Build_Class _.
End Impl_Red_for_Cardinal.

Module Impl_Blue_for_BlueJay.
  Definition Self := BlueJay.
  
  Global Instance I : Blue.Trait Self := Blue.Build_Class _.
End Impl_Blue_for_BlueJay.

Definition red {T : Set} `{Red.Trait T} (arg : ref T) : M (ref str) :=
  Pure "red".

Definition blue {T : Set} `{Blue.Trait T} (arg : ref T) : M (ref str) :=
  Pure "blue".

(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main (_ : unit) : M unit :=
  let cardinal := Cardinal.Build in
  let blue_jay := BlueJay.Build in
  let _turkey := Turkey.Build in
  let* α0 := red (deref cardinal) in
  let* α1 := format_argument::["new_display"] (deref α0) in
  let* α2 :=
    format_arguments::["new_v1"]
      (deref [ "A cardinal is "; "
" ])
      (deref [ α1 ]) in
  let* _ := _crate.io._print α2 in
  let _ := tt in
  let* α3 := blue (deref blue_jay) in
  let* α4 := format_argument::["new_display"] (deref α3) in
  let* α5 :=
    format_arguments::["new_v1"]
      (deref [ "A blue jay is "; "
" ])
      (deref [ α4 ]) in
  let* _ := _crate.io._print α5 in
  let _ := tt in
  Pure tt.
