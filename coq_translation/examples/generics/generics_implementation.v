(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Import Root.std.prelude.rust_2015.

Module Val.
  Record t : Set := {
    val : f64;
  }.
  
  Global Instance Get_val : Notation.Dot "val" := {
    Notation.dot '(Build_t x0) := x0;
  }.
End Val.
Definition Val : Set := Val.t.

Module GenVal.
  Record t : Set := {
    gen_val : T;
  }.
  
  Global Instance Get_gen_val : Notation.Dot "gen_val" := {
    Notation.dot '(Build_t x0) := x0;
  }.
End GenVal.
Definition GenVal : Set := GenVal.t.

Module ImplVal.
  Definition Self := Val.
  
  Definition value (self : ref Self) : M (ref f64) := Pure deref self.["val"].
  
  Global Instance Method_value : Notation.Dot "value" := {
    Notation.dot := value;
  }.
End ImplVal.

Module ImplGenVal T.
  Definition Self := GenVal T.
  
  Definition value (self : ref Self) : M (ref T) := Pure deref self.["gen_val"].
  
  Global Instance Method_value : Notation.Dot "value" := {
    Notation.dot := value;
  }.
End ImplGenVal T.

(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main (_ : unit) : M unit :=
  let x := {| Val.val := 3 (* 3.0 *); |} in
  let y := {| GenVal.gen_val := 3; |} in
  let* α0 := x.["value"] in
  let* α1 := format_argument::["new_display"] (deref α0) in
  let* α2 := y.["value"] in
  let* α3 := format_argument::["new_display"] (deref α2) in
  let* α4 :=
    format_arguments::["new_v1"] (deref [ ""; ", "; "
" ]) (deref [ α1; α3 ]) in
  let* _ := _crate.io._print α4 in
  let _ := tt in
  Pure tt.
