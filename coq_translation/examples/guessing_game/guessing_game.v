(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Import Root.std.prelude.rust_2015.

Module io := std.io.

Module Ordering := std.cmp.Ordering.
Definition Ordering := Ordering.t.

Module Rng := rand.Rng.

(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main (_ : unit) : M unit :=
  let* α0 := format_arguments::["new_const"] (deref [ "Guess the number!
" ]) in
  let* _ := _crate.io._print α0 in
  let _ := tt in
  let* α1 := rand.thread_rng tt in
  let* α2 := LangItem 1 100 in
  let* secret_number := α1.["gen_range"] α2 in
  loop
    let* α0 :=
      format_arguments::["new_const"] (deref [ "Please input your guess.
" ]) in
    let* _ := _crate.io._print α0 in
    let _ := tt in
    let* guess := String::["new"] tt in
    let* α1 := io.stdin tt in
    let* α2 := α1.["read_line"] (deref guess) in
    let* _ := α2.["expect"] "Failed to read line" in
    let* α3 := guess.["trim"] in
    let* α4 := α3.["parse"] in
    let* guess :=
      match α4 with
      | Ok num => Pure num
      | Err _ => Pure Continue
      end in
    let* α5 := format_argument::["new_display"] (deref guess) in
    let* α6 :=
      format_arguments::["new_v1"]
        (deref [ "You guessed: "; "
" ])
        (deref [ α5 ]) in
    let* _ := _crate.io._print α6 in
    let _ := tt in
    let* α7 := guess.["cmp"] (deref secret_number) in
    match α7 with
    | Ordering.Less =>
      let* α0 := format_arguments::["new_const"] (deref [ "Too small!
" ]) in
      let* _ := _crate.io._print α0 in
      Pure tt
    | Ordering.Greater =>
      let* α0 := format_arguments::["new_const"] (deref [ "Too big!
" ]) in
      let* _ := _crate.io._print α0 in
      Pure tt
    | Ordering.Equal =>
      let* α0 := format_arguments::["new_const"] (deref [ "You win!
" ]) in
      let* _ := _crate.io._print α0 in
      let _ := tt in
      let _ := Break in
      Pure tt
    end
    from
    loop.
