(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Import std.prelude.rust_2021.

Module flipper.
  Module Impl_Root_ink_env_ContractEnv_for_Flipper.
    Definition Self := Flipper.
    
    Definition Env : Set := Root.ink.env.DefaultEnvironment.
    
    Global Instance I : Root.ink.env.ContractEnv.Trait Self := {
    }.
  End Impl_Root_ink_env_ContractEnv_for_Flipper.
  
  Definition Environment : Set := Root.ink.env.ContractEnv.Env.
  
  Definition AccountId : Set := Root.ink.env.Environment.AccountId.
  
  Definition Balance : Set := Root.ink.env.Environment.Balance.
  
  Definition Hash : Set := Root.ink.env.Environment.Hash.
  
  Definition Timestamp : Set := Root.ink.env.Environment.Timestamp.
  
  Definition BlockNumber : Set := Root.ink.env.Environment.BlockNumber.
  
  Definition ChainExtension : Set := Root.ink.env.Environment.ChainExtension.
  
  Definition MAX_EVENT_TOPICS : usize :=
    run (Root.ink.env.Environment.MAX_EVENT_TOPICS).
  
  Definition _ : unit := run (tt).
  
  Module Flipper.
    Record t : Set := {
      value : Root.ink.storage.traits.AutoStorableHint.Type;
    }.
    
    Global Instance Get_value : Notation.Dot "value" := {
      Notation.dot '(Build_t x0) := x0;
    }.
  End Flipper.
  Definition Flipper : Set := Flipper.t.
  
  Definition _ : unit := run (tt).
  
  Definition _ : unit := run (tt).
  
  Definition _ : unit := run (tt).
  
  Definition _ : unit := run (tt).
  
  Definition _ : unit := run (tt).
  
  Definition _ : unit := run (tt).
  
  Definition _ : unit := run (tt).
  
  Definition _ : unit := run (tt).
  
  Module Impl_Root_ink_reflect_DispatchableConstructorInfo_for_Flipper.
    Definition Self := Flipper.
    
    Definition Input : Set := bool.
    
    Definition Output : Set := Self.
    
    Definition Storage : Set := Flipper.
    
    Definition Error : Set := Root.ink.reflect.ConstructorOutput.Error.
    
    Definition IS_RESULT := Root.ink.reflect.ConstructorOutput.IS_RESULT.
    
    Global Instance AssociatedFunction_IS_RESULT :
      Notation.DoubleColon Self "IS_RESULT" := {
      Notation.double_colon := IS_RESULT;
    }.
    
    Definition
      CALLABLE := fun __ink_binding_0 => Flipper::["new"] __ink_binding_0.
    
    Global Instance AssociatedFunction_CALLABLE :
      Notation.DoubleColon Self "CALLABLE" := {
      Notation.double_colon := CALLABLE;
    }.
    
    Definition PAYABLE := false.
    
    Global Instance AssociatedFunction_PAYABLE :
      Notation.DoubleColon Self "PAYABLE" := {
      Notation.double_colon := PAYABLE;
    }.
    
    Definition SELECTOR := [ 155; 174; 157; 94 ].
    
    Global Instance AssociatedFunction_SELECTOR :
      Notation.DoubleColon Self "SELECTOR" := {
      Notation.double_colon := SELECTOR;
    }.
    
    Definition LABEL := "new".
    
    Global Instance AssociatedFunction_LABEL :
      Notation.DoubleColon Self "LABEL" := {
      Notation.double_colon := LABEL;
    }.
    
    Global Instance I
        :
        Root.ink.reflect.DispatchableConstructorInfo.Trait
        Self :=
      {
      Root.ink.reflect.DispatchableConstructorInfo.IS_RESULT := IS_RESULT;
      Root.ink.reflect.DispatchableConstructorInfo.CALLABLE := CALLABLE;
      Root.ink.reflect.DispatchableConstructorInfo.PAYABLE := PAYABLE;
      Root.ink.reflect.DispatchableConstructorInfo.SELECTOR := SELECTOR;
      Root.ink.reflect.DispatchableConstructorInfo.LABEL := LABEL;
    }.
  End Impl_Root_ink_reflect_DispatchableConstructorInfo_for_Flipper.
  
  Module Impl_Root_ink_reflect_DispatchableConstructorInfo_for_Flipper.
    Definition Self := Flipper.
    
    Definition Input : Set := unit.
    
    Definition Output : Set := Self.
    
    Definition Storage : Set := Flipper.
    
    Definition Error : Set := Root.ink.reflect.ConstructorOutput.Error.
    
    Definition IS_RESULT := Root.ink.reflect.ConstructorOutput.IS_RESULT.
    
    Global Instance AssociatedFunction_IS_RESULT :
      Notation.DoubleColon Self "IS_RESULT" := {
      Notation.double_colon := IS_RESULT;
    }.
    
    Definition CALLABLE := fun _ => Flipper::["new_default"] tt.
    
    Global Instance AssociatedFunction_CALLABLE :
      Notation.DoubleColon Self "CALLABLE" := {
      Notation.double_colon := CALLABLE;
    }.
    
    Definition PAYABLE := false.
    
    Global Instance AssociatedFunction_PAYABLE :
      Notation.DoubleColon Self "PAYABLE" := {
      Notation.double_colon := PAYABLE;
    }.
    
    Definition SELECTOR := [ 97; 239; 126; 62 ].
    
    Global Instance AssociatedFunction_SELECTOR :
      Notation.DoubleColon Self "SELECTOR" := {
      Notation.double_colon := SELECTOR;
    }.
    
    Definition LABEL := "new_default".
    
    Global Instance AssociatedFunction_LABEL :
      Notation.DoubleColon Self "LABEL" := {
      Notation.double_colon := LABEL;
    }.
    
    Global Instance I
        :
        Root.ink.reflect.DispatchableConstructorInfo.Trait
        Self :=
      {
      Root.ink.reflect.DispatchableConstructorInfo.IS_RESULT := IS_RESULT;
      Root.ink.reflect.DispatchableConstructorInfo.CALLABLE := CALLABLE;
      Root.ink.reflect.DispatchableConstructorInfo.PAYABLE := PAYABLE;
      Root.ink.reflect.DispatchableConstructorInfo.SELECTOR := SELECTOR;
      Root.ink.reflect.DispatchableConstructorInfo.LABEL := LABEL;
    }.
  End Impl_Root_ink_reflect_DispatchableConstructorInfo_for_Flipper.
  
  Module Impl_Root_ink_reflect_DispatchableMessageInfo_for_Flipper.
    Definition Self := Flipper.
    
    Definition Input : Set := unit.
    
    Definition Output : Set := unit.
    
    Definition Storage : Set := Flipper.
    
    Definition CALLABLE := fun storage _ => Flipper::["flip"] storage.
    
    Global Instance AssociatedFunction_CALLABLE :
      Notation.DoubleColon Self "CALLABLE" := {
      Notation.double_colon := CALLABLE;
    }.
    
    Definition SELECTOR := [ 99; 58; 165; 81 ].
    
    Global Instance AssociatedFunction_SELECTOR :
      Notation.DoubleColon Self "SELECTOR" := {
      Notation.double_colon := SELECTOR;
    }.
    
    Definition PAYABLE := false.
    
    Global Instance AssociatedFunction_PAYABLE :
      Notation.DoubleColon Self "PAYABLE" := {
      Notation.double_colon := PAYABLE;
    }.
    
    Definition MUTATES := true.
    
    Global Instance AssociatedFunction_MUTATES :
      Notation.DoubleColon Self "MUTATES" := {
      Notation.double_colon := MUTATES;
    }.
    
    Definition LABEL := "flip".
    
    Global Instance AssociatedFunction_LABEL :
      Notation.DoubleColon Self "LABEL" := {
      Notation.double_colon := LABEL;
    }.
    
    Global Instance I : Root.ink.reflect.DispatchableMessageInfo.Trait Self := {
      Root.ink.reflect.DispatchableMessageInfo.CALLABLE := CALLABLE;
      Root.ink.reflect.DispatchableMessageInfo.MUTATES := MUTATES;
      Root.ink.reflect.DispatchableMessageInfo.PAYABLE := PAYABLE;
      Root.ink.reflect.DispatchableMessageInfo.SELECTOR := SELECTOR;
      Root.ink.reflect.DispatchableMessageInfo.LABEL := LABEL;
    }.
  End Impl_Root_ink_reflect_DispatchableMessageInfo_for_Flipper.
  
  Module Impl_Root_ink_reflect_DispatchableMessageInfo_for_Flipper.
    Definition Self := Flipper.
    
    Definition Input : Set := unit.
    
    Definition Output : Set := bool.
    
    Definition Storage : Set := Flipper.
    
    Definition CALLABLE := fun storage _ => Flipper::["get"] storage.
    
    Global Instance AssociatedFunction_CALLABLE :
      Notation.DoubleColon Self "CALLABLE" := {
      Notation.double_colon := CALLABLE;
    }.
    
    Definition SELECTOR := [ 47; 134; 91; 217 ].
    
    Global Instance AssociatedFunction_SELECTOR :
      Notation.DoubleColon Self "SELECTOR" := {
      Notation.double_colon := SELECTOR;
    }.
    
    Definition PAYABLE := false.
    
    Global Instance AssociatedFunction_PAYABLE :
      Notation.DoubleColon Self "PAYABLE" := {
      Notation.double_colon := PAYABLE;
    }.
    
    Definition MUTATES := false.
    
    Global Instance AssociatedFunction_MUTATES :
      Notation.DoubleColon Self "MUTATES" := {
      Notation.double_colon := MUTATES;
    }.
    
    Definition LABEL := "get".
    
    Global Instance AssociatedFunction_LABEL :
      Notation.DoubleColon Self "LABEL" := {
      Notation.double_colon := LABEL;
    }.
    
    Global Instance I : Root.ink.reflect.DispatchableMessageInfo.Trait Self := {
      Root.ink.reflect.DispatchableMessageInfo.CALLABLE := CALLABLE;
      Root.ink.reflect.DispatchableMessageInfo.MUTATES := MUTATES;
      Root.ink.reflect.DispatchableMessageInfo.PAYABLE := PAYABLE;
      Root.ink.reflect.DispatchableMessageInfo.SELECTOR := SELECTOR;
      Root.ink.reflect.DispatchableMessageInfo.LABEL := LABEL;
    }.
  End Impl_Root_ink_reflect_DispatchableMessageInfo_for_Flipper.
  
  Definition _ : unit := run (tt).
  
  Definition _ : unit := run (tt).
  
  Definition _ : unit := run (tt).
  
  Definition _ : unit := run (tt).
  
  Module FlipperRef.
    Record t : Set := {
      inner : Root.ink.codegen.ContractCallBuilder.Type;
    }.
    
    Global Instance Get_inner : Notation.Dot "inner" := {
      Notation.dot '(Build_t x0) := x0;
    }.
  End FlipperRef.
  Definition FlipperRef : Set := FlipperRef.t.
  
  Module Impl__crate_fmt_Debug_for_FlipperRef.
    Definition Self := FlipperRef.
    
    Definition fmt
        (self : ref Self)
        (f : mut_ref _crate.fmt.Formatter)
        : _crate.fmt.Result :=
      _crate.fmt.Formatter::["debug_struct_field1_finish"]
        f
        "FlipperRef"
        "inner"
        (addr_of (addr_of self.["inner"])).
    
    Global Instance Method_fmt : Notation.Dot "fmt" := {
      Notation.dot := fmt;
    }.
    
    Global Instance I : _crate.fmt.Debug.Trait Self := {
      _crate.fmt.Debug.fmt := fmt;
    }.
  End Impl__crate_fmt_Debug_for_FlipperRef.
  
  Definition _ : unit := run (tt).
  
  Definition _ : unit := run (tt).
  
  Module Impl__crate_hash_Hash_for_FlipperRef.
    Definition Self := FlipperRef.
    
    Definition hash (self : ref Self) (state : mut_ref __H) : unit :=
      _crate.hash.Hash.hash (addr_of self.["inner"]) state.
    
    Global Instance Method_hash : Notation.Dot "hash" := {
      Notation.dot := hash;
    }.
    
    Global Instance I : _crate.hash.Hash.Trait Self := {
      _crate.hash.Hash.hash := hash;
    }.
  End Impl__crate_hash_Hash_for_FlipperRef.
  
  Module Impl__crate_marker_StructuralPartialEq_for_FlipperRef.
    Definition Self := FlipperRef.
    
    Global Instance I : _crate.marker.StructuralPartialEq.Trait Self :=
      _crate.marker.StructuralPartialEq.Build_Class _.
  End Impl__crate_marker_StructuralPartialEq_for_FlipperRef.
  
  Module Impl__crate_cmp_PartialEq_for_FlipperRef.
    Definition Self := FlipperRef.
    
    Definition eq (self : ref Self) (other : ref FlipperRef) : bool :=
      self.["inner"].["eq"] other.["inner"].
    
    Global Instance Method_eq : Notation.Dot "eq" := {
      Notation.dot := eq;
    }.
    
    Global Instance I : _crate.cmp.PartialEq.Trait Self := {
      _crate.cmp.PartialEq.eq := eq;
    }.
  End Impl__crate_cmp_PartialEq_for_FlipperRef.
  
  Module Impl__crate_marker_StructuralEq_for_FlipperRef.
    Definition Self := FlipperRef.
    
    Global Instance I : _crate.marker.StructuralEq.Trait Self :=
      _crate.marker.StructuralEq.Build_Class _.
  End Impl__crate_marker_StructuralEq_for_FlipperRef.
  
  Module Impl__crate_cmp_Eq_for_FlipperRef.
    Definition Self := FlipperRef.
    
    Definition assert_receiver_is_total_eq (self : ref Self) : unit :=
      let _ := tt in
      tt.
    
    Global Instance Method_assert_receiver_is_total_eq :
      Notation.Dot "assert_receiver_is_total_eq" := {
      Notation.dot := assert_receiver_is_total_eq;
    }.
    
    Global Instance I : _crate.cmp.Eq.Trait Self := {
    }.
  End Impl__crate_cmp_Eq_for_FlipperRef.
  
  Module Impl__crate_clone_Clone_for_FlipperRef.
    Definition Self := FlipperRef.
    
    Definition clone (self : ref Self) : FlipperRef :=
      {| FlipperRef.inner := _crate.clone.Clone.clone (addr_of self.["inner"]);
      |}.
    
    Global Instance Method_clone : Notation.Dot "clone" := {
      Notation.dot := clone;
    }.
    
    Global Instance I : _crate.clone.Clone.Trait Self := {
      _crate.clone.Clone.clone := clone;
    }.
  End Impl__crate_clone_Clone_for_FlipperRef.
  
  Definition _ : unit := run (tt).
  
  Definition _ : unit := run (tt).
  
  Definition _ : unit := run (tt).
  
  Module ImplFlipperRef.
    Definition Self := FlipperRef.
    
    Definition new
        (__ink_binding_0 : bool)
        :
          Root.ink.env.call.CreateBuilder
            Environment
            Self
            (Root.ink.env.call.utils.Unset Hash)
            (Root.ink.env.call.utils.Unset u64)
            (Root.ink.env.call.utils.Unset Balance)
            (Root.ink.env.call.utils.Set
              (Root.ink.env.call.ExecutionInput
                (Root.ink.env.call.utils.ArgumentList
                  (Root.ink.env.call.utils.Argument bool)
                  Root.ink.env.call.utils.EmptyArgumentList)))
            (Root.ink.env.call.utils.Unset Root.ink.env.call.state.Salt)
            (Root.ink.env.call.utils.Set
              (Root.ink.env.call.utils.ReturnType Self)) :=
      ((Root.ink.env.call.build_create tt).["exec_input"]
          ((Root.ink.env.call.ExecutionInput::["new"]
              (Root.ink.env.call.Selector::["new"]
                [ 155; 174; 157; 94 ])).["push_arg"]
            __ink_binding_0)).["returns"].
    
    Global Instance AssociatedFunction_new :
      Notation.DoubleColon Self "new" := {
      Notation.double_colon := new;
    }.
    
    Definition new_default
        (_ : unit)
        :
          Root.ink.env.call.CreateBuilder
            Environment
            Self
            (Root.ink.env.call.utils.Unset Hash)
            (Root.ink.env.call.utils.Unset u64)
            (Root.ink.env.call.utils.Unset Balance)
            (Root.ink.env.call.utils.Set
              (Root.ink.env.call.ExecutionInput
                Root.ink.env.call.utils.EmptyArgumentList))
            (Root.ink.env.call.utils.Unset Root.ink.env.call.state.Salt)
            (Root.ink.env.call.utils.Set
              (Root.ink.env.call.utils.ReturnType Self)) :=
      ((Root.ink.env.call.build_create tt).["exec_input"]
          (Root.ink.env.call.ExecutionInput::["new"]
            (Root.ink.env.call.Selector::["new"]
              [ 97; 239; 126; 62 ]))).["returns"].
    
    Global Instance AssociatedFunction_new_default :
      Notation.DoubleColon Self "new_default" := {
      Notation.double_colon := new_default;
    }.
    
    Definition flip (self : mut_ref Self) : unit :=
      self.["try_flip"].["unwrap_or_else"]
        (fun error =>
          _crate.panicking.panic_fmt
            (format_arguments::["new_v1"]
              (addr_of [ "encountered error while calling Flipper::flip: " ])
              (addr_of [ format_argument::["new_debug"] (addr_of error) ]))).
    
    Global Instance Method_flip : Notation.Dot "flip" := {
      Notation.dot := flip;
    }.
    
    Definition try_flip (self : mut_ref Self) : Root.ink.MessageResult unit :=
      (Root.ink.codegen.TraitCallBuilder.call_mut
              self).["flip"].["try_invoke"].["unwrap_or_else"]
        (fun error =>
          _crate.panicking.panic_fmt
            (format_arguments::["new_v1"]
              (addr_of [ "encountered error while calling Flipper::flip: " ])
              (addr_of [ format_argument::["new_debug"] (addr_of error) ]))).
    
    Global Instance Method_try_flip : Notation.Dot "try_flip" := {
      Notation.dot := try_flip;
    }.
    
    Definition get (self : ref Self) : bool :=
      self.["try_get"].["unwrap_or_else"]
        (fun error =>
          _crate.panicking.panic_fmt
            (format_arguments::["new_v1"]
              (addr_of [ "encountered error while calling Flipper::get: " ])
              (addr_of [ format_argument::["new_debug"] (addr_of error) ]))).
    
    Global Instance Method_get : Notation.Dot "get" := {
      Notation.dot := get;
    }.
    
    Definition try_get (self : ref Self) : Root.ink.MessageResult bool :=
      (Root.ink.codegen.TraitCallBuilder.call
              self).["get"].["try_invoke"].["unwrap_or_else"]
        (fun error =>
          _crate.panicking.panic_fmt
            (format_arguments::["new_v1"]
              (addr_of [ "encountered error while calling Flipper::get: " ])
              (addr_of [ format_argument::["new_debug"] (addr_of error) ]))).
    
    Global Instance Method_try_get : Notation.Dot "try_get" := {
      Notation.dot := try_get;
    }.
  End ImplFlipperRef.
  
  Definition _ : unit := run (tt).
  
  Module Impl_Root_ink_env_call_FromAccountId_for_FlipperRef.
    Definition Self := FlipperRef.
    
    Definition from_account_id (account_id : AccountId) : Self :=
      {|
        Self.inner :=
          Root.ink.env.call.FromAccountId.from_account_id account_id;
      |}.
    
    Global Instance AssociatedFunction_from_account_id :
      Notation.DoubleColon Self "from_account_id" := {
      Notation.double_colon := from_account_id;
    }.
    
    Global Instance I
        :
        Root.ink.env.call.FromAccountId.Trait
        Self
        Environment :=
      {
      Root.ink.env.call.FromAccountId.from_account_id := from_account_id;
    }.
  End Impl_Root_ink_env_call_FromAccountId_for_FlipperRef.
  
  Module Impl_Root_ink_ToAccountId_for_FlipperRef.
    Definition Self := FlipperRef.
    
    Definition to_account_id (self : ref Self) : AccountId :=
      Root.ink.ToAccountId.to_account_id (addr_of self.["inner"]).
    
    Global Instance Method_to_account_id : Notation.Dot "to_account_id" := {
      Notation.dot := to_account_id;
    }.
    
    Global Instance I : Root.ink.ToAccountId.Trait Self Environment := {
      Root.ink.ToAccountId.to_account_id := to_account_id;
    }.
  End Impl_Root_ink_ToAccountId_for_FlipperRef.
  
  Module Impl_Root_core_convert_AsRef_for_FlipperRef.
    Definition Self := FlipperRef.
    
    Definition as_ref (self : ref Self) : ref AccountId :=
      Root.core.convert.AsRef.as_ref (addr_of self.["inner"]).
    
    Global Instance Method_as_ref : Notation.Dot "as_ref" := {
      Notation.dot := as_ref;
    }.
    
    Global Instance I : Root.core.convert.AsRef.Trait Self AccountId := {
      Root.core.convert.AsRef.as_ref := as_ref;
    }.
  End Impl_Root_core_convert_AsRef_for_FlipperRef.
  
  Module Impl_Root_core_convert_AsMut_for_FlipperRef.
    Definition Self := FlipperRef.
    
    Definition as_mut (self : mut_ref Self) : mut_ref AccountId :=
      Root.core.convert.AsMut.as_mut (addr_of self.["inner"]).
    
    Global Instance Method_as_mut : Notation.Dot "as_mut" := {
      Notation.dot := as_mut;
    }.
    
    Global Instance I : Root.core.convert.AsMut.Trait Self AccountId := {
      Root.core.convert.AsMut.as_mut := as_mut;
    }.
  End Impl_Root_core_convert_AsMut_for_FlipperRef.
  
  Definition _ : unit := run (tt).
End flipper.

Module Impl_Root_ink_env_ContractEnv_for_Flipper.
  Definition Self := Flipper.
  
  Definition Env : Set := Root.ink.env.DefaultEnvironment.
  
  Global Instance I : Root.ink.env.ContractEnv.Trait Self := {
  }.
End Impl_Root_ink_env_ContractEnv_for_Flipper.

Definition Environment : Set := Root.ink.env.ContractEnv.Env.

Definition AccountId : Set := Root.ink.env.Environment.AccountId.

Definition Balance : Set := Root.ink.env.Environment.Balance.

Definition Hash : Set := Root.ink.env.Environment.Hash.

Definition Timestamp : Set := Root.ink.env.Environment.Timestamp.

Definition BlockNumber : Set := Root.ink.env.Environment.BlockNumber.

Definition ChainExtension : Set := Root.ink.env.Environment.ChainExtension.

Definition MAX_EVENT_TOPICS : usize :=
  run (Root.ink.env.Environment.MAX_EVENT_TOPICS).

Definition _ : unit := run (tt).

Module Check.
  Record t : Set := {
    salt : unit;
    field_0 : bool;
  }.
  
  Global Instance Get_salt : Notation.Dot "salt" := {
    Notation.dot '(Build_t x0 _) := x0;
  }.
  Global Instance Get_field_0 : Notation.Dot "field_0" := {
    Notation.dot '(Build_t _ x1) := x1;
  }.
End Check.
Definition Check : Set := Check.t.

Module Flipper.
  Record t : Set := {
    value : Root.ink.storage.traits.AutoStorableHint.Type;
  }.
  
  Global Instance Get_value : Notation.Dot "value" := {
    Notation.dot '(Build_t x0) := x0;
  }.
End Flipper.
Definition Flipper : Set := Flipper.t.

Definition _ : unit := run (tt).

Module Impl_Root_ink_storage_traits_StorableHint_for_Flipper.
  Definition Self := Flipper.
  
  Definition Type : Set := Flipper.
  
  Definition PreferredKey : Set := Root.ink.storage.traits.AutoKey.
  
  Global Instance I
      __ink_generic_salt
      :
      Root.ink.storage.traits.StorableHint.Trait
      Self
      __ink_generic_salt :=
    {
  }.
End Impl_Root_ink_storage_traits_StorableHint_for_Flipper.

Definition _ : unit := run (tt).

Module Impl_Root_ink_storage_traits_StorageKey_for_Flipper.
  Definition Self := Flipper.
  
  Definition KEY := Root.ink.storage.traits.StorageKey.KEY.
  
  Global Instance AssociatedFunction_KEY : Notation.DoubleColon Self "KEY" := {
    Notation.double_colon := KEY;
  }.
  
  Global Instance I : Root.ink.storage.traits.StorageKey.Trait Self := {
    Root.ink.storage.traits.StorageKey.KEY := KEY;
  }.
End Impl_Root_ink_storage_traits_StorageKey_for_Flipper.

Definition _ : unit := run (tt).

Module Impl_Root_ink_storage_traits_Storable_for_Flipper.
  Definition Self := Flipper.
  
  Definition decode
      (__input : mut_ref __ink_I)
      : Root.core.result.Result Self Root.scale.Error :=
    Root.core.result.Result.Ok
      {|
        Flipper.value :=
          match LangItem (Root.ink.storage.traits.Storable.decode __input) with
          | Break {| Break.0 := residual; |} => Return (LangItem residual)
          | Continue {| Continue.0 := val; |} => val
          end;
      |}.
  
  Global Instance AssociatedFunction_decode :
    Notation.DoubleColon Self "decode" := {
    Notation.double_colon := decode;
  }.
  
  Definition encode (self : ref Self) (__dest : mut_ref __ink_O) : unit :=
    match self with
    | {| Flipper.value := __binding_0; |} =>
      let _ := Root.ink.storage.traits.Storable.encode __binding_0 __dest in
      tt
    end.
  
  Global Instance Method_encode : Notation.Dot "encode" := {
    Notation.dot := encode;
  }.
  
  Global Instance I : Root.ink.storage.traits.Storable.Trait Self := {
    Root.ink.storage.traits.Storable.encode := encode;
    Root.ink.storage.traits.Storable.decode := decode;
  }.
End Impl_Root_ink_storage_traits_Storable_for_Flipper.

Definition _ : unit := run (tt).

Module Impl_Root_scale_info_TypeInfo_for_Flipper.
  Definition Self := Flipper.
  
  Definition Identity : Set := Self.
  
  Definition type_info (_ : unit) : Root.scale_info.Type :=
    (((Root.scale_info.Type::["builder"] tt).["path"]
          (Root.scale_info.Path::["new"]
            "Flipper"
            "flipper::flipper")).["type_params"]
        (_crate.vec.Vec::["new"] tt)).["composite"]
      ((Root.scale_info.build.Fields::["named"] tt).["field"]
        (fun f =>
          (f.["ty"].["name"] "value").["type_name"]
            "<bool as::ink::storage::traits::AutoStorableHint<::ink::storage
::traits::ManualKey<2054318728u32, ()>,>>::Type")).
  
  Global Instance AssociatedFunction_type_info :
    Notation.DoubleColon Self "type_info" := {
    Notation.double_colon := type_info;
  }.
  
  Global Instance I : Root.scale_info.TypeInfo.Trait Self := {
    Root.scale_info.TypeInfo.type_info := type_info;
  }.
End Impl_Root_scale_info_TypeInfo_for_Flipper.

Definition _ : unit := run (tt).

Module Impl_Root_ink_storage_traits_StorageLayout_for_Flipper.
  Definition Self := Flipper.
  
  Definition layout
      (__key : ref Root.ink.primitives.Key)
      : Root.ink.metadata.layout.Layout :=
    Root.ink.metadata.layout.Layout.Struct
      (Root.ink.metadata.layout.StructLayout::["new"]
        "Flipper"
        [
          Root.ink.metadata.layout.FieldLayout::["new"]
            "value"
            (Root.ink.storage.traits.StorageLayout.layout __key)
        ]).
  
  Global Instance AssociatedFunction_layout :
    Notation.DoubleColon Self "layout" := {
    Notation.double_colon := layout;
  }.
  
  Global Instance I : Root.ink.storage.traits.StorageLayout.Trait Self := {
    Root.ink.storage.traits.StorageLayout.layout := layout;
  }.
End Impl_Root_ink_storage_traits_StorageLayout_for_Flipper.

Definition _ : unit := run (tt).

Module Impl_Root_ink_reflect_ContractName_for_Flipper.
  Definition Self := Flipper.
  
  Definition NAME := "Flipper".
  
  Global Instance AssociatedFunction_NAME :
    Notation.DoubleColon Self "NAME" := {
    Notation.double_colon := NAME;
  }.
  
  Global Instance I : Root.ink.reflect.ContractName.Trait Self := {
    Root.ink.reflect.ContractName.NAME := NAME;
  }.
End Impl_Root_ink_reflect_ContractName_for_Flipper.

Definition _ : unit := run (tt).

Module Impl_Root_ink_codegen_Env_for_StaticRef_Flipper.
  Definition Self := ref Flipper.
  
  Definition EnvAccess : Set := Root.ink.EnvAccess Root.ink.env.ContractEnv.Env.
  
  Definition env (self : Self) : ImplSelf.EnvAccess :=
    Root.core.default.Default.default tt.
  
  Global Instance Method_env : Notation.Dot "env" := {
    Notation.dot := env;
  }.
  
  Global Instance I : Root.ink.codegen.Env.Trait Self := {
    Root.ink.codegen.Env.env := env;
  }.
End Impl_Root_ink_codegen_Env_for_StaticRef_Flipper.

Module Impl_Root_ink_codegen_StaticEnv_for_Flipper.
  Definition Self := Flipper.
  
  Definition EnvAccess : Set := Root.ink.EnvAccess Root.ink.env.ContractEnv.Env.
  
  Definition env (_ : unit) : ImplSelf.EnvAccess :=
    Root.core.default.Default.default tt.
  
  Global Instance AssociatedFunction_env : Notation.DoubleColon Self "env" := {
    Notation.double_colon := env;
  }.
  
  Global Instance I : Root.ink.codegen.StaticEnv.Trait Self := {
    Root.ink.codegen.StaticEnv.env := env;
  }.
End Impl_Root_ink_codegen_StaticEnv_for_Flipper.

Definition _ : unit := run (tt).

Module Impl_Root_ink_reflect_DispatchableConstructorInfo_for_Flipper.
  Definition Self := Flipper.
  
  Definition Input : Set := bool.
  
  Definition Output : Set := Self.
  
  Definition Storage : Set := Flipper.
  
  Definition Error : Set := Root.ink.reflect.ConstructorOutput.Error.
  
  Definition IS_RESULT := Root.ink.reflect.ConstructorOutput.IS_RESULT.
  
  Global Instance AssociatedFunction_IS_RESULT :
    Notation.DoubleColon Self "IS_RESULT" := {
    Notation.double_colon := IS_RESULT;
  }.
  
  Definition
    CALLABLE := fun __ink_binding_0 => Flipper::["new"] __ink_binding_0.
  
  Global Instance AssociatedFunction_CALLABLE :
    Notation.DoubleColon Self "CALLABLE" := {
    Notation.double_colon := CALLABLE;
  }.
  
  Definition PAYABLE := false.
  
  Global Instance AssociatedFunction_PAYABLE :
    Notation.DoubleColon Self "PAYABLE" := {
    Notation.double_colon := PAYABLE;
  }.
  
  Definition SELECTOR := [ 155; 174; 157; 94 ].
  
  Global Instance AssociatedFunction_SELECTOR :
    Notation.DoubleColon Self "SELECTOR" := {
    Notation.double_colon := SELECTOR;
  }.
  
  Definition LABEL := "new".
  
  Global Instance AssociatedFunction_LABEL :
    Notation.DoubleColon Self "LABEL" := {
    Notation.double_colon := LABEL;
  }.
  
  Global Instance I : Root.ink.reflect.DispatchableConstructorInfo.Trait Self :=
    {
    Root.ink.reflect.DispatchableConstructorInfo.IS_RESULT := IS_RESULT;
    Root.ink.reflect.DispatchableConstructorInfo.CALLABLE := CALLABLE;
    Root.ink.reflect.DispatchableConstructorInfo.PAYABLE := PAYABLE;
    Root.ink.reflect.DispatchableConstructorInfo.SELECTOR := SELECTOR;
    Root.ink.reflect.DispatchableConstructorInfo.LABEL := LABEL;
  }.
End Impl_Root_ink_reflect_DispatchableConstructorInfo_for_Flipper.

Module Impl_Root_ink_reflect_DispatchableConstructorInfo_for_Flipper.
  Definition Self := Flipper.
  
  Definition Input : Set := unit.
  
  Definition Output : Set := Self.
  
  Definition Storage : Set := Flipper.
  
  Definition Error : Set := Root.ink.reflect.ConstructorOutput.Error.
  
  Definition IS_RESULT := Root.ink.reflect.ConstructorOutput.IS_RESULT.
  
  Global Instance AssociatedFunction_IS_RESULT :
    Notation.DoubleColon Self "IS_RESULT" := {
    Notation.double_colon := IS_RESULT;
  }.
  
  Definition CALLABLE := fun _ => Flipper::["new_default"] tt.
  
  Global Instance AssociatedFunction_CALLABLE :
    Notation.DoubleColon Self "CALLABLE" := {
    Notation.double_colon := CALLABLE;
  }.
  
  Definition PAYABLE := false.
  
  Global Instance AssociatedFunction_PAYABLE :
    Notation.DoubleColon Self "PAYABLE" := {
    Notation.double_colon := PAYABLE;
  }.
  
  Definition SELECTOR := [ 97; 239; 126; 62 ].
  
  Global Instance AssociatedFunction_SELECTOR :
    Notation.DoubleColon Self "SELECTOR" := {
    Notation.double_colon := SELECTOR;
  }.
  
  Definition LABEL := "new_default".
  
  Global Instance AssociatedFunction_LABEL :
    Notation.DoubleColon Self "LABEL" := {
    Notation.double_colon := LABEL;
  }.
  
  Global Instance I : Root.ink.reflect.DispatchableConstructorInfo.Trait Self :=
    {
    Root.ink.reflect.DispatchableConstructorInfo.IS_RESULT := IS_RESULT;
    Root.ink.reflect.DispatchableConstructorInfo.CALLABLE := CALLABLE;
    Root.ink.reflect.DispatchableConstructorInfo.PAYABLE := PAYABLE;
    Root.ink.reflect.DispatchableConstructorInfo.SELECTOR := SELECTOR;
    Root.ink.reflect.DispatchableConstructorInfo.LABEL := LABEL;
  }.
End Impl_Root_ink_reflect_DispatchableConstructorInfo_for_Flipper.

Module Impl_Root_ink_reflect_DispatchableMessageInfo_for_Flipper.
  Definition Self := Flipper.
  
  Definition Input : Set := unit.
  
  Definition Output : Set := unit.
  
  Definition Storage : Set := Flipper.
  
  Definition CALLABLE := fun storage _ => Flipper::["flip"] storage.
  
  Global Instance AssociatedFunction_CALLABLE :
    Notation.DoubleColon Self "CALLABLE" := {
    Notation.double_colon := CALLABLE;
  }.
  
  Definition SELECTOR := [ 99; 58; 165; 81 ].
  
  Global Instance AssociatedFunction_SELECTOR :
    Notation.DoubleColon Self "SELECTOR" := {
    Notation.double_colon := SELECTOR;
  }.
  
  Definition PAYABLE := false.
  
  Global Instance AssociatedFunction_PAYABLE :
    Notation.DoubleColon Self "PAYABLE" := {
    Notation.double_colon := PAYABLE;
  }.
  
  Definition MUTATES := true.
  
  Global Instance AssociatedFunction_MUTATES :
    Notation.DoubleColon Self "MUTATES" := {
    Notation.double_colon := MUTATES;
  }.
  
  Definition LABEL := "flip".
  
  Global Instance AssociatedFunction_LABEL :
    Notation.DoubleColon Self "LABEL" := {
    Notation.double_colon := LABEL;
  }.
  
  Global Instance I : Root.ink.reflect.DispatchableMessageInfo.Trait Self := {
    Root.ink.reflect.DispatchableMessageInfo.CALLABLE := CALLABLE;
    Root.ink.reflect.DispatchableMessageInfo.MUTATES := MUTATES;
    Root.ink.reflect.DispatchableMessageInfo.PAYABLE := PAYABLE;
    Root.ink.reflect.DispatchableMessageInfo.SELECTOR := SELECTOR;
    Root.ink.reflect.DispatchableMessageInfo.LABEL := LABEL;
  }.
End Impl_Root_ink_reflect_DispatchableMessageInfo_for_Flipper.

Module Impl_Root_ink_reflect_DispatchableMessageInfo_for_Flipper.
  Definition Self := Flipper.
  
  Definition Input : Set := unit.
  
  Definition Output : Set := bool.
  
  Definition Storage : Set := Flipper.
  
  Definition CALLABLE := fun storage _ => Flipper::["get"] storage.
  
  Global Instance AssociatedFunction_CALLABLE :
    Notation.DoubleColon Self "CALLABLE" := {
    Notation.double_colon := CALLABLE;
  }.
  
  Definition SELECTOR := [ 47; 134; 91; 217 ].
  
  Global Instance AssociatedFunction_SELECTOR :
    Notation.DoubleColon Self "SELECTOR" := {
    Notation.double_colon := SELECTOR;
  }.
  
  Definition PAYABLE := false.
  
  Global Instance AssociatedFunction_PAYABLE :
    Notation.DoubleColon Self "PAYABLE" := {
    Notation.double_colon := PAYABLE;
  }.
  
  Definition MUTATES := false.
  
  Global Instance AssociatedFunction_MUTATES :
    Notation.DoubleColon Self "MUTATES" := {
    Notation.double_colon := MUTATES;
  }.
  
  Definition LABEL := "get".
  
  Global Instance AssociatedFunction_LABEL :
    Notation.DoubleColon Self "LABEL" := {
    Notation.double_colon := LABEL;
  }.
  
  Global Instance I : Root.ink.reflect.DispatchableMessageInfo.Trait Self := {
    Root.ink.reflect.DispatchableMessageInfo.CALLABLE := CALLABLE;
    Root.ink.reflect.DispatchableMessageInfo.MUTATES := MUTATES;
    Root.ink.reflect.DispatchableMessageInfo.PAYABLE := PAYABLE;
    Root.ink.reflect.DispatchableMessageInfo.SELECTOR := SELECTOR;
    Root.ink.reflect.DispatchableMessageInfo.LABEL := LABEL;
  }.
End Impl_Root_ink_reflect_DispatchableMessageInfo_for_Flipper.

Definition _ : unit := run (tt).

Module __ink_ConstructorDecoder.
  Inductive t : Set :=
  | Constructor0 (_ : Root.ink.reflect.DispatchableConstructorInfo.Input)
  | Constructor1 (_ : Root.ink.reflect.DispatchableConstructorInfo.Input).
End __ink_ConstructorDecoder.
Definition __ink_ConstructorDecoder := __ink_ConstructorDecoder.t.

Module Impl_Root_ink_reflect_DecodeDispatch_for___ink_ConstructorDecoder.
  Definition Self := __ink_ConstructorDecoder.
  
  Definition decode_dispatch
      (input : mut_ref I)
      : Root.core.result.Result Self Root.ink.reflect.DispatchError :=
    match
      match
        LangItem
          ((Root.scale.Decode.decode input).["map_err"]
            (fun _ => Root.ink.reflect.DispatchError.InvalidSelector))
      with
      | Break {| Break.0 := residual; |} => Return (LangItem residual)
      | Continue {| Continue.0 := val; |} => val
      end
    with
    | CONSTRUCTOR_0 =>
      Root.core.result.Result.Ok
        (Self::["Constructor0"]
          match
            LangItem
              ((Root.scale.Decode.decode input).["map_err"]
                (fun _ => Root.ink.reflect.DispatchError.InvalidParameters))
          with
          | Break {| Break.0 := residual; |} => Return (LangItem residual)
          | Continue {| Continue.0 := val; |} => val
          end)
    | CONSTRUCTOR_1 =>
      Root.core.result.Result.Ok
        (Self::["Constructor1"]
          match
            LangItem
              ((Root.scale.Decode.decode input).["map_err"]
                (fun _ => Root.ink.reflect.DispatchError.InvalidParameters))
          with
          | Break {| Break.0 := residual; |} => Return (LangItem residual)
          | Continue {| Continue.0 := val; |} => val
          end)
    | _invalid =>
      Root.core.result.Result.Err Root.ink.reflect.DispatchError.UnknownSelector
    end.
  
  Global Instance AssociatedFunction_decode_dispatch :
    Notation.DoubleColon Self "decode_dispatch" := {
    Notation.double_colon := decode_dispatch;
  }.
  
  Global Instance I : Root.ink.reflect.DecodeDispatch.Trait Self := {
    Root.ink.reflect.DecodeDispatch.decode_dispatch := decode_dispatch;
  }.
End Impl_Root_ink_reflect_DecodeDispatch_for___ink_ConstructorDecoder.

Definition CONSTRUCTOR_0 : list Root.core.primitive.u8 :=
  run (Root.ink.reflect.DispatchableConstructorInfo.SELECTOR).

Definition CONSTRUCTOR_1 : list Root.core.primitive.u8 :=
  run (Root.ink.reflect.DispatchableConstructorInfo.SELECTOR).

Module Impl_Root_scale_Decode_for___ink_ConstructorDecoder.
  Definition Self := __ink_ConstructorDecoder.
  
  Definition decode
      (input : mut_ref I)
      : Root.core.result.Result Self Root.scale.Error :=
    (Root.ink.reflect.DecodeDispatch.decode_dispatch input).["map_err"]
      Root.core.convert.Into.into.
  
  Global Instance AssociatedFunction_decode :
    Notation.DoubleColon Self "decode" := {
    Notation.double_colon := decode;
  }.
  
  Global Instance I : Root.scale.Decode.Trait Self := {
    Root.scale.Decode.decode := decode;
  }.
End Impl_Root_scale_Decode_for___ink_ConstructorDecoder.

Module Impl_Root_ink_reflect_ExecuteDispatchable_for___ink_ConstructorDecoder.
  Definition Self := __ink_ConstructorDecoder.
  
  Definition execute_dispatchable
      (self : Self)
      : Root.core.result.Result unit Root.ink.reflect.DispatchError :=
    match self with
    | ImplSelf.Constructor0.Build_t input =>
      let _ :=
        if
          ((false.["or"]
                let constructor_0 := false in
                let constructor_0 :=
                  Root.ink.reflect.DispatchableConstructorInfo.PAYABLE in
                constructor_0).["or"]
              let constructor_1 := false in
              let constructor_1 :=
                Root.ink.reflect.DispatchableConstructorInfo.PAYABLE in
              constructor_1.["andb"]
            Root.ink.reflect.DispatchableConstructorInfo.PAYABLE.["not"]
          : bool)
        then
          let _ :=
            match LangItem (Root.ink.codegen.deny_payment tt) with
            | Break {| Break.0 := residual; |} => Return (LangItem residual)
            | Continue {| Continue.0 := val; |} => val
            end in
          tt
        else
          tt in
      let result :=
        Root.ink.reflect.DispatchableConstructorInfo.CALLABLE input in
      let output_value :=
        Root.ink.reflect.ConstructorOutputValue::["new"] result in
      let output_result :=
        Root.ink.reflect.ConstructorOutput.as_result (addr_of output_value) in
      let _ :=
        if
          (let_if
          Root.core.result.Result.Ok contract
          :=
          output_result.["as_ref"]
          : bool)
        then
          let _ :=
            Root.ink.env.set_contract_storage
              (addr_of Root.ink.storage.traits.StorageKey.KEY)
              contract in
          tt
        else
          tt in
      let _ :=
        Root.ink.env.return_value
          (Root.ink.env.ReturnFlags::["new_with_reverted"]
            output_result.["is_err"])
          (addr_of
            (Root.ink.ConstructorResult::["Ok"]
              (output_result.["map"] (fun _ => tt)))) in
      tt
    | ImplSelf.Constructor1.Build_t input =>
      let _ :=
        if
          ((false.["or"]
                let constructor_0 := false in
                let constructor_0 :=
                  Root.ink.reflect.DispatchableConstructorInfo.PAYABLE in
                constructor_0).["or"]
              let constructor_1 := false in
              let constructor_1 :=
                Root.ink.reflect.DispatchableConstructorInfo.PAYABLE in
              constructor_1.["andb"]
            Root.ink.reflect.DispatchableConstructorInfo.PAYABLE.["not"]
          : bool)
        then
          let _ :=
            match LangItem (Root.ink.codegen.deny_payment tt) with
            | Break {| Break.0 := residual; |} => Return (LangItem residual)
            | Continue {| Continue.0 := val; |} => val
            end in
          tt
        else
          tt in
      let result :=
        Root.ink.reflect.DispatchableConstructorInfo.CALLABLE input in
      let output_value :=
        Root.ink.reflect.ConstructorOutputValue::["new"] result in
      let output_result :=
        Root.ink.reflect.ConstructorOutput.as_result (addr_of output_value) in
      let _ :=
        if
          (let_if
          Root.core.result.Result.Ok contract
          :=
          output_result.["as_ref"]
          : bool)
        then
          let _ :=
            Root.ink.env.set_contract_storage
              (addr_of Root.ink.storage.traits.StorageKey.KEY)
              contract in
          tt
        else
          tt in
      let _ :=
        Root.ink.env.return_value
          (Root.ink.env.ReturnFlags::["new_with_reverted"]
            output_result.["is_err"])
          (addr_of
            (Root.ink.ConstructorResult::["Ok"]
              (output_result.["map"] (fun _ => tt)))) in
      tt
    end.
  
  Global Instance Method_execute_dispatchable :
    Notation.Dot "execute_dispatchable" := {
    Notation.dot := execute_dispatchable;
  }.
  
  Global Instance I : Root.ink.reflect.ExecuteDispatchable.Trait Self := {
    Root.ink.reflect.ExecuteDispatchable.execute_dispatchable
      :=
      execute_dispatchable;
  }.
End Impl_Root_ink_reflect_ExecuteDispatchable_for___ink_ConstructorDecoder.

Module Impl_Root_ink_reflect_ContractConstructorDecoder_for_Flipper.
  Definition Self := Flipper.
  
  Definition Type : Set := __ink_ConstructorDecoder.
  
  Global Instance I : Root.ink.reflect.ContractConstructorDecoder.Trait Self :=
    {
  }.
End Impl_Root_ink_reflect_ContractConstructorDecoder_for_Flipper.

Definition _ : unit := run (tt).

Module __ink_MessageDecoder.
  Inductive t : Set :=
  | Message0 (_ : Root.ink.reflect.DispatchableMessageInfo.Input)
  | Message1 (_ : Root.ink.reflect.DispatchableMessageInfo.Input).
End __ink_MessageDecoder.
Definition __ink_MessageDecoder := __ink_MessageDecoder.t.

Module Impl_Root_ink_reflect_DecodeDispatch_for___ink_MessageDecoder.
  Definition Self := __ink_MessageDecoder.
  
  Definition decode_dispatch
      (input : mut_ref I)
      : Root.core.result.Result Self Root.ink.reflect.DispatchError :=
    match
      match
        LangItem
          ((Root.scale.Decode.decode input).["map_err"]
            (fun _ => Root.ink.reflect.DispatchError.InvalidSelector))
      with
      | Break {| Break.0 := residual; |} => Return (LangItem residual)
      | Continue {| Continue.0 := val; |} => val
      end
    with
    | MESSAGE_0 =>
      Root.core.result.Result.Ok
        (Self::["Message0"]
          match
            LangItem
              ((Root.scale.Decode.decode input).["map_err"]
                (fun _ => Root.ink.reflect.DispatchError.InvalidParameters))
          with
          | Break {| Break.0 := residual; |} => Return (LangItem residual)
          | Continue {| Continue.0 := val; |} => val
          end)
    | MESSAGE_1 =>
      Root.core.result.Result.Ok
        (Self::["Message1"]
          match
            LangItem
              ((Root.scale.Decode.decode input).["map_err"]
                (fun _ => Root.ink.reflect.DispatchError.InvalidParameters))
          with
          | Break {| Break.0 := residual; |} => Return (LangItem residual)
          | Continue {| Continue.0 := val; |} => val
          end)
    | _invalid =>
      Root.core.result.Result.Err Root.ink.reflect.DispatchError.UnknownSelector
    end.
  
  Global Instance AssociatedFunction_decode_dispatch :
    Notation.DoubleColon Self "decode_dispatch" := {
    Notation.double_colon := decode_dispatch;
  }.
  
  Global Instance I : Root.ink.reflect.DecodeDispatch.Trait Self := {
    Root.ink.reflect.DecodeDispatch.decode_dispatch := decode_dispatch;
  }.
End Impl_Root_ink_reflect_DecodeDispatch_for___ink_MessageDecoder.

Definition MESSAGE_0 : list Root.core.primitive.u8 :=
  run (Root.ink.reflect.DispatchableMessageInfo.SELECTOR).

Definition MESSAGE_1 : list Root.core.primitive.u8 :=
  run (Root.ink.reflect.DispatchableMessageInfo.SELECTOR).

Module Impl_Root_scale_Decode_for___ink_MessageDecoder.
  Definition Self := __ink_MessageDecoder.
  
  Definition decode
      (input : mut_ref I)
      : Root.core.result.Result Self Root.scale.Error :=
    (Root.ink.reflect.DecodeDispatch.decode_dispatch input).["map_err"]
      Root.core.convert.Into.into.
  
  Global Instance AssociatedFunction_decode :
    Notation.DoubleColon Self "decode" := {
    Notation.double_colon := decode;
  }.
  
  Global Instance I : Root.scale.Decode.Trait Self := {
    Root.scale.Decode.decode := decode;
  }.
End Impl_Root_scale_Decode_for___ink_MessageDecoder.

Definition push_contract
    (contract : Root.core.mem.ManuallyDrop Flipper)
    (mutates : bool)
    : unit :=
  if (mutates : bool) then
    let _ :=
      Root.ink.env.set_contract_storage
        (addr_of Root.ink.storage.traits.StorageKey.KEY)
        (addr_of contract) in
    tt
  else
    tt.

Module Impl_Root_ink_reflect_ExecuteDispatchable_for___ink_MessageDecoder.
  Definition Self := __ink_MessageDecoder.
  
  Definition execute_dispatchable
      (self : Self)
      : Root.core.result.Result unit Root.ink.reflect.DispatchError :=
    let key := Root.ink.storage.traits.StorageKey.KEY in
    let contract :=
      Root.core.mem.ManuallyDrop::["new"]
        match Root.ink.env.get_contract_storage (addr_of key) with
        | Root.core.result.Result.Ok Root.core.option.Option.Some value => value
        | Root.core.result.Result.Ok Root.core.option.Option.None =>
          _crate.panicking.panic_fmt
            (format_arguments::["new_const"]
              (addr_of [ "storage entry was empty" ]))
        | Root.core.result.Result.Err _ =>
          _crate.panicking.panic_fmt
            (format_arguments::["new_const"]
              (addr_of [ "could not properly decode storage entry" ]))
        end in
    let _ :=
      match self with
      | ImplSelf.Message0.Build_t input =>
        let _ :=
          if
            ((false.["or"]
                  let message_0 := false in
                  let message_0 :=
                    Root.ink.reflect.DispatchableMessageInfo.PAYABLE in
                  message_0).["or"]
                let message_1 := false in
                let message_1 :=
                  Root.ink.reflect.DispatchableMessageInfo.PAYABLE in
                message_1.["andb"]
              Root.ink.reflect.DispatchableMessageInfo.PAYABLE.["not"]
            : bool)
          then
            let _ :=
              match LangItem (Root.ink.codegen.deny_payment tt) with
              | Break {| Break.0 := residual; |} => Return (LangItem residual)
              | Continue {| Continue.0 := val; |} => val
              end in
            tt
          else
            tt in
        let result :=
          Root.ink.reflect.DispatchableMessageInfo.CALLABLE
            (addr_of contract)
            input in
        let is_reverted :=
          (_crate.result_info.IsResultType
                Root.ink.reflect.DispatchableMessageInfo.Output)::["VALUE"].["andb"]
            (_crate.result_info.IsResultErr.Build_t
                (addr_of result)).["value"] in
        let _ :=
          if (is_reverted.["not"] : bool) then
            let _ :=
              push_contract
                contract
                Root.ink.reflect.DispatchableMessageInfo.MUTATES in
            tt
          else
            tt in
        Root.ink.env.return_value
          (Root.ink.env.ReturnFlags::["new_with_reverted"] is_reverted)
          (addr_of (Root.ink.MessageResult::["Ok"] result))
      | ImplSelf.Message1.Build_t input =>
        let _ :=
          if
            ((false.["or"]
                  let message_0 := false in
                  let message_0 :=
                    Root.ink.reflect.DispatchableMessageInfo.PAYABLE in
                  message_0).["or"]
                let message_1 := false in
                let message_1 :=
                  Root.ink.reflect.DispatchableMessageInfo.PAYABLE in
                message_1.["andb"]
              Root.ink.reflect.DispatchableMessageInfo.PAYABLE.["not"]
            : bool)
          then
            let _ :=
              match LangItem (Root.ink.codegen.deny_payment tt) with
              | Break {| Break.0 := residual; |} => Return (LangItem residual)
              | Continue {| Continue.0 := val; |} => val
              end in
            tt
          else
            tt in
        let result :=
          Root.ink.reflect.DispatchableMessageInfo.CALLABLE
            (addr_of contract)
            input in
        let is_reverted :=
          (_crate.result_info.IsResultType
                Root.ink.reflect.DispatchableMessageInfo.Output)::["VALUE"].["andb"]
            (_crate.result_info.IsResultErr.Build_t
                (addr_of result)).["value"] in
        let _ :=
          if (is_reverted.["not"] : bool) then
            let _ :=
              push_contract
                contract
                Root.ink.reflect.DispatchableMessageInfo.MUTATES in
            tt
          else
            tt in
        Root.ink.env.return_value
          (Root.ink.env.ReturnFlags::["new_with_reverted"] is_reverted)
          (addr_of (Root.ink.MessageResult::["Ok"] result))
      end in
    tt.
  
  Global Instance Method_execute_dispatchable :
    Notation.Dot "execute_dispatchable" := {
    Notation.dot := execute_dispatchable;
  }.
  
  Global Instance I : Root.ink.reflect.ExecuteDispatchable.Trait Self := {
    Root.ink.reflect.ExecuteDispatchable.execute_dispatchable
      :=
      execute_dispatchable;
  }.
End Impl_Root_ink_reflect_ExecuteDispatchable_for___ink_MessageDecoder.

Module Impl_Root_ink_reflect_ContractMessageDecoder_for_Flipper.
  Definition Self := Flipper.
  
  Definition Type : Set := __ink_MessageDecoder.
  
  Global Instance I : Root.ink.reflect.ContractMessageDecoder.Trait Self := {
  }.
End Impl_Root_ink_reflect_ContractMessageDecoder_for_Flipper.

Definition _ : unit := run (tt).

Definition _ : Root.ink.codegen.utils.IsSameType Flipper :=
  run (((Root.ink.codegen.utils.IsSameType Flipper)::["new"] tt)).

Module ImplFlipper.
  Definition Self := Flipper.
  
  Definition new (init_value : bool) : Self := {| Self.value := init_value; |}.
  
  Global Instance AssociatedFunction_new : Notation.DoubleColon Self "new" := {
    Notation.double_colon := new;
  }.
  
  Definition new_default (_ : unit) : Self :=
    Self::["new"] (Default.default tt).
  
  Global Instance AssociatedFunction_new_default :
    Notation.DoubleColon Self "new_default" := {
    Notation.double_colon := new_default;
  }.
  
  Definition flip (self : mut_ref Self) : unit :=
    let _ := assign self.["value"] self.["value"].["not"] in
    tt.
  
  Global Instance Method_flip : Notation.Dot "flip" := {
    Notation.dot := flip;
  }.
  
  Definition get (self : ref Self) : bool := self.["value"].
  
  Global Instance Method_get : Notation.Dot "get" := {
    Notation.dot := get;
  }.
End ImplFlipper.

Definition _ : unit :=
  run
    (let _ := Root.ink.codegen.utils.consume_type tt in
    let _ := Root.ink.codegen.utils.consume_type tt in
    tt).

Definition _ : unit := run (tt).

Module CallBuilder.
  Record t : Set := {
    account_id : AccountId;
  }.
  
  Global Instance Get_account_id : Notation.Dot "account_id" := {
    Notation.dot '(Build_t x0) := x0;
  }.
End CallBuilder.
Definition CallBuilder : Set := CallBuilder.t.

Module Impl__crate_fmt_Debug_for_CallBuilder.
  Definition Self := CallBuilder.
  
  Definition fmt
      (self : ref Self)
      (f : mut_ref _crate.fmt.Formatter)
      : _crate.fmt.Result :=
    _crate.fmt.Formatter::["debug_struct_field1_finish"]
      f
      "CallBuilder"
      "account_id"
      (addr_of (addr_of self.["account_id"])).
  
  Global Instance Method_fmt : Notation.Dot "fmt" := {
    Notation.dot := fmt;
  }.
  
  Global Instance I : _crate.fmt.Debug.Trait Self := {
    _crate.fmt.Debug.fmt := fmt;
  }.
End Impl__crate_fmt_Debug_for_CallBuilder.

Definition _ : unit := run (tt).

Module Impl_Root_scale_Encode_for_CallBuilder.
  Definition Self := CallBuilder.
  
  Definition encode_to
      (self : ref Self)
      (__codec_dest_edqy : mut_ref __CodecOutputEdqy)
      : unit :=
    Root.scale.Encode.encode_to
      (addr_of (addr_of self.["account_id"]))
      __codec_dest_edqy.
  
  Global Instance Method_encode_to : Notation.Dot "encode_to" := {
    Notation.dot := encode_to;
  }.
  
  Definition encode
      (self : ref Self)
      : Root.scale.alloc.vec.Vec Root.core.primitive.u8 :=
    Root.scale.Encode.encode (addr_of (addr_of self.["account_id"])).
  
  Global Instance Method_encode : Notation.Dot "encode" := {
    Notation.dot := encode;
  }.
  
  Definition using_encoded (self : ref Self) (f : F) : R :=
    Root.scale.Encode.using_encoded (addr_of (addr_of self.["account_id"])) f.
  
  Global Instance Method_using_encoded : Notation.Dot "using_encoded" := {
    Notation.dot := using_encoded;
  }.
  
  Global Instance I : Root.scale.Encode.Trait Self := {
  }.
End Impl_Root_scale_Encode_for_CallBuilder.

Module Impl_Root_scale_EncodeLike_for_CallBuilder.
  Definition Self := CallBuilder.
  
  Global Instance I : Root.scale.EncodeLike.Trait Self :=
    Root.scale.EncodeLike.Build_Class _.
End Impl_Root_scale_EncodeLike_for_CallBuilder.

Definition _ : unit := run (tt).

Module Impl_Root_scale_Decode_for_CallBuilder.
  Definition Self := CallBuilder.
  
  Definition decode
      (__codec_input_edqy : mut_ref __CodecInputEdqy)
      : Root.core.result.Result Self Root.scale.Error :=
    Root.core.result.Result.Ok
      {|
        CallBuilder.account_id :=
          let __codec_res_edqy := Root.scale.Decode.decode __codec_input_edqy in
          match __codec_res_edqy with
          | Root.core.result.Result.Err e =>
            Return
              (Root.core.result.Result.Err
                (e.["chain"] "Could not decode `CallBuilder::account_id`"))
          | Root.core.result.Result.Ok __codec_res_edqy => __codec_res_edqy
          end;
      |}.
  
  Global Instance AssociatedFunction_decode :
    Notation.DoubleColon Self "decode" := {
    Notation.double_colon := decode;
  }.
  
  Global Instance I : Root.scale.Decode.Trait Self := {
    Root.scale.Decode.decode := decode;
  }.
End Impl_Root_scale_Decode_for_CallBuilder.

Module Impl__crate_hash_Hash_for_CallBuilder.
  Definition Self := CallBuilder.
  
  Definition hash (self : ref Self) (state : mut_ref __H) : unit :=
    _crate.hash.Hash.hash (addr_of self.["account_id"]) state.
  
  Global Instance Method_hash : Notation.Dot "hash" := {
    Notation.dot := hash;
  }.
  
  Global Instance I : _crate.hash.Hash.Trait Self := {
    _crate.hash.Hash.hash := hash;
  }.
End Impl__crate_hash_Hash_for_CallBuilder.

Module Impl__crate_marker_StructuralPartialEq_for_CallBuilder.
  Definition Self := CallBuilder.
  
  Global Instance I : _crate.marker.StructuralPartialEq.Trait Self :=
    _crate.marker.StructuralPartialEq.Build_Class _.
End Impl__crate_marker_StructuralPartialEq_for_CallBuilder.

Module Impl__crate_cmp_PartialEq_for_CallBuilder.
  Definition Self := CallBuilder.
  
  Definition eq (self : ref Self) (other : ref CallBuilder) : bool :=
    self.["account_id"].["eq"] other.["account_id"].
  
  Global Instance Method_eq : Notation.Dot "eq" := {
    Notation.dot := eq;
  }.
  
  Global Instance I : _crate.cmp.PartialEq.Trait Self := {
    _crate.cmp.PartialEq.eq := eq;
  }.
End Impl__crate_cmp_PartialEq_for_CallBuilder.

Module Impl__crate_marker_StructuralEq_for_CallBuilder.
  Definition Self := CallBuilder.
  
  Global Instance I : _crate.marker.StructuralEq.Trait Self :=
    _crate.marker.StructuralEq.Build_Class _.
End Impl__crate_marker_StructuralEq_for_CallBuilder.

Module Impl__crate_cmp_Eq_for_CallBuilder.
  Definition Self := CallBuilder.
  
  Definition assert_receiver_is_total_eq (self : ref Self) : unit :=
    let _ := tt in
    tt.
  
  Global Instance Method_assert_receiver_is_total_eq :
    Notation.Dot "assert_receiver_is_total_eq" := {
    Notation.dot := assert_receiver_is_total_eq;
  }.
  
  Global Instance I : _crate.cmp.Eq.Trait Self := {
  }.
End Impl__crate_cmp_Eq_for_CallBuilder.

Module Impl__crate_clone_Clone_for_CallBuilder.
  Definition Self := CallBuilder.
  
  Definition clone (self : ref Self) : CallBuilder :=
    {|
      CallBuilder.account_id :=
        _crate.clone.Clone.clone (addr_of self.["account_id"]);
    |}.
  
  Global Instance Method_clone : Notation.Dot "clone" := {
    Notation.dot := clone;
  }.
  
  Global Instance I : _crate.clone.Clone.Trait Self := {
    _crate.clone.Clone.clone := clone;
  }.
End Impl__crate_clone_Clone_for_CallBuilder.

Definition _ : unit := run (tt).

Module Impl_Root_scale_info_TypeInfo_for_CallBuilder.
  Definition Self := CallBuilder.
  
  Definition Identity : Set := Self.
  
  Definition type_info (_ : unit) : Root.scale_info.Type :=
    ((((Root.scale_info.Type::["builder"] tt).["path"]
            (Root.scale_info.Path::["new"]
              "CallBuilder"
              "flipper::flipper")).["type_params"]
          (_crate.vec.Vec::["new"] tt)).["docs"]
        (addr_of
          [
            "The ink! smart contract's call builder.";
            "";
            "Implements the underlying on-chain calling of the ink! smart contract";
            "messages and trait implementations in a type safe way."
          ])).["composite"]
      ((Root.scale_info.build.Fields::["named"] tt).["field"]
        (fun f => (f.["ty"].["name"] "account_id").["type_name"] "AccountId")).
  
  Global Instance AssociatedFunction_type_info :
    Notation.DoubleColon Self "type_info" := {
    Notation.double_colon := type_info;
  }.
  
  Global Instance I : Root.scale_info.TypeInfo.Trait Self := {
    Root.scale_info.TypeInfo.type_info := type_info;
  }.
End Impl_Root_scale_info_TypeInfo_for_CallBuilder.

Definition _ : unit := run (tt).

Module Impl_Root_ink_storage_traits_StorageLayout_for_CallBuilder.
  Definition Self := CallBuilder.
  
  Definition layout
      (__key : ref Root.ink.primitives.Key)
      : Root.ink.metadata.layout.Layout :=
    Root.ink.metadata.layout.Layout.Struct
      (Root.ink.metadata.layout.StructLayout::["new"]
        "CallBuilder"
        [
          Root.ink.metadata.layout.FieldLayout::["new"]
            "account_id"
            (Root.ink.storage.traits.StorageLayout.layout __key)
        ]).
  
  Global Instance AssociatedFunction_layout :
    Notation.DoubleColon Self "layout" := {
    Notation.double_colon := layout;
  }.
  
  Global Instance I : Root.ink.storage.traits.StorageLayout.Trait Self := {
    Root.ink.storage.traits.StorageLayout.layout := layout;
  }.
End Impl_Root_ink_storage_traits_StorageLayout_for_CallBuilder.

Definition _ : unit := run (tt).

Module Impl_Root_ink_codegen_ContractCallBuilder_for_Flipper.
  Definition Self := Flipper.
  
  Definition Type : Set := CallBuilder.
  
  Global Instance I : Root.ink.codegen.ContractCallBuilder.Trait Self := {
  }.
End Impl_Root_ink_codegen_ContractCallBuilder_for_Flipper.

Module Impl_Root_ink_env_ContractEnv_for_CallBuilder.
  Definition Self := CallBuilder.
  
  Definition Env : Set := Root.ink.env.ContractEnv.Env.
  
  Global Instance I : Root.ink.env.ContractEnv.Trait Self := {
  }.
End Impl_Root_ink_env_ContractEnv_for_CallBuilder.

Module Impl_Root_ink_env_call_FromAccountId_for_CallBuilder.
  Definition Self := CallBuilder.
  
  Definition from_account_id (account_id : AccountId) : Self :=
    {| Self.account_id := account_id; |}.
  
  Global Instance AssociatedFunction_from_account_id :
    Notation.DoubleColon Self "from_account_id" := {
    Notation.double_colon := from_account_id;
  }.
  
  Global Instance I : Root.ink.env.call.FromAccountId.Trait Self Environment :=
    {
    Root.ink.env.call.FromAccountId.from_account_id := from_account_id;
  }.
End Impl_Root_ink_env_call_FromAccountId_for_CallBuilder.

Module Impl_Root_ink_ToAccountId_for_CallBuilder.
  Definition Self := CallBuilder.
  
  Definition to_account_id (self : ref Self) : AccountId :=
    Root.core.clone.Clone.clone (addr_of self.["account_id"]).
  
  Global Instance Method_to_account_id : Notation.Dot "to_account_id" := {
    Notation.dot := to_account_id;
  }.
  
  Global Instance I : Root.ink.ToAccountId.Trait Self Environment := {
    Root.ink.ToAccountId.to_account_id := to_account_id;
  }.
End Impl_Root_ink_ToAccountId_for_CallBuilder.

Module Impl_Root_core_convert_AsRef_for_CallBuilder.
  Definition Self := CallBuilder.
  
  Definition as_ref (self : ref Self) : ref AccountId :=
    addr_of self.["account_id"].
  
  Global Instance Method_as_ref : Notation.Dot "as_ref" := {
    Notation.dot := as_ref;
  }.
  
  Global Instance I : Root.core.convert.AsRef.Trait Self AccountId := {
    Root.core.convert.AsRef.as_ref := as_ref;
  }.
End Impl_Root_core_convert_AsRef_for_CallBuilder.

Module Impl_Root_core_convert_AsMut_for_CallBuilder.
  Definition Self := CallBuilder.
  
  Definition as_mut (self : mut_ref Self) : mut_ref AccountId :=
    addr_of self.["account_id"].
  
  Global Instance Method_as_mut : Notation.Dot "as_mut" := {
    Notation.dot := as_mut;
  }.
  
  Global Instance I : Root.core.convert.AsMut.Trait Self AccountId := {
    Root.core.convert.AsMut.as_mut := as_mut;
  }.
End Impl_Root_core_convert_AsMut_for_CallBuilder.

Module ImplCallBuilder.
  Definition Self := CallBuilder.
  
  Definition flip
      (self : mut_ref Self)
      :
        Root.ink.env.call.CallBuilder
          Environment
          (Root.ink.env.call.utils.Set (Root.ink.env.call.Call Environment))
          (Root.ink.env.call.utils.Set
            (Root.ink.env.call.ExecutionInput
              Root.ink.env.call.utils.EmptyArgumentList))
          (Root.ink.env.call.utils.Set
            (Root.ink.env.call.utils.ReturnType unit)) :=
    (((Root.ink.env.call.build_call tt).["call"]
          (Root.ink.ToAccountId.to_account_id self)).["exec_input"]
        (Root.ink.env.call.ExecutionInput::["new"]
          (Root.ink.env.call.Selector::["new"]
            [ 99; 58; 165; 81 ]))).["returns"].
  
  Global Instance Method_flip : Notation.Dot "flip" := {
    Notation.dot := flip;
  }.
  
  Definition get
      (self : ref Self)
      :
        Root.ink.env.call.CallBuilder
          Environment
          (Root.ink.env.call.utils.Set (Root.ink.env.call.Call Environment))
          (Root.ink.env.call.utils.Set
            (Root.ink.env.call.ExecutionInput
              Root.ink.env.call.utils.EmptyArgumentList))
          (Root.ink.env.call.utils.Set
            (Root.ink.env.call.utils.ReturnType bool)) :=
    (((Root.ink.env.call.build_call tt).["call"]
          (Root.ink.ToAccountId.to_account_id self)).["exec_input"]
        (Root.ink.env.call.ExecutionInput::["new"]
          (Root.ink.env.call.Selector::["new"]
            [ 47; 134; 91; 217 ]))).["returns"].
  
  Global Instance Method_get : Notation.Dot "get" := {
    Notation.dot := get;
  }.
End ImplCallBuilder.

Module FlipperRef.
  Record t : Set := {
    inner : Root.ink.codegen.ContractCallBuilder.Type;
  }.
  
  Global Instance Get_inner : Notation.Dot "inner" := {
    Notation.dot '(Build_t x0) := x0;
  }.
End FlipperRef.
Definition FlipperRef : Set := FlipperRef.t.

Module Impl__crate_fmt_Debug_for_FlipperRef.
  Definition Self := FlipperRef.
  
  Definition fmt
      (self : ref Self)
      (f : mut_ref _crate.fmt.Formatter)
      : _crate.fmt.Result :=
    _crate.fmt.Formatter::["debug_struct_field1_finish"]
      f
      "FlipperRef"
      "inner"
      (addr_of (addr_of self.["inner"])).
  
  Global Instance Method_fmt : Notation.Dot "fmt" := {
    Notation.dot := fmt;
  }.
  
  Global Instance I : _crate.fmt.Debug.Trait Self := {
    _crate.fmt.Debug.fmt := fmt;
  }.
End Impl__crate_fmt_Debug_for_FlipperRef.

Definition _ : unit := run (tt).

Module Impl_Root_scale_Encode_for_FlipperRef.
  Definition Self := FlipperRef.
  
  Definition encode_to
      (self : ref Self)
      (__codec_dest_edqy : mut_ref __CodecOutputEdqy)
      : unit :=
    Root.scale.Encode.encode_to
      (addr_of (addr_of self.["inner"]))
      __codec_dest_edqy.
  
  Global Instance Method_encode_to : Notation.Dot "encode_to" := {
    Notation.dot := encode_to;
  }.
  
  Definition encode
      (self : ref Self)
      : Root.scale.alloc.vec.Vec Root.core.primitive.u8 :=
    Root.scale.Encode.encode (addr_of (addr_of self.["inner"])).
  
  Global Instance Method_encode : Notation.Dot "encode" := {
    Notation.dot := encode;
  }.
  
  Definition using_encoded (self : ref Self) (f : F) : R :=
    Root.scale.Encode.using_encoded (addr_of (addr_of self.["inner"])) f.
  
  Global Instance Method_using_encoded : Notation.Dot "using_encoded" := {
    Notation.dot := using_encoded;
  }.
  
  Global Instance I : Root.scale.Encode.Trait Self := {
  }.
End Impl_Root_scale_Encode_for_FlipperRef.

Module Impl_Root_scale_EncodeLike_for_FlipperRef.
  Definition Self := FlipperRef.
  
  Global Instance I : Root.scale.EncodeLike.Trait Self :=
    Root.scale.EncodeLike.Build_Class _.
End Impl_Root_scale_EncodeLike_for_FlipperRef.

Definition _ : unit := run (tt).

Module Impl_Root_scale_Decode_for_FlipperRef.
  Definition Self := FlipperRef.
  
  Definition decode
      (__codec_input_edqy : mut_ref __CodecInputEdqy)
      : Root.core.result.Result Self Root.scale.Error :=
    Root.core.result.Result.Ok
      {|
        FlipperRef.inner :=
          let __codec_res_edqy := Root.scale.Decode.decode __codec_input_edqy in
          match __codec_res_edqy with
          | Root.core.result.Result.Err e =>
            Return
              (Root.core.result.Result.Err
                (e.["chain"] "Could not decode `FlipperRef::inner`"))
          | Root.core.result.Result.Ok __codec_res_edqy => __codec_res_edqy
          end;
      |}.
  
  Global Instance AssociatedFunction_decode :
    Notation.DoubleColon Self "decode" := {
    Notation.double_colon := decode;
  }.
  
  Global Instance I : Root.scale.Decode.Trait Self := {
    Root.scale.Decode.decode := decode;
  }.
End Impl_Root_scale_Decode_for_FlipperRef.

Module Impl__crate_hash_Hash_for_FlipperRef.
  Definition Self := FlipperRef.
  
  Definition hash (self : ref Self) (state : mut_ref __H) : unit :=
    _crate.hash.Hash.hash (addr_of self.["inner"]) state.
  
  Global Instance Method_hash : Notation.Dot "hash" := {
    Notation.dot := hash;
  }.
  
  Global Instance I : _crate.hash.Hash.Trait Self := {
    _crate.hash.Hash.hash := hash;
  }.
End Impl__crate_hash_Hash_for_FlipperRef.

Module Impl__crate_marker_StructuralPartialEq_for_FlipperRef.
  Definition Self := FlipperRef.
  
  Global Instance I : _crate.marker.StructuralPartialEq.Trait Self :=
    _crate.marker.StructuralPartialEq.Build_Class _.
End Impl__crate_marker_StructuralPartialEq_for_FlipperRef.

Module Impl__crate_cmp_PartialEq_for_FlipperRef.
  Definition Self := FlipperRef.
  
  Definition eq (self : ref Self) (other : ref FlipperRef) : bool :=
    self.["inner"].["eq"] other.["inner"].
  
  Global Instance Method_eq : Notation.Dot "eq" := {
    Notation.dot := eq;
  }.
  
  Global Instance I : _crate.cmp.PartialEq.Trait Self := {
    _crate.cmp.PartialEq.eq := eq;
  }.
End Impl__crate_cmp_PartialEq_for_FlipperRef.

Module Impl__crate_marker_StructuralEq_for_FlipperRef.
  Definition Self := FlipperRef.
  
  Global Instance I : _crate.marker.StructuralEq.Trait Self :=
    _crate.marker.StructuralEq.Build_Class _.
End Impl__crate_marker_StructuralEq_for_FlipperRef.

Module Impl__crate_cmp_Eq_for_FlipperRef.
  Definition Self := FlipperRef.
  
  Definition assert_receiver_is_total_eq (self : ref Self) : unit :=
    let _ := tt in
    tt.
  
  Global Instance Method_assert_receiver_is_total_eq :
    Notation.Dot "assert_receiver_is_total_eq" := {
    Notation.dot := assert_receiver_is_total_eq;
  }.
  
  Global Instance I : _crate.cmp.Eq.Trait Self := {
  }.
End Impl__crate_cmp_Eq_for_FlipperRef.

Module Impl__crate_clone_Clone_for_FlipperRef.
  Definition Self := FlipperRef.
  
  Definition clone (self : ref Self) : FlipperRef :=
    {| FlipperRef.inner := _crate.clone.Clone.clone (addr_of self.["inner"]);
    |}.
  
  Global Instance Method_clone : Notation.Dot "clone" := {
    Notation.dot := clone;
  }.
  
  Global Instance I : _crate.clone.Clone.Trait Self := {
    _crate.clone.Clone.clone := clone;
  }.
End Impl__crate_clone_Clone_for_FlipperRef.

Definition _ : unit := run (tt).

Module Impl_Root_scale_info_TypeInfo_for_FlipperRef.
  Definition Self := FlipperRef.
  
  Definition Identity : Set := Self.
  
  Definition type_info (_ : unit) : Root.scale_info.Type :=
    (((Root.scale_info.Type::["builder"] tt).["path"]
          (Root.scale_info.Path::["new"]
            "FlipperRef"
            "flipper::flipper")).["type_params"]
        (_crate.vec.Vec::["new"] tt)).["composite"]
      ((Root.scale_info.build.Fields::["named"] tt).["field"]
        (fun f =>
          (f.["ty"].["name"] "inner").["type_name"]
            "<Flipper as::ink::codegen::ContractCallBuilder>::Type")).
  
  Global Instance AssociatedFunction_type_info :
    Notation.DoubleColon Self "type_info" := {
    Notation.double_colon := type_info;
  }.
  
  Global Instance I : Root.scale_info.TypeInfo.Trait Self := {
    Root.scale_info.TypeInfo.type_info := type_info;
  }.
End Impl_Root_scale_info_TypeInfo_for_FlipperRef.

Definition _ : unit := run (tt).

Module Impl_Root_ink_storage_traits_StorageLayout_for_FlipperRef.
  Definition Self := FlipperRef.
  
  Definition layout
      (__key : ref Root.ink.primitives.Key)
      : Root.ink.metadata.layout.Layout :=
    Root.ink.metadata.layout.Layout.Struct
      (Root.ink.metadata.layout.StructLayout::["new"]
        "FlipperRef"
        [
          Root.ink.metadata.layout.FieldLayout::["new"]
            "inner"
            (Root.ink.storage.traits.StorageLayout.layout __key)
        ]).
  
  Global Instance AssociatedFunction_layout :
    Notation.DoubleColon Self "layout" := {
    Notation.double_colon := layout;
  }.
  
  Global Instance I : Root.ink.storage.traits.StorageLayout.Trait Self := {
    Root.ink.storage.traits.StorageLayout.layout := layout;
  }.
End Impl_Root_ink_storage_traits_StorageLayout_for_FlipperRef.

Definition _ : unit := run (tt).

Module Impl_Root_ink_env_ContractReference_for_Flipper.
  Definition Self := Flipper.
  
  Definition Type : Set := FlipperRef.
  
  Global Instance I : Root.ink.env.ContractReference.Trait Self := {
  }.
End Impl_Root_ink_env_ContractReference_for_Flipper.

Module Impl_Root_ink_env_call_ConstructorReturnType_for_Flipper.
  Definition Self := Flipper.
  
  Definition Output : Set := FlipperRef.
  
  Definition Error : Set := unit.
  
  Definition ok (value : FlipperRef) : ImplSelf.Output := value.
  
  Global Instance AssociatedFunction_ok : Notation.DoubleColon Self "ok" := {
    Notation.double_colon := ok;
  }.
  
  Global Instance I
      :
      Root.ink.env.call.ConstructorReturnType.Trait
      Self
      FlipperRef :=
    {
    Root.ink.env.call.ConstructorReturnType.ok := ok;
  }.
End Impl_Root_ink_env_call_ConstructorReturnType_for_Flipper.

Module
    Impl_Root_ink_env_call_ConstructorReturnType_for_Root_core_result_Result_Flipper_E.
  Definition Self := Root.core.result.Result Flipper E.
  
  Definition IS_RESULT := true.
  
  Global Instance AssociatedFunction_IS_RESULT :
    Notation.DoubleColon Self "IS_RESULT" := {
    Notation.double_colon := IS_RESULT;
  }.
  
  Definition Output : Set := Root.core.result.Result FlipperRef E.
  
  Definition Error : Set := E.
  
  Definition ok (value : FlipperRef) : ImplSelf.Output :=
    Root.core.result.Result.Ok value.
  
  Global Instance AssociatedFunction_ok : Notation.DoubleColon Self "ok" := {
    Notation.double_colon := ok;
  }.
  
  Definition err
      (err : ImplSelf.Error)
      : Root.core.option.Option ImplSelf.Output :=
    Root.core.option.Option.Some (Root.core.result.Result.Err err).
  
  Global Instance AssociatedFunction_err : Notation.DoubleColon Self "err" := {
    Notation.double_colon := err;
  }.
  
  Global Instance I
      E
      :
      Root.ink.env.call.ConstructorReturnType.Trait
      Self
      FlipperRef :=
    {
    Root.ink.env.call.ConstructorReturnType.ok := ok;
  }.
End
  Impl_Root_ink_env_call_ConstructorReturnType_for_Root_core_result_Result_Flipper_E.

Module Impl_Root_ink_env_ContractEnv_for_FlipperRef.
  Definition Self := FlipperRef.
  
  Definition Env : Set := Root.ink.env.ContractEnv.Env.
  
  Global Instance I : Root.ink.env.ContractEnv.Trait Self := {
  }.
End Impl_Root_ink_env_ContractEnv_for_FlipperRef.

Module ImplFlipperRef_2.
  Definition Self := FlipperRef.
  
  Definition new
      (__ink_binding_0 : bool)
      :
        Root.ink.env.call.CreateBuilder
          Environment
          Self
          (Root.ink.env.call.utils.Unset Hash)
          (Root.ink.env.call.utils.Unset u64)
          (Root.ink.env.call.utils.Unset Balance)
          (Root.ink.env.call.utils.Set
            (Root.ink.env.call.ExecutionInput
              (Root.ink.env.call.utils.ArgumentList
                (Root.ink.env.call.utils.Argument bool)
                Root.ink.env.call.utils.EmptyArgumentList)))
          (Root.ink.env.call.utils.Unset Root.ink.env.call.state.Salt)
          (Root.ink.env.call.utils.Set
            (Root.ink.env.call.utils.ReturnType Self)) :=
    ((Root.ink.env.call.build_create tt).["exec_input"]
        ((Root.ink.env.call.ExecutionInput::["new"]
            (Root.ink.env.call.Selector::["new"]
              [ 155; 174; 157; 94 ])).["push_arg"]
          __ink_binding_0)).["returns"].
  
  Global Instance AssociatedFunction_new : Notation.DoubleColon Self "new" := {
    Notation.double_colon := new;
  }.
  
  Definition new_default
      (_ : unit)
      :
        Root.ink.env.call.CreateBuilder
          Environment
          Self
          (Root.ink.env.call.utils.Unset Hash)
          (Root.ink.env.call.utils.Unset u64)
          (Root.ink.env.call.utils.Unset Balance)
          (Root.ink.env.call.utils.Set
            (Root.ink.env.call.ExecutionInput
              Root.ink.env.call.utils.EmptyArgumentList))
          (Root.ink.env.call.utils.Unset Root.ink.env.call.state.Salt)
          (Root.ink.env.call.utils.Set
            (Root.ink.env.call.utils.ReturnType Self)) :=
    ((Root.ink.env.call.build_create tt).["exec_input"]
        (Root.ink.env.call.ExecutionInput::["new"]
          (Root.ink.env.call.Selector::["new"]
            [ 97; 239; 126; 62 ]))).["returns"].
  
  Global Instance AssociatedFunction_new_default :
    Notation.DoubleColon Self "new_default" := {
    Notation.double_colon := new_default;
  }.
  
  Definition flip (self : mut_ref Self) : unit :=
    self.["try_flip"].["unwrap_or_else"]
      (fun error =>
        _crate.panicking.panic_fmt
          (format_arguments::["new_v1"]
            (addr_of [ "encountered error while calling Flipper::flip: " ])
            (addr_of [ format_argument::["new_debug"] (addr_of error) ]))).
  
  Global Instance Method_flip : Notation.Dot "flip" := {
    Notation.dot := flip;
  }.
  
  Definition try_flip (self : mut_ref Self) : Root.ink.MessageResult unit :=
    (Root.ink.codegen.TraitCallBuilder.call_mut
            self).["flip"].["try_invoke"].["unwrap_or_else"]
      (fun error =>
        _crate.panicking.panic_fmt
          (format_arguments::["new_v1"]
            (addr_of [ "encountered error while calling Flipper::flip: " ])
            (addr_of [ format_argument::["new_debug"] (addr_of error) ]))).
  
  Global Instance Method_try_flip : Notation.Dot "try_flip" := {
    Notation.dot := try_flip;
  }.
  
  Definition get (self : ref Self) : bool :=
    self.["try_get"].["unwrap_or_else"]
      (fun error =>
        _crate.panicking.panic_fmt
          (format_arguments::["new_v1"]
            (addr_of [ "encountered error while calling Flipper::get: " ])
            (addr_of [ format_argument::["new_debug"] (addr_of error) ]))).
  
  Global Instance Method_get : Notation.Dot "get" := {
    Notation.dot := get;
  }.
  
  Definition try_get (self : ref Self) : Root.ink.MessageResult bool :=
    (Root.ink.codegen.TraitCallBuilder.call
            self).["get"].["try_invoke"].["unwrap_or_else"]
      (fun error =>
        _crate.panicking.panic_fmt
          (format_arguments::["new_v1"]
            (addr_of [ "encountered error while calling Flipper::get: " ])
            (addr_of [ format_argument::["new_debug"] (addr_of error) ]))).
  
  Global Instance Method_try_get : Notation.Dot "try_get" := {
    Notation.dot := try_get;
  }.
End ImplFlipperRef_2.

Definition _ : unit := run (tt).

Module Impl_Root_ink_codegen_TraitCallBuilder_for_FlipperRef.
  Definition Self := FlipperRef.
  
  Definition Builder : Set := Root.ink.codegen.ContractCallBuilder.Type.
  
  Definition call (self : ref Self) : ref ImplSelf.Builder :=
    addr_of self.["inner"].
  
  Global Instance Method_call : Notation.Dot "call" := {
    Notation.dot := call;
  }.
  
  Definition call_mut (self : mut_ref Self) : mut_ref ImplSelf.Builder :=
    addr_of self.["inner"].
  
  Global Instance Method_call_mut : Notation.Dot "call_mut" := {
    Notation.dot := call_mut;
  }.
  
  Global Instance I : Root.ink.codegen.TraitCallBuilder.Trait Self := {
    Root.ink.codegen.TraitCallBuilder.call := call;
    Root.ink.codegen.TraitCallBuilder.call_mut := call_mut;
  }.
End Impl_Root_ink_codegen_TraitCallBuilder_for_FlipperRef.

Module Impl_Root_ink_env_call_FromAccountId_for_FlipperRef.
  Definition Self := FlipperRef.
  
  Definition from_account_id (account_id : AccountId) : Self :=
    {| Self.inner := Root.ink.env.call.FromAccountId.from_account_id account_id;
    |}.
  
  Global Instance AssociatedFunction_from_account_id :
    Notation.DoubleColon Self "from_account_id" := {
    Notation.double_colon := from_account_id;
  }.
  
  Global Instance I : Root.ink.env.call.FromAccountId.Trait Self Environment :=
    {
    Root.ink.env.call.FromAccountId.from_account_id := from_account_id;
  }.
End Impl_Root_ink_env_call_FromAccountId_for_FlipperRef.

Module Impl_Root_ink_ToAccountId_for_FlipperRef.
  Definition Self := FlipperRef.
  
  Definition to_account_id (self : ref Self) : AccountId :=
    Root.ink.ToAccountId.to_account_id (addr_of self.["inner"]).
  
  Global Instance Method_to_account_id : Notation.Dot "to_account_id" := {
    Notation.dot := to_account_id;
  }.
  
  Global Instance I : Root.ink.ToAccountId.Trait Self Environment := {
    Root.ink.ToAccountId.to_account_id := to_account_id;
  }.
End Impl_Root_ink_ToAccountId_for_FlipperRef.

Module Impl_Root_core_convert_AsRef_for_FlipperRef.
  Definition Self := FlipperRef.
  
  Definition as_ref (self : ref Self) : ref AccountId :=
    Root.core.convert.AsRef.as_ref (addr_of self.["inner"]).
  
  Global Instance Method_as_ref : Notation.Dot "as_ref" := {
    Notation.dot := as_ref;
  }.
  
  Global Instance I : Root.core.convert.AsRef.Trait Self AccountId := {
    Root.core.convert.AsRef.as_ref := as_ref;
  }.
End Impl_Root_core_convert_AsRef_for_FlipperRef.

Module Impl_Root_core_convert_AsMut_for_FlipperRef.
  Definition Self := FlipperRef.
  
  Definition as_mut (self : mut_ref Self) : mut_ref AccountId :=
    Root.core.convert.AsMut.as_mut (addr_of self.["inner"]).
  
  Global Instance Method_as_mut : Notation.Dot "as_mut" := {
    Notation.dot := as_mut;
  }.
  
  Global Instance I : Root.core.convert.AsMut.Trait Self AccountId := {
    Root.core.convert.AsMut.as_mut := as_mut;
  }.
End Impl_Root_core_convert_AsMut_for_FlipperRef.

Definition _ : unit := run (tt).

Definition __ink_generate_metadata (_ : unit) : Root.ink.metadata.InkProject :=
  let layout :=
    Root.ink.metadata.layout.Layout.Root
      (Root.ink.metadata.layout.RootLayout::["new"]
        (Root.core.convert.From.from Root.ink.storage.traits.StorageKey.KEY)
        (Root.ink.storage.traits.StorageLayout.layout
          (addr_of Root.ink.storage.traits.StorageKey.KEY))) in
  let _ :=
    (Root.ink.metadata.layout.ValidateLayout::["validate"]
        (addr_of layout)).["unwrap_or_else"]
      (fun error =>
        _crate.panicking.panic_fmt
          (format_arguments::["new_v1"]
            (addr_of [ "metadata ink! generation failed: " ])
            (addr_of [ format_argument::["new_display"] (addr_of error) ]))) in
  Root.ink.metadata.InkProject::["new"]
    layout
    (((((((Root.ink.metadata.ContractSpec::["new"] tt).["constructors"]
                  [
                    (((((((Root.ink.metadata.ConstructorSpec::["from_label"]
                                    "new").["selector"]
                                  [ 155; 174; 157; 94 ]).["args"]
                                [
                                  ((Root.ink.metadata.MessageParamSpec::["new"]
                                        "init_value").["of_type"]
                                      (Root.ink.metadata.TypeSpec::["with_name_segs"]
                                        (Root.core.iter.Iterator.map
                                          (Root.core.iter.IntoIterator.into_iter
                                            [ "bool" ])
                                          Root.core.convert.AsRef.as_ref))).["done"]
                                ]).["payable"]
                              false).["default"]
                            false).["returns"]
                          (Root.ink.metadata.ReturnTypeSpec::["new"]
                            (if
                              (Root.ink.reflect.DispatchableConstructorInfo.IS_RESULT
                              : bool)
                            then
                              Root.core.option.Option.Some
                                (Root.ink.metadata.TypeSpec::["with_name_str"]
                                  "ink_primitives::ConstructorResult")
                            else
                              Root.core.option.Option.Some
                                (Root.ink.metadata.TypeSpec::["with_name_str"]
                                  "ink_primitives::ConstructorResult")))).["docs"]
                        [
                          " Creates a new flipper smart contract initialized with the given value."
                        ]).["done"];
                    (((((((Root.ink.metadata.ConstructorSpec::["from_label"]
                                    "new_default").["selector"]
                                  [ 97; 239; 126; 62 ]).["args"]
                                [ ]).["payable"]
                              false).["default"]
                            false).["returns"]
                          (Root.ink.metadata.ReturnTypeSpec::["new"]
                            (if
                              (Root.ink.reflect.DispatchableConstructorInfo.IS_RESULT
                              : bool)
                            then
                              Root.core.option.Option.Some
                                (Root.ink.metadata.TypeSpec::["with_name_str"]
                                  "ink_primitives::ConstructorResult")
                            else
                              Root.core.option.Option.Some
                                (Root.ink.metadata.TypeSpec::["with_name_str"]
                                  "ink_primitives::ConstructorResult")))).["docs"]
                        [
                          " Creates a new flipper smart contract initialized to `false`."
                        ]).["done"]
                  ]).["messages"]
                [
                  ((((((((Root.ink.metadata.MessageSpec::["from_label"]
                                    "flip").["selector"]
                                  [ 99; 58; 165; 81 ]).["args"]
                                [ ]).["returns"]
                              (Root.ink.metadata.ReturnTypeSpec::["new"]
                                (Root.ink.metadata.TypeSpec::["with_name_segs"]
                                  (Root.core.iter.Iterator.map
                                    (Root.core.iter.IntoIterator.into_iter
                                      [ "ink"; "MessageResult" ])
                                    Root.core.convert.AsRef.as_ref)))).["mutates"]
                            true).["payable"]
                          false).["default"]
                        false).["docs"]
                      [ " Flips the current value of the Flipper's boolean."
                      ]).["done"];
                  ((((((((Root.ink.metadata.MessageSpec::["from_label"]
                                    "get").["selector"]
                                  [ 47; 134; 91; 217 ]).["args"]
                                [ ]).["returns"]
                              (Root.ink.metadata.ReturnTypeSpec::["new"]
                                (Root.ink.metadata.TypeSpec::["with_name_segs"]
                                  (Root.core.iter.Iterator.map
                                    (Root.core.iter.IntoIterator.into_iter
                                      [ "ink"; "MessageResult" ])
                                    Root.core.convert.AsRef.as_ref)))).["mutates"]
                            false).["payable"]
                          false).["default"]
                        false).["docs"]
                      [ " Returns the current value of the Flipper's boolean."
                      ]).["done"]
                ]).["events"]
              [ ]).["docs"]
            [ ]).["lang_error"]
          (Root.ink.metadata.TypeSpec::["with_name_segs"]
            (Root.core.iter.Iterator.map
              (Root.core.iter.IntoIterator.into_iter [ "ink"; "LangError" ])
              Root.core.convert.AsRef.as_ref))).["environment"]
        ((((((((Root.ink.metadata.EnvironmentSpec::["new"] tt).["account_id"]
                        (Root.ink.metadata.TypeSpec::["with_name_segs"]
                          (Root.core.iter.Iterator.map
                            (Root.core.iter.IntoIterator.into_iter
                              [ "AccountId" ])
                            Root.core.convert.AsRef.as_ref))).["balance"]
                      (Root.ink.metadata.TypeSpec::["with_name_segs"]
                        (Root.core.iter.Iterator.map
                          (Root.core.iter.IntoIterator.into_iter [ "Balance" ])
                          Root.core.convert.AsRef.as_ref))).["hash"]
                    (Root.ink.metadata.TypeSpec::["with_name_segs"]
                      (Root.core.iter.Iterator.map
                        (Root.core.iter.IntoIterator.into_iter [ "Hash" ])
                        Root.core.convert.AsRef.as_ref))).["timestamp"]
                  (Root.ink.metadata.TypeSpec::["with_name_segs"]
                    (Root.core.iter.Iterator.map
                      (Root.core.iter.IntoIterator.into_iter [ "Timestamp" ])
                      Root.core.convert.AsRef.as_ref))).["block_number"]
                (Root.ink.metadata.TypeSpec::["with_name_segs"]
                  (Root.core.iter.Iterator.map
                    (Root.core.iter.IntoIterator.into_iter [ "BlockNumber" ])
                    Root.core.convert.AsRef.as_ref))).["chain_extension"]
              (Root.ink.metadata.TypeSpec::["with_name_segs"]
                (Root.core.iter.Iterator.map
                  (Root.core.iter.IntoIterator.into_iter [ "ChainExtension" ])
                  Root.core.convert.AsRef.as_ref))).["max_event_topics"]
            MAX_EVENT_TOPICS).["done"]).["done"].
