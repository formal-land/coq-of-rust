(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module my.
  Module OpenBox.
    Record t : Set := {
      contents : T;
    }.
    
    Global Instance Get_contents : Notation.Dot "contents" := {
      Notation.dot '(Build_t x0) := x0;
    }.
  End OpenBox.
  Definition OpenBox : Set := OpenBox.t.
  
  Module ClosedBox.
    Record t : Set := {
      contents : T;
    }.
    
    Global Instance Get_contents : Notation.Dot "contents" := {
      Notation.dot '(Build_t x0) := x0;
    }.
  End ClosedBox.
  Definition ClosedBox : Set := ClosedBox.t.
  
  Module Impl_struct_visibility_my_ClosedBox_T.
    Definition Self := struct_visibility.my.ClosedBox T.
    
    Parameter new : T -> M (struct_visibility.my.ClosedBox T).
    
    Global Instance AssociatedFunction_new :
      Notation.DoubleColon Self "new" := {
      Notation.double_colon := new;
    }.
  End Impl_struct_visibility_my_ClosedBox_T.
End my.

Module OpenBox.
  Record t : Set := {
    contents : T;
  }.
  
  Global Instance Get_contents : Notation.Dot "contents" := {
    Notation.dot '(Build_t x0) := x0;
  }.
End OpenBox.
Definition OpenBox : Set := OpenBox.t.

Module ClosedBox.
  Record t : Set := {
    contents : T;
  }.
  
  Global Instance Get_contents : Notation.Dot "contents" := {
    Notation.dot '(Build_t x0) := x0;
  }.
End ClosedBox.
Definition ClosedBox : Set := ClosedBox.t.

Module Impl_struct_visibility_my_ClosedBox_T_2.
  Definition Self := struct_visibility.my.ClosedBox T.
  
  Parameter new : T -> M (struct_visibility.my.ClosedBox T).
  
  Global Instance AssociatedFunction_new : Notation.DoubleColon Self "new" := {
    Notation.double_colon := new;
  }.
End Impl_struct_visibility_my_ClosedBox_T_2.

(* #[allow(dead_code)] - function was ignored by the compiler *)
Parameter main : unit -> M unit.
