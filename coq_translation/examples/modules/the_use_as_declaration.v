(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Import Root.std.prelude.rust_2015.

Module other_function := deeply.nested.function.

Definition function (_ : unit) : unit :=
  let _ :=
    let _ :=
      _crate.io._print
        (format_arguments::["new_const"] [ "called `function()`
" ]) in
    tt in
  tt.

Module deeply.
  Module nested.
    Definition function (_ : unit) : unit :=
      let _ :=
        let _ :=
          _crate.io._print
            (format_arguments::["new_const"]
              [ "called `deeply::nested::function()`
" ]) in
        tt in
      tt.
  End nested.
End deeply.

Module nested.
  Definition function (_ : unit) : unit :=
    let _ :=
      let _ :=
        _crate.io._print
          (format_arguments::["new_const"]
            [ "called `deeply::nested::function()`
" ]) in
      tt in
    tt.
End nested.

Definition function (_ : unit) : unit :=
  let _ :=
    let _ :=
      _crate.io._print
        (format_arguments::["new_const"]
          [ "called `deeply::nested::function()`
" ]) in
    tt in
  tt.

(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main (_ : unit) : unit :=
  let _ := other_function tt in
  let _ :=
    let _ :=
      _crate.io._print
        (format_arguments::["new_const"] [ "Entering block
" ]) in
    tt in
  let _ :=
    let _ := function tt in
    let _ :=
      let _ :=
        _crate.io._print
          (format_arguments::["new_const"] [ "Leaving block
" ]) in
      tt in
    tt in
  let _ := function tt in
  tt.

Module function := crate.deeply.nested.function.
