(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Import Root.std.prelude.rust_2015.

Module my_mod.
  Definition private_function (_ : unit) : M unit :=
    let* α0 :=
      format_arguments::["new_const"]
        (deref [ "called `my_mod::private_function()`
" ]) in
    let* _ := _crate.io._print α0 in
    let _ := tt in
    Pure tt.
  
  Definition function (_ : unit) : M unit :=
    let* α0 :=
      format_arguments::["new_const"]
        (deref [ "called `my_mod::function()`
" ]) in
    let* _ := _crate.io._print α0 in
    let _ := tt in
    Pure tt.
  
  Definition indirect_access (_ : unit) : M unit :=
    let* α0 :=
      format_arguments::["new_const"]
        (deref [ "called `my_mod::indirect_access()`, that
> " ]) in
    let* _ := _crate.io._print α0 in
    let _ := tt in
    let* _ := private_function tt in
    Pure tt.
  
  Module nested.
    Definition function (_ : unit) : M unit :=
      let* α0 :=
        format_arguments::["new_const"]
          (deref [ "called `my_mod::nested::function()`
" ]) in
      let* _ := _crate.io._print α0 in
      let _ := tt in
      Pure tt.
    
    (* #[allow(dead_code)] - function was ignored by the compiler *)
    Definition private_function (_ : unit) : M unit :=
      let* α0 :=
        format_arguments::["new_const"]
          (deref [ "called `my_mod::nested::private_function()`
" ]) in
      let* _ := _crate.io._print α0 in
      let _ := tt in
      Pure tt.
    
    Definition public_function_in_my_mod (_ : unit) : M unit :=
      let* α0 :=
        format_arguments::["new_const"]
          (deref
            [ "called `my_mod::nested::public_function_in_my_mod()`, that
> "
            ]) in
      let* _ := _crate.io._print α0 in
      let _ := tt in
      let* _ := public_function_in_nested tt in
      Pure tt.
    
    Definition public_function_in_nested (_ : unit) : M unit :=
      let* α0 :=
        format_arguments::["new_const"]
          (deref [ "called `my_mod::nested::public_function_in_nested()`
" ]) in
      let* _ := _crate.io._print α0 in
      let _ := tt in
      Pure tt.
    
    Definition public_function_in_super_mod (_ : unit) : M unit :=
      let* α0 :=
        format_arguments::["new_const"]
          (deref
            [ "called `my_mod::nested::public_function_in_super_mod()`
" ]) in
      let* _ := _crate.io._print α0 in
      let _ := tt in
      Pure tt.
  End nested.
  
  Definition call_public_function_in_my_mod (_ : unit) : M unit :=
    let* α0 :=
      format_arguments::["new_const"]
        (deref
          [ "called `my_mod::call_public_function_in_my_mod()`, that
> " ]) in
    let* _ := _crate.io._print α0 in
    let _ := tt in
    let* _ := nested.public_function_in_my_mod tt in
    let* α1 := format_arguments::["new_const"] (deref [ "> " ]) in
    let* _ := _crate.io._print α1 in
    let _ := tt in
    let* _ := nested.public_function_in_super_mod tt in
    Pure tt.
  
  Definition public_function_in_crate (_ : unit) : M unit :=
    let* α0 :=
      format_arguments::["new_const"]
        (deref [ "called `my_mod::public_function_in_crate()`
" ]) in
    let* _ := _crate.io._print α0 in
    let _ := tt in
    Pure tt.
  
  Module private_nested.
    (* #[allow(dead_code)] - function was ignored by the compiler *)
    Definition function (_ : unit) : M unit :=
      let* α0 :=
        format_arguments::["new_const"]
          (deref [ "called `my_mod::private_nested::function()`
" ]) in
      let* _ := _crate.io._print α0 in
      let _ := tt in
      Pure tt.
    
    (* #[allow(dead_code)] - function was ignored by the compiler *)
    Definition restricted_function (_ : unit) : M unit :=
      let* α0 :=
        format_arguments::["new_const"]
          (deref
            [ "called `my_mod::private_nested::restricted_function()`
" ]) in
      let* _ := _crate.io._print α0 in
      let _ := tt in
      Pure tt.
  End private_nested.
End my_mod.

Definition private_function (_ : unit) : M unit :=
  let* α0 :=
    format_arguments::["new_const"]
      (deref [ "called `my_mod::private_function()`
" ]) in
  let* _ := _crate.io._print α0 in
  let _ := tt in
  Pure tt.

Definition function (_ : unit) : M unit :=
  let* α0 :=
    format_arguments::["new_const"]
      (deref [ "called `my_mod::function()`
" ]) in
  let* _ := _crate.io._print α0 in
  let _ := tt in
  Pure tt.

Definition indirect_access (_ : unit) : M unit :=
  let* α0 :=
    format_arguments::["new_const"]
      (deref [ "called `my_mod::indirect_access()`, that
> " ]) in
  let* _ := _crate.io._print α0 in
  let _ := tt in
  let* _ := private_function tt in
  Pure tt.

Module nested.
  Definition function (_ : unit) : M unit :=
    let* α0 :=
      format_arguments::["new_const"]
        (deref [ "called `my_mod::nested::function()`
" ]) in
    let* _ := _crate.io._print α0 in
    let _ := tt in
    Pure tt.
  
  (* #[allow(dead_code)] - function was ignored by the compiler *)
  Definition private_function (_ : unit) : M unit :=
    let* α0 :=
      format_arguments::["new_const"]
        (deref [ "called `my_mod::nested::private_function()`
" ]) in
    let* _ := _crate.io._print α0 in
    let _ := tt in
    Pure tt.
  
  Definition public_function_in_my_mod (_ : unit) : M unit :=
    let* α0 :=
      format_arguments::["new_const"]
        (deref
          [ "called `my_mod::nested::public_function_in_my_mod()`, that
> "
          ]) in
    let* _ := _crate.io._print α0 in
    let _ := tt in
    let* _ := public_function_in_nested tt in
    Pure tt.
  
  Definition public_function_in_nested (_ : unit) : M unit :=
    let* α0 :=
      format_arguments::["new_const"]
        (deref [ "called `my_mod::nested::public_function_in_nested()`
" ]) in
    let* _ := _crate.io._print α0 in
    let _ := tt in
    Pure tt.
  
  Definition public_function_in_super_mod (_ : unit) : M unit :=
    let* α0 :=
      format_arguments::["new_const"]
        (deref
          [ "called `my_mod::nested::public_function_in_super_mod()`
" ]) in
    let* _ := _crate.io._print α0 in
    let _ := tt in
    Pure tt.
End nested.

Definition function (_ : unit) : M unit :=
  let* α0 :=
    format_arguments::["new_const"]
      (deref [ "called `my_mod::nested::function()`
" ]) in
  let* _ := _crate.io._print α0 in
  let _ := tt in
  Pure tt.

(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition private_function (_ : unit) : M unit :=
  let* α0 :=
    format_arguments::["new_const"]
      (deref [ "called `my_mod::nested::private_function()`
" ]) in
  let* _ := _crate.io._print α0 in
  let _ := tt in
  Pure tt.

Definition public_function_in_my_mod (_ : unit) : M unit :=
  let* α0 :=
    format_arguments::["new_const"]
      (deref
        [ "called `my_mod::nested::public_function_in_my_mod()`, that
> " ]) in
  let* _ := _crate.io._print α0 in
  let _ := tt in
  let* _ := public_function_in_nested tt in
  Pure tt.

Definition public_function_in_nested (_ : unit) : M unit :=
  let* α0 :=
    format_arguments::["new_const"]
      (deref [ "called `my_mod::nested::public_function_in_nested()`
" ]) in
  let* _ := _crate.io._print α0 in
  let _ := tt in
  Pure tt.

Definition public_function_in_super_mod (_ : unit) : M unit :=
  let* α0 :=
    format_arguments::["new_const"]
      (deref [ "called `my_mod::nested::public_function_in_super_mod()`
" ]) in
  let* _ := _crate.io._print α0 in
  let _ := tt in
  Pure tt.

Definition call_public_function_in_my_mod (_ : unit) : M unit :=
  let* α0 :=
    format_arguments::["new_const"]
      (deref
        [ "called `my_mod::call_public_function_in_my_mod()`, that
> " ]) in
  let* _ := _crate.io._print α0 in
  let _ := tt in
  let* _ := nested.public_function_in_my_mod tt in
  let* α1 := format_arguments::["new_const"] (deref [ "> " ]) in
  let* _ := _crate.io._print α1 in
  let _ := tt in
  let* _ := nested.public_function_in_super_mod tt in
  Pure tt.

Definition public_function_in_crate (_ : unit) : M unit :=
  let* α0 :=
    format_arguments::["new_const"]
      (deref [ "called `my_mod::public_function_in_crate()`
" ]) in
  let* _ := _crate.io._print α0 in
  let _ := tt in
  Pure tt.

Module private_nested.
  (* #[allow(dead_code)] - function was ignored by the compiler *)
  Definition function (_ : unit) : M unit :=
    let* α0 :=
      format_arguments::["new_const"]
        (deref [ "called `my_mod::private_nested::function()`
" ]) in
    let* _ := _crate.io._print α0 in
    let _ := tt in
    Pure tt.
  
  (* #[allow(dead_code)] - function was ignored by the compiler *)
  Definition restricted_function (_ : unit) : M unit :=
    let* α0 :=
      format_arguments::["new_const"]
        (deref [ "called `my_mod::private_nested::restricted_function()`
" ]) in
    let* _ := _crate.io._print α0 in
    let _ := tt in
    Pure tt.
End private_nested.

(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition function (_ : unit) : M unit :=
  let* α0 :=
    format_arguments::["new_const"]
      (deref [ "called `my_mod::private_nested::function()`
" ]) in
  let* _ := _crate.io._print α0 in
  let _ := tt in
  Pure tt.

(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition restricted_function (_ : unit) : M unit :=
  let* α0 :=
    format_arguments::["new_const"]
      (deref [ "called `my_mod::private_nested::restricted_function()`
" ]) in
  let* _ := _crate.io._print α0 in
  let _ := tt in
  Pure tt.

Definition function (_ : unit) : M unit :=
  let* α0 :=
    format_arguments::["new_const"] (deref [ "called `function()`
" ]) in
  let* _ := _crate.io._print α0 in
  let _ := tt in
  Pure tt.

(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main (_ : unit) : M unit :=
  let* _ := function tt in
  let* _ := my_mod.function tt in
  let* _ := my_mod.indirect_access tt in
  let* _ := my_mod.nested.function tt in
  let* _ := my_mod.call_public_function_in_my_mod tt in
  let* _ := my_mod.public_function_in_crate tt in
  Pure tt.
