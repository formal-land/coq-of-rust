(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(* #[allow(dead_code)] - struct was ignored by the compiler *)
Module Book.
  Record t : Set := {
    author : ref str;
    title : ref str;
    year : u32;
  }.
  
  Global Instance Get_author : Notation.Dot "author" := {
    Notation.dot '(Build_t x0 _ _) := x0;
  }.
  Global Instance Get_title : Notation.Dot "title" := {
    Notation.dot '(Build_t _ x1 _) := x1;
  }.
  Global Instance Get_year : Notation.Dot "year" := {
    Notation.dot '(Build_t _ _ x2) := x2;
  }.
End Book.
Definition Book : Set := Book.t.

Module Impl_core_clone_Clone_for_scoping_rules_borrowing_mutablity_Book.
  Definition Self := scoping_rules_borrowing_mutablity.Book.
  
  (* #[allow(dead_code)] - function was ignored by the compiler *)
  Parameter clone : ref Self -> M scoping_rules_borrowing_mutablity.Book.
  
  Global Instance Method_clone : Notation.Dot "clone" := {
    Notation.dot := clone;
  }.
  
  Global Instance I : core.clone.Clone.Trait Self := {
    core.clone.Clone.clone := clone;
  }.
End Impl_core_clone_Clone_for_scoping_rules_borrowing_mutablity_Book.

Module Impl_core_marker_Copy_for_scoping_rules_borrowing_mutablity_Book.
  Definition Self := scoping_rules_borrowing_mutablity.Book.
  
  Global Instance I : core.marker.Copy.Trait Self :=
    core.marker.Copy.Build_Trait _.
End Impl_core_marker_Copy_for_scoping_rules_borrowing_mutablity_Book.

Parameter borrow_book : ref scoping_rules_borrowing_mutablity.Book -> M unit.

Parameter new_edition : mut_ref scoping_rules_borrowing_mutablity.Book
    -> M unit.

(* #[allow(dead_code)] - function was ignored by the compiler *)
Parameter main : unit -> M unit.
