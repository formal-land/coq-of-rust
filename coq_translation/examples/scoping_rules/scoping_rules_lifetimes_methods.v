(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module Owner.
  Record t : Set := { _ : i32;}.
  
  Global Instance Get_0 : Notation.Dot 0 := {
    Notation.dot '(Build_t x0) := x0;
  }.
End Owner.
Definition Owner := Owner.t.

Module Impl_scoping_rules_lifetimes_methods_Owner.
  Definition Self := scoping_rules_lifetimes_methods.Owner.
  
<<<<<<< HEAD
  Definition add_one
      `{H : State.Trait}
      (self : mut_ref Self)
      : M (H := H) unit :=
    let* _ := (self.[0]).["add_assign"] 1 in
    Pure tt.
=======
  Parameter add_one : mut_ref Self -> M unit.
>>>>>>> 39940eb (Update examples with --axiomatize (will be reverted soon))
  
  Global Instance Method_add_one `{H : State.Trait} :
    Notation.Dot "add_one" := {
    Notation.dot := add_one;
  }.
  
<<<<<<< HEAD
  Definition print `{H : State.Trait} (self : ref Self) : M (H := H) unit :=
    let* _ :=
      let* _ :=
        let* α0 := format_argument::["new_display"] (addr_of (self.[0])) in
        let* α1 :=
          format_arguments::["new_v1"]
            (addr_of [ "`print`: "; "
" ])
            (addr_of [ α0 ]) in
        std.io.stdio._print α1 in
      Pure tt in
    Pure tt.
=======
  Parameter print : ref Self -> M unit.
>>>>>>> 39940eb (Update examples with --axiomatize (will be reverted soon))
  
  Global Instance Method_print `{H : State.Trait} : Notation.Dot "print" := {
    Notation.dot := print;
  }.
End Impl_scoping_rules_lifetimes_methods_Owner.

(* #[allow(dead_code)] - function was ignored by the compiler *)
<<<<<<< HEAD
Definition main `{H : State.Trait} (_ : unit) : M (H := H) unit :=
  let owner := scoping_rules_lifetimes_methods.Owner.Build_t 18 in
  let* _ := owner.["add_one"] in
  let* _ := owner.["print"] in
  Pure tt.
=======
Parameter main : unit -> M unit.
>>>>>>> 39940eb (Update examples with --axiomatize (will be reverted soon))
