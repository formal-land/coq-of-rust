(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Import Root.std.prelude.rust_2015.

Module Borrowed.
  Record t : Set := { _ : ref i32;}.
  
  Global Instance Get_0 : Notation.Dot 0 := {
    Notation.dot '(Build_t x0) := x0;
  }.
End Borrowed.
Definition Borrowed := Borrowed.t.

Module Impl__crate_fmt_Debug_for_Borrowed.
  Definition Self := Borrowed.
  
  Definition fmt
      (self : ref Self)
      (f : mut_ref _crate.fmt.Formatter)
      : M _crate.fmt.Result :=
    _crate.fmt.Formatter::["debug_tuple_field1_finish"]
      f
      "Borrowed"
      (deref (deref (self.[0]))).
  
  Global Instance Method_fmt : Notation.Dot "fmt" := {
    Notation.dot := fmt;
  }.
  
  Global Instance I : _crate.fmt.Debug.Trait Self := {
    _crate.fmt.Debug.fmt := fmt;
  }.
End Impl__crate_fmt_Debug_for_Borrowed.

Module NamedBorrowed.
  Record t : Set := {
    x : ref i32;
    y : ref i32;
  }.
  
  Global Instance Get_x : Notation.Dot "x" := {
    Notation.dot '(Build_t x0 _) := x0;
  }.
  Global Instance Get_y : Notation.Dot "y" := {
    Notation.dot '(Build_t _ x1) := x1;
  }.
End NamedBorrowed.
Definition NamedBorrowed : Set := NamedBorrowed.t.

Module Impl__crate_fmt_Debug_for_NamedBorrowed.
  Definition Self := NamedBorrowed.
  
  Definition fmt
      (self : ref Self)
      (f : mut_ref _crate.fmt.Formatter)
      : M _crate.fmt.Result :=
    _crate.fmt.Formatter::["debug_struct_field2_finish"]
      f
      "NamedBorrowed"
      "x"
      (deref self.["x"])
      "y"
      (deref (deref self.["y"])).
  
  Global Instance Method_fmt : Notation.Dot "fmt" := {
    Notation.dot := fmt;
  }.
  
  Global Instance I : _crate.fmt.Debug.Trait Self := {
    _crate.fmt.Debug.fmt := fmt;
  }.
End Impl__crate_fmt_Debug_for_NamedBorrowed.

Module Either.
  Inductive t : Set :=
  | Num (_ : i32)
  | Ref (_ : ref i32).
End Either.
Definition Either := Either.t.

Module Impl__crate_fmt_Debug_for_Either.
  Definition Self := Either.
  
  Definition fmt
      (self : ref Self)
      (f : mut_ref _crate.fmt.Formatter)
      : M _crate.fmt.Result :=
    match self with
    | Either.Num __self_0 =>
      _crate.fmt.Formatter::["debug_tuple_field1_finish"]
        f
        "Num"
        (deref __self_0)
    | Either.Ref __self_0 =>
      _crate.fmt.Formatter::["debug_tuple_field1_finish"]
        f
        "Ref"
        (deref __self_0)
    end.
  
  Global Instance Method_fmt : Notation.Dot "fmt" := {
    Notation.dot := fmt;
  }.
  
  Global Instance I : _crate.fmt.Debug.Trait Self := {
    _crate.fmt.Debug.fmt := fmt;
  }.
End Impl__crate_fmt_Debug_for_Either.

(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main (_ : unit) : M unit :=
  let x := 18 in
  let y := 15 in
  let single := Borrowed.Build_t (deref x) in
  let double := {| NamedBorrowed.x := deref x; NamedBorrowed.y := deref y; |} in
  let* reference := Either.Ref (deref x) in
  let* number := Either.Num y in
  let* α0 := format_argument::["new_debug"] (deref single) in
  let* α1 :=
    format_arguments::["new_v1"]
      (deref [ "x is borrowed in "; "
" ])
      (deref [ α0 ]) in
  let* _ := _crate.io._print α1 in
  let _ := tt in
  let* α2 := format_argument::["new_debug"] (deref double) in
  let* α3 :=
    format_arguments::["new_v1"]
      (deref [ "x and y are borrowed in "; "
" ])
      (deref [ α2 ]) in
  let* _ := _crate.io._print α3 in
  let _ := tt in
  let* α4 := format_argument::["new_debug"] (deref reference) in
  let* α5 :=
    format_arguments::["new_v1"]
      (deref [ "x is borrowed in "; "
" ])
      (deref [ α4 ]) in
  let* _ := _crate.io._print α5 in
  let _ := tt in
  let* α6 := format_argument::["new_debug"] (deref number) in
  let* α7 :=
    format_arguments::["new_v1"]
      (deref [ "y is *not* borrowed in "; "
" ])
      (deref [ α6 ]) in
  let* _ := _crate.io._print α7 in
  let _ := tt in
  Pure tt.
