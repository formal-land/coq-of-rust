(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Import Root.std.prelude.rust_2015.

Module mem := std.mem.

(* #[allow(dead_code)] - struct was ignored by the compiler *)
Module Point.
  Record t : Set := {
    x : f64;
    y : f64;
  }.
  
  Global Instance Get_x : Notation.Dot "x" := {
    Notation.dot '(Build_t x0 _) := x0;
  }.
  Global Instance Get_y : Notation.Dot "y" := {
    Notation.dot '(Build_t _ x1) := x1;
  }.
End Point.
Definition Point : Set := Point.t.

Module Impl__crate_fmt_Debug_for_Point.
  Definition Self := Point.
  
  (* #[allow(dead_code)] - function was ignored by the compiler *)
  Definition fmt
      (self : ref Self)
      (f : mut_ref _crate.fmt.Formatter)
      : M _crate.fmt.Result :=
    _crate.fmt.Formatter::["debug_struct_field2_finish"]
      f
      "Point"
      "x"
      (addr_of self.["x"])
      "y"
      (addr_of (addr_of self.["y"])).
  
  Global Instance Method_fmt : Notation.Dot "fmt" := {
    Notation.dot := fmt;
  }.
  
  Global Instance I : _crate.fmt.Debug.Trait Self := {
    _crate.fmt.Debug.fmt := fmt;
  }.
End Impl__crate_fmt_Debug_for_Point.

Module Impl__crate_clone_Clone_for_Point.
  Definition Self := Point.
  
  (* #[allow(dead_code)] - function was ignored by the compiler *)
  Definition clone (self : ref Self) : M Point :=
    let _ := tt in
    self.["deref"].
  
  Global Instance Method_clone : Notation.Dot "clone" := {
    Notation.dot := clone;
  }.
  
  Global Instance I : _crate.clone.Clone.Trait Self := {
    _crate.clone.Clone.clone := clone;
  }.
End Impl__crate_clone_Clone_for_Point.

Module Impl__crate_marker_Copy_for_Point.
  Definition Self := Point.
  
  Global Instance I : _crate.marker.Copy.Trait Self :=
    _crate.marker.Copy.Build_Class _.
End Impl__crate_marker_Copy_for_Point.

(* #[allow(dead_code)] - struct was ignored by the compiler *)
Module Rectangle.
  Record t : Set := {
    top_left : Point;
    bottom_right : Point;
  }.
  
  Global Instance Get_top_left : Notation.Dot "top_left" := {
    Notation.dot '(Build_t x0 _) := x0;
  }.
  Global Instance Get_bottom_right : Notation.Dot "bottom_right" := {
    Notation.dot '(Build_t _ x1) := x1;
  }.
End Rectangle.
Definition Rectangle : Set := Rectangle.t.

Definition origin (_ : unit) : M Point :=
  Pure {| Point.x := 0 (* 0.0 *); Point.y := 0 (* 0.0 *); |}.

Definition boxed_origin (_ : unit) : M (Box Point) :=
  Box::["new"] {| Point.x := 0 (* 0.0 *); Point.y := 0 (* 0.0 *); |}.

(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main (_ : unit) : M unit :=
  let* point := origin tt in
  let* rectangle :=
    let* α0 := origin tt in
    let* α1 := 4 (* 4.0 *).["neg"] in
    Pure
      {|
        Rectangle.top_left := α0;
        Rectangle.bottom_right := {| Point.x := 3 (* 3.0 *); Point.y := α1; |};
      |} in
  let* boxed_rectangle :=
    let* α0 := origin tt in
    let* α1 := 4 (* 4.0 *).["neg"] in
    Box::["new"]
      {|
        Rectangle.top_left := α0;
        Rectangle.bottom_right := {| Point.x := 3 (* 3.0 *); Point.y := α1; |};
      |} in
  let* boxed_point :=
    let* α0 := origin tt in
    Box::["new"] α0 in
  let* box_in_a_box :=
    let* α0 := boxed_origin tt in
    Box::["new"] α0 in
  let* _ :=
    let* _ :=
      let* α0 := mem.size_of_val (addr_of point) in
      let* α1 := format_argument::["new_display"] (addr_of α0) in
      let* α2 :=
        format_arguments::["new_v1"]
          (addr_of [ "Point occupies "; " bytes on the stack
" ])
          (addr_of [ α1 ]) in
      _crate.io._print α2 in
    Pure tt in
  let* _ :=
    let* _ :=
      let* α0 := mem.size_of_val (addr_of rectangle) in
      let* α1 := format_argument::["new_display"] (addr_of α0) in
      let* α2 :=
        format_arguments::["new_v1"]
          (addr_of [ "Rectangle occupies "; " bytes on the stack
" ])
          (addr_of [ α1 ]) in
      _crate.io._print α2 in
    Pure tt in
  let* _ :=
    let* _ :=
      let* α0 := mem.size_of_val (addr_of boxed_point) in
      let* α1 := format_argument::["new_display"] (addr_of α0) in
      let* α2 :=
        format_arguments::["new_v1"]
          (addr_of [ "Boxed point occupies "; " bytes on the stack
" ])
          (addr_of [ α1 ]) in
      _crate.io._print α2 in
    Pure tt in
  let* _ :=
    let* _ :=
      let* α0 := mem.size_of_val (addr_of boxed_rectangle) in
      let* α1 := format_argument::["new_display"] (addr_of α0) in
      let* α2 :=
        format_arguments::["new_v1"]
          (addr_of [ "Boxed rectangle occupies "; " bytes on the stack
" ])
          (addr_of [ α1 ]) in
      _crate.io._print α2 in
    Pure tt in
  let* _ :=
    let* _ :=
      let* α0 := mem.size_of_val (addr_of box_in_a_box) in
      let* α1 := format_argument::["new_display"] (addr_of α0) in
      let* α2 :=
        format_arguments::["new_v1"]
          (addr_of [ "Boxed box occupies "; " bytes on the stack
" ])
          (addr_of [ α1 ]) in
      _crate.io._print α2 in
    Pure tt in
  let* unboxed_point := boxed_point.["deref"] in
  let* _ :=
    let* _ :=
      let* α0 := mem.size_of_val (addr_of unboxed_point) in
      let* α1 := format_argument::["new_display"] (addr_of α0) in
      let* α2 :=
        format_arguments::["new_v1"]
          (addr_of [ "Unboxed point occupies "; " bytes on the stack
" ])
          (addr_of [ α1 ]) in
      _crate.io._print α2 in
    Pure tt in
  Pure tt.
