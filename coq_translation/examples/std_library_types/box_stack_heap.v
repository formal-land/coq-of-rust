(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Import Root.std.prelude.rust_2015.

Module mem := std.mem.

(* #[allow(dead_code)] - struct was ignored by the compiler *)
Module Point.
  Record t : Set := {
    x : f64;
    y : f64;
  }.
  
  Global Instance Get_x : Notation.Dot "x" := {
    Notation.dot '(Build_t x0 _) := x0;
  }.
  Global Instance Get_y : Notation.Dot "y" := {
    Notation.dot '(Build_t _ x1) := x1;
  }.
End Point.
Definition Point : Set := Point.t.

Module Impl__crate_fmt_Debug_for_Point.
  Definition Self := Point.
  
  (* #[allow(dead_code)] - function was ignored by the compiler *)
  Definition fmt
      (self : ref Self)
      (f : mut_ref _crate.fmt.Formatter)
      : M _crate.fmt.Result :=
    _crate.fmt.Formatter::["debug_struct_field2_finish"]
      f
      "Point"
      "x"
      (deref self.["x"])
      "y"
      (deref (deref self.["y"])).
  
  Global Instance Method_fmt : Notation.Dot "fmt" := {
    Notation.dot := fmt;
  }.
  
  Global Instance I : _crate.fmt.Debug.Trait Self := {
    _crate.fmt.Debug.fmt := fmt;
  }.
End Impl__crate_fmt_Debug_for_Point.

Module Impl__crate_clone_Clone_for_Point.
  Definition Self := Point.
  
  (* #[allow(dead_code)] - function was ignored by the compiler *)
  Definition clone (self : ref Self) : M Point :=
    let _ := tt in
    self.["deref"].
  
  Global Instance Method_clone : Notation.Dot "clone" := {
    Notation.dot := clone;
  }.
  
  Global Instance I : _crate.clone.Clone.Trait Self := {
    _crate.clone.Clone.clone := clone;
  }.
End Impl__crate_clone_Clone_for_Point.

Module Impl__crate_marker_Copy_for_Point.
  Definition Self := Point.
  
  Global Instance I : _crate.marker.Copy.Trait Self :=
    _crate.marker.Copy.Build_Class _.
End Impl__crate_marker_Copy_for_Point.

(* #[allow(dead_code)] - struct was ignored by the compiler *)
Module Rectangle.
  Record t : Set := {
    top_left : Point;
    bottom_right : Point;
  }.
  
  Global Instance Get_top_left : Notation.Dot "top_left" := {
    Notation.dot '(Build_t x0 _) := x0;
  }.
  Global Instance Get_bottom_right : Notation.Dot "bottom_right" := {
    Notation.dot '(Build_t _ x1) := x1;
  }.
End Rectangle.
Definition Rectangle : Set := Rectangle.t.

Definition origin (_ : unit) : M Point :=
  Pure {| Point.x := 0 (* 0.0 *); Point.y := 0 (* 0.0 *); |}.

Definition boxed_origin (_ : unit) : M (Box Point) :=
  Box::["new"] {| Point.x := 0 (* 0.0 *); Point.y := 0 (* 0.0 *); |}.

(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main (_ : unit) : M unit :=
  let* point := origin tt in
  let rectangle :=
    {|
      Rectangle.top_left := origin tt;
      Rectangle.bottom_right :=
        {| Point.x := 3 (* 3.0 *); Point.y := 4 (* 4.0 *).["neg"]; |};
    |} in
  let* boxed_rectangle :=
    Box::["new"]
      {|
        Rectangle.top_left := origin tt;
        Rectangle.bottom_right :=
          {| Point.x := 3 (* 3.0 *); Point.y := 4 (* 4.0 *).["neg"]; |};
      |} in
  let* α0 := origin tt in
  let* boxed_point := Box::["new"] α0 in
  let* α1 := boxed_origin tt in
  let* box_in_a_box := Box::["new"] α1 in
  let* α2 := mem.size_of_val (deref point) in
  let* α3 := format_argument::["new_display"] (deref α2) in
  let* α4 :=
    format_arguments::["new_v1"]
      (deref [ "Point occupies "; " bytes on the stack
" ])
      (deref [ α3 ]) in
  let* _ := _crate.io._print α4 in
  let _ := tt in
  let* α5 := mem.size_of_val (deref rectangle) in
  let* α6 := format_argument::["new_display"] (deref α5) in
  let* α7 :=
    format_arguments::["new_v1"]
      (deref [ "Rectangle occupies "; " bytes on the stack
" ])
      (deref [ α6 ]) in
  let* _ := _crate.io._print α7 in
  let _ := tt in
  let* α8 := mem.size_of_val (deref boxed_point) in
  let* α9 := format_argument::["new_display"] (deref α8) in
  let* α10 :=
    format_arguments::["new_v1"]
      (deref [ "Boxed point occupies "; " bytes on the stack
" ])
      (deref [ α9 ]) in
  let* _ := _crate.io._print α10 in
  let _ := tt in
  let* α11 := mem.size_of_val (deref boxed_rectangle) in
  let* α12 := format_argument::["new_display"] (deref α11) in
  let* α13 :=
    format_arguments::["new_v1"]
      (deref [ "Boxed rectangle occupies "; " bytes on the stack
" ])
      (deref [ α12 ]) in
  let* _ := _crate.io._print α13 in
  let _ := tt in
  let* α14 := mem.size_of_val (deref box_in_a_box) in
  let* α15 := format_argument::["new_display"] (deref α14) in
  let* α16 :=
    format_arguments::["new_v1"]
      (deref [ "Boxed box occupies "; " bytes on the stack
" ])
      (deref [ α15 ]) in
  let* _ := _crate.io._print α16 in
  let _ := tt in
  let* unboxed_point := boxed_point.["deref"] in
  let* α17 := mem.size_of_val (deref unboxed_point) in
  let* α18 := format_argument::["new_display"] (deref α17) in
  let* α19 :=
    format_arguments::["new_v1"]
      (deref [ "Unboxed point occupies "; " bytes on the stack
" ])
      (deref [ α18 ]) in
  let* _ := _crate.io._print α19 in
  let _ := tt in
  Pure tt.
