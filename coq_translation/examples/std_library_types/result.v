(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Import Root.std.prelude.rust_2015.

Module checked.
  Module MathError.
    Inductive t : Set :=
    | DivisionByZero
    | NonPositiveLogarithm
    | NegativeSquareRoot.
  End MathError.
  Definition MathError := MathError.t.
  
  Module Impl__crate_fmt_Debug_for_MathError.
    Definition Self := MathError.
    
    Definition fmt
        (self : ref Self)
        (f : mut_ref _crate.fmt.Formatter)
        : M _crate.fmt.Result :=
      let* α0 :=
        match self with
        | MathError.DivisionByZero => Pure "DivisionByZero"
        | MathError.NonPositiveLogarithm => Pure "NonPositiveLogarithm"
        | MathError.NegativeSquareRoot => Pure "NegativeSquareRoot"
        end in
      _crate.fmt.Formatter::["write_str"] f α0.
    
    Global Instance Method_fmt : Notation.Dot "fmt" := {
      Notation.dot := fmt;
    }.
    
    Global Instance I : _crate.fmt.Debug.Trait Self := {
      _crate.fmt.Debug.fmt := fmt;
    }.
  End Impl__crate_fmt_Debug_for_MathError.
  
  Definition MathResult : Set := Result f64 MathError.
  
  Definition div (x : f64) (y : f64) : M MathResult :=
    let* α0 := y.["eq"] 0 (* 0.0 *) in
    if (α0 : bool) then
      Pure (Err MathError.DivisionByZero)
    else
      let* α0 := x.["div"] y in
      Pure (Ok α0).
  
  Definition sqrt (x : f64) : M MathResult :=
    let* α0 := x.["lt"] 0 (* 0.0 *) in
    if (α0 : bool) then
      Pure (Err MathError.NegativeSquareRoot)
    else
      let* α0 := x.["sqrt"] in
      Pure (Ok α0).
  
  Definition ln (x : f64) : M MathResult :=
    let* α0 := x.["le"] 0 (* 0.0 *) in
    if (α0 : bool) then
      Pure (Err MathError.NonPositiveLogarithm)
    else
      let* α0 := x.["ln"] in
      Pure (Ok α0).
End checked.

Module MathError.
  Inductive t : Set :=
  | DivisionByZero
  | NonPositiveLogarithm
  | NegativeSquareRoot.
End MathError.
Definition MathError := MathError.t.

Module Impl__crate_fmt_Debug_for_MathError.
  Definition Self := MathError.
  
  Definition fmt
      (self : ref Self)
      (f : mut_ref _crate.fmt.Formatter)
      : M _crate.fmt.Result :=
    let* α0 :=
      match self with
      | MathError.DivisionByZero => Pure "DivisionByZero"
      | MathError.NonPositiveLogarithm => Pure "NonPositiveLogarithm"
      | MathError.NegativeSquareRoot => Pure "NegativeSquareRoot"
      end in
    _crate.fmt.Formatter::["write_str"] f α0.
  
  Global Instance Method_fmt : Notation.Dot "fmt" := {
    Notation.dot := fmt;
  }.
  
  Global Instance I : _crate.fmt.Debug.Trait Self := {
    _crate.fmt.Debug.fmt := fmt;
  }.
End Impl__crate_fmt_Debug_for_MathError.

Definition MathResult : Set := Result f64 MathError.

Definition div (x : f64) (y : f64) : M MathResult :=
  let* α0 := y.["eq"] 0 (* 0.0 *) in
  if (α0 : bool) then
    Pure (Err MathError.DivisionByZero)
  else
    let* α0 := x.["div"] y in
    Pure (Ok α0).

Definition sqrt (x : f64) : M MathResult :=
  let* α0 := x.["lt"] 0 (* 0.0 *) in
  if (α0 : bool) then
    Pure (Err MathError.NegativeSquareRoot)
  else
    let* α0 := x.["sqrt"] in
    Pure (Ok α0).

Definition ln (x : f64) : M MathResult :=
  let* α0 := x.["le"] 0 (* 0.0 *) in
  if (α0 : bool) then
    Pure (Err MathError.NonPositiveLogarithm)
  else
    let* α0 := x.["ln"] in
    Pure (Ok α0).

Definition op (x : f64) (y : f64) : M f64 :=
  let* α0 := checked.div x y in
  match α0 with
  | Err why =>
    let* α0 := format_argument::["new_debug"] (addr_of why) in
    let* α1 := format_arguments::["new_v1"] (addr_of [ "" ]) (addr_of [ α0 ]) in
    _crate.rt.panic_fmt α1
  | Ok ratio =>
    let* α0 := checked.ln ratio in
    match α0 with
    | Err why =>
      let* α0 := format_argument::["new_debug"] (addr_of why) in
      let* α1 :=
        format_arguments::["new_v1"] (addr_of [ "" ]) (addr_of [ α0 ]) in
      _crate.rt.panic_fmt α1
    | Ok ln =>
      let* α0 := checked.sqrt ln in
      match α0 with
      | Err why =>
        let* α0 := format_argument::["new_debug"] (addr_of why) in
        let* α1 :=
          format_arguments::["new_v1"] (addr_of [ "" ]) (addr_of [ α0 ]) in
        _crate.rt.panic_fmt α1
      | Ok sqrt => Pure sqrt
      end
    end
  end.

(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main (_ : unit) : M unit :=
  let* _ :=
    let* _ :=
      let* α0 := op 1 (* 1.0 *) 10 (* 10.0 *) in
      let* α1 := format_argument::["new_display"] (addr_of α0) in
      let* α2 :=
        format_arguments::["new_v1"] (addr_of [ ""; "
" ]) (addr_of [ α1 ]) in
      _crate.io._print α2 in
    Pure tt in
  Pure tt.
