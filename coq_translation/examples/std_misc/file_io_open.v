(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Import Root.std.prelude.rust_2015.

Module File := std.fs.File.
Definition File := File.t.

Import std.io.prelude.

Module Path := std.path.Path.
Definition Path := Path.t.

(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main (_ : unit) : M unit :=
  let* path := Path::["new"] "hello.txt" in
  let* display := path.["display"] in
  let* α0 := File::["open"] (deref path) in
  let* file :=
    match α0 with
    | Err why =>
      let* α0 := format_argument::["new_display"] (deref display) in
      let* α1 := format_argument::["new_display"] (deref why) in
      let* α2 :=
        format_arguments::["new_v1"]
          (deref [ "couldn't open "; ": " ])
          (deref [ α0; α1 ]) in
      _crate.rt.panic_fmt α2
    | Ok file => Pure file
    end in
  let* s := String::["new"] tt in
  let* α1 := file.["read_to_string"] (deref s) in
  match α1 with
  | Err why =>
    let* α0 := format_argument::["new_display"] (deref display) in
    let* α1 := format_argument::["new_display"] (deref why) in
    let* α2 :=
      format_arguments::["new_v1"]
        (deref [ "couldn't read "; ": " ])
        (deref [ α0; α1 ]) in
    _crate.rt.panic_fmt α2
  | Ok _ =>
    let* α0 := format_argument::["new_display"] (deref display) in
    let* α1 := format_argument::["new_display"] (deref s) in
    let* α2 :=
      format_arguments::["new_v1"]
        (deref [ ""; " contains:
" ])
        (deref [ α0; α1 ]) in
    let* _ := _crate.io._print α2 in
    Pure tt
  end.
