(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Import Root.std.prelude.rust_2015.

Module thread := std.thread.

(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main (_ : unit) : M unit :=
  let data :=
    "86967897737416471853297327050364959
11861322575564723963297542624962850
70856234701860851907960690014725639
38397966707106094172783238747669219
52380795257888236525459303330302837
58495327135744041048897885734297812
69920216438980873548808413720956532
16278424637452589860345374828574668" in
  let* children := _crate.vec.Vec::["new"] tt in
  let* chunked_data := data.["split_whitespace"] in
  let* α0 := chunked_data.["enumerate"] in
  let* α1 := LangItem α0 in
  let* _ :=
    match α1 with
    | iter =>
      loop
        let* α0 := LangItem (deref iter) in
        let* _ :=
          match α0 with
          | None => Pure Break
          | Some {| Some.0 := (i, data_segment); |} =>
            let* α0 := format_argument::["new_display"] (deref i) in
            let* α1 := format_argument::["new_display"] (deref data_segment) in
            let* α2 :=
              format_arguments::["new_v1"]
                (deref [ "data segment "; " is ""; ""
" ])
                (deref [ α0; α1 ]) in
            let* _ := _crate.io._print α2 in
            let _ := tt in
            let* α3 :=
              thread.spawn
                (fun  =>
                  let* α0 := data_segment.["chars"] in
                  let* α1 :=
                    α0.["map"]
                      (fun c =>
                        let* α0 := c.["to_digit"] 10 in
                        α0.["expect"] "should be a digit") in
                  let* result := α1.["sum"] in
                  let* α2 := format_argument::["new_display"] (deref i) in
                  let* α3 := format_argument::["new_display"] (deref result) in
                  let* α4 :=
                    format_arguments::["new_v1"]
                      (deref [ "processed segment "; ", result="; "
" ])
                      (deref [ α2; α3 ]) in
                  let* _ := _crate.io._print α4 in
                  let _ := tt in
                  Pure result) in
            let* _ := children.["push"] α3 in
            Pure tt
          end in
        Pure tt
        from
        for
    end in
  let* α2 := children.["into_iter"] in
  let* α3 :=
    α2.["map"]
      (fun c =>
        let* α0 := c.["join"] in
        α0.["unwrap"]) in
  let* final_result := α3.["sum"] in
  let* α4 := format_argument::["new_display"] (deref final_result) in
  let* α5 :=
    format_arguments::["new_v1"]
      (deref [ "Final sum result: "; "
" ])
      (deref [ α4 ]) in
  let* _ := _crate.io._print α5 in
  let _ := tt in
  Pure tt.
