(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Import Root.std.prelude.rust_2015.

Module Centimeters.
  Record t : Set := { _ : f64;}.
  
  Global Instance Get_0 : Notation.Dot 0 := {
    Notation.dot '(Build_t x0) := x0;
  }.
End Centimeters.
Definition Centimeters := Centimeters.t.

Module Impl__crate_marker_StructuralPartialEq_for_Centimeters.
  Definition Self := Centimeters.
  
  Global Instance I : _crate.marker.StructuralPartialEq.Trait Self :=
    _crate.marker.StructuralPartialEq.Build_Class _.
End Impl__crate_marker_StructuralPartialEq_for_Centimeters.

Module Impl__crate_cmp_PartialEq_for_Centimeters.
  Definition Self := Centimeters.
  
  Definition eq (self : ref Self) (other : ref Centimeters) : M bool :=
    (self.[0]).["eq"] (other.[0]).
  
  Global Instance Method_eq : Notation.Dot "eq" := {
    Notation.dot := eq;
  }.
  
  Global Instance I : _crate.cmp.PartialEq.Trait Self := {
    _crate.cmp.PartialEq.eq := eq;
  }.
End Impl__crate_cmp_PartialEq_for_Centimeters.

Module Impl__crate_cmp_PartialOrd_for_Centimeters.
  Definition Self := Centimeters.
  
  Definition partial_cmp
      (self : ref Self)
      (other : ref Centimeters)
      : M (_crate.option.Option _crate.cmp.Ordering) :=
    _crate.cmp.PartialOrd.partial_cmp (deref (self.[0])) (deref (other.[0])).
  
  Global Instance Method_partial_cmp : Notation.Dot "partial_cmp" := {
    Notation.dot := partial_cmp;
  }.
  
  Global Instance I : _crate.cmp.PartialOrd.Trait Self := {
    _crate.cmp.PartialOrd.partial_cmp := partial_cmp;
  }.
End Impl__crate_cmp_PartialOrd_for_Centimeters.

Module Inches.
  Record t : Set := { _ : i32;}.
  
  Global Instance Get_0 : Notation.Dot 0 := {
    Notation.dot '(Build_t x0) := x0;
  }.
End Inches.
Definition Inches := Inches.t.

Module Impl__crate_fmt_Debug_for_Inches.
  Definition Self := Inches.
  
  Definition fmt
      (self : ref Self)
      (f : mut_ref _crate.fmt.Formatter)
      : M _crate.fmt.Result :=
    _crate.fmt.Formatter::["debug_tuple_field1_finish"]
      f
      "Inches"
      (deref (deref (self.[0]))).
  
  Global Instance Method_fmt : Notation.Dot "fmt" := {
    Notation.dot := fmt;
  }.
  
  Global Instance I : _crate.fmt.Debug.Trait Self := {
    _crate.fmt.Debug.fmt := fmt;
  }.
End Impl__crate_fmt_Debug_for_Inches.

Module ImplInches.
  Definition Self := Inches.
  
  Definition to_centimeters (self : ref Self) : M Centimeters :=
    let 'Inches.Build_t inches := self in
    let* α0 := (cast inches f64).["mul"] 3 (* 2.54 *) in
    Pure Centimeters.Build_t α0.
  
  Global Instance Method_to_centimeters : Notation.Dot "to_centimeters" := {
    Notation.dot := to_centimeters;
  }.
End ImplInches.

Module Seconds.
  Record t : Set := { _ : i32;}.
  
  Global Instance Get_0 : Notation.Dot 0 := {
    Notation.dot '(Build_t x0) := x0;
  }.
End Seconds.
Definition Seconds := Seconds.t.

(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main (_ : unit) : M unit :=
  let _one_second := Seconds.Build_t 1 in
  let foot := Inches.Build_t 12 in
  let* α0 := format_argument::["new_debug"] (deref foot) in
  let* α1 :=
    format_arguments::["new_v1"]
      (deref [ "One foot equals "; "
" ])
      (deref [ α0 ]) in
  let* _ := _crate.io._print α1 in
  let _ := tt in
  let meter := Centimeters.Build_t 100 (* 100.0 *) in
  let* α2 := foot.["to_centimeters"] in
  let* α3 := α2.["lt"] meter in
  let* cmp :=
    if (α3 : bool) then
      Pure "smaller"
    else
      Pure "bigger" in
  let* α4 := format_argument::["new_display"] (deref cmp) in
  let* α5 :=
    format_arguments::["new_v1"]
      (deref [ "One foot is "; " than one meter.
" ])
      (deref [ α4 ]) in
  let* _ := _crate.io._print α5 in
  let _ := tt in
  Pure tt.
