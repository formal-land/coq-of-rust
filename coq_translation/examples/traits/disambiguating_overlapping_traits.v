(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Import Root.std.prelude.rust_2015.

Module UsernameWidget.
  Class Trait (Self : Set) : Set := {
    get : (ref Self) -> String;
  }.
  
  Global Instance Method_get `(Trait) : Notation.Dot "get" := {
    Notation.dot := get;
  }.
End UsernameWidget.

Module AgeWidget.
  Class Trait (Self : Set) : Set := {
    get : (ref Self) -> u8;
  }.
  
  Global Instance Method_get `(Trait) : Notation.Dot "get" := {
    Notation.dot := get;
  }.
End AgeWidget.

Module Form.
  Record t : Set := {
    username : String;
    age : u8;
  }.
  
  Global Instance Get_username : Notation.Dot "username" := {
    Notation.dot '(Build_t x0 _) := x0;
  }.
  Global Instance Get_age : Notation.Dot "age" := {
    Notation.dot '(Build_t _ x1) := x1;
  }.
End Form.
Definition Form : Set := Form.t.

Module Impl_UsernameWidget_for_Form.
  Definition Self := Form.
  
  Definition get (self : ref Self) : M String := self.["username"].["clone"].
  
  Global Instance Method_get : Notation.Dot "get" := {
    Notation.dot := get;
  }.
  
  Global Instance I : UsernameWidget.Trait Self := {
    UsernameWidget.get := get;
  }.
End Impl_UsernameWidget_for_Form.

Module Impl_AgeWidget_for_Form.
  Definition Self := Form.
  
  Definition get (self : ref Self) : M u8 := Pure self.["age"].
  
  Global Instance Method_get : Notation.Dot "get" := {
    Notation.dot := get;
  }.
  
  Global Instance I : AgeWidget.Trait Self := {
    AgeWidget.get := get;
  }.
End Impl_AgeWidget_for_Form.

(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main (_ : unit) : M unit :=
  let* form :=
    let* α0 := "rustacean".["to_owned"] in
    Pure {| Form.username := α0; Form.age := 28; |} in
  let* username := UsernameWidget.get (addr_of form) in
  let* _ :=
    let* α0 := "rustacean".["to_owned"] in
    match (addr_of α0, addr_of username) with
    | (left_val, right_val) =>
      let* α0 := left_val.["deref"] in
      let* α1 := right_val.["deref"] in
      let* α2 := α0.["eq"] α1 in
      let* α3 := α2.["not"] in
      if (α3 : bool) then
        let kind := _crate.panicking.AssertKind.Eq in
        let* _ :=
          let* α0 := left_val.["deref"] in
          let* α1 := right_val.["deref"] in
          _crate.panicking.assert_failed
            kind
            (addr_of α0)
            (addr_of α1)
            _crate.option.Option.None in
        Pure tt
      else
        Pure tt
    end in
  let* age := AgeWidget.get (addr_of form) in
  let* _ :=
    match (addr_of 28, addr_of age) with
    | (left_val, right_val) =>
      let* α0 := left_val.["deref"] in
      let* α1 := right_val.["deref"] in
      let* α2 := α0.["eq"] α1 in
      let* α3 := α2.["not"] in
      if (α3 : bool) then
        let kind := _crate.panicking.AssertKind.Eq in
        let* _ :=
          let* α0 := left_val.["deref"] in
          let* α1 := right_val.["deref"] in
          _crate.panicking.assert_failed
            kind
            (addr_of α0)
            (addr_of α1)
            _crate.option.Option.None in
        Pure tt
      else
        Pure tt
    end in
  Pure tt.
