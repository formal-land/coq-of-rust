(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Import Root.std.prelude.rust_2015.

Module Fibonacci.
  Record t : Set := {
    curr : u32;
    next : u32;
  }.
  
  Global Instance Get_curr : Notation.Dot "curr" := {
    Notation.dot '(Build_t x0 _) := x0;
  }.
  Global Instance Get_next : Notation.Dot "next" := {
    Notation.dot '(Build_t _ x1) := x1;
  }.
End Fibonacci.
Definition Fibonacci : Set := Fibonacci.t.

Module Impl_Iterator_for_Fibonacci.
  Definition Self := Fibonacci.
  
  Definition Item : Set := u32.
  
  Definition next (self : mut_ref Self) : Option ImplSelf.Item :=
    let current := self.["curr"] in
    let _ := assign self.["curr"] self.["next"] in
    let _ := assign self.["next"] (current.["add"] self.["next"]) in
    Some current.
  
  Global Instance Method_next : Notation.Dot "next" := {
    Notation.dot := next;
  }.
  
  Global Instance I : Iterator.Trait Self := {
    Iterator.next := next;
  }.
End Impl_Iterator_for_Fibonacci.

Definition fibonacci (_ : unit) : Fibonacci :=
  {| Fibonacci.curr := 0; Fibonacci.next := 1; |}.

(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main (_ : unit) : unit :=
  let sequence := Range {| Range.start := 0; Range.end := 3; |} in
  let _ :=
    let _ :=
      _crate.io._print
        (format_arguments::["new_const"]
          [ "Four consecutive `next` calls on 0..3
" ]) in
    tt in
  let _ :=
    let _ :=
      _crate.io._print
        (format_arguments::["new_v1"]
          [ "> "; "
" ]
          [ format_argument::["new_debug"] sequence.["next"] ]) in
    tt in
  let _ :=
    let _ :=
      _crate.io._print
        (format_arguments::["new_v1"]
          [ "> "; "
" ]
          [ format_argument::["new_debug"] sequence.["next"] ]) in
    tt in
  let _ :=
    let _ :=
      _crate.io._print
        (format_arguments::["new_v1"]
          [ "> "; "
" ]
          [ format_argument::["new_debug"] sequence.["next"] ]) in
    tt in
  let _ :=
    let _ :=
      _crate.io._print
        (format_arguments::["new_v1"]
          [ "> "; "
" ]
          [ format_argument::["new_debug"] sequence.["next"] ]) in
    tt in
  let _ :=
    let _ :=
      _crate.io._print
        (format_arguments::["new_const"]
          [ "Iterate through 0..3 using `for`
" ]) in
    tt in
  let _ :=
    match LangItem Range {| Range.start := 0; Range.end := 3; |} with
    | iter =>
      loop
        let _ :=
          match LangItem iter with
          | None => Break
          | Some {| Some.0 := i; |} =>
            let _ :=
              let _ :=
                _crate.io._print
                  (format_arguments::["new_v1"]
                    [ "> "; "
" ]
                    [ format_argument::["new_display"] i ]) in
              tt in
            tt
          end in
        tt
        from
        for
    end in
  let _ :=
    let _ :=
      _crate.io._print
        (format_arguments::["new_const"]
          [ "The first four terms of the Fibonacci sequence are: 
" ]) in
    tt in
  let _ :=
    match LangItem ((fibonacci tt).["take"] 4) with
    | iter =>
      loop
        let _ :=
          match LangItem iter with
          | None => Break
          | Some {| Some.0 := i; |} =>
            let _ :=
              let _ :=
                _crate.io._print
                  (format_arguments::["new_v1"]
                    [ "> "; "
" ]
                    [ format_argument::["new_display"] i ]) in
              tt in
            tt
          end in
        tt
        from
        for
    end in
  let _ :=
    let _ :=
      _crate.io._print
        (format_arguments::["new_const"]
          [ "The next four terms of the Fibonacci sequence are: 
" ]) in
    tt in
  let _ :=
    match LangItem (((fibonacci tt).["skip"] 4).["take"] 4) with
    | iter =>
      loop
        let _ :=
          match LangItem iter with
          | None => Break
          | Some {| Some.0 := i; |} =>
            let _ :=
              let _ :=
                _crate.io._print
                  (format_arguments::["new_v1"]
                    [ "> "; "
" ]
                    [ format_argument::["new_display"] i ]) in
              tt in
            tt
          end in
        tt
        from
        for
    end in
  let array := [ 1; 3; 3; 7 ] in
  let _ :=
    let _ :=
      _crate.io._print
        (format_arguments::["new_v1"]
          [ "Iterate the following array "; "
" ]
          [ format_argument::["new_debug"] array ]) in
    tt in
  match LangItem array.["iter"] with
  | iter =>
    loop
      let _ :=
        match LangItem iter with
        | None => Break
        | Some {| Some.0 := i; |} =>
          let _ :=
            let _ :=
              _crate.io._print
                (format_arguments::["new_v1"]
                  [ "> "; "
" ]
                  [ format_argument::["new_display"] i ]) in
            tt in
          tt
        end in
      tt
      from
      for
  end.
