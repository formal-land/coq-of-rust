(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Import Root.std.prelude.rust_2015.

Module ops := std.ops.

Module Foo.
  Inductive t : Set := Build.
End Foo.
Definition Foo := Foo.t.

Module Bar.
  Inductive t : Set := Build.
End Bar.
Definition Bar := Bar.t.

Module FooBar.
  Inductive t : Set := Build.
End FooBar.
Definition FooBar := FooBar.t.

Module Impl__crate_fmt_Debug_for_FooBar.
  Definition Self := FooBar.
  
  Definition fmt
      (self : ref Self)
      (f : mut_ref _crate.fmt.Formatter)
      : _crate.fmt.Result :=
    _crate.fmt.Formatter::["write_str"] f "FooBar".
  
  Global Instance Method_fmt : Notation.Dot "fmt" := {
    Notation.dot := fmt;
  }.
  
  Global Instance I : _crate.fmt.Debug.Trait Self := {
    _crate.fmt.Debug.fmt := fmt;
  }.
End Impl__crate_fmt_Debug_for_FooBar.

Module BarFoo.
  Inductive t : Set := Build.
End BarFoo.
Definition BarFoo := BarFoo.t.

Module Impl__crate_fmt_Debug_for_BarFoo.
  Definition Self := BarFoo.
  
  Definition fmt
      (self : ref Self)
      (f : mut_ref _crate.fmt.Formatter)
      : _crate.fmt.Result :=
    _crate.fmt.Formatter::["write_str"] f "BarFoo".
  
  Global Instance Method_fmt : Notation.Dot "fmt" := {
    Notation.dot := fmt;
  }.
  
  Global Instance I : _crate.fmt.Debug.Trait Self := {
    _crate.fmt.Debug.fmt := fmt;
  }.
End Impl__crate_fmt_Debug_for_BarFoo.

Module Impl_ops_Add_for_Foo.
  Definition Self := Foo.
  
  Definition Output : Set := FooBar.
  
  Definition add (self : Self) (_rhs : Bar) : FooBar :=
    _crate.io._print
      (format_arguments::["new_const"] [ "> Foo.add(Bar) was called
" ]) ;;
    tt ;;
    FooBar.Build.
  
  Global Instance Method_add : Notation.Dot "add" := {
    Notation.dot := add;
  }.
  
  Global Instance I : ops.Add.Trait Self (Some Bar) := {
    ops.Add.add := add;
  }.
End Impl_ops_Add_for_Foo.

Module Impl_ops_Add_for_Bar.
  Definition Self := Bar.
  
  Definition Output : Set := BarFoo.
  
  Definition add (self : Self) (_rhs : Foo) : BarFoo :=
    _crate.io._print
      (format_arguments::["new_const"] [ "> Bar.add(Foo) was called
" ]) ;;
    tt ;;
    BarFoo.Build.
  
  Global Instance Method_add : Notation.Dot "add" := {
    Notation.dot := add;
  }.
  
  Global Instance I : ops.Add.Trait Self (Some Foo) := {
    ops.Add.add := add;
  }.
End Impl_ops_Add_for_Bar.

(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main (_ : unit) : unit :=
  _crate.io._print
    (format_arguments::["new_v1"]
      [ "Foo + Bar = "; "
" ]
      [ format_argument::["new_debug"] (Foo.Build.["add"] Bar.Build) ]) ;;
  tt ;;
  _crate.io._print
    (format_arguments::["new_v1"]
      [ "Bar + Foo = "; "
" ]
      [ format_argument::["new_debug"] (Bar.Build.["add"] Foo.Build) ]) ;;
  tt ;;
  tt.
