(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Import Root.std.prelude.rust_2015.

Module ops := std.ops.

Module Foo.
  Inductive t : Set := Build.
End Foo.
Definition Foo := Foo.t.

Module Bar.
  Inductive t : Set := Build.
End Bar.
Definition Bar := Bar.t.

Module FooBar.
  Inductive t : Set := Build.
End FooBar.
Definition FooBar := FooBar.t.

Module Impl__crate_fmt_Debug_for_FooBar.
  Definition Self := FooBar.
  
  Definition fmt
      (self : ref Self)
      (f : mut_ref _crate.fmt.Formatter)
      : M _crate.fmt.Result :=
    _crate.fmt.Formatter::["write_str"] f "FooBar".
  
  Global Instance Method_fmt : Notation.Dot "fmt" := {
    Notation.dot := fmt;
  }.
  
  Global Instance I : _crate.fmt.Debug.Trait Self := {
    _crate.fmt.Debug.fmt := fmt;
  }.
End Impl__crate_fmt_Debug_for_FooBar.

Module BarFoo.
  Inductive t : Set := Build.
End BarFoo.
Definition BarFoo := BarFoo.t.

Module Impl__crate_fmt_Debug_for_BarFoo.
  Definition Self := BarFoo.
  
  Definition fmt
      (self : ref Self)
      (f : mut_ref _crate.fmt.Formatter)
      : M _crate.fmt.Result :=
    _crate.fmt.Formatter::["write_str"] f "BarFoo".
  
  Global Instance Method_fmt : Notation.Dot "fmt" := {
    Notation.dot := fmt;
  }.
  
  Global Instance I : _crate.fmt.Debug.Trait Self := {
    _crate.fmt.Debug.fmt := fmt;
  }.
End Impl__crate_fmt_Debug_for_BarFoo.

Module Impl_ops_Add_for_Foo.
  Definition Self := Foo.
  
  Definition Output : Set := FooBar.
  
  Definition add (self : Self) (_rhs : Bar) : M FooBar :=
    let* _ :=
      let* _ :=
        let* α0 :=
          format_arguments::["new_const"]
            (addr_of [ "> Foo.add(Bar) was called
" ]) in
        _crate.io._print α0 in
      Pure tt in
    Pure FooBar.Build.
  
  Global Instance Method_add : Notation.Dot "add" := {
    Notation.dot := add;
  }.
  
  Global Instance I : ops.Add.Trait Self (Some Bar) := {
    ops.Add.add := add;
  }.
End Impl_ops_Add_for_Foo.

Module Impl_ops_Add_for_Bar.
  Definition Self := Bar.
  
  Definition Output : Set := BarFoo.
  
  Definition add (self : Self) (_rhs : Foo) : M BarFoo :=
    let* _ :=
      let* _ :=
        let* α0 :=
          format_arguments::["new_const"]
            (addr_of [ "> Bar.add(Foo) was called
" ]) in
        _crate.io._print α0 in
      Pure tt in
    Pure BarFoo.Build.
  
  Global Instance Method_add : Notation.Dot "add" := {
    Notation.dot := add;
  }.
  
  Global Instance I : ops.Add.Trait Self (Some Foo) := {
    ops.Add.add := add;
  }.
End Impl_ops_Add_for_Bar.

(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main (_ : unit) : M unit :=
  let* _ :=
    let* _ :=
      let* α0 := Foo.Build.["add"] Bar.Build in
      let* α1 := format_argument::["new_debug"] (addr_of α0) in
      let* α2 :=
        format_arguments::["new_v1"]
          (addr_of [ "Foo + Bar = "; "
" ])
          (addr_of [ α1 ]) in
      _crate.io._print α2 in
    Pure tt in
  let* _ :=
    let* _ :=
      let* α0 := Bar.Build.["add"] Foo.Build in
      let* α1 := format_argument::["new_debug"] (addr_of α0) in
      let* α2 :=
        format_arguments::["new_v1"]
          (addr_of [ "Bar + Foo = "; "
" ])
          (addr_of [ α1 ]) in
      _crate.io._print α2 in
    Pure tt in
  Pure tt.
