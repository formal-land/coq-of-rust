(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Import Root.std.prelude.rust_2015.

Module Sheep.
  Record t : Set := {
  }.
End Sheep.
Definition Sheep : Set := Sheep.t.

Module Cow.
  Record t : Set := {
  }.
End Cow.
Definition Cow : Set := Cow.t.

Module Animal.
  Class Trait (Self : Set) : Set := {
    noise : (ref Self) -> (ref str);
  }.
  
  Global Instance Method_noise `(Trait) : Notation.Dot "noise" := {
    Notation.dot := noise;
  }.
End Animal.

Module Impl_Animal_for_Sheep.
  Definition Self := Sheep.
  
  Definition noise (self : ref Self) : ref str := "baaaaah!".
  
  Global Instance Method_noise : Notation.Dot "noise" := {
    Notation.dot := noise;
  }.
  
  Global Instance I : Animal.Trait Self := {
    Animal.noise := noise;
  }.
End Impl_Animal_for_Sheep.

Module Impl_Animal_for_Cow.
  Definition Self := Cow.
  
  Definition noise (self : ref Self) : ref str := "moooooo!".
  
  Global Instance Method_noise : Notation.Dot "noise" := {
    Notation.dot := noise;
  }.
  
  Global Instance I : Animal.Trait Self := {
    Animal.noise := noise;
  }.
End Impl_Animal_for_Cow.

Definition random_animal (random_number : f64) : Box TraitObject :=
  if (random_number.["lt"] 1 (* 0.5 *) : bool) then
    Box::["new"] {|  |}
  else
    Box::["new"] {|  |}.

(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main (_ : unit) : unit :=
  let random_number := 0 (* 0.234 *) in
  let animal := random_animal random_number in
  _crate.io._print
    (format_arguments::["new_v1"]
      [ "You've randomly chosen an animal, and it says "; "
" ]
      [ format_argument::["new_display"] animal.["noise"] ]) ;;
  tt ;;
  tt.
