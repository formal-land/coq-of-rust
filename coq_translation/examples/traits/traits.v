(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Import Root.std.prelude.rust_2015.

Module Sheep.
  Record t : Set := {
    naked : bool;
    name : ref str;
  }.
  
  Global Instance Get_naked : Notation.Dot "naked" := {
    Notation.dot '(Build_t x0 _) := x0;
  }.
  Global Instance Get_name : Notation.Dot "name" := {
    Notation.dot '(Build_t _ x1) := x1;
  }.
End Sheep.
Definition Sheep : Set := Sheep.t.

Module Animal.
  Class Trait (Self : Set) : Set := {
    new : (ref str) -> Self;
    name : (ref Self) -> (ref str);
    noise : (ref Self) -> (ref str);
  }.
  
  Global Instance Method_new `(Trait) : Notation.Dot "new" := {
    Notation.dot := new;
  }.
  Global Instance Method_name `(Trait) : Notation.Dot "name" := {
    Notation.dot := name;
  }.
  Global Instance Method_noise `(Trait) : Notation.Dot "noise" := {
    Notation.dot := noise;
  }.
  Global Instance Method_talk `(Trait) : Notation.Dot "talk" := {
    Notation.dot (self : ref Self) :=
      (let* _ :=
        let* _ :=
          let* α0 := self.["name"] in
          let* α1 := format_argument::["new_display"] (addr_of α0) in
          let* α2 := self.["noise"] in
          let* α3 := format_argument::["new_display"] (addr_of α2) in
          let* α4 :=
            format_arguments::["new_v1"]
              (addr_of [ ""; " says "; "
" ])
              (addr_of [ α1; α3 ]) in
          _crate.io._print α4 in
        Pure tt in
      Pure tt
      : M unit);
  }.
End Animal.

Module ImplSheep.
  Definition Self := Sheep.
  
  Definition is_naked (self : ref Self) : M bool := Pure self.["naked"].
  
  Global Instance Method_is_naked : Notation.Dot "is_naked" := {
    Notation.dot := is_naked;
  }.
End ImplSheep.

Module Impl_Animal_for_Sheep.
  Definition Self := Sheep.
  
  Definition new (name : ref str) : M Sheep :=
    Pure {| Sheep.name := name; Sheep.naked := false; |}.
  
  Global Instance AssociatedFunction_new : Notation.DoubleColon Self "new" := {
    Notation.double_colon := new;
  }.
  
  Definition name (self : ref Self) : M (ref str) := Pure self.["name"].
  
  Global Instance Method_name : Notation.Dot "name" := {
    Notation.dot := name;
  }.
  
  Definition noise (self : ref Self) : M (ref str) :=
    let* α0 := self.["is_naked"] in
    if (α0 : bool) then
      Pure "baaaaah?"
    else
      Pure "baaaaah!".
  
  Global Instance Method_noise : Notation.Dot "noise" := {
    Notation.dot := noise;
  }.
  
  Definition talk (self : ref Self) : M unit :=
    let* _ :=
      let* _ :=
        let* α0 := format_argument::["new_display"] (addr_of self.["name"]) in
        let* α1 := self.["noise"] in
        let* α2 := format_argument::["new_display"] (addr_of α1) in
        let* α3 :=
          format_arguments::["new_v1"]
            (addr_of [ ""; " pauses briefly... "; "
" ])
            (addr_of [ α0; α2 ]) in
        _crate.io._print α3 in
      Pure tt in
    Pure tt.
  
  Global Instance Method_talk : Notation.Dot "talk" := {
    Notation.dot := talk;
  }.
  
  Global Instance I : Animal.Trait Self := {
    Animal.new := new;
    Animal.name := name;
    Animal.noise := noise;
  }.
End Impl_Animal_for_Sheep.

Module ImplSheep_2.
  Definition Self := Sheep.
  
  Definition shear (self : mut_ref Self) : M unit :=
    let* α0 := self.["is_naked"] in
    if (α0 : bool) then
      let* _ :=
        let* _ :=
          let* α0 := self.["name"] in
          let* α1 := format_argument::["new_display"] (addr_of α0) in
          let* α2 :=
            format_arguments::["new_v1"]
              (addr_of [ ""; " is already naked...
" ])
              (addr_of [ α1 ]) in
          _crate.io._print α2 in
        Pure tt in
      Pure tt
    else
      let* _ :=
        let* _ :=
          let* α0 := format_argument::["new_display"] (addr_of self.["name"]) in
          let* α1 :=
            format_arguments::["new_v1"]
              (addr_of [ ""; " gets a haircut!
" ])
              (addr_of [ α0 ]) in
          _crate.io._print α1 in
        Pure tt in
      let* _ := assign self.["naked"] true in
      Pure tt.
  
  Global Instance Method_shear : Notation.Dot "shear" := {
    Notation.dot := shear;
  }.
End ImplSheep_2.

(* #[allow(dead_code)] - function was ignored by the compiler *)
Definition main (_ : unit) : M unit :=
  let* dolly :=
    let* α0 := Animal.new "Dolly" in
    Pure (α0 : Sheep) in
  let* _ := dolly.["talk"] in
  let* _ := dolly.["shear"] in
  let* _ := dolly.["talk"] in
  Pure tt.
